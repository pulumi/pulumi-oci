// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Adm.Inputs
{

    public sealed class RemediationRecipeDetectConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("exclusions")]
        private InputList<string>? _exclusions;

        /// <summary>
        /// (Updatable) The list of dependencies to be ignored by the recommendation algorithm. The dependency pattern is matched against the 'group:artifact:version' or the purl of a dependency. An asterisk (*) at the end in the dependency pattern acts as a wildcard and matches zero or more characters.
        /// </summary>
        public InputList<string> Exclusions
        {
            get => _exclusions ?? (_exclusions = new InputList<string>());
            set => _exclusions = value;
        }

        /// <summary>
        /// (Updatable) The maximum Common Vulnerability Scoring System Version 2 (CVSS V2) score. An artifact with a CVSS V2 score below this value is not considered for patching.
        /// </summary>
        [Input("maxPermissibleCvssV2score")]
        public Input<double>? MaxPermissibleCvssV2score { get; set; }

        /// <summary>
        /// (Updatable) The maximum Common Vulnerability Scoring System Version 3 (CVSS V3) score. An artifact with a CVSS V3 score below this value is not considered for patching.
        /// </summary>
        [Input("maxPermissibleCvssV3score")]
        public Input<double>? MaxPermissibleCvssV3score { get; set; }

        /// <summary>
        /// (Updatable) The maximum ADM Severity. An artifact with an ADM Severity below this value is not considered for patching.
        /// </summary>
        [Input("maxPermissibleSeverity")]
        public Input<string>? MaxPermissibleSeverity { get; set; }

        /// <summary>
        /// (Updatable) The upgrade policy for recommendations. The `Nearest` upgrade policy upgrades a dependency to the oldest version that meets both of the following criteria: it is newer than the current version and it is not affected by a vulnerability.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<string>? UpgradePolicy { get; set; }

        public RemediationRecipeDetectConfigurationArgs()
        {
        }
        public static new RemediationRecipeDetectConfigurationArgs Empty => new RemediationRecipeDetectConfigurationArgs();
    }
}
