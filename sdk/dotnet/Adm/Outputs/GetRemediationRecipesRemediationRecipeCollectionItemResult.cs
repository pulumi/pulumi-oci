// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Adm.Outputs
{

    [OutputType]
    public sealed class GetRemediationRecipesRemediationRecipeCollectionItemResult
    {
        /// <summary>
        /// A filter to return only resources that belong to the specified compartment identifier. Required only if the id query param is not specified.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A configuration to define the constraints when detecting vulnerable dependencies and recommending remediations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult> DetectConfigurations;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// A filter to return only resources that match the specified identifier. Required only if the compartmentId query parameter is not specified.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Boolean indicating if a run should be automatically triggered once the Knowledge Base contents are updated.
        /// </summary>
        public readonly bool IsRunTriggeredOnKbChange;
        /// <summary>
        /// The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the knowledge base.
        /// </summary>
        public readonly string KnowledgeBaseId;
        /// <summary>
        /// A network configuration defines the required network characteristics for the remediation run of the recipe to access the source repository and/or verify build services.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult> NetworkConfigurations;
        /// <summary>
        /// A configuration for the Source Code Management tool/platform used by a remediation recipe.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult> ScmConfigurations;
        /// <summary>
        /// A filter to return only Remediation Recipes that match the specified lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The creation date and time of the Remediation Recipe (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the Remediation Recipe was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The Verify stage configuration specifies a build service to run a pipeline for the recommended code changes. The build pipeline will be initiated to ensure that there is no breaking change after the dependency versions have been updated in source to avoid vulnerabilities.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult> VerifyConfigurations;

        [OutputConstructor]
        private GetRemediationRecipesRemediationRecipeCollectionItemResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemDetectConfigurationResult> detectConfigurations,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isRunTriggeredOnKbChange,

            string knowledgeBaseId,

            ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemNetworkConfigurationResult> networkConfigurations,

            ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemScmConfigurationResult> scmConfigurations,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            ImmutableArray<Outputs.GetRemediationRecipesRemediationRecipeCollectionItemVerifyConfigurationResult> verifyConfigurations)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DetectConfigurations = detectConfigurations;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsRunTriggeredOnKbChange = isRunTriggeredOnKbChange;
            KnowledgeBaseId = knowledgeBaseId;
            NetworkConfigurations = networkConfigurations;
            ScmConfigurations = scmConfigurations;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            VerifyConfigurations = verifyConfigurations;
        }
    }
}
