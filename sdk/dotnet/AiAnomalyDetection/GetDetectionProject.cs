// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiAnomalyDetection
{
    public static class GetDetectionProject
    {
        /// <summary>
        /// This data source provides details about a specific Project resource in Oracle Cloud Infrastructure Ai Anomaly Detection service.
        /// 
        /// Gets a Project by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testProject = Output.Create(Oci.AiAnomalyDetection.GetDetectionProject.InvokeAsync(new Oci.AiAnomalyDetection.GetDetectionProjectArgs
        ///         {
        ///             ProjectId = oci_ai_anomaly_detection_project.Test_project.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDetectionProjectResult> InvokeAsync(GetDetectionProjectArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDetectionProjectResult>("oci:AiAnomalyDetection/getDetectionProject:getDetectionProject", args ?? new GetDetectionProjectArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Project resource in Oracle Cloud Infrastructure Ai Anomaly Detection service.
        /// 
        /// Gets a Project by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testProject = Output.Create(Oci.AiAnomalyDetection.GetDetectionProject.InvokeAsync(new Oci.AiAnomalyDetection.GetDetectionProjectArgs
        ///         {
        ///             ProjectId = oci_ai_anomaly_detection_project.Test_project.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDetectionProjectResult> Invoke(GetDetectionProjectInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDetectionProjectResult>("oci:AiAnomalyDetection/getDetectionProject:getDetectionProject", args ?? new GetDetectionProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDetectionProjectArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetDetectionProjectArgs()
        {
        }
    }

    public sealed class GetDetectionProjectInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetDetectionProjectInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDetectionProjectResult
    {
        /// <summary>
        /// The OCID for the project's compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A short description of the project.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-friendly display name for the resource. It does not have to be unique and can be modified. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the project that is immutable on creation.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        /// <summary>
        /// The lifecycle state of the Project.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetDetectionProjectResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string projectId,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            ProjectId = projectId;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
