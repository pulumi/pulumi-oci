// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiAnomalyDetection.Inputs
{

    public sealed class DataAssetDataSourceDetailsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// atp db password Secret Id
        /// </summary>
        [Input("atpPasswordSecretId")]
        public Input<string>? AtpPasswordSecretId { get; set; }

        /// <summary>
        /// atp db user name
        /// </summary>
        [Input("atpUserName")]
        public Input<string>? AtpUserName { get; set; }

        /// <summary>
        /// Bucket Name for influx connection
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// OCID of the secret containing the containers certificates of ATP wallet
        /// </summary>
        [Input("cwalletFileSecretId")]
        public Input<string>? CwalletFileSecretId { get; set; }

        /// <summary>
        /// Data source type where actually data asset is being stored
        /// </summary>
        [Input("dataSourceType", required: true)]
        public Input<string> DataSourceType { get; set; } = null!;

        /// <summary>
        /// DB Name for influx connection
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// OCID of the secret containing the PDB'S certificates of ATP wallet
        /// </summary>
        [Input("ewalletFileSecretId")]
        public Input<string>? EwalletFileSecretId { get; set; }

        /// <summary>
        /// OCID of the secret containing Keystore.jks file of the ATP wallet
        /// </summary>
        [Input("keyStoreFileSecretId")]
        public Input<string>? KeyStoreFileSecretId { get; set; }

        /// <summary>
        /// Measurement name for influx
        /// </summary>
        [Input("measurementName")]
        public Input<string>? MeasurementName { get; set; }

        /// <summary>
        /// Object storage namespace
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// File name
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// OCID of the secret that contains jdbc properties file of ATP wallet
        /// </summary>
        [Input("ojdbcFileSecretId")]
        public Input<string>? OjdbcFileSecretId { get; set; }

        /// <summary>
        /// Password Secret Id for the influx connection
        /// </summary>
        [Input("passwordSecretId")]
        public Input<string>? PasswordSecretId { get; set; }

        /// <summary>
        /// atp database table name
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        /// <summary>
        /// OCID of the secret that contains the tnsnames file of ATP wallet
        /// </summary>
        [Input("tnsnamesFileSecretId")]
        public Input<string>? TnsnamesFileSecretId { get; set; }

        /// <summary>
        /// OCID of the secret containing truststore.jks file of the ATP wallet
        /// </summary>
        [Input("truststoreFileSecretId")]
        public Input<string>? TruststoreFileSecretId { get; set; }

        /// <summary>
        /// public IP address and port to influx DB
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username for connection to Influx
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// Possible data sources
        /// </summary>
        [Input("versionSpecificDetails")]
        public Input<Inputs.DataAssetDataSourceDetailsVersionSpecificDetailsGetArgs>? VersionSpecificDetails { get; set; }

        /// <summary>
        /// wallet password Secret ID in String format
        /// </summary>
        [Input("walletPasswordSecretId")]
        public Input<string>? WalletPasswordSecretId { get; set; }

        public DataAssetDataSourceDetailsGetArgs()
        {
        }
    }
}
