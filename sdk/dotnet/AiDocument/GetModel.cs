// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiDocument
{
    public static class GetModel
    {
        /// <summary>
        /// This data source provides details about a specific Model resource in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Get a model by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModel = Oci.AiDocument.GetModel.Invoke(new()
        ///     {
        ///         ModelId = oci_ai_document_model.Test_model.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetModelResult> InvokeAsync(GetModelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelResult>("oci:AiDocument/getModel:getModel", args ?? new GetModelArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Model resource in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Get a model by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModel = Oci.AiDocument.GetModel.Invoke(new()
        ///     {
        ///         ModelId = oci_ai_document_model.Test_model.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetModelResult> Invoke(GetModelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelResult>("oci:AiDocument/getModel:getModel", args ?? new GetModelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique model identifier.
        /// </summary>
        [Input("modelId", required: true)]
        public string ModelId { get; set; } = null!;

        public GetModelArgs()
        {
        }
        public static new GetModelArgs Empty => new GetModelArgs();
    }

    public sealed class GetModelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique model identifier.
        /// </summary>
        [Input("modelId", required: true)]
        public Input<string> ModelId { get; set; } = null!;

        public GetModelInvokeArgs()
        {
        }
        public static new GetModelInvokeArgs Empty => new GetModelInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelResult
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) collection of active custom Key Value models that need to be composed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelComponentModelResult> ComponentModels;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// An optional description of the model.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A human-friendly name for the model, which can be changed.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// A unique identifier that is immutable after creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Set to true when the model is created by using multiple key value extraction models.
        /// </summary>
        public readonly bool? IsComposedModel;
        /// <summary>
        /// Set to true when experimenting with a new model type or dataset, so model training is quick, with a predefined low number of passes through the training data.
        /// </summary>
        public readonly bool? IsQuickMode;
        /// <summary>
        /// The collection of labels used to train the custom model.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// A message describing the current state in more detail, that can provide actionable information if training failed.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// The maximum model training time in hours, expressed as a decimal fraction.
        /// </summary>
        public readonly double? MaxTrainingTimeInHours;
        /// <summary>
        /// Trained Model Metrics.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelMetricResult> Metrics;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of active custom Key Value model that need to be composed.
        /// </summary>
        public readonly string ModelId;
        /// <summary>
        /// The type of the Document model.
        /// </summary>
        public readonly string? ModelType;
        /// <summary>
        /// The version of the model.
        /// </summary>
        public readonly string? ModelVersion;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The current state of the model.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SystemTags;
        /// <summary>
        /// The tenancy id of the model.
        /// </summary>
        public readonly string? TenancyId;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelTestingDatasetResult> TestingDatasets;
        /// <summary>
        /// When the model was created, as an RFC3339 datetime string.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// When the model was updated, as an RFC3339 datetime string.
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// The total hours actually used for model training.
        /// </summary>
        public readonly double? TrainedTimeInHours;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelTrainingDatasetResult> TrainingDatasets;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelValidationDatasetResult> ValidationDatasets;

        [OutputConstructor]
        private GetModelResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetModelComponentModelResult> componentModels,

            ImmutableDictionary<string, object>? definedTags,

            string? description,

            string? displayName,

            ImmutableDictionary<string, object>? freeformTags,

            string? id,

            bool? isComposedModel,

            bool? isQuickMode,

            ImmutableArray<string> labels,

            string? lifecycleDetails,

            double? maxTrainingTimeInHours,

            ImmutableArray<Outputs.GetModelMetricResult> metrics,

            string modelId,

            string? modelType,

            string? modelVersion,

            string? projectId,

            string? state,

            ImmutableDictionary<string, object>? systemTags,

            string? tenancyId,

            ImmutableArray<Outputs.GetModelTestingDatasetResult> testingDatasets,

            string? timeCreated,

            string? timeUpdated,

            double? trainedTimeInHours,

            ImmutableArray<Outputs.GetModelTrainingDatasetResult> trainingDatasets,

            ImmutableArray<Outputs.GetModelValidationDatasetResult> validationDatasets)
        {
            CompartmentId = compartmentId;
            ComponentModels = componentModels;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsComposedModel = isComposedModel;
            IsQuickMode = isQuickMode;
            Labels = labels;
            LifecycleDetails = lifecycleDetails;
            MaxTrainingTimeInHours = maxTrainingTimeInHours;
            Metrics = metrics;
            ModelId = modelId;
            ModelType = modelType;
            ModelVersion = modelVersion;
            ProjectId = projectId;
            State = state;
            SystemTags = systemTags;
            TenancyId = tenancyId;
            TestingDatasets = testingDatasets;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TrainedTimeInHours = trainedTimeInHours;
            TrainingDatasets = trainingDatasets;
            ValidationDatasets = validationDatasets;
        }
    }
}
