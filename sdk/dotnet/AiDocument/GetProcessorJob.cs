// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiDocument
{
    public static class GetProcessorJob
    {
        /// <summary>
        /// This data source provides details about a specific Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Get the details of a processor job.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProcessorJob = Oci.AiDocument.GetProcessorJob.Invoke(new()
        ///     {
        ///         ProcessorJobId = testProcessorJobOciAiDocumentProcessorJob.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProcessorJobResult> InvokeAsync(GetProcessorJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProcessorJobResult>("oci:AiDocument/getProcessorJob:getProcessorJob", args ?? new GetProcessorJobArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Get the details of a processor job.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProcessorJob = Oci.AiDocument.GetProcessorJob.Invoke(new()
        ///     {
        ///         ProcessorJobId = testProcessorJobOciAiDocumentProcessorJob.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProcessorJobResult> Invoke(GetProcessorJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProcessorJobResult>("oci:AiDocument/getProcessorJob:getProcessorJob", args ?? new GetProcessorJobInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Get the details of a processor job.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProcessorJob = Oci.AiDocument.GetProcessorJob.Invoke(new()
        ///     {
        ///         ProcessorJobId = testProcessorJobOciAiDocumentProcessorJob.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProcessorJobResult> Invoke(GetProcessorJobInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProcessorJobResult>("oci:AiDocument/getProcessorJob:getProcessorJob", args ?? new GetProcessorJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProcessorJobArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Processor job id.
        /// </summary>
        [Input("processorJobId", required: true)]
        public string ProcessorJobId { get; set; } = null!;

        public GetProcessorJobArgs()
        {
        }
        public static new GetProcessorJobArgs Empty => new GetProcessorJobArgs();
    }

    public sealed class GetProcessorJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Processor job id.
        /// </summary>
        [Input("processorJobId", required: true)]
        public Input<string> ProcessorJobId { get; set; } = null!;

        public GetProcessorJobInvokeArgs()
        {
        }
        public static new GetProcessorJobInvokeArgs Empty => new GetProcessorJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetProcessorJobResult
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The display name of the processor job.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The id of the processor job.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the inputs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProcessorJobInputLocationResult> InputLocations;
        /// <summary>
        /// The detailed status of FAILED state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The object storage location where to store analysis results.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProcessorJobOutputLocationResult> OutputLocations;
        /// <summary>
        /// How much progress the operation has made, compared to the total amount of work to be performed.
        /// </summary>
        public readonly double PercentComplete;
        /// <summary>
        /// The configuration of a processor.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProcessorJobProcessorConfigResult> ProcessorConfigs;
        public readonly string ProcessorJobId;
        /// <summary>
        /// The current state of the processor job.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The job acceptance time.
        /// </summary>
        public readonly string TimeAccepted;
        /// <summary>
        /// The job finish time.
        /// </summary>
        public readonly string TimeFinished;
        /// <summary>
        /// The job start time.
        /// </summary>
        public readonly string TimeStarted;

        [OutputConstructor]
        private GetProcessorJobResult(
            string compartmentId,

            string displayName,

            string id,

            ImmutableArray<Outputs.GetProcessorJobInputLocationResult> inputLocations,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetProcessorJobOutputLocationResult> outputLocations,

            double percentComplete,

            ImmutableArray<Outputs.GetProcessorJobProcessorConfigResult> processorConfigs,

            string processorJobId,

            string state,

            string timeAccepted,

            string timeFinished,

            string timeStarted)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Id = id;
            InputLocations = inputLocations;
            LifecycleDetails = lifecycleDetails;
            OutputLocations = outputLocations;
            PercentComplete = percentComplete;
            ProcessorConfigs = processorConfigs;
            ProcessorJobId = processorJobId;
            State = state;
            TimeAccepted = timeAccepted;
            TimeFinished = timeFinished;
            TimeStarted = timeStarted;
        }
    }
}
