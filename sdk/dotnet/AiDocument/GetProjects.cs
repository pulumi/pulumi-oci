// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiDocument
{
    public static class GetProjects
    {
        /// <summary>
        /// This data source provides the list of Projects in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Returns a list of projects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProjects = Oci.AiDocument.GetProjects.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = projectDisplayName,
        ///         Id = projectId,
        ///         State = projectState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("oci:AiDocument/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Projects in Oracle Cloud Infrastructure Ai Document service.
        /// 
        /// Returns a list of projects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProjects = Oci.AiDocument.GetProjects.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = projectDisplayName,
        ///         Id = projectId,
        ///         State = projectState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("oci:AiDocument/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetProjectsFilterArgs>? _filters;
        public List<Inputs.GetProjectsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProjectsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The filter to find the project with the given identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The filter to match projects with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetProjectsArgs()
        {
        }
        public static new GetProjectsArgs Empty => new GetProjectsArgs();
    }

    public sealed class GetProjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetProjectsFilterInputArgs>? _filters;
        public InputList<Inputs.GetProjectsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProjectsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The filter to find the project with the given identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The filter to match projects with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetProjectsInvokeArgs()
        {
        }
        public static new GetProjectsInvokeArgs Empty => new GetProjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A human-friendly name for the project, which can be changed.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetProjectsFilterResult> Filters;
        /// <summary>
        /// A unique identifier that is immutable after creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of project_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectCollectionResult> ProjectCollections;
        /// <summary>
        /// The current state of the project.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetProjectsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetProjectsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetProjectsProjectCollectionResult> projectCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ProjectCollections = projectCollections;
            State = state;
        }
    }
}
