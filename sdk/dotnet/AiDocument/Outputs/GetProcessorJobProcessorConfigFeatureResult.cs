// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiDocument.Outputs
{

    [OutputType]
    public sealed class GetProcessorJobProcessorConfigFeatureResult
    {
        /// <summary>
        /// The type of document analysis requested. The allowed values are:
        /// * `LANGUAGE_CLASSIFICATION`: Detect the language.
        /// * `TEXT_EXTRACTION`: Recognize text.
        /// * `TABLE_EXTRACTION`: Detect and extract data in tables.
        /// * `KEY_VALUE_EXTRACTION`: Extract form fields.
        /// * `DOCUMENT_CLASSIFICATION`: Identify the type of document.
        /// * `DOCUMENT_ELEMENTS_EXTRACTION`: Extract information from bar code
        /// </summary>
        public readonly string FeatureType;
        /// <summary>
        /// Whether or not to generate a searchable PDF file.
        /// </summary>
        public readonly bool GenerateSearchablePdf;
        /// <summary>
        /// The maximum number of results to return.
        /// </summary>
        public readonly int MaxResults;
        /// <summary>
        /// Unique identifier custom model OCID that should be used for inference.
        /// </summary>
        public readonly string ModelId;
        /// <summary>
        /// Whether checkbox detection feature is enabled or disabled.
        /// </summary>
        public readonly bool SelectionMarkDetection;
        /// <summary>
        /// The custom model tenancy ID when modelId represents aliasName.
        /// </summary>
        public readonly string TenancyId;

        [OutputConstructor]
        private GetProcessorJobProcessorConfigFeatureResult(
            string featureType,

            bool generateSearchablePdf,

            int maxResults,

            string modelId,

            bool selectionMarkDetection,

            string tenancyId)
        {
            FeatureType = featureType;
            GenerateSearchablePdf = generateSearchablePdf;
            MaxResults = maxResults;
            ModelId = modelId;
            SelectionMarkDetection = selectionMarkDetection;
            TenancyId = tenancyId;
        }
    }
}
