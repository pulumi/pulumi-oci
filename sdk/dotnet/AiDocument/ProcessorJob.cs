// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiDocument
{
    /// <summary>
    /// This resource provides the Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
    /// 
    /// Create a processor job for document analysis.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProcessorJob = new Oci.AiDocument.ProcessorJob("testProcessorJob", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         InputLocation = new Oci.AiDocument.Inputs.ProcessorJobInputLocationArgs
    ///         {
    ///             SourceType = @var.Processor_job_input_location_source_type,
    ///             Data = @var.Processor_job_input_location_data,
    ///             ObjectLocations = new[]
    ///             {
    ///                 new Oci.AiDocument.Inputs.ProcessorJobInputLocationObjectLocationArgs
    ///                 {
    ///                     Bucket = @var.Processor_job_input_location_object_locations_bucket,
    ///                     Namespace = @var.Processor_job_input_location_object_locations_namespace,
    ///                     Object = @var.Processor_job_input_location_object_locations_object,
    ///                 },
    ///             },
    ///         },
    ///         OutputLocation = new Oci.AiDocument.Inputs.ProcessorJobOutputLocationArgs
    ///         {
    ///             Bucket = @var.Processor_job_output_location_bucket,
    ///             Namespace = @var.Processor_job_output_location_namespace,
    ///             Prefix = @var.Processor_job_output_location_prefix,
    ///         },
    ///         ProcessorConfig = new Oci.AiDocument.Inputs.ProcessorJobProcessorConfigArgs
    ///         {
    ///             Features = new[]
    ///             {
    ///                 new Oci.AiDocument.Inputs.ProcessorJobProcessorConfigFeatureArgs
    ///                 {
    ///                     FeatureType = @var.Processor_job_processor_config_features_feature_type,
    ///                     GenerateSearchablePdf = @var.Processor_job_processor_config_features_generate_searchable_pdf,
    ///                     MaxResults = @var.Processor_job_processor_config_features_max_results,
    ///                     ModelId = oci_ai_document_model.Test_model.Id,
    ///                     TenancyId = oci_identity_tenancy.Test_tenancy.Id,
    ///                 },
    ///             },
    ///             ProcessorType = @var.Processor_job_processor_config_processor_type,
    ///             DocumentType = @var.Processor_job_processor_config_document_type,
    ///             IsZipOutputEnabled = @var.Processor_job_processor_config_is_zip_output_enabled,
    ///             Language = @var.Processor_job_processor_config_language,
    ///         },
    ///         DisplayName = @var.Processor_job_display_name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ProcessorJobs can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:AiDocument/processorJob:ProcessorJob test_processor_job "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:AiDocument/processorJob:ProcessorJob")]
    public partial class ProcessorJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The display name of the processor job.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The location of the inputs.
        /// </summary>
        [Output("inputLocation")]
        public Output<Outputs.ProcessorJobInputLocation> InputLocation { get; private set; } = null!;

        /// <summary>
        /// The detailed status of FAILED state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The object storage location where to store analysis results.
        /// </summary>
        [Output("outputLocation")]
        public Output<Outputs.ProcessorJobOutputLocation> OutputLocation { get; private set; } = null!;

        /// <summary>
        /// How much progress the operation has made, compared to the total amount of work to be performed.
        /// </summary>
        [Output("percentComplete")]
        public Output<double> PercentComplete { get; private set; } = null!;

        /// <summary>
        /// The configuration of a processor.
        /// </summary>
        [Output("processorConfig")]
        public Output<Outputs.ProcessorJobProcessorConfig> ProcessorConfig { get; private set; } = null!;

        /// <summary>
        /// The current state of the processor job.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The job acceptance time.
        /// </summary>
        [Output("timeAccepted")]
        public Output<string> TimeAccepted { get; private set; } = null!;

        /// <summary>
        /// The job finish time.
        /// </summary>
        [Output("timeFinished")]
        public Output<string> TimeFinished { get; private set; } = null!;

        /// <summary>
        /// The job start time.
        /// </summary>
        [Output("timeStarted")]
        public Output<string> TimeStarted { get; private set; } = null!;


        /// <summary>
        /// Create a ProcessorJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProcessorJob(string name, ProcessorJobArgs args, CustomResourceOptions? options = null)
            : base("oci:AiDocument/processorJob:ProcessorJob", name, args ?? new ProcessorJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProcessorJob(string name, Input<string> id, ProcessorJobState? state = null, CustomResourceOptions? options = null)
            : base("oci:AiDocument/processorJob:ProcessorJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProcessorJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProcessorJob Get(string name, Input<string> id, ProcessorJobState? state = null, CustomResourceOptions? options = null)
        {
            return new ProcessorJob(name, id, state, options);
        }
    }

    public sealed class ProcessorJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The display name of the processor job.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The location of the inputs.
        /// </summary>
        [Input("inputLocation", required: true)]
        public Input<Inputs.ProcessorJobInputLocationArgs> InputLocation { get; set; } = null!;

        /// <summary>
        /// The object storage location where to store analysis results.
        /// </summary>
        [Input("outputLocation", required: true)]
        public Input<Inputs.ProcessorJobOutputLocationArgs> OutputLocation { get; set; } = null!;

        /// <summary>
        /// The configuration of a processor.
        /// </summary>
        [Input("processorConfig", required: true)]
        public Input<Inputs.ProcessorJobProcessorConfigArgs> ProcessorConfig { get; set; } = null!;

        public ProcessorJobArgs()
        {
        }
        public static new ProcessorJobArgs Empty => new ProcessorJobArgs();
    }

    public sealed class ProcessorJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment identifier.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The display name of the processor job.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The location of the inputs.
        /// </summary>
        [Input("inputLocation")]
        public Input<Inputs.ProcessorJobInputLocationGetArgs>? InputLocation { get; set; }

        /// <summary>
        /// The detailed status of FAILED state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The object storage location where to store analysis results.
        /// </summary>
        [Input("outputLocation")]
        public Input<Inputs.ProcessorJobOutputLocationGetArgs>? OutputLocation { get; set; }

        /// <summary>
        /// How much progress the operation has made, compared to the total amount of work to be performed.
        /// </summary>
        [Input("percentComplete")]
        public Input<double>? PercentComplete { get; set; }

        /// <summary>
        /// The configuration of a processor.
        /// </summary>
        [Input("processorConfig")]
        public Input<Inputs.ProcessorJobProcessorConfigGetArgs>? ProcessorConfig { get; set; }

        /// <summary>
        /// The current state of the processor job.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The job acceptance time.
        /// </summary>
        [Input("timeAccepted")]
        public Input<string>? TimeAccepted { get; set; }

        /// <summary>
        /// The job finish time.
        /// </summary>
        [Input("timeFinished")]
        public Input<string>? TimeFinished { get; set; }

        /// <summary>
        /// The job start time.
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public ProcessorJobState()
        {
        }
        public static new ProcessorJobState Empty => new ProcessorJobState();
    }
}
