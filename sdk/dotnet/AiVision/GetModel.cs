// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    public static class GetModel
    {
        /// <summary>
        /// This data source provides details about a specific Model resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Gets a Model by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModel = Oci.AiVision.GetModel.Invoke(new()
        ///     {
        ///         ModelId = oci_ai_vision_model.Test_model.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetModelResult> InvokeAsync(GetModelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelResult>("oci:AiVision/getModel:getModel", args ?? new GetModelArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Model resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Gets a Model by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModel = Oci.AiVision.GetModel.Invoke(new()
        ///     {
        ///         ModelId = oci_ai_vision_model.Test_model.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetModelResult> Invoke(GetModelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelResult>("oci:AiVision/getModel:getModel", args ?? new GetModelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// unique Model identifier
        /// </summary>
        [Input("modelId", required: true)]
        public string ModelId { get; set; } = null!;

        public GetModelArgs()
        {
        }
        public static new GetModelArgs Empty => new GetModelArgs();
    }

    public sealed class GetModelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// unique Model identifier
        /// </summary>
        [Input("modelId", required: true)]
        public Input<string> ModelId { get; set; } = null!;

        public GetModelInvokeArgs()
        {
        }
        public static new GetModelInvokeArgs Empty => new GetModelInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelResult
    {
        /// <summary>
        /// Average precision of the trained model
        /// </summary>
        public readonly double? AveragePrecision;
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Confidence ratio of the calculation
        /// </summary>
        public readonly double? ConfidenceThreshold;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// A short description of the model.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Model Identifier, can be renamed
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// If It's true, Training is set for recommended epochs needed for quick training.
        /// </summary>
        public readonly bool? IsQuickMode;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// The maximum duration in hours for which the training will run.
        /// </summary>
        public readonly double? MaxTrainingDurationInHours;
        /// <summary>
        /// Complete Training Metrics for successful trained model
        /// </summary>
        public readonly string? Metrics;
        public readonly string ModelId;
        /// <summary>
        /// Type of the Model.
        /// </summary>
        public readonly string? ModelType;
        /// <summary>
        /// The version of the model
        /// </summary>
        public readonly string? ModelVersion;
        /// <summary>
        /// Precision of the trained model
        /// </summary>
        public readonly double? Precision;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Recall of the trained model
        /// </summary>
        public readonly double? Recall;
        /// <summary>
        /// The current state of the Model.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SystemTags;
        /// <summary>
        /// Total number of testing Images
        /// </summary>
        public readonly int? TestImageCount;
        /// <summary>
        /// The base entity for a Dataset, which is the input for Model creation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelTestingDatasetResult> TestingDatasets;
        /// <summary>
        /// The time the Model was created. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The time the Model was updated. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// Total number of training Images
        /// </summary>
        public readonly int? TotalImageCount;
        /// <summary>
        /// Total hours actually used for training
        /// </summary>
        public readonly double? TrainedDurationInHours;
        /// <summary>
        /// The base entity for a Dataset, which is the input for Model creation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelTrainingDatasetResult> TrainingDatasets;
        /// <summary>
        /// The base entity for a Dataset, which is the input for Model creation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelValidationDatasetResult> ValidationDatasets;

        [OutputConstructor]
        private GetModelResult(
            double? averagePrecision,

            string? compartmentId,

            double? confidenceThreshold,

            ImmutableDictionary<string, object>? definedTags,

            string? description,

            string? displayName,

            ImmutableDictionary<string, object>? freeformTags,

            string? id,

            bool? isQuickMode,

            string? lifecycleDetails,

            double? maxTrainingDurationInHours,

            string? metrics,

            string modelId,

            string? modelType,

            string? modelVersion,

            double? precision,

            string? projectId,

            double? recall,

            string? state,

            ImmutableDictionary<string, object>? systemTags,

            int? testImageCount,

            ImmutableArray<Outputs.GetModelTestingDatasetResult> testingDatasets,

            string? timeCreated,

            string? timeUpdated,

            int? totalImageCount,

            double? trainedDurationInHours,

            ImmutableArray<Outputs.GetModelTrainingDatasetResult> trainingDatasets,

            ImmutableArray<Outputs.GetModelValidationDatasetResult> validationDatasets)
        {
            AveragePrecision = averagePrecision;
            CompartmentId = compartmentId;
            ConfidenceThreshold = confidenceThreshold;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsQuickMode = isQuickMode;
            LifecycleDetails = lifecycleDetails;
            MaxTrainingDurationInHours = maxTrainingDurationInHours;
            Metrics = metrics;
            ModelId = modelId;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Precision = precision;
            ProjectId = projectId;
            Recall = recall;
            State = state;
            SystemTags = systemTags;
            TestImageCount = testImageCount;
            TestingDatasets = testingDatasets;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TotalImageCount = totalImageCount;
            TrainedDurationInHours = trainedDurationInHours;
            TrainingDatasets = trainingDatasets;
            ValidationDatasets = validationDatasets;
        }
    }
}
