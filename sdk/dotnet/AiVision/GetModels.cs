// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    public static class GetModels
    {
        /// <summary>
        /// This data source provides the list of Models in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Returns a list of Models.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModels = Oci.AiVision.GetModels.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Model_display_name,
        ///         Id = @var.Model_id,
        ///         ProjectId = oci_ai_vision_project.Test_project.Id,
        ///         State = @var.Model_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetModelsResult> InvokeAsync(GetModelsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelsResult>("oci:AiVision/getModels:getModels", args ?? new GetModelsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Models in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Returns a list of Models.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModels = Oci.AiVision.GetModels.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Model_display_name,
        ///         Id = @var.Model_id,
        ///         ProjectId = oci_ai_vision_project.Test_project.Id,
        ///         State = @var.Model_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetModelsResult> Invoke(GetModelsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelsResult>("oci:AiVision/getModels:getModels", args ?? new GetModelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetModelsFilterArgs>? _filters;
        public List<Inputs.GetModelsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetModelsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique Model identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The ID of the project for which to list the objects.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetModelsArgs()
        {
        }
        public static new GetModelsArgs Empty => new GetModelsArgs();
    }

    public sealed class GetModelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetModelsFilterInputArgs>? _filters;
        public InputList<Inputs.GetModelsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetModelsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique Model identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The ID of the project for which to list the objects.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetModelsInvokeArgs()
        {
        }
        public static new GetModelsInvokeArgs Empty => new GetModelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelsResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Model Identifier, can be renamed
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetModelsFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of model_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelsModelCollectionResult> ModelCollections;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The current state of the Model.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetModelsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetModelsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetModelsModelCollectionResult> modelCollections,

            string? projectId,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ModelCollections = modelCollections;
            ProjectId = projectId;
            State = state;
        }
    }
}
