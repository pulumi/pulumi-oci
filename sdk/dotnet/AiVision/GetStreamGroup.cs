// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    public static class GetStreamGroup
    {
        /// <summary>
        /// This data source provides details about a specific Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamGroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamGroup = Oci.AiVision.GetStreamGroup.Invoke(new()
        ///     {
        ///         StreamGroupId = testStreamGroupOciAiVisionStreamGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamGroupResult> InvokeAsync(GetStreamGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamGroupResult>("oci:AiVision/getStreamGroup:getStreamGroup", args ?? new GetStreamGroupArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamGroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamGroup = Oci.AiVision.GetStreamGroup.Invoke(new()
        ///     {
        ///         StreamGroupId = testStreamGroupOciAiVisionStreamGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamGroupResult> Invoke(GetStreamGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamGroupResult>("oci:AiVision/getStreamGroup:getStreamGroup", args ?? new GetStreamGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamGroup
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamGroup = Oci.AiVision.GetStreamGroup.Invoke(new()
        ///     {
        ///         StreamGroupId = testStreamGroupOciAiVisionStreamGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamGroupResult> Invoke(GetStreamGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamGroupResult>("oci:AiVision/getStreamGroup:getStreamGroup", args ?? new GetStreamGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// StreamGroup Id.
        /// </summary>
        [Input("streamGroupId", required: true)]
        public string StreamGroupId { get; set; } = null!;

        public GetStreamGroupArgs()
        {
        }
        public static new GetStreamGroupArgs Empty => new GetStreamGroupArgs();
    }

    public sealed class GetStreamGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// StreamGroup Id.
        /// </summary>
        [Input("streamGroupId", required: true)]
        public Input<string> StreamGroupId { get; set; } = null!;

        public GetStreamGroupInvokeArgs()
        {
        }
        public static new GetStreamGroupInvokeArgs Empty => new GetStreamGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamGroupResult
    {
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A human-friendly name for the streamGroup.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamGroup.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Stream
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// The current state of the streamGroup.
        /// </summary>
        public readonly string State;
        public readonly string StreamGroupId;
        /// <summary>
        /// List of streamSource OCIDs where the streamSource overlaps in field of view.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamGroupStreamOverlapResult> StreamOverlaps;
        /// <summary>
        /// List of streamSource OCIDs associated with the stream group
        /// </summary>
        public readonly ImmutableArray<string> StreamSourceIds;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// When the streamGroup was created, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// When the streamGroup was updated, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetStreamGroupResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isEnabled,

            string state,

            string streamGroupId,

            ImmutableArray<Outputs.GetStreamGroupStreamOverlapResult> streamOverlaps,

            ImmutableArray<string> streamSourceIds,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsEnabled = isEnabled;
            State = state;
            StreamGroupId = streamGroupId;
            StreamOverlaps = streamOverlaps;
            StreamSourceIds = streamSourceIds;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
