// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    public static class GetStreamSource
    {
        /// <summary>
        /// This data source provides details about a specific Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamSource
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSource = Oci.AiVision.GetStreamSource.Invoke(new()
        ///     {
        ///         StreamSourceId = testStreamSourceOciAiVisionStreamSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamSourceResult> InvokeAsync(GetStreamSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamSourceResult>("oci:AiVision/getStreamSource:getStreamSource", args ?? new GetStreamSourceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamSource
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSource = Oci.AiVision.GetStreamSource.Invoke(new()
        ///     {
        ///         StreamSourceId = testStreamSourceOciAiVisionStreamSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSourceResult> Invoke(GetStreamSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSourceResult>("oci:AiVision/getStreamSource:getStreamSource", args ?? new GetStreamSourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Get a  streamSource
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSource = Oci.AiVision.GetStreamSource.Invoke(new()
        ///     {
        ///         StreamSourceId = testStreamSourceOciAiVisionStreamSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSourceResult> Invoke(GetStreamSourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSourceResult>("oci:AiVision/getStreamSource:getStreamSource", args ?? new GetStreamSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// StreamSource Id.
        /// </summary>
        [Input("streamSourceId", required: true)]
        public string StreamSourceId { get; set; } = null!;

        public GetStreamSourceArgs()
        {
        }
        public static new GetStreamSourceArgs Empty => new GetStreamSourceArgs();
    }

    public sealed class GetStreamSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// StreamSource Id.
        /// </summary>
        [Input("streamSourceId", required: true)]
        public Input<string> StreamSourceId { get; set; } = null!;

        public GetStreamSourceInvokeArgs()
        {
        }
        public static new GetStreamSourceInvokeArgs Empty => new GetStreamSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamSourceResult
    {
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// display name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the streamSource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Details about a stream source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamSourceStreamSourceDetailResult> StreamSourceDetails;
        public readonly string StreamSourceId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// When the streamSource was created, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// When the streamSource was updated, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetStreamSourceResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string state,

            ImmutableArray<Outputs.GetStreamSourceStreamSourceDetailResult> streamSourceDetails,

            string streamSourceId,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            State = state;
            StreamSourceDetails = streamSourceDetails;
            StreamSourceId = streamSourceId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
