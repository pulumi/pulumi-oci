// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    public static class GetStreamSources
    {
        /// <summary>
        /// This data source provides the list of Stream Sources in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Gets a list of the streamSources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSources = Oci.AiVision.GetStreamSources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = streamSourceDisplayName,
        ///         Id = streamSourceId,
        ///         State = streamSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamSourcesResult> InvokeAsync(GetStreamSourcesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamSourcesResult>("oci:AiVision/getStreamSources:getStreamSources", args ?? new GetStreamSourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Stream Sources in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Gets a list of the streamSources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSources = Oci.AiVision.GetStreamSources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = streamSourceDisplayName,
        ///         Id = streamSourceId,
        ///         State = streamSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSourcesResult> Invoke(GetStreamSourcesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSourcesResult>("oci:AiVision/getStreamSources:getStreamSources", args ?? new GetStreamSourcesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Stream Sources in Oracle Cloud Infrastructure Ai Vision service.
        /// 
        /// Gets a list of the streamSources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamSources = Oci.AiVision.GetStreamSources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = streamSourceDisplayName,
        ///         Id = streamSourceId,
        ///         State = streamSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamSourcesResult> Invoke(GetStreamSourcesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamSourcesResult>("oci:AiVision/getStreamSources:getStreamSources", args ?? new GetStreamSourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamSourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetStreamSourcesFilterArgs>? _filters;
        public List<Inputs.GetStreamSourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetStreamSourcesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The filter to find the device with the given identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The filter to match projects with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetStreamSourcesArgs()
        {
        }
        public static new GetStreamSourcesArgs Empty => new GetStreamSourcesArgs();
    }

    public sealed class GetStreamSourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetStreamSourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetStreamSourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetStreamSourcesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The filter to find the device with the given identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The filter to match projects with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetStreamSourcesInvokeArgs()
        {
        }
        public static new GetStreamSourcesInvokeArgs Empty => new GetStreamSourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamSourcesResult
    {
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// display name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetStreamSourcesFilterResult> Filters;
        /// <summary>
        /// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The current state of the streamSource.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of stream_source_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamSourcesStreamSourceCollectionResult> StreamSourceCollections;

        [OutputConstructor]
        private GetStreamSourcesResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetStreamSourcesFilterResult> filters,

            string? id,

            string? state,

            ImmutableArray<Outputs.GetStreamSourcesStreamSourceCollectionResult> streamSourceCollections)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            StreamSourceCollections = streamSourceCollections;
        }
    }
}
