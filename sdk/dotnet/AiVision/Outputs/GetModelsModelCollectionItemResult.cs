// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision.Outputs
{

    [OutputType]
    public sealed class GetModelsModelCollectionItemResult
    {
        /// <summary>
        /// The mean average precision of the trained model.
        /// </summary>
        public readonly double AveragePrecision;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The intersection over the union threshold used for calculating precision and recall.
        /// </summary>
        public readonly double ConfidenceThreshold;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// An optional description of the model.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The filter to find the model with the given identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set to true when experimenting with a new model type or dataset, so model training is quick, with a predefined low number of passes through the training data.
        /// </summary>
        public readonly bool IsQuickMode;
        /// <summary>
        /// A message describing the current state in more detail, that can provide actionable information if training failed.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The maximum model training duration in hours, expressed as a decimal fraction.
        /// </summary>
        public readonly double MaxTrainingDurationInHours;
        /// <summary>
        /// The complete set of per-label metrics for successfully trained models.
        /// </summary>
        public readonly string Metrics;
        /// <summary>
        /// What type of Vision model this is.
        /// </summary>
        public readonly string ModelType;
        /// <summary>
        /// The version of the model.
        /// </summary>
        public readonly string ModelVersion;
        /// <summary>
        /// The precision of the trained model.
        /// </summary>
        public readonly double Precision;
        /// <summary>
        /// The ID of the project for which to list the objects.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Recall of the trained model.
        /// </summary>
        public readonly double Recall;
        /// <summary>
        /// The filter to match models with the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The number of images set aside for evaluating model performance metrics after training.
        /// </summary>
        public readonly int TestImageCount;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelsModelCollectionItemTestingDatasetResult> TestingDatasets;
        /// <summary>
        /// When the model was created, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// When the model was updated, as an RFC3339 datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The number of images in the dataset used to train, validate, and test the model.
        /// </summary>
        public readonly int TotalImageCount;
        /// <summary>
        /// The total hours actually used for model training.
        /// </summary>
        public readonly double TrainedDurationInHours;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelsModelCollectionItemTrainingDatasetResult> TrainingDatasets;
        /// <summary>
        /// The base entity which is the input for creating and training a model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelsModelCollectionItemValidationDatasetResult> ValidationDatasets;

        [OutputConstructor]
        private GetModelsModelCollectionItemResult(
            double averagePrecision,

            string compartmentId,

            double confidenceThreshold,

            ImmutableDictionary<string, string> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isQuickMode,

            string lifecycleDetails,

            double maxTrainingDurationInHours,

            string metrics,

            string modelType,

            string modelVersion,

            double precision,

            string projectId,

            double recall,

            string state,

            ImmutableDictionary<string, string> systemTags,

            int testImageCount,

            ImmutableArray<Outputs.GetModelsModelCollectionItemTestingDatasetResult> testingDatasets,

            string timeCreated,

            string timeUpdated,

            int totalImageCount,

            double trainedDurationInHours,

            ImmutableArray<Outputs.GetModelsModelCollectionItemTrainingDatasetResult> trainingDatasets,

            ImmutableArray<Outputs.GetModelsModelCollectionItemValidationDatasetResult> validationDatasets)
        {
            AveragePrecision = averagePrecision;
            CompartmentId = compartmentId;
            ConfidenceThreshold = confidenceThreshold;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsQuickMode = isQuickMode;
            LifecycleDetails = lifecycleDetails;
            MaxTrainingDurationInHours = maxTrainingDurationInHours;
            Metrics = metrics;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Precision = precision;
            ProjectId = projectId;
            Recall = recall;
            State = state;
            SystemTags = systemTags;
            TestImageCount = testImageCount;
            TestingDatasets = testingDatasets;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TotalImageCount = totalImageCount;
            TrainedDurationInHours = trainedDurationInHours;
            TrainingDatasets = trainingDatasets;
            ValidationDatasets = validationDatasets;
        }
    }
}
