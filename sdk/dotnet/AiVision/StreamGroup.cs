// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    /// <summary>
    /// This resource provides the Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
    /// 
    /// Registration of new streamGroup
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testStreamGroup = new Oci.AiVision.StreamGroup("test_stream_group", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         DefinedTags = streamGroupDefinedTags,
    ///         DisplayName = streamGroupDisplayName,
    ///         FreeformTags = streamGroupFreeformTags,
    ///         IsEnabled = streamGroupIsEnabled,
    ///         StreamOverlaps = new[]
    ///         {
    ///             new Oci.AiVision.Inputs.StreamGroupStreamOverlapArgs
    ///             {
    ///                 OverlappingStreams = streamGroupStreamOverlapsOverlappingStreams,
    ///             },
    ///         },
    ///         StreamSourceIds = streamGroupStreamSourceIds,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// StreamGroups can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:AiVision/streamGroup:StreamGroup test_stream_group "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:AiVision/streamGroup:StreamGroup")]
    public partial class StreamGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A human-friendly name for the streamGroup.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Stream
        /// </summary>
        [Output("isEnabled")]
        public Output<bool> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// The current state of the streamGroup.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
        /// </summary>
        [Output("streamOverlaps")]
        public Output<ImmutableArray<Outputs.StreamGroupStreamOverlap>> StreamOverlaps { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs associated with the stream group
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("streamSourceIds")]
        public Output<ImmutableArray<string>> StreamSourceIds { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// When the streamGroup was created, as an RFC3339 datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// When the streamGroup was updated, as an RFC3339 datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a StreamGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamGroup(string name, StreamGroupArgs args, CustomResourceOptions? options = null)
            : base("oci:AiVision/streamGroup:StreamGroup", name, args ?? new StreamGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamGroup(string name, Input<string> id, StreamGroupState? state = null, CustomResourceOptions? options = null)
            : base("oci:AiVision/streamGroup:StreamGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamGroup Get(string name, Input<string> id, StreamGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamGroup(name, id, state, options);
        }
    }

    public sealed class StreamGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A human-friendly name for the streamGroup.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Stream
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("streamOverlaps")]
        private InputList<Inputs.StreamGroupStreamOverlapArgs>? _streamOverlaps;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
        /// </summary>
        public InputList<Inputs.StreamGroupStreamOverlapArgs> StreamOverlaps
        {
            get => _streamOverlaps ?? (_streamOverlaps = new InputList<Inputs.StreamGroupStreamOverlapArgs>());
            set => _streamOverlaps = value;
        }

        [Input("streamSourceIds")]
        private InputList<string>? _streamSourceIds;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs associated with the stream group
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public InputList<string> StreamSourceIds
        {
            get => _streamSourceIds ?? (_streamSourceIds = new InputList<string>());
            set => _streamSourceIds = value;
        }

        public StreamGroupArgs()
        {
        }
        public static new StreamGroupArgs Empty => new StreamGroupArgs();
    }

    public sealed class StreamGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A human-friendly name for the streamGroup.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Stream
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The current state of the streamGroup.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("streamOverlaps")]
        private InputList<Inputs.StreamGroupStreamOverlapGetArgs>? _streamOverlaps;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
        /// </summary>
        public InputList<Inputs.StreamGroupStreamOverlapGetArgs> StreamOverlaps
        {
            get => _streamOverlaps ?? (_streamOverlaps = new InputList<Inputs.StreamGroupStreamOverlapGetArgs>());
            set => _streamOverlaps = value;
        }

        [Input("streamSourceIds")]
        private InputList<string>? _streamSourceIds;

        /// <summary>
        /// (Updatable) List of streamSource OCIDs associated with the stream group
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public InputList<string> StreamSourceIds
        {
            get => _streamSourceIds ?? (_streamSourceIds = new InputList<string>());
            set => _streamSourceIds = value;
        }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// When the streamGroup was created, as an RFC3339 datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// When the streamGroup was updated, as an RFC3339 datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public StreamGroupState()
        {
        }
        public static new StreamGroupState Empty => new StreamGroupState();
    }
}
