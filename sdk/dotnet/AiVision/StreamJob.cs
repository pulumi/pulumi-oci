// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AiVision
{
    /// <summary>
    /// This resource provides the Stream Job resource in Oracle Cloud Infrastructure Ai Vision service.
    /// 
    /// Create a stream analysis job with given inputs and features.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testStreamJob = new Oci.AiVision.StreamJob("test_stream_job", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         Features = new[]
    ///         {
    ///             new Oci.AiVision.Inputs.StreamJobFeatureArgs
    ///             {
    ///                 FeatureType = streamJobFeaturesFeatureType,
    ///                 MaxResults = streamJobFeaturesMaxResults,
    ///                 ShouldReturnLandmarks = streamJobFeaturesShouldReturnLandmarks,
    ///                 TrackingTypes = new[]
    ///                 {
    ///                     new Oci.AiVision.Inputs.StreamJobFeatureTrackingTypeArgs
    ///                     {
    ///                         BiometricStoreCompartmentId = testCompartment.Id,
    ///                         BiometricStoreId = testBiometricStore.Id,
    ///                         DetectionModelId = testModel.Id,
    ///                         MaxResults = streamJobFeaturesTrackingTypesMaxResults,
    ///                         Objects = streamJobFeaturesTrackingTypesObjects,
    ///                         ShouldReturnLandmarks = streamJobFeaturesTrackingTypesShouldReturnLandmarks,
    ///                         TrackingModelId = testModel.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         StreamOutputLocation = new Oci.AiVision.Inputs.StreamJobStreamOutputLocationArgs
    ///         {
    ///             Bucket = streamJobStreamOutputLocationBucket,
    ///             Namespace = streamJobStreamOutputLocationNamespace,
    ///             OutputLocationType = streamJobStreamOutputLocationOutputLocationType,
    ///             Prefix = streamJobStreamOutputLocationPrefix,
    ///             OboToken = streamJobStreamOutputLocationOboToken,
    ///         },
    ///         StreamSourceId = testStreamSource.Id,
    ///         DefinedTags = streamJobDefinedTags,
    ///         DisplayName = streamJobDisplayName,
    ///         FreeformTags = streamJobFreeformTags,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// StreamJobs can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:AiVision/streamJob:StreamJob test_stream_job "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:AiVision/streamJob:StreamJob")]
    public partial class StreamJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// participant id of agent where results need to be sent
        /// </summary>
        [Output("agentParticipantId")]
        public Output<string> AgentParticipantId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Stream job display name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) a list of stream analysis features.
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<Outputs.StreamJobFeature>> Features { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Additional details about current state of streamJob
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The target state for the Stream Job. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Details about a where results will be Sent
        /// </summary>
        [Output("streamOutputLocation")]
        public Output<Outputs.StreamJobStreamOutputLocation> StreamOutputLocation { get; private set; } = null!;

        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of streamSource.
        /// </summary>
        [Output("streamSourceId")]
        public Output<string> StreamSourceId { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// When the streamJob was created, as an RFC3339 datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// When the stream job was updated, as an RFC3339 datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a StreamJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamJob(string name, StreamJobArgs args, CustomResourceOptions? options = null)
            : base("oci:AiVision/streamJob:StreamJob", name, args ?? new StreamJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamJob(string name, Input<string> id, StreamJobState? state = null, CustomResourceOptions? options = null)
            : base("oci:AiVision/streamJob:StreamJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamJob Get(string name, Input<string> id, StreamJobState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamJob(name, id, state, options);
        }
    }

    public sealed class StreamJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Stream job display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("features", required: true)]
        private InputList<Inputs.StreamJobFeatureArgs>? _features;

        /// <summary>
        /// (Updatable) a list of stream analysis features.
        /// </summary>
        public InputList<Inputs.StreamJobFeatureArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.StreamJobFeatureArgs>());
            set => _features = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The target state for the Stream Job. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) Details about a where results will be Sent
        /// </summary>
        [Input("streamOutputLocation", required: true)]
        public Input<Inputs.StreamJobStreamOutputLocationArgs> StreamOutputLocation { get; set; } = null!;

        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of streamSource.
        /// </summary>
        [Input("streamSourceId", required: true)]
        public Input<string> StreamSourceId { get; set; } = null!;

        public StreamJobArgs()
        {
        }
        public static new StreamJobArgs Empty => new StreamJobArgs();
    }

    public sealed class StreamJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// participant id of agent where results need to be sent
        /// </summary>
        [Input("agentParticipantId")]
        public Input<string>? AgentParticipantId { get; set; }

        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Stream job display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("features")]
        private InputList<Inputs.StreamJobFeatureGetArgs>? _features;

        /// <summary>
        /// (Updatable) a list of stream analysis features.
        /// </summary>
        public InputList<Inputs.StreamJobFeatureGetArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.StreamJobFeatureGetArgs>());
            set => _features = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Additional details about current state of streamJob
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// (Updatable) The target state for the Stream Job. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) Details about a where results will be Sent
        /// </summary>
        [Input("streamOutputLocation")]
        public Input<Inputs.StreamJobStreamOutputLocationGetArgs>? StreamOutputLocation { get; set; }

        /// <summary>
        /// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of streamSource.
        /// </summary>
        [Input("streamSourceId")]
        public Input<string>? StreamSourceId { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// When the streamJob was created, as an RFC3339 datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// When the stream job was updated, as an RFC3339 datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public StreamJobState()
        {
        }
        public static new StreamJobState Empty => new StreamJobState();
    }
}
