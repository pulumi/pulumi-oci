// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Analytics
{
    /// <summary>
    /// This resource provides the Analytics Instance Private Access Channel resource in Oracle Cloud Infrastructure Analytics service.
    /// 
    /// Create a Private access Channel for the Analytics instance. The operation is long-running
    /// and creates a new WorkRequest.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAnalyticsInstancePrivateAccessChannel = new Oci.Analytics.AnalyticsInstancePrivateAccessChannel("test_analytics_instance_private_access_channel", new()
    ///     {
    ///         AnalyticsInstanceId = testAnalyticsInstance.Id,
    ///         DisplayName = analyticsInstancePrivateAccessChannelDisplayName,
    ///         PrivateSourceDnsZones = new[]
    ///         {
    ///             new Oci.Analytics.Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs
    ///             {
    ///                 DnsZone = analyticsInstancePrivateAccessChannelPrivateSourceDnsZonesDnsZone,
    ///                 Description = analyticsInstancePrivateAccessChannelPrivateSourceDnsZonesDescription,
    ///             },
    ///         },
    ///         SubnetId = testSubnet.Id,
    ///         VcnId = testVcn.Id,
    ///         NetworkSecurityGroupIds = analyticsInstancePrivateAccessChannelNetworkSecurityGroupIds,
    ///         PrivateSourceScanHosts = new[]
    ///         {
    ///             new Oci.Analytics.Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs
    ///             {
    ///                 ScanHostname = analyticsInstancePrivateAccessChannelPrivateSourceScanHostsScanHostname,
    ///                 ScanPort = analyticsInstancePrivateAccessChannelPrivateSourceScanHostsScanPort,
    ///                 Description = analyticsInstancePrivateAccessChannelPrivateSourceScanHostsDescription,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// AnalyticsInstancePrivateAccessChannels can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel test_analytics_instance_private_access_channel "analyticsInstances/{analyticsInstanceId}/privateAccessChannels/{privateAccessChannelKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel")]
    public partial class AnalyticsInstancePrivateAccessChannel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Output("analyticsInstanceId")]
        public Output<string> AnalyticsInstanceId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Display Name of the Private Access Channel.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
        /// </summary>
        [Output("egressSourceIpAddresses")]
        public Output<ImmutableArray<string>> EgressSourceIpAddresses { get; private set; } = null!;

        /// <summary>
        /// IP Address of the Private Access channel.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Private Access Channel unique identifier key.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Network Security Group OCIDs for an Analytics instance.
        /// </summary>
        [Output("networkSecurityGroupIds")]
        public Output<ImmutableArray<string>> NetworkSecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
        /// </summary>
        [Output("privateSourceDnsZones")]
        public Output<ImmutableArray<Outputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone>> PrivateSourceDnsZones { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of Private Source DB SCAN hosts registered with Private Access Channel for access from Analytics Instance.
        /// </summary>
        [Output("privateSourceScanHosts")]
        public Output<ImmutableArray<Outputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHost>> PrivateSourceScanHosts { get; private set; } = null!;

        /// <summary>
        /// (Updatable) OCID of the customer subnet connected to private access channel.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) OCID of the customer VCN peered with private access channel. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("vcnId")]
        public Output<string> VcnId { get; private set; } = null!;


        /// <summary>
        /// Create a AnalyticsInstancePrivateAccessChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AnalyticsInstancePrivateAccessChannel(string name, AnalyticsInstancePrivateAccessChannelArgs args, CustomResourceOptions? options = null)
            : base("oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel", name, args ?? new AnalyticsInstancePrivateAccessChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AnalyticsInstancePrivateAccessChannel(string name, Input<string> id, AnalyticsInstancePrivateAccessChannelState? state = null, CustomResourceOptions? options = null)
            : base("oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AnalyticsInstancePrivateAccessChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AnalyticsInstancePrivateAccessChannel Get(string name, Input<string> id, AnalyticsInstancePrivateAccessChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new AnalyticsInstancePrivateAccessChannel(name, id, state, options);
        }
    }

    public sealed class AnalyticsInstancePrivateAccessChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Input("analyticsInstanceId", required: true)]
        public Input<string> AnalyticsInstanceId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Display Name of the Private Access Channel.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("networkSecurityGroupIds")]
        private InputList<string>? _networkSecurityGroupIds;

        /// <summary>
        /// (Updatable) Network Security Group OCIDs for an Analytics instance.
        /// </summary>
        public InputList<string> NetworkSecurityGroupIds
        {
            get => _networkSecurityGroupIds ?? (_networkSecurityGroupIds = new InputList<string>());
            set => _networkSecurityGroupIds = value;
        }

        [Input("privateSourceDnsZones", required: true)]
        private InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs>? _privateSourceDnsZones;

        /// <summary>
        /// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
        /// </summary>
        public InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs> PrivateSourceDnsZones
        {
            get => _privateSourceDnsZones ?? (_privateSourceDnsZones = new InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs>());
            set => _privateSourceDnsZones = value;
        }

        [Input("privateSourceScanHosts")]
        private InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs>? _privateSourceScanHosts;

        /// <summary>
        /// (Updatable) List of Private Source DB SCAN hosts registered with Private Access Channel for access from Analytics Instance.
        /// </summary>
        public InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs> PrivateSourceScanHosts
        {
            get => _privateSourceScanHosts ?? (_privateSourceScanHosts = new InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostArgs>());
            set => _privateSourceScanHosts = value;
        }

        /// <summary>
        /// (Updatable) OCID of the customer subnet connected to private access channel.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// (Updatable) OCID of the customer VCN peered with private access channel. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("vcnId", required: true)]
        public Input<string> VcnId { get; set; } = null!;

        public AnalyticsInstancePrivateAccessChannelArgs()
        {
        }
        public static new AnalyticsInstancePrivateAccessChannelArgs Empty => new AnalyticsInstancePrivateAccessChannelArgs();
    }

    public sealed class AnalyticsInstancePrivateAccessChannelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Input("analyticsInstanceId")]
        public Input<string>? AnalyticsInstanceId { get; set; }

        /// <summary>
        /// (Updatable) Display Name of the Private Access Channel.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("egressSourceIpAddresses")]
        private InputList<string>? _egressSourceIpAddresses;

        /// <summary>
        /// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
        /// </summary>
        public InputList<string> EgressSourceIpAddresses
        {
            get => _egressSourceIpAddresses ?? (_egressSourceIpAddresses = new InputList<string>());
            set => _egressSourceIpAddresses = value;
        }

        /// <summary>
        /// IP Address of the Private Access channel.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Private Access Channel unique identifier key.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("networkSecurityGroupIds")]
        private InputList<string>? _networkSecurityGroupIds;

        /// <summary>
        /// (Updatable) Network Security Group OCIDs for an Analytics instance.
        /// </summary>
        public InputList<string> NetworkSecurityGroupIds
        {
            get => _networkSecurityGroupIds ?? (_networkSecurityGroupIds = new InputList<string>());
            set => _networkSecurityGroupIds = value;
        }

        [Input("privateSourceDnsZones")]
        private InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneGetArgs>? _privateSourceDnsZones;

        /// <summary>
        /// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
        /// </summary>
        public InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneGetArgs> PrivateSourceDnsZones
        {
            get => _privateSourceDnsZones ?? (_privateSourceDnsZones = new InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneGetArgs>());
            set => _privateSourceDnsZones = value;
        }

        [Input("privateSourceScanHosts")]
        private InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostGetArgs>? _privateSourceScanHosts;

        /// <summary>
        /// (Updatable) List of Private Source DB SCAN hosts registered with Private Access Channel for access from Analytics Instance.
        /// </summary>
        public InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostGetArgs> PrivateSourceScanHosts
        {
            get => _privateSourceScanHosts ?? (_privateSourceScanHosts = new InputList<Inputs.AnalyticsInstancePrivateAccessChannelPrivateSourceScanHostGetArgs>());
            set => _privateSourceScanHosts = value;
        }

        /// <summary>
        /// (Updatable) OCID of the customer subnet connected to private access channel.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (Updatable) OCID of the customer VCN peered with private access channel. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public AnalyticsInstancePrivateAccessChannelState()
        {
        }
        public static new AnalyticsInstancePrivateAccessChannelState Empty => new AnalyticsInstancePrivateAccessChannelState();
    }
}
