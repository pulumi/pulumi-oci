// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Analytics
{
    /// <summary>
    /// This resource provides the Analytics Instance Vanity Url resource in Oracle Cloud Infrastructure Analytics service.
    /// 
    /// Allows specifying a custom host name to be used to access the analytics instance.  This requires prior setup of DNS entry and certificate
    /// for this host.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAnalyticsInstanceVanityUrl = new Oci.Analytics.AnalyticsInstanceVanityUrl("testAnalyticsInstanceVanityUrl", new()
    ///     {
    ///         AnalyticsInstanceId = oci_analytics_analytics_instance.Test_analytics_instance.Id,
    ///         CaCertificate = @var.Analytics_instance_vanity_url_ca_certificate,
    ///         Hosts = @var.Analytics_instance_vanity_url_hosts,
    ///         PrivateKey = @var.Analytics_instance_vanity_url_private_key,
    ///         PublicCertificate = @var.Analytics_instance_vanity_url_public_certificate,
    ///         Description = @var.Analytics_instance_vanity_url_description,
    ///         Passphrase = @var.Analytics_instance_vanity_url_passphrase,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// AnalyticsInstanceVanityUrls can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl test_analytics_instance_vanity_url "analyticsInstances/{analyticsInstanceId}/vanityUrls/{vanityUrlKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl")]
    public partial class AnalyticsInstanceVanityUrl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Output("analyticsInstanceId")]
        public Output<string> AnalyticsInstanceId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
        /// </summary>
        [Output("caCertificate")]
        public Output<string> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// Optional description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Passphrase for the PEM Private key (if any).
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        /// <summary>
        /// (Updatable) PEM Private key for HTTPS connections.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) PEM certificate for HTTPS connections. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("publicCertificate")]
        public Output<string> PublicCertificate { get; private set; } = null!;


        /// <summary>
        /// Create a AnalyticsInstanceVanityUrl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AnalyticsInstanceVanityUrl(string name, AnalyticsInstanceVanityUrlArgs args, CustomResourceOptions? options = null)
            : base("oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl", name, args ?? new AnalyticsInstanceVanityUrlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AnalyticsInstanceVanityUrl(string name, Input<string> id, AnalyticsInstanceVanityUrlState? state = null, CustomResourceOptions? options = null)
            : base("oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "passphrase",
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AnalyticsInstanceVanityUrl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AnalyticsInstanceVanityUrl Get(string name, Input<string> id, AnalyticsInstanceVanityUrlState? state = null, CustomResourceOptions? options = null)
        {
            return new AnalyticsInstanceVanityUrl(name, id, state, options);
        }
    }

    public sealed class AnalyticsInstanceVanityUrlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Input("analyticsInstanceId", required: true)]
        public Input<string> AnalyticsInstanceId { get; set; } = null!;

        /// <summary>
        /// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
        /// </summary>
        [Input("caCertificate", required: true)]
        public Input<string> CaCertificate { get; set; } = null!;

        /// <summary>
        /// Optional description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hosts", required: true)]
        private InputList<string>? _hosts;

        /// <summary>
        /// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// (Updatable) Passphrase for the PEM Private key (if any).
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// (Updatable) PEM Private key for HTTPS connections.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) PEM certificate for HTTPS connections. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("publicCertificate", required: true)]
        public Input<string> PublicCertificate { get; set; } = null!;

        public AnalyticsInstanceVanityUrlArgs()
        {
        }
        public static new AnalyticsInstanceVanityUrlArgs Empty => new AnalyticsInstanceVanityUrlArgs();
    }

    public sealed class AnalyticsInstanceVanityUrlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the AnalyticsInstance.
        /// </summary>
        [Input("analyticsInstanceId")]
        public Input<string>? AnalyticsInstanceId { get; set; }

        /// <summary>
        /// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// Optional description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// (Updatable) Passphrase for the PEM Private key (if any).
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// (Updatable) PEM Private key for HTTPS connections.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) PEM certificate for HTTPS connections. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("publicCertificate")]
        public Input<string>? PublicCertificate { get; set; }

        public AnalyticsInstanceVanityUrlState()
        {
        }
        public static new AnalyticsInstanceVanityUrlState Empty => new AnalyticsInstanceVanityUrlState();
    }
}
