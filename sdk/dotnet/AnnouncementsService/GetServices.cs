// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.AnnouncementsService
{
    public static class GetServices
    {
        /// <summary>
        /// This data source provides the list of Services in Oracle Cloud Infrastructure.
        /// 
        /// List all OCI services
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServices = Oci.AnnouncementsService.GetServices.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CommsManagerName = serviceCommsManagerName,
        ///         PlatformType = servicePlatformType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServicesResult> InvokeAsync(GetServicesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServicesResult>("oci:AnnouncementsService/getServices:getServices", args ?? new GetServicesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Services in Oracle Cloud Infrastructure.
        /// 
        /// List all OCI services
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServices = Oci.AnnouncementsService.GetServices.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CommsManagerName = serviceCommsManagerName,
        ///         PlatformType = servicePlatformType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServicesResult> Invoke(GetServicesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServicesResult>("oci:AnnouncementsService/getServices:getServices", args ?? new GetServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter by comms manager name
        /// </summary>
        [Input("commsManagerName")]
        public string? CommsManagerName { get; set; }

        /// <summary>
        /// The OCID of the root compartment/tenancy.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetServicesFilterArgs>? _filters;
        public List<Inputs.GetServicesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServicesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only services underlying a specific platform.
        /// </summary>
        [Input("platformType")]
        public string? PlatformType { get; set; }

        public GetServicesArgs()
        {
        }
        public static new GetServicesArgs Empty => new GetServicesArgs();
    }

    public sealed class GetServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter by comms manager name
        /// </summary>
        [Input("commsManagerName")]
        public Input<string>? CommsManagerName { get; set; }

        /// <summary>
        /// The OCID of the root compartment/tenancy.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetServicesFilterInputArgs>? _filters;
        public InputList<Inputs.GetServicesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServicesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only services underlying a specific platform.
        /// </summary>
        [Input("platformType")]
        public Input<string>? PlatformType { get; set; }

        public GetServicesInvokeArgs()
        {
        }
        public static new GetServicesInvokeArgs Empty => new GetServicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetServicesResult
    {
        /// <summary>
        /// Name of the comms manager team that manages Notifications to this service.
        /// </summary>
        public readonly string? CommsManagerName;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetServicesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The platform type this service object is related to.
        /// </summary>
        public readonly string? PlatformType;
        /// <summary>
        /// The list of services_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServicesServicesCollectionResult> ServicesCollections;

        [OutputConstructor]
        private GetServicesResult(
            string? commsManagerName,

            string compartmentId,

            ImmutableArray<Outputs.GetServicesFilterResult> filters,

            string id,

            string? platformType,

            ImmutableArray<Outputs.GetServicesServicesCollectionResult> servicesCollections)
        {
            CommsManagerName = commsManagerName;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            PlatformType = platformType;
            ServicesCollections = servicesCollections;
        }
    }
}
