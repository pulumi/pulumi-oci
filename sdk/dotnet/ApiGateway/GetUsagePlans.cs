// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApiGateway
{
    public static class GetUsagePlans
    {
        /// <summary>
        /// This data source provides the list of Usage Plans in Oracle Cloud Infrastructure API Gateway service.
        /// 
        /// Returns a list of usage plans.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testUsagePlans = Output.Create(Oci.ApiGateway.GetUsagePlans.InvokeAsync(new Oci.ApiGateway.GetUsagePlansArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Usage_plan_display_name,
        ///             State = @var.Usage_plan_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUsagePlansResult> InvokeAsync(GetUsagePlansArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUsagePlansResult>("oci:ApiGateway/getUsagePlans:getUsagePlans", args ?? new GetUsagePlansArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Usage Plans in Oracle Cloud Infrastructure API Gateway service.
        /// 
        /// Returns a list of usage plans.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testUsagePlans = Output.Create(Oci.ApiGateway.GetUsagePlans.InvokeAsync(new Oci.ApiGateway.GetUsagePlansArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Usage_plan_display_name,
        ///             State = @var.Usage_plan_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUsagePlansResult> Invoke(GetUsagePlansInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUsagePlansResult>("oci:ApiGateway/getUsagePlans:getUsagePlans", args ?? new GetUsagePlansInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsagePlansArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ocid of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetUsagePlansFilterArgs>? _filters;
        public List<Inputs.GetUsagePlansFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUsagePlansFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. Example: `ACTIVE`
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetUsagePlansArgs()
        {
        }
    }

    public sealed class GetUsagePlansInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ocid of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetUsagePlansFilterInputArgs>? _filters;
        public InputList<Inputs.GetUsagePlansFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUsagePlansFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. Example: `ACTIVE`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetUsagePlansInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUsagePlansResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the resource is created.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetUsagePlansFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the usage plan.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of usage_plan_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsagePlansUsagePlanCollectionResult> UsagePlanCollections;

        [OutputConstructor]
        private GetUsagePlansResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetUsagePlansFilterResult> filters,

            string id,

            string? state,

            ImmutableArray<Outputs.GetUsagePlansUsagePlanCollectionResult> usagePlanCollections)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            UsagePlanCollections = usagePlanCollections;
        }
    }
}
