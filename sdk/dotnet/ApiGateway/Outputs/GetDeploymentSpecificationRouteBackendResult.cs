// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApiGateway.Outputs
{

    [OutputType]
    public sealed class GetDeploymentSpecificationRouteBackendResult
    {
        /// <summary>
        /// A list of allowed post-logout URLs to which a request can be redirected after revoke access
        /// </summary>
        public readonly ImmutableArray<string> AllowedPostLogoutUris;
        /// <summary>
        /// The body of the stock response from the mock backend.
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// Defines a timeout for establishing a connection with a proxied server.
        /// </summary>
        public readonly double ConnectTimeoutInSeconds;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Functions function resource.
        /// </summary>
        public readonly string FunctionId;
        /// <summary>
        /// The List of Headers
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendHeaderResult> Headers;
        /// <summary>
        /// Defines whether or not to uphold SSL verification.
        /// </summary>
        public readonly bool IsSslVerifyDisabled;
        /// <summary>
        /// Defines a state that should be shared on redirecting to postLogout URL.
        /// </summary>
        public readonly string PostLogoutState;
        /// <summary>
        /// Defines a timeout for reading a response from the proxied server.
        /// </summary>
        public readonly double ReadTimeoutInSeconds;
        /// <summary>
        /// List of backends to chose from for Dynamic Routing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendRoutingBackendResult> RoutingBackends;
        /// <summary>
        /// Information around selector used for branching among routes/ authentication servers while dynamic routing/ authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendSelectionSourceResult> SelectionSources;
        /// <summary>
        /// Defines a timeout for transmitting a request to the proxied server.
        /// </summary>
        public readonly double SendTimeoutInSeconds;
        /// <summary>
        /// The status code of the stock response from the mock backend.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// Type of the Response Cache Store Policy.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The url of the HTTP Backend
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDeploymentSpecificationRouteBackendResult(
            ImmutableArray<string> allowedPostLogoutUris,

            string body,

            double connectTimeoutInSeconds,

            string functionId,

            ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendHeaderResult> headers,

            bool isSslVerifyDisabled,

            string postLogoutState,

            double readTimeoutInSeconds,

            ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendRoutingBackendResult> routingBackends,

            ImmutableArray<Outputs.GetDeploymentSpecificationRouteBackendSelectionSourceResult> selectionSources,

            double sendTimeoutInSeconds,

            int status,

            string type,

            string url)
        {
            AllowedPostLogoutUris = allowedPostLogoutUris;
            Body = body;
            ConnectTimeoutInSeconds = connectTimeoutInSeconds;
            FunctionId = functionId;
            Headers = headers;
            IsSslVerifyDisabled = isSslVerifyDisabled;
            PostLogoutState = postLogoutState;
            ReadTimeoutInSeconds = readTimeoutInSeconds;
            RoutingBackends = routingBackends;
            SelectionSources = selectionSources;
            SendTimeoutInSeconds = sendTimeoutInSeconds;
            Status = status;
            Type = type;
            Url = url;
        }
    }
}
