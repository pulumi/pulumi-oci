// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmConfig
{
    public static class GetConfig
    {
        /// <summary>
        /// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Apm Config service.
        /// 
        /// Gets the configuration item identified by the OCID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfig = Oci.ApmConfig.GetConfig.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         ConfigId = testConfigOciApmConfigConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConfigResult> InvokeAsync(GetConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigResult>("oci:ApmConfig/getConfig:getConfig", args ?? new GetConfigArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Apm Config service.
        /// 
        /// Gets the configuration item identified by the OCID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfig = Oci.ApmConfig.GetConfig.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         ConfigId = testConfigOciApmConfigConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConfigResult> Invoke(GetConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigResult>("oci:ApmConfig/getConfig:getConfig", args ?? new GetConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Apm Config service.
        /// 
        /// Gets the configuration item identified by the OCID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfig = Oci.ApmConfig.GetConfig.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         ConfigId = testConfigOciApmConfigConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConfigResult> Invoke(GetConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigResult>("oci:ApmConfig/getConfig:getConfig", args ?? new GetConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration item.
        /// </summary>
        [Input("configId", required: true)]
        public string ConfigId { get; set; } = null!;

        public GetConfigArgs()
        {
        }
        public static new GetConfigArgs Empty => new GetConfigArgs();
    }

    public sealed class GetConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public Input<string> ApmDomainId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration item.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        public GetConfigInvokeArgs()
        {
        }
        public static new GetConfigInvokeArgs Empty => new GetConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigResult
    {
        /// <summary>
        /// The version of the referenced agent bundle.
        /// </summary>
        public readonly string AgentVersion;
        public readonly string ApmDomainId;
        /// <summary>
        /// The directory owned by runAsUser.
        /// </summary>
        public readonly string AttachInstallDir;
        public readonly string ConfigId;
        /// <summary>
        /// The type of configuration item.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// Collection of agent configuration files. For agents that use a single configuration file, this SHOULD contain a single entry and the file name MAY be an empty string. For multiple entries, you should use multiple blocks of `ConfigMap`. To apply a different configuration in a subset of the agents, put this block anywhere in the body of the configuration and edit &lt;some variable&gt; and &lt;some content&gt; {{ &lt;some variable&gt; | default &lt;some content&gt; }} Example: com.oracle.apm.agent.tracer.enable.jfr = {{ isJfrEnabled | default false }} Then, in the configuration's overrides, specify a different value for &lt;some variable&gt; along with the desired agent filter. Example: "agentFilter": "ApplicationType='Tomcat'" "overrideMap": { "isJfrEnabled": true }
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigConfigResult> Configs;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A description of the metric.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A list of dimensions for the metric. This variable should not be used.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigDimensionResult> Dimensions;
        /// <summary>
        /// The name by which a configuration entity is displayed to the end user.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// For optimistic concurrency control. See `if-match`.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId is generated when a Span Filter is created.
        /// </summary>
        public readonly string FilterId;
        /// <summary>
        /// The string that defines the Span Filter expression.
        /// </summary>
        public readonly string FilterText;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// A string that specifies the group that an OPTIONS item belongs to.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration item. An OCID is generated when the item is created.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of configuration items that reference the span filter.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigInUseByResult> InUseBies;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Management Agent that will provision the APM Agent.
        /// </summary>
        public readonly string ManagementAgentId;
        /// <summary>
        /// The agent attribute KEY by which an Agent configuration is matched to an agent.  All agent configuration objects share the same key. It is [ServiceName, service.name] by default.  The attribute VALUE corresponding to this KEY is in the matchAgentsWithAttributeValue field.
        /// </summary>
        public readonly ImmutableArray<string> MatchAgentsWithAttributeKeys;
        /// <summary>
        /// The agent attribute VALUE by which an agent configuration is matched to an agent.  Each agent configuration object must specify a different value.  The attribute KEY corresponding to this VALUE is in the matchAgentsWithAttributeKey field.
        /// </summary>
        public readonly string MatchAgentsWithAttributeValue;
        /// <summary>
        /// The list of metrics in this group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigMetricResult> Metrics;
        /// <summary>
        /// The namespace to which the metrics are published. It must be one of several predefined namespaces.
        /// </summary>
        public readonly string Namespace;
        public readonly string OpcDryRun;
        /// <summary>
        /// The options are stored here as JSON.
        /// </summary>
        public readonly string Options;
        /// <summary>
        /// Agent configuration overrides that should apply to a subset of the agents associated with an Agent Config object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigOverrideResult> Overrides;
        /// <summary>
        /// Filter patterns used to discover active Java processes for provisioning the APM Agent.
        /// </summary>
        public readonly ImmutableArray<string> ProcessFilters;
        public readonly ImmutableArray<Outputs.GetConfigRuleResult> Rules;
        /// <summary>
        /// The OS user that should be used to discover Java processes.
        /// </summary>
        public readonly string RunAsUser;
        /// <summary>
        /// The name of the service being monitored. This argument enables you to filter by service and view traces and other signals in the APM Explorer user interface.
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a user.
        /// </summary>
        public readonly string UpdatedBy;

        [OutputConstructor]
        private GetConfigResult(
            string agentVersion,

            string apmDomainId,

            string attachInstallDir,

            string configId,

            string configType,

            ImmutableArray<Outputs.GetConfigConfigResult> configs,

            string createdBy,

            ImmutableDictionary<string, string> definedTags,

            string description,

            ImmutableArray<Outputs.GetConfigDimensionResult> dimensions,

            string displayName,

            string etag,

            string filterId,

            string filterText,

            ImmutableDictionary<string, string> freeformTags,

            string group,

            string id,

            ImmutableArray<Outputs.GetConfigInUseByResult> inUseBies,

            string managementAgentId,

            ImmutableArray<string> matchAgentsWithAttributeKeys,

            string matchAgentsWithAttributeValue,

            ImmutableArray<Outputs.GetConfigMetricResult> metrics,

            string @namespace,

            string opcDryRun,

            string options,

            ImmutableArray<Outputs.GetConfigOverrideResult> overrides,

            ImmutableArray<string> processFilters,

            ImmutableArray<Outputs.GetConfigRuleResult> rules,

            string runAsUser,

            string serviceName,

            string timeCreated,

            string timeUpdated,

            string updatedBy)
        {
            AgentVersion = agentVersion;
            ApmDomainId = apmDomainId;
            AttachInstallDir = attachInstallDir;
            ConfigId = configId;
            ConfigType = configType;
            Configs = configs;
            CreatedBy = createdBy;
            DefinedTags = definedTags;
            Description = description;
            Dimensions = dimensions;
            DisplayName = displayName;
            Etag = etag;
            FilterId = filterId;
            FilterText = filterText;
            FreeformTags = freeformTags;
            Group = group;
            Id = id;
            InUseBies = inUseBies;
            ManagementAgentId = managementAgentId;
            MatchAgentsWithAttributeKeys = matchAgentsWithAttributeKeys;
            MatchAgentsWithAttributeValue = matchAgentsWithAttributeValue;
            Metrics = metrics;
            Namespace = @namespace;
            OpcDryRun = opcDryRun;
            Options = options;
            Overrides = overrides;
            ProcessFilters = processFilters;
            Rules = rules;
            RunAsUser = runAsUser;
            ServiceName = serviceName;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            UpdatedBy = updatedBy;
        }
    }
}
