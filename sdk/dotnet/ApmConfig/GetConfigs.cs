// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmConfig
{
    public static class GetConfigs
    {
        /// <summary>
        /// This data source provides the list of Configs in Oracle Cloud Infrastructure Apm Config service.
        /// 
        /// Returns all configured items optionally filtered by configuration type
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testConfigs = Output.Create(Oci.ApmConfig.GetConfigs.InvokeAsync(new Oci.ApmConfig.GetConfigsArgs
        ///         {
        ///             ApmDomainId = oci_apm_apm_domain.Test_apm_domain.Id,
        ///             ConfigType = @var.Config_config_type,
        ///             DisplayName = @var.Config_display_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConfigsResult> InvokeAsync(GetConfigsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConfigsResult>("oci:ApmConfig/getConfigs:getConfigs", args ?? new GetConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Configs in Oracle Cloud Infrastructure Apm Config service.
        /// 
        /// Returns all configured items optionally filtered by configuration type
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testConfigs = Output.Create(Oci.ApmConfig.GetConfigs.InvokeAsync(new Oci.ApmConfig.GetConfigsArgs
        ///         {
        ///             ApmDomainId = oci_apm_apm_domain.Test_apm_domain.Id,
        ///             ConfigType = @var.Config_config_type,
        ///             DisplayName = @var.Config_display_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConfigsResult> Invoke(GetConfigsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConfigsResult>("oci:ApmConfig/getConfigs:getConfigs", args ?? new GetConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain Id the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// A filter to match only configuration items of the given type. Supported values are SPAN_FILTER, METRIC_GROUP, and APDEX.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetConfigsFilterArgs>? _filters;
        public List<Inputs.GetConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetConfigsFilterArgs>());
            set => _filters = value;
        }

        public GetConfigsArgs()
        {
        }
    }

    public sealed class GetConfigsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain Id the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public Input<string> ApmDomainId { get; set; } = null!;

        /// <summary>
        /// A filter to match only configuration items of the given type. Supported values are SPAN_FILTER, METRIC_GROUP, and APDEX.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetConfigsFilterInputArgs>());
            set => _filters = value;
        }

        public GetConfigsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConfigsResult
    {
        public readonly string ApmDomainId;
        /// <summary>
        /// The list of config_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigsConfigCollectionResult> ConfigCollections;
        /// <summary>
        /// The type of configuration item
        /// </summary>
        public readonly string? ConfigType;
        /// <summary>
        /// A user-friendly name that provides a short description this rule.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetConfigsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetConfigsResult(
            string apmDomainId,

            ImmutableArray<Outputs.GetConfigsConfigCollectionResult> configCollections,

            string? configType,

            string? displayName,

            ImmutableArray<Outputs.GetConfigsFilterResult> filters,

            string id)
        {
            ApmDomainId = apmDomainId;
            ConfigCollections = configCollections;
            ConfigType = configType;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
        }
    }
}
