// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmSynthetics
{
    public static class GetScripts
    {
        /// <summary>
        /// This data source provides the list of Scripts in Oracle Cloud Infrastructure Apm Synthetics service.
        /// 
        /// Returns a list of scripts.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testScripts = Oci.ApmSynthetics.GetScripts.Invoke(new()
        ///     {
        ///         ApmDomainId = oci_apm_synthetics_apm_domain.Test_apm_domain.Id,
        ///         ContentType = @var.Script_content_type,
        ///         DisplayName = @var.Script_display_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetScriptsResult> InvokeAsync(GetScriptsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScriptsResult>("oci:ApmSynthetics/getScripts:getScripts", args ?? new GetScriptsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Scripts in Oracle Cloud Infrastructure Apm Synthetics service.
        /// 
        /// Returns a list of scripts.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testScripts = Oci.ApmSynthetics.GetScripts.Invoke(new()
        ///     {
        ///         ApmDomainId = oci_apm_synthetics_apm_domain.Test_apm_domain.Id,
        ///         ContentType = @var.Script_content_type,
        ///         DisplayName = @var.Script_display_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetScriptsResult> Invoke(GetScriptsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScriptsResult>("oci:ApmSynthetics/getScripts:getScripts", args ?? new GetScriptsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScriptsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the content type given.
        /// </summary>
        [Input("contentType")]
        public string? ContentType { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetScriptsFilterArgs>? _filters;
        public List<Inputs.GetScriptsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetScriptsFilterArgs>());
            set => _filters = value;
        }

        public GetScriptsArgs()
        {
        }
        public static new GetScriptsArgs Empty => new GetScriptsArgs();
    }

    public sealed class GetScriptsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public Input<string> ApmDomainId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the content type given.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetScriptsFilterInputArgs>? _filters;
        public InputList<Inputs.GetScriptsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetScriptsFilterInputArgs>());
            set => _filters = value;
        }

        public GetScriptsInvokeArgs()
        {
        }
        public static new GetScriptsInvokeArgs Empty => new GetScriptsInvokeArgs();
    }


    [OutputType]
    public sealed class GetScriptsResult
    {
        public readonly string ApmDomainId;
        /// <summary>
        /// Content type of the script.
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// Unique name that can be edited. The name should not contain any confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetScriptsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of script_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScriptsScriptCollectionResult> ScriptCollections;

        [OutputConstructor]
        private GetScriptsResult(
            string apmDomainId,

            string? contentType,

            string? displayName,

            ImmutableArray<Outputs.GetScriptsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetScriptsScriptCollectionResult> scriptCollections)
        {
            ApmDomainId = apmDomainId;
            ContentType = contentType;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ScriptCollections = scriptCollections;
        }
    }
}
