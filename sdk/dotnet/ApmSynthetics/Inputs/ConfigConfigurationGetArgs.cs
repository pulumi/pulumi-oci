// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmSynthetics.Inputs
{

    public sealed class ConfigConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Details for client certificate.
        /// </summary>
        [Input("clientCertificateDetails")]
        public Input<Inputs.ConfigConfigurationClientCertificateDetailsGetArgs>? ClientCertificateDetails { get; set; }

        /// <summary>
        /// (Updatable) Type of configuration.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// (Updatable) Database connection string.
        /// </summary>
        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        /// <summary>
        /// (Updatable) Details for basic authentication.
        /// </summary>
        [Input("databaseAuthenticationDetails")]
        public Input<Inputs.ConfigConfigurationDatabaseAuthenticationDetailsGetArgs>? DatabaseAuthenticationDetails { get; set; }

        /// <summary>
        /// (Updatable) Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        /// </summary>
        [Input("databaseConnectionType")]
        public Input<string>? DatabaseConnectionType { get; set; }

        /// <summary>
        /// (Updatable) Database role.
        /// </summary>
        [Input("databaseRole")]
        public Input<string>? DatabaseRole { get; set; }

        /// <summary>
        /// (Updatable) Database type.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// (Updatable) Details for database wallet.
        /// </summary>
        [Input("databaseWalletDetails")]
        public Input<Inputs.ConfigConfigurationDatabaseWalletDetailsGetArgs>? DatabaseWalletDetails { get; set; }

        /// <summary>
        /// (Updatable) Information about the DNS settings.
        /// </summary>
        [Input("dnsConfiguration")]
        public Input<Inputs.ConfigConfigurationDnsConfigurationGetArgs>? DnsConfiguration { get; set; }

        /// <summary>
        /// (Updatable) Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
        /// </summary>
        [Input("downloadSizeLimitInBytes")]
        public Input<int>? DownloadSizeLimitInBytes { get; set; }

        /// <summary>
        /// (Updatable) Details for basic authentication.
        /// </summary>
        [Input("ftpBasicAuthenticationDetails")]
        public Input<Inputs.ConfigConfigurationFtpBasicAuthenticationDetailsGetArgs>? FtpBasicAuthenticationDetails { get; set; }

        /// <summary>
        /// (Updatable) FTP protocol type.
        /// </summary>
        [Input("ftpProtocol")]
        public Input<string>? FtpProtocol { get; set; }

        /// <summary>
        /// (Updatable) FTP monitor request type.
        /// </summary>
        [Input("ftpRequestType")]
        public Input<string>? FtpRequestType { get; set; }

        /// <summary>
        /// (Updatable) If enabled, Active mode will be used for the FTP connection.
        /// </summary>
        [Input("isActiveMode")]
        public Input<bool>? IsActiveMode { get; set; }

        /// <summary>
        /// (Updatable) If certificate validation is enabled, then the call will fail in case of certification errors.
        /// </summary>
        [Input("isCertificateValidationEnabled")]
        public Input<bool>? IsCertificateValidationEnabled { get; set; }

        /// <summary>
        /// (Updatable) If disabled, auto snapshots are not collected.
        /// </summary>
        [Input("isDefaultSnapshotEnabled")]
        public Input<bool>? IsDefaultSnapshotEnabled { get; set; }

        /// <summary>
        /// (Updatable) If isFailureRetried is enabled, then a failed call will be retried.
        /// </summary>
        [Input("isFailureRetried")]
        public Input<bool>? IsFailureRetried { get; set; }

        /// <summary>
        /// (Updatable) If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        /// </summary>
        [Input("isQueryRecursive")]
        public Input<bool>? IsQueryRecursive { get; set; }

        /// <summary>
        /// (Updatable) If redirection is enabled, then redirects will be allowed while accessing target URL.
        /// </summary>
        [Input("isRedirectionEnabled")]
        public Input<bool>? IsRedirectionEnabled { get; set; }

        /// <summary>
        /// (Updatable) Name of the server that will be used to perform DNS lookup.
        /// </summary>
        [Input("nameServer")]
        public Input<string>? NameServer { get; set; }

        /// <summary>
        /// (Updatable) Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.ConfigConfigurationNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// (Updatable) Type of protocol.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// (Updatable) SQL query to be executed.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// (Updatable) DNS record type.
        /// </summary>
        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        /// <summary>
        /// (Updatable) Details for request HTTP authentication.
        /// </summary>
        [Input("reqAuthenticationDetails")]
        public Input<Inputs.ConfigConfigurationReqAuthenticationDetailsGetArgs>? ReqAuthenticationDetails { get; set; }

        /// <summary>
        /// (Updatable) Request HTTP authentication scheme.
        /// </summary>
        [Input("reqAuthenticationScheme")]
        public Input<string>? ReqAuthenticationScheme { get; set; }

        [Input("requestHeaders")]
        private InputList<Inputs.ConfigConfigurationRequestHeaderGetArgs>? _requestHeaders;

        /// <summary>
        /// (Updatable) List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        /// </summary>
        public InputList<Inputs.ConfigConfigurationRequestHeaderGetArgs> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputList<Inputs.ConfigConfigurationRequestHeaderGetArgs>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// (Updatable) Request HTTP method.
        /// </summary>
        [Input("requestMethod")]
        public Input<string>? RequestMethod { get; set; }

        /// <summary>
        /// (Updatable) Request post body content.
        /// </summary>
        [Input("requestPostBody")]
        public Input<string>? RequestPostBody { get; set; }

        [Input("requestQueryParams")]
        private InputList<Inputs.ConfigConfigurationRequestQueryParamGetArgs>? _requestQueryParams;

        /// <summary>
        /// (Updatable) List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        /// </summary>
        public InputList<Inputs.ConfigConfigurationRequestQueryParamGetArgs> RequestQueryParams
        {
            get => _requestQueryParams ?? (_requestQueryParams = new InputList<Inputs.ConfigConfigurationRequestQueryParamGetArgs>());
            set => _requestQueryParams = value;
        }

        /// <summary>
        /// (Updatable) File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
        /// </summary>
        [Input("uploadFileSizeInBytes")]
        public Input<int>? UploadFileSizeInBytes { get; set; }

        [Input("verifyResponseCodes")]
        private InputList<string>? _verifyResponseCodes;

        /// <summary>
        /// (Updatable) Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        /// </summary>
        public InputList<string> VerifyResponseCodes
        {
            get => _verifyResponseCodes ?? (_verifyResponseCodes = new InputList<string>());
            set => _verifyResponseCodes = value;
        }

        /// <summary>
        /// (Updatable) Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        /// </summary>
        [Input("verifyResponseContent")]
        public Input<string>? VerifyResponseContent { get; set; }

        [Input("verifyTexts")]
        private InputList<Inputs.ConfigConfigurationVerifyTextGetArgs>? _verifyTexts;

        /// <summary>
        /// (Updatable) Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        /// </summary>
        public InputList<Inputs.ConfigConfigurationVerifyTextGetArgs> VerifyTexts
        {
            get => _verifyTexts ?? (_verifyTexts = new InputList<Inputs.ConfigConfigurationVerifyTextGetArgs>());
            set => _verifyTexts = value;
        }

        public ConfigConfigurationGetArgs()
        {
        }
        public static new ConfigConfigurationGetArgs Empty => new ConfigConfigurationGetArgs();
    }
}
