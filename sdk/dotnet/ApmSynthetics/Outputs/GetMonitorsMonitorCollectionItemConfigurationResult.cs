// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmSynthetics.Outputs
{

    [OutputType]
    public sealed class GetMonitorsMonitorCollectionItemConfigurationResult
    {
        /// <summary>
        /// Details for client certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult> ClientCertificateDetails;
        /// <summary>
        /// Type of configuration.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// Database connection string.
        /// </summary>
        public readonly string ConnectionString;
        /// <summary>
        /// Details for basic authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetailResult> DatabaseAuthenticationDetails;
        /// <summary>
        /// Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
        /// </summary>
        public readonly string DatabaseConnectionType;
        /// <summary>
        /// Database role.
        /// </summary>
        public readonly string DatabaseRole;
        /// <summary>
        /// Database type.
        /// </summary>
        public readonly string DatabaseType;
        /// <summary>
        /// Details for database wallet.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDatabaseWalletDetailResult> DatabaseWalletDetails;
        /// <summary>
        /// Information about the DNS settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult> DnsConfigurations;
        /// <summary>
        /// Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
        /// </summary>
        public readonly int DownloadSizeLimitInBytes;
        /// <summary>
        /// Details for basic authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetailResult> FtpBasicAuthenticationDetails;
        /// <summary>
        /// FTP protocol type.
        /// </summary>
        public readonly string FtpProtocol;
        /// <summary>
        /// FTP monitor request type.
        /// </summary>
        public readonly string FtpRequestType;
        /// <summary>
        /// If enabled, Active mode will be used for the FTP connection.
        /// </summary>
        public readonly bool IsActiveMode;
        /// <summary>
        /// If certificate validation is enabled, then the call will fail in case of certification errors.
        /// </summary>
        public readonly bool IsCertificateValidationEnabled;
        /// <summary>
        /// If disabled, auto snapshots are not collected.
        /// </summary>
        public readonly bool IsDefaultSnapshotEnabled;
        /// <summary>
        /// If isFailureRetried is enabled, then a failed call will be retried.
        /// </summary>
        public readonly bool IsFailureRetried;
        /// <summary>
        /// If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
        /// </summary>
        public readonly bool IsQueryRecursive;
        /// <summary>
        /// If redirection is enabled, then redirects will be allowed while accessing target URL.
        /// </summary>
        public readonly bool IsRedirectionEnabled;
        /// <summary>
        /// Name of the server that will be used to perform DNS lookup.
        /// </summary>
        public readonly string NameServer;
        /// <summary>
        /// Details of the network configuration. For NETWORK monitor type, NetworkConfiguration is mandatory.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult> NetworkConfigurations;
        /// <summary>
        /// Type of protocol.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// SQL query to be executed.
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// DNS record type.
        /// </summary>
        public readonly string RecordType;
        /// <summary>
        /// Details for request HTTP authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult> ReqAuthenticationDetails;
        /// <summary>
        /// Request HTTP authentication scheme.
        /// </summary>
        public readonly string ReqAuthenticationScheme;
        /// <summary>
        /// List of request headers. Example: `[{"headerName": "content-type", "headerValue":"json"}]`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult> RequestHeaders;
        /// <summary>
        /// Request HTTP method.
        /// </summary>
        public readonly string RequestMethod;
        /// <summary>
        /// Request post body content.
        /// </summary>
        public readonly string RequestPostBody;
        /// <summary>
        /// List of request query params. Example: `[{"paramName": "sortOrder", "paramValue": "asc"}]`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult> RequestQueryParams;
        /// <summary>
        /// File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
        /// </summary>
        public readonly int UploadFileSizeInBytes;
        /// <summary>
        /// Expected HTTP response codes. For status code range, set values such as 2xx, 3xx.
        /// </summary>
        public readonly ImmutableArray<string> VerifyResponseCodes;
        /// <summary>
        /// Verify response content against regular expression based string. If response content does not match the verifyResponseContent value, then it will be considered a failure.
        /// </summary>
        public readonly string VerifyResponseContent;
        /// <summary>
        /// Verifies all the search strings present in the response. If any search string is not present in the response, then it will be considered as a failure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult> VerifyTexts;

        [OutputConstructor]
        private GetMonitorsMonitorCollectionItemConfigurationResult(
            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationClientCertificateDetailResult> clientCertificateDetails,

            string configType,

            string connectionString,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDatabaseAuthenticationDetailResult> databaseAuthenticationDetails,

            string databaseConnectionType,

            string databaseRole,

            string databaseType,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDatabaseWalletDetailResult> databaseWalletDetails,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationDnsConfigurationResult> dnsConfigurations,

            int downloadSizeLimitInBytes,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationFtpBasicAuthenticationDetailResult> ftpBasicAuthenticationDetails,

            string ftpProtocol,

            string ftpRequestType,

            bool isActiveMode,

            bool isCertificateValidationEnabled,

            bool isDefaultSnapshotEnabled,

            bool isFailureRetried,

            bool isQueryRecursive,

            bool isRedirectionEnabled,

            string nameServer,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationNetworkConfigurationResult> networkConfigurations,

            string protocol,

            string query,

            string recordType,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationReqAuthenticationDetailResult> reqAuthenticationDetails,

            string reqAuthenticationScheme,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationRequestHeaderResult> requestHeaders,

            string requestMethod,

            string requestPostBody,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationRequestQueryParamResult> requestQueryParams,

            int uploadFileSizeInBytes,

            ImmutableArray<string> verifyResponseCodes,

            string verifyResponseContent,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationVerifyTextResult> verifyTexts)
        {
            ClientCertificateDetails = clientCertificateDetails;
            ConfigType = configType;
            ConnectionString = connectionString;
            DatabaseAuthenticationDetails = databaseAuthenticationDetails;
            DatabaseConnectionType = databaseConnectionType;
            DatabaseRole = databaseRole;
            DatabaseType = databaseType;
            DatabaseWalletDetails = databaseWalletDetails;
            DnsConfigurations = dnsConfigurations;
            DownloadSizeLimitInBytes = downloadSizeLimitInBytes;
            FtpBasicAuthenticationDetails = ftpBasicAuthenticationDetails;
            FtpProtocol = ftpProtocol;
            FtpRequestType = ftpRequestType;
            IsActiveMode = isActiveMode;
            IsCertificateValidationEnabled = isCertificateValidationEnabled;
            IsDefaultSnapshotEnabled = isDefaultSnapshotEnabled;
            IsFailureRetried = isFailureRetried;
            IsQueryRecursive = isQueryRecursive;
            IsRedirectionEnabled = isRedirectionEnabled;
            NameServer = nameServer;
            NetworkConfigurations = networkConfigurations;
            Protocol = protocol;
            Query = query;
            RecordType = recordType;
            ReqAuthenticationDetails = reqAuthenticationDetails;
            ReqAuthenticationScheme = reqAuthenticationScheme;
            RequestHeaders = requestHeaders;
            RequestMethod = requestMethod;
            RequestPostBody = requestPostBody;
            RequestQueryParams = requestQueryParams;
            UploadFileSizeInBytes = uploadFileSizeInBytes;
            VerifyResponseCodes = verifyResponseCodes;
            VerifyResponseContent = verifyResponseContent;
            VerifyTexts = verifyTexts;
        }
    }
}
