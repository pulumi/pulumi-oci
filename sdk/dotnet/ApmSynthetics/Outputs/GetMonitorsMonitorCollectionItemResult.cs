// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmSynthetics.Outputs
{

    [OutputType]
    public sealed class GetMonitorsMonitorCollectionItemResult
    {
        /// <summary>
        /// The APM domain ID the request is intended for.
        /// </summary>
        public readonly string ApmDomainId;
        /// <summary>
        /// Monitor availability configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult> AvailabilityConfigurations;
        /// <summary>
        /// Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
        /// </summary>
        public readonly int BatchIntervalInSeconds;
        /// <summary>
        /// Details of monitor configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationResult> Configurations;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A filter to return only the resources that match the entire display name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If isRunNow is enabled, then the monitor will run immediately.
        /// </summary>
        public readonly bool IsRunNow;
        /// <summary>
        /// If runOnce is enabled, then the monitor will run once.
        /// </summary>
        public readonly bool IsRunOnce;
        /// <summary>
        /// Details required to schedule maintenance window.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult> MaintenanceWindowSchedules;
        /// <summary>
        /// A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
        /// </summary>
        public readonly string MonitorType;
        /// <summary>
        /// Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
        /// </summary>
        public readonly int RepeatIntervalInSeconds;
        /// <summary>
        /// Scheduling policy to decide the distribution of monitor executions on vantage points.
        /// </summary>
        public readonly string SchedulingPolicy;
        /// <summary>
        /// A filter to return only monitors using scriptId.
        /// </summary>
        public readonly string ScriptId;
        /// <summary>
        /// Name of the script.
        /// </summary>
        public readonly string ScriptName;
        /// <summary>
        /// List of script parameters. Example: `[{"monitorScriptParameter": {"paramName": "userid", "paramValue":"testuser"}, "isSecret": false, "isOverwritten": false}]`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemScriptParameterResult> ScriptParameters;
        /// <summary>
        /// A filter to return only monitors that match the status given.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
        /// </summary>
        public readonly int TimeoutInSeconds;
        /// <summary>
        /// Number of vantage points where monitor is running.
        /// </summary>
        public readonly int VantagePointCount;
        /// <summary>
        /// List of public and dedicated vantage points where the monitor is running.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemVantagePointResult> VantagePoints;

        [OutputConstructor]
        private GetMonitorsMonitorCollectionItemResult(
            string apmDomainId,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemAvailabilityConfigurationResult> availabilityConfigurations,

            int batchIntervalInSeconds,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemConfigurationResult> configurations,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isRunNow,

            bool isRunOnce,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemMaintenanceWindowScheduleResult> maintenanceWindowSchedules,

            string monitorType,

            int repeatIntervalInSeconds,

            string schedulingPolicy,

            string scriptId,

            string scriptName,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemScriptParameterResult> scriptParameters,

            string status,

            string target,

            string timeCreated,

            string timeUpdated,

            int timeoutInSeconds,

            int vantagePointCount,

            ImmutableArray<Outputs.GetMonitorsMonitorCollectionItemVantagePointResult> vantagePoints)
        {
            ApmDomainId = apmDomainId;
            AvailabilityConfigurations = availabilityConfigurations;
            BatchIntervalInSeconds = batchIntervalInSeconds;
            Configurations = configurations;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsRunNow = isRunNow;
            IsRunOnce = isRunOnce;
            MaintenanceWindowSchedules = maintenanceWindowSchedules;
            MonitorType = monitorType;
            RepeatIntervalInSeconds = repeatIntervalInSeconds;
            SchedulingPolicy = schedulingPolicy;
            ScriptId = scriptId;
            ScriptName = scriptName;
            ScriptParameters = scriptParameters;
            Status = status;
            Target = target;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TimeoutInSeconds = timeoutInSeconds;
            VantagePointCount = vantagePointCount;
            VantagePoints = vantagePoints;
        }
    }
}
