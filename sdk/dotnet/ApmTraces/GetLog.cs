// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmTraces
{
    public static class GetLog
    {
        /// <summary>
        /// This data source provides details about a specific Log resource in Oracle Cloud Infrastructure Apm Traces service.
        /// 
        /// Retrieve a log in the APM Domain.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLog = Oci.ApmTraces.GetLog.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         LogKey = logLogKey,
        ///         TimeLogEndedLessThan = logTimeLogEndedLessThan,
        ///         TimeLogStartedGreaterThanOrEqualTo = logTimeLogStartedGreaterThanOrEqualTo,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLogResult> InvokeAsync(GetLogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogResult>("oci:ApmTraces/getLog:getLog", args ?? new GetLogArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log resource in Oracle Cloud Infrastructure Apm Traces service.
        /// 
        /// Retrieve a log in the APM Domain.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLog = Oci.ApmTraces.GetLog.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         LogKey = logLogKey,
        ///         TimeLogEndedLessThan = logTimeLogEndedLessThan,
        ///         TimeLogStartedGreaterThanOrEqualTo = logTimeLogStartedGreaterThanOrEqualTo,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogResult> Invoke(GetLogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogResult>("oci:ApmTraces/getLog:getLog", args ?? new GetLogInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log resource in Oracle Cloud Infrastructure Apm Traces service.
        /// 
        /// Retrieve a log in the APM Domain.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLog = Oci.ApmTraces.GetLog.Invoke(new()
        ///     {
        ///         ApmDomainId = testApmDomain.Id,
        ///         LogKey = logLogKey,
        ///         TimeLogEndedLessThan = logTimeLogEndedLessThan,
        ///         TimeLogStartedGreaterThanOrEqualTo = logTimeLogStartedGreaterThanOrEqualTo,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogResult> Invoke(GetLogInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogResult>("oci:ApmTraces/getLog:getLog", args ?? new GetLogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID for the intended request.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// Log key.
        /// </summary>
        [Input("logKey", required: true)]
        public string LogKey { get; set; } = null!;

        /// <summary>
        /// Include logs with log time less than this value.
        /// </summary>
        [Input("timeLogEndedLessThan", required: true)]
        public string TimeLogEndedLessThan { get; set; } = null!;

        /// <summary>
        /// Include logs with log time equal to or greater than this value.
        /// </summary>
        [Input("timeLogStartedGreaterThanOrEqualTo", required: true)]
        public string TimeLogStartedGreaterThanOrEqualTo { get; set; } = null!;

        public GetLogArgs()
        {
        }
        public static new GetLogArgs Empty => new GetLogArgs();
    }

    public sealed class GetLogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID for the intended request.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public Input<string> ApmDomainId { get; set; } = null!;

        /// <summary>
        /// Log key.
        /// </summary>
        [Input("logKey", required: true)]
        public Input<string> LogKey { get; set; } = null!;

        /// <summary>
        /// Include logs with log time less than this value.
        /// </summary>
        [Input("timeLogEndedLessThan", required: true)]
        public Input<string> TimeLogEndedLessThan { get; set; } = null!;

        /// <summary>
        /// Include logs with log time equal to or greater than this value.
        /// </summary>
        [Input("timeLogStartedGreaterThanOrEqualTo", required: true)]
        public Input<string> TimeLogStartedGreaterThanOrEqualTo { get; set; } = null!;

        public GetLogInvokeArgs()
        {
        }
        public static new GetLogInvokeArgs Empty => new GetLogInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogResult
    {
        public readonly string ApmDomainId;
        /// <summary>
        /// Metadata about the attributes in the logs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> AttributeMetadata;
        /// <summary>
        /// List of attributes associated with the logs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLogAttributeResult> Attributes;
        /// <summary>
        /// Log body (Body).
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// Name of the event.
        /// </summary>
        public readonly string EventName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier (logId) for the logKey.  Note that this field is defined as logKey in the API and it maps to the logId in Application Performance Monitoring.
        /// </summary>
        public readonly string LogKey;
        /// <summary>
        /// Full values for attributes that are too long to be stored as a log attribute (Overflow).
        /// </summary>
        public readonly string OverflowAttributes;
        /// <summary>
        /// Log Severity number (SeverityNumber).
        /// </summary>
        public readonly int SeverityNumber;
        /// <summary>
        /// Log Severity text (SeverityText).  Also known as Log level.
        /// </summary>
        public readonly string SeverityText;
        /// <summary>
        /// Unique identifier for the span (spanId) associated with this log.
        /// </summary>
        public readonly string SpanKey;
        /// <summary>
        /// Time that the log event occurred (CreatedTime).
        /// </summary>
        public readonly string TimeCreated;
        public readonly string TimeLogEndedLessThan;
        public readonly string TimeLogStartedGreaterThanOrEqualTo;
        /// <summary>
        /// Time that the log was received by apm (ObservedTime).
        /// </summary>
        public readonly string TimeObserved;
        /// <summary>
        /// Time used by the time picker (RecordedTime).  Either the timeCreated if present or the timeObserved.
        /// </summary>
        public readonly string Timestamp;
        /// <summary>
        /// Trace flags.
        /// </summary>
        public readonly int TraceFlags;
        /// <summary>
        /// Unique identifier for the trace (traceId) associated with this log.
        /// </summary>
        public readonly string TraceKey;

        [OutputConstructor]
        private GetLogResult(
            string apmDomainId,

            ImmutableDictionary<string, string> attributeMetadata,

            ImmutableArray<Outputs.GetLogAttributeResult> attributes,

            string body,

            string eventName,

            string id,

            string logKey,

            string overflowAttributes,

            int severityNumber,

            string severityText,

            string spanKey,

            string timeCreated,

            string timeLogEndedLessThan,

            string timeLogStartedGreaterThanOrEqualTo,

            string timeObserved,

            string timestamp,

            int traceFlags,

            string traceKey)
        {
            ApmDomainId = apmDomainId;
            AttributeMetadata = attributeMetadata;
            Attributes = attributes;
            Body = body;
            EventName = eventName;
            Id = id;
            LogKey = logKey;
            OverflowAttributes = overflowAttributes;
            SeverityNumber = severityNumber;
            SeverityText = severityText;
            SpanKey = spanKey;
            TimeCreated = timeCreated;
            TimeLogEndedLessThan = timeLogEndedLessThan;
            TimeLogStartedGreaterThanOrEqualTo = timeLogStartedGreaterThanOrEqualTo;
            TimeObserved = timeObserved;
            Timestamp = timestamp;
            TraceFlags = traceFlags;
            TraceKey = traceKey;
        }
    }
}
