// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ApmTraces
{
    public static class GetTrace
    {
        /// <summary>
        /// This data source provides details about a specific Trace resource in Oracle Cloud Infrastructure Apm Traces service.
        /// 
        /// Gets the trace details identified by traceId.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTrace = Oci.ApmTraces.GetTrace.Invoke(new()
        ///     {
        ///         ApmDomainId = oci_apm_apm_domain.Test_apm_domain.Id,
        ///         TraceKey = @var.Trace_trace_key,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTraceResult> InvokeAsync(GetTraceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTraceResult>("oci:ApmTraces/getTrace:getTrace", args ?? new GetTraceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Trace resource in Oracle Cloud Infrastructure Apm Traces service.
        /// 
        /// Gets the trace details identified by traceId.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTrace = Oci.ApmTraces.GetTrace.Invoke(new()
        ///     {
        ///         ApmDomainId = oci_apm_apm_domain.Test_apm_domain.Id,
        ///         TraceKey = @var.Trace_trace_key,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTraceResult> Invoke(GetTraceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTraceResult>("oci:ApmTraces/getTrace:getTrace", args ?? new GetTraceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTraceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// Unique Application Performance Monitoring trace identifier (traceId).
        /// </summary>
        [Input("traceKey", required: true)]
        public string TraceKey { get; set; } = null!;

        public GetTraceArgs()
        {
        }
        public static new GetTraceArgs Empty => new GetTraceArgs();
    }

    public sealed class GetTraceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM Domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public Input<string> ApmDomainId { get; set; } = null!;

        /// <summary>
        /// Unique Application Performance Monitoring trace identifier (traceId).
        /// </summary>
        [Input("traceKey", required: true)]
        public Input<string> TraceKey { get; set; } = null!;

        public GetTraceInvokeArgs()
        {
        }
        public static new GetTraceInvokeArgs Empty => new GetTraceInvokeArgs();
    }


    [OutputType]
    public sealed class GetTraceResult
    {
        public readonly string ApmDomainId;
        /// <summary>
        /// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
        /// </summary>
        public readonly int ErrorSpanCount;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Boolean flag that indicates whether the trace has an error.
        /// </summary>
        public readonly bool IsFault;
        /// <summary>
        /// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// Time taken for the root span operation to complete in milliseconds.
        /// </summary>
        public readonly int RootSpanDurationInMs;
        /// <summary>
        /// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
        /// </summary>
        public readonly string RootSpanOperationName;
        /// <summary>
        /// Service associated with the trace.
        /// </summary>
        public readonly string RootSpanServiceName;
        /// <summary>
        /// A summary of the spans by service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTraceServiceSummaryResult> ServiceSummaries;
        /// <summary>
        /// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
        /// </summary>
        public readonly int SpanCount;
        /// <summary>
        /// Summary of the information pertaining to the spans in the trace window that is being queried.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTraceSpanSummaryResult> SpanSummaries;
        /// <summary>
        /// An array of spans in the trace.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTraceSpanResult> Spans;
        /// <summary>
        /// Start time of the earliest span in the span collection.
        /// </summary>
        public readonly string TimeEarliestSpanStarted;
        /// <summary>
        /// End time of the span that most recently ended in the span collection.
        /// </summary>
        public readonly string TimeLatestSpanEnded;
        /// <summary>
        /// End time of the root span for the span collection.
        /// </summary>
        public readonly string TimeRootSpanEnded;
        /// <summary>
        /// Start time of the root span for the span collection.
        /// </summary>
        public readonly string TimeRootSpanStarted;
        /// <summary>
        /// Time between the start of the earliest span and the end of the most recent span in milliseconds.
        /// </summary>
        public readonly int TraceDurationInMs;
        /// <summary>
        /// Error code of the trace.
        /// </summary>
        public readonly string TraceErrorCode;
        /// <summary>
        /// Error type of the trace.
        /// </summary>
        public readonly string TraceErrorType;
        /// <summary>
        /// Unique identifier for the trace.
        /// </summary>
        public readonly string TraceKey;
        /// <summary>
        /// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
        /// </summary>
        public readonly string TraceStatus;

        [OutputConstructor]
        private GetTraceResult(
            string apmDomainId,

            int errorSpanCount,

            string id,

            bool isFault,

            string key,

            int rootSpanDurationInMs,

            string rootSpanOperationName,

            string rootSpanServiceName,

            ImmutableArray<Outputs.GetTraceServiceSummaryResult> serviceSummaries,

            int spanCount,

            ImmutableArray<Outputs.GetTraceSpanSummaryResult> spanSummaries,

            ImmutableArray<Outputs.GetTraceSpanResult> spans,

            string timeEarliestSpanStarted,

            string timeLatestSpanEnded,

            string timeRootSpanEnded,

            string timeRootSpanStarted,

            int traceDurationInMs,

            string traceErrorCode,

            string traceErrorType,

            string traceKey,

            string traceStatus)
        {
            ApmDomainId = apmDomainId;
            ErrorSpanCount = errorSpanCount;
            Id = id;
            IsFault = isFault;
            Key = key;
            RootSpanDurationInMs = rootSpanDurationInMs;
            RootSpanOperationName = rootSpanOperationName;
            RootSpanServiceName = rootSpanServiceName;
            ServiceSummaries = serviceSummaries;
            SpanCount = spanCount;
            SpanSummaries = spanSummaries;
            Spans = spans;
            TimeEarliestSpanStarted = timeEarliestSpanStarted;
            TimeLatestSpanEnded = timeLatestSpanEnded;
            TimeRootSpanEnded = timeRootSpanEnded;
            TimeRootSpanStarted = timeRootSpanStarted;
            TraceDurationInMs = traceDurationInMs;
            TraceErrorCode = traceErrorCode;
            TraceErrorType = traceErrorType;
            TraceKey = traceKey;
            TraceStatus = traceStatus;
        }
    }
}
