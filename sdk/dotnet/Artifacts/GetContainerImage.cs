// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Artifacts
{
    public static class GetContainerImage
    {
        /// <summary>
        /// This data source provides details about a specific Container Image resource in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// Get container image metadata.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerImage = Oci.Artifacts.GetContainerImage.Invoke(new()
        ///     {
        ///         ImageId = containerImageId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainerImageResult> InvokeAsync(GetContainerImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerImageResult>("oci:Artifacts/getContainerImage:getContainerImage", args ?? new GetContainerImageArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Image resource in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// Get container image metadata.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerImage = Oci.Artifacts.GetContainerImage.Invoke(new()
        ///     {
        ///         ImageId = containerImageId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerImageResult> Invoke(GetContainerImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerImageResult>("oci:Artifacts/getContainerImage:getContainerImage", args ?? new GetContainerImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Image resource in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// Get container image metadata.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerImage = Oci.Artifacts.GetContainerImage.Invoke(new()
        ///     {
        ///         ImageId = containerImageId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerImageResult> Invoke(GetContainerImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerImageResult>("oci:Artifacts/getContainerImage:getContainerImage", args ?? new GetContainerImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
        /// </summary>
        [Input("imageId", required: true)]
        public string ImageId { get; set; } = null!;

        public GetContainerImageArgs()
        {
        }
        public static new GetContainerImageArgs Empty => new GetContainerImageArgs();
    }

    public sealed class GetContainerImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        public GetContainerImageInvokeArgs()
        {
        }
        public static new GetContainerImageInvokeArgs Empty => new GetContainerImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerImageResult
    {
        /// <summary>
        /// The compartment OCID to which the container image belongs. Inferred from the container repository.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the user or principal that pushed the version.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// The sha256 digest of the image layer.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then 'unknown' is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        /// <summary>
        /// Layers of which the image is composed, ordered by the layer digest.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerImageLayerResult> Layers;
        /// <summary>
        /// The total size of the container image layers in bytes.
        /// </summary>
        public readonly string LayersSizeInBytes;
        /// <summary>
        /// The size of the container image manifest in bytes.
        /// </summary>
        public readonly int ManifestSizeInBytes;
        /// <summary>
        /// Total number of pulls.
        /// </summary>
        public readonly string PullCount;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.
        /// </summary>
        public readonly string RepositoryId;
        /// <summary>
        /// The container repository name.
        /// </summary>
        public readonly string RepositoryName;
        /// <summary>
        /// The current state of the container image.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The creation time of the version.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An RFC 3339 timestamp indicating when the image was last pulled.
        /// </summary>
        public readonly string TimeLastPulled;
        /// <summary>
        /// The version name.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The versions associated with this image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerImageVersionResult> Versions;

        [OutputConstructor]
        private GetContainerImageResult(
            string compartmentId,

            string createdBy,

            ImmutableDictionary<string, string> definedTags,

            string digest,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string imageId,

            ImmutableArray<Outputs.GetContainerImageLayerResult> layers,

            string layersSizeInBytes,

            int manifestSizeInBytes,

            string pullCount,

            string repositoryId,

            string repositoryName,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeLastPulled,

            string version,

            ImmutableArray<Outputs.GetContainerImageVersionResult> versions)
        {
            CompartmentId = compartmentId;
            CreatedBy = createdBy;
            DefinedTags = definedTags;
            Digest = digest;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            ImageId = imageId;
            Layers = layers;
            LayersSizeInBytes = layersSizeInBytes;
            ManifestSizeInBytes = manifestSizeInBytes;
            PullCount = pullCount;
            RepositoryId = repositoryId;
            RepositoryName = repositoryName;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeLastPulled = timeLastPulled;
            Version = version;
            Versions = versions;
        }
    }
}
