// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Artifacts
{
    public static class GetContainerImages
    {
        /// <summary>
        /// This data source provides the list of Container Images in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// List container images in a compartment.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerImages = Oci.Artifacts.GetContainerImages.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = containerImageCompartmentIdInSubtree,
        ///         DisplayName = containerImageDisplayName,
        ///         ImageId = testImage.Id,
        ///         IsVersioned = containerImageIsVersioned,
        ///         RepositoryId = testRepository.Id,
        ///         RepositoryName = testRepository.Name,
        ///         State = containerImageState,
        ///         Version = containerImageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetContainerImagesResult> InvokeAsync(GetContainerImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerImagesResult>("oci:Artifacts/getContainerImages:getContainerImages", args ?? new GetContainerImagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Container Images in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// List container images in a compartment.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerImages = Oci.Artifacts.GetContainerImages.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = containerImageCompartmentIdInSubtree,
        ///         DisplayName = containerImageDisplayName,
        ///         ImageId = testImage.Id,
        ///         IsVersioned = containerImageIsVersioned,
        ///         RepositoryId = testRepository.Id,
        ///         RepositoryName = testRepository.Name,
        ///         State = containerImageState,
        ///         Version = containerImageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetContainerImagesResult> Invoke(GetContainerImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerImagesResult>("oci:Artifacts/getContainerImages:getContainerImages", args ?? new GetContainerImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetContainerImagesFilterArgs>? _filters;
        public List<Inputs.GetContainerImagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainerImagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return a container image summary only for the specified container image OCID.
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        /// <summary>
        /// A filter to return container images based on whether there are any associated versions.
        /// </summary>
        [Input("isVersioned")]
        public bool? IsVersioned { get; set; }

        /// <summary>
        /// A filter to return container images only for the specified container repository OCID.
        /// </summary>
        [Input("repositoryId")]
        public string? RepositoryId { get; set; }

        /// <summary>
        /// A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
        /// </summary>
        [Input("repositoryName")]
        public string? RepositoryName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state name exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return container images that match the version.  Example: `foo` or `foo*`
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetContainerImagesArgs()
        {
        }
        public static new GetContainerImagesArgs Empty => new GetContainerImagesArgs();
    }

    public sealed class GetContainerImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetContainerImagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetContainerImagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainerImagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return a container image summary only for the specified container image OCID.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// A filter to return container images based on whether there are any associated versions.
        /// </summary>
        [Input("isVersioned")]
        public Input<bool>? IsVersioned { get; set; }

        /// <summary>
        /// A filter to return container images only for the specified container repository OCID.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
        /// </summary>
        [Input("repositoryName")]
        public Input<string>? RepositoryName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state name exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return container images that match the version.  Example: `foo` or `foo*`
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetContainerImagesInvokeArgs()
        {
        }
        public static new GetContainerImagesInvokeArgs Empty => new GetContainerImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerImagesResult
    {
        /// <summary>
        /// The compartment OCID to which the container image belongs. Inferred from the container repository.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The list of container_image_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionResult> ContainerImageCollections;
        /// <summary>
        /// The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then 'unknown' is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetContainerImagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ImageId;
        public readonly bool? IsVersioned;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.
        /// </summary>
        public readonly string? RepositoryId;
        /// <summary>
        /// The container repository name.
        /// </summary>
        public readonly string? RepositoryName;
        /// <summary>
        /// The current state of the container image.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The version name.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetContainerImagesResult(
            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionResult> containerImageCollections,

            string? displayName,

            ImmutableArray<Outputs.GetContainerImagesFilterResult> filters,

            string id,

            string? imageId,

            bool? isVersioned,

            string? repositoryId,

            string? repositoryName,

            string? state,

            string? version)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            ContainerImageCollections = containerImageCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ImageId = imageId;
            IsVersioned = isVersioned;
            RepositoryId = repositoryId;
            RepositoryName = repositoryName;
            State = state;
            Version = version;
        }
    }
}
