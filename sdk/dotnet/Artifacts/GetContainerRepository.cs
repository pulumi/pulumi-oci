// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Artifacts
{
    public static class GetContainerRepository
    {
        /// <summary>
        /// This data source provides details about a specific Container Repository resource in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// Get container repository.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerRepository = Oci.Artifacts.GetContainerRepository.Invoke(new()
        ///     {
        ///         RepositoryId = testRepository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetContainerRepositoryResult> InvokeAsync(GetContainerRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerRepositoryResult>("oci:Artifacts/getContainerRepository:getContainerRepository", args ?? new GetContainerRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Repository resource in Oracle Cloud Infrastructure Artifacts service.
        /// 
        /// Get container repository.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerRepository = Oci.Artifacts.GetContainerRepository.Invoke(new()
        ///     {
        ///         RepositoryId = testRepository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetContainerRepositoryResult> Invoke(GetContainerRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerRepositoryResult>("oci:Artifacts/getContainerRepository:getContainerRepository", args ?? new GetContainerRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerRepositoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetContainerRepositoryArgs()
        {
        }
        public static new GetContainerRepositoryArgs Empty => new GetContainerRepositoryArgs();
    }

    public sealed class GetContainerRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetContainerRepositoryInvokeArgs()
        {
        }
        public static new GetContainerRepositoryInvokeArgs Empty => new GetContainerRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerRepositoryResult
    {
        /// <summary>
        /// Total storage size in GBs that will be charged.
        /// </summary>
        public readonly string BillableSizeInGbs;
        /// <summary>
        /// The OCID of the compartment in which the container repository exists.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The id of the user or principal that created the resource.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The container repository name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Total number of images.
        /// </summary>
        public readonly int ImageCount;
        /// <summary>
        /// Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
        /// </summary>
        public readonly bool IsImmutable;
        /// <summary>
        /// Whether the repository is public. A public repository allows unauthenticated access.
        /// </summary>
        public readonly bool IsPublic;
        /// <summary>
        /// Total number of layers.
        /// </summary>
        public readonly int LayerCount;
        /// <summary>
        /// Total storage in bytes consumed by layers.
        /// </summary>
        public readonly string LayersSizeInBytes;
        /// <summary>
        /// The tenancy namespace used in the container repository path.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Container repository readme.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerRepositoryReadmeResult> Readmes;
        public readonly string RepositoryId;
        /// <summary>
        /// The current state of the container repository.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The system tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// An RFC 3339 timestamp indicating when the repository was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
        /// </summary>
        public readonly string TimeLastPushed;

        [OutputConstructor]
        private GetContainerRepositoryResult(
            string billableSizeInGbs,

            string compartmentId,

            string createdBy,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            int imageCount,

            bool isImmutable,

            bool isPublic,

            int layerCount,

            string layersSizeInBytes,

            string @namespace,

            ImmutableArray<Outputs.GetContainerRepositoryReadmeResult> readmes,

            string repositoryId,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeLastPushed)
        {
            BillableSizeInGbs = billableSizeInGbs;
            CompartmentId = compartmentId;
            CreatedBy = createdBy;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            ImageCount = imageCount;
            IsImmutable = isImmutable;
            IsPublic = isPublic;
            LayerCount = layerCount;
            LayersSizeInBytes = layersSizeInBytes;
            Namespace = @namespace;
            Readmes = readmes;
            RepositoryId = repositoryId;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeLastPushed = timeLastPushed;
        }
    }
}
