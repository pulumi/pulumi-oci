// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Artifacts.Outputs
{

    [OutputType]
    public sealed class GetContainerImagesContainerImageCollectionItemResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the user or principal that pushed the version.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The sha256 digest of the image layer.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Layers of which the image is composed, ordered by the layer digest.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionItemLayerResult> Layers;
        /// <summary>
        /// The total size of the container image layers in bytes.
        /// </summary>
        public readonly string LayersSizeInBytes;
        /// <summary>
        /// The size of the container image manifest in bytes.
        /// </summary>
        public readonly int ManifestSizeInBytes;
        /// <summary>
        /// Total number of pulls.
        /// </summary>
        public readonly string PullCount;
        /// <summary>
        /// A filter to return container images only for the specified container repository OCID.
        /// </summary>
        public readonly string RepositoryId;
        /// <summary>
        /// A filter to return container images or container image signatures that match the repository name.  Example: `foo` or `foo*`
        /// </summary>
        public readonly string RepositoryName;
        /// <summary>
        /// A filter to return only resources that match the given lifecycle state name exactly.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The creation time of the version.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An RFC 3339 timestamp indicating when the image was last pulled.
        /// </summary>
        public readonly string TimeLastPulled;
        /// <summary>
        /// A filter to return container images that match the version.  Example: `foo` or `foo*`
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// The versions associated with this image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionItemVersionResult> Versions;

        [OutputConstructor]
        private GetContainerImagesContainerImageCollectionItemResult(
            string compartmentId,

            string createdBy,

            string digest,

            string displayName,

            string id,

            ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionItemLayerResult> layers,

            string layersSizeInBytes,

            int manifestSizeInBytes,

            string pullCount,

            string repositoryId,

            string repositoryName,

            string state,

            string timeCreated,

            string timeLastPulled,

            string version,

            ImmutableArray<Outputs.GetContainerImagesContainerImageCollectionItemVersionResult> versions)
        {
            CompartmentId = compartmentId;
            CreatedBy = createdBy;
            Digest = digest;
            DisplayName = displayName;
            Id = id;
            Layers = layers;
            LayersSizeInBytes = layersSizeInBytes;
            ManifestSizeInBytes = manifestSizeInBytes;
            PullCount = pullCount;
            RepositoryId = repositoryId;
            RepositoryName = repositoryName;
            State = state;
            TimeCreated = timeCreated;
            TimeLastPulled = timeLastPulled;
            Version = version;
            Versions = versions;
        }
    }
}
