// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Audit
{
    public static class GetEvents
    {
        /// <summary>
        /// This data source provides the list of Audit Events in Oracle Cloud Infrastructure Audit service.
        /// 
        /// Returns all the audit events processed for the specified compartment within the specified
        /// time range.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditEvents = Oci.Audit.GetEvents.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         EndTime = @var.Audit_event_end_time,
        ///         StartTime = @var.Audit_event_start_time,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEventsResult> InvokeAsync(GetEventsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventsResult>("oci:Audit/getEvents:getEvents", args ?? new GetEventsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Events in Oracle Cloud Infrastructure Audit service.
        /// 
        /// Returns all the audit events processed for the specified compartment within the specified
        /// time range.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditEvents = Oci.Audit.GetEvents.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         EndTime = @var.Audit_event_end_time,
        ///         StartTime = @var.Audit_event_start_time,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEventsResult> Invoke(GetEventsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventsResult>("oci:Audit/getEvents:getEvents", args ?? new GetEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Returns events that were processed before this end date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// 
        /// For example, a start value of `2017-01-01T00:00:00Z` and an end value of `2017-01-02T00:00:00Z` will retrieve a list of all events processed on January 1, 2017. Similarly, a start value of `2017-01-01T00:00:00Z` and an end value of `2017-02-01T00:00:00Z` will result in a list of all events processed between January 1, 2017 and January 31, 2017. You can specify a value with granularity to the minute. Seconds (and milliseconds, if included) must be set to `0`.
        /// </summary>
        [Input("endTime", required: true)]
        public string EndTime { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetEventsFilterArgs>? _filters;
        public List<Inputs.GetEventsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEventsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Returns events that were processed at or after this start date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// 
        /// For example, a start value of `2017-01-15T11:30:00Z` will retrieve a list of all events processed since 30 minutes after the 11th hour of January 15, 2017, in Coordinated Universal Time (UTC). You can specify a value with granularity to the minute. Seconds (and milliseconds, if included) must be set to `0`.
        /// </summary>
        [Input("startTime", required: true)]
        public string StartTime { get; set; } = null!;

        public GetEventsArgs()
        {
        }
        public static new GetEventsArgs Empty => new GetEventsArgs();
    }

    public sealed class GetEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Returns events that were processed before this end date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// 
        /// For example, a start value of `2017-01-01T00:00:00Z` and an end value of `2017-01-02T00:00:00Z` will retrieve a list of all events processed on January 1, 2017. Similarly, a start value of `2017-01-01T00:00:00Z` and an end value of `2017-02-01T00:00:00Z` will result in a list of all events processed between January 1, 2017 and January 31, 2017. You can specify a value with granularity to the minute. Seconds (and milliseconds, if included) must be set to `0`.
        /// </summary>
        [Input("endTime", required: true)]
        public Input<string> EndTime { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetEventsFilterInputArgs>? _filters;
        public InputList<Inputs.GetEventsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEventsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Returns events that were processed at or after this start date and time, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// 
        /// For example, a start value of `2017-01-15T11:30:00Z` will retrieve a list of all events processed since 30 minutes after the 11th hour of January 15, 2017, in Coordinated Universal Time (UTC). You can specify a value with granularity to the minute. Seconds (and milliseconds, if included) must be set to `0`.
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        public GetEventsInvokeArgs()
        {
        }
        public static new GetEventsInvokeArgs Empty => new GetEventsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventsResult
    {
        /// <summary>
        /// The list of audit_events.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEventsAuditEventResult> AuditEvents;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment of the resource  emitting the event.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string EndTime;
        public readonly ImmutableArray<Outputs.GetEventsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string StartTime;

        [OutputConstructor]
        private GetEventsResult(
            ImmutableArray<Outputs.GetEventsAuditEventResult> auditEvents,

            string compartmentId,

            string endTime,

            ImmutableArray<Outputs.GetEventsFilterResult> filters,

            string id,

            string startTime)
        {
            AuditEvents = auditEvents;
            CompartmentId = compartmentId;
            EndTime = endTime;
            Filters = filters;
            Id = id;
            StartTime = startTime;
        }
    }
}
