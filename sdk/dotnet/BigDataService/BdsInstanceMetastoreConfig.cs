// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    /// <summary>
    /// This resource provides the Bds Instance Metastore Config resource in Oracle Cloud Infrastructure Big Data Service service.
    /// 
    /// Create and activate external metastore configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testBdsInstanceMetastoreConfig = new Oci.BigDataService.BdsInstanceMetastoreConfig("test_bds_instance_metastore_config", new()
    ///     {
    ///         BdsApiKeyId = testApiKey.Id,
    ///         BdsApiKeyPassphrase = bdsInstanceMetastoreConfigBdsApiKeyPassphrase,
    ///         BdsInstanceId = testBdsInstance.Id,
    ///         ClusterAdminPassword = bdsInstanceMetastoreConfigClusterAdminPassword,
    ///         MetastoreId = testMetastore.Id,
    ///         DisplayName = bdsInstanceMetastoreConfigDisplayName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BdsInstanceMetastoreConfigs can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:BigDataService/bdsInstanceMetastoreConfig:BdsInstanceMetastoreConfig test_bds_instance_metastore_config "bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:BigDataService/bdsInstanceMetastoreConfig:BdsInstanceMetastoreConfig")]
    public partial class BdsInstanceMetastoreConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) An optional integer, when flipped triggers activation of metastore config.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("activateTrigger")]
        public Output<int?> ActivateTrigger { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The ID of BDS Api Key used for Data Catalog metastore integration.
        /// </summary>
        [Output("bdsApiKeyId")]
        public Output<string> BdsApiKeyId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Base-64 encoded passphrase of the BDS Api Key.
        /// </summary>
        [Output("bdsApiKeyPassphrase")]
        public Output<string> BdsApiKeyPassphrase { get; private set; } = null!;

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Output("bdsInstanceId")]
        public Output<string> BdsInstanceId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Base-64 encoded password for the cluster admin user.
        /// </summary>
        [Output("clusterAdminPassword")]
        public Output<string> ClusterAdminPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The display name of the metastore configuration
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The OCID of the Data Catalog metastore.
        /// </summary>
        [Output("metastoreId")]
        public Output<string> MetastoreId { get; private set; } = null!;

        /// <summary>
        /// The type of the metastore in the metastore configuration.
        /// </summary>
        [Output("metastoreType")]
        public Output<string> MetastoreType { get; private set; } = null!;

        /// <summary>
        /// the lifecycle state of the metastore configuration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time when the configuration was created, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time when the configuration was updated, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a BdsInstanceMetastoreConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BdsInstanceMetastoreConfig(string name, BdsInstanceMetastoreConfigArgs args, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceMetastoreConfig:BdsInstanceMetastoreConfig", name, args ?? new BdsInstanceMetastoreConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BdsInstanceMetastoreConfig(string name, Input<string> id, BdsInstanceMetastoreConfigState? state = null, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceMetastoreConfig:BdsInstanceMetastoreConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "bdsApiKeyPassphrase",
                    "clusterAdminPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BdsInstanceMetastoreConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BdsInstanceMetastoreConfig Get(string name, Input<string> id, BdsInstanceMetastoreConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new BdsInstanceMetastoreConfig(name, id, state, options);
        }
    }

    public sealed class BdsInstanceMetastoreConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional integer, when flipped triggers activation of metastore config.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("activateTrigger")]
        public Input<int>? ActivateTrigger { get; set; }

        /// <summary>
        /// (Updatable) The ID of BDS Api Key used for Data Catalog metastore integration.
        /// </summary>
        [Input("bdsApiKeyId", required: true)]
        public Input<string> BdsApiKeyId { get; set; } = null!;

        [Input("bdsApiKeyPassphrase", required: true)]
        private Input<string>? _bdsApiKeyPassphrase;

        /// <summary>
        /// (Updatable) Base-64 encoded passphrase of the BDS Api Key.
        /// </summary>
        public Input<string>? BdsApiKeyPassphrase
        {
            get => _bdsApiKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bdsApiKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        [Input("clusterAdminPassword", required: true)]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// (Updatable) Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The display name of the metastore configuration
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The OCID of the Data Catalog metastore.
        /// </summary>
        [Input("metastoreId", required: true)]
        public Input<string> MetastoreId { get; set; } = null!;

        public BdsInstanceMetastoreConfigArgs()
        {
        }
        public static new BdsInstanceMetastoreConfigArgs Empty => new BdsInstanceMetastoreConfigArgs();
    }

    public sealed class BdsInstanceMetastoreConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional integer, when flipped triggers activation of metastore config.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("activateTrigger")]
        public Input<int>? ActivateTrigger { get; set; }

        /// <summary>
        /// (Updatable) The ID of BDS Api Key used for Data Catalog metastore integration.
        /// </summary>
        [Input("bdsApiKeyId")]
        public Input<string>? BdsApiKeyId { get; set; }

        [Input("bdsApiKeyPassphrase")]
        private Input<string>? _bdsApiKeyPassphrase;

        /// <summary>
        /// (Updatable) Base-64 encoded passphrase of the BDS Api Key.
        /// </summary>
        public Input<string>? BdsApiKeyPassphrase
        {
            get => _bdsApiKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bdsApiKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId")]
        public Input<string>? BdsInstanceId { get; set; }

        [Input("clusterAdminPassword")]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// (Updatable) Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The display name of the metastore configuration
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The OCID of the Data Catalog metastore.
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// The type of the metastore in the metastore configuration.
        /// </summary>
        [Input("metastoreType")]
        public Input<string>? MetastoreType { get; set; }

        /// <summary>
        /// the lifecycle state of the metastore configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time when the configuration was created, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time when the configuration was updated, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public BdsInstanceMetastoreConfigState()
        {
        }
        public static new BdsInstanceMetastoreConfigState Empty => new BdsInstanceMetastoreConfigState();
    }
}
