// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    /// <summary>
    /// This resource provides the Bds Instance Node Backup resource in Oracle Cloud Infrastructure Big Data Service service.
    /// 
    /// Add a node volume backup to the cluster for an indicated node type or node.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testBdsInstanceNodeBackup = new Oci.BigDataService.BdsInstanceNodeBackup("test_bds_instance_node_backup", new()
    ///     {
    ///         BdsInstanceId = testBdsInstance.Id,
    ///         LevelTypeDetails = new Oci.BigDataService.Inputs.BdsInstanceNodeBackupLevelTypeDetailsArgs
    ///         {
    ///             LevelType = bdsInstanceNodeBackupLevelTypeDetailsLevelType,
    ///             NodeHostName = bdsInstanceNodeBackupLevelTypeDetailsNodeHostName,
    ///             NodeType = bdsInstanceNodeBackupLevelTypeDetailsNodeType,
    ///         },
    ///         BackupType = bdsInstanceNodeBackupBackupType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// BdsInstanceNodeBackupConfigurations can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:BigDataService/bdsInstanceNodeBackup:BdsInstanceNodeBackup test_bds_instance_node_backup "bdsInstances/{bdsInstanceId}/nodeBackup/{nodeBackupId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:BigDataService/bdsInstanceNodeBackup:BdsInstanceNodeBackup")]
    public partial class BdsInstanceNodeBackup : global::Pulumi.CustomResource
    {
        [Output("backupConfigId")]
        public Output<string?> BackupConfigId { get; private set; } = null!;

        /// <summary>
        /// Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
        /// </summary>
        [Output("backupType")]
        public Output<string> BackupType { get; private set; } = null!;

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Output("bdsInstanceId")]
        public Output<string> BdsInstanceId { get; private set; } = null!;

        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Details of the type of level used to trigger the creation of a new node backup.
        /// </summary>
        [Output("levelTypeDetails")]
        public Output<Outputs.BdsInstanceNodeBackupLevelTypeDetails> LevelTypeDetails { get; private set; } = null!;

        [Output("nodeInstanceId")]
        public Output<string> NodeInstanceId { get; private set; } = null!;

        /// <summary>
        /// The state of the NodeBackup.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time the NodeBackup was created, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a BdsInstanceNodeBackup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BdsInstanceNodeBackup(string name, BdsInstanceNodeBackupArgs args, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceNodeBackup:BdsInstanceNodeBackup", name, args ?? new BdsInstanceNodeBackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BdsInstanceNodeBackup(string name, Input<string> id, BdsInstanceNodeBackupState? state = null, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceNodeBackup:BdsInstanceNodeBackup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BdsInstanceNodeBackup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BdsInstanceNodeBackup Get(string name, Input<string> id, BdsInstanceNodeBackupState? state = null, CustomResourceOptions? options = null)
        {
            return new BdsInstanceNodeBackup(name, id, state, options);
        }
    }

    public sealed class BdsInstanceNodeBackupArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupConfigId")]
        public Input<string>? BackupConfigId { get; set; }

        /// <summary>
        /// Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
        /// </summary>
        [Input("backupType", required: true)]
        public Input<string> BackupType { get; set; } = null!;

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Details of the type of level used to trigger the creation of a new node backup.
        /// </summary>
        [Input("levelTypeDetails", required: true)]
        public Input<Inputs.BdsInstanceNodeBackupLevelTypeDetailsArgs> LevelTypeDetails { get; set; } = null!;

        [Input("nodeInstanceId")]
        public Input<string>? NodeInstanceId { get; set; }

        public BdsInstanceNodeBackupArgs()
        {
        }
        public static new BdsInstanceNodeBackupArgs Empty => new BdsInstanceNodeBackupArgs();
    }

    public sealed class BdsInstanceNodeBackupState : global::Pulumi.ResourceArgs
    {
        [Input("backupConfigId")]
        public Input<string>? BackupConfigId { get; set; }

        /// <summary>
        /// Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId")]
        public Input<string>? BdsInstanceId { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Details of the type of level used to trigger the creation of a new node backup.
        /// </summary>
        [Input("levelTypeDetails")]
        public Input<Inputs.BdsInstanceNodeBackupLevelTypeDetailsGetArgs>? LevelTypeDetails { get; set; }

        [Input("nodeInstanceId")]
        public Input<string>? NodeInstanceId { get; set; }

        /// <summary>
        /// The state of the NodeBackup.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time the NodeBackup was created, shown as an RFC 3339 formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public BdsInstanceNodeBackupState()
        {
        }
        public static new BdsInstanceNodeBackupState Empty => new BdsInstanceNodeBackupState();
    }
}
