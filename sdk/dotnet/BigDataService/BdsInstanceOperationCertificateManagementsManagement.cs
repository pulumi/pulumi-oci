// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    /// <summary>
    /// This resource provides the Bds Instance Operation Certificate Managements Management resource in Oracle Cloud Infrastructure Big Data Service service.
    /// 
    /// Configuring TLS/SSL for various ODH services running on the BDS cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testBdsInstanceOperationCertificateManagementsManagement = new Oci.BigDataService.BdsInstanceOperationCertificateManagementsManagement("test_bds_instance_operation_certificate_managements_management", new()
    ///     {
    ///         BdsInstanceId = testBdsInstance.Id,
    ///         ClusterAdminPassword = bdsInstanceOperationCertificateManagementsManagementClusterAdminPassword,
    ///         Services = bdsInstanceOperationCertificateManagementsManagementServices,
    ///         EnableOperationCertificateManagement = enableOperationCertificateManagement,
    ///         RenewOperationCertificateManagement = renewOperationCertificateManagement,
    ///         HostCertDetails = new[]
    ///         {
    ///             new Oci.BigDataService.Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs
    ///             {
    ///                 Certificate = bdsInstanceOperationCertificateManagementsManagementHostCertDetailsCertificate,
    ///                 HostName = bdsInstanceOperationCertificateManagementsManagementHostCertDetailsHostName,
    ///                 PrivateKey = bdsInstanceOperationCertificateManagementsManagementHostCertDetailsPrivateKey,
    ///             },
    ///         },
    ///         RootCertificate = bdsInstanceOperationCertificateManagementsManagementRootCertificate,
    ///         ServerKeyPassword = bdsInstanceOperationCertificateManagementsManagementServerKeyPassword,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OciResourceType("oci:BigDataService/bdsInstanceOperationCertificateManagementsManagement:BdsInstanceOperationCertificateManagementsManagement")]
    public partial class BdsInstanceOperationCertificateManagementsManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Output("bdsInstanceId")]
        public Output<string> BdsInstanceId { get; private set; } = null!;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        [Output("clusterAdminPassword")]
        public Output<string> ClusterAdminPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// </summary>
        [Output("enableOperationCertificateManagement")]
        public Output<bool> EnableOperationCertificateManagement { get; private set; } = null!;

        /// <summary>
        /// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
        /// </summary>
        [Output("hostCertDetails")]
        public Output<ImmutableArray<Outputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetail>> HostCertDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("renewOperationCertificateManagement")]
        public Output<bool> RenewOperationCertificateManagement { get; private set; } = null!;

        /// <summary>
        /// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
        /// </summary>
        [Output("rootCertificate")]
        public Output<string> RootCertificate { get; private set; } = null!;

        /// <summary>
        /// Base-64 encoded password for CA certificate's private key. This value can be empty.
        /// </summary>
        [Output("serverKeyPassword")]
        public Output<string> ServerKeyPassword { get; private set; } = null!;

        /// <summary>
        /// List of services for which certificate needs to be enabled.
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<string>> Services { get; private set; } = null!;


        /// <summary>
        /// Create a BdsInstanceOperationCertificateManagementsManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BdsInstanceOperationCertificateManagementsManagement(string name, BdsInstanceOperationCertificateManagementsManagementArgs args, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceOperationCertificateManagementsManagement:BdsInstanceOperationCertificateManagementsManagement", name, args ?? new BdsInstanceOperationCertificateManagementsManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BdsInstanceOperationCertificateManagementsManagement(string name, Input<string> id, BdsInstanceOperationCertificateManagementsManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceOperationCertificateManagementsManagement:BdsInstanceOperationCertificateManagementsManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clusterAdminPassword",
                    "serverKeyPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BdsInstanceOperationCertificateManagementsManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BdsInstanceOperationCertificateManagementsManagement Get(string name, Input<string> id, BdsInstanceOperationCertificateManagementsManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new BdsInstanceOperationCertificateManagementsManagement(name, id, state, options);
        }
    }

    public sealed class BdsInstanceOperationCertificateManagementsManagementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        [Input("clusterAdminPassword", required: true)]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// </summary>
        [Input("enableOperationCertificateManagement", required: true)]
        public Input<bool> EnableOperationCertificateManagement { get; set; } = null!;

        [Input("hostCertDetails")]
        private InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs>? _hostCertDetails;

        /// <summary>
        /// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
        /// </summary>
        public InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs> HostCertDetails
        {
            get => _hostCertDetails ?? (_hostCertDetails = new InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs>());
            set => _hostCertDetails = value;
        }

        /// <summary>
        /// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("renewOperationCertificateManagement", required: true)]
        public Input<bool> RenewOperationCertificateManagement { get; set; } = null!;

        /// <summary>
        /// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
        /// </summary>
        [Input("rootCertificate")]
        public Input<string>? RootCertificate { get; set; }

        [Input("serverKeyPassword")]
        private Input<string>? _serverKeyPassword;

        /// <summary>
        /// Base-64 encoded password for CA certificate's private key. This value can be empty.
        /// </summary>
        public Input<string>? ServerKeyPassword
        {
            get => _serverKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serverKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("services", required: true)]
        private InputList<string>? _services;

        /// <summary>
        /// List of services for which certificate needs to be enabled.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public BdsInstanceOperationCertificateManagementsManagementArgs()
        {
        }
        public static new BdsInstanceOperationCertificateManagementsManagementArgs Empty => new BdsInstanceOperationCertificateManagementsManagementArgs();
    }

    public sealed class BdsInstanceOperationCertificateManagementsManagementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId")]
        public Input<string>? BdsInstanceId { get; set; }

        [Input("clusterAdminPassword")]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// </summary>
        [Input("enableOperationCertificateManagement")]
        public Input<bool>? EnableOperationCertificateManagement { get; set; }

        [Input("hostCertDetails")]
        private InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailGetArgs>? _hostCertDetails;

        /// <summary>
        /// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
        /// </summary>
        public InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailGetArgs> HostCertDetails
        {
            get => _hostCertDetails ?? (_hostCertDetails = new InputList<Inputs.BdsInstanceOperationCertificateManagementsManagementHostCertDetailGetArgs>());
            set => _hostCertDetails = value;
        }

        /// <summary>
        /// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("renewOperationCertificateManagement")]
        public Input<bool>? RenewOperationCertificateManagement { get; set; }

        /// <summary>
        /// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
        /// </summary>
        [Input("rootCertificate")]
        public Input<string>? RootCertificate { get; set; }

        [Input("serverKeyPassword")]
        private Input<string>? _serverKeyPassword;

        /// <summary>
        /// Base-64 encoded password for CA certificate's private key. This value can be empty.
        /// </summary>
        public Input<string>? ServerKeyPassword
        {
            get => _serverKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serverKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("services")]
        private InputList<string>? _services;

        /// <summary>
        /// List of services for which certificate needs to be enabled.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        public BdsInstanceOperationCertificateManagementsManagementState()
        {
        }
        public static new BdsInstanceOperationCertificateManagementsManagementState Empty => new BdsInstanceOperationCertificateManagementsManagementState();
    }
}
