// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    /// <summary>
    /// This resource replaces the node with the given hostname, in Oracle Cloud Infrastructure Big Data Service cluster.
    /// 
    /// Replace the node with the given host name in the cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testBdsInstanceReplaceNodeAction = new Oci.BigDataService.BdsInstanceReplaceNodeAction("test_bds_instance_replace_node_action", new()
    ///     {
    ///         BdsInstanceId = testBdsInstance.Id,
    ///         NodeHostName = bdsInstanceReplaceNodeAction.NodeHostName,
    ///         NodeBackupId = bdsInstanceReplaceNodeAction.NodeBackupId,
    ///         ClusterAdminPassword = testBdsInstance.ClusterAdminPassword,
    ///         Shape = shape,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OciResourceType("oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction")]
    public partial class BdsInstanceReplaceNodeAction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Output("bdsInstanceId")]
        public Output<string> BdsInstanceId { get; private set; } = null!;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        [Output("clusterAdminPassword")]
        public Output<string> ClusterAdminPassword { get; private set; } = null!;

        /// <summary>
        /// The id of the nodeBackup to use for replacing the node.
        /// </summary>
        [Output("nodeBackupId")]
        public Output<string> NodeBackupId { get; private set; } = null!;

        /// <summary>
        /// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
        /// </summary>
        [Output("nodeHostName")]
        public Output<string> NodeHostName { get; private set; } = null!;

        /// <summary>
        /// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("shape")]
        public Output<string?> Shape { get; private set; } = null!;


        /// <summary>
        /// Create a BdsInstanceReplaceNodeAction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BdsInstanceReplaceNodeAction(string name, BdsInstanceReplaceNodeActionArgs args, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction", name, args ?? new BdsInstanceReplaceNodeActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BdsInstanceReplaceNodeAction(string name, Input<string> id, BdsInstanceReplaceNodeActionState? state = null, CustomResourceOptions? options = null)
            : base("oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clusterAdminPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BdsInstanceReplaceNodeAction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BdsInstanceReplaceNodeAction Get(string name, Input<string> id, BdsInstanceReplaceNodeActionState? state = null, CustomResourceOptions? options = null)
        {
            return new BdsInstanceReplaceNodeAction(name, id, state, options);
        }
    }

    public sealed class BdsInstanceReplaceNodeActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        [Input("clusterAdminPassword", required: true)]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The id of the nodeBackup to use for replacing the node.
        /// </summary>
        [Input("nodeBackupId", required: true)]
        public Input<string> NodeBackupId { get; set; } = null!;

        /// <summary>
        /// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
        /// </summary>
        [Input("nodeHostName", required: true)]
        public Input<string> NodeHostName { get; set; } = null!;

        /// <summary>
        /// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        public BdsInstanceReplaceNodeActionArgs()
        {
        }
        public static new BdsInstanceReplaceNodeActionArgs Empty => new BdsInstanceReplaceNodeActionArgs();
    }

    public sealed class BdsInstanceReplaceNodeActionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId")]
        public Input<string>? BdsInstanceId { get; set; }

        [Input("clusterAdminPassword")]
        private Input<string>? _clusterAdminPassword;

        /// <summary>
        /// Base-64 encoded password for the cluster admin user.
        /// </summary>
        public Input<string>? ClusterAdminPassword
        {
            get => _clusterAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The id of the nodeBackup to use for replacing the node.
        /// </summary>
        [Input("nodeBackupId")]
        public Input<string>? NodeBackupId { get; set; }

        /// <summary>
        /// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
        /// </summary>
        [Input("nodeHostName")]
        public Input<string>? NodeHostName { get; set; }

        /// <summary>
        /// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        public BdsInstanceReplaceNodeActionState()
        {
        }
        public static new BdsInstanceReplaceNodeActionState Empty => new BdsInstanceReplaceNodeActionState();
    }
}
