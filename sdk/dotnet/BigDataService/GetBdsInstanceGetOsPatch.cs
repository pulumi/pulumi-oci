// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    public static class GetBdsInstanceGetOsPatch
    {
        /// <summary>
        /// This data source provides the list of Bds Instance Get Os Patch in Oracle Cloud Infrastructure Big Data Service service.
        /// 
        /// Get the details of an os patch
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBdsInstanceGetOsPatch = Oci.BigDataService.GetBdsInstanceGetOsPatch.Invoke(new()
        ///     {
        ///         BdsInstanceId = oci_bds_bds_instance.Test_bds_instance.Id,
        ///         OsPatchVersion = @var.Bds_instance_get_os_patch_os_patch_version,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBdsInstanceGetOsPatchResult> InvokeAsync(GetBdsInstanceGetOsPatchArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBdsInstanceGetOsPatchResult>("oci:BigDataService/getBdsInstanceGetOsPatch:getBdsInstanceGetOsPatch", args ?? new GetBdsInstanceGetOsPatchArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Bds Instance Get Os Patch in Oracle Cloud Infrastructure Big Data Service service.
        /// 
        /// Get the details of an os patch
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBdsInstanceGetOsPatch = Oci.BigDataService.GetBdsInstanceGetOsPatch.Invoke(new()
        ///     {
        ///         BdsInstanceId = oci_bds_bds_instance.Test_bds_instance.Id,
        ///         OsPatchVersion = @var.Bds_instance_get_os_patch_os_patch_version,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBdsInstanceGetOsPatchResult> Invoke(GetBdsInstanceGetOsPatchInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBdsInstanceGetOsPatchResult>("oci:BigDataService/getBdsInstanceGetOsPatch:getBdsInstanceGetOsPatch", args ?? new GetBdsInstanceGetOsPatchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBdsInstanceGetOsPatchArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public string BdsInstanceId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetBdsInstanceGetOsPatchFilterArgs>? _filters;
        public List<Inputs.GetBdsInstanceGetOsPatchFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBdsInstanceGetOsPatchFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The version of the OS patch.
        /// </summary>
        [Input("osPatchVersion", required: true)]
        public string OsPatchVersion { get; set; } = null!;

        public GetBdsInstanceGetOsPatchArgs()
        {
        }
        public static new GetBdsInstanceGetOsPatchArgs Empty => new GetBdsInstanceGetOsPatchArgs();
    }

    public sealed class GetBdsInstanceGetOsPatchInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetBdsInstanceGetOsPatchFilterInputArgs>? _filters;
        public InputList<Inputs.GetBdsInstanceGetOsPatchFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBdsInstanceGetOsPatchFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The version of the OS patch.
        /// </summary>
        [Input("osPatchVersion", required: true)]
        public Input<string> OsPatchVersion { get; set; } = null!;

        public GetBdsInstanceGetOsPatchInvokeArgs()
        {
        }
        public static new GetBdsInstanceGetOsPatchInvokeArgs Empty => new GetBdsInstanceGetOsPatchInvokeArgs();
    }


    [OutputType]
    public sealed class GetBdsInstanceGetOsPatchResult
    {
        public readonly string BdsInstanceId;
        public readonly ImmutableArray<Outputs.GetBdsInstanceGetOsPatchFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Minimum BDS version required to install current OS patch.
        /// </summary>
        public readonly string? MinBdsVersion;
        /// <summary>
        /// Map of major ODH version to minimum ODH version required to install current OS patch. e.g. {ODH0.9: 0.9.1}
        /// </summary>
        public readonly ImmutableDictionary<string, object>? MinCompatibleOdhVersionMap;
        /// <summary>
        /// Version of the os patch.
        /// </summary>
        public readonly string OsPatchVersion;
        /// <summary>
        /// Type of a specific os patch. REGULAR means standard released os patches. CUSTOM means os patches with some customizations. EMERGENT means os patches with some emergency fixes that should be prioritized.
        /// </summary>
        public readonly string? PatchType;
        /// <summary>
        /// Released date of the OS patch.
        /// </summary>
        public readonly string? ReleaseDate;
        /// <summary>
        /// List of summaries of individual target packages.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBdsInstanceGetOsPatchTargetPackageResult> TargetPackages;

        [OutputConstructor]
        private GetBdsInstanceGetOsPatchResult(
            string bdsInstanceId,

            ImmutableArray<Outputs.GetBdsInstanceGetOsPatchFilterResult> filters,

            string? id,

            string? minBdsVersion,

            ImmutableDictionary<string, object>? minCompatibleOdhVersionMap,

            string osPatchVersion,

            string? patchType,

            string? releaseDate,

            ImmutableArray<Outputs.GetBdsInstanceGetOsPatchTargetPackageResult> targetPackages)
        {
            BdsInstanceId = bdsInstanceId;
            Filters = filters;
            Id = id;
            MinBdsVersion = minBdsVersion;
            MinCompatibleOdhVersionMap = minCompatibleOdhVersionMap;
            OsPatchVersion = osPatchVersion;
            PatchType = patchType;
            ReleaseDate = releaseDate;
            TargetPackages = targetPackages;
        }
    }
}
