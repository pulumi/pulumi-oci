// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.BigDataService
{
    public static class GetBdsInstanceMetastoreConfigs
    {
        /// <summary>
        /// This data source provides the list of Bds Instance Metastore Configs in Oracle Cloud Infrastructure Big Data Service service.
        /// 
        /// Returns a list of metastore configurations ssociated with this Big Data Service cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBdsInstanceMetastoreConfigs = Oci.BigDataService.GetBdsInstanceMetastoreConfigs.Invoke(new()
        ///     {
        ///         BdsInstanceId = testBdsInstance.Id,
        ///         BdsApiKeyId = testApiKey.Id,
        ///         DisplayName = bdsInstanceMetastoreConfigDisplayName,
        ///         MetastoreId = testMetastore.Id,
        ///         MetastoreType = bdsInstanceMetastoreConfigMetastoreType,
        ///         State = bdsInstanceMetastoreConfigState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBdsInstanceMetastoreConfigsResult> InvokeAsync(GetBdsInstanceMetastoreConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBdsInstanceMetastoreConfigsResult>("oci:BigDataService/getBdsInstanceMetastoreConfigs:getBdsInstanceMetastoreConfigs", args ?? new GetBdsInstanceMetastoreConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Bds Instance Metastore Configs in Oracle Cloud Infrastructure Big Data Service service.
        /// 
        /// Returns a list of metastore configurations ssociated with this Big Data Service cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBdsInstanceMetastoreConfigs = Oci.BigDataService.GetBdsInstanceMetastoreConfigs.Invoke(new()
        ///     {
        ///         BdsInstanceId = testBdsInstance.Id,
        ///         BdsApiKeyId = testApiKey.Id,
        ///         DisplayName = bdsInstanceMetastoreConfigDisplayName,
        ///         MetastoreId = testMetastore.Id,
        ///         MetastoreType = bdsInstanceMetastoreConfigMetastoreType,
        ///         State = bdsInstanceMetastoreConfigState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBdsInstanceMetastoreConfigsResult> Invoke(GetBdsInstanceMetastoreConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBdsInstanceMetastoreConfigsResult>("oci:BigDataService/getBdsInstanceMetastoreConfigs:getBdsInstanceMetastoreConfigs", args ?? new GetBdsInstanceMetastoreConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBdsInstanceMetastoreConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the API key that is associated with the external metastore in the metastore configuration
        /// </summary>
        [Input("bdsApiKeyId")]
        public string? BdsApiKeyId { get; set; }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public string BdsInstanceId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetBdsInstanceMetastoreConfigsFilterArgs>? _filters;
        public List<Inputs.GetBdsInstanceMetastoreConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBdsInstanceMetastoreConfigsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the Data Catalog metastore in the metastore configuration
        /// </summary>
        [Input("metastoreId")]
        public string? MetastoreId { get; set; }

        /// <summary>
        /// The type of the metastore in the metastore configuration
        /// </summary>
        [Input("metastoreType")]
        public string? MetastoreType { get; set; }

        /// <summary>
        /// The lifecycle state of the metastore in the metastore configuration
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetBdsInstanceMetastoreConfigsArgs()
        {
        }
        public static new GetBdsInstanceMetastoreConfigsArgs Empty => new GetBdsInstanceMetastoreConfigsArgs();
    }

    public sealed class GetBdsInstanceMetastoreConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the API key that is associated with the external metastore in the metastore configuration
        /// </summary>
        [Input("bdsApiKeyId")]
        public Input<string>? BdsApiKeyId { get; set; }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("bdsInstanceId", required: true)]
        public Input<string> BdsInstanceId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetBdsInstanceMetastoreConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetBdsInstanceMetastoreConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBdsInstanceMetastoreConfigsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the Data Catalog metastore in the metastore configuration
        /// </summary>
        [Input("metastoreId")]
        public Input<string>? MetastoreId { get; set; }

        /// <summary>
        /// The type of the metastore in the metastore configuration
        /// </summary>
        [Input("metastoreType")]
        public Input<string>? MetastoreType { get; set; }

        /// <summary>
        /// The lifecycle state of the metastore in the metastore configuration
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetBdsInstanceMetastoreConfigsInvokeArgs()
        {
        }
        public static new GetBdsInstanceMetastoreConfigsInvokeArgs Empty => new GetBdsInstanceMetastoreConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetBdsInstanceMetastoreConfigsResult
    {
        /// <summary>
        /// The ID of BDS API Key used for metastore configuration. Set only if metastore's type is EXTERNAL.
        /// </summary>
        public readonly string? BdsApiKeyId;
        public readonly string BdsInstanceId;
        /// <summary>
        /// The list of bds_metastore_configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBdsInstanceMetastoreConfigsBdsMetastoreConfigurationResult> BdsMetastoreConfigurations;
        /// <summary>
        /// The display name of metastore configuration
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetBdsInstanceMetastoreConfigsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the Data Catalog metastore. Set only if metastore's type is EXTERNAL.
        /// </summary>
        public readonly string? MetastoreId;
        /// <summary>
        /// The type of the metastore in the metastore configuration.
        /// </summary>
        public readonly string? MetastoreType;
        /// <summary>
        /// the lifecycle state of the metastore configuration.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetBdsInstanceMetastoreConfigsResult(
            string? bdsApiKeyId,

            string bdsInstanceId,

            ImmutableArray<Outputs.GetBdsInstanceMetastoreConfigsBdsMetastoreConfigurationResult> bdsMetastoreConfigurations,

            string? displayName,

            ImmutableArray<Outputs.GetBdsInstanceMetastoreConfigsFilterResult> filters,

            string id,

            string? metastoreId,

            string? metastoreType,

            string? state)
        {
            BdsApiKeyId = bdsApiKeyId;
            BdsInstanceId = bdsInstanceId;
            BdsMetastoreConfigurations = bdsMetastoreConfigurations;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MetastoreId = metastoreId;
            MetastoreType = metastoreType;
            State = state;
        }
    }
}
