// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Blockchain
{
    public static class GetPeer
    {
        /// <summary>
        /// This data source provides details about a specific Peer resource in Oracle Cloud Infrastructure Blockchain service.
        /// 
        /// Gets information about a peer identified by the specific id
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPeer = Oci.Blockchain.GetPeer.Invoke(new()
        ///     {
        ///         BlockchainPlatformId = oci_blockchain_blockchain_platform.Test_blockchain_platform.Id,
        ///         PeerId = oci_blockchain_peer.Test_peer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetPeerResult> InvokeAsync(GetPeerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPeerResult>("oci:Blockchain/getPeer:getPeer", args ?? new GetPeerArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Peer resource in Oracle Cloud Infrastructure Blockchain service.
        /// 
        /// Gets information about a peer identified by the specific id
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPeer = Oci.Blockchain.GetPeer.Invoke(new()
        ///     {
        ///         BlockchainPlatformId = oci_blockchain_blockchain_platform.Test_blockchain_platform.Id,
        ///         PeerId = oci_blockchain_peer.Test_peer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetPeerResult> Invoke(GetPeerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPeerResult>("oci:Blockchain/getPeer:getPeer", args ?? new GetPeerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPeerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique service identifier.
        /// </summary>
        [Input("blockchainPlatformId", required: true)]
        public string BlockchainPlatformId { get; set; } = null!;

        /// <summary>
        /// Peer identifier.
        /// </summary>
        [Input("peerId", required: true)]
        public string PeerId { get; set; } = null!;

        public GetPeerArgs()
        {
        }
        public static new GetPeerArgs Empty => new GetPeerArgs();
    }

    public sealed class GetPeerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique service identifier.
        /// </summary>
        [Input("blockchainPlatformId", required: true)]
        public Input<string> BlockchainPlatformId { get; set; } = null!;

        /// <summary>
        /// Peer identifier.
        /// </summary>
        [Input("peerId", required: true)]
        public Input<string> PeerId { get; set; } = null!;

        public GetPeerInvokeArgs()
        {
        }
        public static new GetPeerInvokeArgs Empty => new GetPeerInvokeArgs();
    }


    [OutputType]
    public sealed class GetPeerResult
    {
        /// <summary>
        /// Availability Domain of peer
        /// </summary>
        public readonly string Ad;
        /// <summary>
        /// peer alias
        /// </summary>
        public readonly string Alias;
        public readonly string BlockchainPlatformId;
        /// <summary>
        /// Host on which the Peer exists
        /// </summary>
        public readonly string Host;
        public readonly string Id;
        /// <summary>
        /// OCPU allocation parameter
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPeerOcpuAllocationParamResult> OcpuAllocationParams;
        public readonly string PeerId;
        /// <summary>
        /// peer identifier
        /// </summary>
        public readonly string PeerKey;
        /// <summary>
        /// Peer role
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The current state of the peer.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetPeerResult(
            string ad,

            string alias,

            string blockchainPlatformId,

            string host,

            string id,

            ImmutableArray<Outputs.GetPeerOcpuAllocationParamResult> ocpuAllocationParams,

            string peerId,

            string peerKey,

            string role,

            string state)
        {
            Ad = ad;
            Alias = alias;
            BlockchainPlatformId = blockchainPlatformId;
            Host = host;
            Id = id;
            OcpuAllocationParams = ocpuAllocationParams;
            PeerId = peerId;
            PeerKey = peerKey;
            Role = role;
            State = state;
        }
    }
}
