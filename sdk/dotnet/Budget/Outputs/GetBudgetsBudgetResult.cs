// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Budget.Outputs
{

    [OutputType]
    public sealed class GetBudgetsBudgetResult
    {
        /// <summary>
        /// The actual spend in currency for the current budget cycle
        /// </summary>
        public readonly double ActualSpend;
        /// <summary>
        /// Total number of alert rules in the budget
        /// </summary>
        public readonly int AlertRuleCount;
        /// <summary>
        /// The amount of the budget expressed in the currency of the customer's rate card.
        /// </summary>
        public readonly int Amount;
        /// <summary>
        /// The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
        /// </summary>
        public readonly int BudgetProcessingPeriodStartOffset;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The description of the budget.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The forecasted spend in currency by the end of the current budget cycle
        /// </summary>
        public readonly double ForecastedSpend;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the budget
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The reset period for the budget.
        /// </summary>
        public readonly string ResetPeriod;
        /// <summary>
        /// The current state of the resource to filter by.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// This is DEPRECATED. For backwards compatability, the property will be populated when targetType is "COMPARTMENT" AND targets contains EXACT ONE target compartment ocid. For all other scenarios, this property will be left empty.
        /// </summary>
        public readonly string TargetCompartmentId;
        /// <summary>
        /// The type of target to filter by.
        /// * ALL - List all budgets
        /// * COMPARTMENT - List all budgets with targetType == "COMPARTMENT"
        /// * TAG - List all budgets with targetType == "TAG"
        /// </summary>
        public readonly string TargetType;
        /// <summary>
        /// The list of targets on which the budget is applied. If targetType is "COMPARTMENT", targets contains list of compartment OCIDs. If targetType is "TAG", targets contains list of cost tracking tag identifiers in the form of "{tagNamespace}.{tagKey}.{tagValue}".
        /// </summary>
        public readonly ImmutableArray<string> Targets;
        /// <summary>
        /// Time that budget was created
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time that the budget spend was last computed
        /// </summary>
        public readonly string TimeSpendComputed;
        /// <summary>
        /// Time that budget was updated
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// Version of the budget. Starts from 1 and increments by 1.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetBudgetsBudgetResult(
            double actualSpend,

            int alertRuleCount,

            int amount,

            int budgetProcessingPeriodStartOffset,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            double forecastedSpend,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string resetPeriod,

            string state,

            string targetCompartmentId,

            string targetType,

            ImmutableArray<string> targets,

            string timeCreated,

            string timeSpendComputed,

            string timeUpdated,

            int version)
        {
            ActualSpend = actualSpend;
            AlertRuleCount = alertRuleCount;
            Amount = amount;
            BudgetProcessingPeriodStartOffset = budgetProcessingPeriodStartOffset;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            ForecastedSpend = forecastedSpend;
            FreeformTags = freeformTags;
            Id = id;
            ResetPeriod = resetPeriod;
            State = state;
            TargetCompartmentId = targetCompartmentId;
            TargetType = targetType;
            Targets = targets;
            TimeCreated = timeCreated;
            TimeSpendComputed = timeSpendComputed;
            TimeUpdated = timeUpdated;
            Version = version;
        }
    }
}
