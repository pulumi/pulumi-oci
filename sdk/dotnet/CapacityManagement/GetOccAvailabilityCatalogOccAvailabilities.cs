// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CapacityManagement
{
    public static class GetOccAvailabilityCatalogOccAvailabilities
    {
        /// <summary>
        /// This data source provides the list of Occ Availability Catalog Occ Availabilities in Oracle Cloud Infrastructure Capacity Management service.
        /// 
        /// Lists availabilities for a particular availability catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOccAvailabilityCatalogOccAvailabilities = Oci.CapacityManagement.GetOccAvailabilityCatalogOccAvailabilities.Invoke(new()
        ///     {
        ///         OccAvailabilityCatalogId = testOccAvailabilityCatalog.Id,
        ///         DateExpectedCapacityHandover = occAvailabilityCatalogOccAvailabilityDateExpectedCapacityHandover,
        ///         ResourceName = testResource.Name,
        ///         ResourceType = occAvailabilityCatalogOccAvailabilityResourceType,
        ///         WorkloadType = occAvailabilityCatalogOccAvailabilityWorkloadType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOccAvailabilityCatalogOccAvailabilitiesResult> InvokeAsync(GetOccAvailabilityCatalogOccAvailabilitiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOccAvailabilityCatalogOccAvailabilitiesResult>("oci:CapacityManagement/getOccAvailabilityCatalogOccAvailabilities:getOccAvailabilityCatalogOccAvailabilities", args ?? new GetOccAvailabilityCatalogOccAvailabilitiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Occ Availability Catalog Occ Availabilities in Oracle Cloud Infrastructure Capacity Management service.
        /// 
        /// Lists availabilities for a particular availability catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOccAvailabilityCatalogOccAvailabilities = Oci.CapacityManagement.GetOccAvailabilityCatalogOccAvailabilities.Invoke(new()
        ///     {
        ///         OccAvailabilityCatalogId = testOccAvailabilityCatalog.Id,
        ///         DateExpectedCapacityHandover = occAvailabilityCatalogOccAvailabilityDateExpectedCapacityHandover,
        ///         ResourceName = testResource.Name,
        ///         ResourceType = occAvailabilityCatalogOccAvailabilityResourceType,
        ///         WorkloadType = occAvailabilityCatalogOccAvailabilityWorkloadType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOccAvailabilityCatalogOccAvailabilitiesResult> Invoke(GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOccAvailabilityCatalogOccAvailabilitiesResult>("oci:CapacityManagement/getOccAvailabilityCatalogOccAvailabilities:getOccAvailabilityCatalogOccAvailabilities", args ?? new GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Occ Availability Catalog Occ Availabilities in Oracle Cloud Infrastructure Capacity Management service.
        /// 
        /// Lists availabilities for a particular availability catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOccAvailabilityCatalogOccAvailabilities = Oci.CapacityManagement.GetOccAvailabilityCatalogOccAvailabilities.Invoke(new()
        ///     {
        ///         OccAvailabilityCatalogId = testOccAvailabilityCatalog.Id,
        ///         DateExpectedCapacityHandover = occAvailabilityCatalogOccAvailabilityDateExpectedCapacityHandover,
        ///         ResourceName = testResource.Name,
        ///         ResourceType = occAvailabilityCatalogOccAvailabilityResourceType,
        ///         WorkloadType = occAvailabilityCatalogOccAvailabilityWorkloadType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOccAvailabilityCatalogOccAvailabilitiesResult> Invoke(GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOccAvailabilityCatalogOccAvailabilitiesResult>("oci:CapacityManagement/getOccAvailabilityCatalogOccAvailabilities:getOccAvailabilityCatalogOccAvailabilities", args ?? new GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOccAvailabilityCatalogOccAvailabilitiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The capacity handover date of the capacity constraint to filter the list of capacity constraints.
        /// </summary>
        [Input("dateExpectedCapacityHandover")]
        public string? DateExpectedCapacityHandover { get; set; }

        [Input("filters")]
        private List<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs>? _filters;
        public List<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the availability catalog.
        /// </summary>
        [Input("occAvailabilityCatalogId", required: true)]
        public string OccAvailabilityCatalogId { get; set; } = null!;

        /// <summary>
        /// The name of the resource to filter the list of capacity constraints.
        /// </summary>
        [Input("resourceName")]
        public string? ResourceName { get; set; }

        /// <summary>
        /// Resource type using which the capacity constraints of an availability catalog can be filtered.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// Workload type using the resources in an availability catalog can be filtered.
        /// </summary>
        [Input("workloadType")]
        public string? WorkloadType { get; set; }

        public GetOccAvailabilityCatalogOccAvailabilitiesArgs()
        {
        }
        public static new GetOccAvailabilityCatalogOccAvailabilitiesArgs Empty => new GetOccAvailabilityCatalogOccAvailabilitiesArgs();
    }

    public sealed class GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The capacity handover date of the capacity constraint to filter the list of capacity constraints.
        /// </summary>
        [Input("dateExpectedCapacityHandover")]
        public Input<string>? DateExpectedCapacityHandover { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the availability catalog.
        /// </summary>
        [Input("occAvailabilityCatalogId", required: true)]
        public Input<string> OccAvailabilityCatalogId { get; set; } = null!;

        /// <summary>
        /// The name of the resource to filter the list of capacity constraints.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// Resource type using which the capacity constraints of an availability catalog can be filtered.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// Workload type using the resources in an availability catalog can be filtered.
        /// </summary>
        [Input("workloadType")]
        public Input<string>? WorkloadType { get; set; }

        public GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs()
        {
        }
        public static new GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs Empty => new GetOccAvailabilityCatalogOccAvailabilitiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetOccAvailabilityCatalogOccAvailabilitiesResult
    {
        /// <summary>
        /// The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
        /// </summary>
        public readonly string? DateExpectedCapacityHandover;
        public readonly ImmutableArray<Outputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OccAvailabilityCatalogId;
        /// <summary>
        /// The list of occ_availability_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionResult> OccAvailabilityCollections;
        /// <summary>
        /// The name of the resource that the customer can request.
        /// </summary>
        public readonly string? ResourceName;
        /// <summary>
        /// The different types of resources against which customers can place capacity requests.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The type of workload (Generic/ROW).
        /// </summary>
        public readonly string? WorkloadType;

        [OutputConstructor]
        private GetOccAvailabilityCatalogOccAvailabilitiesResult(
            string? dateExpectedCapacityHandover,

            ImmutableArray<Outputs.GetOccAvailabilityCatalogOccAvailabilitiesFilterResult> filters,

            string id,

            string occAvailabilityCatalogId,

            ImmutableArray<Outputs.GetOccAvailabilityCatalogOccAvailabilitiesOccAvailabilityCollectionResult> occAvailabilityCollections,

            string? resourceName,

            string? resourceType,

            string? workloadType)
        {
            DateExpectedCapacityHandover = dateExpectedCapacityHandover;
            Filters = filters;
            Id = id;
            OccAvailabilityCatalogId = occAvailabilityCatalogId;
            OccAvailabilityCollections = occAvailabilityCollections;
            ResourceName = resourceName;
            ResourceType = resourceType;
            WorkloadType = workloadType;
        }
    }
}
