// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CapacityManagement
{
    public static class GetOccAvailabilityCatalogs
    {
        /// <summary>
        /// This data source provides the list of Occ Availability Catalogs in Oracle Cloud Infrastructure Capacity Management service.
        /// 
        /// Lists all availability catalogs.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOccAvailabilityCatalogs = Oci.CapacityManagement.GetOccAvailabilityCatalogs.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CatalogState = occAvailabilityCatalogCatalogState,
        ///         DisplayName = occAvailabilityCatalogDisplayName,
        ///         Id = occAvailabilityCatalogId,
        ///         Namespace = occAvailabilityCatalogNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOccAvailabilityCatalogsResult> InvokeAsync(GetOccAvailabilityCatalogsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOccAvailabilityCatalogsResult>("oci:CapacityManagement/getOccAvailabilityCatalogs:getOccAvailabilityCatalogs", args ?? new GetOccAvailabilityCatalogsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Occ Availability Catalogs in Oracle Cloud Infrastructure Capacity Management service.
        /// 
        /// Lists all availability catalogs.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOccAvailabilityCatalogs = Oci.CapacityManagement.GetOccAvailabilityCatalogs.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CatalogState = occAvailabilityCatalogCatalogState,
        ///         DisplayName = occAvailabilityCatalogDisplayName,
        ///         Id = occAvailabilityCatalogId,
        ///         Namespace = occAvailabilityCatalogNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOccAvailabilityCatalogsResult> Invoke(GetOccAvailabilityCatalogsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOccAvailabilityCatalogsResult>("oci:CapacityManagement/getOccAvailabilityCatalogs:getOccAvailabilityCatalogs", args ?? new GetOccAvailabilityCatalogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOccAvailabilityCatalogsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter the list of availability catalogs based on the catalog state.
        /// </summary>
        [Input("catalogState")]
        public string? CatalogState { get; set; }

        /// <summary>
        /// The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire display name. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetOccAvailabilityCatalogsFilterArgs>? _filters;
        public List<Inputs.GetOccAvailabilityCatalogsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOccAvailabilityCatalogsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the availability catalog to filter the list of availability catalogs.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The namespace by which we would filter the list.
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetOccAvailabilityCatalogsArgs()
        {
        }
        public static new GetOccAvailabilityCatalogsArgs Empty => new GetOccAvailabilityCatalogsArgs();
    }

    public sealed class GetOccAvailabilityCatalogsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter the list of availability catalogs based on the catalog state.
        /// </summary>
        [Input("catalogState")]
        public Input<string>? CatalogState { get; set; }

        /// <summary>
        /// The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire display name. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetOccAvailabilityCatalogsFilterInputArgs>? _filters;
        public InputList<Inputs.GetOccAvailabilityCatalogsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOccAvailabilityCatalogsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the availability catalog to filter the list of availability catalogs.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The namespace by which we would filter the list.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetOccAvailabilityCatalogsInvokeArgs()
        {
        }
        public static new GetOccAvailabilityCatalogsInvokeArgs Empty => new GetOccAvailabilityCatalogsInvokeArgs();
    }


    [OutputType]
    public sealed class GetOccAvailabilityCatalogsResult
    {
        /// <summary>
        /// The different states associated with the availability catalog.
        /// </summary>
        public readonly string? CatalogState;
        /// <summary>
        /// The OCID of the tenancy where the availability catalog resides.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A user-friendly name for the availability catalog.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetOccAvailabilityCatalogsFilterResult> Filters;
        /// <summary>
        /// The OCID of the availability catalog.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the Oracle Cloud Infrastructure service in consideration. For example, Compute, Exadata, and so on.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The list of occ_availability_catalog_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult> OccAvailabilityCatalogCollections;

        [OutputConstructor]
        private GetOccAvailabilityCatalogsResult(
            string? catalogState,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetOccAvailabilityCatalogsFilterResult> filters,

            string? id,

            string? @namespace,

            ImmutableArray<Outputs.GetOccAvailabilityCatalogsOccAvailabilityCatalogCollectionResult> occAvailabilityCatalogCollections)
        {
            CatalogState = catalogState;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            Namespace = @namespace;
            OccAvailabilityCatalogCollections = occAvailabilityCatalogCollections;
        }
    }
}
