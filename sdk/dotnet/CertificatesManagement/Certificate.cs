// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    /// <summary>
    /// This resource provides the Certificate resource in Oracle Cloud Infrastructure Certificates Management service.
    /// 
    /// Creates a new certificate according to the details of the request.
    /// 
    /// ## Import
    /// 
    /// Certificates can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:CertificatesManagement/certificate:Certificate test_certificate "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:CertificatesManagement/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The details of the contents of the certificate and certificate metadata.
        /// </summary>
        [Output("certificateConfig")]
        public Output<Outputs.CertificateCertificateConfig> CertificateConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the profile used to create the certificate, which depends on the type of certificate you need.
        /// </summary>
        [Output("certificateProfileType")]
        public Output<string> CertificateProfileType { get; private set; } = null!;

        /// <summary>
        /// The details of the certificate revocation list (CRL).
        /// </summary>
        [Output("certificateRevocationListDetails")]
        public Output<ImmutableArray<Outputs.CertificateCertificateRevocationListDetail>> CertificateRevocationListDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional list of rules that control how the certificate is used and managed.
        /// </summary>
        [Output("certificateRules")]
        public Output<ImmutableArray<Outputs.CertificateCertificateRule>> CertificateRules { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment where you want to create the certificate.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The origin of the certificate.
        /// </summary>
        [Output("configType")]
        public Output<string> ConfigType { get; private set; } = null!;

        /// <summary>
        /// The details of the certificate version. This object does not contain the certificate contents.
        /// </summary>
        [Output("currentVersions")]
        public Output<ImmutableArray<Outputs.CertificateCurrentVersion>> CurrentVersions { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A brief description of the certificate. Avoid entering confidential information.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The OCID of the private CA.
        /// </summary>
        [Output("issuerCertificateAuthorityId")]
        public Output<string> IssuerCertificateAuthorityId { get; private set; } = null!;

        /// <summary>
        /// The algorithm to use to create key pairs.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current lifecycle state of the certificate.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The algorithm to use to sign the public key certificate.
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The current lifecycle state of the certificate.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        [Output("subjects")]
        public Output<ImmutableArray<Outputs.CertificateSubject>> Subjects { get; private set; } = null!;

        /// <summary>
        /// A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        [Output("timeOfDeletion")]
        public Output<string> TimeOfDeletion { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("oci:CertificatesManagement/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("oci:CertificatesManagement/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The details of the contents of the certificate and certificate metadata.
        /// </summary>
        [Input("certificateConfig", required: true)]
        public Input<Inputs.CertificateCertificateConfigArgs> CertificateConfig { get; set; } = null!;

        [Input("certificateRules")]
        private InputList<Inputs.CertificateCertificateRuleArgs>? _certificateRules;

        /// <summary>
        /// (Updatable) An optional list of rules that control how the certificate is used and managed.
        /// </summary>
        public InputList<Inputs.CertificateCertificateRuleArgs> CertificateRules
        {
            get => _certificateRules ?? (_certificateRules = new InputList<Inputs.CertificateCertificateRuleArgs>());
            set => _certificateRules = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment where you want to create the certificate.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A brief description of the certificate. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The details of the contents of the certificate and certificate metadata.
        /// </summary>
        [Input("certificateConfig")]
        public Input<Inputs.CertificateCertificateConfigGetArgs>? CertificateConfig { get; set; }

        /// <summary>
        /// The name of the profile used to create the certificate, which depends on the type of certificate you need.
        /// </summary>
        [Input("certificateProfileType")]
        public Input<string>? CertificateProfileType { get; set; }

        [Input("certificateRevocationListDetails")]
        private InputList<Inputs.CertificateCertificateRevocationListDetailGetArgs>? _certificateRevocationListDetails;

        /// <summary>
        /// The details of the certificate revocation list (CRL).
        /// </summary>
        public InputList<Inputs.CertificateCertificateRevocationListDetailGetArgs> CertificateRevocationListDetails
        {
            get => _certificateRevocationListDetails ?? (_certificateRevocationListDetails = new InputList<Inputs.CertificateCertificateRevocationListDetailGetArgs>());
            set => _certificateRevocationListDetails = value;
        }

        [Input("certificateRules")]
        private InputList<Inputs.CertificateCertificateRuleGetArgs>? _certificateRules;

        /// <summary>
        /// (Updatable) An optional list of rules that control how the certificate is used and managed.
        /// </summary>
        public InputList<Inputs.CertificateCertificateRuleGetArgs> CertificateRules
        {
            get => _certificateRules ?? (_certificateRules = new InputList<Inputs.CertificateCertificateRuleGetArgs>());
            set => _certificateRules = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment where you want to create the certificate.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The origin of the certificate.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        [Input("currentVersions")]
        private InputList<Inputs.CertificateCurrentVersionGetArgs>? _currentVersions;

        /// <summary>
        /// The details of the certificate version. This object does not contain the certificate contents.
        /// </summary>
        public InputList<Inputs.CertificateCurrentVersionGetArgs> CurrentVersions
        {
            get => _currentVersions ?? (_currentVersions = new InputList<Inputs.CertificateCurrentVersionGetArgs>());
            set => _currentVersions = value;
        }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A brief description of the certificate. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The OCID of the private CA.
        /// </summary>
        [Input("issuerCertificateAuthorityId")]
        public Input<string>? IssuerCertificateAuthorityId { get; set; }

        /// <summary>
        /// The algorithm to use to create key pairs.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// Additional information about the current lifecycle state of the certificate.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The algorithm to use to sign the public key certificate.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// The current lifecycle state of the certificate.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("subjects")]
        private InputList<Inputs.CertificateSubjectGetArgs>? _subjects;

        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public InputList<Inputs.CertificateSubjectGetArgs> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<Inputs.CertificateSubjectGetArgs>());
            set => _subjects = value;
        }

        /// <summary>
        /// A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        [Input("timeOfDeletion")]
        public Input<string>? TimeOfDeletion { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
