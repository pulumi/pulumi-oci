// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    public static class GetCertificateAuthorities
    {
        /// <summary>
        /// This data source provides the list of Certificate Authorities in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificate authorities (CAs) in the specified compartment.
        /// Optionally, you can use the parameter `FilterByCertificateAuthorityIdQueryParam` to limit the results to a single item that matches the specified CA.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateAuthorities = Oci.CertificatesManagement.GetCertificateAuthorities.Invoke(new()
        ///     {
        ///         CertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///         IssuerCertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///         Name = @var.Certificate_authority_name,
        ///         State = @var.Certificate_authority_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCertificateAuthoritiesResult> InvokeAsync(GetCertificateAuthoritiesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateAuthoritiesResult>("oci:CertificatesManagement/getCertificateAuthorities:getCertificateAuthorities", args ?? new GetCertificateAuthoritiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Certificate Authorities in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificate authorities (CAs) in the specified compartment.
        /// Optionally, you can use the parameter `FilterByCertificateAuthorityIdQueryParam` to limit the results to a single item that matches the specified CA.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateAuthorities = Oci.CertificatesManagement.GetCertificateAuthorities.Invoke(new()
        ///     {
        ///         CertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///         IssuerCertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///         Name = @var.Certificate_authority_name,
        ///         State = @var.Certificate_authority_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCertificateAuthoritiesResult> Invoke(GetCertificateAuthoritiesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateAuthoritiesResult>("oci:CertificatesManagement/getCertificateAuthorities:getCertificateAuthorities", args ?? new GetCertificateAuthoritiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateAuthoritiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("certificateAuthorityId")]
        public string? CertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetCertificateAuthoritiesFilterArgs>? _filters;
        public List<Inputs.GetCertificateAuthoritiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCertificateAuthoritiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("issuerCertificateAuthorityId")]
        public string? IssuerCertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCertificateAuthoritiesArgs()
        {
        }
        public static new GetCertificateAuthoritiesArgs Empty => new GetCertificateAuthoritiesArgs();
    }

    public sealed class GetCertificateAuthoritiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("certificateAuthorityId")]
        public Input<string>? CertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCertificateAuthoritiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetCertificateAuthoritiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCertificateAuthoritiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("issuerCertificateAuthorityId")]
        public Input<string>? IssuerCertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCertificateAuthoritiesInvokeArgs()
        {
        }
        public static new GetCertificateAuthoritiesInvokeArgs Empty => new GetCertificateAuthoritiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateAuthoritiesResult
    {
        /// <summary>
        /// The list of certificate_authority_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionResult> CertificateAuthorityCollections;
        /// <summary>
        /// The OCID of the CA.
        /// </summary>
        public readonly string? CertificateAuthorityId;
        /// <summary>
        /// The OCID of the compartment under which the CA is created.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetCertificateAuthoritiesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
        /// </summary>
        public readonly string? IssuerCertificateAuthorityId;
        /// <summary>
        /// A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current lifecycle state of the certificate authority.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCertificateAuthoritiesResult(
            ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionResult> certificateAuthorityCollections,

            string? certificateAuthorityId,

            string? compartmentId,

            ImmutableArray<Outputs.GetCertificateAuthoritiesFilterResult> filters,

            string id,

            string? issuerCertificateAuthorityId,

            string? name,

            string? state)
        {
            CertificateAuthorityCollections = certificateAuthorityCollections;
            CertificateAuthorityId = certificateAuthorityId;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            Name = name;
            State = state;
        }
    }
}
