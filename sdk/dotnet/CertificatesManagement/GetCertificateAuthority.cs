// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    public static class GetCertificateAuthority
    {
        /// <summary>
        /// This data source provides details about a specific Certificate Authority resource in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Gets details about the specified certificate authority (CA).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateAuthority = Oci.CertificatesManagement.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         CertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCertificateAuthorityResult> InvokeAsync(GetCertificateAuthorityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateAuthorityResult>("oci:CertificatesManagement/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Certificate Authority resource in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Gets details about the specified certificate authority (CA).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateAuthority = Oci.CertificatesManagement.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         CertificateAuthorityId = oci_certificates_management_certificate_authority.Test_certificate_authority.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCertificateAuthorityResult> Invoke(GetCertificateAuthorityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateAuthorityResult>("oci:CertificatesManagement/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateAuthorityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate authority (CA).
        /// </summary>
        [Input("certificateAuthorityId", required: true)]
        public string CertificateAuthorityId { get; set; } = null!;

        public GetCertificateAuthorityArgs()
        {
        }
        public static new GetCertificateAuthorityArgs Empty => new GetCertificateAuthorityArgs();
    }

    public sealed class GetCertificateAuthorityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate authority (CA).
        /// </summary>
        [Input("certificateAuthorityId", required: true)]
        public Input<string> CertificateAuthorityId { get; set; } = null!;

        public GetCertificateAuthorityInvokeArgs()
        {
        }
        public static new GetCertificateAuthorityInvokeArgs Empty => new GetCertificateAuthorityInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateAuthorityResult
    {
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigResult> CertificateAuthorityConfigs;
        /// <summary>
        /// The OCID of the CA.
        /// </summary>
        public readonly string CertificateAuthorityId;
        /// <summary>
        /// An optional list of rules that control how the CA is used and managed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityRuleResult> CertificateAuthorityRules;
        /// <summary>
        /// The details of the certificate revocation list (CRL).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCertificateRevocationListDetailResult> CertificateRevocationListDetails;
        /// <summary>
        /// The OCID of the compartment under which the CA is created.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The origin of the CA.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// The metadata details of the certificate authority (CA) version. This summary object does not contain the CA contents.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCurrentVersionResult> CurrentVersions;
        /// <summary>
        /// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A brief description of the CA.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the CA.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
        /// </summary>
        public readonly string IssuerCertificateAuthorityId;
        /// <summary>
        /// The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// Additional information about the current CA lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The algorithm used to sign public key certificates that the CA issues.
        /// </summary>
        public readonly string SigningAlgorithm;
        /// <summary>
        /// The current lifecycle state of the certificate authority.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthoritySubjectResult> Subjects;
        /// <summary>
        /// A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;

        [OutputConstructor]
        private GetCertificateAuthorityResult(
            ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigResult> certificateAuthorityConfigs,

            string certificateAuthorityId,

            ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityRuleResult> certificateAuthorityRules,

            ImmutableArray<Outputs.GetCertificateAuthorityCertificateRevocationListDetailResult> certificateRevocationListDetails,

            string compartmentId,

            string configType,

            ImmutableArray<Outputs.GetCertificateAuthorityCurrentVersionResult> currentVersions,

            ImmutableDictionary<string, object> definedTags,

            string description,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string issuerCertificateAuthorityId,

            string kmsKeyId,

            string lifecycleDetails,

            string name,

            string signingAlgorithm,

            string state,

            ImmutableArray<Outputs.GetCertificateAuthoritySubjectResult> subjects,

            string timeCreated,

            string timeOfDeletion)
        {
            CertificateAuthorityConfigs = certificateAuthorityConfigs;
            CertificateAuthorityId = certificateAuthorityId;
            CertificateAuthorityRules = certificateAuthorityRules;
            CertificateRevocationListDetails = certificateRevocationListDetails;
            CompartmentId = compartmentId;
            ConfigType = configType;
            CurrentVersions = currentVersions;
            DefinedTags = definedTags;
            Description = description;
            FreeformTags = freeformTags;
            Id = id;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            KmsKeyId = kmsKeyId;
            LifecycleDetails = lifecycleDetails;
            Name = name;
            SigningAlgorithm = signingAlgorithm;
            State = state;
            Subjects = subjects;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
        }
    }
}
