// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    public static class GetCertificateVersion
    {
        /// <summary>
        /// This data source provides details about a specific Certificate Version resource in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Gets details about the specified version of a certificate.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateVersion = Oci.CertificatesManagement.GetCertificateVersion.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         CertificateVersionNumber = certificateVersionCertificateVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCertificateVersionResult> InvokeAsync(GetCertificateVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateVersionResult>("oci:CertificatesManagement/getCertificateVersion:getCertificateVersion", args ?? new GetCertificateVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Certificate Version resource in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Gets details about the specified version of a certificate.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateVersion = Oci.CertificatesManagement.GetCertificateVersion.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         CertificateVersionNumber = certificateVersionCertificateVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCertificateVersionResult> Invoke(GetCertificateVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateVersionResult>("oci:CertificatesManagement/getCertificateVersion:getCertificateVersion", args ?? new GetCertificateVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        /// <summary>
        /// The version number of the certificate.
        /// </summary>
        [Input("certificateVersionNumber", required: true)]
        public string CertificateVersionNumber { get; set; } = null!;

        public GetCertificateVersionArgs()
        {
        }
        public static new GetCertificateVersionArgs Empty => new GetCertificateVersionArgs();
    }

    public sealed class GetCertificateVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// The version number of the certificate.
        /// </summary>
        [Input("certificateVersionNumber", required: true)]
        public Input<string> CertificateVersionNumber { get; set; } = null!;

        public GetCertificateVersionInvokeArgs()
        {
        }
        public static new GetCertificateVersionInvokeArgs Empty => new GetCertificateVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateVersionResult
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        public readonly string CertificateId;
        public readonly string CertificateVersionNumber;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The version number of the issuing certificate authority (CA).
        /// </summary>
        public readonly string IssuerCaVersionNumber;
        /// <summary>
        /// The current revocation status of the entity.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateVersionRevocationStatusResult> RevocationStatuses;
        /// <summary>
        /// A unique certificate identifier used in certificate revocation tracking, formatted as octets. Example: `03 AC FC FA CC B3 CB 02 B8 F8 DE F5 85 E7 7B FF`
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// A list of stages of this entity.
        /// </summary>
        public readonly ImmutableArray<string> Stages;
        /// <summary>
        /// A list of subject alternative names.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateVersionSubjectAlternativeNameResult> SubjectAlternativeNames;
        /// <summary>
        /// A optional property indicating when the certificate version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateVersionValidityResult> Validities;
        /// <summary>
        /// The name of the certificate version. When the value is not null, a name is unique across versions of a given certificate.
        /// </summary>
        public readonly string VersionName;
        /// <summary>
        /// The version number of the certificate.
        /// </summary>
        public readonly string VersionNumber;

        [OutputConstructor]
        private GetCertificateVersionResult(
            string certificateId,

            string certificateVersionNumber,

            string id,

            string issuerCaVersionNumber,

            ImmutableArray<Outputs.GetCertificateVersionRevocationStatusResult> revocationStatuses,

            string serialNumber,

            ImmutableArray<string> stages,

            ImmutableArray<Outputs.GetCertificateVersionSubjectAlternativeNameResult> subjectAlternativeNames,

            string timeCreated,

            string timeOfDeletion,

            ImmutableArray<Outputs.GetCertificateVersionValidityResult> validities,

            string versionName,

            string versionNumber)
        {
            CertificateId = certificateId;
            CertificateVersionNumber = certificateVersionNumber;
            Id = id;
            IssuerCaVersionNumber = issuerCaVersionNumber;
            RevocationStatuses = revocationStatuses;
            SerialNumber = serialNumber;
            Stages = stages;
            SubjectAlternativeNames = subjectAlternativeNames;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
            Validities = validities;
            VersionName = versionName;
            VersionNumber = versionNumber;
        }
    }
}
