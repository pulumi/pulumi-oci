// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    public static class GetCertificateVersions
    {
        /// <summary>
        /// This data source provides the list of Certificate Versions in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificate versions for the specified certificate.
        /// Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the result set to a single item that matches the specified version number.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateVersions = Oci.CertificatesManagement.GetCertificateVersions.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         VersionNumber = certificateVersionVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateVersionsResult> InvokeAsync(GetCertificateVersionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateVersionsResult>("oci:CertificatesManagement/getCertificateVersions:getCertificateVersions", args ?? new GetCertificateVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Certificate Versions in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificate versions for the specified certificate.
        /// Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the result set to a single item that matches the specified version number.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateVersions = Oci.CertificatesManagement.GetCertificateVersions.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         VersionNumber = certificateVersionVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateVersionsResult> Invoke(GetCertificateVersionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateVersionsResult>("oci:CertificatesManagement/getCertificateVersions:getCertificateVersions", args ?? new GetCertificateVersionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Certificate Versions in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificate versions for the specified certificate.
        /// Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the result set to a single item that matches the specified version number.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificateVersions = Oci.CertificatesManagement.GetCertificateVersions.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         VersionNumber = certificateVersionVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateVersionsResult> Invoke(GetCertificateVersionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateVersionsResult>("oci:CertificatesManagement/getCertificateVersions:getCertificateVersions", args ?? new GetCertificateVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetCertificateVersionsFilterArgs>? _filters;
        public List<Inputs.GetCertificateVersionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCertificateVersionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
        /// </summary>
        [Input("versionNumber")]
        public string? VersionNumber { get; set; }

        public GetCertificateVersionsArgs()
        {
        }
        public static new GetCertificateVersionsArgs Empty => new GetCertificateVersionsArgs();
    }

    public sealed class GetCertificateVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetCertificateVersionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCertificateVersionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCertificateVersionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
        /// </summary>
        [Input("versionNumber")]
        public Input<string>? VersionNumber { get; set; }

        public GetCertificateVersionsInvokeArgs()
        {
        }
        public static new GetCertificateVersionsInvokeArgs Empty => new GetCertificateVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateVersionsResult
    {
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// The list of certificate_version_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateVersionsCertificateVersionCollectionResult> CertificateVersionCollections;
        public readonly ImmutableArray<Outputs.GetCertificateVersionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The version number of the certificate.
        /// </summary>
        public readonly string? VersionNumber;

        [OutputConstructor]
        private GetCertificateVersionsResult(
            string certificateId,

            ImmutableArray<Outputs.GetCertificateVersionsCertificateVersionCollectionResult> certificateVersionCollections,

            ImmutableArray<Outputs.GetCertificateVersionsFilterResult> filters,

            string id,

            string? versionNumber)
        {
            CertificateId = certificateId;
            CertificateVersionCollections = certificateVersionCollections;
            Filters = filters;
            Id = id;
            VersionNumber = versionNumber;
        }
    }
}
