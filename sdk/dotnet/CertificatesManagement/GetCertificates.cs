// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement
{
    public static class GetCertificates
    {
        /// <summary>
        /// This data source provides the list of Certificates in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificates that match the query parameters.
        /// Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificates = Oci.CertificatesManagement.GetCertificates.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         CompartmentId = compartmentId,
        ///         IssuerCertificateAuthorityId = testCertificateAuthority.Id,
        ///         Name = certificateName,
        ///         State = certificateState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificatesResult> InvokeAsync(GetCertificatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificatesResult>("oci:CertificatesManagement/getCertificates:getCertificates", args ?? new GetCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Certificates in Oracle Cloud Infrastructure Certificates Management service.
        /// 
        /// Lists all certificates that match the query parameters.
        /// Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificates = Oci.CertificatesManagement.GetCertificates.Invoke(new()
        ///     {
        ///         CertificateId = testCertificate.Id,
        ///         CompartmentId = compartmentId,
        ///         IssuerCertificateAuthorityId = testCertificateAuthority.Id,
        ///         Name = certificateName,
        ///         State = certificateState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatesResult> Invoke(GetCertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatesResult>("oci:CertificatesManagement/getCertificates:getCertificates", args ?? new GetCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetCertificatesFilterArgs>? _filters;
        public List<Inputs.GetCertificatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCertificatesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("issuerCertificateAuthorityId")]
        public string? IssuerCertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCertificatesArgs()
        {
        }
        public static new GetCertificatesArgs Empty => new GetCertificatesArgs();
    }

    public sealed class GetCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCertificatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetCertificatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCertificatesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        [Input("issuerCertificateAuthorityId")]
        public Input<string>? IssuerCertificateAuthorityId { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCertificatesInvokeArgs()
        {
        }
        public static new GetCertificatesInvokeArgs Empty => new GetCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificatesResult
    {
        /// <summary>
        /// The list of certificate_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatesCertificateCollectionResult> CertificateCollections;
        /// <summary>
        /// The OCID of the certificate.
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// The OCID of the compartment where you want to create the certificate.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetCertificatesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the certificate authority (CA) that issued the certificate.
        /// </summary>
        public readonly string? IssuerCertificateAuthorityId;
        /// <summary>
        /// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current lifecycle state of the certificate.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCertificatesResult(
            ImmutableArray<Outputs.GetCertificatesCertificateCollectionResult> certificateCollections,

            string? certificateId,

            string? compartmentId,

            ImmutableArray<Outputs.GetCertificatesFilterResult> filters,

            string id,

            string? issuerCertificateAuthorityId,

            string? name,

            string? state)
        {
            CertificateCollections = certificateCollections;
            CertificateId = certificateId;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            Name = name;
            State = state;
        }
    }
}
