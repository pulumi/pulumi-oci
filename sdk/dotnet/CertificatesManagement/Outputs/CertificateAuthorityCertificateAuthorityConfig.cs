// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement.Outputs
{

    [OutputType]
    public sealed class CertificateAuthorityCertificateAuthorityConfig
    {
        /// <summary>
        /// (Updatable) The origin of the CA.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// The OCID of the private CA.
        /// </summary>
        public readonly string? IssuerCertificateAuthorityId;
        /// <summary>
        /// The algorithm used to sign public key certificates that the CA issues.
        /// </summary>
        public readonly string? SigningAlgorithm;
        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public readonly Outputs.CertificateAuthorityCertificateAuthorityConfigSubject Subject;
        /// <summary>
        /// (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
        /// </summary>
        public readonly Outputs.CertificateAuthorityCertificateAuthorityConfigValidity? Validity;
        /// <summary>
        /// (Updatable) The name of the CA version. When the value is not null, a name is unique across versions of a given CA.
        /// </summary>
        public readonly string? VersionName;

        [OutputConstructor]
        private CertificateAuthorityCertificateAuthorityConfig(
            string configType,

            string? issuerCertificateAuthorityId,

            string? signingAlgorithm,

            Outputs.CertificateAuthorityCertificateAuthorityConfigSubject subject,

            Outputs.CertificateAuthorityCertificateAuthorityConfigValidity? validity,

            string? versionName)
        {
            ConfigType = configType;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            SigningAlgorithm = signingAlgorithm;
            Subject = subject;
            Validity = validity;
            VersionName = versionName;
        }
    }
}
