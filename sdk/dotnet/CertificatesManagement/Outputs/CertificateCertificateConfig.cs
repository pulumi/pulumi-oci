// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement.Outputs
{

    [OutputType]
    public sealed class CertificateCertificateConfig
    {
        /// <summary>
        /// The name of the profile used to create the certificate, which depends on the type of certificate you need.
        /// </summary>
        public readonly string? CertificateProfileType;
        /// <summary>
        /// (Updatable) The origin of the certificate.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// (Updatable) The certificate signing request (in PEM format).
        /// </summary>
        public readonly string? CsrPem;
        /// <summary>
        /// The OCID of the private CA.
        /// </summary>
        public readonly string? IssuerCertificateAuthorityId;
        /// <summary>
        /// The algorithm to use to create key pairs.
        /// </summary>
        public readonly string? KeyAlgorithm;
        /// <summary>
        /// The algorithm to use to sign the public key certificate.
        /// </summary>
        public readonly string? SignatureAlgorithm;
        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public readonly Outputs.CertificateCertificateConfigSubject? Subject;
        /// <summary>
        /// A list of subject alternative names.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateCertificateConfigSubjectAlternativeName> SubjectAlternativeNames;
        /// <summary>
        /// (Updatable) An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
        /// </summary>
        public readonly Outputs.CertificateCertificateConfigValidity? Validity;
        /// <summary>
        /// (Updatable) A name for the certificate. When the value is not null, a name is unique across versions of a given certificate.
        /// </summary>
        public readonly string? VersionName;

        [OutputConstructor]
        private CertificateCertificateConfig(
            string? certificateProfileType,

            string configType,

            string? csrPem,

            string? issuerCertificateAuthorityId,

            string? keyAlgorithm,

            string? signatureAlgorithm,

            Outputs.CertificateCertificateConfigSubject? subject,

            ImmutableArray<Outputs.CertificateCertificateConfigSubjectAlternativeName> subjectAlternativeNames,

            Outputs.CertificateCertificateConfigValidity? validity,

            string? versionName)
        {
            CertificateProfileType = certificateProfileType;
            ConfigType = configType;
            CsrPem = csrPem;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            KeyAlgorithm = keyAlgorithm;
            SignatureAlgorithm = signatureAlgorithm;
            Subject = subject;
            SubjectAlternativeNames = subjectAlternativeNames;
            Validity = validity;
            VersionName = versionName;
        }
    }
}
