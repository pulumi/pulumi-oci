// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement.Outputs
{

    [OutputType]
    public sealed class GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult
    {
        /// <summary>
        /// The origin of the CA.
        /// </summary>
        public readonly string? ConfigType;
        /// <summary>
        /// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
        /// </summary>
        public readonly string? IssuerCertificateAuthorityId;
        /// <summary>
        /// The algorithm used to sign public key certificates that the CA issues.
        /// </summary>
        public readonly string? SigningAlgorithm;
        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult> Subjects;
        /// <summary>
        /// An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult> Validities;
        /// <summary>
        /// The name of the CA version. When this value is not null, the name is unique across CA versions for a given CA.
        /// </summary>
        public readonly string? VersionName;

        [OutputConstructor]
        private GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigResult(
            string? configType,

            string? issuerCertificateAuthorityId,

            string? signingAlgorithm,

            ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigSubjectResult> subjects,

            ImmutableArray<Outputs.GetCertificateAuthoritiesCertificateAuthorityCollectionItemCertificateAuthorityConfigValidityResult> validities,

            string? versionName)
        {
            ConfigType = configType;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            SigningAlgorithm = signingAlgorithm;
            Subjects = subjects;
            Validities = validities;
            VersionName = versionName;
        }
    }
}
