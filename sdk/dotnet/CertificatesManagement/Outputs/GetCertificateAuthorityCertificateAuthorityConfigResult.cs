// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CertificatesManagement.Outputs
{

    [OutputType]
    public sealed class GetCertificateAuthorityCertificateAuthorityConfigResult
    {
        /// <summary>
        /// The origin of the CA.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
        /// </summary>
        public readonly string IssuerCertificateAuthorityId;
        /// <summary>
        /// The algorithm used to sign public key certificates that the CA issues.
        /// </summary>
        public readonly string SigningAlgorithm;
        /// <summary>
        /// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigSubjectResult> Subjects;
        /// <summary>
        /// An object that describes a period of time during which an entity is valid. If this is not provided when you create a certificate, the validity of the issuing CA is used.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigValidityResult> Validities;
        /// <summary>
        /// The name of the CA version. When this value is not null, the name is unique across CA versions for a given CA.
        /// </summary>
        public readonly string VersionName;

        [OutputConstructor]
        private GetCertificateAuthorityCertificateAuthorityConfigResult(
            string configType,

            string issuerCertificateAuthorityId,

            string signingAlgorithm,

            ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigSubjectResult> subjects,

            ImmutableArray<Outputs.GetCertificateAuthorityCertificateAuthorityConfigValidityResult> validities,

            string versionName)
        {
            ConfigType = configType;
            IssuerCertificateAuthorityId = issuerCertificateAuthorityId;
            SigningAlgorithm = signingAlgorithm;
            Subjects = subjects;
            Validities = validities;
            VersionName = versionName;
        }
    }
}
