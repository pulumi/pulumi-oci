// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudBridge
{
    public static class GetAgentDependencies
    {
        /// <summary>
        /// This data source provides the list of Agent Dependencies in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of AgentDependencies such as AgentDependencyCollection.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAgentDependencies = Oci.CloudBridge.GetAgentDependencies.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AgentId = oci_cloud_bridge_agent.Test_agent.Id,
        ///         DisplayName = @var.Agent_dependency_display_name,
        ///         EnvironmentId = oci_cloud_bridge_environment.Test_environment.Id,
        ///         State = @var.Agent_dependency_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAgentDependenciesResult> InvokeAsync(GetAgentDependenciesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAgentDependenciesResult>("oci:CloudBridge/getAgentDependencies:getAgentDependencies", args ?? new GetAgentDependenciesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Agent Dependencies in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of AgentDependencies such as AgentDependencyCollection.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAgentDependencies = Oci.CloudBridge.GetAgentDependencies.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AgentId = oci_cloud_bridge_agent.Test_agent.Id,
        ///         DisplayName = @var.Agent_dependency_display_name,
        ///         EnvironmentId = oci_cloud_bridge_environment.Test_environment.Id,
        ///         State = @var.Agent_dependency_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAgentDependenciesResult> Invoke(GetAgentDependenciesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAgentDependenciesResult>("oci:CloudBridge/getAgentDependencies:getAgentDependencies", args ?? new GetAgentDependenciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAgentDependenciesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given Agent ID.
        /// </summary>
        [Input("agentId")]
        public string? AgentId { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given environment ID.
        /// </summary>
        [Input("environmentId")]
        public string? EnvironmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetAgentDependenciesFilterArgs>? _filters;
        public List<Inputs.GetAgentDependenciesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAgentDependenciesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetAgentDependenciesArgs()
        {
        }
        public static new GetAgentDependenciesArgs Empty => new GetAgentDependenciesArgs();
    }

    public sealed class GetAgentDependenciesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given Agent ID.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given environment ID.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAgentDependenciesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAgentDependenciesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAgentDependenciesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetAgentDependenciesInvokeArgs()
        {
        }
        public static new GetAgentDependenciesInvokeArgs Empty => new GetAgentDependenciesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAgentDependenciesResult
    {
        /// <summary>
        /// The list of agent_dependency_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAgentDependenciesAgentDependencyCollectionResult> AgentDependencyCollections;
        public readonly string? AgentId;
        /// <summary>
        /// Compartment identifier
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Display name of the Agent dependency.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? EnvironmentId;
        public readonly ImmutableArray<Outputs.GetAgentDependenciesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of AgentDependency.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetAgentDependenciesResult(
            ImmutableArray<Outputs.GetAgentDependenciesAgentDependencyCollectionResult> agentDependencyCollections,

            string? agentId,

            string compartmentId,

            string? displayName,

            string? environmentId,

            ImmutableArray<Outputs.GetAgentDependenciesFilterResult> filters,

            string id,

            string? state)
        {
            AgentDependencyCollections = agentDependencyCollections;
            AgentId = agentId;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            EnvironmentId = environmentId;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
