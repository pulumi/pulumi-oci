// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudBridge
{
    public static class GetAssets
    {
        /// <summary>
        /// This data source provides the list of Assets in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of assets.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAssets = Oci.CloudBridge.GetAssets.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AssetId = oci_cloud_bridge_asset.Test_asset.Id,
        ///         AssetType = @var.Asset_asset_type,
        ///         DisplayName = @var.Asset_display_name,
        ///         ExternalAssetKey = @var.Asset_external_asset_key,
        ///         InventoryId = oci_cloud_bridge_inventory.Test_inventory.Id,
        ///         SourceKey = @var.Asset_source_key,
        ///         State = @var.Asset_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAssetsResult> InvokeAsync(GetAssetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAssetsResult>("oci:CloudBridge/getAssets:getAssets", args ?? new GetAssetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Assets in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of assets.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAssets = Oci.CloudBridge.GetAssets.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AssetId = oci_cloud_bridge_asset.Test_asset.Id,
        ///         AssetType = @var.Asset_asset_type,
        ///         DisplayName = @var.Asset_display_name,
        ///         ExternalAssetKey = @var.Asset_external_asset_key,
        ///         InventoryId = oci_cloud_bridge_inventory.Test_inventory.Id,
        ///         SourceKey = @var.Asset_source_key,
        ///         State = @var.Asset_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAssetsResult> Invoke(GetAssetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAssetsResult>("oci:CloudBridge/getAssets:getAssets", args ?? new GetAssetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique asset identifier.
        /// </summary>
        [Input("assetId")]
        public string? AssetId { get; set; }

        /// <summary>
        /// The type of asset.
        /// </summary>
        [Input("assetType")]
        public string? AssetType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// External asset key.
        /// </summary>
        [Input("externalAssetKey")]
        public string? ExternalAssetKey { get; set; }

        [Input("filters")]
        private List<Inputs.GetAssetsFilterArgs>? _filters;
        public List<Inputs.GetAssetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAssetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Inventory identifier.
        /// </summary>
        [Input("inventoryId")]
        public string? InventoryId { get; set; }

        /// <summary>
        /// Source key from where the assets originate.
        /// </summary>
        [Input("sourceKey")]
        public string? SourceKey { get; set; }

        /// <summary>
        /// A filter to return only assets whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetAssetsArgs()
        {
        }
        public static new GetAssetsArgs Empty => new GetAssetsArgs();
    }

    public sealed class GetAssetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique asset identifier.
        /// </summary>
        [Input("assetId")]
        public Input<string>? AssetId { get; set; }

        /// <summary>
        /// The type of asset.
        /// </summary>
        [Input("assetType")]
        public Input<string>? AssetType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// External asset key.
        /// </summary>
        [Input("externalAssetKey")]
        public Input<string>? ExternalAssetKey { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAssetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAssetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAssetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Inventory identifier.
        /// </summary>
        [Input("inventoryId")]
        public Input<string>? InventoryId { get; set; }

        /// <summary>
        /// Source key from where the assets originate.
        /// </summary>
        [Input("sourceKey")]
        public Input<string>? SourceKey { get; set; }

        /// <summary>
        /// A filter to return only assets whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetAssetsInvokeArgs()
        {
        }
        public static new GetAssetsInvokeArgs Empty => new GetAssetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAssetsResult
    {
        /// <summary>
        /// The list of asset_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAssetsAssetCollectionResult> AssetCollections;
        public readonly string? AssetId;
        /// <summary>
        /// The type of asset.
        /// </summary>
        public readonly string? AssetType;
        /// <summary>
        /// The OCID of the compartment to which an asset belongs to.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Asset display name.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The key of the asset from the external environment.
        /// </summary>
        public readonly string? ExternalAssetKey;
        public readonly ImmutableArray<Outputs.GetAssetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Inventory ID to which an asset belongs to.
        /// </summary>
        public readonly string? InventoryId;
        /// <summary>
        /// The source key that the asset belongs to.
        /// </summary>
        public readonly string? SourceKey;
        /// <summary>
        /// The current state of the asset.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetAssetsResult(
            ImmutableArray<Outputs.GetAssetsAssetCollectionResult> assetCollections,

            string? assetId,

            string? assetType,

            string compartmentId,

            string? displayName,

            string? externalAssetKey,

            ImmutableArray<Outputs.GetAssetsFilterResult> filters,

            string id,

            string? inventoryId,

            string? sourceKey,

            string? state)
        {
            AssetCollections = assetCollections;
            AssetId = assetId;
            AssetType = assetType;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            ExternalAssetKey = externalAssetKey;
            Filters = filters;
            Id = id;
            InventoryId = inventoryId;
            SourceKey = sourceKey;
            State = state;
        }
    }
}
