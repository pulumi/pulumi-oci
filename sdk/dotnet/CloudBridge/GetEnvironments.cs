// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudBridge
{
    public static class GetEnvironments
    {
        /// <summary>
        /// This data source provides the list of Environments in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of source environments.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEnvironments = Oci.CloudBridge.GetEnvironments.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Environment_display_name,
        ///         EnvironmentId = oci_cloud_bridge_environment.Test_environment.Id,
        ///         State = @var.Environment_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEnvironmentsResult> InvokeAsync(GetEnvironmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentsResult>("oci:CloudBridge/getEnvironments:getEnvironments", args ?? new GetEnvironmentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Environments in Oracle Cloud Infrastructure Cloud Bridge service.
        /// 
        /// Returns a list of source environments.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEnvironments = Oci.CloudBridge.GetEnvironments.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Environment_display_name,
        ///         EnvironmentId = oci_cloud_bridge_environment.Test_environment.Id,
        ///         State = @var.Environment_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEnvironmentsResult> Invoke(GetEnvironmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentsResult>("oci:CloudBridge/getEnvironments:getEnvironments", args ?? new GetEnvironmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given environment ID.
        /// </summary>
        [Input("environmentId")]
        public string? EnvironmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetEnvironmentsFilterArgs>? _filters;
        public List<Inputs.GetEnvironmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEnvironmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources where their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetEnvironmentsArgs()
        {
        }
        public static new GetEnvironmentsArgs Empty => new GetEnvironmentsArgs();
    }

    public sealed class GetEnvironmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given environment ID.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetEnvironmentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetEnvironmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEnvironmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources where their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetEnvironmentsInvokeArgs()
        {
        }
        public static new GetEnvironmentsInvokeArgs Empty => new GetEnvironmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentsResult
    {
        /// <summary>
        /// Compartment identifier.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Environment identifier, which can be renamed.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The list of environment_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEnvironmentsEnvironmentCollectionResult> EnvironmentCollections;
        public readonly string? EnvironmentId;
        public readonly ImmutableArray<Outputs.GetEnvironmentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the source environment.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetEnvironmentsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetEnvironmentsEnvironmentCollectionResult> environmentCollections,

            string? environmentId,

            ImmutableArray<Outputs.GetEnvironmentsFilterResult> filters,

            string id,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            EnvironmentCollections = environmentCollections;
            EnvironmentId = environmentId;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
