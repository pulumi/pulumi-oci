// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudBridge.Inputs
{

    public sealed class AssetComputeGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Number of connected networks.
        /// </summary>
        [Input("connectedNetworks")]
        public Input<int>? ConnectedNetworks { get; set; }

        /// <summary>
        /// (Updatable) Number of CPUs.
        /// </summary>
        [Input("coresCount")]
        public Input<int>? CoresCount { get; set; }

        /// <summary>
        /// (Updatable) CPU model name.
        /// </summary>
        [Input("cpuModel")]
        public Input<string>? CpuModel { get; set; }

        /// <summary>
        /// (Updatable) Information about the asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.AssetComputeDiskGetArgs>? _disks;

        /// <summary>
        /// (Updatable) Lists the set of disks belonging to the virtual machine. This list is unordered.
        /// </summary>
        public InputList<Inputs.AssetComputeDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.AssetComputeDiskGetArgs>());
            set => _disks = value;
        }

        /// <summary>
        /// (Updatable) Number of disks.
        /// </summary>
        [Input("disksCount")]
        public Input<int>? DisksCount { get; set; }

        /// <summary>
        /// (Updatable) Fully Qualified DNS Name.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// (Updatable) Information about firmware type for this virtual machine.
        /// </summary>
        [Input("firmware")]
        public Input<string>? Firmware { get; set; }

        [Input("gpuDevices")]
        private InputList<Inputs.AssetComputeGpuDeviceGetArgs>? _gpuDevices;

        /// <summary>
        /// (Updatable) List of GPU devices attached to a virtual machine.
        /// </summary>
        public InputList<Inputs.AssetComputeGpuDeviceGetArgs> GpuDevices
        {
            get => _gpuDevices ?? (_gpuDevices = new InputList<Inputs.AssetComputeGpuDeviceGetArgs>());
            set => _gpuDevices = value;
        }

        /// <summary>
        /// (Updatable) Number of GPU devices.
        /// </summary>
        [Input("gpuDevicesCount")]
        public Input<int>? GpuDevicesCount { get; set; }

        /// <summary>
        /// (Updatable) Guest state.
        /// </summary>
        [Input("guestState")]
        public Input<string>? GuestState { get; set; }

        /// <summary>
        /// (Updatable) Hardware version.
        /// </summary>
        [Input("hardwareVersion")]
        public Input<string>? HardwareVersion { get; set; }

        /// <summary>
        /// (Updatable) Host name of the VM.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// (Updatable) Whether Pmem is enabled. Decides if NVDIMMs are used as a permanent memory.
        /// </summary>
        [Input("isPmemEnabled")]
        public Input<bool>? IsPmemEnabled { get; set; }

        /// <summary>
        /// (Updatable) Whether Trusted Platform Module (TPM) is enabled.
        /// </summary>
        [Input("isTpmEnabled")]
        public Input<bool>? IsTpmEnabled { get; set; }

        /// <summary>
        /// (Updatable) Latency sensitivity.
        /// </summary>
        [Input("latencySensitivity")]
        public Input<string>? LatencySensitivity { get; set; }

        /// <summary>
        /// (Updatable) Memory size in MBs.
        /// </summary>
        [Input("memoryInMbs")]
        public Input<string>? MemoryInMbs { get; set; }

        [Input("nics")]
        private InputList<Inputs.AssetComputeNicGetArgs>? _nics;

        /// <summary>
        /// (Updatable) List of network ethernet cards attached to a virtual machine.
        /// </summary>
        public InputList<Inputs.AssetComputeNicGetArgs> Nics
        {
            get => _nics ?? (_nics = new InputList<Inputs.AssetComputeNicGetArgs>());
            set => _nics = value;
        }

        /// <summary>
        /// (Updatable) Number of network ethernet cards.
        /// </summary>
        [Input("nicsCount")]
        public Input<int>? NicsCount { get; set; }

        /// <summary>
        /// (Updatable) The asset's NVDIMM configuration.
        /// </summary>
        [Input("nvdimmController")]
        public Input<Inputs.AssetComputeNvdimmControllerGetArgs>? NvdimmController { get; set; }

        [Input("nvdimms")]
        private InputList<Inputs.AssetComputeNvdimmGetArgs>? _nvdimms;

        /// <summary>
        /// (Updatable) The properties of the NVDIMMs attached to a virtual machine.
        /// </summary>
        public InputList<Inputs.AssetComputeNvdimmGetArgs> Nvdimms
        {
            get => _nvdimms ?? (_nvdimms = new InputList<Inputs.AssetComputeNvdimmGetArgs>());
            set => _nvdimms = value;
        }

        /// <summary>
        /// (Updatable) Operating system.
        /// </summary>
        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        /// <summary>
        /// (Updatable) Operating system version.
        /// </summary>
        [Input("operatingSystemVersion")]
        public Input<string>? OperatingSystemVersion { get; set; }

        /// <summary>
        /// (Updatable) Pmem size in MBs.
        /// </summary>
        [Input("pmemInMbs")]
        public Input<string>? PmemInMbs { get; set; }

        /// <summary>
        /// (Updatable) The current power state of the virtual machine.
        /// </summary>
        [Input("powerState")]
        public Input<string>? PowerState { get; set; }

        /// <summary>
        /// (Updatable) Primary IP address of the compute instance.
        /// </summary>
        [Input("primaryIp")]
        public Input<string>? PrimaryIp { get; set; }

        /// <summary>
        /// (Updatable) The assets SCSI controller.
        /// </summary>
        [Input("scsiController")]
        public Input<Inputs.AssetComputeScsiControllerGetArgs>? ScsiController { get; set; }

        /// <summary>
        /// (Updatable) Provision storage size in MBs.
        /// </summary>
        [Input("storageProvisionedInMbs")]
        public Input<string>? StorageProvisionedInMbs { get; set; }

        /// <summary>
        /// (Updatable) Number of threads per core.
        /// </summary>
        [Input("threadsPerCoreCount")]
        public Input<int>? ThreadsPerCoreCount { get; set; }

        public AssetComputeGetArgs()
        {
        }
        public static new AssetComputeGetArgs Empty => new AssetComputeGetArgs();
    }
}
