// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard
{
    public static class GetAdhocQueries
    {
        /// <summary>
        /// This data source provides the list of Adhoc Queries in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of all adhoc queries (AdhocQuery resources) for a compartment
        /// identified by compartmentId. List is returned in a AdhocQueryCollection resource
        /// with page of AdhocQuerySummary resources.
        /// 
        /// The ListAdhocQueries operation returns only the adhoc queries in 'compartmentId' passed.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAdhocQueries on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAdhocQueries = Oci.CloudGuard.GetAdhocQueries.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = adhocQueryAccessLevel,
        ///         AdhocQueryStatus = adhocQueryAdhocQueryStatus,
        ///         CompartmentIdInSubtree = adhocQueryCompartmentIdInSubtree,
        ///         TimeEndedFilterQueryParam = adhocQueryTimeEndedFilterQueryParam,
        ///         TimeStartedFilterQueryParam = adhocQueryTimeStartedFilterQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAdhocQueriesResult> InvokeAsync(GetAdhocQueriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAdhocQueriesResult>("oci:CloudGuard/getAdhocQueries:getAdhocQueries", args ?? new GetAdhocQueriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Adhoc Queries in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of all adhoc queries (AdhocQuery resources) for a compartment
        /// identified by compartmentId. List is returned in a AdhocQueryCollection resource
        /// with page of AdhocQuerySummary resources.
        /// 
        /// The ListAdhocQueries operation returns only the adhoc queries in 'compartmentId' passed.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAdhocQueries on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAdhocQueries = Oci.CloudGuard.GetAdhocQueries.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = adhocQueryAccessLevel,
        ///         AdhocQueryStatus = adhocQueryAdhocQueryStatus,
        ///         CompartmentIdInSubtree = adhocQueryCompartmentIdInSubtree,
        ///         TimeEndedFilterQueryParam = adhocQueryTimeEndedFilterQueryParam,
        ///         TimeStartedFilterQueryParam = adhocQueryTimeStartedFilterQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAdhocQueriesResult> Invoke(GetAdhocQueriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdhocQueriesResult>("oci:CloudGuard/getAdhocQueries:getAdhocQueries", args ?? new GetAdhocQueriesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Adhoc Queries in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of all adhoc queries (AdhocQuery resources) for a compartment
        /// identified by compartmentId. List is returned in a AdhocQueryCollection resource
        /// with page of AdhocQuerySummary resources.
        /// 
        /// The ListAdhocQueries operation returns only the adhoc queries in 'compartmentId' passed.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAdhocQueries on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAdhocQueries = Oci.CloudGuard.GetAdhocQueries.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = adhocQueryAccessLevel,
        ///         AdhocQueryStatus = adhocQueryAdhocQueryStatus,
        ///         CompartmentIdInSubtree = adhocQueryCompartmentIdInSubtree,
        ///         TimeEndedFilterQueryParam = adhocQueryTimeEndedFilterQueryParam,
        ///         TimeStartedFilterQueryParam = adhocQueryTimeStartedFilterQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAdhocQueriesResult> Invoke(GetAdhocQueriesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdhocQueriesResult>("oci:CloudGuard/getAdhocQueries:getAdhocQueries", args ?? new GetAdhocQueriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAdhocQueriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// The status of the adhoc query created. Default value for state is provisioning. If no value is specified state is provisioning.
        /// </summary>
        [Input("adhocQueryStatus")]
        public string? AdhocQueryStatus { get; set; }

        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetAdhocQueriesFilterArgs>? _filters;
        public List<Inputs.GetAdhocQueriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAdhocQueriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// End time for a filter. If end time is not specified, end time will be set to current time.
        /// </summary>
        [Input("timeEndedFilterQueryParam")]
        public string? TimeEndedFilterQueryParam { get; set; }

        /// <summary>
        /// Start time for a filter. If start time is not specified, start time will be set to current time - 30 days.
        /// </summary>
        [Input("timeStartedFilterQueryParam")]
        public string? TimeStartedFilterQueryParam { get; set; }

        public GetAdhocQueriesArgs()
        {
        }
        public static new GetAdhocQueriesArgs Empty => new GetAdhocQueriesArgs();
    }

    public sealed class GetAdhocQueriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// The status of the adhoc query created. Default value for state is provisioning. If no value is specified state is provisioning.
        /// </summary>
        [Input("adhocQueryStatus")]
        public Input<string>? AdhocQueryStatus { get; set; }

        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAdhocQueriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAdhocQueriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAdhocQueriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// End time for a filter. If end time is not specified, end time will be set to current time.
        /// </summary>
        [Input("timeEndedFilterQueryParam")]
        public Input<string>? TimeEndedFilterQueryParam { get; set; }

        /// <summary>
        /// Start time for a filter. If start time is not specified, start time will be set to current time - 30 days.
        /// </summary>
        [Input("timeStartedFilterQueryParam")]
        public Input<string>? TimeStartedFilterQueryParam { get; set; }

        public GetAdhocQueriesInvokeArgs()
        {
        }
        public static new GetAdhocQueriesInvokeArgs Empty => new GetAdhocQueriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAdhocQueriesResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of adhoc_query_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAdhocQueriesAdhocQueryCollectionResult> AdhocQueryCollections;
        public readonly string? AdhocQueryStatus;
        /// <summary>
        /// Compartment OCID of the adhoc query
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetAdhocQueriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? TimeEndedFilterQueryParam;
        public readonly string? TimeStartedFilterQueryParam;

        [OutputConstructor]
        private GetAdhocQueriesResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetAdhocQueriesAdhocQueryCollectionResult> adhocQueryCollections,

            string? adhocQueryStatus,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetAdhocQueriesFilterResult> filters,

            string id,

            string? timeEndedFilterQueryParam,

            string? timeStartedFilterQueryParam)
        {
            AccessLevel = accessLevel;
            AdhocQueryCollections = adhocQueryCollections;
            AdhocQueryStatus = adhocQueryStatus;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            TimeEndedFilterQueryParam = timeEndedFilterQueryParam;
            TimeStartedFilterQueryParam = timeStartedFilterQueryParam;
        }
    }
}
