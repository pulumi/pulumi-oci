// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard
{
    public static class GetDataSourceEvents
    {
        /// <summary>
        /// This data source provides the list of Data Source Events in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of events from CloudGuard DataSource
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDataSourceEvents = Oci.CloudGuard.GetDataSourceEvents.Invoke(new()
        ///     {
        ///         DataSourceId = oci_cloud_guard_data_source.Test_data_source.Id,
        ///         Region = @var.Data_source_event_region,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDataSourceEventsResult> InvokeAsync(GetDataSourceEventsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataSourceEventsResult>("oci:CloudGuard/getDataSourceEvents:getDataSourceEvents", args ?? new GetDataSourceEventsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Data Source Events in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of events from CloudGuard DataSource
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDataSourceEvents = Oci.CloudGuard.GetDataSourceEvents.Invoke(new()
        ///     {
        ///         DataSourceId = oci_cloud_guard_data_source.Test_data_source.Id,
        ///         Region = @var.Data_source_event_region,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDataSourceEventsResult> Invoke(GetDataSourceEventsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataSourceEventsResult>("oci:CloudGuard/getDataSourceEvents:getDataSourceEvents", args ?? new GetDataSourceEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataSourceEventsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DataSource OCID
        /// </summary>
        [Input("dataSourceId", required: true)]
        public string DataSourceId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDataSourceEventsFilterArgs>? _filters;
        public List<Inputs.GetDataSourceEventsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDataSourceEventsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resource their region matches the given region.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetDataSourceEventsArgs()
        {
        }
        public static new GetDataSourceEventsArgs Empty => new GetDataSourceEventsArgs();
    }

    public sealed class GetDataSourceEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DataSource OCID
        /// </summary>
        [Input("dataSourceId", required: true)]
        public Input<string> DataSourceId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDataSourceEventsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDataSourceEventsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDataSourceEventsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resource their region matches the given region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetDataSourceEventsInvokeArgs()
        {
        }
        public static new GetDataSourceEventsInvokeArgs Empty => new GetDataSourceEventsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataSourceEventsResult
    {
        /// <summary>
        /// The list of data_source_event_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataSourceEventsDataSourceEventCollectionResult> DataSourceEventCollections;
        /// <summary>
        /// Attached data Source
        /// </summary>
        public readonly string DataSourceId;
        public readonly ImmutableArray<Outputs.GetDataSourceEventsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Data source event region
        /// </summary>
        public readonly string? Region;

        [OutputConstructor]
        private GetDataSourceEventsResult(
            ImmutableArray<Outputs.GetDataSourceEventsDataSourceEventCollectionResult> dataSourceEventCollections,

            string dataSourceId,

            ImmutableArray<Outputs.GetDataSourceEventsFilterResult> filters,

            string id,

            string? region)
        {
            DataSourceEventCollections = dataSourceEventCollections;
            DataSourceId = dataSourceId;
            Filters = filters;
            Id = id;
            Region = region;
        }
    }
}
