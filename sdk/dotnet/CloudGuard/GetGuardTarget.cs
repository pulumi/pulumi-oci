// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard
{
    public static class GetGuardTarget
    {
        /// <summary>
        /// This data source provides details about a specific Target resource in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a Target identified by targetId
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testTarget = Output.Create(Oci.CloudGuard.GetGuardTarget.InvokeAsync(new Oci.CloudGuard.GetGuardTargetArgs
        ///         {
        ///             TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGuardTargetResult> InvokeAsync(GetGuardTargetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGuardTargetResult>("oci:CloudGuard/getGuardTarget:getGuardTarget", args ?? new GetGuardTargetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Target resource in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a Target identified by targetId
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testTarget = Output.Create(Oci.CloudGuard.GetGuardTarget.InvokeAsync(new Oci.CloudGuard.GetGuardTargetArgs
        ///         {
        ///             TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGuardTargetResult> Invoke(GetGuardTargetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGuardTargetResult>("oci:CloudGuard/getGuardTarget:getGuardTarget", args ?? new GetGuardTargetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGuardTargetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCID of target
        /// </summary>
        [Input("targetId", required: true)]
        public string TargetId { get; set; } = null!;

        public GetGuardTargetArgs()
        {
        }
    }

    public sealed class GetGuardTargetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCID of target
        /// </summary>
        [Input("targetId", required: true)]
        public Input<string> TargetId { get; set; } = null!;

        public GetGuardTargetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGuardTargetResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// ResponderRule Description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ResponderRule Display Name
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier of TargetResponderRecipe that is immutable on creation
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of inherited compartments
        /// </summary>
        public readonly ImmutableArray<string> InheritedByCompartments;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecyleDetails;
        /// <summary>
        /// Total number of recipes attached to target
        /// </summary>
        public readonly int RecipeCount;
        /// <summary>
        /// The current state of the ResponderRule.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// List of detector recipes associated with target
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGuardTargetTargetDetectorRecipeResult> TargetDetectorRecipes;
        public readonly string TargetId;
        /// <summary>
        /// Resource ID which the target uses to monitor
        /// </summary>
        public readonly string TargetResourceId;
        /// <summary>
        /// possible type of targets
        /// </summary>
        public readonly string TargetResourceType;
        /// <summary>
        /// List of responder recipes associated with target
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGuardTargetTargetResponderRecipeResult> TargetResponderRecipes;
        /// <summary>
        /// The date and time the target was created. Format defined by RFC3339.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the target was updated. Format defined by RFC3339.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetGuardTargetResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            ImmutableArray<string> inheritedByCompartments,

            string lifecyleDetails,

            int recipeCount,

            string state,

            ImmutableDictionary<string, object> systemTags,

            ImmutableArray<Outputs.GetGuardTargetTargetDetectorRecipeResult> targetDetectorRecipes,

            string targetId,

            string targetResourceId,

            string targetResourceType,

            ImmutableArray<Outputs.GetGuardTargetTargetResponderRecipeResult> targetResponderRecipes,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            InheritedByCompartments = inheritedByCompartments;
            LifecyleDetails = lifecyleDetails;
            RecipeCount = recipeCount;
            State = state;
            SystemTags = systemTags;
            TargetDetectorRecipes = targetDetectorRecipes;
            TargetId = targetId;
            TargetResourceId = targetResourceId;
            TargetResourceType = targetResourceType;
            TargetResponderRecipes = targetResponderRecipes;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
