// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard
{
    public static class GetProblemEntities
    {
        /// <summary>
        /// This data source provides the list of Problem Entities in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of entities for a CloudGuard Problem
        /// Returns a list of entities for a problem.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProblemEntities = Oci.CloudGuard.GetProblemEntities.Invoke(new()
        ///     {
        ///         ProblemId = testProblem.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProblemEntitiesResult> InvokeAsync(GetProblemEntitiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProblemEntitiesResult>("oci:CloudGuard/getProblemEntities:getProblemEntities", args ?? new GetProblemEntitiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Problem Entities in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of entities for a CloudGuard Problem
        /// Returns a list of entities for a problem.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProblemEntities = Oci.CloudGuard.GetProblemEntities.Invoke(new()
        ///     {
        ///         ProblemId = testProblem.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProblemEntitiesResult> Invoke(GetProblemEntitiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProblemEntitiesResult>("oci:CloudGuard/getProblemEntities:getProblemEntities", args ?? new GetProblemEntitiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Problem Entities in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of entities for a CloudGuard Problem
        /// Returns a list of entities for a problem.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProblemEntities = Oci.CloudGuard.GetProblemEntities.Invoke(new()
        ///     {
        ///         ProblemId = testProblem.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProblemEntitiesResult> Invoke(GetProblemEntitiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProblemEntitiesResult>("oci:CloudGuard/getProblemEntities:getProblemEntities", args ?? new GetProblemEntitiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProblemEntitiesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetProblemEntitiesFilterArgs>? _filters;
        public List<Inputs.GetProblemEntitiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProblemEntitiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// OCID of the problem.
        /// </summary>
        [Input("problemId", required: true)]
        public string ProblemId { get; set; } = null!;

        public GetProblemEntitiesArgs()
        {
        }
        public static new GetProblemEntitiesArgs Empty => new GetProblemEntitiesArgs();
    }

    public sealed class GetProblemEntitiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetProblemEntitiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetProblemEntitiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProblemEntitiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// OCID of the problem.
        /// </summary>
        [Input("problemId", required: true)]
        public Input<string> ProblemId { get; set; } = null!;

        public GetProblemEntitiesInvokeArgs()
        {
        }
        public static new GetProblemEntitiesInvokeArgs Empty => new GetProblemEntitiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProblemEntitiesResult
    {
        public readonly ImmutableArray<Outputs.GetProblemEntitiesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of problem_entity_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProblemEntitiesProblemEntityCollectionResult> ProblemEntityCollections;
        /// <summary>
        /// Attached problem ID
        /// </summary>
        public readonly string ProblemId;

        [OutputConstructor]
        private GetProblemEntitiesResult(
            ImmutableArray<Outputs.GetProblemEntitiesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetProblemEntitiesProblemEntityCollectionResult> problemEntityCollections,

            string problemId)
        {
            Filters = filters;
            Id = id;
            ProblemEntityCollections = problemEntityCollections;
            ProblemId = problemId;
        }
    }
}
