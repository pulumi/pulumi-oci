// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard
{
    public static class GetProblemEntity
    {
        /// <summary>
        /// This data source provides details about a specific Problem Entity resource in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of entities for a CloudGuard Problem
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProblemEntity = Oci.CloudGuard.GetProblemEntity.Invoke(new()
        ///     {
        ///         ProblemId = oci_cloud_guard_problem.Test_problem.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProblemEntityResult> InvokeAsync(GetProblemEntityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProblemEntityResult>("oci:CloudGuard/getProblemEntity:getProblemEntity", args ?? new GetProblemEntityArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Problem Entity resource in Oracle Cloud Infrastructure Cloud Guard service.
        /// 
        /// Returns a list of entities for a CloudGuard Problem
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProblemEntity = Oci.CloudGuard.GetProblemEntity.Invoke(new()
        ///     {
        ///         ProblemId = oci_cloud_guard_problem.Test_problem.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProblemEntityResult> Invoke(GetProblemEntityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProblemEntityResult>("oci:CloudGuard/getProblemEntity:getProblemEntity", args ?? new GetProblemEntityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProblemEntityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCId of the problem.
        /// </summary>
        [Input("problemId", required: true)]
        public string ProblemId { get; set; } = null!;

        public GetProblemEntityArgs()
        {
        }
        public static new GetProblemEntityArgs Empty => new GetProblemEntityArgs();
    }

    public sealed class GetProblemEntityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCId of the problem.
        /// </summary>
        [Input("problemId", required: true)]
        public Input<string> ProblemId { get; set; } = null!;

        public GetProblemEntityInvokeArgs()
        {
        }
        public static new GetProblemEntityInvokeArgs Empty => new GetProblemEntityInvokeArgs();
    }


    [OutputType]
    public sealed class GetProblemEntityResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of problem entities summaries related to a data source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProblemEntityItemResult> Items;
        /// <summary>
        /// Attached problem id
        /// </summary>
        public readonly string ProblemId;

        [OutputConstructor]
        private GetProblemEntityResult(
            string id,

            ImmutableArray<Outputs.GetProblemEntityItemResult> items,

            string problemId)
        {
            Id = id;
            Items = items;
            ProblemId = problemId;
        }
    }
}
