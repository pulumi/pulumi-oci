// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudGuard.Outputs
{

    [OutputType]
    public sealed class GetDataSourceDataSourceDetailResult
    {
        /// <summary>
        /// The additional entities count used for data source query.
        /// </summary>
        public readonly int AdditionalEntitiesCount;
        /// <summary>
        /// Possible type of dataSourceFeed Provider(LoggingQuery)
        /// </summary>
        public readonly string DataSourceFeedProvider;
        /// <summary>
        /// Interval in minutes that query is run periodically.
        /// </summary>
        public readonly int IntervalInMinutes;
        /// <summary>
        /// Additional details specific to the data source type (Sighting/Insight).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataSourceDataSourceDetailLoggingQueryDetailResult> LoggingQueryDetails;
        /// <summary>
        /// Logging query type for data source (Sighting/Insight)
        /// </summary>
        public readonly string LoggingQueryType;
        /// <summary>
        /// Operator used in Data Soruce
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// The continuous query expression that is run periodically.
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// Time when the query can start, if not specified it can start immediately.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataSourceDataSourceDetailQueryStartTimeResult> QueryStartTimes;
        /// <summary>
        /// Logging Query regions
        /// </summary>
        public readonly ImmutableArray<string> Regions;
        /// <summary>
        /// The integer value that must be exceeded, fall below or equal to (depending on the operator), the query result to trigger an event.
        /// </summary>
        public readonly int Threshold;

        [OutputConstructor]
        private GetDataSourceDataSourceDetailResult(
            int additionalEntitiesCount,

            string dataSourceFeedProvider,

            int intervalInMinutes,

            ImmutableArray<Outputs.GetDataSourceDataSourceDetailLoggingQueryDetailResult> loggingQueryDetails,

            string loggingQueryType,

            string @operator,

            string query,

            ImmutableArray<Outputs.GetDataSourceDataSourceDetailQueryStartTimeResult> queryStartTimes,

            ImmutableArray<string> regions,

            int threshold)
        {
            AdditionalEntitiesCount = additionalEntitiesCount;
            DataSourceFeedProvider = dataSourceFeedProvider;
            IntervalInMinutes = intervalInMinutes;
            LoggingQueryDetails = loggingQueryDetails;
            LoggingQueryType = loggingQueryType;
            Operator = @operator;
            Query = query;
            QueryStartTimes = queryStartTimes;
            Regions = regions;
            Threshold = threshold;
        }
    }
}
