// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.CloudMigrations
{
    public static class GetTargetAsset
    {
        /// <summary>
        /// This data source provides details about a specific Target Asset resource in Oracle Cloud Infrastructure Cloud Migrations service.
        /// 
        /// Gets a target asset by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetAsset = Oci.CloudMigrations.GetTargetAsset.Invoke(new()
        ///     {
        ///         TargetAssetId = oci_cloud_migrations_target_asset.Test_target_asset.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTargetAssetResult> InvokeAsync(GetTargetAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTargetAssetResult>("oci:CloudMigrations/getTargetAsset:getTargetAsset", args ?? new GetTargetAssetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Target Asset resource in Oracle Cloud Infrastructure Cloud Migrations service.
        /// 
        /// Gets a target asset by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetAsset = Oci.CloudMigrations.GetTargetAsset.Invoke(new()
        ///     {
        ///         TargetAssetId = oci_cloud_migrations_target_asset.Test_target_asset.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTargetAssetResult> Invoke(GetTargetAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTargetAssetResult>("oci:CloudMigrations/getTargetAsset:getTargetAsset", args ?? new GetTargetAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTargetAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique target asset identifier
        /// </summary>
        [Input("targetAssetId", required: true)]
        public string TargetAssetId { get; set; } = null!;

        public GetTargetAssetArgs()
        {
        }
        public static new GetTargetAssetArgs Empty => new GetTargetAssetArgs();
    }

    public sealed class GetTargetAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique target asset identifier
        /// </summary>
        [Input("targetAssetId", required: true)]
        public Input<string> TargetAssetId { get; set; } = null!;

        public GetTargetAssetInvokeArgs()
        {
        }
        public static new GetTargetAssetInvokeArgs Empty => new GetTargetAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetTargetAssetResult
    {
        /// <summary>
        /// Performance of the block volumes.
        /// </summary>
        public readonly int BlockVolumesPerformance;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Messages about the compatibility issues.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetCompatibilityMessageResult> CompatibilityMessages;
        /// <summary>
        /// Created resource identifier
        /// </summary>
        public readonly string CreatedResourceId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Cost estimation description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetEstimatedCostResult> EstimatedCosts;
        /// <summary>
        /// Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A boolean indicating whether the asset should be migrated.
        /// </summary>
        public readonly bool IsExcludedFromExecution;
        /// <summary>
        /// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Description of the migration asset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetMigrationAssetResult> MigrationAssets;
        /// <summary>
        /// OCID of the associated migration plan.
        /// </summary>
        public readonly string MigrationPlanId;
        /// <summary>
        /// Microsoft license for VM configuration.
        /// </summary>
        public readonly string MsLicense;
        /// <summary>
        /// Preferred VM shape type that you provide.
        /// </summary>
        public readonly string PreferredShapeType;
        /// <summary>
        /// Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetRecommendedSpecResult> RecommendedSpecs;
        /// <summary>
        /// The current state of the target asset.
        /// </summary>
        public readonly string State;
        public readonly string TargetAssetId;
        /// <summary>
        /// Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetTestSpecResult> TestSpecs;
        /// <summary>
        /// The time when the assessment was done. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeAssessed;
        /// <summary>
        /// The time when the target asset was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the target asset was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The type of action to run when the instance is interrupted for eviction.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Instance launch details. Use the `sourceDetails` parameter to specify whether a boot volume or an image should be used to launch a new instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetAssetUserSpecResult> UserSpecs;

        [OutputConstructor]
        private GetTargetAssetResult(
            int blockVolumesPerformance,

            string compartmentId,

            ImmutableArray<Outputs.GetTargetAssetCompatibilityMessageResult> compatibilityMessages,

            string createdResourceId,

            string displayName,

            ImmutableArray<Outputs.GetTargetAssetEstimatedCostResult> estimatedCosts,

            string id,

            bool isExcludedFromExecution,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetTargetAssetMigrationAssetResult> migrationAssets,

            string migrationPlanId,

            string msLicense,

            string preferredShapeType,

            ImmutableArray<Outputs.GetTargetAssetRecommendedSpecResult> recommendedSpecs,

            string state,

            string targetAssetId,

            ImmutableArray<Outputs.GetTargetAssetTestSpecResult> testSpecs,

            string timeAssessed,

            string timeCreated,

            string timeUpdated,

            string type,

            ImmutableArray<Outputs.GetTargetAssetUserSpecResult> userSpecs)
        {
            BlockVolumesPerformance = blockVolumesPerformance;
            CompartmentId = compartmentId;
            CompatibilityMessages = compatibilityMessages;
            CreatedResourceId = createdResourceId;
            DisplayName = displayName;
            EstimatedCosts = estimatedCosts;
            Id = id;
            IsExcludedFromExecution = isExcludedFromExecution;
            LifecycleDetails = lifecycleDetails;
            MigrationAssets = migrationAssets;
            MigrationPlanId = migrationPlanId;
            MsLicense = msLicense;
            PreferredShapeType = preferredShapeType;
            RecommendedSpecs = recommendedSpecs;
            State = state;
            TargetAssetId = targetAssetId;
            TestSpecs = testSpecs;
            TimeAssessed = timeAssessed;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Type = type;
            UserSpecs = userSpecs;
        }
    }
}
