// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ComputeCloud.Inputs
{

    public sealed class AtCustomerCccInfrastructureInfrastructureNetworkConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("dnsIps")]
        private InputList<string>? _dnsIps;

        /// <summary>
        /// The domain name system (DNS) addresses that the Compute Cloud@Customer infrastructure uses for the data center network.
        /// </summary>
        public InputList<string> DnsIps
        {
            get => _dnsIps ?? (_dnsIps = new InputList<string>());
            set => _dnsIps = value;
        }

        [Input("infrastructureRoutingDynamics")]
        private InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicArgs>? _infrastructureRoutingDynamics;

        /// <summary>
        /// Dynamic routing information for the Compute Cloud@Customer infrastructure.
        /// </summary>
        public InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicArgs> InfrastructureRoutingDynamics
        {
            get => _infrastructureRoutingDynamics ?? (_infrastructureRoutingDynamics = new InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingDynamicArgs>());
            set => _infrastructureRoutingDynamics = value;
        }

        [Input("infrastructureRoutingStatics")]
        private InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticArgs>? _infrastructureRoutingStatics;

        /// <summary>
        /// Static routing information for a rack.
        /// </summary>
        public InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticArgs> InfrastructureRoutingStatics
        {
            get => _infrastructureRoutingStatics ?? (_infrastructureRoutingStatics = new InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationInfrastructureRoutingStaticArgs>());
            set => _infrastructureRoutingStatics = value;
        }

        [Input("managementNodes")]
        private InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeArgs>? _managementNodes;

        /// <summary>
        /// Information about the management nodes that are provisioned in the Compute Cloud@Customer infrastructure.
        /// </summary>
        public InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeArgs> ManagementNodes
        {
            get => _managementNodes ?? (_managementNodes = new InputList<Inputs.AtCustomerCccInfrastructureInfrastructureNetworkConfigurationManagementNodeArgs>());
            set => _managementNodes = value;
        }

        /// <summary>
        /// The hostname corresponding to the virtual IP (VIP) address of the management nodes.
        /// </summary>
        [Input("mgmtVipHostname")]
        public Input<string>? MgmtVipHostname { get; set; }

        /// <summary>
        /// The IP address used as the virtual IP (VIP) address of the management nodes.
        /// </summary>
        [Input("mgmtVipIp")]
        public Input<string>? MgmtVipIp { get; set; }

        [Input("spineIps")]
        private InputList<string>? _spineIps;

        /// <summary>
        /// Addresses of the network spine switches.
        /// </summary>
        public InputList<string> SpineIps
        {
            get => _spineIps ?? (_spineIps = new InputList<string>());
            set => _spineIps = value;
        }

        /// <summary>
        /// The spine switch public virtual IP (VIP). Traffic routed to the Compute Cloud@Customer infrastructure and  and virtual cloud networks (VCNs) should have this address as next hop.
        /// </summary>
        [Input("spineVip")]
        public Input<string>? SpineVip { get; set; }

        /// <summary>
        /// Domain name to be used as the base domain for the internal network and by  public facing services.
        /// </summary>
        [Input("uplinkDomain")]
        public Input<string>? UplinkDomain { get; set; }

        /// <summary>
        /// Uplink gateway in the datacenter network that the Compute Cloud@Customer connects to.
        /// </summary>
        [Input("uplinkGatewayIp")]
        public Input<string>? UplinkGatewayIp { get; set; }

        /// <summary>
        /// Netmask of the subnet that the Compute Cloud@Customer infrastructure is connected to.
        /// </summary>
        [Input("uplinkNetmask")]
        public Input<string>? UplinkNetmask { get; set; }

        /// <summary>
        /// Number of uplink ports per spine switch. Connectivity is identical on both spine switches. For example, if input is two 100 gigabyte ports; then port-1 and port-2 on both spines will be configured.
        /// </summary>
        [Input("uplinkPortCount")]
        public Input<int>? UplinkPortCount { get; set; }

        /// <summary>
        /// The port forward error correction (FEC) setting for the uplink port on the Compute Cloud@Customer infrastructure.
        /// </summary>
        [Input("uplinkPortForwardErrorCorrection")]
        public Input<string>? UplinkPortForwardErrorCorrection { get; set; }

        /// <summary>
        /// Uplink port speed defined in gigabytes per second. All uplink ports must have identical speed.
        /// </summary>
        [Input("uplinkPortSpeedInGbps")]
        public Input<int>? UplinkPortSpeedInGbps { get; set; }

        /// <summary>
        /// The virtual local area network (VLAN) maximum transmission unit (MTU) size for the uplink ports.
        /// </summary>
        [Input("uplinkVlanMtu")]
        public Input<int>? UplinkVlanMtu { get; set; }

        public AtCustomerCccInfrastructureInfrastructureNetworkConfigurationArgs()
        {
        }
        public static new AtCustomerCccInfrastructureInfrastructureNetworkConfigurationArgs Empty => new AtCustomerCccInfrastructureInfrastructureNetworkConfigurationArgs();
    }
}
