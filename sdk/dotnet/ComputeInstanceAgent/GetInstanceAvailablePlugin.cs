// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ComputeInstanceAgent
{
    public static class GetInstanceAvailablePlugin
    {
        /// <summary>
        /// This data source provides the list of Instance Available Plugins in Oracle Cloud Infrastructure Compute Instance Agent service.
        /// 
        /// The API to get the list of plugins that are available.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testInstanceAvailablePlugins = Oci.ComputeInstanceAgent.GetInstanceAvailablePlugin.Invoke(new()
        ///     {
        ///         OsName = @var.Instance_available_plugin_os_name,
        ///         OsVersion = @var.Instance_available_plugin_os_version,
        ///         Name = @var.Instance_available_plugin_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceAvailablePluginResult> InvokeAsync(GetInstanceAvailablePluginArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceAvailablePluginResult>("oci:ComputeInstanceAgent/getInstanceAvailablePlugin:getInstanceAvailablePlugin", args ?? new GetInstanceAvailablePluginArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Instance Available Plugins in Oracle Cloud Infrastructure Compute Instance Agent service.
        /// 
        /// The API to get the list of plugins that are available.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testInstanceAvailablePlugins = Oci.ComputeInstanceAgent.GetInstanceAvailablePlugin.Invoke(new()
        ///     {
        ///         OsName = @var.Instance_available_plugin_os_name,
        ///         OsVersion = @var.Instance_available_plugin_os_version,
        ///         Name = @var.Instance_available_plugin_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInstanceAvailablePluginResult> Invoke(GetInstanceAvailablePluginInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceAvailablePluginResult>("oci:ComputeInstanceAgent/getInstanceAvailablePlugin:getInstanceAvailablePlugin", args ?? new GetInstanceAvailablePluginInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceAvailablePluginArgs : global::Pulumi.InvokeArgs
    {
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetInstanceAvailablePluginFilterArgs>? _filters;
        public List<Inputs.GetInstanceAvailablePluginFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInstanceAvailablePluginFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The plugin name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The OS for which the plugin is supported. Examples of OperatingSystemQueryParam:OperatingSystemVersionQueryParam are as follows: 'CentOS' '6.10' , 'CentOS Linux' '7', 'CentOS Linux' '8', 'Oracle Linux Server' '6.10', 'Oracle Linux Server' '8.0', 'Red Hat Enterprise Linux Server' '7.8', 'Windows' '10', 'Windows' '2008ServerR2', 'Windows' '2012ServerR2', 'Windows' '7', 'Windows' '8.1'
        /// </summary>
        [Input("osName", required: true)]
        public string OsName { get; set; } = null!;

        /// <summary>
        /// The OS version for which the plugin is supported.
        /// </summary>
        [Input("osVersion", required: true)]
        public string OsVersion { get; set; } = null!;

        public GetInstanceAvailablePluginArgs()
        {
        }
        public static new GetInstanceAvailablePluginArgs Empty => new GetInstanceAvailablePluginArgs();
    }

    public sealed class GetInstanceAvailablePluginInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetInstanceAvailablePluginFilterInputArgs>? _filters;
        public InputList<Inputs.GetInstanceAvailablePluginFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInstanceAvailablePluginFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The plugin name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The OS for which the plugin is supported. Examples of OperatingSystemQueryParam:OperatingSystemVersionQueryParam are as follows: 'CentOS' '6.10' , 'CentOS Linux' '7', 'CentOS Linux' '8', 'Oracle Linux Server' '6.10', 'Oracle Linux Server' '8.0', 'Red Hat Enterprise Linux Server' '7.8', 'Windows' '10', 'Windows' '2008ServerR2', 'Windows' '2012ServerR2', 'Windows' '7', 'Windows' '8.1'
        /// </summary>
        [Input("osName", required: true)]
        public Input<string> OsName { get; set; } = null!;

        /// <summary>
        /// The OS version for which the plugin is supported.
        /// </summary>
        [Input("osVersion", required: true)]
        public Input<string> OsVersion { get; set; } = null!;

        public GetInstanceAvailablePluginInvokeArgs()
        {
        }
        public static new GetInstanceAvailablePluginInvokeArgs Empty => new GetInstanceAvailablePluginInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceAvailablePluginResult
    {
        /// <summary>
        /// The list of available_plugins.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceAvailablePluginAvailablePluginResult> AvailablePlugins;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetInstanceAvailablePluginFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The plugin name
        /// </summary>
        public readonly string? Name;
        public readonly string OsName;
        public readonly string OsVersion;

        [OutputConstructor]
        private GetInstanceAvailablePluginResult(
            ImmutableArray<Outputs.GetInstanceAvailablePluginAvailablePluginResult> availablePlugins,

            string compartmentId,

            ImmutableArray<Outputs.GetInstanceAvailablePluginFilterResult> filters,

            string id,

            string? name,

            string osName,

            string osVersion)
        {
            AvailablePlugins = availablePlugins;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            OsName = osName;
            OsVersion = osVersion;
        }
    }
}
