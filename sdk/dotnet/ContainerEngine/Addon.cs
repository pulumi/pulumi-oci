// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    /// <summary>
    /// This resource provides the Addon resource in Oracle Cloud Infrastructure Container Engine service.
    /// 
    /// Install the specified addon for a cluster.
    /// 
    /// ## Import
    /// 
    /// Addons can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:ContainerEngine/addon:Addon test_addon "clusters/{clusterId}/addons/{addonName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:ContainerEngine/addon:Addon")]
    public partial class Addon : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The error info of the addon.
        /// </summary>
        [Output("addonErrors")]
        public Output<ImmutableArray<Outputs.AddonAddonError>> AddonErrors { get; private set; } = null!;

        /// <summary>
        /// The name of the addon.
        /// </summary>
        [Output("addonName")]
        public Output<string> AddonName { get; private set; } = null!;

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Addon configuration details
        /// </summary>
        [Output("configurations")]
        public Output<ImmutableArray<Outputs.AddonConfiguration>> Configurations { get; private set; } = null!;

        /// <summary>
        /// current installed version of the addon
        /// </summary>
        [Output("currentInstalledVersion")]
        public Output<string> CurrentInstalledVersion { get; private set; } = null!;

        /// <summary>
        /// Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
        /// </summary>
        [Output("overrideExisting")]
        public Output<bool?> OverrideExisting { get; private set; } = null!;

        /// <summary>
        /// Whether to remove addon resource in deletion.
        /// </summary>
        [Output("removeAddonResourcesOnDelete")]
        public Output<bool> RemoveAddonResourcesOnDelete { get; private set; } = null!;

        /// <summary>
        /// The state of the addon.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time the cluster was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of addon to be installed.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Addon resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Addon(string name, AddonArgs args, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/addon:Addon", name, args ?? new AddonArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Addon(string name, Input<string> id, AddonState? state = null, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/addon:Addon", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Addon resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Addon Get(string name, Input<string> id, AddonState? state = null, CustomResourceOptions? options = null)
        {
            return new Addon(name, id, state, options);
        }
    }

    public sealed class AddonArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the addon.
        /// </summary>
        [Input("addonName", required: true)]
        public Input<string> AddonName { get; set; } = null!;

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("configurations")]
        private InputList<Inputs.AddonConfigurationArgs>? _configurations;

        /// <summary>
        /// (Updatable) Addon configuration details
        /// </summary>
        public InputList<Inputs.AddonConfigurationArgs> Configurations
        {
            get => _configurations ?? (_configurations = new InputList<Inputs.AddonConfigurationArgs>());
            set => _configurations = value;
        }

        /// <summary>
        /// Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
        /// </summary>
        [Input("overrideExisting")]
        public Input<bool>? OverrideExisting { get; set; }

        /// <summary>
        /// Whether to remove addon resource in deletion.
        /// </summary>
        [Input("removeAddonResourcesOnDelete", required: true)]
        public Input<bool> RemoveAddonResourcesOnDelete { get; set; } = null!;

        /// <summary>
        /// (Updatable) The version of addon to be installed.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public AddonArgs()
        {
        }
        public static new AddonArgs Empty => new AddonArgs();
    }

    public sealed class AddonState : global::Pulumi.ResourceArgs
    {
        [Input("addonErrors")]
        private InputList<Inputs.AddonAddonErrorGetArgs>? _addonErrors;

        /// <summary>
        /// The error info of the addon.
        /// </summary>
        public InputList<Inputs.AddonAddonErrorGetArgs> AddonErrors
        {
            get => _addonErrors ?? (_addonErrors = new InputList<Inputs.AddonAddonErrorGetArgs>());
            set => _addonErrors = value;
        }

        /// <summary>
        /// The name of the addon.
        /// </summary>
        [Input("addonName")]
        public Input<string>? AddonName { get; set; }

        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("configurations")]
        private InputList<Inputs.AddonConfigurationGetArgs>? _configurations;

        /// <summary>
        /// (Updatable) Addon configuration details
        /// </summary>
        public InputList<Inputs.AddonConfigurationGetArgs> Configurations
        {
            get => _configurations ?? (_configurations = new InputList<Inputs.AddonConfigurationGetArgs>());
            set => _configurations = value;
        }

        /// <summary>
        /// current installed version of the addon
        /// </summary>
        [Input("currentInstalledVersion")]
        public Input<string>? CurrentInstalledVersion { get; set; }

        /// <summary>
        /// Whether or not to override an existing addon installation. Defaults to false. If set to true, any existing addon installation would be overridden as per new installation details.
        /// </summary>
        [Input("overrideExisting")]
        public Input<bool>? OverrideExisting { get; set; }

        /// <summary>
        /// Whether to remove addon resource in deletion.
        /// </summary>
        [Input("removeAddonResourcesOnDelete")]
        public Input<bool>? RemoveAddonResourcesOnDelete { get; set; }

        /// <summary>
        /// The state of the addon.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time the cluster was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// (Updatable) The version of addon to be installed.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public AddonState()
        {
        }
        public static new AddonState Empty => new AddonState();
    }
}
