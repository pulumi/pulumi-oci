// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    /// <summary>
    /// This resource provides the Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
    /// 
    /// Creates a container instance and deploys the containers on it.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testContainerInstance = new Oci.ContainerEngine.ContainerInstance("test_container_instance", new()
    ///     {
    ///         AvailabilityDomain = containerInstanceAvailabilityDomain,
    ///         CompartmentId = compartmentId,
    ///         Containers = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.ContainerInstanceContainerArgs
    ///             {
    ///                 ImageUrl = containerInstanceContainersImageUrl,
    ///                 Arguments = containerInstanceContainersArguments,
    ///                 Commands = containerInstanceContainersCommand,
    ///                 DefinedTags = containerInstanceContainersDefinedTags,
    ///                 DisplayName = containerInstanceContainersDisplayName,
    ///                 EnvironmentVariables = containerInstanceContainersEnvironmentVariables,
    ///                 FreeformTags = containerInstanceContainersFreeformTags,
    ///                 HealthChecks = new[]
    ///                 {
    ///                     new Oci.ContainerEngine.Inputs.ContainerInstanceContainerHealthCheckArgs
    ///                     {
    ///                         HealthCheckType = containerInstanceContainersHealthChecksHealthCheckType,
    ///                         Commands = containerInstanceContainersHealthChecksCommand,
    ///                         FailureAction = containerInstanceContainersHealthChecksFailureAction,
    ///                         FailureThreshold = containerInstanceContainersHealthChecksFailureThreshold,
    ///                         Headers = new[]
    ///                         {
    ///                             new Oci.ContainerEngine.Inputs.ContainerInstanceContainerHealthCheckHeaderArgs
    ///                             {
    ///                                 Name = containerInstanceContainersHealthChecksHeadersName,
    ///                                 Value = containerInstanceContainersHealthChecksHeadersValue,
    ///                             },
    ///                         },
    ///                         InitialDelayInSeconds = containerInstanceContainersHealthChecksInitialDelayInSeconds,
    ///                         IntervalInSeconds = containerInstanceContainersHealthChecksIntervalInSeconds,
    ///                         Name = containerInstanceContainersHealthChecksName,
    ///                         Path = containerInstanceContainersHealthChecksPath,
    ///                         Port = containerInstanceContainersHealthChecksPort,
    ///                         SuccessThreshold = containerInstanceContainersHealthChecksSuccessThreshold,
    ///                         TimeoutInSeconds = containerInstanceContainersHealthChecksTimeoutInSeconds,
    ///                     },
    ///                 },
    ///                 IsResourcePrincipalDisabled = containerInstanceContainersIsResourcePrincipalDisabled,
    ///                 ResourceConfig = new Oci.ContainerEngine.Inputs.ContainerInstanceContainerResourceConfigArgs
    ///                 {
    ///                     MemoryLimitInGbs = containerInstanceContainersResourceConfigMemoryLimitInGbs,
    ///                     VcpusLimit = containerInstanceContainersResourceConfigVcpusLimit,
    ///                 },
    ///                 SecurityContext = new Oci.ContainerEngine.Inputs.ContainerInstanceContainerSecurityContextArgs
    ///                 {
    ///                     Capabilities = new Oci.ContainerEngine.Inputs.ContainerInstanceContainerSecurityContextCapabilitiesArgs
    ///                     {
    ///                         AddCapabilities = containerInstanceContainersSecurityContextCapabilitiesAddCapabilities,
    ///                         DropCapabilities = containerInstanceContainersSecurityContextCapabilitiesDropCapabilities,
    ///                     },
    ///                     IsNonRootUserCheckEnabled = containerInstanceContainersSecurityContextIsNonRootUserCheckEnabled,
    ///                     IsRootFileSystemReadonly = containerInstanceContainersSecurityContextIsRootFileSystemReadonly,
    ///                     RunAsGroup = containerInstanceContainersSecurityContextRunAsGroup,
    ///                     RunAsUser = containerInstanceContainersSecurityContextRunAsUser,
    ///                     SecurityContextType = containerInstanceContainersSecurityContextSecurityContextType,
    ///                 },
    ///                 VolumeMounts = new[]
    ///                 {
    ///                     new Oci.ContainerEngine.Inputs.ContainerInstanceContainerVolumeMountArgs
    ///                     {
    ///                         MountPath = containerInstanceContainersVolumeMountsMountPath,
    ///                         VolumeName = containerInstanceContainersVolumeMountsVolumeName,
    ///                         IsReadOnly = containerInstanceContainersVolumeMountsIsReadOnly,
    ///                         Partition = containerInstanceContainersVolumeMountsPartition,
    ///                         SubPath = containerInstanceContainersVolumeMountsSubPath,
    ///                     },
    ///                 },
    ///                 WorkingDirectory = containerInstanceContainersWorkingDirectory,
    ///             },
    ///         },
    ///         Shape = containerInstanceShape,
    ///         ShapeConfig = new Oci.ContainerEngine.Inputs.ContainerInstanceShapeConfigArgs
    ///         {
    ///             Ocpus = containerInstanceShapeConfigOcpus,
    ///             MemoryInGbs = containerInstanceShapeConfigMemoryInGbs,
    ///         },
    ///         Vnics = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.ContainerInstanceVnicArgs
    ///             {
    ///                 SubnetId = testSubnet.Id,
    ///                 DefinedTags = containerInstanceVnicsDefinedTags,
    ///                 DisplayName = containerInstanceVnicsDisplayName,
    ///                 FreeformTags = containerInstanceVnicsFreeformTags,
    ///                 HostnameLabel = containerInstanceVnicsHostnameLabel,
    ///                 IsPublicIpAssigned = containerInstanceVnicsIsPublicIpAssigned,
    ///                 NsgIds = containerInstanceVnicsNsgIds,
    ///                 PrivateIp = containerInstanceVnicsPrivateIp,
    ///                 SkipSourceDestCheck = containerInstanceVnicsSkipSourceDestCheck,
    ///             },
    ///         },
    ///         ContainerRestartPolicy = containerInstanceContainerRestartPolicy,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         DisplayName = containerInstanceDisplayName,
    ///         DnsConfig = new Oci.ContainerEngine.Inputs.ContainerInstanceDnsConfigArgs
    ///         {
    ///             Nameservers = containerInstanceDnsConfigNameservers,
    ///             Options = containerInstanceDnsConfigOptions,
    ///             Searches = containerInstanceDnsConfigSearches,
    ///         },
    ///         FaultDomain = containerInstanceFaultDomain,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         GracefulShutdownTimeoutInSeconds = containerInstanceGracefulShutdownTimeoutInSeconds,
    ///         ImagePullSecrets = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.ContainerInstanceImagePullSecretArgs
    ///             {
    ///                 RegistryEndpoint = containerInstanceImagePullSecretsRegistryEndpoint,
    ///                 SecretType = containerInstanceImagePullSecretsSecretType,
    ///                 Password = containerInstanceImagePullSecretsPassword,
    ///                 SecretId = testSecret.Id,
    ///                 Username = containerInstanceImagePullSecretsUsername,
    ///             },
    ///         },
    ///         Volumes = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.ContainerInstanceVolumeArgs
    ///             {
    ///                 Name = containerInstanceVolumesName,
    ///                 VolumeType = containerInstanceVolumesVolumeType,
    ///                 BackingStore = containerInstanceVolumesBackingStore,
    ///                 Configs = new[]
    ///                 {
    ///                     new Oci.ContainerEngine.Inputs.ContainerInstanceVolumeConfigArgs
    ///                     {
    ///                         Data = containerInstanceVolumesConfigsData,
    ///                         FileName = containerInstanceVolumesConfigsFileName,
    ///                         Path = containerInstanceVolumesConfigsPath,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// ContainerInstances can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:ContainerEngine/containerInstance:ContainerInstance test_container_instance "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:ContainerEngine/containerInstance:ContainerInstance")]
    public partial class ContainerInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The availability domain where the container instance runs.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The compartment OCID.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The number of containers on the container instance.
        /// </summary>
        [Output("containerCount")]
        public Output<int> ContainerCount { get; private set; } = null!;

        /// <summary>
        /// Container restart policy
        /// </summary>
        [Output("containerRestartPolicy")]
        public Output<string> ContainerRestartPolicy { get; private set; } = null!;

        /// <summary>
        /// The containers to create on this container instance.
        /// </summary>
        [Output("containers")]
        public Output<ImmutableArray<Outputs.ContainerInstanceContainer>> Containers { get; private set; } = null!;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
        /// </summary>
        [Output("dnsConfig")]
        public Output<Outputs.ContainerInstanceDnsConfig> DnsConfig { get; private set; } = null!;

        /// <summary>
        /// The fault domain where the container instance runs.
        /// </summary>
        [Output("faultDomain")]
        public Output<string> FaultDomain { get; private set; } = null!;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        /// </summary>
        [Output("gracefulShutdownTimeoutInSeconds")]
        public Output<string> GracefulShutdownTimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// The image pulls secrets so you can access private registry to pull container images.
        /// </summary>
        [Output("imagePullSecrets")]
        public Output<ImmutableArray<Outputs.ContainerInstanceImagePullSecret>> ImagePullSecrets { get; private set; } = null!;

        /// <summary>
        /// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The shape of the container instance. The shape determines the resources available to the container instance.
        /// </summary>
        [Output("shape")]
        public Output<string> Shape { get; private set; } = null!;

        /// <summary>
        /// The size and amount of resources available to the container instance.
        /// </summary>
        [Output("shapeConfig")]
        public Output<Outputs.ContainerInstanceShapeConfig> ShapeConfig { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The networks available to containers on this container instance.
        /// </summary>
        [Output("vnics")]
        public Output<ImmutableArray<Outputs.ContainerInstanceVnic>> Vnics { get; private set; } = null!;

        /// <summary>
        /// The number of volumes that are attached to the container instance.
        /// </summary>
        [Output("volumeCount")]
        public Output<int> VolumeCount { get; private set; } = null!;

        /// <summary>
        /// A volume is a directory with data that is accessible across multiple containers in a container instance.
        /// 
        /// You can attach up to 32 volumes to single container instance.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.ContainerInstanceVolume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerInstance(string name, ContainerInstanceArgs args, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/containerInstance:ContainerInstance", name, args ?? new ContainerInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerInstance(string name, Input<string> id, ContainerInstanceState? state = null, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/containerInstance:ContainerInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerInstance Get(string name, Input<string> id, ContainerInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerInstance(name, id, state, options);
        }
    }

    public sealed class ContainerInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The availability domain where the container instance runs.
        /// </summary>
        [Input("availabilityDomain", required: true)]
        public Input<string> AvailabilityDomain { get; set; } = null!;

        /// <summary>
        /// (Updatable) The compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Container restart policy
        /// </summary>
        [Input("containerRestartPolicy")]
        public Input<string>? ContainerRestartPolicy { get; set; }

        [Input("containers", required: true)]
        private InputList<Inputs.ContainerInstanceContainerArgs>? _containers;

        /// <summary>
        /// The containers to create on this container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ContainerInstanceContainerArgs>());
            set => _containers = value;
        }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
        /// </summary>
        [Input("dnsConfig")]
        public Input<Inputs.ContainerInstanceDnsConfigArgs>? DnsConfig { get; set; }

        /// <summary>
        /// The fault domain where the container instance runs.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        /// </summary>
        [Input("gracefulShutdownTimeoutInSeconds")]
        public Input<string>? GracefulShutdownTimeoutInSeconds { get; set; }

        [Input("imagePullSecrets")]
        private InputList<Inputs.ContainerInstanceImagePullSecretArgs>? _imagePullSecrets;

        /// <summary>
        /// The image pulls secrets so you can access private registry to pull container images.
        /// </summary>
        public InputList<Inputs.ContainerInstanceImagePullSecretArgs> ImagePullSecrets
        {
            get => _imagePullSecrets ?? (_imagePullSecrets = new InputList<Inputs.ContainerInstanceImagePullSecretArgs>());
            set => _imagePullSecrets = value;
        }

        /// <summary>
        /// The shape of the container instance. The shape determines the resources available to the container instance.
        /// </summary>
        [Input("shape", required: true)]
        public Input<string> Shape { get; set; } = null!;

        /// <summary>
        /// The size and amount of resources available to the container instance.
        /// </summary>
        [Input("shapeConfig", required: true)]
        public Input<Inputs.ContainerInstanceShapeConfigArgs> ShapeConfig { get; set; } = null!;

        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("vnics", required: true)]
        private InputList<Inputs.ContainerInstanceVnicArgs>? _vnics;

        /// <summary>
        /// The networks available to containers on this container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceVnicArgs> Vnics
        {
            get => _vnics ?? (_vnics = new InputList<Inputs.ContainerInstanceVnicArgs>());
            set => _vnics = value;
        }

        [Input("volumes")]
        private InputList<Inputs.ContainerInstanceVolumeArgs>? _volumes;

        /// <summary>
        /// A volume is a directory with data that is accessible across multiple containers in a container instance.
        /// 
        /// You can attach up to 32 volumes to single container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.ContainerInstanceVolumeArgs>());
            set => _volumes = value;
        }

        public ContainerInstanceArgs()
        {
        }
        public static new ContainerInstanceArgs Empty => new ContainerInstanceArgs();
    }

    public sealed class ContainerInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The availability domain where the container instance runs.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// (Updatable) The compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The number of containers on the container instance.
        /// </summary>
        [Input("containerCount")]
        public Input<int>? ContainerCount { get; set; }

        /// <summary>
        /// Container restart policy
        /// </summary>
        [Input("containerRestartPolicy")]
        public Input<string>? ContainerRestartPolicy { get; set; }

        [Input("containers")]
        private InputList<Inputs.ContainerInstanceContainerGetArgs>? _containers;

        /// <summary>
        /// The containers to create on this container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerGetArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ContainerInstanceContainerGetArgs>());
            set => _containers = value;
        }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
        /// </summary>
        [Input("dnsConfig")]
        public Input<Inputs.ContainerInstanceDnsConfigGetArgs>? DnsConfig { get; set; }

        /// <summary>
        /// The fault domain where the container instance runs.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        /// </summary>
        [Input("gracefulShutdownTimeoutInSeconds")]
        public Input<string>? GracefulShutdownTimeoutInSeconds { get; set; }

        [Input("imagePullSecrets")]
        private InputList<Inputs.ContainerInstanceImagePullSecretGetArgs>? _imagePullSecrets;

        /// <summary>
        /// The image pulls secrets so you can access private registry to pull container images.
        /// </summary>
        public InputList<Inputs.ContainerInstanceImagePullSecretGetArgs> ImagePullSecrets
        {
            get => _imagePullSecrets ?? (_imagePullSecrets = new InputList<Inputs.ContainerInstanceImagePullSecretGetArgs>());
            set => _imagePullSecrets = value;
        }

        /// <summary>
        /// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The shape of the container instance. The shape determines the resources available to the container instance.
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        /// <summary>
        /// The size and amount of resources available to the container instance.
        /// </summary>
        [Input("shapeConfig")]
        public Input<Inputs.ContainerInstanceShapeConfigGetArgs>? ShapeConfig { get; set; }

        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        [Input("vnics")]
        private InputList<Inputs.ContainerInstanceVnicGetArgs>? _vnics;

        /// <summary>
        /// The networks available to containers on this container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceVnicGetArgs> Vnics
        {
            get => _vnics ?? (_vnics = new InputList<Inputs.ContainerInstanceVnicGetArgs>());
            set => _vnics = value;
        }

        /// <summary>
        /// The number of volumes that are attached to the container instance.
        /// </summary>
        [Input("volumeCount")]
        public Input<int>? VolumeCount { get; set; }

        [Input("volumes")]
        private InputList<Inputs.ContainerInstanceVolumeGetArgs>? _volumes;

        /// <summary>
        /// A volume is a directory with data that is accessible across multiple containers in a container instance.
        /// 
        /// You can attach up to 32 volumes to single container instance.
        /// </summary>
        public InputList<Inputs.ContainerInstanceVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.ContainerInstanceVolumeGetArgs>());
            set => _volumes = value;
        }

        public ContainerInstanceState()
        {
        }
        public static new ContainerInstanceState Empty => new ContainerInstanceState();
    }
}
