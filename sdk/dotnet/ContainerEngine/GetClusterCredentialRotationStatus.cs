// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    public static class GetClusterCredentialRotationStatus
    {
        /// <summary>
        /// This data source provides details about a specific Cluster Credential Rotation Status resource in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// Get cluster credential rotation status.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testClusterCredentialRotationStatus = Oci.ContainerEngine.GetClusterCredentialRotationStatus.Invoke(new()
        ///     {
        ///         ClusterId = oci_containerengine_cluster.Test_cluster.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterCredentialRotationStatusResult> InvokeAsync(GetClusterCredentialRotationStatusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterCredentialRotationStatusResult>("oci:ContainerEngine/getClusterCredentialRotationStatus:getClusterCredentialRotationStatus", args ?? new GetClusterCredentialRotationStatusArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Cluster Credential Rotation Status resource in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// Get cluster credential rotation status.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testClusterCredentialRotationStatus = Oci.ContainerEngine.GetClusterCredentialRotationStatus.Invoke(new()
        ///     {
        ///         ClusterId = oci_containerengine_cluster.Test_cluster.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterCredentialRotationStatusResult> Invoke(GetClusterCredentialRotationStatusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterCredentialRotationStatusResult>("oci:ContainerEngine/getClusterCredentialRotationStatus:getClusterCredentialRotationStatus", args ?? new GetClusterCredentialRotationStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterCredentialRotationStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetClusterCredentialRotationStatusArgs()
        {
        }
        public static new GetClusterCredentialRotationStatusArgs Empty => new GetClusterCredentialRotationStatusArgs();
    }

    public sealed class GetClusterCredentialRotationStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetClusterCredentialRotationStatusInvokeArgs()
        {
        }
        public static new GetClusterCredentialRotationStatusInvokeArgs Empty => new GetClusterCredentialRotationStatusInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterCredentialRotationStatusResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Credential rotation status of a kubernetes cluster IN_PROGRESS: Issuing new credentials to kubernetes cluster control plane and worker nodes or retiring old credentials from kubernetes cluster control plane and worker nodes. WAITING: Waiting for customer to invoke the complete rotation action or the automcatic complete rotation action. COMPLETED: New credentials are functional on kuberentes cluster.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Details of a kuberenetes cluster credential rotation status: ISSUING_NEW_CREDENTIALS: Credential rotation is in progress. Starting to issue new credentials to kubernetes cluster control plane and worker nodes. NEW_CREDENTIALS_ISSUED: New credentials are added. At this stage cluster has both old and new credentials and is awaiting old credentials retirement. RETIRING_OLD_CREDENTIALS: Retirement of old credentials is in progress. Starting to remove old credentials from kubernetes cluster control plane and worker nodes. COMPLETED: Credential rotation is complete. Old credentials are retired.
        /// </summary>
        public readonly string StatusDetails;
        /// <summary>
        /// The time by which retirement of old credentials should start.
        /// </summary>
        public readonly string TimeAutoCompletionScheduled;

        [OutputConstructor]
        private GetClusterCredentialRotationStatusResult(
            string clusterId,

            string id,

            string status,

            string statusDetails,

            string timeAutoCompletionScheduled)
        {
            ClusterId = clusterId;
            Id = id;
            Status = status;
            StatusDetails = statusDetails;
            TimeAutoCompletionScheduled = timeAutoCompletionScheduled;
        }
    }
}
