// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    public static class GetClusterOption
    {
        /// <summary>
        /// This data source provides details about a specific Cluster Option resource in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// Get options available for clusters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testClusterOption = Oci.ContainerEngine.GetClusterOption.Invoke(new()
        ///     {
        ///         ClusterOptionId = oci_containerengine_cluster_option.Test_cluster_option.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterOptionResult> InvokeAsync(GetClusterOptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterOptionResult>("oci:ContainerEngine/getClusterOption:getClusterOption", args ?? new GetClusterOptionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Cluster Option resource in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// Get options available for clusters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testClusterOption = Oci.ContainerEngine.GetClusterOption.Invoke(new()
        ///     {
        ///         ClusterOptionId = oci_containerengine_cluster_option.Test_cluster_option.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterOptionResult> Invoke(GetClusterOptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterOptionResult>("oci:ContainerEngine/getClusterOption:getClusterOption", args ?? new GetClusterOptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterOptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the option set to retrieve. Use "all" get all options, or use a cluster ID to get options specific to the provided cluster.
        /// </summary>
        [Input("clusterOptionId", required: true)]
        public string ClusterOptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        public GetClusterOptionArgs()
        {
        }
        public static new GetClusterOptionArgs Empty => new GetClusterOptionArgs();
    }

    public sealed class GetClusterOptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the option set to retrieve. Use "all" get all options, or use a cluster ID to get options specific to the provided cluster.
        /// </summary>
        [Input("clusterOptionId", required: true)]
        public Input<string> ClusterOptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        public GetClusterOptionInvokeArgs()
        {
        }
        public static new GetClusterOptionInvokeArgs Empty => new GetClusterOptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterOptionResult
    {
        public readonly string ClusterOptionId;
        /// <summary>
        /// Available CNIs and network options for existing and new node pools of the cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterOptionClusterPodNetworkOptionResult> ClusterPodNetworkOptions;
        public readonly string? CompartmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Available Kubernetes versions.
        /// </summary>
        public readonly ImmutableArray<string> KubernetesVersions;

        [OutputConstructor]
        private GetClusterOptionResult(
            string clusterOptionId,

            ImmutableArray<Outputs.GetClusterOptionClusterPodNetworkOptionResult> clusterPodNetworkOptions,

            string? compartmentId,

            string? id,

            ImmutableArray<string> kubernetesVersions)
        {
            ClusterOptionId = clusterOptionId;
            ClusterPodNetworkOptions = clusterPodNetworkOptions;
            CompartmentId = compartmentId;
            Id = id;
            KubernetesVersions = kubernetesVersions;
        }
    }
}
