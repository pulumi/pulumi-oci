// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    public static class GetNodePools
    {
        /// <summary>
        /// This data source provides the list of Node Pools in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// List all the node pools in a compartment, and optionally filter by cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNodePools = Oci.ContainerEngine.GetNodePools.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ClusterId = testCluster.Id,
        ///         Name = nodePoolName,
        ///         States = nodePoolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodePoolsResult> InvokeAsync(GetNodePoolsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodePoolsResult>("oci:ContainerEngine/getNodePools:getNodePools", args ?? new GetNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Node Pools in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// List all the node pools in a compartment, and optionally filter by cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNodePools = Oci.ContainerEngine.GetNodePools.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ClusterId = testCluster.Id,
        ///         Name = nodePoolName,
        ///         States = nodePoolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("oci:ContainerEngine/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Node Pools in Oracle Cloud Infrastructure Container Engine service.
        /// 
        /// List all the node pools in a compartment, and optionally filter by cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNodePools = Oci.ContainerEngine.GetNodePools.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ClusterId = testCluster.Id,
        ///         Name = nodePoolName,
        ///         States = nodePoolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodePoolsResult> Invoke(GetNodePoolsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodePoolsResult>("oci:ContainerEngine/getNodePools:getNodePools", args ?? new GetNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetNodePoolsFilterArgs>? _filters;
        public List<Inputs.GetNodePoolsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNodePoolsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name to filter on.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("states")]
        private List<string>? _states;

        /// <summary>
        /// A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
        /// </summary>
        public List<string> States
        {
            get => _states ?? (_states = new List<string>());
            set => _states = value;
        }

        public GetNodePoolsArgs()
        {
        }
        public static new GetNodePoolsArgs Empty => new GetNodePoolsArgs();
    }

    public sealed class GetNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetNodePoolsFilterInputArgs>? _filters;
        public InputList<Inputs.GetNodePoolsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNodePoolsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name to filter on.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("states")]
        private InputList<string>? _states;

        /// <summary>
        /// A list of nodepool lifecycle states on which to filter on, matching any of the list items (OR logic). eg. [ACTIVE, DELETING]
        /// </summary>
        public InputList<string> States
        {
            get => _states ?? (_states = new InputList<string>());
            set => _states = value;
        }

        public GetNodePoolsInvokeArgs()
        {
        }
        public static new GetNodePoolsInvokeArgs Empty => new GetNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodePoolsResult
    {
        /// <summary>
        /// The OCID of the cluster to which this node pool is attached.
        /// </summary>
        public readonly string? ClusterId;
        /// <summary>
        /// The OCID of the compartment in which the node pool exists.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetNodePoolsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the node pool.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of node_pools.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodePoolsNodePoolResult> NodePools;
        /// <summary>
        /// The state of the nodepool.
        /// </summary>
        public readonly ImmutableArray<string> States;

        [OutputConstructor]
        private GetNodePoolsResult(
            string? clusterId,

            string compartmentId,

            ImmutableArray<Outputs.GetNodePoolsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetNodePoolsNodePoolResult> nodePools,

            ImmutableArray<string> states)
        {
            ClusterId = clusterId;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            NodePools = nodePools;
            States = states;
        }
    }
}
