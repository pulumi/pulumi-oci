// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Inputs
{

    public sealed class ClusterOptionsOpenIdConnectTokenAuthenticationConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) A Base64 encoded public RSA or ECDSA certificates used to signed your identity provider's web certificate.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// (Updatable) A client id that all tokens must be issued for.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// (Updatable) JWT claim to use as the user's group. If the claim is present it must be an array of strings.
        /// </summary>
        [Input("groupsClaim")]
        public Input<string>? GroupsClaim { get; set; }

        /// <summary>
        /// (Updatable) Prefix prepended to group claims to prevent clashes with existing names (such as system:groups).
        /// </summary>
        [Input("groupsPrefix")]
        public Input<string>? GroupsPrefix { get; set; }

        /// <summary>
        /// (Updatable) Whether the cluster has OIDC Auth Config enabled. Defaults to false.
        /// </summary>
        [Input("isOpenIdConnectAuthEnabled", required: true)]
        public Input<bool> IsOpenIdConnectAuthEnabled { get; set; } = null!;

        /// <summary>
        /// (Updatable) URL of the provider that allows the API server to discover public signing keys.  Only URLs that use the https:// scheme are accepted. This is typically the provider's discovery URL,  changed to have an empty path.
        /// </summary>
        [Input("issuerUrl")]
        public Input<string>? IssuerUrl { get; set; }

        [Input("requiredClaims")]
        private InputList<Inputs.ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimGetArgs>? _requiredClaims;

        /// <summary>
        /// (Updatable) A key=value pair that describes a required claim in the ID Token. If set, the claim is verified to be present  in the ID Token with a matching value. Repeat this flag to specify multiple claims.
        /// </summary>
        public InputList<Inputs.ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimGetArgs> RequiredClaims
        {
            get => _requiredClaims ?? (_requiredClaims = new InputList<Inputs.ClusterOptionsOpenIdConnectTokenAuthenticationConfigRequiredClaimGetArgs>());
            set => _requiredClaims = value;
        }

        [Input("signingAlgorithms")]
        private InputList<string>? _signingAlgorithms;

        /// <summary>
        /// (Updatable) The signing algorithms accepted. Default is ["RS256"].
        /// </summary>
        public InputList<string> SigningAlgorithms
        {
            get => _signingAlgorithms ?? (_signingAlgorithms = new InputList<string>());
            set => _signingAlgorithms = value;
        }

        /// <summary>
        /// (Updatable) JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end  user. Admins can choose other claims, such as email or name, depending on their provider. However, claims  other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
        /// </summary>
        [Input("usernameClaim")]
        public Input<string>? UsernameClaim { get; set; }

        /// <summary>
        /// (Updatable) Prefix prepended to username claims to prevent clashes with existing names (such as system:users).  For example, the value oidc: will create usernames like oidc:jane.doe. If this flag isn't provided and  --oidc-username-claim is a value other than email the prefix defaults to ( Issuer URL )# where  ( Issuer URL ) is the value of --oidc-issuer-url. The value - can be used to disable all prefixing.
        /// </summary>
        [Input("usernamePrefix")]
        public Input<string>? UsernamePrefix { get; set; }

        public ClusterOptionsOpenIdConnectTokenAuthenticationConfigGetArgs()
        {
        }
        public static new ClusterOptionsOpenIdConnectTokenAuthenticationConfigGetArgs Empty => new ClusterOptionsOpenIdConnectTokenAuthenticationConfigGetArgs();
    }
}
