// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Inputs
{

    public sealed class ContainerInstanceContainerArgs : global::Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputList<string>? _arguments;

        /// <summary>
        /// A list of string arguments for a container's ENTRYPOINT process.
        /// 
        /// Many containers use an ENTRYPOINT process pointing to a shell (/bin/bash). For those containers, this argument list specifies the main command in the container process.
        /// 
        /// The total size of all arguments combined must be 64 KB or smaller.
        /// </summary>
        public InputList<string> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<string>());
            set => _arguments = value;
        }

        /// <summary>
        /// The availability domain where the container instance runs.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// An optional command that overrides the ENTRYPOINT process. If you do not provide a value, the existing ENTRYPOINT process defined in the image is used.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// (Updatable) The compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The OCID of the container.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        [Input("containerInstanceId")]
        public Input<string>? ContainerInstanceId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// A map of additional environment variables to set in the environment of the container's ENTRYPOINT process. These variables are in addition to any variables already defined in the container's image.
        /// 
        /// The total size of all environment variables combined, name and values, must be 64 KB or smaller.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        [Input("exitCode")]
        public Input<int>? ExitCode { get; set; }

        /// <summary>
        /// The fault domain where the container instance runs.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("healthChecks")]
        private InputList<Inputs.ContainerInstanceContainerHealthCheckArgs>? _healthChecks;

        /// <summary>
        /// list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerHealthCheckArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.ContainerInstanceContainerHealthCheckArgs>());
            set => _healthChecks = value;
        }

        /// <summary>
        /// A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
        /// 
        /// If no registry is provided, will default the registry to public docker hub `docker.io/library`.
        /// 
        /// The registry used for container image must be reachable over the Container Instance's VNIC.
        /// </summary>
        [Input("imageUrl", required: true)]
        public Input<string> ImageUrl { get; set; } = null!;

        /// <summary>
        /// Determines if the container will have access to the container instance resource principal.
        /// 
        /// This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
        /// </summary>
        [Input("isResourcePrincipalDisabled")]
        public Input<bool>? IsResourcePrincipalDisabled { get; set; }

        /// <summary>
        /// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The size and amount of resources available to the container.
        /// </summary>
        [Input("resourceConfig")]
        public Input<Inputs.ContainerInstanceContainerResourceConfigArgs>? ResourceConfig { get; set; }

        /// <summary>
        /// Security context for container.
        /// </summary>
        [Input("securityContext")]
        public Input<Inputs.ContainerInstanceContainerSecurityContextArgs>? SecurityContext { get; set; }

        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        [Input("timeTerminated")]
        public Input<string>? TimeTerminated { get; set; }

        /// <summary>
        /// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.ContainerInstanceContainerVolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// List of the volume mounts.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerVolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.ContainerInstanceContainerVolumeMountArgs>());
            set => _volumeMounts = value;
        }

        /// <summary>
        /// The working directory within the container's filesystem for the container process. If not specified, the default working directory from the image is used.
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public ContainerInstanceContainerArgs()
        {
        }
        public static new ContainerInstanceContainerArgs Empty => new ContainerInstanceContainerArgs();
    }
}
