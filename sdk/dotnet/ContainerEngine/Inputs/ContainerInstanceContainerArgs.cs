// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Inputs
{

    public sealed class ContainerInstanceContainerArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalCapabilities")]
        private InputList<string>? _additionalCapabilities;

        /// <summary>
        /// A list of additional capabilities for the container.
        /// </summary>
        public InputList<string> AdditionalCapabilities
        {
            get => _additionalCapabilities ?? (_additionalCapabilities = new InputList<string>());
            set => _additionalCapabilities = value;
        }

        [Input("arguments")]
        private InputList<string>? _arguments;

        /// <summary>
        /// A list of string arguments for a container's entrypoint process.
        /// 
        /// Many containers use an entrypoint process pointing to a shell, for example /bin/bash. For such containers, this argument list can also be used to specify the main command in the container process.
        /// 
        /// All arguments together must be 64KB or smaller.
        /// </summary>
        public InputList<string> Arguments
        {
            get => _arguments ?? (_arguments = new InputList<string>());
            set => _arguments = value;
        }

        /// <summary>
        /// Availability Domain where the ContainerInstance should be created.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// The list of strings which will be concatenated to a single command for checking container's status.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// (Updatable) Compartment Identifier
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The ID of the Container on this Instance.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        [Input("containerInstanceId")]
        public Input<string>? ContainerInstanceId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("environmentVariables")]
        private InputMap<object>? _environmentVariables;

        /// <summary>
        /// A map of additional environment variables to set in the environment of the container's entrypoint process. These variables are in addition to any variables already defined in the container's image.
        /// 
        /// All environment variables together, name and values, must be 64KB or smaller.
        /// </summary>
        public InputMap<object> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<object>());
            set => _environmentVariables = value;
        }

        [Input("exitCode")]
        public Input<int>? ExitCode { get; set; }

        /// <summary>
        /// Fault Domain where the ContainerInstance should run.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("healthChecks")]
        private InputList<Inputs.ContainerInstanceContainerHealthCheckArgs>? _healthChecks;

        /// <summary>
        /// list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerHealthCheckArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.ContainerInstanceContainerHealthCheckArgs>());
            set => _healthChecks = value;
        }

        /// <summary>
        /// The container image information. Currently only support public docker registry. Can be either image name, e.g `containerImage`, image name with version, e.g `containerImage:v1` or complete docker image Url e.g `docker.io/library/containerImage:latest`. If no registry is provided, will default the registry to public docker hub `docker.io/library`. The registry used for container image must be reachable over the Container Instance's VNIC.
        /// </summary>
        [Input("imageUrl", required: true)]
        public Input<string> ImageUrl { get; set; } = null!;

        /// <summary>
        /// Determines if the Container will have access to the Container Instance Resource Principal.  This method utilizes resource principal version 2.2. Please refer to  https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal  for detailed explanation of how to leverage the exposed resource principal elements.
        /// </summary>
        [Input("isResourcePrincipalDisabled")]
        public Input<bool>? IsResourcePrincipalDisabled { get; set; }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The size and amount of resources available to the Container.
        /// </summary>
        [Input("resourceConfig")]
        public Input<Inputs.ContainerInstanceContainerResourceConfigArgs>? ResourceConfig { get; set; }

        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the the ContainerInstance was created. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        [Input("timeTerminated")]
        public Input<string>? TimeTerminated { get; set; }

        /// <summary>
        /// The time the ContainerInstance was updated. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        [Input("volumeMounts")]
        private InputList<Inputs.ContainerInstanceContainerVolumeMountArgs>? _volumeMounts;

        /// <summary>
        /// List of the volume mounts.
        /// </summary>
        public InputList<Inputs.ContainerInstanceContainerVolumeMountArgs> VolumeMounts
        {
            get => _volumeMounts ?? (_volumeMounts = new InputList<Inputs.ContainerInstanceContainerVolumeMountArgs>());
            set => _volumeMounts = value;
        }

        /// <summary>
        /// The working directory within the Container's filesystem for the Container process. If none is set, the Container will run in the working directory set by the container image.
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public ContainerInstanceContainerArgs()
        {
        }
        public static new ContainerInstanceContainerArgs Empty => new ContainerInstanceContainerArgs();
    }
}
