// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Inputs
{

    public sealed class ContainerInstanceContainerSecurityContextGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the container must run as a non-root user. If true, the service validates the container image at runtime to ensure that it is not going to run with UID 0 (root) and fails the container instance creation if the validation fails.
        /// </summary>
        [Input("isNonRootUserCheckEnabled")]
        public Input<bool>? IsNonRootUserCheckEnabled { get; set; }

        /// <summary>
        /// Determines if the container will have a read-only root file system. Default value is false.
        /// </summary>
        [Input("isRootFileSystemReadonly")]
        public Input<bool>? IsRootFileSystemReadonly { get; set; }

        /// <summary>
        /// The group ID (GID) to run the entrypoint process of the container. Uses runtime default if not provided.
        /// </summary>
        [Input("runAsGroup")]
        public Input<int>? RunAsGroup { get; set; }

        /// <summary>
        /// The user ID (UID) to run the entrypoint process of the container. Defaults to user specified UID in container image metadata if not provided. This must be provided if runAsGroup is provided.
        /// </summary>
        [Input("runAsUser")]
        public Input<int>? RunAsUser { get; set; }

        /// <summary>
        /// The type of security context
        /// </summary>
        [Input("securityContextType")]
        public Input<string>? SecurityContextType { get; set; }

        public ContainerInstanceContainerSecurityContextGetArgs()
        {
        }
        public static new ContainerInstanceContainerSecurityContextGetArgs Empty => new ContainerInstanceContainerSecurityContextGetArgs();
    }
}
