// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Inputs
{

    public sealed class NodePoolNodePoolCyclingDetailsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("cycleModes")]
        private InputList<string>? _cycleModes;

        /// <summary>
        /// (Updatable) An ordered list of cycle modes that should be performed on the OKE nodes.
        /// </summary>
        public InputList<string> CycleModes
        {
            get => _cycleModes ?? (_cycleModes = new InputList<string>());
            set => _cycleModes = value;
        }

        /// <summary>
        /// (Updatable) If cycling operation should be performed on the nodes in the node pool.
        /// </summary>
        [Input("isNodeCyclingEnabled")]
        public Input<bool>? IsNodeCyclingEnabled { get; set; }

        /// <summary>
        /// (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
        /// </summary>
        [Input("maximumSurge")]
        public Input<string>? MaximumSurge { get; set; }

        /// <summary>
        /// (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
        /// </summary>
        [Input("maximumUnavailable")]
        public Input<string>? MaximumUnavailable { get; set; }

        public NodePoolNodePoolCyclingDetailsGetArgs()
        {
        }
        public static new NodePoolNodePoolCyclingDetailsGetArgs Empty => new NodePoolNodePoolCyclingDetailsGetArgs();
    }
}
