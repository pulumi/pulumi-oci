// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Outputs
{

    [OutputType]
    public sealed class ContainerInstanceContainer
    {
        /// <summary>
        /// A list of string arguments for a container's ENTRYPOINT process.
        /// 
        /// Many containers use an ENTRYPOINT process pointing to a shell (/bin/bash). For those containers, this argument list specifies the main command in the container process.
        /// 
        /// The total size of all arguments combined must be 64 KB or smaller.
        /// </summary>
        public readonly ImmutableArray<string> Arguments;
        /// <summary>
        /// The availability domain where the container instance runs.
        /// </summary>
        public readonly string? AvailabilityDomain;
        /// <summary>
        /// The list of strings that will be simplified to a single command for checking the status of the container.
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// (Updatable) The compartment OCID.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The OCID of the container.
        /// </summary>
        public readonly string? ContainerId;
        public readonly string? ContainerInstanceId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// A user-friendly name for the VNIC. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// A map of additional environment variables to set in the environment of the container's ENTRYPOINT process. These variables are in addition to any variables already defined in the container's image.
        /// 
        /// The total size of all environment variables combined, name and values, must be 64 KB or smaller.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? EnvironmentVariables;
        public readonly int? ExitCode;
        /// <summary>
        /// The fault domain where the container instance runs.
        /// </summary>
        public readonly string? FaultDomain;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// list of container health checks to check container status and take appropriate action if container status is failed. There are three types of health checks that we currently support HTTP, TCP, and Command.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerInstanceContainerHealthCheck> HealthChecks;
        /// <summary>
        /// A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
        /// 
        /// If no registry is provided, will default the registry to public docker hub `docker.io/library`.
        /// 
        /// The registry used for container image must be reachable over the Container Instance's VNIC.
        /// </summary>
        public readonly string ImageUrl;
        /// <summary>
        /// Determines if the container will have access to the container instance resource principal.
        /// 
        /// This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
        /// </summary>
        public readonly bool? IsResourcePrincipalDisabled;
        /// <summary>
        /// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// The size and amount of resources available to the container.
        /// </summary>
        public readonly Outputs.ContainerInstanceContainerResourceConfig? ResourceConfig;
        /// <summary>
        /// Security context for container.
        /// </summary>
        public readonly Outputs.ContainerInstanceContainerSecurityContext? SecurityContext;
        /// <summary>
        /// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SystemTags;
        /// <summary>
        /// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string? TimeCreated;
        public readonly string? TimeTerminated;
        /// <summary>
        /// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// List of the volume mounts.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerInstanceContainerVolumeMount> VolumeMounts;
        /// <summary>
        /// The working directory within the container's filesystem for the container process. If not specified, the default working directory from the image is used.
        /// </summary>
        public readonly string? WorkingDirectory;

        [OutputConstructor]
        private ContainerInstanceContainer(
            ImmutableArray<string> arguments,

            string? availabilityDomain,

            ImmutableArray<string> commands,

            string? compartmentId,

            string? containerId,

            string? containerInstanceId,

            ImmutableDictionary<string, object>? definedTags,

            string? displayName,

            ImmutableDictionary<string, object>? environmentVariables,

            int? exitCode,

            string? faultDomain,

            ImmutableDictionary<string, object>? freeformTags,

            ImmutableArray<Outputs.ContainerInstanceContainerHealthCheck> healthChecks,

            string imageUrl,

            bool? isResourcePrincipalDisabled,

            string? lifecycleDetails,

            Outputs.ContainerInstanceContainerResourceConfig? resourceConfig,

            Outputs.ContainerInstanceContainerSecurityContext? securityContext,

            string? state,

            ImmutableDictionary<string, object>? systemTags,

            string? timeCreated,

            string? timeTerminated,

            string? timeUpdated,

            ImmutableArray<Outputs.ContainerInstanceContainerVolumeMount> volumeMounts,

            string? workingDirectory)
        {
            Arguments = arguments;
            AvailabilityDomain = availabilityDomain;
            Commands = commands;
            CompartmentId = compartmentId;
            ContainerId = containerId;
            ContainerInstanceId = containerInstanceId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            EnvironmentVariables = environmentVariables;
            ExitCode = exitCode;
            FaultDomain = faultDomain;
            FreeformTags = freeformTags;
            HealthChecks = healthChecks;
            ImageUrl = imageUrl;
            IsResourcePrincipalDisabled = isResourcePrincipalDisabled;
            LifecycleDetails = lifecycleDetails;
            ResourceConfig = resourceConfig;
            SecurityContext = securityContext;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeTerminated = timeTerminated;
            TimeUpdated = timeUpdated;
            VolumeMounts = volumeMounts;
            WorkingDirectory = workingDirectory;
        }
    }
}
