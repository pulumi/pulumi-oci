// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine.Outputs
{

    [OutputType]
    public sealed class ContainerInstanceContainerHealthCheck
    {
        /// <summary>
        /// The action will be triggered when the container health check fails. There are two types of action: KILL or NONE. The default action is KILL. If failure action is KILL, the container will be subject to the container restart policy.
        /// </summary>
        public readonly string? FailureAction;
        /// <summary>
        /// Number of consecutive failures at which we consider the check failed.
        /// </summary>
        public readonly int? FailureThreshold;
        /// <summary>
        /// Container health check HTTP headers.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerInstanceContainerHealthCheckHeader> Headers;
        /// <summary>
        /// Container health check type.
        /// </summary>
        public readonly string HealthCheckType;
        /// <summary>
        /// The initial delay in seconds before start checking container health status.
        /// </summary>
        public readonly int? InitialDelayInSeconds;
        /// <summary>
        /// Number of seconds between two consecutive runs for checking container health.
        /// </summary>
        public readonly int? IntervalInSeconds;
        /// <summary>
        /// Health check name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Container health check HTTP path.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Container health check HTTP port.
        /// </summary>
        public readonly int? Port;
        public readonly string? Status;
        public readonly string? StatusDetails;
        /// <summary>
        /// Number of consecutive successes at which we consider the check succeeded again after it was in failure state.
        /// </summary>
        public readonly int? SuccessThreshold;
        /// <summary>
        /// Length of waiting time in seconds before marking health check failed.
        /// </summary>
        public readonly int? TimeoutInSeconds;

        [OutputConstructor]
        private ContainerInstanceContainerHealthCheck(
            string? failureAction,

            int? failureThreshold,

            ImmutableArray<Outputs.ContainerInstanceContainerHealthCheckHeader> headers,

            string healthCheckType,

            int? initialDelayInSeconds,

            int? intervalInSeconds,

            string? name,

            string? path,

            int? port,

            string? status,

            string? statusDetails,

            int? successThreshold,

            int? timeoutInSeconds)
        {
            FailureAction = failureAction;
            FailureThreshold = failureThreshold;
            Headers = headers;
            HealthCheckType = healthCheckType;
            InitialDelayInSeconds = initialDelayInSeconds;
            IntervalInSeconds = intervalInSeconds;
            Name = name;
            Path = path;
            Port = port;
            Status = status;
            StatusDetails = statusDetails;
            SuccessThreshold = successThreshold;
            TimeoutInSeconds = timeoutInSeconds;
        }
    }
}
