// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerEngine
{
    /// <summary>
    /// This resource provides the Virtual Node Pool resource in Oracle Cloud Infrastructure Container Engine service.
    /// 
    /// Create a new virtual node pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testVirtualNodePool = new Oci.ContainerEngine.VirtualNodePool("test_virtual_node_pool", new()
    ///     {
    ///         ClusterId = testCluster.Id,
    ///         CompartmentId = compartmentId,
    ///         DisplayName = virtualNodePoolDisplayName,
    ///         PlacementConfigurations = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.VirtualNodePoolPlacementConfigurationArgs
    ///             {
    ///                 AvailabilityDomain = virtualNodePoolPlacementConfigurationsAvailabilityDomain,
    ///                 FaultDomains = virtualNodePoolPlacementConfigurationsFaultDomain,
    ///                 SubnetId = testSubnet.Id,
    ///             },
    ///         },
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         InitialVirtualNodeLabels = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.VirtualNodePoolInitialVirtualNodeLabelArgs
    ///             {
    ///                 Key = virtualNodePoolInitialVirtualNodeLabelsKey,
    ///                 Value = virtualNodePoolInitialVirtualNodeLabelsValue,
    ///             },
    ///         },
    ///         NsgIds = virtualNodePoolNsgIds,
    ///         PodConfiguration = new Oci.ContainerEngine.Inputs.VirtualNodePoolPodConfigurationArgs
    ///         {
    ///             Shape = virtualNodePoolPodConfigurationShape,
    ///             SubnetId = testSubnet.Id,
    ///             NsgIds = virtualNodePoolPodConfigurationNsgIds,
    ///         },
    ///         Size = virtualNodePoolSize,
    ///         Taints = new[]
    ///         {
    ///             new Oci.ContainerEngine.Inputs.VirtualNodePoolTaintArgs
    ///             {
    ///                 Effect = virtualNodePoolTaintsEffect,
    ///                 Key = virtualNodePoolTaintsKey,
    ///                 Value = virtualNodePoolTaintsValue,
    ///             },
    ///         },
    ///         VirtualNodeTags = new Oci.ContainerEngine.Inputs.VirtualNodePoolVirtualNodeTagsArgs
    ///         {
    ///             DefinedTags = 
    ///             {
    ///                 { "Operations.CostCenter", "42" },
    ///             },
    ///             FreeformTags = 
    ///             {
    ///                 { "Department", "Finance" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VirtualNodePools can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:ContainerEngine/virtualNodePool:VirtualNodePool test_virtual_node_pool "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:ContainerEngine/virtualNodePool:VirtualNodePool")]
    public partial class VirtualNodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Compartment of the virtual node pool.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Display name of the virtual node pool. This is a non-unique value.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
        /// </summary>
        [Output("initialVirtualNodeLabels")]
        public Output<ImmutableArray<Outputs.VirtualNodePoolInitialVirtualNodeLabel>> InitialVirtualNodeLabels { get; private set; } = null!;

        /// <summary>
        /// The version of Kubernetes running on the nodes in the node pool.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// Details about the state of the Virtual Node Pool.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
        /// </summary>
        [Output("nsgIds")]
        public Output<ImmutableArray<string>> NsgIds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
        /// </summary>
        [Output("placementConfigurations")]
        public Output<ImmutableArray<Outputs.VirtualNodePoolPlacementConfiguration>> PlacementConfigurations { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
        /// </summary>
        [Output("podConfiguration")]
        public Output<Outputs.VirtualNodePoolPodConfiguration> PodConfiguration { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The state of the Virtual Node Pool.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
        /// </summary>
        [Output("taints")]
        public Output<ImmutableArray<Outputs.VirtualNodePoolTaint>> Taints { get; private set; } = null!;

        /// <summary>
        /// The time the virtual node pool was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the virtual node pool was updated.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
        /// </summary>
        [Output("virtualNodeTags")]
        public Output<Outputs.VirtualNodePoolVirtualNodeTags> VirtualNodeTags { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNodePool(string name, VirtualNodePoolArgs args, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/virtualNodePool:VirtualNodePool", name, args ?? new VirtualNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualNodePool(string name, Input<string> id, VirtualNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("oci:ContainerEngine/virtualNodePool:VirtualNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNodePool Get(string name, Input<string> id, VirtualNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualNodePool(name, id, state, options);
        }
    }

    public sealed class VirtualNodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Compartment of the virtual node pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name of the virtual node pool. This is a non-unique value.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("initialVirtualNodeLabels")]
        private InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelArgs>? _initialVirtualNodeLabels;

        /// <summary>
        /// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
        /// </summary>
        public InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelArgs> InitialVirtualNodeLabels
        {
            get => _initialVirtualNodeLabels ?? (_initialVirtualNodeLabels = new InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelArgs>());
            set => _initialVirtualNodeLabels = value;
        }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("placementConfigurations", required: true)]
        private InputList<Inputs.VirtualNodePoolPlacementConfigurationArgs>? _placementConfigurations;

        /// <summary>
        /// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
        /// </summary>
        public InputList<Inputs.VirtualNodePoolPlacementConfigurationArgs> PlacementConfigurations
        {
            get => _placementConfigurations ?? (_placementConfigurations = new InputList<Inputs.VirtualNodePoolPlacementConfigurationArgs>());
            set => _placementConfigurations = value;
        }

        /// <summary>
        /// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
        /// </summary>
        [Input("podConfiguration", required: true)]
        public Input<Inputs.VirtualNodePoolPodConfigurationArgs> PodConfiguration { get; set; } = null!;

        /// <summary>
        /// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("taints")]
        private InputList<Inputs.VirtualNodePoolTaintArgs>? _taints;

        /// <summary>
        /// (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
        /// </summary>
        public InputList<Inputs.VirtualNodePoolTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.VirtualNodePoolTaintArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
        /// </summary>
        [Input("virtualNodeTags")]
        public Input<Inputs.VirtualNodePoolVirtualNodeTagsArgs>? VirtualNodeTags { get; set; }

        public VirtualNodePoolArgs()
        {
        }
        public static new VirtualNodePoolArgs Empty => new VirtualNodePoolArgs();
    }

    public sealed class VirtualNodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Compartment of the virtual node pool.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name of the virtual node pool. This is a non-unique value.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("initialVirtualNodeLabels")]
        private InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelGetArgs>? _initialVirtualNodeLabels;

        /// <summary>
        /// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
        /// </summary>
        public InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelGetArgs> InitialVirtualNodeLabels
        {
            get => _initialVirtualNodeLabels ?? (_initialVirtualNodeLabels = new InputList<Inputs.VirtualNodePoolInitialVirtualNodeLabelGetArgs>());
            set => _initialVirtualNodeLabels = value;
        }

        /// <summary>
        /// The version of Kubernetes running on the nodes in the node pool.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// Details about the state of the Virtual Node Pool.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("placementConfigurations")]
        private InputList<Inputs.VirtualNodePoolPlacementConfigurationGetArgs>? _placementConfigurations;

        /// <summary>
        /// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
        /// </summary>
        public InputList<Inputs.VirtualNodePoolPlacementConfigurationGetArgs> PlacementConfigurations
        {
            get => _placementConfigurations ?? (_placementConfigurations = new InputList<Inputs.VirtualNodePoolPlacementConfigurationGetArgs>());
            set => _placementConfigurations = value;
        }

        /// <summary>
        /// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
        /// </summary>
        [Input("podConfiguration")]
        public Input<Inputs.VirtualNodePoolPodConfigurationGetArgs>? PodConfiguration { get; set; }

        /// <summary>
        /// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The state of the Virtual Node Pool.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        [Input("taints")]
        private InputList<Inputs.VirtualNodePoolTaintGetArgs>? _taints;

        /// <summary>
        /// (Updatable) A taint is a collection of &lt;key, value, effect&gt;. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
        /// </summary>
        public InputList<Inputs.VirtualNodePoolTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.VirtualNodePoolTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// The time the virtual node pool was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the virtual node pool was updated.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
        /// </summary>
        [Input("virtualNodeTags")]
        public Input<Inputs.VirtualNodePoolVirtualNodeTagsGetArgs>? VirtualNodeTags { get; set; }

        public VirtualNodePoolState()
        {
        }
        public static new VirtualNodePoolState Empty => new VirtualNodePoolState();
    }
}
