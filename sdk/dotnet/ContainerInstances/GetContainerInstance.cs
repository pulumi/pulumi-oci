// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerInstances
{
    public static class GetContainerInstance
    {
        /// <summary>
        /// This data source provides details about a specific Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
        /// 
        /// Gets a ContainerInstance by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerInstance = Oci.ContainerInstances.GetContainerInstance.Invoke(new()
        ///     {
        ///         ContainerInstanceId = oci_container_instances_container_instance.Test_container_instance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContainerInstanceResult> InvokeAsync(GetContainerInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerInstanceResult>("oci:ContainerInstances/getContainerInstance:getContainerInstance", args ?? new GetContainerInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
        /// 
        /// Gets a ContainerInstance by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerInstance = Oci.ContainerInstances.GetContainerInstance.Invoke(new()
        ///     {
        ///         ContainerInstanceId = oci_container_instances_container_instance.Test_container_instance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetContainerInstanceResult> Invoke(GetContainerInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerInstanceResult>("oci:ContainerInstances/getContainerInstance:getContainerInstance", args ?? new GetContainerInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-generated unique identifier for the ContainerInstance.
        /// </summary>
        [Input("containerInstanceId", required: true)]
        public string ContainerInstanceId { get; set; } = null!;

        public GetContainerInstanceArgs()
        {
        }
        public static new GetContainerInstanceArgs Empty => new GetContainerInstanceArgs();
    }

    public sealed class GetContainerInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-generated unique identifier for the ContainerInstance.
        /// </summary>
        [Input("containerInstanceId", required: true)]
        public Input<string> ContainerInstanceId { get; set; } = null!;

        public GetContainerInstanceInvokeArgs()
        {
        }
        public static new GetContainerInstanceInvokeArgs Empty => new GetContainerInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerInstanceResult
    {
        /// <summary>
        /// Availability Domain where the ContainerInstance is running.
        /// </summary>
        public readonly string AvailabilityDomain;
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The number of containers on this Instance
        /// </summary>
        public readonly int ContainerCount;
        public readonly string ContainerInstanceId;
        /// <summary>
        /// The container restart policy is applied for all containers in container instance.
        /// </summary>
        public readonly string ContainerRestartPolicy;
        /// <summary>
        /// The Containers on this Instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceContainerResult> Containers;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Display name for the ContainerInstance. Can be renamed.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// DNS settings for containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceDnsConfigResult> DnsConfigs;
        /// <summary>
        /// Fault Domain where the ContainerInstance is running.
        /// </summary>
        public readonly string FaultDomain;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Duration in seconds processes within a Container have to gracefully terminate. This applies whenever a Container must be halted, such as when the Container Instance is deleted. Processes will first be sent a termination signal. After this timeout is reached, the processes will be sent a termination signal.
        /// </summary>
        public readonly string GracefulShutdownTimeoutInSeconds;
        /// <summary>
        /// Unique identifier that is immutable on creation
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The image pull secrets for accessing private registry to pull images for containers
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceImagePullSecretResult> ImagePullSecrets;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The shape of the Container Instance. The shape determines the resources available to the Container Instance.
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// The shape configuration for a Container Instance. The shape configuration determines the resources allocated to the Instance and it's containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceShapeConfigResult> ShapeConfigs;
        /// <summary>
        /// The current state of the ContainerInstance.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time the the ContainerInstance was created. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the ContainerInstance was updated. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The virtual networks available to containers running on this Container Instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceVnicResult> Vnics;
        /// <summary>
        /// The number of volumes that attached to this Instance
        /// </summary>
        public readonly int VolumeCount;
        /// <summary>
        /// A Volume represents a directory with data that is accessible across multiple containers in a ContainerInstance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstanceVolumeResult> Volumes;

        [OutputConstructor]
        private GetContainerInstanceResult(
            string availabilityDomain,

            string compartmentId,

            int containerCount,

            string containerInstanceId,

            string containerRestartPolicy,

            ImmutableArray<Outputs.GetContainerInstanceContainerResult> containers,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableArray<Outputs.GetContainerInstanceDnsConfigResult> dnsConfigs,

            string faultDomain,

            ImmutableDictionary<string, object> freeformTags,

            string gracefulShutdownTimeoutInSeconds,

            string id,

            ImmutableArray<Outputs.GetContainerInstanceImagePullSecretResult> imagePullSecrets,

            string lifecycleDetails,

            string shape,

            ImmutableArray<Outputs.GetContainerInstanceShapeConfigResult> shapeConfigs,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            ImmutableArray<Outputs.GetContainerInstanceVnicResult> vnics,

            int volumeCount,

            ImmutableArray<Outputs.GetContainerInstanceVolumeResult> volumes)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            ContainerCount = containerCount;
            ContainerInstanceId = containerInstanceId;
            ContainerRestartPolicy = containerRestartPolicy;
            Containers = containers;
            DefinedTags = definedTags;
            DisplayName = displayName;
            DnsConfigs = dnsConfigs;
            FaultDomain = faultDomain;
            FreeformTags = freeformTags;
            GracefulShutdownTimeoutInSeconds = gracefulShutdownTimeoutInSeconds;
            Id = id;
            ImagePullSecrets = imagePullSecrets;
            LifecycleDetails = lifecycleDetails;
            Shape = shape;
            ShapeConfigs = shapeConfigs;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Vnics = vnics;
            VolumeCount = volumeCount;
            Volumes = volumes;
        }
    }
}
