// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerInstances
{
    public static class GetContainerInstances
    {
        /// <summary>
        /// This data source provides the list of Container Instances in Oracle Cloud Infrastructure Container Instances service.
        /// 
        /// Returns a list of container instances.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerInstances = Oci.ContainerInstances.GetContainerInstances.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AvailabilityDomain = @var.Container_instance_availability_domain,
        ///         DisplayName = @var.Container_instance_display_name,
        ///         State = @var.Container_instance_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetContainerInstancesResult> InvokeAsync(GetContainerInstancesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerInstancesResult>("oci:ContainerInstances/getContainerInstances:getContainerInstances", args ?? new GetContainerInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Container Instances in Oracle Cloud Infrastructure Container Instances service.
        /// 
        /// Returns a list of container instances.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerInstances = Oci.ContainerInstances.GetContainerInstances.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AvailabilityDomain = @var.Container_instance_availability_domain,
        ///         DisplayName = @var.Container_instance_display_name,
        ///         State = @var.Container_instance_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetContainerInstancesResult> Invoke(GetContainerInstancesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerInstancesResult>("oci:ContainerInstances/getContainerInstances:getContainerInstances", args ?? new GetContainerInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetContainerInstancesFilterArgs>? _filters;
        public List<Inputs.GetContainerInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainerInstancesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetContainerInstancesArgs()
        {
        }
        public static new GetContainerInstancesArgs Empty => new GetContainerInstancesArgs();
    }

    public sealed class GetContainerInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetContainerInstancesFilterInputArgs>? _filters;
        public InputList<Inputs.GetContainerInstancesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainerInstancesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetContainerInstancesInvokeArgs()
        {
        }
        public static new GetContainerInstancesInvokeArgs Empty => new GetContainerInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerInstancesResult
    {
        /// <summary>
        /// The availability domain to place the container instance.
        /// </summary>
        public readonly string? AvailabilityDomain;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of container_instance_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionResult> ContainerInstanceCollections;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetContainerInstancesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the container instance.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetContainerInstancesResult(
            string? availabilityDomain,

            string compartmentId,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionResult> containerInstanceCollections,

            string? displayName,

            ImmutableArray<Outputs.GetContainerInstancesFilterResult> filters,

            string id,

            string? state)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            ContainerInstanceCollections = containerInstanceCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
