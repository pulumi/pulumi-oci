// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ContainerInstances.Outputs
{

    [OutputType]
    public sealed class GetContainerInstancesContainerInstanceCollectionItemResult
    {
        /// <summary>
        /// The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        public readonly string AvailabilityDomain;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The number of containers on the container instance.
        /// </summary>
        public readonly int ContainerCount;
        /// <summary>
        /// The container restart policy is applied for all containers in container instance.
        /// </summary>
        public readonly string ContainerRestartPolicy;
        /// <summary>
        /// The containers on the container instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult> Containers;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// DNS settings for containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult> DnsConfigs;
        /// <summary>
        /// The fault domain to place the container instance.
        /// </summary>
        public readonly string FaultDomain;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
        /// </summary>
        public readonly string GracefulShutdownTimeoutInSeconds;
        /// <summary>
        /// An OCID that cannot be changed.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The image pulls secrets so you can access private registry to pull container images.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult> ImagePullSecrets;
        /// <summary>
        /// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// The shape configuration for a container instance. The shape configuration determines the resources thats are available to the container instance and its containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult> ShapeConfigs;
        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The virtual networks available to the containers in the container instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult> Vnics;
        /// <summary>
        /// The number of volumes that are attached to the container instance.
        /// </summary>
        public readonly int VolumeCount;
        /// <summary>
        /// A volume is a directory with data that is accessible across multiple containers in a container instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult> Volumes;

        [OutputConstructor]
        private GetContainerInstancesContainerInstanceCollectionItemResult(
            string availabilityDomain,

            string compartmentId,

            int containerCount,

            string containerRestartPolicy,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemContainerResult> containers,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemDnsConfigResult> dnsConfigs,

            string faultDomain,

            ImmutableDictionary<string, object> freeformTags,

            string gracefulShutdownTimeoutInSeconds,

            string id,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemImagePullSecretResult> imagePullSecrets,

            string lifecycleDetails,

            string shape,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemShapeConfigResult> shapeConfigs,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemVnicResult> vnics,

            int volumeCount,

            ImmutableArray<Outputs.GetContainerInstancesContainerInstanceCollectionItemVolumeResult> volumes)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            ContainerCount = containerCount;
            ContainerRestartPolicy = containerRestartPolicy;
            Containers = containers;
            DefinedTags = definedTags;
            DisplayName = displayName;
            DnsConfigs = dnsConfigs;
            FaultDomain = faultDomain;
            FreeformTags = freeformTags;
            GracefulShutdownTimeoutInSeconds = gracefulShutdownTimeoutInSeconds;
            Id = id;
            ImagePullSecrets = imagePullSecrets;
            LifecycleDetails = lifecycleDetails;
            Shape = shape;
            ShapeConfigs = shapeConfigs;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Vnics = vnics;
            VolumeCount = volumeCount;
            Volumes = volumes;
        }
    }
}
