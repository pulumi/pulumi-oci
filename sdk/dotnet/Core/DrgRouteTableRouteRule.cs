// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    /// <summary>
    /// This resource provides the Drg Route Table Route Rule resource in Oracle Cloud Infrastructure Core service.
    /// 
    /// Adds one static route rule to the specified DRG route table.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDrgRouteTableRouteRule = new Oci.Core.DrgRouteTableRouteRule("testDrgRouteTableRouteRule", new()
    ///     {
    ///         DrgRouteTableId = oci_core_drg_route_table.Test_drg_route_table.Id,
    ///         Destination = @var.Drg_route_table_route_rule_route_rules_destination,
    ///         DestinationType = @var.Drg_route_table_route_rule_route_rules_destination_type,
    ///         NextHopDrgAttachmentId = oci_core_drg_attachment.Test_drg_attachment.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DrgRouteTableRouteRule can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:Core/drgRouteTableRouteRule:DrgRouteTableRouteRule test_drg_route_table_route_rule "drgRouteTables/{drgRouteTableId}/routeRules/{id}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Core/drgRouteTableRouteRule:DrgRouteTableRouteRule")]
    public partial class DrgRouteTableRouteRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional properties for the route, computed by the service.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, object>> Attributes { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
        /// 
        /// Potential values:
        /// * IP address range in CIDR notation. This can be an IPv4 or IPv6 CIDR. For example: `192.168.1.0/24` or `2001:0db8:0123:45::/56`.
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
        /// </summary>
        [Output("destinationType")]
        public Output<string> DestinationType { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
        /// </summary>
        [Output("drgRouteTableId")]
        public Output<string> DrgRouteTableId { get; private set; } = null!;

        /// <summary>
        /// Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
        /// </summary>
        [Output("isBlackhole")]
        public Output<bool> IsBlackhole { get; private set; } = null!;

        /// <summary>
        /// Indicates that the route was not imported due to a conflict between route rules.
        /// </summary>
        [Output("isConflict")]
        public Output<bool> IsConflict { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("nextHopDrgAttachmentId")]
        public Output<string> NextHopDrgAttachmentId { get; private set; } = null!;

        /// <summary>
        /// The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route's provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
        /// </summary>
        [Output("routeProvenance")]
        public Output<string> RouteProvenance { get; private set; } = null!;

        /// <summary>
        /// You can specify static routes for the DRG route table using the API. The DRG learns dynamic routes from the DRG attachments using various routing protocols.
        /// </summary>
        [Output("routeType")]
        public Output<string> RouteType { get; private set; } = null!;


        /// <summary>
        /// Create a DrgRouteTableRouteRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DrgRouteTableRouteRule(string name, DrgRouteTableRouteRuleArgs args, CustomResourceOptions? options = null)
            : base("oci:Core/drgRouteTableRouteRule:DrgRouteTableRouteRule", name, args ?? new DrgRouteTableRouteRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DrgRouteTableRouteRule(string name, Input<string> id, DrgRouteTableRouteRuleState? state = null, CustomResourceOptions? options = null)
            : base("oci:Core/drgRouteTableRouteRule:DrgRouteTableRouteRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DrgRouteTableRouteRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DrgRouteTableRouteRule Get(string name, Input<string> id, DrgRouteTableRouteRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new DrgRouteTableRouteRule(name, id, state, options);
        }
    }

    public sealed class DrgRouteTableRouteRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
        /// 
        /// Potential values:
        /// * IP address range in CIDR notation. This can be an IPv4 or IPv6 CIDR. For example: `192.168.1.0/24` or `2001:0db8:0123:45::/56`.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
        /// </summary>
        [Input("destinationType", required: true)]
        public Input<string> DestinationType { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
        /// </summary>
        [Input("drgRouteTableId", required: true)]
        public Input<string> DrgRouteTableId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("nextHopDrgAttachmentId", required: true)]
        public Input<string> NextHopDrgAttachmentId { get; set; } = null!;

        public DrgRouteTableRouteRuleArgs()
        {
        }
        public static new DrgRouteTableRouteRuleArgs Empty => new DrgRouteTableRouteRuleArgs();
    }

    public sealed class DrgRouteTableRouteRuleState : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<object>? _attributes;

        /// <summary>
        /// Additional properties for the route, computed by the service.
        /// </summary>
        public InputMap<object> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<object>());
            set => _attributes = value;
        }

        /// <summary>
        /// (Updatable) This is the range of IP addresses used for matching when routing traffic. Only CIDR_BLOCK values are allowed.
        /// 
        /// Potential values:
        /// * IP address range in CIDR notation. This can be an IPv4 or IPv6 CIDR. For example: `192.168.1.0/24` or `2001:0db8:0123:45::/56`.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Type of destination for the rule. Required if `direction` = `EGRESS`. Allowed values:
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG route table.
        /// </summary>
        [Input("drgRouteTableId")]
        public Input<string>? DrgRouteTableId { get; set; }

        /// <summary>
        /// Indicates that if the next hop attachment does not exist, so traffic for this route is discarded without notification.
        /// </summary>
        [Input("isBlackhole")]
        public Input<bool>? IsBlackhole { get; set; }

        /// <summary>
        /// Indicates that the route was not imported due to a conflict between route rules.
        /// </summary>
        [Input("isConflict")]
        public Input<bool>? IsConflict { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the next hop DRG attachment. The next hop DRG attachment is responsible for reaching the network destination.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("nextHopDrgAttachmentId")]
        public Input<string>? NextHopDrgAttachmentId { get; set; }

        /// <summary>
        /// The earliest origin of a route. If a route is advertised to a DRG through an IPsec tunnel attachment, and is propagated to peered DRGs via RPC attachments, the route's provenance in the peered DRGs remains `IPSEC_TUNNEL`, because that is the earliest origin.
        /// </summary>
        [Input("routeProvenance")]
        public Input<string>? RouteProvenance { get; set; }

        /// <summary>
        /// You can specify static routes for the DRG route table using the API. The DRG learns dynamic routes from the DRG attachments using various routing protocols.
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        public DrgRouteTableRouteRuleState()
        {
        }
        public static new DrgRouteTableRouteRuleState Empty => new DrgRouteTableRouteRuleState();
    }
}
