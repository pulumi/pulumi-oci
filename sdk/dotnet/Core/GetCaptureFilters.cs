// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetCaptureFilters
    {
        /// <summary>
        /// This data source provides the list of Capture Filters in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the capture filters in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCaptureFilters = Oci.Core.GetCaptureFilters.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = captureFilterDisplayName,
        ///         FilterType = captureFilterFilterType,
        ///         State = captureFilterState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCaptureFiltersResult> InvokeAsync(GetCaptureFiltersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCaptureFiltersResult>("oci:Core/getCaptureFilters:getCaptureFilters", args ?? new GetCaptureFiltersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Capture Filters in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the capture filters in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCaptureFilters = Oci.Core.GetCaptureFilters.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = captureFilterDisplayName,
        ///         FilterType = captureFilterFilterType,
        ///         State = captureFilterState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCaptureFiltersResult> Invoke(GetCaptureFiltersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCaptureFiltersResult>("oci:Core/getCaptureFilters:getCaptureFilters", args ?? new GetCaptureFiltersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCaptureFiltersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given capture filterType. The filterType value is the string representation of enum - VTAP, FLOWLOG.
        /// </summary>
        [Input("filterType")]
        public string? FilterType { get; set; }

        [Input("filters")]
        private List<Inputs.GetCaptureFiltersFilterArgs>? _filters;
        public List<Inputs.GetCaptureFiltersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCaptureFiltersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given capture filter lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCaptureFiltersArgs()
        {
        }
        public static new GetCaptureFiltersArgs Empty => new GetCaptureFiltersArgs();
    }

    public sealed class GetCaptureFiltersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given capture filterType. The filterType value is the string representation of enum - VTAP, FLOWLOG.
        /// </summary>
        [Input("filterType")]
        public Input<string>? FilterType { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCaptureFiltersFilterInputArgs>? _filters;
        public InputList<Inputs.GetCaptureFiltersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCaptureFiltersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given capture filter lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCaptureFiltersInvokeArgs()
        {
        }
        public static new GetCaptureFiltersInvokeArgs Empty => new GetCaptureFiltersInvokeArgs();
    }


    [OutputType]
    public sealed class GetCaptureFiltersResult
    {
        /// <summary>
        /// The list of capture_filters.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterResult> CaptureFilters;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the capture filter.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Indicates which service will use this capture filter
        /// </summary>
        public readonly string? FilterType;
        public readonly ImmutableArray<Outputs.GetCaptureFiltersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The capture filter's current administrative state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCaptureFiltersResult(
            ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterResult> captureFilters,

            string compartmentId,

            string? displayName,

            string? filterType,

            ImmutableArray<Outputs.GetCaptureFiltersFilterResult> filters,

            string id,

            string? state)
        {
            CaptureFilters = captureFilters;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            FilterType = filterType;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
