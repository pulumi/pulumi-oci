// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetCrossConnectStatus
    {
        /// <summary>
        /// This data source provides details about a specific Cross Connect Status resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the status of the specified cross-connect.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCrossConnectStatus = Oci.Core.GetCrossConnectStatus.Invoke(new()
        ///     {
        ///         CrossConnectId = oci_core_cross_connect.Test_cross_connect.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCrossConnectStatusResult> InvokeAsync(GetCrossConnectStatusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCrossConnectStatusResult>("oci:Core/getCrossConnectStatus:getCrossConnectStatus", args ?? new GetCrossConnectStatusArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Cross Connect Status resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the status of the specified cross-connect.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCrossConnectStatus = Oci.Core.GetCrossConnectStatus.Invoke(new()
        ///     {
        ///         CrossConnectId = oci_core_cross_connect.Test_cross_connect.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCrossConnectStatusResult> Invoke(GetCrossConnectStatusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCrossConnectStatusResult>("oci:Core/getCrossConnectStatus:getCrossConnectStatus", args ?? new GetCrossConnectStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCrossConnectStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
        /// </summary>
        [Input("crossConnectId", required: true)]
        public string CrossConnectId { get; set; } = null!;

        public GetCrossConnectStatusArgs()
        {
        }
        public static new GetCrossConnectStatusArgs Empty => new GetCrossConnectStatusArgs();
    }

    public sealed class GetCrossConnectStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
        /// </summary>
        [Input("crossConnectId", required: true)]
        public Input<string> CrossConnectId { get; set; } = null!;

        public GetCrossConnectStatusInvokeArgs()
        {
        }
        public static new GetCrossConnectStatusInvokeArgs Empty => new GetCrossConnectStatusInvokeArgs();
    }


    [OutputType]
    public sealed class GetCrossConnectStatusResult
    {
        /// <summary>
        /// The OCID of the cross-connect.
        /// </summary>
        public readonly string CrossConnectId;
        /// <summary>
        /// Encryption status of the CrossConnect
        /// </summary>
        public readonly string EncryptionStatus;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether Oracle's side of the interface is up or down.
        /// </summary>
        public readonly string InterfaceState;
        /// <summary>
        /// The light level of the cross-connect (in dBm).  Example: `14.0`
        /// </summary>
        public readonly double LightLevelIndBm;
        /// <summary>
        /// Status indicator corresponding to the light level.
        /// * **NO_LIGHT:** No measurable light
        /// * **LOW_WARN:** There's measurable light but it's too low
        /// * **HIGH_WARN:** Light level is too high
        /// * **BAD:** There's measurable light but the signal-to-noise ratio is bad
        /// * **GOOD:** Good light level
        /// </summary>
        public readonly string LightLevelIndicator;

        [OutputConstructor]
        private GetCrossConnectStatusResult(
            string crossConnectId,

            string encryptionStatus,

            string id,

            string interfaceState,

            double lightLevelIndBm,

            string lightLevelIndicator)
        {
            CrossConnectId = crossConnectId;
            EncryptionStatus = encryptionStatus;
            Id = id;
            InterfaceState = interfaceState;
            LightLevelIndBm = lightLevelIndBm;
            LightLevelIndicator = lightLevelIndicator;
        }
    }
}
