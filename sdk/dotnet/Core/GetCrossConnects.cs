// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetCrossConnects
    {
        /// <summary>
        /// This data source provides the list of Cross Connects in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the cross-connects in the specified compartment. You can filter the list
        /// by specifying the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a cross-connect group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCrossConnects = Oci.Core.GetCrossConnects.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CrossConnectGroupId = testCrossConnectGroup.Id,
        ///         DisplayName = crossConnectDisplayName,
        ///         State = crossConnectState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCrossConnectsResult> InvokeAsync(GetCrossConnectsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCrossConnectsResult>("oci:Core/getCrossConnects:getCrossConnects", args ?? new GetCrossConnectsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Cross Connects in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the cross-connects in the specified compartment. You can filter the list
        /// by specifying the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a cross-connect group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCrossConnects = Oci.Core.GetCrossConnects.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CrossConnectGroupId = testCrossConnectGroup.Id,
        ///         DisplayName = crossConnectDisplayName,
        ///         State = crossConnectState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCrossConnectsResult> Invoke(GetCrossConnectsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCrossConnectsResult>("oci:Core/getCrossConnects:getCrossConnects", args ?? new GetCrossConnectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCrossConnectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
        /// </summary>
        [Input("crossConnectGroupId")]
        public string? CrossConnectGroupId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetCrossConnectsFilterArgs>? _filters;
        public List<Inputs.GetCrossConnectsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCrossConnectsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCrossConnectsArgs()
        {
        }
        public static new GetCrossConnectsArgs Empty => new GetCrossConnectsArgs();
    }

    public sealed class GetCrossConnectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
        /// </summary>
        [Input("crossConnectGroupId")]
        public Input<string>? CrossConnectGroupId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCrossConnectsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCrossConnectsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCrossConnectsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCrossConnectsInvokeArgs()
        {
        }
        public static new GetCrossConnectsInvokeArgs Empty => new GetCrossConnectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCrossConnectsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the cross-connect group.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group this cross-connect belongs to (if any).
        /// </summary>
        public readonly string? CrossConnectGroupId;
        /// <summary>
        /// The list of cross_connects.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCrossConnectsCrossConnectResult> CrossConnects;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetCrossConnectsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The cross-connect's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCrossConnectsResult(
            string compartmentId,

            string? crossConnectGroupId,

            ImmutableArray<Outputs.GetCrossConnectsCrossConnectResult> crossConnects,

            string? displayName,

            ImmutableArray<Outputs.GetCrossConnectsFilterResult> filters,

            string id,

            string? state)
        {
            CompartmentId = compartmentId;
            CrossConnectGroupId = crossConnectGroupId;
            CrossConnects = crossConnects;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
