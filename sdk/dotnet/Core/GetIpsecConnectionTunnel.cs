// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetIpsecConnectionTunnel
    {
        /// <summary>
        /// This data source provides details about a specific Ip Sec Connection Tunnel resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the specified IPSec connection's specified tunnel basic information.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIpSecConnectionTunnel = Oci.Core.GetIpsecConnectionTunnel.Invoke(new()
        ///     {
        ///         IpsecId = oci_core_ipsec.Test_ipsec.Id,
        ///         TunnelId = data.Oci_core_ipsec_connection_tunnels.Test_ip_sec_connection_tunnels.Ip_sec_connection_tunnels[0].Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpsecConnectionTunnelResult> InvokeAsync(GetIpsecConnectionTunnelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpsecConnectionTunnelResult>("oci:Core/getIpsecConnectionTunnel:getIpsecConnectionTunnel", args ?? new GetIpsecConnectionTunnelArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Ip Sec Connection Tunnel resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the specified IPSec connection's specified tunnel basic information.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIpSecConnectionTunnel = Oci.Core.GetIpsecConnectionTunnel.Invoke(new()
        ///     {
        ///         IpsecId = oci_core_ipsec.Test_ipsec.Id,
        ///         TunnelId = data.Oci_core_ipsec_connection_tunnels.Test_ip_sec_connection_tunnels.Ip_sec_connection_tunnels[0].Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsecConnectionTunnelResult> Invoke(GetIpsecConnectionTunnelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecConnectionTunnelResult>("oci:Core/getIpsecConnectionTunnel:getIpsecConnectionTunnel", args ?? new GetIpsecConnectionTunnelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpsecConnectionTunnelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the IPSec connection.
        /// </summary>
        [Input("ipsecId", required: true)]
        public string IpsecId { get; set; } = null!;

        /// <summary>
        /// The OCID of the IPSec connection's tunnel.
        /// </summary>
        [Input("tunnelId", required: true)]
        public string TunnelId { get; set; } = null!;

        public GetIpsecConnectionTunnelArgs()
        {
        }
        public static new GetIpsecConnectionTunnelArgs Empty => new GetIpsecConnectionTunnelArgs();
    }

    public sealed class GetIpsecConnectionTunnelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the IPSec connection.
        /// </summary>
        [Input("ipsecId", required: true)]
        public Input<string> IpsecId { get; set; } = null!;

        /// <summary>
        /// The OCID of the IPSec connection's tunnel.
        /// </summary>
        [Input("tunnelId", required: true)]
        public Input<string> TunnelId { get; set; } = null!;

        public GetIpsecConnectionTunnelInvokeArgs()
        {
        }
        public static new GetIpsecConnectionTunnelInvokeArgs Empty => new GetIpsecConnectionTunnelInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpsecConnectionTunnelResult
    {
        public readonly ImmutableArray<string> AssociatedVirtualCircuits;
        /// <summary>
        /// Information needed to establish a BGP Session on an interface.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelBgpSessionInfoResult> BgpSessionInfos;
        /// <summary>
        /// The OCID of the compartment containing the tunnel.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The IP address of Cpe headend.  Example: `129.146.17.50`
        /// </summary>
        public readonly string CpeIp;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelDpdConfigResult> DpdConfigs;
        /// <summary>
        /// Dead peer detection (DPD) mode set on the Oracle side of the connection.
        /// </summary>
        public readonly string DpdMode;
        /// <summary>
        /// DPD timeout in seconds.
        /// </summary>
        public readonly int DpdTimeoutInSec;
        /// <summary>
        /// Configuration information used by the encryption domain policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelEncryptionDomainConfigResult> EncryptionDomainConfigs;
        /// <summary>
        /// The tunnel's Oracle ID (OCID).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Internet Key Exchange protocol version.
        /// </summary>
        public readonly string IkeVersion;
        public readonly string IpsecId;
        /// <summary>
        /// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
        /// </summary>
        public readonly string NatTranslationEnabled;
        /// <summary>
        /// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
        /// </summary>
        public readonly string OracleCanInitiate;
        /// <summary>
        /// IPSec tunnel details specific to ISAKMP phase one.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelPhaseOneDetailResult> PhaseOneDetails;
        /// <summary>
        /// IPsec tunnel detail information specific to phase two.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelPhaseTwoDetailResult> PhaseTwoDetails;
        /// <summary>
        /// the routing strategy used for this tunnel, either static route or BGP dynamic routing
        /// </summary>
        public readonly string Routing;
        public readonly string SharedSecret;
        /// <summary>
        /// The IPSec connection's tunnel's lifecycle state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The tunnel's current state.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string TimeStatusUpdated;
        public readonly string TunnelId;
        /// <summary>
        /// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
        /// </summary>
        public readonly string VpnIp;

        [OutputConstructor]
        private GetIpsecConnectionTunnelResult(
            ImmutableArray<string> associatedVirtualCircuits,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelBgpSessionInfoResult> bgpSessionInfos,

            string compartmentId,

            string cpeIp,

            string displayName,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelDpdConfigResult> dpdConfigs,

            string dpdMode,

            int dpdTimeoutInSec,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelEncryptionDomainConfigResult> encryptionDomainConfigs,

            string id,

            string ikeVersion,

            string ipsecId,

            string natTranslationEnabled,

            string oracleCanInitiate,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelPhaseOneDetailResult> phaseOneDetails,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelPhaseTwoDetailResult> phaseTwoDetails,

            string routing,

            string sharedSecret,

            string state,

            string status,

            string timeCreated,

            string timeStatusUpdated,

            string tunnelId,

            string vpnIp)
        {
            AssociatedVirtualCircuits = associatedVirtualCircuits;
            BgpSessionInfos = bgpSessionInfos;
            CompartmentId = compartmentId;
            CpeIp = cpeIp;
            DisplayName = displayName;
            DpdConfigs = dpdConfigs;
            DpdMode = dpdMode;
            DpdTimeoutInSec = dpdTimeoutInSec;
            EncryptionDomainConfigs = encryptionDomainConfigs;
            Id = id;
            IkeVersion = ikeVersion;
            IpsecId = ipsecId;
            NatTranslationEnabled = natTranslationEnabled;
            OracleCanInitiate = oracleCanInitiate;
            PhaseOneDetails = phaseOneDetails;
            PhaseTwoDetails = phaseTwoDetails;
            Routing = routing;
            SharedSecret = sharedSecret;
            State = state;
            Status = status;
            TimeCreated = timeCreated;
            TimeStatusUpdated = timeStatusUpdated;
            TunnelId = tunnelId;
            VpnIp = vpnIp;
        }
    }
}
