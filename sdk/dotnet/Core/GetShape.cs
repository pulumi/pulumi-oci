// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetShape
    {
        public static Task<GetShapeResult> InvokeAsync(GetShapeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetShapeResult>("oci:Core/getShape:getShape", args ?? new GetShapeArgs(), options.WithDefaults());

        public static Output<GetShapeResult> Invoke(GetShapeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetShapeResult>("oci:Core/getShape:getShape", args ?? new GetShapeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShapeArgs : global::Pulumi.InvokeArgs
    {
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetShapeFilterArgs>? _filters;
        public List<Inputs.GetShapeFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetShapeFilterArgs>());
            set => _filters = value;
        }

        [Input("imageId")]
        public string? ImageId { get; set; }

        public GetShapeArgs()
        {
        }
        public static new GetShapeArgs Empty => new GetShapeArgs();
    }

    public sealed class GetShapeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetShapeFilterInputArgs>? _filters;
        public InputList<Inputs.GetShapeFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetShapeFilterInputArgs>());
            set => _filters = value;
        }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        public GetShapeInvokeArgs()
        {
        }
        public static new GetShapeInvokeArgs Empty => new GetShapeInvokeArgs();
    }


    [OutputType]
    public sealed class GetShapeResult
    {
        public readonly string? AvailabilityDomain;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetShapeFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ImageId;
        public readonly ImmutableArray<Outputs.GetShapeShapeResult> Shapes;

        [OutputConstructor]
        private GetShapeResult(
            string? availabilityDomain,

            string compartmentId,

            ImmutableArray<Outputs.GetShapeFilterResult> filters,

            string id,

            string? imageId,

            ImmutableArray<Outputs.GetShapeShapeResult> shapes)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            ImageId = imageId;
            Shapes = shapes;
        }
    }
}
