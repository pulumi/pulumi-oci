// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetVirtualCircuitAssociatedTunnels
    {
        /// <summary>
        /// This data source provides the list of Virtual Circuit Associated Tunnels in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the specified virtual circuit's associatedTunnelsInfo.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualCircuitAssociatedTunnels = Oci.Core.GetVirtualCircuitAssociatedTunnels.Invoke(new()
        ///     {
        ///         VirtualCircuitId = oci_core_virtual_circuit.Test_virtual_circuit.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVirtualCircuitAssociatedTunnelsResult> InvokeAsync(GetVirtualCircuitAssociatedTunnelsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualCircuitAssociatedTunnelsResult>("oci:Core/getVirtualCircuitAssociatedTunnels:getVirtualCircuitAssociatedTunnels", args ?? new GetVirtualCircuitAssociatedTunnelsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Virtual Circuit Associated Tunnels in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets the specified virtual circuit's associatedTunnelsInfo.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualCircuitAssociatedTunnels = Oci.Core.GetVirtualCircuitAssociatedTunnels.Invoke(new()
        ///     {
        ///         VirtualCircuitId = oci_core_virtual_circuit.Test_virtual_circuit.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualCircuitAssociatedTunnelsResult> Invoke(GetVirtualCircuitAssociatedTunnelsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualCircuitAssociatedTunnelsResult>("oci:Core/getVirtualCircuitAssociatedTunnels:getVirtualCircuitAssociatedTunnels", args ?? new GetVirtualCircuitAssociatedTunnelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualCircuitAssociatedTunnelsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVirtualCircuitAssociatedTunnelsFilterArgs>? _filters;
        public List<Inputs.GetVirtualCircuitAssociatedTunnelsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVirtualCircuitAssociatedTunnelsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit.
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public string VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitAssociatedTunnelsArgs()
        {
        }
        public static new GetVirtualCircuitAssociatedTunnelsArgs Empty => new GetVirtualCircuitAssociatedTunnelsArgs();
    }

    public sealed class GetVirtualCircuitAssociatedTunnelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVirtualCircuitAssociatedTunnelsFilterInputArgs>? _filters;
        public InputList<Inputs.GetVirtualCircuitAssociatedTunnelsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVirtualCircuitAssociatedTunnelsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit.
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public Input<string> VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitAssociatedTunnelsInvokeArgs()
        {
        }
        public static new GetVirtualCircuitAssociatedTunnelsInvokeArgs Empty => new GetVirtualCircuitAssociatedTunnelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualCircuitAssociatedTunnelsResult
    {
        public readonly ImmutableArray<Outputs.GetVirtualCircuitAssociatedTunnelsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of virtual_circuit_associated_tunnel_details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualCircuitAssociatedTunnelsVirtualCircuitAssociatedTunnelDetailResult> VirtualCircuitAssociatedTunnelDetails;
        public readonly string VirtualCircuitId;

        [OutputConstructor]
        private GetVirtualCircuitAssociatedTunnelsResult(
            ImmutableArray<Outputs.GetVirtualCircuitAssociatedTunnelsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetVirtualCircuitAssociatedTunnelsVirtualCircuitAssociatedTunnelDetailResult> virtualCircuitAssociatedTunnelDetails,

            string virtualCircuitId)
        {
            Filters = filters;
            Id = id;
            VirtualCircuitAssociatedTunnelDetails = virtualCircuitAssociatedTunnelDetails;
            VirtualCircuitId = virtualCircuitId;
        }
    }
}
