// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetVirtualCircuitPublicPrefixes
    {
        /// <summary>
        /// This data source provides the list of Virtual Circuit Public Prefixes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the public IP prefixes and their details for the specified
        /// public virtual circuit.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualCircuitPublicPrefixes = Oci.Core.GetVirtualCircuitPublicPrefixes.Invoke(new()
        ///     {
        ///         VirtualCircuitId = testVirtualCircuit.Id,
        ///         VerificationState = virtualCircuitPublicPrefixVerificationState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVirtualCircuitPublicPrefixesResult> InvokeAsync(GetVirtualCircuitPublicPrefixesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualCircuitPublicPrefixesResult>("oci:Core/getVirtualCircuitPublicPrefixes:getVirtualCircuitPublicPrefixes", args ?? new GetVirtualCircuitPublicPrefixesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Virtual Circuit Public Prefixes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the public IP prefixes and their details for the specified
        /// public virtual circuit.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualCircuitPublicPrefixes = Oci.Core.GetVirtualCircuitPublicPrefixes.Invoke(new()
        ///     {
        ///         VirtualCircuitId = testVirtualCircuit.Id,
        ///         VerificationState = virtualCircuitPublicPrefixVerificationState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualCircuitPublicPrefixesResult> Invoke(GetVirtualCircuitPublicPrefixesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualCircuitPublicPrefixesResult>("oci:Core/getVirtualCircuitPublicPrefixes:getVirtualCircuitPublicPrefixes", args ?? new GetVirtualCircuitPublicPrefixesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Virtual Circuit Public Prefixes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the public IP prefixes and their details for the specified
        /// public virtual circuit.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualCircuitPublicPrefixes = Oci.Core.GetVirtualCircuitPublicPrefixes.Invoke(new()
        ///     {
        ///         VirtualCircuitId = testVirtualCircuit.Id,
        ///         VerificationState = virtualCircuitPublicPrefixVerificationState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualCircuitPublicPrefixesResult> Invoke(GetVirtualCircuitPublicPrefixesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualCircuitPublicPrefixesResult>("oci:Core/getVirtualCircuitPublicPrefixes:getVirtualCircuitPublicPrefixes", args ?? new GetVirtualCircuitPublicPrefixesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualCircuitPublicPrefixesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVirtualCircuitPublicPrefixesFilterArgs>? _filters;
        public List<Inputs.GetVirtualCircuitPublicPrefixesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVirtualCircuitPublicPrefixesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given verification state.
        /// 
        /// The state value is case-insensitive.
        /// </summary>
        [Input("verificationState")]
        public string? VerificationState { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit.
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public string VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitPublicPrefixesArgs()
        {
        }
        public static new GetVirtualCircuitPublicPrefixesArgs Empty => new GetVirtualCircuitPublicPrefixesArgs();
    }

    public sealed class GetVirtualCircuitPublicPrefixesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVirtualCircuitPublicPrefixesFilterInputArgs>? _filters;
        public InputList<Inputs.GetVirtualCircuitPublicPrefixesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVirtualCircuitPublicPrefixesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given verification state.
        /// 
        /// The state value is case-insensitive.
        /// </summary>
        [Input("verificationState")]
        public Input<string>? VerificationState { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit.
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public Input<string> VirtualCircuitId { get; set; } = null!;

        public GetVirtualCircuitPublicPrefixesInvokeArgs()
        {
        }
        public static new GetVirtualCircuitPublicPrefixesInvokeArgs Empty => new GetVirtualCircuitPublicPrefixesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualCircuitPublicPrefixesResult
    {
        public readonly ImmutableArray<Outputs.GetVirtualCircuitPublicPrefixesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Oracle must verify that the customer owns the public IP prefix before traffic for that prefix can flow across the virtual circuit. Verification can take a few business days. `IN_PROGRESS` means Oracle is verifying the prefix. `COMPLETED` means verification succeeded. `FAILED` means verification failed and traffic for this prefix will not flow across the connection.
        /// </summary>
        public readonly string? VerificationState;
        public readonly string VirtualCircuitId;
        /// <summary>
        /// The list of virtual_circuit_public_prefixes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult> VirtualCircuitPublicPrefixes;

        [OutputConstructor]
        private GetVirtualCircuitPublicPrefixesResult(
            ImmutableArray<Outputs.GetVirtualCircuitPublicPrefixesFilterResult> filters,

            string id,

            string? verificationState,

            string virtualCircuitId,

            ImmutableArray<Outputs.GetVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult> virtualCircuitPublicPrefixes)
        {
            Filters = filters;
            Id = id;
            VerificationState = verificationState;
            VirtualCircuitId = virtualCircuitId;
            VirtualCircuitPublicPrefixes = virtualCircuitPublicPrefixes;
        }
    }
}
