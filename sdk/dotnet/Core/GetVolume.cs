// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetVolume
    {
        /// <summary>
        /// This data source provides details about a specific Volume resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets information for the specified volume.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVolume = Oci.Core.GetVolume.Invoke(new()
        ///     {
        ///         VolumeId = testVolumeOciCoreVolume.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("oci:Core/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Volume resource in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets information for the specified volume.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVolume = Oci.Core.GetVolume.Invoke(new()
        ///     {
        ///         VolumeId = testVolumeOciCoreVolume.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("oci:Core/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public string VolumeId { get; set; } = null!;

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the volume.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// The number of Volume Performance Units per GB that this volume is effectively tuned to.
        /// </summary>
        public readonly string AutoTunedVpusPerGb;
        /// <summary>
        /// The list of autotune policies enabled for this volume.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeAutotunePolicyResult> AutotunePolicies;
        /// <summary>
        /// The availability domain of the block volume replica.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        public readonly string AvailabilityDomain;
        public readonly string BackupPolicyId;
        /// <summary>
        /// The list of block volume replicas of this volume.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeBlockVolumeReplicaResult> BlockVolumeReplicas;
        public readonly bool BlockVolumeReplicasDeletion;
        /// <summary>
        /// The clusterPlacementGroup Id of the volume for volume placement.
        /// </summary>
        public readonly string ClusterPlacementGroupId;
        /// <summary>
        /// The OCID of the compartment that contains the volume.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the block volume replica.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether the auto-tune performance is enabled for this volume. This field is deprecated. Use the `DetachedVolumeAutotunePolicy` instead to enable the volume for detached autotune.
        /// </summary>
        public readonly bool IsAutoTuneEnabled;
        /// <summary>
        /// Specifies whether the cloned volume's data has finished copying from the source volume or backup.
        /// </summary>
        public readonly bool IsHydrated;
        /// <summary>
        /// The OCID of the Vault service key which is the master encryption key for the volume.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// The size of the volume in GBs.
        /// </summary>
        public readonly string SizeInGbs;
        /// <summary>
        /// The size of the volume in MBs. This field is deprecated. Use sizeInGBs instead.
        /// </summary>
        public readonly string SizeInMbs;
        public readonly ImmutableArray<Outputs.GetVolumeSourceDetailResult> SourceDetails;
        /// <summary>
        /// The current state of a volume.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The date and time the volume was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        public readonly string VolumeBackupId;
        /// <summary>
        /// The OCID of the source volume group.
        /// </summary>
        public readonly string VolumeGroupId;
        public readonly string VolumeId;
        /// <summary>
        /// The number of volume performance units (VPUs) that will be applied to this volume per GB, representing the Block Volume service's elastic performance options. See [Block Volume Performance Levels](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumeperformance.htm#perf_levels) for more information.
        /// </summary>
        public readonly string VpusPerGb;

        [OutputConstructor]
        private GetVolumeResult(
            string autoTunedVpusPerGb,

            ImmutableArray<Outputs.GetVolumeAutotunePolicyResult> autotunePolicies,

            string availabilityDomain,

            string backupPolicyId,

            ImmutableArray<Outputs.GetVolumeBlockVolumeReplicaResult> blockVolumeReplicas,

            bool blockVolumeReplicasDeletion,

            string clusterPlacementGroupId,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isAutoTuneEnabled,

            bool isHydrated,

            string kmsKeyId,

            string sizeInGbs,

            string sizeInMbs,

            ImmutableArray<Outputs.GetVolumeSourceDetailResult> sourceDetails,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string volumeBackupId,

            string volumeGroupId,

            string volumeId,

            string vpusPerGb)
        {
            AutoTunedVpusPerGb = autoTunedVpusPerGb;
            AutotunePolicies = autotunePolicies;
            AvailabilityDomain = availabilityDomain;
            BackupPolicyId = backupPolicyId;
            BlockVolumeReplicas = blockVolumeReplicas;
            BlockVolumeReplicasDeletion = blockVolumeReplicasDeletion;
            ClusterPlacementGroupId = clusterPlacementGroupId;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsAutoTuneEnabled = isAutoTuneEnabled;
            IsHydrated = isHydrated;
            KmsKeyId = kmsKeyId;
            SizeInGbs = sizeInGbs;
            SizeInMbs = sizeInMbs;
            SourceDetails = sourceDetails;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            VolumeBackupId = volumeBackupId;
            VolumeGroupId = volumeGroupId;
            VolumeId = volumeId;
            VpusPerGb = vpusPerGb;
        }
    }
}
