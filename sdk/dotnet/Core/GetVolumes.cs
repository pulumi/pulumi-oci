// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetVolumes
    {
        /// <summary>
        /// This data source provides the list of Volumes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the volumes in the specified compartment and availability domain.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVolumes = Oci.Core.GetVolumes.Invoke(new()
        ///     {
        ///         AvailabilityDomain = @var.Volume_availability_domain,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Volume_display_name,
        ///         State = @var.Volume_state,
        ///         VolumeGroupId = oci_core_volume_group.Test_volume_group.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVolumesResult> InvokeAsync(GetVolumesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumesResult>("oci:Core/getVolumes:getVolumes", args ?? new GetVolumesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Volumes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the volumes in the specified compartment and availability domain.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVolumes = Oci.Core.GetVolumes.Invoke(new()
        ///     {
        ///         AvailabilityDomain = @var.Volume_availability_domain,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Volume_display_name,
        ///         State = @var.Volume_state,
        ///         VolumeGroupId = oci_core_volume_group.Test_volume_group.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVolumesResult> Invoke(GetVolumesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumesResult>("oci:Core/getVolumes:getVolumes", args ?? new GetVolumesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetVolumesFilterArgs>? _filters;
        public List<Inputs.GetVolumesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVolumesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The OCID of the volume group.
        /// </summary>
        [Input("volumeGroupId")]
        public string? VolumeGroupId { get; set; }

        public GetVolumesArgs()
        {
        }
        public static new GetVolumesArgs Empty => new GetVolumesArgs();
    }

    public sealed class GetVolumesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVolumesFilterInputArgs>? _filters;
        public InputList<Inputs.GetVolumesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVolumesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the volume group.
        /// </summary>
        [Input("volumeGroupId")]
        public Input<string>? VolumeGroupId { get; set; }

        public GetVolumesInvokeArgs()
        {
        }
        public static new GetVolumesInvokeArgs Empty => new GetVolumesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumesResult
    {
        /// <summary>
        /// The availability domain of the block volume replica.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        public readonly string? AvailabilityDomain;
        /// <summary>
        /// The OCID of the compartment that contains the volume.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetVolumesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of a volume.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the source volume group.
        /// </summary>
        public readonly string? VolumeGroupId;
        /// <summary>
        /// The list of volumes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumesVolumeResult> Volumes;

        [OutputConstructor]
        private GetVolumesResult(
            string? availabilityDomain,

            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetVolumesFilterResult> filters,

            string id,

            string? state,

            string? volumeGroupId,

            ImmutableArray<Outputs.GetVolumesVolumeResult> volumes)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            VolumeGroupId = volumeGroupId;
            Volumes = volumes;
        }
    }
}
