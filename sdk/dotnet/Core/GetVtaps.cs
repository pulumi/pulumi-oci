// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    public static class GetVtaps
    {
        /// <summary>
        /// This data source provides the list of Vtaps in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the virtual test access points (VTAPs) in the specified compartment.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVtaps = Oci.Core.GetVtaps.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Vtap_display_name,
        ///         IsVtapEnabled = @var.Vtap_is_vtap_enabled,
        ///         Source = @var.Vtap_source,
        ///         State = @var.Vtap_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TargetIp = @var.Vtap_target_ip,
        ///         VcnId = oci_core_vcn.Test_vcn.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVtapsResult> InvokeAsync(GetVtapsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVtapsResult>("oci:Core/getVtaps:getVtaps", args ?? new GetVtapsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vtaps in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the virtual test access points (VTAPs) in the specified compartment.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVtaps = Oci.Core.GetVtaps.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Vtap_display_name,
        ///         IsVtapEnabled = @var.Vtap_is_vtap_enabled,
        ///         Source = @var.Vtap_source,
        ///         State = @var.Vtap_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TargetIp = @var.Vtap_target_ip,
        ///         VcnId = oci_core_vcn.Test_vcn.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVtapsResult> Invoke(GetVtapsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVtapsResult>("oci:Core/getVtaps:getVtaps", args ?? new GetVtapsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVtapsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetVtapsFilterArgs>? _filters;
        public List<Inputs.GetVtapsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVtapsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether to list all VTAPs or only running VTAPs.
        /// * When `FALSE`, lists ALL running and stopped VTAPs.
        /// * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
        /// </summary>
        [Input("isVtapEnabled")]
        public bool? IsVtapEnabled { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
        /// </summary>
        [Input("source")]
        public string? Source { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// The IP address of the VTAP target.
        /// </summary>
        [Input("targetIp")]
        public string? TargetIp { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        /// </summary>
        [Input("vcnId")]
        public string? VcnId { get; set; }

        public GetVtapsArgs()
        {
        }
        public static new GetVtapsArgs Empty => new GetVtapsArgs();
    }

    public sealed class GetVtapsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVtapsFilterInputArgs>? _filters;
        public InputList<Inputs.GetVtapsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVtapsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether to list all VTAPs or only running VTAPs.
        /// * When `FALSE`, lists ALL running and stopped VTAPs.
        /// * When `TRUE`, lists only running VTAPs (VTAPs where isVtapEnabled = `TRUE`).
        /// </summary>
        [Input("isVtapEnabled")]
        public Input<bool>? IsVtapEnabled { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP source.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given VTAP administrative lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VTAP target.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The IP address of the VTAP target.
        /// </summary>
        [Input("targetIp")]
        public Input<string>? TargetIp { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public GetVtapsInvokeArgs()
        {
        }
        public static new GetVtapsInvokeArgs Empty => new GetVtapsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVtapsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the `Vtap` resource.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetVtapsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Used to start or stop a `Vtap` resource.
        /// </summary>
        public readonly bool? IsVtapEnabled;
        public readonly string? Source;
        /// <summary>
        /// The VTAP's administrative lifecycle state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the destination resource where mirrored packets are sent.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The IP address of the destination resource where mirrored packets are sent.
        /// </summary>
        public readonly string? TargetIp;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN containing the `Vtap` resource.
        /// </summary>
        public readonly string? VcnId;
        /// <summary>
        /// The list of vtaps.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVtapsVtapResult> Vtaps;

        [OutputConstructor]
        private GetVtapsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetVtapsFilterResult> filters,

            string id,

            bool? isVtapEnabled,

            string? source,

            string? state,

            string? targetId,

            string? targetIp,

            string? vcnId,

            ImmutableArray<Outputs.GetVtapsVtapResult> vtaps)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            IsVtapEnabled = isVtapEnabled;
            Source = source;
            State = state;
            TargetId = targetId;
            TargetIp = targetIp;
            VcnId = vcnId;
            Vtaps = vtaps;
        }
    }
}
