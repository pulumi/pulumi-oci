// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Inputs
{

    public sealed class InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The baseline OCPU utilization for a subcore burstable VM instance. Leave this attribute blank for a non-burstable instance, or explicitly specify non-burstable with `BASELINE_1_1`.
        /// 
        /// The following values are supported:
        /// * `BASELINE_1_8` - baseline usage is 1/8 of an OCPU.
        /// * `BASELINE_1_2` - baseline usage is 1/2 of an OCPU.
        /// * `BASELINE_1_1` - baseline usage is an entire OCPU. This represents a non-burstable instance.
        /// </summary>
        [Input("baselineOcpuUtilization")]
        public Input<string>? BaselineOcpuUtilization { get; set; }

        /// <summary>
        /// The total amount of memory available to the instance, in gigabytes.
        /// </summary>
        [Input("memoryInGbs")]
        public Input<double>? MemoryInGbs { get; set; }

        /// <summary>
        /// The number of NVMe drives to be used for storage. A single drive has 6.8 TB available.
        /// </summary>
        [Input("nvmes")]
        public Input<int>? Nvmes { get; set; }

        /// <summary>
        /// The total number of OCPUs available to the instance.
        /// </summary>
        [Input("ocpus")]
        public Input<double>? Ocpus { get; set; }

        /// <summary>
        /// The total number of VCPUs available to the instance. This can be used instead of OCPUs, in which case the actual number of OCPUs will be calculated based on this value and the actual hardware. This must be a multiple of 2.
        /// </summary>
        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        public InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfigGetArgs()
        {
        }
        public static new InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfigGetArgs Empty => new InstanceConfigurationInstanceDetailsLaunchDetailsShapeConfigGetArgs();
    }
}
