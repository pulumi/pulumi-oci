// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Inputs
{

    public sealed class InstancePlatformConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether virtualization instructions are available. For example, Secure Virtual Machine for AMD shapes or VT-x for Intel shapes.
        /// </summary>
        [Input("areVirtualInstructionsEnabled")]
        public Input<bool>? AreVirtualInstructionsEnabled { get; set; }

        [Input("configMap")]
        private InputMap<string>? _configMap;

        /// <summary>
        /// Instance Platform Configuration Configuration Map for flexible setting input.
        /// </summary>
        public InputMap<string> ConfigMap
        {
            get => _configMap ?? (_configMap = new InputMap<string>());
            set => _configMap = value;
        }

        /// <summary>
        /// Whether the Access Control Service is enabled on the instance. When enabled, the platform can enforce PCIe device isolation, required for VFIO device pass-through.
        /// </summary>
        [Input("isAccessControlServiceEnabled")]
        public Input<bool>? IsAccessControlServiceEnabled { get; set; }

        /// <summary>
        /// Whether the input-output memory management unit is enabled.
        /// </summary>
        [Input("isInputOutputMemoryManagementUnitEnabled")]
        public Input<bool>? IsInputOutputMemoryManagementUnitEnabled { get; set; }

        /// <summary>
        /// Whether the Measured Boot feature is enabled on the instance.
        /// </summary>
        [Input("isMeasuredBootEnabled")]
        public Input<bool>? IsMeasuredBootEnabled { get; set; }

        /// <summary>
        /// Whether the instance is a confidential instance. If this value is `true`, the instance is a confidential instance. The default value is `false`.
        /// </summary>
        [Input("isMemoryEncryptionEnabled")]
        public Input<bool>? IsMemoryEncryptionEnabled { get; set; }

        /// <summary>
        /// Whether Secure Boot is enabled on the instance.
        /// </summary>
        [Input("isSecureBootEnabled")]
        public Input<bool>? IsSecureBootEnabled { get; set; }

        /// <summary>
        /// (Updatable only for INTEL_VM and AMD_VM) Whether symmetric multithreading is enabled on the instance. Symmetric multithreading is also called simultaneous multithreading (SMT) or Intel Hyper-Threading.
        /// 
        /// Intel and AMD processors have two hardware execution threads per core (OCPU). SMT permits multiple independent threads of execution, to better use the resources and increase the efficiency of the CPU. When multithreading is disabled, only one thread is permitted to run on each core, which can provide higher or more predictable performance for some workloads.
        /// </summary>
        [Input("isSymmetricMultiThreadingEnabled")]
        public Input<bool>? IsSymmetricMultiThreadingEnabled { get; set; }

        /// <summary>
        /// Whether the Trusted Platform Module (TPM) is enabled on the instance.
        /// </summary>
        [Input("isTrustedPlatformModuleEnabled")]
        public Input<bool>? IsTrustedPlatformModuleEnabled { get; set; }

        /// <summary>
        /// The number of NUMA nodes per socket (NPS).
        /// </summary>
        [Input("numaNodesPerSocket")]
        public Input<string>? NumaNodesPerSocket { get; set; }

        /// <summary>
        /// The percentage of cores enabled. Value must be a multiple of 25%. If the requested percentage results in a fractional number of cores, the system rounds up the number of cores across processors and provisions an instance with a whole number of cores.
        /// 
        /// If the applications that you run on the instance use a core-based licensing model and need fewer cores than the full size of the shape, you can disable cores to reduce your licensing costs. The instance itself is billed for the full shape, regardless of whether all cores are enabled.
        /// </summary>
        [Input("percentageOfCoresEnabled")]
        public Input<int>? PercentageOfCoresEnabled { get; set; }

        /// <summary>
        /// The type of platform being configured.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public InstancePlatformConfigArgs()
        {
        }
        public static new InstancePlatformConfigArgs Empty => new InstancePlatformConfigArgs();
    }
}
