// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core
{
    /// <summary>
    /// This resource provides the Ip Sec Connection resource in Oracle Cloud Infrastructure Core service.
    /// 
    /// Creates a new IPSec connection between the specified DRG and CPE with two default static tunnels. For more information, see
    /// [Site-to-Site VPN Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm).
    /// 
    /// For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want the
    /// IPSec connection to reside. Notice that the IPSec connection doesn't have to be in the same compartment
    /// as the DRG, CPE, or other Networking Service components. If you're not sure which compartment to
    /// use, put the IPSec connection in the same compartment as the DRG. For more information about
    /// compartments and access control, see
    /// [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
    /// 
    /// You may optionally specify a *display name* for the IPSec connection, otherwise a default is provided.
    /// It does not have to be unique, and you can change it. Avoid entering confidential information.
    /// 
    /// After creating the IPSec connection, you need to configure your on-premises router
    /// with tunnel-specific information. For tunnel status and the required configuration information, see:
    /// 
    ///   * [IPSecConnectionTunnel](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnectionTunnel/)
    ///   * [IPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnectionTunnelSharedSecret/)
    /// 
    /// To configure tunnel-specific information, use `oci.Core.IpsecConnectionTunnelManagement` to update the tunnels. If
    /// you configure at least one tunnel to use static routing, then in the oci.Core.Ipsec request you must provide
    /// at least one valid static route (you're allowed a maximum of 10). For example: 10.0.0.0/16.
    /// If you configure both tunnels to use BGP dynamic routing, the static routes will be ignored. However, you must provide a
    /// static route in `oci.Core.Ipsec` even if you plan to use BGP routing because it defaults to two static tunnels.  For more
    /// information, see the important note in [IPSecConnection](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnection/).
    /// 
    /// For each tunnel, you need the IP address of Oracle's VPN headend and the shared secret
    /// (that is, the pre-shared key). For more information, see
    /// [CPE Configuration](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/configuringCPE.htm).
    /// 
    /// To configure tunnel-specific information for private ipsec connection over fastconnect, use attribute `TunnelConfiguration`.
    /// You can provide configuration for maximum of 2 tunnels. You can configure each tunnel with `OracleTunnelIp`,
    /// `AssociatedVirtualCircuits` and `DrgRouteTableId` at time of creation. These attributes cannot be updated using IPSec
    /// connection APIs. To update drg route table id, use `oci.Core.DrgAttachmentManagement` resource to update.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testIpSecConnection = new Oci.Core.Ipsec("test_ip_sec_connection", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         CpeId = testCpe.Id,
    ///         DrgId = testDrg.Id,
    ///         StaticRoutes = ipSecConnectionStaticRoutes,
    ///         CpeLocalIdentifier = ipSecConnectionCpeLocalIdentifier,
    ///         CpeLocalIdentifierType = ipSecConnectionCpeLocalIdentifierType,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         DisplayName = ipSecConnectionDisplayName,
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///     });
    /// 
    ///     var testIpSecConnectionOverFc = new Oci.Core.Ipsec("test_ip_sec_connection_over_fc", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         CpeId = testCpe.Id,
    ///         DrgId = testDrg.Id,
    ///         StaticRoutes = ipSecConnectionStaticRoutes,
    ///         CpeLocalIdentifier = ipSecConnectionCpeLocalIdentifier,
    ///         CpeLocalIdentifierType = ipSecConnectionCpeLocalIdentifierType,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         DisplayName = ipSecConnectionDisplayName,
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         TunnelConfigurations = new[]
    ///         {
    ///             new Oci.Core.Inputs.IpsecTunnelConfigurationArgs
    ///             {
    ///                 OracleTunnelIp = "10.1.5.5",
    ///                 AssociatedVirtualCircuits = new[]
    ///                 {
    ///                     testIpsecOverFcVirtualCircuit.Id,
    ///                 },
    ///                 DrgRouteTableId = testDrgIpsecOverFcRouteTable.Id,
    ///             },
    ///             new Oci.Core.Inputs.IpsecTunnelConfigurationArgs
    ///             {
    ///                 OracleTunnelIp = "10.1.7.7",
    ///                 AssociatedVirtualCircuits = new[]
    ///                 {
    ///                     testIpsecOverFcVirtualCircuit.Id,
    ///                 },
    ///                 DrgRouteTableId = testDrgIpsecOverFcRouteTable.Id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IpSecConnections can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Core/ipsec:Ipsec test_ip_sec_connection "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Core/ipsec:Ipsec")]
    public partial class Ipsec : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to contain the IPSec connection.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object.
        /// </summary>
        [Output("cpeId")]
        public Output<string> CpeId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Your identifier for your CPE device. Can be either an IP address or a hostname (specifically, the fully qualified domain name (FQDN)). The type of identifier you provide here must correspond to the value for `cpeLocalIdentifierType`.
        /// 
        /// If you don't provide a value, the `ipAddress` attribute for the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object specified by `cpeId` is used as the `cpeLocalIdentifier`.
        /// 
        /// For information about why you'd provide this value, see [If Your CPE Is Behind a NAT Device](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm#nat).
        /// 
        /// Example IP address: `10.0.3.3`
        /// 
        /// Example hostname: `cpe.example.com`
        /// </summary>
        [Output("cpeLocalIdentifier")]
        public Output<string> CpeLocalIdentifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The type of identifier for your CPE device. The value you provide here must correspond to the value for `cpeLocalIdentifier`.
        /// </summary>
        [Output("cpeLocalIdentifierType")]
        public Output<string> CpeLocalIdentifierType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
        /// </summary>
        [Output("drgId")]
        public Output<string> DrgId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The IPSec connection's current state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Static routes to the CPE. A static route's CIDR must not be a multicast address or class E address.
        /// 
        /// Used for routing a given IPSec tunnel's traffic only if the tunnel is using static routing. If you configure at least one tunnel to use static routing, then you must provide at least one valid static route. If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for the static routes on update. For more information, see the important note in [IPSecConnection](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnection/).
        /// 
        /// Example: `10.0.1.0/24`
        /// </summary>
        [Output("staticRoutes")]
        public Output<ImmutableArray<string>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The date and time the IPSec connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The transport type used for the IPSec connection.
        /// </summary>
        [Output("transportType")]
        public Output<string> TransportType { get; private set; } = null!;

        /// <summary>
        /// (Non-updatable) Tunnel configuration for private ipsec connection over fastconnect.
        /// 
        /// Example: `
        /// TunnelConfiguration {
        /// OracleTunnelIp = "10.1.5.5"
        /// AssociatedVirtualCircuits = [oci_core_virtual_circuit.test_ipsec_over_fc_virtual_circuit.id]
        /// DrgRouteTableId = oci_core_drg_route_table.test_drg_ipsec_over_fc_route_table.id
        /// }`
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("tunnelConfigurations")]
        public Output<ImmutableArray<Outputs.IpsecTunnelConfiguration>> TunnelConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a Ipsec resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ipsec(string name, IpsecArgs args, CustomResourceOptions? options = null)
            : base("oci:Core/ipsec:Ipsec", name, args ?? new IpsecArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ipsec(string name, Input<string> id, IpsecState? state = null, CustomResourceOptions? options = null)
            : base("oci:Core/ipsec:Ipsec", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ipsec resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ipsec Get(string name, Input<string> id, IpsecState? state = null, CustomResourceOptions? options = null)
        {
            return new Ipsec(name, id, state, options);
        }
    }

    public sealed class IpsecArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to contain the IPSec connection.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object.
        /// </summary>
        [Input("cpeId", required: true)]
        public Input<string> CpeId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Your identifier for your CPE device. Can be either an IP address or a hostname (specifically, the fully qualified domain name (FQDN)). The type of identifier you provide here must correspond to the value for `cpeLocalIdentifierType`.
        /// 
        /// If you don't provide a value, the `ipAddress` attribute for the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object specified by `cpeId` is used as the `cpeLocalIdentifier`.
        /// 
        /// For information about why you'd provide this value, see [If Your CPE Is Behind a NAT Device](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm#nat).
        /// 
        /// Example IP address: `10.0.3.3`
        /// 
        /// Example hostname: `cpe.example.com`
        /// </summary>
        [Input("cpeLocalIdentifier")]
        public Input<string>? CpeLocalIdentifier { get; set; }

        /// <summary>
        /// (Updatable) The type of identifier for your CPE device. The value you provide here must correspond to the value for `cpeLocalIdentifier`.
        /// </summary>
        [Input("cpeLocalIdentifierType")]
        public Input<string>? CpeLocalIdentifierType { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
        /// </summary>
        [Input("drgId", required: true)]
        public Input<string> DrgId { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("staticRoutes", required: true)]
        private InputList<string>? _staticRoutes;

        /// <summary>
        /// (Updatable) Static routes to the CPE. A static route's CIDR must not be a multicast address or class E address.
        /// 
        /// Used for routing a given IPSec tunnel's traffic only if the tunnel is using static routing. If you configure at least one tunnel to use static routing, then you must provide at least one valid static route. If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for the static routes on update. For more information, see the important note in [IPSecConnection](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnection/).
        /// 
        /// Example: `10.0.1.0/24`
        /// </summary>
        public InputList<string> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<string>());
            set => _staticRoutes = value;
        }

        [Input("tunnelConfigurations")]
        private InputList<Inputs.IpsecTunnelConfigurationArgs>? _tunnelConfigurations;

        /// <summary>
        /// (Non-updatable) Tunnel configuration for private ipsec connection over fastconnect.
        /// 
        /// Example: `
        /// TunnelConfiguration {
        /// OracleTunnelIp = "10.1.5.5"
        /// AssociatedVirtualCircuits = [oci_core_virtual_circuit.test_ipsec_over_fc_virtual_circuit.id]
        /// DrgRouteTableId = oci_core_drg_route_table.test_drg_ipsec_over_fc_route_table.id
        /// }`
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public InputList<Inputs.IpsecTunnelConfigurationArgs> TunnelConfigurations
        {
            get => _tunnelConfigurations ?? (_tunnelConfigurations = new InputList<Inputs.IpsecTunnelConfigurationArgs>());
            set => _tunnelConfigurations = value;
        }

        public IpsecArgs()
        {
        }
        public static new IpsecArgs Empty => new IpsecArgs();
    }

    public sealed class IpsecState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to contain the IPSec connection.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object.
        /// </summary>
        [Input("cpeId")]
        public Input<string>? CpeId { get; set; }

        /// <summary>
        /// (Updatable) Your identifier for your CPE device. Can be either an IP address or a hostname (specifically, the fully qualified domain name (FQDN)). The type of identifier you provide here must correspond to the value for `cpeLocalIdentifierType`.
        /// 
        /// If you don't provide a value, the `ipAddress` attribute for the [Cpe](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Cpe/) object specified by `cpeId` is used as the `cpeLocalIdentifier`.
        /// 
        /// For information about why you'd provide this value, see [If Your CPE Is Behind a NAT Device](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/overviewIPsec.htm#nat).
        /// 
        /// Example IP address: `10.0.3.3`
        /// 
        /// Example hostname: `cpe.example.com`
        /// </summary>
        [Input("cpeLocalIdentifier")]
        public Input<string>? CpeLocalIdentifier { get; set; }

        /// <summary>
        /// (Updatable) The type of identifier for your CPE device. The value you provide here must correspond to the value for `cpeLocalIdentifier`.
        /// </summary>
        [Input("cpeLocalIdentifierType")]
        public Input<string>? CpeLocalIdentifierType { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the DRG.
        /// </summary>
        [Input("drgId")]
        public Input<string>? DrgId { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The IPSec connection's current state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("staticRoutes")]
        private InputList<string>? _staticRoutes;

        /// <summary>
        /// (Updatable) Static routes to the CPE. A static route's CIDR must not be a multicast address or class E address.
        /// 
        /// Used for routing a given IPSec tunnel's traffic only if the tunnel is using static routing. If you configure at least one tunnel to use static routing, then you must provide at least one valid static route. If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for the static routes on update. For more information, see the important note in [IPSecConnection](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/IPSecConnection/).
        /// 
        /// Example: `10.0.1.0/24`
        /// </summary>
        public InputList<string> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<string>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The date and time the IPSec connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The transport type used for the IPSec connection.
        /// </summary>
        [Input("transportType")]
        public Input<string>? TransportType { get; set; }

        [Input("tunnelConfigurations")]
        private InputList<Inputs.IpsecTunnelConfigurationGetArgs>? _tunnelConfigurations;

        /// <summary>
        /// (Non-updatable) Tunnel configuration for private ipsec connection over fastconnect.
        /// 
        /// Example: `
        /// TunnelConfiguration {
        /// OracleTunnelIp = "10.1.5.5"
        /// AssociatedVirtualCircuits = [oci_core_virtual_circuit.test_ipsec_over_fc_virtual_circuit.id]
        /// DrgRouteTableId = oci_core_drg_route_table.test_drg_ipsec_over_fc_route_table.id
        /// }`
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public InputList<Inputs.IpsecTunnelConfigurationGetArgs> TunnelConfigurations
        {
            get => _tunnelConfigurations ?? (_tunnelConfigurations = new InputList<Inputs.IpsecTunnelConfigurationGetArgs>());
            set => _tunnelConfigurations = value;
        }

        public IpsecState()
        {
        }
        public static new IpsecState Empty => new IpsecState();
    }
}
