// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Outputs
{

    [OutputType]
    public sealed class CaptureFilterFlowLogCaptureFilterRule
    {
        /// <summary>
        /// (Updatable) Traffic to this CIDR will be captured in the flow log.
        /// </summary>
        public readonly string? DestinationCidr;
        /// <summary>
        /// (Updatable) Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
        /// </summary>
        public readonly string? FlowLogType;
        /// <summary>
        /// (Updatable) Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
        /// * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
        /// * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
        /// 
        /// If you specify ICMP or ICMPv6 as the protocol but omit this object, then all ICMP types and codes are allowed. If you do provide this object, the type is required and the code is optional. To enable MTU negotiation for ingress internet traffic via IPv4, make sure to allow type 3 ("Destination Unreachable") code 4 ("Fragmentation Needed and Don't Fragment was Set"). If you need to specify multiple codes for a single type, create a separate security list rule for each.
        /// </summary>
        public readonly Outputs.CaptureFilterFlowLogCaptureFilterRuleIcmpOptions? IcmpOptions;
        /// <summary>
        /// (Updatable) Indicates whether a flow log capture filter rule is enabled.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// (Updatable) A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// (Updatable) The transport protocol the filter uses.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// (Updatable) Include or exclude a ruleAction object.
        /// </summary>
        public readonly string? RuleAction;
        /// <summary>
        /// (Updatable) Sampling interval as 1 of X, where X is an integer not greater than 100000.
        /// </summary>
        public readonly int? SamplingRate;
        /// <summary>
        /// (Updatable) Traffic from this CIDR will be captured in the flow log.
        /// </summary>
        public readonly string? SourceCidr;
        /// <summary>
        /// (Updatable) Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly Outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptions? TcpOptions;
        /// <summary>
        /// (Updatable) Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly Outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptions? UdpOptions;

        [OutputConstructor]
        private CaptureFilterFlowLogCaptureFilterRule(
            string? destinationCidr,

            string? flowLogType,

            Outputs.CaptureFilterFlowLogCaptureFilterRuleIcmpOptions? icmpOptions,

            bool? isEnabled,

            int? priority,

            string? protocol,

            string? ruleAction,

            int? samplingRate,

            string? sourceCidr,

            Outputs.CaptureFilterFlowLogCaptureFilterRuleTcpOptions? tcpOptions,

            Outputs.CaptureFilterFlowLogCaptureFilterRuleUdpOptions? udpOptions)
        {
            DestinationCidr = destinationCidr;
            FlowLogType = flowLogType;
            IcmpOptions = icmpOptions;
            IsEnabled = isEnabled;
            Priority = priority;
            Protocol = protocol;
            RuleAction = ruleAction;
            SamplingRate = samplingRate;
            SourceCidr = sourceCidr;
            TcpOptions = tcpOptions;
            UdpOptions = udpOptions;
        }
    }
}
