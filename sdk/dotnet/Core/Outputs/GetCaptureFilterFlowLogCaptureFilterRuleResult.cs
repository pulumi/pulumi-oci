// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Outputs
{

    [OutputType]
    public sealed class GetCaptureFilterFlowLogCaptureFilterRuleResult
    {
        /// <summary>
        /// Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
        /// </summary>
        public readonly string DestinationCidr;
        /// <summary>
        /// Type or types of flow logs to store. `ALL` includes records for both accepted traffic and rejected traffic.
        /// </summary>
        public readonly string FlowLogType;
        /// <summary>
        /// Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
        /// * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
        /// * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult> IcmpOptions;
        /// <summary>
        /// Indicates whether a flow log capture filter rule is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// A lower number indicates a higher priority, range 0-9. Each rule must have a distinct priority.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
        /// * 1 = ICMP
        /// * 6 = TCP
        /// * 17 = UDP
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Include or exclude packets meeting this definition from mirrored traffic.
        /// </summary>
        public readonly string RuleAction;
        /// <summary>
        /// Sampling interval as 1 of X, where X is an integer not greater than 100000.
        /// </summary>
        public readonly int SamplingRate;
        /// <summary>
        /// Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
        /// </summary>
        public readonly string SourceCidr;
        /// <summary>
        /// Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult> TcpOptions;
        /// <summary>
        /// Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult> UdpOptions;

        [OutputConstructor]
        private GetCaptureFilterFlowLogCaptureFilterRuleResult(
            string destinationCidr,

            string flowLogType,

            ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleIcmpOptionResult> icmpOptions,

            bool isEnabled,

            int priority,

            string protocol,

            string ruleAction,

            int samplingRate,

            string sourceCidr,

            ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleTcpOptionResult> tcpOptions,

            ImmutableArray<Outputs.GetCaptureFilterFlowLogCaptureFilterRuleUdpOptionResult> udpOptions)
        {
            DestinationCidr = destinationCidr;
            FlowLogType = flowLogType;
            IcmpOptions = icmpOptions;
            IsEnabled = isEnabled;
            Priority = priority;
            Protocol = protocol;
            RuleAction = ruleAction;
            SamplingRate = samplingRate;
            SourceCidr = sourceCidr;
            TcpOptions = tcpOptions;
            UdpOptions = udpOptions;
        }
    }
}
