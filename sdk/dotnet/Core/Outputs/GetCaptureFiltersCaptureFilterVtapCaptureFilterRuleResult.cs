// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Outputs
{

    [OutputType]
    public sealed class GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult
    {
        /// <summary>
        /// Traffic sent to this CIDR block through the VTAP source will be mirrored to the VTAP target.
        /// </summary>
        public readonly string DestinationCidr;
        /// <summary>
        /// Optional and valid only for ICMP and ICMPv6. Use to specify a particular ICMP type and code as defined in:
        /// * [ICMP Parameters](http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml)
        /// * [ICMPv6 Parameters](https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult> IcmpOptions;
        /// <summary>
        /// The transport protocol used in the filter. If do not choose a protocol, all protocols will be used in the filter. Supported options are:
        /// * 1 = ICMP
        /// * 6 = TCP
        /// * 17 = UDP
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Include or exclude packets meeting this definition from mirrored traffic.
        /// </summary>
        public readonly string RuleAction;
        /// <summary>
        /// Traffic from this CIDR block to the VTAP source will be mirrored to the VTAP target.
        /// </summary>
        public readonly string SourceCidr;
        /// <summary>
        /// Optional and valid only for TCP. Use to specify particular destination ports for TCP rules. If you specify TCP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult> TcpOptions;
        /// <summary>
        /// The traffic direction the VTAP is configured to mirror.
        /// </summary>
        public readonly string TrafficDirection;
        /// <summary>
        /// Optional and valid only for UDP. Use to specify particular destination ports for UDP rules. If you specify UDP as the protocol but omit this object, then all destination ports are allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult> UdpOptions;

        [OutputConstructor]
        private GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleResult(
            string destinationCidr,

            ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleIcmpOptionResult> icmpOptions,

            string protocol,

            string ruleAction,

            string sourceCidr,

            ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleTcpOptionResult> tcpOptions,

            string trafficDirection,

            ImmutableArray<Outputs.GetCaptureFiltersCaptureFilterVtapCaptureFilterRuleUdpOptionResult> udpOptions)
        {
            DestinationCidr = destinationCidr;
            IcmpOptions = icmpOptions;
            Protocol = protocol;
            RuleAction = ruleAction;
            SourceCidr = sourceCidr;
            TcpOptions = tcpOptions;
            TrafficDirection = trafficDirection;
            UdpOptions = udpOptions;
        }
    }
}
