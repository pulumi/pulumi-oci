// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Core.Outputs
{

    [OutputType]
    public sealed class GetIpsecConnectionTunnelsIpSecConnectionTunnelResult
    {
        /// <summary>
        /// The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
        /// </summary>
        public readonly ImmutableArray<string> AssociatedVirtualCircuits;
        /// <summary>
        /// Information for establishing a BGP session for the IPSec tunnel.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult> BgpSessionInfos;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The IP address of the CPE device's VPN headend.  Example: `203.0.113.22`
        /// </summary>
        public readonly string? CpeIp;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Dead peer detection (DPD) mode set on the Oracle side of the connection. This mode sets whether Oracle can only respond to a request from the CPE device to start DPD, or both respond to and initiate requests.
        /// </summary>
        public readonly string? DpdMode;
        /// <summary>
        /// DPD timeout in seconds.
        /// </summary>
        public readonly int? DpdTimeoutInSec;
        /// <summary>
        /// Configuration information used by the encryption domain policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult> EncryptionDomainConfigs;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the tunnel.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Internet Key Exchange protocol version.
        /// </summary>
        public readonly string? IkeVersion;
        /// <summary>
        /// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
        /// </summary>
        public readonly string? NatTranslationEnabled;
        /// <summary>
        /// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device, or both respond to and initiate requests.
        /// </summary>
        public readonly string? OracleCanInitiate;
        /// <summary>
        /// IPSec tunnel details specific to ISAKMP phase one.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult> PhaseOneDetails;
        /// <summary>
        /// IPsec tunnel detail information specific to phase two.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult> PhaseTwoDetails;
        /// <summary>
        /// The type of routing used for this tunnel (BGP dynamic routing, static routing, or policy-based routing).
        /// </summary>
        public readonly string? Routing;
        /// <summary>
        /// The tunnel's lifecycle state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The status of the tunnel based on IPSec protocol characteristics.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The date and time the IPSec tunnel was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// When the status of the IPSec tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string? TimeStatusUpdated;
        /// <summary>
        /// The IP address of the Oracle VPN headend for the connection.  Example: `203.0.113.21`
        /// </summary>
        public readonly string? VpnIp;

        [OutputConstructor]
        private GetIpsecConnectionTunnelsIpSecConnectionTunnelResult(
            ImmutableArray<string> associatedVirtualCircuits,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelBgpSessionInfoResult> bgpSessionInfos,

            string? compartmentId,

            string? cpeIp,

            string? displayName,

            string? dpdMode,

            int? dpdTimeoutInSec,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelEncryptionDomainConfigResult> encryptionDomainConfigs,

            string? id,

            string? ikeVersion,

            string? natTranslationEnabled,

            string? oracleCanInitiate,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseOneDetailResult> phaseOneDetails,

            ImmutableArray<Outputs.GetIpsecConnectionTunnelsIpSecConnectionTunnelPhaseTwoDetailResult> phaseTwoDetails,

            string? routing,

            string? state,

            string? status,

            string? timeCreated,

            string? timeStatusUpdated,

            string? vpnIp)
        {
            AssociatedVirtualCircuits = associatedVirtualCircuits;
            BgpSessionInfos = bgpSessionInfos;
            CompartmentId = compartmentId;
            CpeIp = cpeIp;
            DisplayName = displayName;
            DpdMode = dpdMode;
            DpdTimeoutInSec = dpdTimeoutInSec;
            EncryptionDomainConfigs = encryptionDomainConfigs;
            Id = id;
            IkeVersion = ikeVersion;
            NatTranslationEnabled = natTranslationEnabled;
            OracleCanInitiate = oracleCanInitiate;
            PhaseOneDetails = phaseOneDetails;
            PhaseTwoDetails = phaseTwoDetails;
            Routing = routing;
            State = state;
            Status = status;
            TimeCreated = timeCreated;
            TimeStatusUpdated = timeStatusUpdated;
            VpnIp = vpnIp;
        }
    }
}
