// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    /// <summary>
    /// This resource provides the Data Asset resource in Oracle Cloud Infrastructure Data Catalog service.
    /// 
    /// Create a new data asset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDataAsset = new Oci.DataCatalog.DataAsset("testDataAsset", new()
    ///     {
    ///         CatalogId = oci_datacatalog_catalog.Test_catalog.Id,
    ///         DisplayName = @var.Data_asset_display_name,
    ///         TypeKey = @var.Data_asset_type_key,
    ///         Description = @var.Data_asset_description,
    ///         Properties = @var.Data_asset_properties,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DataAssets can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataCatalog/dataAsset:DataAsset test_data_asset "catalogs/{catalogId}/dataAssets/{dataAssetKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataCatalog/dataAsset:DataAsset")]
    public partial class DataAsset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// OCID of the user who created the data asset.
        /// </summary>
        [Output("createdById")]
        public Output<string> CreatedById { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Detailed description of the data asset.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// External URI that can be used to reference the object. Format will differ based on the type of object.
        /// </summary>
        [Output("externalKey")]
        public Output<string> ExternalKey { get; private set; } = null!;

        /// <summary>
        /// Unique data asset key that is immutable.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, object>> Properties { get; private set; } = null!;

        /// <summary>
        /// The current state of the data asset.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Output("timeHarvested")]
        public Output<string> TimeHarvested { get; private set; } = null!;

        /// <summary>
        /// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The key of the data asset type. This can be obtained via the '/types' endpoint.
        /// </summary>
        [Output("typeKey")]
        public Output<string> TypeKey { get; private set; } = null!;

        /// <summary>
        /// OCID of the user who last modified the data asset.
        /// </summary>
        [Output("updatedById")]
        public Output<string> UpdatedById { get; private set; } = null!;

        /// <summary>
        /// URI to the data asset instance in the API.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a DataAsset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataAsset(string name, DataAssetArgs args, CustomResourceOptions? options = null)
            : base("oci:DataCatalog/dataAsset:DataAsset", name, args ?? new DataAssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataAsset(string name, Input<string> id, DataAssetState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataCatalog/dataAsset:DataAsset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataAsset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataAsset Get(string name, Input<string> id, DataAssetState? state = null, CustomResourceOptions? options = null)
        {
            return new DataAsset(name, id, state, options);
        }
    }

    public sealed class DataAssetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Detailed description of the data asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("properties")]
        private InputMap<object>? _properties;

        /// <summary>
        /// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// The key of the data asset type. This can be obtained via the '/types' endpoint.
        /// </summary>
        [Input("typeKey", required: true)]
        public Input<string> TypeKey { get; set; } = null!;

        public DataAssetArgs()
        {
        }
        public static new DataAssetArgs Empty => new DataAssetArgs();
    }

    public sealed class DataAssetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// OCID of the user who created the data asset.
        /// </summary>
        [Input("createdById")]
        public Input<string>? CreatedById { get; set; }

        /// <summary>
        /// (Updatable) Detailed description of the data asset.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// External URI that can be used to reference the object. Format will differ based on the type of object.
        /// </summary>
        [Input("externalKey")]
        public Input<string>? ExternalKey { get; set; }

        /// <summary>
        /// Unique data asset key that is immutable.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("properties")]
        private InputMap<object>? _properties;

        /// <summary>
        /// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// The current state of the data asset.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Input("timeHarvested")]
        public Input<string>? TimeHarvested { get; set; }

        /// <summary>
        /// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The key of the data asset type. This can be obtained via the '/types' endpoint.
        /// </summary>
        [Input("typeKey")]
        public Input<string>? TypeKey { get; set; }

        /// <summary>
        /// OCID of the user who last modified the data asset.
        /// </summary>
        [Input("updatedById")]
        public Input<string>? UpdatedById { get; set; }

        /// <summary>
        /// URI to the data asset instance in the API.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public DataAssetState()
        {
        }
        public static new DataAssetState Empty => new DataAssetState();
    }
}
