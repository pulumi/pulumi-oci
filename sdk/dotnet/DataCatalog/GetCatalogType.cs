// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    public static class GetCatalogType
    {
        /// <summary>
        /// This data source provides details about a specific Catalog Type resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a specific type by key within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogType = Oci.DataCatalog.GetCatalogType.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         TypeKey = catalogTypeTypeKey,
        ///         Fields = catalogTypeFields,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCatalogTypeResult> InvokeAsync(GetCatalogTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogTypeResult>("oci:DataCatalog/getCatalogType:getCatalogType", args ?? new GetCatalogTypeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Catalog Type resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a specific type by key within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogType = Oci.DataCatalog.GetCatalogType.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         TypeKey = catalogTypeTypeKey,
        ///         Fields = catalogTypeFields,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogTypeResult> Invoke(GetCatalogTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogTypeResult>("oci:DataCatalog/getCatalogType:getCatalogType", args ?? new GetCatalogTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Catalog Type resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a specific type by key within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogType = Oci.DataCatalog.GetCatalogType.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         TypeKey = catalogTypeTypeKey,
        ///         Fields = catalogTypeFields,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogTypeResult> Invoke(GetCatalogTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogTypeResult>("oci:DataCatalog/getCatalogType:getCatalogType", args ?? new GetCatalogTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a type response.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        /// <summary>
        /// Unique type key.
        /// </summary>
        [Input("typeKey", required: true)]
        public string TypeKey { get; set; } = null!;

        public GetCatalogTypeArgs()
        {
        }
        public static new GetCatalogTypeArgs Empty => new GetCatalogTypeArgs();
    }

    public sealed class GetCatalogTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a type response.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        /// <summary>
        /// Unique type key.
        /// </summary>
        [Input("typeKey", required: true)]
        public Input<string> TypeKey { get; set; } = null!;

        public GetCatalogTypeInvokeArgs()
        {
        }
        public static new GetCatalogTypeInvokeArgs Empty => new GetCatalogTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogTypeResult
    {
        /// <summary>
        /// The data catalog's OCID.
        /// </summary>
        public readonly string CatalogId;
        /// <summary>
        /// Detailed description of the type.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Mapping type equivalence in the external system.
        /// </summary>
        public readonly string ExternalTypeName;
        public readonly ImmutableArray<string> Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        public readonly bool IsApproved;
        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        public readonly bool IsInternal;
        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        public readonly bool IsTag;
        /// <summary>
        /// Unique type key that is immutable.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The immutable name of the type.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A map of arrays which defines the type specific properties, both required and optional. The map keys are category names and the values are arrays contiaing all property details. Every property is contained inside of a category. Most types have required properties within the "default" category. Example: `{ "properties": { "default": { "attributes:": [ { "name": "host", "type": "string", "isRequired": true, "isUpdatable": false }, ... ] } } }`
        /// </summary>
        public readonly ImmutableDictionary<string, string> Properties;
        /// <summary>
        /// The current state of the type.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Indicates the category this type belongs to. For instance, data assets, connections.
        /// </summary>
        public readonly string TypeCategory;
        public readonly string TypeKey;
        /// <summary>
        /// URI to the type instance in the API.
        /// </summary>
        public readonly string Uri;

        [OutputConstructor]
        private GetCatalogTypeResult(
            string catalogId,

            string description,

            string externalTypeName,

            ImmutableArray<string> fields,

            string id,

            bool isApproved,

            bool isInternal,

            bool isTag,

            string key,

            string name,

            ImmutableDictionary<string, string> properties,

            string state,

            string typeCategory,

            string typeKey,

            string uri)
        {
            CatalogId = catalogId;
            Description = description;
            ExternalTypeName = externalTypeName;
            Fields = fields;
            Id = id;
            IsApproved = isApproved;
            IsInternal = isInternal;
            IsTag = isTag;
            Key = key;
            Name = name;
            Properties = properties;
            State = state;
            TypeCategory = typeCategory;
            TypeKey = typeKey;
            Uri = uri;
        }
    }
}
