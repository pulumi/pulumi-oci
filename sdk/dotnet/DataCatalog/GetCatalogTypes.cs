// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    public static class GetCatalogTypes
    {
        /// <summary>
        /// This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all types within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogTypes = Oci.DataCatalog.GetCatalogTypes.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         ExternalTypeName = catalogTypeExternalTypeName,
        ///         Fields = catalogTypeFields,
        ///         IsApproved = catalogTypeIsApproved,
        ///         IsInternal = catalogTypeIsInternal,
        ///         IsTag = catalogTypeIsTag,
        ///         Name = catalogTypeName,
        ///         State = catalogTypeState,
        ///         TypeCategory = catalogTypeTypeCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCatalogTypesResult> InvokeAsync(GetCatalogTypesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogTypesResult>("oci:DataCatalog/getCatalogTypes:getCatalogTypes", args ?? new GetCatalogTypesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all types within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogTypes = Oci.DataCatalog.GetCatalogTypes.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         ExternalTypeName = catalogTypeExternalTypeName,
        ///         Fields = catalogTypeFields,
        ///         IsApproved = catalogTypeIsApproved,
        ///         IsInternal = catalogTypeIsInternal,
        ///         IsTag = catalogTypeIsTag,
        ///         Name = catalogTypeName,
        ///         State = catalogTypeState,
        ///         TypeCategory = catalogTypeTypeCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogTypesResult> Invoke(GetCatalogTypesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogTypesResult>("oci:DataCatalog/getCatalogTypes:getCatalogTypes", args ?? new GetCatalogTypesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all types within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogTypes = Oci.DataCatalog.GetCatalogTypes.Invoke(new()
        ///     {
        ///         CatalogId = testCatalog.Id,
        ///         ExternalTypeName = catalogTypeExternalTypeName,
        ///         Fields = catalogTypeFields,
        ///         IsApproved = catalogTypeIsApproved,
        ///         IsInternal = catalogTypeIsInternal,
        ///         IsTag = catalogTypeIsTag,
        ///         Name = catalogTypeName,
        ///         State = catalogTypeState,
        ///         TypeCategory = catalogTypeTypeCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogTypesResult> Invoke(GetCatalogTypesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogTypesResult>("oci:DataCatalog/getCatalogTypes:getCatalogTypes", args ?? new GetCatalogTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogTypesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        /// <summary>
        /// Data type as defined in an external system.
        /// </summary>
        [Input("externalTypeName")]
        public string? ExternalTypeName { get; set; }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a type summary response.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetCatalogTypesFilterArgs>? _filters;
        public List<Inputs.GetCatalogTypesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCatalogTypesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        [Input("isApproved")]
        public string? IsApproved { get; set; }

        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        [Input("isInternal")]
        public string? IsInternal { get; set; }

        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        [Input("isTag")]
        public string? IsTag { get; set; }

        /// <summary>
        /// Immutable resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Indicates the category of this type . For example, data assets or connections.
        /// </summary>
        [Input("typeCategory")]
        public string? TypeCategory { get; set; }

        public GetCatalogTypesArgs()
        {
        }
        public static new GetCatalogTypesArgs Empty => new GetCatalogTypesArgs();
    }

    public sealed class GetCatalogTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// Data type as defined in an external system.
        /// </summary>
        [Input("externalTypeName")]
        public Input<string>? ExternalTypeName { get; set; }

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a type summary response.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetCatalogTypesFilterInputArgs>? _filters;
        public InputList<Inputs.GetCatalogTypesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCatalogTypesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        [Input("isApproved")]
        public Input<string>? IsApproved { get; set; }

        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        [Input("isInternal")]
        public Input<string>? IsInternal { get; set; }

        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        [Input("isTag")]
        public Input<string>? IsTag { get; set; }

        /// <summary>
        /// Immutable resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Indicates the category of this type . For example, data assets or connections.
        /// </summary>
        [Input("typeCategory")]
        public Input<string>? TypeCategory { get; set; }

        public GetCatalogTypesInvokeArgs()
        {
        }
        public static new GetCatalogTypesInvokeArgs Empty => new GetCatalogTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogTypesResult
    {
        /// <summary>
        /// The data catalog's OCID.
        /// </summary>
        public readonly string CatalogId;
        /// <summary>
        /// Mapping type equivalence in the external system.
        /// </summary>
        public readonly string? ExternalTypeName;
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetCatalogTypesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        public readonly string? IsApproved;
        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        public readonly string? IsInternal;
        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        public readonly string? IsTag;
        /// <summary>
        /// The immutable name of the type.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the type.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Indicates the category this type belongs to. For instance, data assets, connections.
        /// </summary>
        public readonly string? TypeCategory;
        /// <summary>
        /// The list of type_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogTypesTypeCollectionResult> TypeCollections;

        [OutputConstructor]
        private GetCatalogTypesResult(
            string catalogId,

            string? externalTypeName,

            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetCatalogTypesFilterResult> filters,

            string id,

            string? isApproved,

            string? isInternal,

            string? isTag,

            string? name,

            string? state,

            string? typeCategory,

            ImmutableArray<Outputs.GetCatalogTypesTypeCollectionResult> typeCollections)
        {
            CatalogId = catalogId;
            ExternalTypeName = externalTypeName;
            Fields = fields;
            Filters = filters;
            Id = id;
            IsApproved = isApproved;
            IsInternal = isInternal;
            IsTag = isTag;
            Name = name;
            State = state;
            TypeCategory = typeCategory;
            TypeCollections = typeCollections;
        }
    }
}
