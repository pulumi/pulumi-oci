// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    public static class GetCatalogs
    {
        /// <summary>
        /// This data source provides the list of Catalogs in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all the data catalogs in the specified compartment.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCatalogs = Output.Create(Oci.DataCatalog.GetCatalogs.InvokeAsync(new Oci.DataCatalog.GetCatalogsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Catalog_display_name,
        ///             State = @var.Catalog_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCatalogsResult> InvokeAsync(GetCatalogsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCatalogsResult>("oci:DataCatalog/getCatalogs:getCatalogs", args ?? new GetCatalogsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Catalogs in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all the data catalogs in the specified compartment.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCatalogs = Output.Create(Oci.DataCatalog.GetCatalogs.InvokeAsync(new Oci.DataCatalog.GetCatalogsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Catalog_display_name,
        ///             State = @var.Catalog_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCatalogsResult> Invoke(GetCatalogsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCatalogsResult>("oci:DataCatalog/getCatalogs:getCatalogs", args ?? new GetCatalogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment where you want to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetCatalogsFilterArgs>? _filters;
        public List<Inputs.GetCatalogsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCatalogsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCatalogsArgs()
        {
        }
    }

    public sealed class GetCatalogsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment where you want to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCatalogsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCatalogsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCatalogsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCatalogsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCatalogsResult
    {
        /// <summary>
        /// The list of catalogs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogsCatalogResult> Catalogs;
        /// <summary>
        /// Compartment identifier.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Data catalog identifier, which can be renamed.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetCatalogsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the data catalog resource.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCatalogsResult(
            ImmutableArray<Outputs.GetCatalogsCatalogResult> catalogs,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetCatalogsFilterResult> filters,

            string id,

            string? state)
        {
            Catalogs = catalogs;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
