// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    public static class GetDataAsset
    {
        /// <summary>
        /// This data source provides details about a specific Data Asset resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a specific data asset for the given key within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDataAsset = Oci.DataCatalog.GetDataAsset.Invoke(new()
        ///     {
        ///         CatalogId = oci_datacatalog_catalog.Test_catalog.Id,
        ///         DataAssetKey = @var.Data_asset_data_asset_key,
        ///         Fields = @var.Data_asset_fields,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDataAssetResult> InvokeAsync(GetDataAssetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataAssetResult>("oci:DataCatalog/getDataAsset:getDataAsset", args ?? new GetDataAssetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Data Asset resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a specific data asset for the given key within a data catalog.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDataAsset = Oci.DataCatalog.GetDataAsset.Invoke(new()
        ///     {
        ///         CatalogId = oci_datacatalog_catalog.Test_catalog.Id,
        ///         DataAssetKey = @var.Data_asset_data_asset_key,
        ///         Fields = @var.Data_asset_fields,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDataAssetResult> Invoke(GetDataAssetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataAssetResult>("oci:DataCatalog/getDataAsset:getDataAsset", args ?? new GetDataAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataAssetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        /// <summary>
        /// Unique data asset key.
        /// </summary>
        [Input("dataAssetKey", required: true)]
        public string DataAssetKey { get; set; } = null!;

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a data asset response.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        public GetDataAssetArgs()
        {
        }
        public static new GetDataAssetArgs Empty => new GetDataAssetArgs();
    }

    public sealed class GetDataAssetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// Unique data asset key.
        /// </summary>
        [Input("dataAssetKey", required: true)]
        public Input<string> DataAssetKey { get; set; } = null!;

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a data asset response.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        public GetDataAssetInvokeArgs()
        {
        }
        public static new GetDataAssetInvokeArgs Empty => new GetDataAssetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataAssetResult
    {
        /// <summary>
        /// The data catalog's OCID.
        /// </summary>
        public readonly string CatalogId;
        /// <summary>
        /// OCID of the user who created the data asset.
        /// </summary>
        public readonly string CreatedById;
        public readonly string DataAssetKey;
        /// <summary>
        /// Detailed description of the data asset.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// External URI that can be used to reference the object. Format will differ based on the type of object.
        /// </summary>
        public readonly string ExternalKey;
        public readonly ImmutableArray<string> Fields;
        public readonly string Id;
        /// <summary>
        /// Unique data asset key that is immutable.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// A message describing the current state in more detail. An object not in ACTIVE state may have functional limitations, see service documentation for details.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> Properties;
        /// <summary>
        /// The current state of the data asset.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string TimeHarvested;
        /// <summary>
        /// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The key of the object type. Type key's can be found via the '/types' endpoint.
        /// </summary>
        public readonly string TypeKey;
        /// <summary>
        /// OCID of the user who last modified the data asset.
        /// </summary>
        public readonly string UpdatedById;
        /// <summary>
        /// URI to the data asset instance in the API.
        /// </summary>
        public readonly string Uri;

        [OutputConstructor]
        private GetDataAssetResult(
            string catalogId,

            string createdById,

            string dataAssetKey,

            string description,

            string displayName,

            string externalKey,

            ImmutableArray<string> fields,

            string id,

            string key,

            string lifecycleDetails,

            ImmutableDictionary<string, object> properties,

            string state,

            string timeCreated,

            string timeHarvested,

            string timeUpdated,

            string typeKey,

            string updatedById,

            string uri)
        {
            CatalogId = catalogId;
            CreatedById = createdById;
            DataAssetKey = dataAssetKey;
            Description = description;
            DisplayName = displayName;
            ExternalKey = externalKey;
            Fields = fields;
            Id = id;
            Key = key;
            LifecycleDetails = lifecycleDetails;
            Properties = properties;
            State = state;
            TimeCreated = timeCreated;
            TimeHarvested = timeHarvested;
            TimeUpdated = timeUpdated;
            TypeKey = typeKey;
            UpdatedById = updatedById;
            Uri = uri;
        }
    }
}
