// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog
{
    public static class GetMetastore
    {
        /// <summary>
        /// This data source provides details about a specific Metastore resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a metastore by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetastore = Oci.DataCatalog.GetMetastore.Invoke(new()
        ///     {
        ///         MetastoreId = oci_datacatalog_metastore.Test_metastore.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetastoreResult> InvokeAsync(GetMetastoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetastoreResult>("oci:DataCatalog/getMetastore:getMetastore", args ?? new GetMetastoreArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Metastore resource in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Gets a metastore by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetastore = Oci.DataCatalog.GetMetastore.Invoke(new()
        ///     {
        ///         MetastoreId = oci_datacatalog_metastore.Test_metastore.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMetastoreResult> Invoke(GetMetastoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetastoreResult>("oci:DataCatalog/getMetastore:getMetastore", args ?? new GetMetastoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetastoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metastore's OCID.
        /// </summary>
        [Input("metastoreId", required: true)]
        public string MetastoreId { get; set; } = null!;

        public GetMetastoreArgs()
        {
        }
        public static new GetMetastoreArgs Empty => new GetMetastoreArgs();
    }

    public sealed class GetMetastoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The metastore's OCID.
        /// </summary>
        [Input("metastoreId", required: true)]
        public Input<string> MetastoreId { get; set; } = null!;

        public GetMetastoreInvokeArgs()
        {
        }
        public static new GetMetastoreInvokeArgs Empty => new GetMetastoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetastoreResult
    {
        /// <summary>
        /// OCID of the compartment which holds the metastore.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
        /// </summary>
        public readonly string DefaultExternalTableLocation;
        /// <summary>
        /// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
        /// </summary>
        public readonly string DefaultManagedTableLocation;
        /// <summary>
        /// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Mutable name of the metastore.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The metastore's OCID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        public readonly string MetastoreId;
        /// <summary>
        /// The current state of the metastore.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Time at which the metastore was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Time at which the metastore was last modified. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetMetastoreResult(
            string compartmentId,

            string defaultExternalTableLocation,

            string defaultManagedTableLocation,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string lifecycleDetails,

            string metastoreId,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefaultExternalTableLocation = defaultExternalTableLocation;
            DefaultManagedTableLocation = defaultManagedTableLocation;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            MetastoreId = metastoreId;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
