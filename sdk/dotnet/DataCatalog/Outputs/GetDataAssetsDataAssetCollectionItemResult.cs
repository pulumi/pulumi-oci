// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataCatalog.Outputs
{

    [OutputType]
    public sealed class GetDataAssetsDataAssetCollectionItemResult
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        public readonly string CatalogId;
        /// <summary>
        /// OCID of the user who created the resource.
        /// </summary>
        public readonly string? CreatedById;
        /// <summary>
        /// Detailed description of the data asset.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Unique external identifier of this resource in the external source system.
        /// </summary>
        public readonly string? ExternalKey;
        /// <summary>
        /// Unique data asset key that is immutable.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// A message describing the current state in more detail. An object not in ACTIVE state may have functional limitations, see service documentation for details.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Properties;
        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Time that the resource was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The last time that a harvest was performed on the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string? TimeHarvested;
        /// <summary>
        /// Time that the resource was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// The key of the object type.
        /// </summary>
        public readonly string TypeKey;
        /// <summary>
        /// OCID of the user who updated the resource.
        /// </summary>
        public readonly string? UpdatedById;
        /// <summary>
        /// URI to the data asset instance in the API.
        /// </summary>
        public readonly string? Uri;

        [OutputConstructor]
        private GetDataAssetsDataAssetCollectionItemResult(
            string catalogId,

            string? createdById,

            string? description,

            string displayName,

            string? externalKey,

            string? key,

            string? lifecycleDetails,

            ImmutableDictionary<string, object>? properties,

            string? state,

            string? timeCreated,

            string? timeHarvested,

            string? timeUpdated,

            string typeKey,

            string? updatedById,

            string? uri)
        {
            CatalogId = catalogId;
            CreatedById = createdById;
            Description = description;
            DisplayName = displayName;
            ExternalKey = externalKey;
            Key = key;
            LifecycleDetails = lifecycleDetails;
            Properties = properties;
            State = state;
            TimeCreated = timeCreated;
            TimeHarvested = timeHarvested;
            TimeUpdated = timeUpdated;
            TypeKey = typeKey;
            UpdatedById = updatedById;
            Uri = uri;
        }
    }
}
