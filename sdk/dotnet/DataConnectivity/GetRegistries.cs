// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistries
    {
        /// <summary>
        /// This data source provides the list of Registries in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Returns a list of Data Connectivity Management Registries.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistries = Output.Create(Oci.DataConnectivity.GetRegistries.InvokeAsync(new Oci.DataConnectivity.GetRegistriesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             IsDeepLookup = @var.Registry_is_deep_lookup,
        ///             Name = @var.Registry_name,
        ///             State = @var.Registry_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistriesResult> InvokeAsync(GetRegistriesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistriesResult>("oci:DataConnectivity/getRegistries:getRegistries", args ?? new GetRegistriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Registries in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Returns a list of Data Connectivity Management Registries.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistries = Output.Create(Oci.DataConnectivity.GetRegistries.InvokeAsync(new Oci.DataConnectivity.GetRegistriesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             IsDeepLookup = @var.Registry_is_deep_lookup,
        ///             Name = @var.Registry_name,
        ///             State = @var.Registry_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistriesResult> Invoke(GetRegistriesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistriesResult>("oci:DataConnectivity/getRegistries:getRegistries", args ?? new GetRegistriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistriesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment containing the resources you want to list.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetRegistriesFilterArgs>? _filters;
        public List<Inputs.GetRegistriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegistriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// This parameter allows list registries to deep look at whole tenancy.
        /// </summary>
        [Input("isDeepLookup")]
        public bool? IsDeepLookup { get; set; }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Lifecycle state of the resource.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetRegistriesArgs()
        {
        }
    }

    public sealed class GetRegistriesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment containing the resources you want to list.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetRegistriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetRegistriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegistriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// This parameter allows list registries to deep look at whole tenancy.
        /// </summary>
        [Input("isDeepLookup")]
        public Input<bool>? IsDeepLookup { get; set; }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Lifecycle state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetRegistriesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegistriesResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetRegistriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsDeepLookup;
        public readonly string? Name;
        /// <summary>
        /// The list of registry_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistriesRegistrySummaryCollectionResult> RegistrySummaryCollections;
        /// <summary>
        /// Lifecycle states for registries in Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined UPDATING - The resource is being updated and may not be usable until all changes are commited DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons DELETED  - The resource has been deleted and isn't available FAILED   - The resource is in a failed state due to validation or other errors
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetRegistriesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetRegistriesFilterResult> filters,

            string id,

            bool? isDeepLookup,

            string? name,

            ImmutableArray<Outputs.GetRegistriesRegistrySummaryCollectionResult> registrySummaryCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IsDeepLookup = isDeepLookup;
            Name = name;
            RegistrySummaryCollections = registrySummaryCollections;
            State = state;
        }
    }
}
