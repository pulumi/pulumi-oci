// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryConnection
    {
        /// <summary>
        /// This data source provides details about a specific Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves the connection details using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryConnection = Oci.DataConnectivity.GetRegistryConnection.Invoke(new()
        ///     {
        ///         ConnectionKey = @var.Registry_connection_connection_key,
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryConnectionResult> InvokeAsync(GetRegistryConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryConnectionResult>("oci:DataConnectivity/getRegistryConnection:getRegistryConnection", args ?? new GetRegistryConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves the connection details using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryConnection = Oci.DataConnectivity.GetRegistryConnection.Invoke(new()
        ///     {
        ///         ConnectionKey = @var.Registry_connection_connection_key,
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryConnectionResult> Invoke(GetRegistryConnectionInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistryConnectionResult>("oci:DataConnectivity/getRegistryConnection:getRegistryConnection", args ?? new GetRegistryConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection key.
        /// </summary>
        [Input("connectionKey", required: true)]
        public string ConnectionKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        public GetRegistryConnectionArgs()
        {
        }
        public static new GetRegistryConnectionArgs Empty => new GetRegistryConnectionArgs();
    }

    public sealed class GetRegistryConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection key.
        /// </summary>
        [Input("connectionKey", required: true)]
        public Input<string> ConnectionKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public GetRegistryConnectionInvokeArgs()
        {
        }
        public static new GetRegistryConnectionInvokeArgs Empty => new GetRegistryConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryConnectionResult
    {
        public readonly string ConnectionKey;
        /// <summary>
        /// The properties for the connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryConnectionConnectionPropertyResult> ConnectionProperties;
        /// <summary>
        /// The description of the aggregator.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// The identifier of the aggregator.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// The default property for the connection.
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// The identifying key for the object.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryConnectionMetadataResult> Metadatas;
        /// <summary>
        /// The object's type.
        /// </summary>
        public readonly string ModelType;
        /// <summary>
        /// The object's model version.
        /// </summary>
        public readonly string ModelVersion;
        /// <summary>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        public readonly int ObjectStatus;
        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        public readonly int ObjectVersion;
        /// <summary>
        /// The schema object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryConnectionPrimarySchemaResult> PrimarySchemas;
        /// <summary>
        /// All the properties for the connection in a key-value map format.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Properties;
        public readonly string RegistryId;
        /// <summary>
        /// Information about the object and its parent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryConnectionRegistryMetadataResult> RegistryMetadatas;
        /// <summary>
        /// Specific Connection Type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegistryConnectionResult(
            string connectionKey,

            ImmutableArray<Outputs.GetRegistryConnectionConnectionPropertyResult> connectionProperties,

            string description,

            string id,

            string identifier,

            bool isDefault,

            string key,

            ImmutableArray<Outputs.GetRegistryConnectionMetadataResult> metadatas,

            string modelType,

            string modelVersion,

            string name,

            int objectStatus,

            int objectVersion,

            ImmutableArray<Outputs.GetRegistryConnectionPrimarySchemaResult> primarySchemas,

            ImmutableDictionary<string, object> properties,

            string registryId,

            ImmutableArray<Outputs.GetRegistryConnectionRegistryMetadataResult> registryMetadatas,

            string type)
        {
            ConnectionKey = connectionKey;
            ConnectionProperties = connectionProperties;
            Description = description;
            Id = id;
            Identifier = identifier;
            IsDefault = isDefault;
            Key = key;
            Metadatas = metadatas;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Name = name;
            ObjectStatus = objectStatus;
            ObjectVersion = objectVersion;
            PrimarySchemas = primarySchemas;
            Properties = properties;
            RegistryId = registryId;
            RegistryMetadatas = registryMetadatas;
            Type = type;
        }
    }
}
