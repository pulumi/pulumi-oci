// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryDataAsset
    {
        /// <summary>
        /// This data source provides details about a specific Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves details of a data asset using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistryDataAsset = Output.Create(Oci.DataConnectivity.GetRegistryDataAsset.InvokeAsync(new Oci.DataConnectivity.GetRegistryDataAssetArgs
        ///         {
        ///             DataAssetKey = @var.Registry_data_asset_data_asset_key,
        ///             RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryDataAssetResult> InvokeAsync(GetRegistryDataAssetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryDataAssetResult>("oci:DataConnectivity/getRegistryDataAsset:getRegistryDataAsset", args ?? new GetRegistryDataAssetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves details of a data asset using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistryDataAsset = Output.Create(Oci.DataConnectivity.GetRegistryDataAsset.InvokeAsync(new Oci.DataConnectivity.GetRegistryDataAssetArgs
        ///         {
        ///             DataAssetKey = @var.Registry_data_asset_data_asset_key,
        ///             RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryDataAssetResult> Invoke(GetRegistryDataAssetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistryDataAssetResult>("oci:DataConnectivity/getRegistryDataAsset:getRegistryDataAsset", args ?? new GetRegistryDataAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryDataAssetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The data asset key.
        /// </summary>
        [Input("dataAssetKey", required: true)]
        public string DataAssetKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        public GetRegistryDataAssetArgs()
        {
        }
    }

    public sealed class GetRegistryDataAssetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The data asset key.
        /// </summary>
        [Input("dataAssetKey", required: true)]
        public Input<string> DataAssetKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public GetRegistryDataAssetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegistryDataAssetResult
    {
        /// <summary>
        /// Additional properties for the data asset.
        /// </summary>
        public readonly ImmutableDictionary<string, object> AssetProperties;
        public readonly string DataAssetKey;
        /// <summary>
        /// The default connection key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetDefaultConnectionResult> DefaultConnections;
        /// <summary>
        /// A user defined description for the object.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The list of endpoints with which this data asset is associated.
        /// </summary>
        public readonly ImmutableArray<string> EndPoints;
        /// <summary>
        /// The external key for the object.
        /// </summary>
        public readonly string ExternalKey;
        public readonly string Id;
        /// <summary>
        /// Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// The identifying key for the object.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetMetadataResult> Metadatas;
        /// <summary>
        /// The property which disciminates the subtypes.
        /// </summary>
        public readonly string ModelType;
        /// <summary>
        /// The model version of an object.
        /// </summary>
        public readonly string ModelVersion;
        /// <summary>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type system maps from and to a type.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetNativeTypeSystemResult> NativeTypeSystems;
        /// <summary>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        public readonly int ObjectStatus;
        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        public readonly int ObjectVersion;
        /// <summary>
        /// All the properties for the data asset in a key-value map format.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Properties;
        public readonly string RegistryId;
        /// <summary>
        /// Information about the object and its parent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetRegistryMetadataResult> RegistryMetadatas;
        /// <summary>
        /// Specific DataAsset Type
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegistryDataAssetResult(
            ImmutableDictionary<string, object> assetProperties,

            string dataAssetKey,

            ImmutableArray<Outputs.GetRegistryDataAssetDefaultConnectionResult> defaultConnections,

            string description,

            ImmutableArray<string> endPoints,

            string externalKey,

            string id,

            string identifier,

            string key,

            ImmutableArray<Outputs.GetRegistryDataAssetMetadataResult> metadatas,

            string modelType,

            string modelVersion,

            string name,

            ImmutableArray<Outputs.GetRegistryDataAssetNativeTypeSystemResult> nativeTypeSystems,

            int objectStatus,

            int objectVersion,

            ImmutableDictionary<string, object> properties,

            string registryId,

            ImmutableArray<Outputs.GetRegistryDataAssetRegistryMetadataResult> registryMetadatas,

            string type)
        {
            AssetProperties = assetProperties;
            DataAssetKey = dataAssetKey;
            DefaultConnections = defaultConnections;
            Description = description;
            EndPoints = endPoints;
            ExternalKey = externalKey;
            Id = id;
            Identifier = identifier;
            Key = key;
            Metadatas = metadatas;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Name = name;
            NativeTypeSystems = nativeTypeSystems;
            ObjectStatus = objectStatus;
            ObjectVersion = objectVersion;
            Properties = properties;
            RegistryId = registryId;
            RegistryMetadatas = registryMetadatas;
            Type = type;
        }
    }
}
