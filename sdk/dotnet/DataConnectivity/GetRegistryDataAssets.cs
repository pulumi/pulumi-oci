// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryDataAssets
    {
        /// <summary>
        /// This data source provides the list of Registry Data Assets in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves a list of all data asset summaries.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistryDataAssets = Output.Create(Oci.DataConnectivity.GetRegistryDataAssets.InvokeAsync(new Oci.DataConnectivity.GetRegistryDataAssetsArgs
        ///         {
        ///             RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///             EndpointIds = @var.Registry_data_asset_endpoint_ids,
        ///             ExcludeEndpointIds = @var.Registry_data_asset_exclude_endpoint_ids,
        ///             ExcludeTypes = @var.Registry_data_asset_exclude_types,
        ///             FavoritesQueryParam = @var.Registry_data_asset_favorites_query_param,
        ///             Fields = @var.Registry_data_asset_fields,
        ///             FolderId = oci_data_connectivity_folder.Test_folder.Id,
        ///             IncludeTypes = @var.Registry_data_asset_include_types,
        ///             Name = @var.Registry_data_asset_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryDataAssetsResult> InvokeAsync(GetRegistryDataAssetsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryDataAssetsResult>("oci:DataConnectivity/getRegistryDataAssets:getRegistryDataAssets", args ?? new GetRegistryDataAssetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Registry Data Assets in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves a list of all data asset summaries.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRegistryDataAssets = Output.Create(Oci.DataConnectivity.GetRegistryDataAssets.InvokeAsync(new Oci.DataConnectivity.GetRegistryDataAssetsArgs
        ///         {
        ///             RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///             EndpointIds = @var.Registry_data_asset_endpoint_ids,
        ///             ExcludeEndpointIds = @var.Registry_data_asset_exclude_endpoint_ids,
        ///             ExcludeTypes = @var.Registry_data_asset_exclude_types,
        ///             FavoritesQueryParam = @var.Registry_data_asset_favorites_query_param,
        ///             Fields = @var.Registry_data_asset_fields,
        ///             FolderId = oci_data_connectivity_folder.Test_folder.Id,
        ///             IncludeTypes = @var.Registry_data_asset_include_types,
        ///             Name = @var.Registry_data_asset_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryDataAssetsResult> Invoke(GetRegistryDataAssetsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistryDataAssetsResult>("oci:DataConnectivity/getRegistryDataAssets:getRegistryDataAssets", args ?? new GetRegistryDataAssetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryDataAssetsArgs : Pulumi.InvokeArgs
    {
        [Input("endpointIds")]
        private List<string>? _endpointIds;

        /// <summary>
        /// Endpoint Ids used for data-plane APIs to filter or prefer specific endpoint.
        /// </summary>
        public List<string> EndpointIds
        {
            get => _endpointIds ?? (_endpointIds = new List<string>());
            set => _endpointIds = value;
        }

        [Input("excludeEndpointIds")]
        private List<string>? _excludeEndpointIds;

        /// <summary>
        /// Endpoints which will be excluded while listing dataAssets
        /// </summary>
        public List<string> ExcludeEndpointIds
        {
            get => _excludeEndpointIds ?? (_excludeEndpointIds = new List<string>());
            set => _excludeEndpointIds = value;
        }

        [Input("excludeTypes")]
        private List<string>? _excludeTypes;

        /// <summary>
        /// Types which wont be listed while listing dataAsset/Connection
        /// </summary>
        public List<string> ExcludeTypes
        {
            get => _excludeTypes ?? (_excludeTypes = new List<string>());
            set => _excludeTypes = value;
        }

        /// <summary>
        /// If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
        /// </summary>
        [Input("favoritesQueryParam")]
        public string? FavoritesQueryParam { get; set; }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetRegistryDataAssetsFilterArgs>? _filters;
        public List<Inputs.GetRegistryDataAssetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegistryDataAssetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique key of the folder.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("includeTypes")]
        private List<string>? _includeTypes;

        /// <summary>
        /// DataAsset type which needs to be listed while listing dataAssets
        /// </summary>
        public List<string> IncludeTypes
        {
            get => _includeTypes ?? (_includeTypes = new List<string>());
            set => _includeTypes = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        /// <summary>
        /// Specific DataAsset Type
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRegistryDataAssetsArgs()
        {
        }
    }

    public sealed class GetRegistryDataAssetsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("endpointIds")]
        private InputList<string>? _endpointIds;

        /// <summary>
        /// Endpoint Ids used for data-plane APIs to filter or prefer specific endpoint.
        /// </summary>
        public InputList<string> EndpointIds
        {
            get => _endpointIds ?? (_endpointIds = new InputList<string>());
            set => _endpointIds = value;
        }

        [Input("excludeEndpointIds")]
        private InputList<string>? _excludeEndpointIds;

        /// <summary>
        /// Endpoints which will be excluded while listing dataAssets
        /// </summary>
        public InputList<string> ExcludeEndpointIds
        {
            get => _excludeEndpointIds ?? (_excludeEndpointIds = new InputList<string>());
            set => _excludeEndpointIds = value;
        }

        [Input("excludeTypes")]
        private InputList<string>? _excludeTypes;

        /// <summary>
        /// Types which wont be listed while listing dataAsset/Connection
        /// </summary>
        public InputList<string> ExcludeTypes
        {
            get => _excludeTypes ?? (_excludeTypes = new InputList<string>());
            set => _excludeTypes = value;
        }

        /// <summary>
        /// If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
        /// </summary>
        [Input("favoritesQueryParam")]
        public Input<string>? FavoritesQueryParam { get; set; }

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetRegistryDataAssetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRegistryDataAssetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegistryDataAssetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique key of the folder.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("includeTypes")]
        private InputList<string>? _includeTypes;

        /// <summary>
        /// DataAsset type which needs to be listed while listing dataAssets
        /// </summary>
        public InputList<string> IncludeTypes
        {
            get => _includeTypes ?? (_includeTypes = new InputList<string>());
            set => _includeTypes = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        /// <summary>
        /// Specific DataAsset Type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRegistryDataAssetsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegistryDataAssetsResult
    {
        /// <summary>
        /// The list of data_asset_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetsDataAssetSummaryCollectionResult> DataAssetSummaryCollections;
        public readonly ImmutableArray<string> EndpointIds;
        public readonly ImmutableArray<string> ExcludeEndpointIds;
        public readonly ImmutableArray<string> ExcludeTypes;
        public readonly string? FavoritesQueryParam;
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetRegistryDataAssetsFilterResult> Filters;
        public readonly string? FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> IncludeTypes;
        /// <summary>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string? Name;
        public readonly string RegistryId;
        /// <summary>
        /// Specific DataAsset Type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetRegistryDataAssetsResult(
            ImmutableArray<Outputs.GetRegistryDataAssetsDataAssetSummaryCollectionResult> dataAssetSummaryCollections,

            ImmutableArray<string> endpointIds,

            ImmutableArray<string> excludeEndpointIds,

            ImmutableArray<string> excludeTypes,

            string? favoritesQueryParam,

            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetRegistryDataAssetsFilterResult> filters,

            string? folderId,

            string id,

            ImmutableArray<string> includeTypes,

            string? name,

            string registryId,

            string? type)
        {
            DataAssetSummaryCollections = dataAssetSummaryCollections;
            EndpointIds = endpointIds;
            ExcludeEndpointIds = excludeEndpointIds;
            ExcludeTypes = excludeTypes;
            FavoritesQueryParam = favoritesQueryParam;
            Fields = fields;
            Filters = filters;
            FolderId = folderId;
            Id = id;
            IncludeTypes = includeTypes;
            Name = name;
            RegistryId = registryId;
            Type = type;
        }
    }
}
