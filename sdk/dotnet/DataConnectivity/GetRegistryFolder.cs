// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryFolder
    {
        /// <summary>
        /// This data source provides details about a specific Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves the folder details using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryFolder = Oci.DataConnectivity.GetRegistryFolder.Invoke(new()
        ///     {
        ///         FolderKey = @var.Registry_folder_folder_key,
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryFolderResult> InvokeAsync(GetRegistryFolderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryFolderResult>("oci:DataConnectivity/getRegistryFolder:getRegistryFolder", args ?? new GetRegistryFolderArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves the folder details using the specified identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryFolder = Oci.DataConnectivity.GetRegistryFolder.Invoke(new()
        ///     {
        ///         FolderKey = @var.Registry_folder_folder_key,
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryFolderResult> Invoke(GetRegistryFolderInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistryFolderResult>("oci:DataConnectivity/getRegistryFolder:getRegistryFolder", args ?? new GetRegistryFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryFolderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder ID.
        /// </summary>
        [Input("folderKey", required: true)]
        public string FolderKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        public GetRegistryFolderArgs()
        {
        }
        public static new GetRegistryFolderArgs Empty => new GetRegistryFolderArgs();
    }

    public sealed class GetRegistryFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The folder ID.
        /// </summary>
        [Input("folderKey", required: true)]
        public Input<string> FolderKey { get; set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public GetRegistryFolderInvokeArgs()
        {
        }
        public static new GetRegistryFolderInvokeArgs Empty => new GetRegistryFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryFolderResult
    {
        /// <summary>
        /// List of data assets which belongs to this folder
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryFolderDataAssetResult> DataAssets;
        /// <summary>
        /// User-defined description for the folder.
        /// </summary>
        public readonly string Description;
        public readonly string FolderKey;
        public readonly string Id;
        /// <summary>
        /// Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The type of the folder.
        /// </summary>
        public readonly string ModelType;
        /// <summary>
        /// The model version of an object.
        /// </summary>
        public readonly string ModelVersion;
        /// <summary>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        public readonly int ObjectStatus;
        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        public readonly int ObjectVersion;
        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryFolderParentRefResult> ParentReves;
        public readonly string RegistryId;

        [OutputConstructor]
        private GetRegistryFolderResult(
            ImmutableArray<Outputs.GetRegistryFolderDataAssetResult> dataAssets,

            string description,

            string folderKey,

            string id,

            string identifier,

            string key,

            string modelType,

            string modelVersion,

            string name,

            int objectStatus,

            int objectVersion,

            ImmutableArray<Outputs.GetRegistryFolderParentRefResult> parentReves,

            string registryId)
        {
            DataAssets = dataAssets;
            Description = description;
            FolderKey = folderKey;
            Id = id;
            Identifier = identifier;
            Key = key;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Name = name;
            ObjectStatus = objectStatus;
            ObjectVersion = objectVersion;
            ParentReves = parentReves;
            RegistryId = registryId;
        }
    }
}
