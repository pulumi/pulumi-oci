// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryFolders
    {
        /// <summary>
        /// This data source provides the list of Registry Folders in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves a list of all the folders.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryFolders = Oci.DataConnectivity.GetRegistryFolders.Invoke(new()
        ///     {
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         FavoritesQueryParam = @var.Registry_folder_favorites_query_param,
        ///         Fields = @var.Registry_folder_fields,
        ///         Name = @var.Registry_folder_name,
        ///         Type = @var.Registry_folder_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryFoldersResult> InvokeAsync(GetRegistryFoldersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryFoldersResult>("oci:DataConnectivity/getRegistryFolders:getRegistryFolders", args ?? new GetRegistryFoldersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Registry Folders in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// Retrieves a list of all the folders.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryFolders = Oci.DataConnectivity.GetRegistryFolders.Invoke(new()
        ///     {
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         FavoritesQueryParam = @var.Registry_folder_favorites_query_param,
        ///         Fields = @var.Registry_folder_fields,
        ///         Name = @var.Registry_folder_name,
        ///         Type = @var.Registry_folder_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryFoldersResult> Invoke(GetRegistryFoldersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryFoldersResult>("oci:DataConnectivity/getRegistryFolders:getRegistryFolders", args ?? new GetRegistryFoldersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryFoldersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
        /// </summary>
        [Input("favoritesQueryParam")]
        public string? FavoritesQueryParam { get; set; }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetRegistryFoldersFilterArgs>? _filters;
        public List<Inputs.GetRegistryFoldersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegistryFoldersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The registry OCID.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        /// <summary>
        /// Type of the object to filter the results with.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRegistryFoldersArgs()
        {
        }
        public static new GetRegistryFoldersArgs Empty => new GetRegistryFoldersArgs();
    }

    public sealed class GetRegistryFoldersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
        /// </summary>
        [Input("favoritesQueryParam")]
        public Input<string>? FavoritesQueryParam { get; set; }

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetRegistryFoldersFilterInputArgs>? _filters;
        public InputList<Inputs.GetRegistryFoldersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegistryFoldersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The registry OCID.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        /// <summary>
        /// Type of the object to filter the results with.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRegistryFoldersInvokeArgs()
        {
        }
        public static new GetRegistryFoldersInvokeArgs Empty => new GetRegistryFoldersInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryFoldersResult
    {
        public readonly string? FavoritesQueryParam;
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetRegistryFoldersFilterResult> Filters;
        /// <summary>
        /// The list of folder_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryFoldersFolderSummaryCollectionResult> FolderSummaryCollections;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string? Name;
        public readonly string RegistryId;
        /// <summary>
        /// Specific DataAsset Type
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetRegistryFoldersResult(
            string? favoritesQueryParam,

            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetRegistryFoldersFilterResult> filters,

            ImmutableArray<Outputs.GetRegistryFoldersFolderSummaryCollectionResult> folderSummaryCollections,

            string id,

            string? name,

            string registryId,

            string? type)
        {
            FavoritesQueryParam = favoritesQueryParam;
            Fields = fields;
            Filters = filters;
            FolderSummaryCollections = folderSummaryCollections;
            Id = id;
            Name = name;
            RegistryId = registryId;
            Type = type;
        }
    }
}
