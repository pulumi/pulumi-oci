// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    public static class GetRegistryTypes
    {
        /// <summary>
        /// This data source provides the list of Registry Types in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// This endpoint retrieves a list of all the supported connector types.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryTypes = Oci.DataConnectivity.GetRegistryTypes.Invoke(new()
        ///     {
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         Name = @var.Registry_type_name,
        ///         Type = @var.Registry_type_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryTypesResult> InvokeAsync(GetRegistryTypesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryTypesResult>("oci:DataConnectivity/getRegistryTypes:getRegistryTypes", args ?? new GetRegistryTypesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Registry Types in Oracle Cloud Infrastructure Data Connectivity service.
        /// 
        /// This endpoint retrieves a list of all the supported connector types.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRegistryTypes = Oci.DataConnectivity.GetRegistryTypes.Invoke(new()
        ///     {
        ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
        ///         Name = @var.Registry_type_name,
        ///         Type = @var.Registry_type_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryTypesResult> Invoke(GetRegistryTypesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryTypesResult>("oci:DataConnectivity/getRegistryTypes:getRegistryTypes", args ?? new GetRegistryTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryTypesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRegistryTypesFilterArgs>? _filters;
        public List<Inputs.GetRegistryTypesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegistryTypesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The registry OCID.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        /// <summary>
        /// Type of the object to filter the results with.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRegistryTypesArgs()
        {
        }
        public static new GetRegistryTypesArgs Empty => new GetRegistryTypesArgs();
    }

    public sealed class GetRegistryTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRegistryTypesFilterInputArgs>? _filters;
        public InputList<Inputs.GetRegistryTypesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegistryTypesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The registry OCID.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        /// <summary>
        /// Type of the object to filter the results with.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRegistryTypesInvokeArgs()
        {
        }
        public static new GetRegistryTypesInvokeArgs Empty => new GetRegistryTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryTypesResult
    {
        public readonly ImmutableArray<Outputs.GetRegistryTypesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of of the attribute.
        /// </summary>
        public readonly string? Name;
        public readonly string RegistryId;
        public readonly string? Type;
        /// <summary>
        /// The list of types_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryTypesTypesSummaryCollectionResult> TypesSummaryCollections;

        [OutputConstructor]
        private GetRegistryTypesResult(
            ImmutableArray<Outputs.GetRegistryTypesFilterResult> filters,

            string id,

            string? name,

            string registryId,

            string? type,

            ImmutableArray<Outputs.GetRegistryTypesTypesSummaryCollectionResult> typesSummaryCollections)
        {
            Filters = filters;
            Id = id;
            Name = name;
            RegistryId = registryId;
            Type = type;
            TypesSummaryCollections = typesSummaryCollections;
        }
    }
}
