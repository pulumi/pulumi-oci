// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity.Inputs
{

    public sealed class RegistryFolderDataAssetNativeTypeSystemGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) User-defined description of the folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) The type of the folder.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        /// <summary>
        /// (Updatable) A reference to the parent object.
        /// </summary>
        [Input("parentRef")]
        public Input<Inputs.RegistryFolderDataAssetNativeTypeSystemParentRefGetArgs>? ParentRef { get; set; }

        [Input("typeMappingFrom")]
        private InputMap<object>? _typeMappingFrom;

        /// <summary>
        /// (Updatable) The type system to map from.
        /// </summary>
        public InputMap<object> TypeMappingFrom
        {
            get => _typeMappingFrom ?? (_typeMappingFrom = new InputMap<object>());
            set => _typeMappingFrom = value;
        }

        [Input("typeMappingTo")]
        private InputMap<object>? _typeMappingTo;

        /// <summary>
        /// (Updatable) The type system to map to.
        /// </summary>
        public InputMap<object> TypeMappingTo
        {
            get => _typeMappingTo ?? (_typeMappingTo = new InputMap<object>());
            set => _typeMappingTo = value;
        }

        [Input("types")]
        private InputList<Inputs.RegistryFolderDataAssetNativeTypeSystemTypeGetArgs>? _types;

        /// <summary>
        /// (Updatable) An array of types.
        /// </summary>
        public InputList<Inputs.RegistryFolderDataAssetNativeTypeSystemTypeGetArgs> Types
        {
            get => _types ?? (_types = new InputList<Inputs.RegistryFolderDataAssetNativeTypeSystemTypeGetArgs>());
            set => _types = value;
        }

        public RegistryFolderDataAssetNativeTypeSystemGetArgs()
        {
        }
        public static new RegistryFolderDataAssetNativeTypeSystemGetArgs Empty => new RegistryFolderDataAssetNativeTypeSystemGetArgs();
    }
}
