// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    /// <summary>
    /// This resource provides the Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.
    /// 
    /// Creates a connection under an existing data asset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testRegistryConnection = new Oci.DataConnectivity.RegistryConnection("testRegistryConnection", new()
    ///     {
    ///         Identifier = @var.Registry_connection_identifier,
    ///         Properties = @var.Registry_connection_properties,
    ///         RegistryId = oci_data_connectivity_registry.Test_registry.Id,
    ///         Type = @var.Registry_connection_type,
    ///         ConnectionProperties = new[]
    ///         {
    ///             new Oci.DataConnectivity.Inputs.RegistryConnectionConnectionPropertyArgs
    ///             {
    ///                 Name = @var.Registry_connection_connection_properties_name,
    ///                 Value = @var.Registry_connection_connection_properties_value,
    ///             },
    ///         },
    ///         Description = @var.Registry_connection_description,
    ///         IsDefault = @var.Registry_connection_is_default,
    ///         Key = @var.Registry_connection_key,
    ///         Metadata = new Oci.DataConnectivity.Inputs.RegistryConnectionMetadataArgs
    ///         {
    ///             Aggregator = new Oci.DataConnectivity.Inputs.RegistryConnectionMetadataAggregatorArgs
    ///             {
    ///                 Description = @var.Registry_connection_metadata_aggregator_description,
    ///                 Identifier = @var.Registry_connection_metadata_aggregator_identifier,
    ///                 Key = @var.Registry_connection_metadata_aggregator_key,
    ///                 Name = @var.Registry_connection_metadata_aggregator_name,
    ///                 Type = @var.Registry_connection_metadata_aggregator_type,
    ///             },
    ///             AggregatorKey = @var.Registry_connection_metadata_aggregator_key,
    ///             CreatedBy = @var.Registry_connection_metadata_created_by,
    ///             CreatedByName = @var.Registry_connection_metadata_created_by_name,
    ///             IdentifierPath = @var.Registry_connection_metadata_identifier_path,
    ///             InfoFields = @var.Registry_connection_metadata_info_fields,
    ///             IsFavorite = @var.Registry_connection_metadata_is_favorite,
    ///             Labels = @var.Registry_connection_metadata_labels,
    ///             RegistryVersion = @var.Registry_connection_metadata_registry_version,
    ///             TimeCreated = @var.Registry_connection_metadata_time_created,
    ///             TimeUpdated = @var.Registry_connection_metadata_time_updated,
    ///             UpdatedBy = @var.Registry_connection_metadata_updated_by,
    ///             UpdatedByName = @var.Registry_connection_metadata_updated_by_name,
    ///         },
    ///         ModelType = @var.Registry_connection_model_type,
    ///         ModelVersion = @var.Registry_connection_model_version,
    ///         ObjectStatus = @var.Registry_connection_object_status,
    ///         ObjectVersion = @var.Registry_connection_object_version,
    ///         PrimarySchema = new Oci.DataConnectivity.Inputs.RegistryConnectionPrimarySchemaArgs
    ///         {
    ///             Identifier = @var.Registry_connection_primary_schema_identifier,
    ///             Key = @var.Registry_connection_primary_schema_key,
    ///             ModelType = @var.Registry_connection_primary_schema_model_type,
    ///             Name = @var.Registry_connection_primary_schema_name,
    ///             DefaultConnection = @var.Registry_connection_primary_schema_default_connection,
    ///             Description = @var.Registry_connection_primary_schema_description,
    ///             ExternalKey = @var.Registry_connection_primary_schema_external_key,
    ///             IsHasContainers = @var.Registry_connection_primary_schema_is_has_containers,
    ///             Metadata = new Oci.DataConnectivity.Inputs.RegistryConnectionPrimarySchemaMetadataArgs
    ///             {
    ///                 Aggregator = new Oci.DataConnectivity.Inputs.RegistryConnectionPrimarySchemaMetadataAggregatorArgs
    ///                 {
    ///                     Description = @var.Registry_connection_primary_schema_metadata_aggregator_description,
    ///                     Identifier = @var.Registry_connection_primary_schema_metadata_aggregator_identifier,
    ///                     Key = @var.Registry_connection_primary_schema_metadata_aggregator_key,
    ///                     Name = @var.Registry_connection_primary_schema_metadata_aggregator_name,
    ///                     Type = @var.Registry_connection_primary_schema_metadata_aggregator_type,
    ///                 },
    ///                 AggregatorKey = @var.Registry_connection_primary_schema_metadata_aggregator_key,
    ///                 CreatedBy = @var.Registry_connection_primary_schema_metadata_created_by,
    ///                 CreatedByName = @var.Registry_connection_primary_schema_metadata_created_by_name,
    ///                 IdentifierPath = @var.Registry_connection_primary_schema_metadata_identifier_path,
    ///                 InfoFields = @var.Registry_connection_primary_schema_metadata_info_fields,
    ///                 IsFavorite = @var.Registry_connection_primary_schema_metadata_is_favorite,
    ///                 Labels = @var.Registry_connection_primary_schema_metadata_labels,
    ///                 RegistryVersion = @var.Registry_connection_primary_schema_metadata_registry_version,
    ///                 TimeCreated = @var.Registry_connection_primary_schema_metadata_time_created,
    ///                 TimeUpdated = @var.Registry_connection_primary_schema_metadata_time_updated,
    ///                 UpdatedBy = @var.Registry_connection_primary_schema_metadata_updated_by,
    ///                 UpdatedByName = @var.Registry_connection_primary_schema_metadata_updated_by_name,
    ///             },
    ///             ModelVersion = @var.Registry_connection_primary_schema_model_version,
    ///             ObjectStatus = @var.Registry_connection_primary_schema_object_status,
    ///             ObjectVersion = @var.Registry_connection_primary_schema_object_version,
    ///             ParentRef = new Oci.DataConnectivity.Inputs.RegistryConnectionPrimarySchemaParentRefArgs
    ///             {
    ///                 Parent = @var.Registry_connection_primary_schema_parent_ref_parent,
    ///             },
    ///             ResourceName = @var.Registry_connection_primary_schema_resource_name,
    ///         },
    ///         RegistryMetadata = new Oci.DataConnectivity.Inputs.RegistryConnectionRegistryMetadataArgs
    ///         {
    ///             AggregatorKey = @var.Registry_connection_registry_metadata_aggregator_key,
    ///             CreatedByUserId = oci_identity_user.Test_user.Id,
    ///             CreatedByUserName = oci_identity_user.Test_user.Name,
    ///             IsFavorite = @var.Registry_connection_registry_metadata_is_favorite,
    ///             Key = @var.Registry_connection_registry_metadata_key,
    ///             Labels = @var.Registry_connection_registry_metadata_labels,
    ///             RegistryVersion = @var.Registry_connection_registry_metadata_registry_version,
    ///             TimeCreated = @var.Registry_connection_registry_metadata_time_created,
    ///             TimeUpdated = @var.Registry_connection_registry_metadata_time_updated,
    ///             UpdatedByUserId = oci_identity_user.Test_user.Id,
    ///             UpdatedByUserName = oci_identity_user.Test_user.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RegistryConnections can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataConnectivity/registryConnection:RegistryConnection test_registry_connection "registries/{registryId}/connections/{connectionKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataConnectivity/registryConnection:RegistryConnection")]
    public partial class RegistryConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The properties for the connection.
        /// </summary>
        [Output("connectionProperties")]
        public Output<ImmutableArray<Outputs.RegistryConnectionConnectionProperty>> ConnectionProperties { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The description of the aggregator.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The identifier of the aggregator.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The default property for the connection.
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.RegistryConnectionMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The object's type.
        /// </summary>
        [Output("modelType")]
        public Output<string> ModelType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The object's model version.
        /// </summary>
        [Output("modelVersion")]
        public Output<string> ModelVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Output("objectStatus")]
        public Output<int> ObjectStatus { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Output("objectVersion")]
        public Output<int> ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The schema object.
        /// </summary>
        [Output("primarySchema")]
        public Output<Outputs.RegistryConnectionPrimarySchema> PrimarySchema { get; private set; } = null!;

        /// <summary>
        /// (Updatable) All the properties for the connection in a key-value map format.
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, object>> Properties { get; private set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Output("registryId")]
        public Output<string> RegistryId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Output("registryMetadata")]
        public Output<Outputs.RegistryConnectionRegistryMetadata> RegistryMetadata { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specific Connection Type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryConnection(string name, RegistryConnectionArgs args, CustomResourceOptions? options = null)
            : base("oci:DataConnectivity/registryConnection:RegistryConnection", name, args ?? new RegistryConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryConnection(string name, Input<string> id, RegistryConnectionState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataConnectivity/registryConnection:RegistryConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryConnection Get(string name, Input<string> id, RegistryConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryConnection(name, id, state, options);
        }
    }

    public sealed class RegistryConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectionProperties")]
        private InputList<Inputs.RegistryConnectionConnectionPropertyArgs>? _connectionProperties;

        /// <summary>
        /// (Updatable) The properties for the connection.
        /// </summary>
        public InputList<Inputs.RegistryConnectionConnectionPropertyArgs> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputList<Inputs.RegistryConnectionConnectionPropertyArgs>());
            set => _connectionProperties = value;
        }

        /// <summary>
        /// (Updatable) The description of the aggregator.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The identifier of the aggregator.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// (Updatable) The default property for the connection.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.RegistryConnectionMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// (Updatable) The object's type.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The object's model version.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        /// <summary>
        /// (Updatable) The schema object.
        /// </summary>
        [Input("primarySchema")]
        public Input<Inputs.RegistryConnectionPrimarySchemaArgs>? PrimarySchema { get; set; }

        [Input("properties", required: true)]
        private InputMap<object>? _properties;

        /// <summary>
        /// (Updatable) All the properties for the connection in a key-value map format.
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata")]
        public Input<Inputs.RegistryConnectionRegistryMetadataArgs>? RegistryMetadata { get; set; }

        /// <summary>
        /// (Updatable) Specific Connection Type
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RegistryConnectionArgs()
        {
        }
        public static new RegistryConnectionArgs Empty => new RegistryConnectionArgs();
    }

    public sealed class RegistryConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("connectionProperties")]
        private InputList<Inputs.RegistryConnectionConnectionPropertyGetArgs>? _connectionProperties;

        /// <summary>
        /// (Updatable) The properties for the connection.
        /// </summary>
        public InputList<Inputs.RegistryConnectionConnectionPropertyGetArgs> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputList<Inputs.RegistryConnectionConnectionPropertyGetArgs>());
            set => _connectionProperties = value;
        }

        /// <summary>
        /// (Updatable) The description of the aggregator.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The identifier of the aggregator.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// (Updatable) The default property for the connection.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.RegistryConnectionMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// (Updatable) The object's type.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The object's model version.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        /// <summary>
        /// (Updatable) The schema object.
        /// </summary>
        [Input("primarySchema")]
        public Input<Inputs.RegistryConnectionPrimarySchemaGetArgs>? PrimarySchema { get; set; }

        [Input("properties")]
        private InputMap<object>? _properties;

        /// <summary>
        /// (Updatable) All the properties for the connection in a key-value map format.
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata")]
        public Input<Inputs.RegistryConnectionRegistryMetadataGetArgs>? RegistryMetadata { get; set; }

        /// <summary>
        /// (Updatable) Specific Connection Type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public RegistryConnectionState()
        {
        }
        public static new RegistryConnectionState Empty => new RegistryConnectionState();
    }
}
