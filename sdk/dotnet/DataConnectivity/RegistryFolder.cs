// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataConnectivity
{
    /// <summary>
    /// This resource provides the Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.
    /// 
    /// Creates a folder under a specefied registry.
    /// 
    /// ## Import
    /// 
    /// RegistryFolders can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataConnectivity/registryFolder:RegistryFolder test_registry_folder "registries/{registryId}/folders/{folderKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataConnectivity/registryFolder:RegistryFolder")]
    public partial class RegistryFolder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) List of data assets which belongs to this folder
        /// </summary>
        [Output("dataAssets")]
        public Output<ImmutableArray<Outputs.RegistryFolderDataAsset>> DataAssets { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-defined description for the folder.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The type of the folder.
        /// </summary>
        [Output("modelType")]
        public Output<string> ModelType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Output("modelVersion")]
        public Output<string> ModelVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Output("objectStatus")]
        public Output<int> ObjectStatus { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Output("objectVersion")]
        public Output<int> ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A reference to the object's parent.
        /// </summary>
        [Output("parentRef")]
        public Output<Outputs.RegistryFolderParentRef> ParentRef { get; private set; } = null!;

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Output("registryId")]
        public Output<string> RegistryId { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryFolder(string name, RegistryFolderArgs args, CustomResourceOptions? options = null)
            : base("oci:DataConnectivity/registryFolder:RegistryFolder", name, args ?? new RegistryFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryFolder(string name, Input<string> id, RegistryFolderState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataConnectivity/registryFolder:RegistryFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryFolder Get(string name, Input<string> id, RegistryFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryFolder(name, id, state, options);
        }
    }

    public sealed class RegistryFolderArgs : global::Pulumi.ResourceArgs
    {
        [Input("dataAssets")]
        private InputList<Inputs.RegistryFolderDataAssetArgs>? _dataAssets;

        /// <summary>
        /// (Updatable) List of data assets which belongs to this folder
        /// </summary>
        public InputList<Inputs.RegistryFolderDataAssetArgs> DataAssets
        {
            get => _dataAssets ?? (_dataAssets = new InputList<Inputs.RegistryFolderDataAssetArgs>());
            set => _dataAssets = value;
        }

        /// <summary>
        /// (Updatable) User-defined description for the folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) The type of the folder.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        /// <summary>
        /// (Updatable) A reference to the object's parent.
        /// </summary>
        [Input("parentRef")]
        public Input<Inputs.RegistryFolderParentRefArgs>? ParentRef { get; set; }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public RegistryFolderArgs()
        {
        }
        public static new RegistryFolderArgs Empty => new RegistryFolderArgs();
    }

    public sealed class RegistryFolderState : global::Pulumi.ResourceArgs
    {
        [Input("dataAssets")]
        private InputList<Inputs.RegistryFolderDataAssetGetArgs>? _dataAssets;

        /// <summary>
        /// (Updatable) List of data assets which belongs to this folder
        /// </summary>
        public InputList<Inputs.RegistryFolderDataAssetGetArgs> DataAssets
        {
            get => _dataAssets ?? (_dataAssets = new InputList<Inputs.RegistryFolderDataAssetGetArgs>());
            set => _dataAssets = value;
        }

        /// <summary>
        /// (Updatable) User-defined description for the folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// (Updatable) Generated key that can be used in API calls to identify folder. On scenarios where reference to the folder is needed, a value can be passed in create.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) The type of the folder.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        /// <summary>
        /// (Updatable) A reference to the object's parent.
        /// </summary>
        [Input("parentRef")]
        public Input<Inputs.RegistryFolderParentRefGetArgs>? ParentRef { get; set; }

        /// <summary>
        /// The registry Ocid.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        public RegistryFolderState()
        {
        }
        public static new RegistryFolderState Empty => new RegistryFolderState();
    }
}
