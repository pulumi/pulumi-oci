// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataFlow
{
    public static class GetRunStatement
    {
        /// <summary>
        /// This data source provides details about a specific Run Statement resource in Oracle Cloud Infrastructure Data Flow service.
        /// 
        /// Retrieves the statement corresponding to the `statementId` for a Session run specified by `runId`.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunStatement = Oci.DataFlow.GetRunStatement.Invoke(new()
        ///     {
        ///         RunId = oci_dataflow_run.Test_run.Id,
        ///         StatementId = oci_dataflow_statement.Test_statement.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRunStatementResult> InvokeAsync(GetRunStatementArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunStatementResult>("oci:DataFlow/getRunStatement:getRunStatement", args ?? new GetRunStatementArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Run Statement resource in Oracle Cloud Infrastructure Data Flow service.
        /// 
        /// Retrieves the statement corresponding to the `statementId` for a Session run specified by `runId`.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunStatement = Oci.DataFlow.GetRunStatement.Invoke(new()
        ///     {
        ///         RunId = oci_dataflow_run.Test_run.Id,
        ///         StatementId = oci_dataflow_statement.Test_statement.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRunStatementResult> Invoke(GetRunStatementInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunStatementResult>("oci:DataFlow/getRunStatement:getRunStatement", args ?? new GetRunStatementInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunStatementArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the run
        /// </summary>
        [Input("runId", required: true)]
        public string RunId { get; set; } = null!;

        /// <summary>
        /// The unique ID for the statement.
        /// </summary>
        [Input("statementId", required: true)]
        public string StatementId { get; set; } = null!;

        public GetRunStatementArgs()
        {
        }
        public static new GetRunStatementArgs Empty => new GetRunStatementArgs();
    }

    public sealed class GetRunStatementInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the run
        /// </summary>
        [Input("runId", required: true)]
        public Input<string> RunId { get; set; } = null!;

        /// <summary>
        /// The unique ID for the statement.
        /// </summary>
        [Input("statementId", required: true)]
        public Input<string> StatementId { get; set; } = null!;

        public GetRunStatementInvokeArgs()
        {
        }
        public static new GetRunStatementInvokeArgs Empty => new GetRunStatementInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunStatementResult
    {
        /// <summary>
        /// The statement code to execute. Example: `println(sc.version)`
        /// </summary>
        public readonly string Code;
        /// <summary>
        /// The statement ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The execution output of a statement.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunStatementOutputResult> Outputs;
        /// <summary>
        /// The execution progress.
        /// </summary>
        public readonly double Progress;
        /// <summary>
        /// The ID of a run.
        /// </summary>
        public readonly string RunId;
        /// <summary>
        /// The current state of this statement.
        /// </summary>
        public readonly string State;
        public readonly string StatementId;
        /// <summary>
        /// The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCompleted;
        /// <summary>
        /// The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;

        [OutputConstructor]
        private GetRunStatementResult(
            string code,

            string id,

            ImmutableArray<Outputs.GetRunStatementOutputResult> outputs,

            double progress,

            string runId,

            string state,

            string statementId,

            string timeCompleted,

            string timeCreated)
        {
            Code = code;
            Id = id;
            Outputs = outputs;
            Progress = progress;
            RunId = runId;
            State = state;
            StatementId = statementId;
            TimeCompleted = timeCompleted;
            TimeCreated = timeCreated;
        }
    }
}
