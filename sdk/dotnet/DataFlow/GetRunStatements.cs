// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataFlow
{
    public static class GetRunStatements
    {
        /// <summary>
        /// This data source provides the list of Run Statements in Oracle Cloud Infrastructure Data Flow service.
        /// 
        /// Lists all statements for a Session run.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunStatements = Oci.DataFlow.GetRunStatements.Invoke(new()
        ///     {
        ///         RunId = oci_dataflow_run.Test_run.Id,
        ///         State = @var.Run_statement_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRunStatementsResult> InvokeAsync(GetRunStatementsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunStatementsResult>("oci:DataFlow/getRunStatements:getRunStatements", args ?? new GetRunStatementsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Run Statements in Oracle Cloud Infrastructure Data Flow service.
        /// 
        /// Lists all statements for a Session run.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunStatements = Oci.DataFlow.GetRunStatements.Invoke(new()
        ///     {
        ///         RunId = oci_dataflow_run.Test_run.Id,
        ///         State = @var.Run_statement_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRunStatementsResult> Invoke(GetRunStatementsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunStatementsResult>("oci:DataFlow/getRunStatements:getRunStatements", args ?? new GetRunStatementsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunStatementsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRunStatementsFilterArgs>? _filters;
        public List<Inputs.GetRunStatementsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRunStatementsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique ID for the run
        /// </summary>
        [Input("runId", required: true)]
        public string RunId { get; set; } = null!;

        /// <summary>
        /// The LifecycleState of the statement.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetRunStatementsArgs()
        {
        }
        public static new GetRunStatementsArgs Empty => new GetRunStatementsArgs();
    }

    public sealed class GetRunStatementsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRunStatementsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRunStatementsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRunStatementsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique ID for the run
        /// </summary>
        [Input("runId", required: true)]
        public Input<string> RunId { get; set; } = null!;

        /// <summary>
        /// The LifecycleState of the statement.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetRunStatementsInvokeArgs()
        {
        }
        public static new GetRunStatementsInvokeArgs Empty => new GetRunStatementsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunStatementsResult
    {
        public readonly ImmutableArray<Outputs.GetRunStatementsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of a run.
        /// </summary>
        public readonly string RunId;
        /// <summary>
        /// The current state of this statement.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of statement_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunStatementsStatementCollectionResult> StatementCollections;

        [OutputConstructor]
        private GetRunStatementsResult(
            ImmutableArray<Outputs.GetRunStatementsFilterResult> filters,

            string id,

            string runId,

            string? state,

            ImmutableArray<Outputs.GetRunStatementsStatementCollectionResult> statementCollections)
        {
            Filters = filters;
            Id = id;
            RunId = runId;
            State = state;
            StatementCollections = statementCollections;
        }
    }
}
