// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataFlow.Inputs
{

    public sealed class PoolPoolMetricGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of runs that are currently running that are using this pool.
        /// </summary>
        [Input("activeRunsCount")]
        public Input<string>? ActiveRunsCount { get; set; }

        [Input("activelyUsedNodeCounts")]
        private InputList<Inputs.PoolPoolMetricActivelyUsedNodeCountGetArgs>? _activelyUsedNodeCounts;

        /// <summary>
        /// A count of the nodes that are currently being used for each shape in this pool.
        /// </summary>
        public InputList<Inputs.PoolPoolMetricActivelyUsedNodeCountGetArgs> ActivelyUsedNodeCounts
        {
            get => _activelyUsedNodeCounts ?? (_activelyUsedNodeCounts = new InputList<Inputs.PoolPoolMetricActivelyUsedNodeCountGetArgs>());
            set => _activelyUsedNodeCounts = value;
        }

        /// <summary>
        /// The last time the mertics were updated for this.
        /// </summary>
        [Input("timeLastMetricsUpdated")]
        public Input<string>? TimeLastMetricsUpdated { get; set; }

        /// <summary>
        /// The last time this pool was started.
        /// </summary>
        [Input("timeLastStarted")]
        public Input<string>? TimeLastStarted { get; set; }

        /// <summary>
        /// The last time this pool was stopped.
        /// </summary>
        [Input("timeLastStopped")]
        public Input<string>? TimeLastStopped { get; set; }

        /// <summary>
        /// The last time a run used this pool.
        /// </summary>
        [Input("timeLastUsed")]
        public Input<string>? TimeLastUsed { get; set; }

        public PoolPoolMetricGetArgs()
        {
        }
        public static new PoolPoolMetricGetArgs Empty => new PoolPoolMetricGetArgs();
    }
}
