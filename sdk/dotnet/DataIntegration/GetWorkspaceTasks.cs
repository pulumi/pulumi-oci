// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataIntegration
{
    public static class GetWorkspaceTasks
    {
        /// <summary>
        /// This data source provides the list of Workspace Tasks in Oracle Cloud Infrastructure Data Integration service.
        /// 
        /// Retrieves a list of all tasks in a specified project or folder.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testWorkspaceTasks = Oci.DataIntegration.GetWorkspaceTasks.Invoke(new()
        ///     {
        ///         WorkspaceId = oci_dataintegration_workspace.Test_workspace.Id,
        ///         Fields = @var.Workspace_task_fields,
        ///         FolderId = oci_dataintegration_folder.Test_folder.Id,
        ///         Identifiers = @var.Workspace_task_identifier,
        ///         Keys = @var.Workspace_task_key,
        ///         Name = @var.Workspace_task_name,
        ///         Types = @var.Workspace_task_type,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkspaceTasksResult> InvokeAsync(GetWorkspaceTasksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceTasksResult>("oci:DataIntegration/getWorkspaceTasks:getWorkspaceTasks", args ?? new GetWorkspaceTasksArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Workspace Tasks in Oracle Cloud Infrastructure Data Integration service.
        /// 
        /// Retrieves a list of all tasks in a specified project or folder.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testWorkspaceTasks = Oci.DataIntegration.GetWorkspaceTasks.Invoke(new()
        ///     {
        ///         WorkspaceId = oci_dataintegration_workspace.Test_workspace.Id,
        ///         Fields = @var.Workspace_task_fields,
        ///         FolderId = oci_dataintegration_folder.Test_folder.Id,
        ///         Identifiers = @var.Workspace_task_identifier,
        ///         Keys = @var.Workspace_task_key,
        ///         Name = @var.Workspace_task_name,
        ///         Types = @var.Workspace_task_type,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkspaceTasksResult> Invoke(GetWorkspaceTasksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspaceTasksResult>("oci:DataIntegration/getWorkspaceTasks:getWorkspaceTasks", args ?? new GetWorkspaceTasksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceTasksArgs : global::Pulumi.InvokeArgs
    {
        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetWorkspaceTasksFilterArgs>? _filters;
        public List<Inputs.GetWorkspaceTasksFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetWorkspaceTasksFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique key of the folder.
        /// </summary>
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("identifiers")]
        private List<string>? _identifiers;

        /// <summary>
        /// Used to filter by the identifier of the object.
        /// </summary>
        public List<string> Identifiers
        {
            get => _identifiers ?? (_identifiers = new List<string>());
            set => _identifiers = value;
        }

        [Input("keys")]
        private List<string>? _keys;

        /// <summary>
        /// Used to filter by the key of the object.
        /// </summary>
        public List<string> Keys
        {
            get => _keys ?? (_keys = new List<string>());
            set => _keys = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        /// <summary>
        /// The workspace ID.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetWorkspaceTasksArgs()
        {
        }
        public static new GetWorkspaceTasksArgs Empty => new GetWorkspaceTasksArgs();
    }

    public sealed class GetWorkspaceTasksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies the fields to get for an object.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetWorkspaceTasksFilterInputArgs>? _filters;
        public InputList<Inputs.GetWorkspaceTasksFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetWorkspaceTasksFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique key of the folder.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("identifiers")]
        private InputList<string>? _identifiers;

        /// <summary>
        /// Used to filter by the identifier of the object.
        /// </summary>
        public InputList<string> Identifiers
        {
            get => _identifiers ?? (_identifiers = new InputList<string>());
            set => _identifiers = value;
        }

        [Input("keys")]
        private InputList<string>? _keys;

        /// <summary>
        /// Used to filter by the key of the object.
        /// </summary>
        public InputList<string> Keys
        {
            get => _keys ?? (_keys = new InputList<string>());
            set => _keys = value;
        }

        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. &lt;br&gt;&lt;br&gt;&lt;B&gt;Examples:&lt;/B&gt;&lt;br&gt; &lt;ul&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=false&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;li&gt;&lt;B&gt;?type=DATA_LOADER_TASK&amp;typeInSubtree=true&lt;/B&gt; returns all objects of type data loader task&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        /// <summary>
        /// The workspace ID.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetWorkspaceTasksInvokeArgs()
        {
        }
        public static new GetWorkspaceTasksInvokeArgs Empty => new GetWorkspaceTasksInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceTasksResult
    {
        /// <summary>
        /// An array of fields.
        /// </summary>
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetWorkspaceTasksFilterResult> Filters;
        public readonly string? FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        public readonly ImmutableArray<string> Identifiers;
        /// <summary>
        /// The key of the object.
        /// </summary>
        public readonly ImmutableArray<string> Keys;
        /// <summary>
        /// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of task_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkspaceTasksTaskSummaryCollectionResult> TaskSummaryCollections;
        /// <summary>
        /// The object type.
        /// </summary>
        public readonly ImmutableArray<string> Types;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetWorkspaceTasksResult(
            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetWorkspaceTasksFilterResult> filters,

            string? folderId,

            string id,

            ImmutableArray<string> identifiers,

            ImmutableArray<string> keys,

            string? name,

            ImmutableArray<Outputs.GetWorkspaceTasksTaskSummaryCollectionResult> taskSummaryCollections,

            ImmutableArray<string> types,

            string workspaceId)
        {
            Fields = fields;
            Filters = filters;
            FolderId = folderId;
            Id = id;
            Identifiers = identifiers;
            Keys = keys;
            Name = name;
            TaskSummaryCollections = taskSummaryCollections;
            Types = types;
            WorkspaceId = workspaceId;
        }
    }
}
