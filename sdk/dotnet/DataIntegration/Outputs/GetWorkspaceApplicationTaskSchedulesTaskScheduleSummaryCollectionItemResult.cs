// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataIntegration.Outputs
{

    [OutputType]
    public sealed class GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemResult
    {
        /// <summary>
        /// The application key.
        /// </summary>
        public readonly string ApplicationKey;
        /// <summary>
        /// The authorization mode for the task.
        /// </summary>
        public readonly string AuthMode;
        public readonly string ConfigProviderDelegate;
        /// <summary>
        /// The description of the aggregator.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The end time in milliseconds.
        /// </summary>
        public readonly string EndTimeMillis;
        /// <summary>
        /// The expected duration of the task execution.
        /// </summary>
        public readonly double ExpectedDuration;
        /// <summary>
        /// The expected duration unit of the task execution.
        /// </summary>
        public readonly string ExpectedDurationUnit;
        /// <summary>
        /// Used to filter by the identifier of the object.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Whether the backfill is enabled
        /// </summary>
        public readonly bool IsBackfillEnabled;
        /// <summary>
        /// Whether the same task can be executed concurrently.
        /// </summary>
        public readonly bool IsConcurrentAllowed;
        /// <summary>
        /// This filter parameter can be used to filter task schedule by its state.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Used to filter by the key of the object.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// The last run details for the task run.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetailResult> LastRunDetails;
        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataResult> Metadatas;
        /// <summary>
        /// The type of the object.
        /// </summary>
        public readonly string ModelType;
        /// <summary>
        /// This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        /// </summary>
        public readonly string ModelVersion;
        /// <summary>
        /// Used to filter by the name of the object.
        /// </summary>
        public readonly string Name;
        public readonly string NextRunTimeMillis;
        public readonly int NumberOfRetries;
        /// <summary>
        /// The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        public readonly int ObjectStatus;
        /// <summary>
        /// This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        /// </summary>
        public readonly int ObjectVersion;
        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        public readonly Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemParentRefResult ParentRef;
        public readonly Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemRegistryMetadataResult RegistryMetadata;
        /// <summary>
        /// The number of retry attempts.
        /// </summary>
        public readonly int RetryAttempts;
        /// <summary>
        /// The retry delay, the unit for measurement is in the property retry delay unit.
        /// </summary>
        public readonly double RetryDelay;
        /// <summary>
        /// The unit for the retry delay.
        /// </summary>
        public readonly string RetryDelayUnit;
        /// <summary>
        /// The schedule object
        /// </summary>
        public readonly Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefResult ScheduleRef;
        /// <summary>
        /// The start time in milliseconds.
        /// </summary>
        public readonly string StartTimeMillis;
        /// <summary>
        /// The workspace ID.
        /// </summary>
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemResult(
            string applicationKey,

            string authMode,

            string configProviderDelegate,

            string description,

            string endTimeMillis,

            double expectedDuration,

            string expectedDurationUnit,

            string identifier,

            bool isBackfillEnabled,

            bool isConcurrentAllowed,

            bool isEnabled,

            string key,

            ImmutableArray<Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemLastRunDetailResult> lastRunDetails,

            ImmutableArray<Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemMetadataResult> metadatas,

            string modelType,

            string modelVersion,

            string name,

            string nextRunTimeMillis,

            int numberOfRetries,

            int objectStatus,

            int objectVersion,

            Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemParentRefResult parentRef,

            Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemRegistryMetadataResult registryMetadata,

            int retryAttempts,

            double retryDelay,

            string retryDelayUnit,

            Outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionItemScheduleRefResult scheduleRef,

            string startTimeMillis,

            string workspaceId)
        {
            ApplicationKey = applicationKey;
            AuthMode = authMode;
            ConfigProviderDelegate = configProviderDelegate;
            Description = description;
            EndTimeMillis = endTimeMillis;
            ExpectedDuration = expectedDuration;
            ExpectedDurationUnit = expectedDurationUnit;
            Identifier = identifier;
            IsBackfillEnabled = isBackfillEnabled;
            IsConcurrentAllowed = isConcurrentAllowed;
            IsEnabled = isEnabled;
            Key = key;
            LastRunDetails = lastRunDetails;
            Metadatas = metadatas;
            ModelType = modelType;
            ModelVersion = modelVersion;
            Name = name;
            NextRunTimeMillis = nextRunTimeMillis;
            NumberOfRetries = numberOfRetries;
            ObjectStatus = objectStatus;
            ObjectVersion = objectVersion;
            ParentRef = parentRef;
            RegistryMetadata = registryMetadata;
            RetryAttempts = retryAttempts;
            RetryDelay = retryDelay;
            RetryDelayUnit = retryDelayUnit;
            ScheduleRef = scheduleRef;
            StartTimeMillis = startTimeMillis;
            WorkspaceId = workspaceId;
        }
    }
}
