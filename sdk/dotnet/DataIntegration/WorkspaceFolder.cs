// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataIntegration
{
    /// <summary>
    /// This resource provides the Workspace Folder resource in Oracle Cloud Infrastructure Data Integration service.
    /// 
    /// Creates a folder in a project or in another folder, limited to two levels of folders. |
    /// Folders are used to organize your design-time resources, such as tasks or data flows.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testWorkspaceFolder = new Oci.DataIntegration.WorkspaceFolder("test_workspace_folder", new()
    ///     {
    ///         Identifier = workspaceFolderIdentifier,
    ///         Name = workspaceFolderName,
    ///         RegistryMetadata = new Oci.DataIntegration.Inputs.WorkspaceFolderRegistryMetadataArgs
    ///         {
    ///             AggregatorKey = workspaceFolderRegistryMetadataAggregatorKey,
    ///             IsFavorite = workspaceFolderRegistryMetadataIsFavorite,
    ///             Key = workspaceFolderRegistryMetadataKey,
    ///             Labels = workspaceFolderRegistryMetadataLabels,
    ///             RegistryVersion = workspaceFolderRegistryMetadataRegistryVersion,
    ///         },
    ///         WorkspaceId = testWorkspace.Id,
    ///         CategoryName = testCategory.Name,
    ///         Description = workspaceFolderDescription,
    ///         Key = workspaceFolderKey,
    ///         ModelVersion = workspaceFolderModelVersion,
    ///         ObjectStatus = workspaceFolderObjectStatus,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// WorkspaceFolders can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DataIntegration/workspaceFolder:WorkspaceFolder test_workspace_folder "workspaces/{workspaceId}/folders/{folderKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataIntegration/workspaceFolder:WorkspaceFolder")]
    public partial class WorkspaceFolder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The category name.
        /// </summary>
        [Output("categoryName")]
        public Output<string> CategoryName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user defined description for the folder.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("folderKey")]
        public Output<string> FolderKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        /// </summary>
        [Output("keyMap")]
        public Output<ImmutableDictionary<string, object>> KeyMap { get; private set; } = null!;

        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.WorkspaceFolderMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The type of the object.
        /// </summary>
        [Output("modelType")]
        public Output<string> ModelType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Output("modelVersion")]
        public Output<string> ModelVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Output("objectStatus")]
        public Output<int> ObjectStatus { get; private set; } = null!;

        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Output("objectVersion")]
        public Output<int> ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        [Output("parentReves")]
        public Output<ImmutableArray<Outputs.WorkspaceFolderParentRef>> ParentReves { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Output("registryMetadata")]
        public Output<Outputs.WorkspaceFolderRegistryMetadata> RegistryMetadata { get; private set; } = null!;

        /// <summary>
        /// The workspace ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceFolder(string name, WorkspaceFolderArgs args, CustomResourceOptions? options = null)
            : base("oci:DataIntegration/workspaceFolder:WorkspaceFolder", name, args ?? new WorkspaceFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceFolder(string name, Input<string> id, WorkspaceFolderState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataIntegration/workspaceFolder:WorkspaceFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceFolder Get(string name, Input<string> id, WorkspaceFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceFolder(name, id, state, options);
        }
    }

    public sealed class WorkspaceFolderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The category name.
        /// </summary>
        [Input("categoryName")]
        public Input<string>? CategoryName { get; set; }

        /// <summary>
        /// (Updatable) A user defined description for the folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("folderKey")]
        public Input<string>? FolderKey { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata", required: true)]
        public Input<Inputs.WorkspaceFolderRegistryMetadataArgs> RegistryMetadata { get; set; } = null!;

        /// <summary>
        /// The workspace ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public WorkspaceFolderArgs()
        {
        }
        public static new WorkspaceFolderArgs Empty => new WorkspaceFolderArgs();
    }

    public sealed class WorkspaceFolderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The category name.
        /// </summary>
        [Input("categoryName")]
        public Input<string>? CategoryName { get; set; }

        /// <summary>
        /// (Updatable) A user defined description for the folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("folderKey")]
        public Input<string>? FolderKey { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("keyMap")]
        private InputMap<object>? _keyMap;

        /// <summary>
        /// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        /// </summary>
        public InputMap<object> KeyMap
        {
            get => _keyMap ?? (_keyMap = new InputMap<object>());
            set => _keyMap = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.WorkspaceFolderMetadataGetArgs>? _metadatas;

        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        public InputList<Inputs.WorkspaceFolderMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.WorkspaceFolderMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The type of the object.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        [Input("parentReves")]
        private InputList<Inputs.WorkspaceFolderParentRefGetArgs>? _parentReves;

        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        public InputList<Inputs.WorkspaceFolderParentRefGetArgs> ParentReves
        {
            get => _parentReves ?? (_parentReves = new InputList<Inputs.WorkspaceFolderParentRefGetArgs>());
            set => _parentReves = value;
        }

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata")]
        public Input<Inputs.WorkspaceFolderRegistryMetadataGetArgs>? RegistryMetadata { get; set; }

        /// <summary>
        /// The workspace ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public WorkspaceFolderState()
        {
        }
        public static new WorkspaceFolderState Empty => new WorkspaceFolderState();
    }
}
