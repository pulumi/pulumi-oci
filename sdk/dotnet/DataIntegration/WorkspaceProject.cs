// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataIntegration
{
    /// <summary>
    /// This resource provides the Workspace Project resource in Oracle Cloud Infrastructure Data Integration service.
    /// 
    /// Creates a project. Projects are organizational constructs within a workspace that you use to organize your design-time resources, such as tasks or data flows. Projects can be organized into folders.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testWorkspaceProject = new Oci.DataIntegration.WorkspaceProject("testWorkspaceProject", new()
    ///     {
    ///         Identifier = @var.Workspace_project_identifier,
    ///         WorkspaceId = oci_dataintegration_workspace.Test_workspace.Id,
    ///         Description = @var.Workspace_project_description,
    ///         Key = @var.Workspace_project_key,
    ///         ModelVersion = @var.Workspace_project_model_version,
    ///         ObjectStatus = @var.Workspace_project_object_status,
    ///         RegistryMetadata = new Oci.DataIntegration.Inputs.WorkspaceProjectRegistryMetadataArgs
    ///         {
    ///             AggregatorKey = @var.Workspace_project_registry_metadata_aggregator_key,
    ///             IsFavorite = @var.Workspace_project_registry_metadata_is_favorite,
    ///             Key = @var.Workspace_project_registry_metadata_key,
    ///             Labels = @var.Workspace_project_registry_metadata_labels,
    ///             RegistryVersion = @var.Workspace_project_registry_metadata_registry_version,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WorkspaceProjects can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataIntegration/workspaceProject:WorkspaceProject test_workspace_project "workspaces/{workspaceId}/projects/{projectKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataIntegration/workspaceProject:WorkspaceProject")]
    public partial class WorkspaceProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) A user defined description for the project.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        /// </summary>
        [Output("keyMap")]
        public Output<ImmutableDictionary<string, object>> KeyMap { get; private set; } = null!;

        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.WorkspaceProjectMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The type of the object.
        /// </summary>
        [Output("modelType")]
        public Output<string> ModelType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Output("modelVersion")]
        public Output<string> ModelVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Output("objectStatus")]
        public Output<int> ObjectStatus { get; private set; } = null!;

        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Output("objectVersion")]
        public Output<int> ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        [Output("parentReves")]
        public Output<ImmutableArray<Outputs.WorkspaceProjectParentRef>> ParentReves { get; private set; } = null!;

        [Output("projectKey")]
        public Output<string> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Output("registryMetadata")]
        public Output<Outputs.WorkspaceProjectRegistryMetadata> RegistryMetadata { get; private set; } = null!;

        /// <summary>
        /// The workspace ID.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceProject(string name, WorkspaceProjectArgs args, CustomResourceOptions? options = null)
            : base("oci:DataIntegration/workspaceProject:WorkspaceProject", name, args ?? new WorkspaceProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceProject(string name, Input<string> id, WorkspaceProjectState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataIntegration/workspaceProject:WorkspaceProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceProject Get(string name, Input<string> id, WorkspaceProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceProject(name, id, state, options);
        }
    }

    public sealed class WorkspaceProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) A user defined description for the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata")]
        public Input<Inputs.WorkspaceProjectRegistryMetadataArgs>? RegistryMetadata { get; set; }

        /// <summary>
        /// The workspace ID.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public WorkspaceProjectArgs()
        {
        }
        public static new WorkspaceProjectArgs Empty => new WorkspaceProjectArgs();
    }

    public sealed class WorkspaceProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) A user defined description for the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// (Updatable) The identifying key for the object.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("keyMap")]
        private InputMap<object>? _keyMap;

        /// <summary>
        /// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        /// </summary>
        public InputMap<object> KeyMap
        {
            get => _keyMap ?? (_keyMap = new InputMap<object>());
            set => _keyMap = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.WorkspaceProjectMetadataGetArgs>? _metadatas;

        /// <summary>
        /// A summary type containing information about the object including its key, name and when/who created/updated it.
        /// </summary>
        public InputList<Inputs.WorkspaceProjectMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.WorkspaceProjectMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The type of the object.
        /// </summary>
        [Input("modelType")]
        public Input<string>? ModelType { get; set; }

        /// <summary>
        /// (Updatable) The model version of an object.
        /// </summary>
        [Input("modelVersion")]
        public Input<string>? ModelVersion { get; set; }

        /// <summary>
        /// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        /// </summary>
        [Input("objectStatus")]
        public Input<int>? ObjectStatus { get; set; }

        /// <summary>
        /// The version of the object that is used to track changes in the object instance.
        /// </summary>
        [Input("objectVersion")]
        public Input<int>? ObjectVersion { get; set; }

        [Input("parentReves")]
        private InputList<Inputs.WorkspaceProjectParentRefGetArgs>? _parentReves;

        /// <summary>
        /// A reference to the object's parent.
        /// </summary>
        public InputList<Inputs.WorkspaceProjectParentRefGetArgs> ParentReves
        {
            get => _parentReves ?? (_parentReves = new InputList<Inputs.WorkspaceProjectParentRefGetArgs>());
            set => _parentReves = value;
        }

        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// (Updatable) Information about the object and its parent.
        /// </summary>
        [Input("registryMetadata")]
        public Input<Inputs.WorkspaceProjectRegistryMetadataGetArgs>? RegistryMetadata { get; set; }

        /// <summary>
        /// The workspace ID.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public WorkspaceProjectState()
        {
        }
        public static new WorkspaceProjectState Empty => new WorkspaceProjectState();
    }
}
