// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataLabellingService
{
    /// <summary>
    /// This resource provides the Dataset resource in Oracle Cloud Infrastructure Data Labeling Service service.
    /// 
    /// Creates a new Dataset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testDataset = new Oci.DataLabellingService.Dataset("testDataset", new Oci.DataLabellingService.DatasetArgs
    ///         {
    ///             AnnotationFormat = @var.Dataset_annotation_format,
    ///             CompartmentId = @var.Compartment_id,
    ///             DatasetFormatDetails = new Oci.DataLabellingService.Inputs.DatasetDatasetFormatDetailsArgs
    ///             {
    ///                 FormatType = @var.Dataset_dataset_format_details_format_type,
    ///             },
    ///             DatasetSourceDetails = new Oci.DataLabellingService.Inputs.DatasetDatasetSourceDetailsArgs
    ///             {
    ///                 Bucket = @var.Dataset_dataset_source_details_bucket,
    ///                 Namespace = @var.Dataset_dataset_source_details_namespace,
    ///                 SourceType = @var.Dataset_dataset_source_details_source_type,
    ///                 Prefix = @var.Dataset_dataset_source_details_prefix,
    ///             },
    ///             LabelSet = new Oci.DataLabellingService.Inputs.DatasetLabelSetArgs
    ///             {
    ///                 Items = 
    ///                 {
    ///                     new Oci.DataLabellingService.Inputs.DatasetLabelSetItemArgs
    ///                     {
    ///                         Name = @var.Dataset_label_set_items_name,
    ///                     },
    ///                 },
    ///             },
    ///             DefinedTags = @var.Dataset_defined_tags,
    ///             Description = @var.Dataset_description,
    ///             DisplayName = @var.Dataset_display_name,
    ///             FreeformTags = @var.Dataset_freeform_tags,
    ///             InitialRecordGenerationConfiguration = ,
    ///             LabelingInstructions = @var.Dataset_labeling_instructions,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Datasets can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataLabellingService/dataset:Dataset test_dataset "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataLabellingService/dataset:Dataset")]
    public partial class Dataset : Pulumi.CustomResource
    {
        /// <summary>
        /// The annotation format name required for labeling records.
        /// </summary>
        [Output("annotationFormat")]
        public Output<string> AnnotationFormat { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment of the resource.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Specifies how to process the data. Supported formats include IMAGE and TEXT.
        /// </summary>
        [Output("datasetFormatDetails")]
        public Output<Outputs.DatasetDatasetFormatDetails> DatasetFormatDetails { get; private set; } = null!;

        /// <summary>
        /// This allows the customer to specify the source of the dataset.
        /// </summary>
        [Output("datasetSourceDetails")]
        public Output<Outputs.DatasetDatasetSourceDetails> DatasetSourceDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user provided description of the dataset
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly display name for the resource.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Initial Generate Records configuration, generates records from the Dataset's source.
        /// </summary>
        [Output("initialRecordGenerationConfiguration")]
        public Output<Outputs.DatasetInitialRecordGenerationConfiguration> InitialRecordGenerationConfiguration { get; private set; } = null!;

        /// <summary>
        /// An ordered collection of Labels that are unique by name.
        /// </summary>
        [Output("labelSet")]
        public Output<Outputs.DatasetLabelSet> LabelSet { get; private set; } = null!;

        /// <summary>
        /// The labeling instructions for human labelers in rich text format
        /// </summary>
        [Output("labelingInstructions")]
        public Output<string> LabelingInstructions { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was created, in the timestamp format defined by RFC3339.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a Dataset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dataset(string name, DatasetArgs args, CustomResourceOptions? options = null)
            : base("oci:DataLabellingService/dataset:Dataset", name, args ?? new DatasetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dataset(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataLabellingService/dataset:Dataset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dataset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dataset Get(string name, Input<string> id, DatasetState? state = null, CustomResourceOptions? options = null)
        {
            return new Dataset(name, id, state, options);
        }
    }

    public sealed class DatasetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The annotation format name required for labeling records.
        /// </summary>
        [Input("annotationFormat", required: true)]
        public Input<string> AnnotationFormat { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment of the resource.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Specifies how to process the data. Supported formats include IMAGE and TEXT.
        /// </summary>
        [Input("datasetFormatDetails", required: true)]
        public Input<Inputs.DatasetDatasetFormatDetailsArgs> DatasetFormatDetails { get; set; } = null!;

        /// <summary>
        /// This allows the customer to specify the source of the dataset.
        /// </summary>
        [Input("datasetSourceDetails", required: true)]
        public Input<Inputs.DatasetDatasetSourceDetailsArgs> DatasetSourceDetails { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user provided description of the dataset
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly display name for the resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Initial Generate Records configuration, generates records from the Dataset's source.
        /// </summary>
        [Input("initialRecordGenerationConfiguration")]
        public Input<Inputs.DatasetInitialRecordGenerationConfigurationArgs>? InitialRecordGenerationConfiguration { get; set; }

        /// <summary>
        /// An ordered collection of Labels that are unique by name.
        /// </summary>
        [Input("labelSet", required: true)]
        public Input<Inputs.DatasetLabelSetArgs> LabelSet { get; set; } = null!;

        /// <summary>
        /// The labeling instructions for human labelers in rich text format
        /// </summary>
        [Input("labelingInstructions")]
        public Input<string>? LabelingInstructions { get; set; }

        public DatasetArgs()
        {
        }
    }

    public sealed class DatasetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The annotation format name required for labeling records.
        /// </summary>
        [Input("annotationFormat")]
        public Input<string>? AnnotationFormat { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment of the resource.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Specifies how to process the data. Supported formats include IMAGE and TEXT.
        /// </summary>
        [Input("datasetFormatDetails")]
        public Input<Inputs.DatasetDatasetFormatDetailsGetArgs>? DatasetFormatDetails { get; set; }

        /// <summary>
        /// This allows the customer to specify the source of the dataset.
        /// </summary>
        [Input("datasetSourceDetails")]
        public Input<Inputs.DatasetDatasetSourceDetailsGetArgs>? DatasetSourceDetails { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user provided description of the dataset
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly display name for the resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Initial Generate Records configuration, generates records from the Dataset's source.
        /// </summary>
        [Input("initialRecordGenerationConfiguration")]
        public Input<Inputs.DatasetInitialRecordGenerationConfigurationGetArgs>? InitialRecordGenerationConfiguration { get; set; }

        /// <summary>
        /// An ordered collection of Labels that are unique by name.
        /// </summary>
        [Input("labelSet")]
        public Input<Inputs.DatasetLabelSetGetArgs>? LabelSet { get; set; }

        /// <summary>
        /// The labeling instructions for human labelers in rich text format
        /// </summary>
        [Input("labelingInstructions")]
        public Input<string>? LabelingInstructions { get; set; }

        /// <summary>
        /// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the resource was created, in the timestamp format defined by RFC3339.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public DatasetState()
        {
        }
    }
}
