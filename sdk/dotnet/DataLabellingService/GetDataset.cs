// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataLabellingService
{
    public static class GetDataset
    {
        /// <summary>
        /// This data source provides details about a specific Dataset resource in Oracle Cloud Infrastructure Data Labeling Service service.
        /// 
        /// Gets a Dataset by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testDataset = Output.Create(Oci.DataLabellingService.GetDataset.InvokeAsync(new Oci.DataLabellingService.GetDatasetArgs
        ///         {
        ///             DatasetId = oci_data_labeling_service_dataset.Test_dataset.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatasetResult> InvokeAsync(GetDatasetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatasetResult>("oci:DataLabellingService/getDataset:getDataset", args ?? new GetDatasetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Dataset resource in Oracle Cloud Infrastructure Data Labeling Service service.
        /// 
        /// Gets a Dataset by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testDataset = Output.Create(Oci.DataLabellingService.GetDataset.InvokeAsync(new Oci.DataLabellingService.GetDatasetArgs
        ///         {
        ///             DatasetId = oci_data_labeling_service_dataset.Test_dataset.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatasetResult> Invoke(GetDatasetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatasetResult>("oci:DataLabellingService/getDataset:getDataset", args ?? new GetDatasetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Dataset OCID
        /// </summary>
        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        public GetDatasetArgs()
        {
        }
    }

    public sealed class GetDatasetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Dataset OCID
        /// </summary>
        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        public GetDatasetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatasetResult
    {
        /// <summary>
        /// The annotation format name required for labeling records.
        /// </summary>
        public readonly string AnnotationFormat;
        /// <summary>
        /// The OCID of the compartment of the resource.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Specifies how to process the data. Supported formats include DOCUMENT, IMAGE and TEXT.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetDatasetFormatDetailResult> DatasetFormatDetails;
        public readonly string DatasetId;
        /// <summary>
        /// This allows the customer to specify the source of the dataset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetDatasetSourceDetailResult> DatasetSourceDetails;
        /// <summary>
        /// The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A user provided description of the dataset
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-friendly display name for the resource.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the Dataset.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Initial Generate Records configuration, generates records from the Dataset's source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetInitialRecordGenerationConfigurationResult> InitialRecordGenerationConfigurations;
        /// <summary>
        /// An ordered collection of Labels that are unique by name.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetLabelSetResult> LabelSets;
        /// <summary>
        /// The labeling instructions for human labelers in rich text format
        /// </summary>
        public readonly string LabelingInstructions;
        /// <summary>
        /// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the resource was created, in the timestamp format defined by RFC3339.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetDatasetResult(
            string annotationFormat,

            string compartmentId,

            ImmutableArray<Outputs.GetDatasetDatasetFormatDetailResult> datasetFormatDetails,

            string datasetId,

            ImmutableArray<Outputs.GetDatasetDatasetSourceDetailResult> datasetSourceDetails,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            ImmutableArray<Outputs.GetDatasetInitialRecordGenerationConfigurationResult> initialRecordGenerationConfigurations,

            ImmutableArray<Outputs.GetDatasetLabelSetResult> labelSets,

            string labelingInstructions,

            string lifecycleDetails,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            AnnotationFormat = annotationFormat;
            CompartmentId = compartmentId;
            DatasetFormatDetails = datasetFormatDetails;
            DatasetId = datasetId;
            DatasetSourceDetails = datasetSourceDetails;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            InitialRecordGenerationConfigurations = initialRecordGenerationConfigurations;
            LabelSets = labelSets;
            LabelingInstructions = labelingInstructions;
            LifecycleDetails = lifecycleDetails;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
