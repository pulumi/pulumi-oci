// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataLabellingService
{
    public static class GetDatasets
    {
        /// <summary>
        /// This data source provides the list of Datasets in Oracle Cloud Infrastructure Data Labeling Service service.
        /// 
        /// Returns a list of Datasets.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatasets = Oci.DataLabellingService.GetDatasets.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AnnotationFormat = @var.Dataset_annotation_format,
        ///         DisplayName = @var.Dataset_display_name,
        ///         Id = @var.Dataset_id,
        ///         State = @var.Dataset_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatasetsResult> InvokeAsync(GetDatasetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatasetsResult>("oci:DataLabellingService/getDatasets:getDatasets", args ?? new GetDatasetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Datasets in Oracle Cloud Infrastructure Data Labeling Service service.
        /// 
        /// Returns a list of Datasets.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatasets = Oci.DataLabellingService.GetDatasets.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AnnotationFormat = @var.Dataset_annotation_format,
        ///         DisplayName = @var.Dataset_display_name,
        ///         Id = @var.Dataset_id,
        ///         State = @var.Dataset_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatasetsResult> Invoke(GetDatasetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatasetsResult>("oci:DataLabellingService/getDatasets:getDatasets", args ?? new GetDatasetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatasetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire annotation format given.
        /// </summary>
        [Input("annotationFormat")]
        public string? AnnotationFormat { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatasetsFilterArgs>? _filters;
        public List<Inputs.GetDatasetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatasetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Dataset OCID
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches this query param.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDatasetsArgs()
        {
        }
        public static new GetDatasetsArgs Empty => new GetDatasetsArgs();
    }

    public sealed class GetDatasetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire annotation format given.
        /// </summary>
        [Input("annotationFormat")]
        public Input<string>? AnnotationFormat { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDatasetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatasetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatasetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Dataset OCID
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches this query param.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDatasetsInvokeArgs()
        {
        }
        public static new GetDatasetsInvokeArgs Empty => new GetDatasetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatasetsResult
    {
        /// <summary>
        /// The annotation format name required for labeling records.
        /// </summary>
        public readonly string? AnnotationFormat;
        /// <summary>
        /// The OCID of the compartment of the resource.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of dataset_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatasetsDatasetCollectionResult> DatasetCollections;
        /// <summary>
        /// A user-friendly display name for the resource.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDatasetsFilterResult> Filters;
        /// <summary>
        /// The OCID of the Dataset.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDatasetsResult(
            string? annotationFormat,

            string compartmentId,

            ImmutableArray<Outputs.GetDatasetsDatasetCollectionResult> datasetCollections,

            string? displayName,

            ImmutableArray<Outputs.GetDatasetsFilterResult> filters,

            string? id,

            string? state)
        {
            AnnotationFormat = annotationFormat;
            CompartmentId = compartmentId;
            DatasetCollections = datasetCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
