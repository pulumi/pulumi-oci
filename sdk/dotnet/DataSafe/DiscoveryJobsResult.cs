// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    /// <summary>
    /// **Deprecated. This resource does not support create and update operations.**
    /// 
    /// This resource provides the Discovery Jobs Result resource in Oracle Cloud Infrastructure Data Safe service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDiscoveryJobsResult = new Oci.DataSafe.DiscoveryJobsResult("testDiscoveryJobsResult");
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DiscoveryJobsResults can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DataSafe/discoveryJobsResult:DiscoveryJobsResult test_discovery_jobs_result "discoveryJobs/{discoveryJobId}/results/{resultKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataSafe/discoveryJobsResult:DiscoveryJobsResult")]
    public partial class DiscoveryJobsResult : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        /// </summary>
        [Output("appDefinedChildColumnKeys")]
        public Output<ImmutableArray<string>> AppDefinedChildColumnKeys { get; private set; } = null!;

        /// <summary>
        /// The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        [Output("columnName")]
        public Output<string> ColumnName { get; private set; } = null!;

        /// <summary>
        /// The data type of the sensitive column.
        /// </summary>
        [Output("dataType")]
        public Output<string> DataType { get; private set; } = null!;

        /// <summary>
        /// Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        /// </summary>
        [Output("dbDefinedChildColumnKeys")]
        public Output<ImmutableArray<string>> DbDefinedChildColumnKeys { get; private set; } = null!;

        /// <summary>
        /// The OCID of the discovery job.
        /// </summary>
        [Output("discoveryJobId")]
        public Output<string> DiscoveryJobId { get; private set; } = null!;

        /// <summary>
        /// The type of the discovery result. It can be one of the following three types: NEW: A new sensitive column in the target database that is not in the sensitive data model. DELETED: A column that is present in the sensitive data model but has been deleted from the target database. MODIFIED: A column that is present in the target database as well as the sensitive data model but some of its attributes have been modified.
        /// </summary>
        [Output("discoveryType")]
        public Output<string> DiscoveryType { get; private set; } = null!;

        /// <summary>
        /// The estimated number of data values the column has in the associated database.
        /// </summary>
        [Output("estimatedDataValueCount")]
        public Output<string> EstimatedDataValueCount { get; private set; } = null!;

        /// <summary>
        /// Indicates if the discovery result has been processed. You can update this attribute using the PatchDiscoveryJobResults operation to track whether the discovery result has already been processed and applied to the sensitive data model.
        /// </summary>
        [Output("isResultApplied")]
        public Output<bool> IsResultApplied { get; private set; } = null!;

        /// <summary>
        /// The unique key that identifies the discovery result.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The attributes of a sensitive column that have been modified in the target database. It's populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
        /// </summary>
        [Output("modifiedAttributes")]
        public Output<ImmutableArray<Outputs.DiscoveryJobsResultModifiedAttribute>> ModifiedAttributes { get; private set; } = null!;

        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// The type of the database object that contains the sensitive column.
        /// </summary>
        [Output("objectType")]
        public Output<string> ObjectType { get; private set; } = null!;

        /// <summary>
        /// Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        /// </summary>
        [Output("parentColumnKeys")]
        public Output<ImmutableArray<string>> ParentColumnKeys { get; private set; } = null!;

        /// <summary>
        /// Specifies how to process the discovery result. It's set to NONE by default. Use the PatchDiscoveryJobResults operation to update this attribute. You can choose one of the following options: ACCEPT: To accept the discovery result and update the sensitive data model to reflect the changes. REJECT: To reject the discovery result so that it doesn't change the sensitive data model. INVALIDATE: To invalidate a newly discovered column. It adds the column to the sensitive data model but marks it as invalid. It helps track false positives and ensure that they aren't reported by future discovery jobs. After specifying the planned action, you can use the ApplyDiscoveryJobResults operation to automatically process the discovery results.
        /// </summary>
        [Output("plannedAction")]
        public Output<string> PlannedAction { get; private set; } = null!;

        /// <summary>
        /// The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        [Output("relationType")]
        public Output<string> RelationType { get; private set; } = null!;

        /// <summary>
        /// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        /// </summary>
        [Output("sampleDataValues")]
        public Output<ImmutableArray<string>> SampleDataValues { get; private set; } = null!;

        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;

        /// <summary>
        /// The unique key that identifies the sensitive column represented by the discovery result.
        /// </summary>
        [Output("sensitiveColumnkey")]
        public Output<string> SensitiveColumnkey { get; private set; } = null!;

        /// <summary>
        /// The OCID of the sensitive type associated with the sensitive column.
        /// </summary>
        [Output("sensitiveTypeId")]
        public Output<string> SensitiveTypeId { get; private set; } = null!;


        /// <summary>
        /// Create a DiscoveryJobsResult resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiscoveryJobsResult(string name, DiscoveryJobsResultArgs args, CustomResourceOptions? options = null)
            : base("oci:DataSafe/discoveryJobsResult:DiscoveryJobsResult", name, args ?? new DiscoveryJobsResultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiscoveryJobsResult(string name, Input<string> id, DiscoveryJobsResultState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataSafe/discoveryJobsResult:DiscoveryJobsResult", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiscoveryJobsResult resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiscoveryJobsResult Get(string name, Input<string> id, DiscoveryJobsResultState? state = null, CustomResourceOptions? options = null)
        {
            return new DiscoveryJobsResult(name, id, state, options);
        }
    }

    public sealed class DiscoveryJobsResultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the discovery job.
        /// </summary>
        [Input("discoveryJobId", required: true)]
        public Input<string> DiscoveryJobId { get; set; } = null!;

        public DiscoveryJobsResultArgs()
        {
        }
        public static new DiscoveryJobsResultArgs Empty => new DiscoveryJobsResultArgs();
    }

    public sealed class DiscoveryJobsResultState : global::Pulumi.ResourceArgs
    {
        [Input("appDefinedChildColumnKeys")]
        private InputList<string>? _appDefinedChildColumnKeys;

        /// <summary>
        /// Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        /// </summary>
        public InputList<string> AppDefinedChildColumnKeys
        {
            get => _appDefinedChildColumnKeys ?? (_appDefinedChildColumnKeys = new InputList<string>());
            set => _appDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// The data type of the sensitive column.
        /// </summary>
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        [Input("dbDefinedChildColumnKeys")]
        private InputList<string>? _dbDefinedChildColumnKeys;

        /// <summary>
        /// Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        /// </summary>
        public InputList<string> DbDefinedChildColumnKeys
        {
            get => _dbDefinedChildColumnKeys ?? (_dbDefinedChildColumnKeys = new InputList<string>());
            set => _dbDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The OCID of the discovery job.
        /// </summary>
        [Input("discoveryJobId")]
        public Input<string>? DiscoveryJobId { get; set; }

        /// <summary>
        /// The type of the discovery result. It can be one of the following three types: NEW: A new sensitive column in the target database that is not in the sensitive data model. DELETED: A column that is present in the sensitive data model but has been deleted from the target database. MODIFIED: A column that is present in the target database as well as the sensitive data model but some of its attributes have been modified.
        /// </summary>
        [Input("discoveryType")]
        public Input<string>? DiscoveryType { get; set; }

        /// <summary>
        /// The estimated number of data values the column has in the associated database.
        /// </summary>
        [Input("estimatedDataValueCount")]
        public Input<string>? EstimatedDataValueCount { get; set; }

        /// <summary>
        /// Indicates if the discovery result has been processed. You can update this attribute using the PatchDiscoveryJobResults operation to track whether the discovery result has already been processed and applied to the sensitive data model.
        /// </summary>
        [Input("isResultApplied")]
        public Input<bool>? IsResultApplied { get; set; }

        /// <summary>
        /// The unique key that identifies the discovery result.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("modifiedAttributes")]
        private InputList<Inputs.DiscoveryJobsResultModifiedAttributeGetArgs>? _modifiedAttributes;

        /// <summary>
        /// The attributes of a sensitive column that have been modified in the target database. It's populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
        /// </summary>
        public InputList<Inputs.DiscoveryJobsResultModifiedAttributeGetArgs> ModifiedAttributes
        {
            get => _modifiedAttributes ?? (_modifiedAttributes = new InputList<Inputs.DiscoveryJobsResultModifiedAttributeGetArgs>());
            set => _modifiedAttributes = value;
        }

        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// The type of the database object that contains the sensitive column.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        [Input("parentColumnKeys")]
        private InputList<string>? _parentColumnKeys;

        /// <summary>
        /// Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        /// </summary>
        public InputList<string> ParentColumnKeys
        {
            get => _parentColumnKeys ?? (_parentColumnKeys = new InputList<string>());
            set => _parentColumnKeys = value;
        }

        /// <summary>
        /// Specifies how to process the discovery result. It's set to NONE by default. Use the PatchDiscoveryJobResults operation to update this attribute. You can choose one of the following options: ACCEPT: To accept the discovery result and update the sensitive data model to reflect the changes. REJECT: To reject the discovery result so that it doesn't change the sensitive data model. INVALIDATE: To invalidate a newly discovered column. It adds the column to the sensitive data model but marks it as invalid. It helps track false positives and ensure that they aren't reported by future discovery jobs. After specifying the planned action, you can use the ApplyDiscoveryJobResults operation to automatically process the discovery results.
        /// </summary>
        [Input("plannedAction")]
        public Input<string>? PlannedAction { get; set; }

        /// <summary>
        /// The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        [Input("relationType")]
        public Input<string>? RelationType { get; set; }

        [Input("sampleDataValues")]
        private InputList<string>? _sampleDataValues;

        /// <summary>
        /// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        /// </summary>
        public InputList<string> SampleDataValues
        {
            get => _sampleDataValues ?? (_sampleDataValues = new InputList<string>());
            set => _sampleDataValues = value;
        }

        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The unique key that identifies the sensitive column represented by the discovery result.
        /// </summary>
        [Input("sensitiveColumnkey")]
        public Input<string>? SensitiveColumnkey { get; set; }

        /// <summary>
        /// The OCID of the sensitive type associated with the sensitive column.
        /// </summary>
        [Input("sensitiveTypeId")]
        public Input<string>? SensitiveTypeId { get; set; }

        public DiscoveryJobsResultState()
        {
        }
        public static new DiscoveryJobsResultState Empty => new DiscoveryJobsResultState();
    }
}
