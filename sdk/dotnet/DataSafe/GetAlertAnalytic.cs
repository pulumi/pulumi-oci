// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAlertAnalytic
    {
        /// <summary>
        /// This data source provides details about a specific Alert Analytic resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns aggregation details of alerts.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlertAnalytic = Oci.DataSafe.GetAlertAnalytic.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Alert_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Alert_analytic_compartment_id_in_subtree,
        ///         GroupBies = @var.Alert_analytic_group_by,
        ///         QueryTimeZone = @var.Alert_analytic_query_time_zone,
        ///         ScimQuery = @var.Alert_analytic_scim_query,
        ///         SummaryFields = @var.Alert_analytic_summary_field,
        ///         TimeEnded = @var.Alert_analytic_time_ended,
        ///         TimeStarted = @var.Alert_analytic_time_started,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlertAnalyticResult> InvokeAsync(GetAlertAnalyticArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertAnalyticResult>("oci:DataSafe/getAlertAnalytic:getAlertAnalytic", args ?? new GetAlertAnalyticArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Alert Analytic resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns aggregation details of alerts.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlertAnalytic = Oci.DataSafe.GetAlertAnalytic.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Alert_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Alert_analytic_compartment_id_in_subtree,
        ///         GroupBies = @var.Alert_analytic_group_by,
        ///         QueryTimeZone = @var.Alert_analytic_query_time_zone,
        ///         ScimQuery = @var.Alert_analytic_scim_query,
        ///         SummaryFields = @var.Alert_analytic_summary_field,
        ///         TimeEnded = @var.Alert_analytic_time_ended,
        ///         TimeStarted = @var.Alert_analytic_time_started,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertAnalyticResult> Invoke(GetAlertAnalyticInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertAnalyticResult>("oci:DataSafe/getAlertAnalytic:getAlertAnalytic", args ?? new GetAlertAnalyticInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertAnalyticArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
        /// </summary>
        [Input("queryTimeZone")]
        public string? QueryTimeZone { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated
        /// </summary>
        [Input("scimQuery")]
        public string? ScimQuery { get; set; }

        [Input("summaryFields")]
        private List<string>? _summaryFields;

        /// <summary>
        /// Specifies a subset of summarized fields to be returned in the response.
        /// </summary>
        public List<string> SummaryFields
        {
            get => _summaryFields ?? (_summaryFields = new List<string>());
            set => _summaryFields = value;
        }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public string? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public string? TimeStarted { get; set; }

        public GetAlertAnalyticArgs()
        {
        }
        public static new GetAlertAnalyticArgs Empty => new GetAlertAnalyticArgs();
    }

    public sealed class GetAlertAnalyticInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
        /// </summary>
        [Input("queryTimeZone")]
        public Input<string>? QueryTimeZone { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated
        /// </summary>
        [Input("scimQuery")]
        public Input<string>? ScimQuery { get; set; }

        [Input("summaryFields")]
        private InputList<string>? _summaryFields;

        /// <summary>
        /// Specifies a subset of summarized fields to be returned in the response.
        /// </summary>
        public InputList<string> SummaryFields
        {
            get => _summaryFields ?? (_summaryFields = new InputList<string>());
            set => _summaryFields = value;
        }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public GetAlertAnalyticInvokeArgs()
        {
        }
        public static new GetAlertAnalyticInvokeArgs Empty => new GetAlertAnalyticInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertAnalyticResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// GroupBy value used in aggregation.
        /// </summary>
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The aggregated data point items.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertAnalyticItemResult> Items;
        public readonly string? QueryTimeZone;
        public readonly string? ScimQuery;
        public readonly ImmutableArray<string> SummaryFields;
        /// <summary>
        /// The time at which the aggregation ended.
        /// </summary>
        public readonly string? TimeEnded;
        /// <summary>
        /// The time at which the aggregation started.
        /// </summary>
        public readonly string? TimeStarted;

        [OutputConstructor]
        private GetAlertAnalyticResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<string> groupBies,

            string id,

            ImmutableArray<Outputs.GetAlertAnalyticItemResult> items,

            string? queryTimeZone,

            string? scimQuery,

            ImmutableArray<string> summaryFields,

            string? timeEnded,

            string? timeStarted)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            GroupBies = groupBies;
            Id = id;
            Items = items;
            QueryTimeZone = queryTimeZone;
            ScimQuery = scimQuery;
            SummaryFields = summaryFields;
            TimeEnded = timeEnded;
            TimeStarted = timeStarted;
        }
    }
}
