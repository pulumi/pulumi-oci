// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAttributeSets
    {
        /// <summary>
        /// This data source provides the list of Attribute Sets in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves the list of attribute sets.
        /// 
        /// The ListAttributeSets operation returns only the attribute sets in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requester has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAttributeSet on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAttributeSets = Oci.DataSafe.GetAttributeSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = attributeSetAccessLevel,
        ///         AttributeSetId = testAttributeSet.Id,
        ///         AttributeSetType = attributeSetAttributeSetType,
        ///         CompartmentIdInSubtree = attributeSetCompartmentIdInSubtree,
        ///         DisplayName = attributeSetDisplayName,
        ///         InUse = attributeSetInUse,
        ///         IsUserDefined = attributeSetIsUserDefined,
        ///         State = attributeSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAttributeSetsResult> InvokeAsync(GetAttributeSetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAttributeSetsResult>("oci:DataSafe/getAttributeSets:getAttributeSets", args ?? new GetAttributeSetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Attribute Sets in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves the list of attribute sets.
        /// 
        /// The ListAttributeSets operation returns only the attribute sets in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requester has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAttributeSet on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAttributeSets = Oci.DataSafe.GetAttributeSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = attributeSetAccessLevel,
        ///         AttributeSetId = testAttributeSet.Id,
        ///         AttributeSetType = attributeSetAttributeSetType,
        ///         CompartmentIdInSubtree = attributeSetCompartmentIdInSubtree,
        ///         DisplayName = attributeSetDisplayName,
        ///         InUse = attributeSetInUse,
        ///         IsUserDefined = attributeSetIsUserDefined,
        ///         State = attributeSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAttributeSetsResult> Invoke(GetAttributeSetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttributeSetsResult>("oci:DataSafe/getAttributeSets:getAttributeSets", args ?? new GetAttributeSetsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Attribute Sets in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves the list of attribute sets.
        /// 
        /// The ListAttributeSets operation returns only the attribute sets in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requester has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAttributeSet on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAttributeSets = Oci.DataSafe.GetAttributeSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = attributeSetAccessLevel,
        ///         AttributeSetId = testAttributeSet.Id,
        ///         AttributeSetType = attributeSetAttributeSetType,
        ///         CompartmentIdInSubtree = attributeSetCompartmentIdInSubtree,
        ///         DisplayName = attributeSetDisplayName,
        ///         InUse = attributeSetInUse,
        ///         IsUserDefined = attributeSetIsUserDefined,
        ///         State = attributeSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAttributeSetsResult> Invoke(GetAttributeSetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAttributeSetsResult>("oci:DataSafe/getAttributeSets:getAttributeSets", args ?? new GetAttributeSetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAttributeSetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only attribute set resources that matches the specified attribute set OCID query param.
        /// </summary>
        [Input("attributeSetId")]
        public string? AttributeSetId { get; set; }

        /// <summary>
        /// A filter to return only attribute set resources that matches the specified attribute set type query param.
        /// </summary>
        [Input("attributeSetType")]
        public string? AttributeSetType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAttributeSetsFilterArgs>? _filters;
        public List<Inputs.GetAttributeSetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAttributeSetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return attribute set resources that are in use by other associated resources.
        /// </summary>
        [Input("inUse")]
        public string? InUse { get; set; }

        /// <summary>
        /// A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
        /// </summary>
        [Input("isUserDefined")]
        public bool? IsUserDefined { get; set; }

        /// <summary>
        /// The current state of an attribute set.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetAttributeSetsArgs()
        {
        }
        public static new GetAttributeSetsArgs Empty => new GetAttributeSetsArgs();
    }

    public sealed class GetAttributeSetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only attribute set resources that matches the specified attribute set OCID query param.
        /// </summary>
        [Input("attributeSetId")]
        public Input<string>? AttributeSetId { get; set; }

        /// <summary>
        /// A filter to return only attribute set resources that matches the specified attribute set type query param.
        /// </summary>
        [Input("attributeSetType")]
        public Input<string>? AttributeSetType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAttributeSetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAttributeSetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAttributeSetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return attribute set resources that are in use by other associated resources.
        /// </summary>
        [Input("inUse")]
        public Input<string>? InUse { get; set; }

        /// <summary>
        /// A filter to return user defined or seeded attribute set resources that matches the specified is user defined query param. A true value indicates user defined attribute set.
        /// </summary>
        [Input("isUserDefined")]
        public Input<bool>? IsUserDefined { get; set; }

        /// <summary>
        /// The current state of an attribute set.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetAttributeSetsInvokeArgs()
        {
        }
        public static new GetAttributeSetsInvokeArgs Empty => new GetAttributeSetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAttributeSetsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of attribute_set_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAttributeSetsAttributeSetCollectionResult> AttributeSetCollections;
        public readonly string? AttributeSetId;
        /// <summary>
        /// The type of attribute set.
        /// </summary>
        public readonly string? AttributeSetType;
        /// <summary>
        /// The OCID of the compartment where the attribute set is stored.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of an attribute set. The name does not have to be unique, and is changeable.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAttributeSetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the attribute set is in use by other resource.
        /// </summary>
        public readonly string? InUse;
        /// <summary>
        /// A boolean flag indicating to list user defined or seeded attribute sets.
        /// </summary>
        public readonly bool? IsUserDefined;
        /// <summary>
        /// The current state of an attribute set.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetAttributeSetsResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetAttributeSetsAttributeSetCollectionResult> attributeSetCollections,

            string? attributeSetId,

            string? attributeSetType,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAttributeSetsFilterResult> filters,

            string id,

            string? inUse,

            bool? isUserDefined,

            string? state)
        {
            AccessLevel = accessLevel;
            AttributeSetCollections = attributeSetCollections;
            AttributeSetId = attributeSetId;
            AttributeSetType = attributeSetType;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            InUse = inUse;
            IsUserDefined = isUserDefined;
            State = state;
        }
    }
}
