// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAuditArchiveRetrievals
    {
        /// <summary>
        /// This data source provides the list of Audit Archive Retrievals in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the list of audit archive retrieval.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditArchiveRetrievals = Oci.DataSafe.GetAuditArchiveRetrievals.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_archive_retrieval_access_level,
        ///         AuditArchiveRetrievalId = oci_data_safe_audit_archive_retrieval.Test_audit_archive_retrieval.Id,
        ///         CompartmentIdInSubtree = @var.Audit_archive_retrieval_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_archive_retrieval_display_name,
        ///         State = @var.Audit_archive_retrieval_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TimeOfExpiry = @var.Audit_archive_retrieval_time_of_expiry,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuditArchiveRetrievalsResult> InvokeAsync(GetAuditArchiveRetrievalsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditArchiveRetrievalsResult>("oci:DataSafe/getAuditArchiveRetrievals:getAuditArchiveRetrievals", args ?? new GetAuditArchiveRetrievalsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Archive Retrievals in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the list of audit archive retrieval.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditArchiveRetrievals = Oci.DataSafe.GetAuditArchiveRetrievals.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_archive_retrieval_access_level,
        ///         AuditArchiveRetrievalId = oci_data_safe_audit_archive_retrieval.Test_audit_archive_retrieval.Id,
        ///         CompartmentIdInSubtree = @var.Audit_archive_retrieval_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_archive_retrieval_display_name,
        ///         State = @var.Audit_archive_retrieval_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TimeOfExpiry = @var.Audit_archive_retrieval_time_of_expiry,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuditArchiveRetrievalsResult> Invoke(GetAuditArchiveRetrievalsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditArchiveRetrievalsResult>("oci:DataSafe/getAuditArchiveRetrievals:getAuditArchiveRetrievals", args ?? new GetAuditArchiveRetrievalsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditArchiveRetrievalsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// OCID of the archive retrieval.
        /// </summary>
        [Input("auditArchiveRetrievalId")]
        public string? AuditArchiveRetrievalId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAuditArchiveRetrievalsFilterArgs>? _filters;
        public List<Inputs.GetAuditArchiveRetrievalsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAuditArchiveRetrievalsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that matches the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The OCID of the target associated with the archive retrieval.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
        /// </summary>
        [Input("timeOfExpiry")]
        public string? TimeOfExpiry { get; set; }

        public GetAuditArchiveRetrievalsArgs()
        {
        }
        public static new GetAuditArchiveRetrievalsArgs Empty => new GetAuditArchiveRetrievalsArgs();
    }

    public sealed class GetAuditArchiveRetrievalsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// OCID of the archive retrieval.
        /// </summary>
        [Input("auditArchiveRetrievalId")]
        public Input<string>? AuditArchiveRetrievalId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAuditArchiveRetrievalsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAuditArchiveRetrievalsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAuditArchiveRetrievalsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that matches the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the target associated with the archive retrieval.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
        /// </summary>
        [Input("timeOfExpiry")]
        public Input<string>? TimeOfExpiry { get; set; }

        public GetAuditArchiveRetrievalsInvokeArgs()
        {
        }
        public static new GetAuditArchiveRetrievalsInvokeArgs Empty => new GetAuditArchiveRetrievalsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditArchiveRetrievalsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of audit_archive_retrieval_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult> AuditArchiveRetrievalCollections;
        public readonly string? AuditArchiveRetrievalId;
        /// <summary>
        /// The OCID of the compartment that contains archive retrieval.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the archive retrieval. The name does not have to be unique, and is changeable.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAuditArchiveRetrievalsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the archive retrieval.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target associated with the archive retrieval.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
        /// </summary>
        public readonly string? TimeOfExpiry;

        [OutputConstructor]
        private GetAuditArchiveRetrievalsResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult> auditArchiveRetrievalCollections,

            string? auditArchiveRetrievalId,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAuditArchiveRetrievalsFilterResult> filters,

            string id,

            string? state,

            string? targetId,

            string? timeOfExpiry)
        {
            AccessLevel = accessLevel;
            AuditArchiveRetrievalCollections = auditArchiveRetrievalCollections;
            AuditArchiveRetrievalId = auditArchiveRetrievalId;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            TargetId = targetId;
            TimeOfExpiry = timeOfExpiry;
        }
    }
}
