// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAuditPolicies
    {
        /// <summary>
        /// This data source provides the list of Audit Policies in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all audited targets with their corresponding provisioned audit policies, and their provisioning conditions.
        /// 
        /// The ListAuditPolicies operation returns only the audit policies in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditPolicies on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditPolicies = Oci.DataSafe.GetAuditPolicies.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_policy_access_level,
        ///         AuditPolicyId = oci_data_safe_audit_policy.Test_audit_policy.Id,
        ///         CompartmentIdInSubtree = @var.Audit_policy_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_policy_display_name,
        ///         State = @var.Audit_policy_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditPoliciesResult> InvokeAsync(GetAuditPoliciesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditPoliciesResult>("oci:DataSafe/getAuditPolicies:getAuditPolicies", args ?? new GetAuditPoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Policies in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all audited targets with their corresponding provisioned audit policies, and their provisioning conditions.
        /// 
        /// The ListAuditPolicies operation returns only the audit policies in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditPolicies on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditPolicies = Oci.DataSafe.GetAuditPolicies.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_policy_access_level,
        ///         AuditPolicyId = oci_data_safe_audit_policy.Test_audit_policy.Id,
        ///         CompartmentIdInSubtree = @var.Audit_policy_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_policy_display_name,
        ///         State = @var.Audit_policy_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditPoliciesResult> Invoke(GetAuditPoliciesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditPoliciesResult>("oci:DataSafe/getAuditPolicies:getAuditPolicies", args ?? new GetAuditPoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditPoliciesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditPolicyId")]
        public string? AuditPolicyId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAuditPoliciesFilterArgs>? _filters;
        public List<Inputs.GetAuditPoliciesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAuditPoliciesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the audit policy.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetAuditPoliciesArgs()
        {
        }
        public static new GetAuditPoliciesArgs Empty => new GetAuditPoliciesArgs();
    }

    public sealed class GetAuditPoliciesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditPolicyId")]
        public Input<string>? AuditPolicyId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAuditPoliciesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAuditPoliciesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAuditPoliciesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the audit policy.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetAuditPoliciesInvokeArgs()
        {
        }
        public static new GetAuditPoliciesInvokeArgs Empty => new GetAuditPoliciesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditPoliciesResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of audit_policy_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditPoliciesAuditPolicyCollectionResult> AuditPolicyCollections;
        public readonly string? AuditPolicyId;
        /// <summary>
        /// The OCID of the compartment containing the audit policy.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the audit policy.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAuditPoliciesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the audit policy.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target for which the audit policy is created.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetAuditPoliciesResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetAuditPoliciesAuditPolicyCollectionResult> auditPolicyCollections,

            string? auditPolicyId,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAuditPoliciesFilterResult> filters,

            string id,

            string? state,

            string? targetId)
        {
            AccessLevel = accessLevel;
            AuditPolicyCollections = auditPolicyCollections;
            AuditPolicyId = auditPolicyId;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            TargetId = targetId;
        }
    }
}
