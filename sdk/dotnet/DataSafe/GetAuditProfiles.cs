// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAuditProfiles
    {
        /// <summary>
        /// This data source provides the list of Audit Profiles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all audit profiles.
        /// 
        /// The ListAuditProfiles operation returns only the audit profiles in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditProfiles on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditProfiles = Oci.DataSafe.GetAuditProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_profile_access_level,
        ///         AuditCollectedVolumeGreaterThanOrEqualTo = @var.Audit_profile_audit_collected_volume_greater_than_or_equal_to,
        ///         AuditProfileId = oci_data_safe_audit_profile.Test_audit_profile.Id,
        ///         CompartmentIdInSubtree = @var.Audit_profile_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_profile_display_name,
        ///         IsOverrideGlobalRetentionSetting = @var.Audit_profile_is_override_global_retention_setting,
        ///         IsPaidUsageEnabled = @var.Audit_profile_is_paid_usage_enabled,
        ///         State = @var.Audit_profile_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditProfilesResult> InvokeAsync(GetAuditProfilesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditProfilesResult>("oci:DataSafe/getAuditProfiles:getAuditProfiles", args ?? new GetAuditProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Profiles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all audit profiles.
        /// 
        /// The ListAuditProfiles operation returns only the audit profiles in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditProfiles on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditProfiles = Oci.DataSafe.GetAuditProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Audit_profile_access_level,
        ///         AuditCollectedVolumeGreaterThanOrEqualTo = @var.Audit_profile_audit_collected_volume_greater_than_or_equal_to,
        ///         AuditProfileId = oci_data_safe_audit_profile.Test_audit_profile.Id,
        ///         CompartmentIdInSubtree = @var.Audit_profile_compartment_id_in_subtree,
        ///         DisplayName = @var.Audit_profile_display_name,
        ///         IsOverrideGlobalRetentionSetting = @var.Audit_profile_is_override_global_retention_setting,
        ///         IsPaidUsageEnabled = @var.Audit_profile_is_paid_usage_enabled,
        ///         State = @var.Audit_profile_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditProfilesResult> Invoke(GetAuditProfilesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditProfilesResult>("oci:DataSafe/getAuditProfiles:getAuditProfiles", args ?? new GetAuditProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only items that have count of audit records collected greater than or equal to the specified value.
        /// </summary>
        [Input("auditCollectedVolumeGreaterThanOrEqualTo")]
        public string? AuditCollectedVolumeGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditProfileId")]
        public string? AuditProfileId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAuditProfilesFilterArgs>? _filters;
        public List<Inputs.GetAuditProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAuditProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A optional filter to return only resources that match the specified retention configured value.
        /// </summary>
        [Input("isOverrideGlobalRetentionSetting")]
        public bool? IsOverrideGlobalRetentionSetting { get; set; }

        /// <summary>
        /// Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
        /// </summary>
        [Input("isPaidUsageEnabled")]
        public bool? IsPaidUsageEnabled { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetAuditProfilesArgs()
        {
        }
        public static new GetAuditProfilesArgs Empty => new GetAuditProfilesArgs();
    }

    public sealed class GetAuditProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only items that have count of audit records collected greater than or equal to the specified value.
        /// </summary>
        [Input("auditCollectedVolumeGreaterThanOrEqualTo")]
        public Input<string>? AuditCollectedVolumeGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditProfileId")]
        public Input<string>? AuditProfileId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAuditProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAuditProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAuditProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A optional filter to return only resources that match the specified retention configured value.
        /// </summary>
        [Input("isOverrideGlobalRetentionSetting")]
        public Input<bool>? IsOverrideGlobalRetentionSetting { get; set; }

        /// <summary>
        /// Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
        /// </summary>
        [Input("isPaidUsageEnabled")]
        public Input<bool>? IsPaidUsageEnabled { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetAuditProfilesInvokeArgs()
        {
        }
        public static new GetAuditProfilesInvokeArgs Empty => new GetAuditProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditProfilesResult
    {
        public readonly string? AccessLevel;
        public readonly string? AuditCollectedVolumeGreaterThanOrEqualTo;
        /// <summary>
        /// The list of audit_profile_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditProfilesAuditProfileCollectionResult> AuditProfileCollections;
        /// <summary>
        /// The OCID of the  parent audit.
        /// </summary>
        public readonly string? AuditProfileId;
        /// <summary>
        /// The OCID of the compartment that contains the audit.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the audit profile.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAuditProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether audit retention settings like online and offline months is set at the target level overriding the global audit retention settings.
        /// </summary>
        public readonly bool? IsOverrideGlobalRetentionSetting;
        /// <summary>
        /// Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
        /// </summary>
        public readonly bool? IsPaidUsageEnabled;
        /// <summary>
        /// The current state of the audit profile.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the Data Safe target for which the audit profile is created.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetAuditProfilesResult(
            string? accessLevel,

            string? auditCollectedVolumeGreaterThanOrEqualTo,

            ImmutableArray<Outputs.GetAuditProfilesAuditProfileCollectionResult> auditProfileCollections,

            string? auditProfileId,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAuditProfilesFilterResult> filters,

            string id,

            bool? isOverrideGlobalRetentionSetting,

            bool? isPaidUsageEnabled,

            string? state,

            string? targetId)
        {
            AccessLevel = accessLevel;
            AuditCollectedVolumeGreaterThanOrEqualTo = auditCollectedVolumeGreaterThanOrEqualTo;
            AuditProfileCollections = auditProfileCollections;
            AuditProfileId = auditProfileId;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            IsOverrideGlobalRetentionSetting = isOverrideGlobalRetentionSetting;
            IsPaidUsageEnabled = isPaidUsageEnabled;
            State = state;
            TargetId = targetId;
        }
    }
}
