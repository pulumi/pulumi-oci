// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetAuditTrails
    {
        /// <summary>
        /// This data source provides the list of Audit Trails in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all audit trails.
        /// The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditTrails = Oci.DataSafe.GetAuditTrails.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = auditTrailAccessLevel,
        ///         AuditTrailId = testAuditTrail.Id,
        ///         CompartmentIdInSubtree = auditTrailCompartmentIdInSubtree,
        ///         DisplayName = auditTrailDisplayName,
        ///         State = auditTrailState,
        ///         Status = auditTrailStatus,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditTrailsResult> InvokeAsync(GetAuditTrailsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditTrailsResult>("oci:DataSafe/getAuditTrails:getAuditTrails", args ?? new GetAuditTrailsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Trails in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all audit trails.
        /// The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditTrails = Oci.DataSafe.GetAuditTrails.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = auditTrailAccessLevel,
        ///         AuditTrailId = testAuditTrail.Id,
        ///         CompartmentIdInSubtree = auditTrailCompartmentIdInSubtree,
        ///         DisplayName = auditTrailDisplayName,
        ///         State = auditTrailState,
        ///         Status = auditTrailStatus,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditTrailsResult> Invoke(GetAuditTrailsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditTrailsResult>("oci:DataSafe/getAuditTrails:getAuditTrails", args ?? new GetAuditTrailsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Audit Trails in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all audit trails.
        /// The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
        /// The list does not include any subcompartments of the compartmentId passed.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAuditTrails = Oci.DataSafe.GetAuditTrails.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = auditTrailAccessLevel,
        ///         AuditTrailId = testAuditTrail.Id,
        ///         CompartmentIdInSubtree = auditTrailCompartmentIdInSubtree,
        ///         DisplayName = auditTrailDisplayName,
        ///         State = auditTrailState,
        ///         Status = auditTrailStatus,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditTrailsResult> Invoke(GetAuditTrailsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditTrailsResult>("oci:DataSafe/getAuditTrails:getAuditTrails", args ?? new GetAuditTrailsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditTrailsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditTrailId")]
        public string? AuditTrailId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAuditTrailsFilterArgs>? _filters;
        public List<Inputs.GetAuditTrailsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAuditTrailsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified sub-state of audit trail.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetAuditTrailsArgs()
        {
        }
        public static new GetAuditTrailsArgs Empty => new GetAuditTrailsArgs();
    }

    public sealed class GetAuditTrailsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified id.
        /// </summary>
        [Input("auditTrailId")]
        public Input<string>? AuditTrailId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAuditTrailsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAuditTrailsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAuditTrailsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A optional filter to return only resources that match the specified sub-state of audit trail.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetAuditTrailsInvokeArgs()
        {
        }
        public static new GetAuditTrailsInvokeArgs Empty => new GetAuditTrailsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditTrailsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of audit_trail_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditTrailsAuditTrailCollectionResult> AuditTrailCollections;
        public readonly string? AuditTrailId;
        /// <summary>
        /// The OCID of the compartment that contains the audit trail and is the same as the compartment of the audit profile resource.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the audit trail.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAuditTrailsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the audit trail.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The current sub-state of the audit trail.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The OCID of the Data Safe target for which the audit trail is created.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetAuditTrailsResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetAuditTrailsAuditTrailCollectionResult> auditTrailCollections,

            string? auditTrailId,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAuditTrailsFilterResult> filters,

            string id,

            string? state,

            string? status,

            string? targetId)
        {
            AccessLevel = accessLevel;
            AuditTrailCollections = auditTrailCollections;
            AuditTrailId = auditTrailId;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            Status = status;
            TargetId = targetId;
        }
    }
}
