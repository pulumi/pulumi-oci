// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetCompatibleFormatsForSensitiveType
    {
        /// <summary>
        /// This data source provides details about a specific Compatible Formats For Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of library masking formats compatible with the existing sensitive types.
        /// For each sensitive type, it returns the assigned default masking format as well as
        /// the other library masking formats that have the sensitiveTypeIds attribute containing
        /// the OCID of the sensitive type. 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCompatibleFormatsForSensitiveType = Output.Create(Oci.DataSafe.GetCompatibleFormatsForSensitiveType.InvokeAsync(new Oci.DataSafe.GetCompatibleFormatsForSensitiveTypeArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             AccessLevel = @var.Compatible_formats_for_sensitive_type_access_level,
        ///             CompartmentIdInSubtree = @var.Compatible_formats_for_sensitive_type_compartment_id_in_subtree,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCompatibleFormatsForSensitiveTypeResult> InvokeAsync(GetCompatibleFormatsForSensitiveTypeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCompatibleFormatsForSensitiveTypeResult>("oci:DataSafe/getCompatibleFormatsForSensitiveType:getCompatibleFormatsForSensitiveType", args ?? new GetCompatibleFormatsForSensitiveTypeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Compatible Formats For Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of library masking formats compatible with the existing sensitive types.
        /// For each sensitive type, it returns the assigned default masking format as well as
        /// the other library masking formats that have the sensitiveTypeIds attribute containing
        /// the OCID of the sensitive type. 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCompatibleFormatsForSensitiveType = Output.Create(Oci.DataSafe.GetCompatibleFormatsForSensitiveType.InvokeAsync(new Oci.DataSafe.GetCompatibleFormatsForSensitiveTypeArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             AccessLevel = @var.Compatible_formats_for_sensitive_type_access_level,
        ///             CompartmentIdInSubtree = @var.Compatible_formats_for_sensitive_type_compartment_id_in_subtree,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCompatibleFormatsForSensitiveTypeResult> Invoke(GetCompatibleFormatsForSensitiveTypeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCompatibleFormatsForSensitiveTypeResult>("oci:DataSafe/getCompatibleFormatsForSensitiveType:getCompatibleFormatsForSensitiveType", args ?? new GetCompatibleFormatsForSensitiveTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCompatibleFormatsForSensitiveTypeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        public GetCompatibleFormatsForSensitiveTypeArgs()
        {
        }
    }

    public sealed class GetCompatibleFormatsForSensitiveTypeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        public GetCompatibleFormatsForSensitiveTypeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCompatibleFormatsForSensitiveTypeResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// An array of library masking formats compatible with the existing sensitive types.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult> FormatsForSensitiveTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCompatibleFormatsForSensitiveTypeResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult> formatsForSensitiveTypes,

            string id)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            FormatsForSensitiveTypes = formatsForSensitiveTypes;
            Id = id;
        }
    }
}
