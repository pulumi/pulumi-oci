// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetDatabaseSecurityConfigs
    {
        /// <summary>
        /// This data source provides the list of Database Security Configs in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all database security configurations in Data Safe.
        /// 
        /// The ListDatabaseSecurityConfigs operation returns only the database security configurations in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListDatabaseSecurityConfigs on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSecurityConfigs = Oci.DataSafe.GetDatabaseSecurityConfigs.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = databaseSecurityConfigAccessLevel,
        ///         CompartmentIdInSubtree = databaseSecurityConfigCompartmentIdInSubtree,
        ///         DatabaseSecurityConfigId = testDatabaseSecurityConfig.Id,
        ///         DisplayName = databaseSecurityConfigDisplayName,
        ///         State = databaseSecurityConfigState,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = databaseSecurityConfigTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = databaseSecurityConfigTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseSecurityConfigsResult> InvokeAsync(GetDatabaseSecurityConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseSecurityConfigsResult>("oci:DataSafe/getDatabaseSecurityConfigs:getDatabaseSecurityConfigs", args ?? new GetDatabaseSecurityConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Database Security Configs in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all database security configurations in Data Safe.
        /// 
        /// The ListDatabaseSecurityConfigs operation returns only the database security configurations in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListDatabaseSecurityConfigs on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSecurityConfigs = Oci.DataSafe.GetDatabaseSecurityConfigs.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = databaseSecurityConfigAccessLevel,
        ///         CompartmentIdInSubtree = databaseSecurityConfigCompartmentIdInSubtree,
        ///         DatabaseSecurityConfigId = testDatabaseSecurityConfig.Id,
        ///         DisplayName = databaseSecurityConfigDisplayName,
        ///         State = databaseSecurityConfigState,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = databaseSecurityConfigTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = databaseSecurityConfigTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSecurityConfigsResult> Invoke(GetDatabaseSecurityConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSecurityConfigsResult>("oci:DataSafe/getDatabaseSecurityConfigs:getDatabaseSecurityConfigs", args ?? new GetDatabaseSecurityConfigsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Database Security Configs in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all database security configurations in Data Safe.
        /// 
        /// The ListDatabaseSecurityConfigs operation returns only the database security configurations in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListDatabaseSecurityConfigs on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSecurityConfigs = Oci.DataSafe.GetDatabaseSecurityConfigs.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = databaseSecurityConfigAccessLevel,
        ///         CompartmentIdInSubtree = databaseSecurityConfigCompartmentIdInSubtree,
        ///         DatabaseSecurityConfigId = testDatabaseSecurityConfig.Id,
        ///         DisplayName = databaseSecurityConfigDisplayName,
        ///         State = databaseSecurityConfigState,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = databaseSecurityConfigTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = databaseSecurityConfigTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSecurityConfigsResult> Invoke(GetDatabaseSecurityConfigsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSecurityConfigsResult>("oci:DataSafe/getDatabaseSecurityConfigs:getDatabaseSecurityConfigs", args ?? new GetDatabaseSecurityConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseSecurityConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the database security configuration resource.
        /// </summary>
        [Input("databaseSecurityConfigId")]
        public string? DatabaseSecurityConfigId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatabaseSecurityConfigsFilterArgs>? _filters;
        public List<Inputs.GetDatabaseSecurityConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabaseSecurityConfigsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the database security configuration.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public string? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public string? TimeCreatedLessThan { get; set; }

        public GetDatabaseSecurityConfigsArgs()
        {
        }
        public static new GetDatabaseSecurityConfigsArgs Empty => new GetDatabaseSecurityConfigsArgs();
    }

    public sealed class GetDatabaseSecurityConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the database security configuration resource.
        /// </summary>
        [Input("databaseSecurityConfigId")]
        public Input<string>? DatabaseSecurityConfigId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDatabaseSecurityConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabaseSecurityConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabaseSecurityConfigsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the database security configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public Input<string>? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public Input<string>? TimeCreatedLessThan { get; set; }

        public GetDatabaseSecurityConfigsInvokeArgs()
        {
        }
        public static new GetDatabaseSecurityConfigsInvokeArgs Empty => new GetDatabaseSecurityConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseSecurityConfigsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the database security config.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The list of database_security_config_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult> DatabaseSecurityConfigCollections;
        public readonly string? DatabaseSecurityConfigId;
        /// <summary>
        /// The display name of the database security config.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDatabaseSecurityConfigsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the database security config.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The target OCID corresponding to the database security config.
        /// </summary>
        public readonly string? TargetId;
        public readonly string? TimeCreatedGreaterThanOrEqualTo;
        public readonly string? TimeCreatedLessThan;

        [OutputConstructor]
        private GetDatabaseSecurityConfigsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult> databaseSecurityConfigCollections,

            string? databaseSecurityConfigId,

            string? displayName,

            ImmutableArray<Outputs.GetDatabaseSecurityConfigsFilterResult> filters,

            string id,

            string? state,

            string? targetId,

            string? timeCreatedGreaterThanOrEqualTo,

            string? timeCreatedLessThan)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DatabaseSecurityConfigCollections = databaseSecurityConfigCollections;
            DatabaseSecurityConfigId = databaseSecurityConfigId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            TargetId = targetId;
            TimeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            TimeCreatedLessThan = timeCreatedLessThan;
        }
    }
}
