// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingAnalytics
    {
        /// <summary>
        /// This data source provides the list of Masking Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets consolidated masking analytics data based on the specified query parameters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingAnalytics = Oci.DataSafe.GetMaskingAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Masking_analytic_compartment_id_in_subtree,
        ///         GroupBy = @var.Masking_analytic_group_by,
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMaskingAnalyticsResult> InvokeAsync(GetMaskingAnalyticsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMaskingAnalyticsResult>("oci:DataSafe/getMaskingAnalytics:getMaskingAnalytics", args ?? new GetMaskingAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets consolidated masking analytics data based on the specified query parameters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingAnalytics = Oci.DataSafe.GetMaskingAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Masking_analytic_compartment_id_in_subtree,
        ///         GroupBy = @var.Masking_analytic_group_by,
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMaskingAnalyticsResult> Invoke(GetMaskingAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMaskingAnalyticsResult>("oci:DataSafe/getMaskingAnalytics:getMaskingAnalytics", args ?? new GetMaskingAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetMaskingAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetMaskingAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMaskingAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Attribute by which the masking analytics data should be grouped.
        /// </summary>
        [Input("groupBy")]
        public string? GroupBy { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public string? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetMaskingAnalyticsArgs()
        {
        }
        public static new GetMaskingAnalyticsArgs Empty => new GetMaskingAnalyticsArgs();
    }

    public sealed class GetMaskingAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMaskingAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMaskingAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMaskingAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Attribute by which the masking analytics data should be grouped.
        /// </summary>
        [Input("groupBy")]
        public Input<string>? GroupBy { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public Input<string>? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetMaskingAnalyticsInvokeArgs()
        {
        }
        public static new GetMaskingAnalyticsInvokeArgs Empty => new GetMaskingAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingAnalyticsResult
    {
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetMaskingAnalyticsFilterResult> Filters;
        public readonly string? GroupBy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of masking_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionResult> MaskingAnalyticsCollections;
        public readonly string? MaskingPolicyId;
        /// <summary>
        /// The OCID of the target database.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetMaskingAnalyticsResult(
            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetMaskingAnalyticsFilterResult> filters,

            string? groupBy,

            string id,

            ImmutableArray<Outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionResult> maskingAnalyticsCollections,

            string? maskingPolicyId,

            string? targetId)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBy = groupBy;
            Id = id;
            MaskingAnalyticsCollections = maskingAnalyticsCollections;
            MaskingPolicyId = maskingPolicyId;
            TargetId = targetId;
        }
    }
}
