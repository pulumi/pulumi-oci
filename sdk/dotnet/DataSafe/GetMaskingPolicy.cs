// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingPolicy
    {
        /// <summary>
        /// This data source provides details about a specific Masking Policy resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking policy.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicy = Oci.DataSafe.GetMaskingPolicy.Invoke(new()
        ///     {
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMaskingPolicyResult> InvokeAsync(GetMaskingPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaskingPolicyResult>("oci:DataSafe/getMaskingPolicy:getMaskingPolicy", args ?? new GetMaskingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Masking Policy resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking policy.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicy = Oci.DataSafe.GetMaskingPolicy.Invoke(new()
        ///     {
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMaskingPolicyResult> Invoke(GetMaskingPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingPolicyResult>("oci:DataSafe/getMaskingPolicy:getMaskingPolicy", args ?? new GetMaskingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        [Input("maskingPolicyId", required: true)]
        public string MaskingPolicyId { get; set; } = null!;

        public GetMaskingPolicyArgs()
        {
        }
        public static new GetMaskingPolicyArgs Empty => new GetMaskingPolicyArgs();
    }

    public sealed class GetMaskingPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        [Input("maskingPolicyId", required: true)]
        public Input<string> MaskingPolicyId { get; set; } = null!;

        public GetMaskingPolicyInvokeArgs()
        {
        }
        public static new GetMaskingPolicyInvokeArgs Empty => new GetMaskingPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingPolicyResult
    {
        public readonly int AddMaskingColumnsFromSdmTrigger;
        /// <summary>
        /// The source of masking columns.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaskingPolicyColumnSourceResult> ColumnSources;
        /// <summary>
        /// The OCID of the compartment that contains the masking policy.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The description of the masking policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of the masking policy.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        /// </summary>
        public readonly bool IsDropTempTablesEnabled;
        /// <summary>
        /// Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        /// </summary>
        public readonly bool IsRedoLoggingEnabled;
        /// <summary>
        /// Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        /// </summary>
        public readonly bool IsRefreshStatsEnabled;
        public readonly string MaskingPolicyId;
        /// <summary>
        /// Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        /// </summary>
        public readonly string ParallelDegree;
        /// <summary>
        /// A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        /// </summary>
        public readonly string PostMaskingScript;
        /// <summary>
        /// A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        /// </summary>
        public readonly string PreMaskingScript;
        /// <summary>
        /// Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
        /// </summary>
        public readonly string Recompile;
        /// <summary>
        /// The current state of the masking policy.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetMaskingPolicyResult(
            int addMaskingColumnsFromSdmTrigger,

            ImmutableArray<Outputs.GetMaskingPolicyColumnSourceResult> columnSources,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isDropTempTablesEnabled,

            bool isRedoLoggingEnabled,

            bool isRefreshStatsEnabled,

            string maskingPolicyId,

            string parallelDegree,

            string postMaskingScript,

            string preMaskingScript,

            string recompile,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            AddMaskingColumnsFromSdmTrigger = addMaskingColumnsFromSdmTrigger;
            ColumnSources = columnSources;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsDropTempTablesEnabled = isDropTempTablesEnabled;
            IsRedoLoggingEnabled = isRedoLoggingEnabled;
            IsRefreshStatsEnabled = isRefreshStatsEnabled;
            MaskingPolicyId = maskingPolicyId;
            ParallelDegree = parallelDegree;
            PostMaskingScript = postMaskingScript;
            PreMaskingScript = preMaskingScript;
            Recompile = recompile;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
