// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingPolicyHealthReports
    {
        /// <summary>
        /// This data source provides the list of Masking Policy Health Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of masking policy health reports based on the specified query parameters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyHealthReports = Oci.DataSafe.GetMaskingPolicyHealthReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = maskingPolicyHealthReportAccessLevel,
        ///         CompartmentIdInSubtree = maskingPolicyHealthReportCompartmentIdInSubtree,
        ///         DisplayName = maskingPolicyHealthReportDisplayName,
        ///         MaskingPolicyHealthReportId = testMaskingPolicyHealthReport.Id,
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         State = maskingPolicyHealthReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMaskingPolicyHealthReportsResult> InvokeAsync(GetMaskingPolicyHealthReportsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaskingPolicyHealthReportsResult>("oci:DataSafe/getMaskingPolicyHealthReports:getMaskingPolicyHealthReports", args ?? new GetMaskingPolicyHealthReportsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Policy Health Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of masking policy health reports based on the specified query parameters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyHealthReports = Oci.DataSafe.GetMaskingPolicyHealthReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = maskingPolicyHealthReportAccessLevel,
        ///         CompartmentIdInSubtree = maskingPolicyHealthReportCompartmentIdInSubtree,
        ///         DisplayName = maskingPolicyHealthReportDisplayName,
        ///         MaskingPolicyHealthReportId = testMaskingPolicyHealthReport.Id,
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         State = maskingPolicyHealthReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaskingPolicyHealthReportsResult> Invoke(GetMaskingPolicyHealthReportsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingPolicyHealthReportsResult>("oci:DataSafe/getMaskingPolicyHealthReports:getMaskingPolicyHealthReports", args ?? new GetMaskingPolicyHealthReportsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Policy Health Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of masking policy health reports based on the specified query parameters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyHealthReports = Oci.DataSafe.GetMaskingPolicyHealthReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = maskingPolicyHealthReportAccessLevel,
        ///         CompartmentIdInSubtree = maskingPolicyHealthReportCompartmentIdInSubtree,
        ///         DisplayName = maskingPolicyHealthReportDisplayName,
        ///         MaskingPolicyHealthReportId = testMaskingPolicyHealthReport.Id,
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         State = maskingPolicyHealthReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaskingPolicyHealthReportsResult> Invoke(GetMaskingPolicyHealthReportsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingPolicyHealthReportsResult>("oci:DataSafe/getMaskingPolicyHealthReports:getMaskingPolicyHealthReports", args ?? new GetMaskingPolicyHealthReportsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingPolicyHealthReportsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMaskingPolicyHealthReportsFilterArgs>? _filters;
        public List<Inputs.GetMaskingPolicyHealthReportsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMaskingPolicyHealthReportsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy health report OCID.
        /// </summary>
        [Input("maskingPolicyHealthReportId")]
        public string? MaskingPolicyHealthReportId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public string? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified lifecycle states.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetMaskingPolicyHealthReportsArgs()
        {
        }
        public static new GetMaskingPolicyHealthReportsArgs Empty => new GetMaskingPolicyHealthReportsArgs();
    }

    public sealed class GetMaskingPolicyHealthReportsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMaskingPolicyHealthReportsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMaskingPolicyHealthReportsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMaskingPolicyHealthReportsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy health report OCID.
        /// </summary>
        [Input("maskingPolicyHealthReportId")]
        public Input<string>? MaskingPolicyHealthReportId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public Input<string>? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified lifecycle states.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetMaskingPolicyHealthReportsInvokeArgs()
        {
        }
        public static new GetMaskingPolicyHealthReportsInvokeArgs Empty => new GetMaskingPolicyHealthReportsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingPolicyHealthReportsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment that contains the health report.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the health report.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMaskingPolicyHealthReportsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of masking_policy_health_report_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionResult> MaskingPolicyHealthReportCollections;
        public readonly string? MaskingPolicyHealthReportId;
        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        public readonly string? MaskingPolicyId;
        /// <summary>
        /// The current state of the health report.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target database for which this report was created.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetMaskingPolicyHealthReportsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetMaskingPolicyHealthReportsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionResult> maskingPolicyHealthReportCollections,

            string? maskingPolicyHealthReportId,

            string? maskingPolicyId,

            string? state,

            string? targetId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MaskingPolicyHealthReportCollections = maskingPolicyHealthReportCollections;
            MaskingPolicyHealthReportId = maskingPolicyHealthReportId;
            MaskingPolicyId = maskingPolicyId;
            State = state;
            TargetId = targetId;
        }
    }
}
