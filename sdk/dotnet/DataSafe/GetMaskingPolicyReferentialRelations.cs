// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingPolicyReferentialRelations
    {
        /// <summary>
        /// This data source provides the list of Masking Policy Referential Relations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of referential relations present in the specified masking policy based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyReferentialRelations = Oci.DataSafe.GetMaskingPolicyReferentialRelations.Invoke(new()
        ///     {
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         ColumnNames = maskingPolicyReferentialRelationColumnName,
        ///         Objects = maskingPolicyReferentialRelationObject,
        ///         RelationTypes = maskingPolicyReferentialRelationRelationType,
        ///         SchemaNames = maskingPolicyReferentialRelationSchemaName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMaskingPolicyReferentialRelationsResult> InvokeAsync(GetMaskingPolicyReferentialRelationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaskingPolicyReferentialRelationsResult>("oci:DataSafe/getMaskingPolicyReferentialRelations:getMaskingPolicyReferentialRelations", args ?? new GetMaskingPolicyReferentialRelationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Policy Referential Relations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of referential relations present in the specified masking policy based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyReferentialRelations = Oci.DataSafe.GetMaskingPolicyReferentialRelations.Invoke(new()
        ///     {
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         ColumnNames = maskingPolicyReferentialRelationColumnName,
        ///         Objects = maskingPolicyReferentialRelationObject,
        ///         RelationTypes = maskingPolicyReferentialRelationRelationType,
        ///         SchemaNames = maskingPolicyReferentialRelationSchemaName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaskingPolicyReferentialRelationsResult> Invoke(GetMaskingPolicyReferentialRelationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingPolicyReferentialRelationsResult>("oci:DataSafe/getMaskingPolicyReferentialRelations:getMaskingPolicyReferentialRelations", args ?? new GetMaskingPolicyReferentialRelationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Policy Referential Relations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of referential relations present in the specified masking policy based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingPolicyReferentialRelations = Oci.DataSafe.GetMaskingPolicyReferentialRelations.Invoke(new()
        ///     {
        ///         MaskingPolicyId = testMaskingPolicy.Id,
        ///         ColumnNames = maskingPolicyReferentialRelationColumnName,
        ///         Objects = maskingPolicyReferentialRelationObject,
        ///         RelationTypes = maskingPolicyReferentialRelationRelationType,
        ///         SchemaNames = maskingPolicyReferentialRelationSchemaName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaskingPolicyReferentialRelationsResult> Invoke(GetMaskingPolicyReferentialRelationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingPolicyReferentialRelationsResult>("oci:DataSafe/getMaskingPolicyReferentialRelations:getMaskingPolicyReferentialRelations", args ?? new GetMaskingPolicyReferentialRelationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingPolicyReferentialRelationsArgs : global::Pulumi.InvokeArgs
    {
        [Input("columnNames")]
        private List<string>? _columnNames;

        /// <summary>
        /// A filter to return only a specific column based on column name.
        /// </summary>
        public List<string> ColumnNames
        {
            get => _columnNames ?? (_columnNames = new List<string>());
            set => _columnNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetMaskingPolicyReferentialRelationsFilterArgs>? _filters;
        public List<Inputs.GetMaskingPolicyReferentialRelationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMaskingPolicyReferentialRelationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        [Input("maskingPolicyId", required: true)]
        public string MaskingPolicyId { get; set; } = null!;

        [Input("objects")]
        private List<string>? _objects;

        /// <summary>
        /// A filter to return only items related to a specific object name.
        /// </summary>
        public List<string> Objects
        {
            get => _objects ?? (_objects = new List<string>());
            set => _objects = value;
        }

        [Input("relationTypes")]
        private List<string>? _relationTypes;

        /// <summary>
        /// A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        /// </summary>
        public List<string> RelationTypes
        {
            get => _relationTypes ?? (_relationTypes = new List<string>());
            set => _relationTypes = value;
        }

        [Input("schemaNames")]
        private List<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public List<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new List<string>());
            set => _schemaNames = value;
        }

        public GetMaskingPolicyReferentialRelationsArgs()
        {
        }
        public static new GetMaskingPolicyReferentialRelationsArgs Empty => new GetMaskingPolicyReferentialRelationsArgs();
    }

    public sealed class GetMaskingPolicyReferentialRelationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("columnNames")]
        private InputList<string>? _columnNames;

        /// <summary>
        /// A filter to return only a specific column based on column name.
        /// </summary>
        public InputList<string> ColumnNames
        {
            get => _columnNames ?? (_columnNames = new InputList<string>());
            set => _columnNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetMaskingPolicyReferentialRelationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMaskingPolicyReferentialRelationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMaskingPolicyReferentialRelationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the masking policy.
        /// </summary>
        [Input("maskingPolicyId", required: true)]
        public Input<string> MaskingPolicyId { get; set; } = null!;

        [Input("objects")]
        private InputList<string>? _objects;

        /// <summary>
        /// A filter to return only items related to a specific object name.
        /// </summary>
        public InputList<string> Objects
        {
            get => _objects ?? (_objects = new InputList<string>());
            set => _objects = value;
        }

        [Input("relationTypes")]
        private InputList<string>? _relationTypes;

        /// <summary>
        /// A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        /// </summary>
        public InputList<string> RelationTypes
        {
            get => _relationTypes ?? (_relationTypes = new InputList<string>());
            set => _relationTypes = value;
        }

        [Input("schemaNames")]
        private InputList<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public InputList<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new InputList<string>());
            set => _schemaNames = value;
        }

        public GetMaskingPolicyReferentialRelationsInvokeArgs()
        {
        }
        public static new GetMaskingPolicyReferentialRelationsInvokeArgs Empty => new GetMaskingPolicyReferentialRelationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingPolicyReferentialRelationsResult
    {
        public readonly ImmutableArray<string> ColumnNames;
        public readonly ImmutableArray<Outputs.GetMaskingPolicyReferentialRelationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the masking policy that contains the column.
        /// </summary>
        public readonly string MaskingPolicyId;
        /// <summary>
        /// The list of masking_policy_referential_relation_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionResult> MaskingPolicyReferentialRelationCollections;
        /// <summary>
        /// The name of the object (table or editioning view) that contains the database column(s).
        /// </summary>
        public readonly ImmutableArray<string> Objects;
        /// <summary>
        /// The type of referential relationship the column has with its parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        public readonly ImmutableArray<string> RelationTypes;
        /// <summary>
        /// The name of the schema that contains the database column(s).
        /// </summary>
        public readonly ImmutableArray<string> SchemaNames;

        [OutputConstructor]
        private GetMaskingPolicyReferentialRelationsResult(
            ImmutableArray<string> columnNames,

            ImmutableArray<Outputs.GetMaskingPolicyReferentialRelationsFilterResult> filters,

            string id,

            string maskingPolicyId,

            ImmutableArray<Outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionResult> maskingPolicyReferentialRelationCollections,

            ImmutableArray<string> objects,

            ImmutableArray<string> relationTypes,

            ImmutableArray<string> schemaNames)
        {
            ColumnNames = columnNames;
            Filters = filters;
            Id = id;
            MaskingPolicyId = maskingPolicyId;
            MaskingPolicyReferentialRelationCollections = maskingPolicyReferentialRelationCollections;
            Objects = objects;
            RelationTypes = relationTypes;
            SchemaNames = schemaNames;
        }
    }
}
