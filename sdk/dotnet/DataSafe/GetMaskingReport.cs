// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingReport
    {
        /// <summary>
        /// This data source provides details about a specific Masking Report resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking report.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReport = Oci.DataSafe.GetMaskingReport.Invoke(new()
        ///     {
        ///         MaskingReportId = oci_data_safe_masking_report.Test_masking_report.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMaskingReportResult> InvokeAsync(GetMaskingReportArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaskingReportResult>("oci:DataSafe/getMaskingReport:getMaskingReport", args ?? new GetMaskingReportArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Masking Report resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking report.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReport = Oci.DataSafe.GetMaskingReport.Invoke(new()
        ///     {
        ///         MaskingReportId = oci_data_safe_masking_report.Test_masking_report.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMaskingReportResult> Invoke(GetMaskingReportInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingReportResult>("oci:DataSafe/getMaskingReport:getMaskingReport", args ?? new GetMaskingReportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingReportArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking report.
        /// </summary>
        [Input("maskingReportId", required: true)]
        public string MaskingReportId { get; set; } = null!;

        public GetMaskingReportArgs()
        {
        }
        public static new GetMaskingReportArgs Empty => new GetMaskingReportArgs();
    }

    public sealed class GetMaskingReportInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking report.
        /// </summary>
        [Input("maskingReportId", required: true)]
        public Input<string> MaskingReportId { get; set; } = null!;

        public GetMaskingReportInvokeArgs()
        {
        }
        public static new GetMaskingReportInvokeArgs Empty => new GetMaskingReportInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingReportResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the masking report.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the temporary tables created during the masking operation were dropped after masking.
        /// </summary>
        public readonly bool IsDropTempTablesEnabled;
        /// <summary>
        /// Indicates if redo logging was enabled during the masking operation.
        /// </summary>
        public readonly bool IsRedoLoggingEnabled;
        /// <summary>
        /// Indicates if statistics gathering was enabled during the masking operation.
        /// </summary>
        public readonly bool IsRefreshStatsEnabled;
        /// <summary>
        /// The OCID of the masking policy used.
        /// </summary>
        public readonly string MaskingPolicyId;
        public readonly string MaskingReportId;
        /// <summary>
        /// The OCID of the masking work request that resulted in this masking report.
        /// </summary>
        public readonly string MaskingWorkRequestId;
        /// <summary>
        /// Indicates if parallel execution was enabled during the masking operation.
        /// </summary>
        public readonly string ParallelDegree;
        /// <summary>
        /// Indicates how invalid objects were recompiled post the masking operation.
        /// </summary>
        public readonly string Recompile;
        /// <summary>
        /// The current state of the masking report.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The OCID of the target database masked.
        /// </summary>
        public readonly string TargetId;
        /// <summary>
        /// The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        public readonly string TimeMaskingFinished;
        /// <summary>
        /// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        public readonly string TimeMaskingStarted;
        /// <summary>
        /// The total number of masked columns.
        /// </summary>
        public readonly string TotalMaskedColumns;
        /// <summary>
        /// The total number of unique objects (tables and editioning views) that contain the masked columns.
        /// </summary>
        public readonly string TotalMaskedObjects;
        /// <summary>
        /// The total number of unique schemas that contain the masked columns.
        /// </summary>
        public readonly string TotalMaskedSchemas;
        /// <summary>
        /// The total number of unique sensitive types associated with the masked columns.
        /// </summary>
        public readonly string TotalMaskedSensitiveTypes;
        /// <summary>
        /// The total number of masked values.
        /// </summary>
        public readonly string TotalMaskedValues;

        [OutputConstructor]
        private GetMaskingReportResult(
            string compartmentId,

            string id,

            bool isDropTempTablesEnabled,

            bool isRedoLoggingEnabled,

            bool isRefreshStatsEnabled,

            string maskingPolicyId,

            string maskingReportId,

            string maskingWorkRequestId,

            string parallelDegree,

            string recompile,

            string state,

            string targetId,

            string timeCreated,

            string timeMaskingFinished,

            string timeMaskingStarted,

            string totalMaskedColumns,

            string totalMaskedObjects,

            string totalMaskedSchemas,

            string totalMaskedSensitiveTypes,

            string totalMaskedValues)
        {
            CompartmentId = compartmentId;
            Id = id;
            IsDropTempTablesEnabled = isDropTempTablesEnabled;
            IsRedoLoggingEnabled = isRedoLoggingEnabled;
            IsRefreshStatsEnabled = isRefreshStatsEnabled;
            MaskingPolicyId = maskingPolicyId;
            MaskingReportId = maskingReportId;
            MaskingWorkRequestId = maskingWorkRequestId;
            ParallelDegree = parallelDegree;
            Recompile = recompile;
            State = state;
            TargetId = targetId;
            TimeCreated = timeCreated;
            TimeMaskingFinished = timeMaskingFinished;
            TimeMaskingStarted = timeMaskingStarted;
            TotalMaskedColumns = totalMaskedColumns;
            TotalMaskedObjects = totalMaskedObjects;
            TotalMaskedSchemas = totalMaskedSchemas;
            TotalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            TotalMaskedValues = totalMaskedValues;
        }
    }
}
