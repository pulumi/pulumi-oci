// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingReport
    {
        /// <summary>
        /// This data source provides details about a specific Masking Report resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking report.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReport = Oci.DataSafe.GetMaskingReport.Invoke(new()
        ///     {
        ///         MaskingReportId = oci_data_safe_masking_report.Test_masking_report.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMaskingReportResult> InvokeAsync(GetMaskingReportArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMaskingReportResult>("oci:DataSafe/getMaskingReport:getMaskingReport", args ?? new GetMaskingReportArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Masking Report resource in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets the details of the specified masking report.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReport = Oci.DataSafe.GetMaskingReport.Invoke(new()
        ///     {
        ///         MaskingReportId = oci_data_safe_masking_report.Test_masking_report.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMaskingReportResult> Invoke(GetMaskingReportInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMaskingReportResult>("oci:DataSafe/getMaskingReport:getMaskingReport", args ?? new GetMaskingReportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingReportArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking report.
        /// </summary>
        [Input("maskingReportId", required: true)]
        public string MaskingReportId { get; set; } = null!;

        public GetMaskingReportArgs()
        {
        }
        public static new GetMaskingReportArgs Empty => new GetMaskingReportArgs();
    }

    public sealed class GetMaskingReportInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the masking report.
        /// </summary>
        [Input("maskingReportId", required: true)]
        public Input<string> MaskingReportId { get; set; } = null!;

        public GetMaskingReportInvokeArgs()
        {
        }
        public static new GetMaskingReportInvokeArgs Empty => new GetMaskingReportInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingReportResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the masking report.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the masking policy used.
        /// </summary>
        public readonly string MaskingPolicyId;
        public readonly string MaskingReportId;
        /// <summary>
        /// The OCID of the masking work request that resulted in this masking report.
        /// </summary>
        public readonly string MaskingWorkRequestId;
        /// <summary>
        /// The OCID of the target database masked.
        /// </summary>
        public readonly string TargetId;
        /// <summary>
        /// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        public readonly string TimeMaskingFinished;
        /// <summary>
        /// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        public readonly string TimeMaskingStarted;
        /// <summary>
        /// The total number of masked columns.
        /// </summary>
        public readonly string TotalMaskedColumns;
        /// <summary>
        /// The total number of unique objects (tables and editioning views) that contain the masked columns.
        /// </summary>
        public readonly string TotalMaskedObjects;
        /// <summary>
        /// The total number of unique schemas that contain the masked columns.
        /// </summary>
        public readonly string TotalMaskedSchemas;
        /// <summary>
        /// The total number of unique sensitive types associated with the masked columns.
        /// </summary>
        public readonly string TotalMaskedSensitiveTypes;
        /// <summary>
        /// The total number of masked values.
        /// </summary>
        public readonly string TotalMaskedValues;

        [OutputConstructor]
        private GetMaskingReportResult(
            string compartmentId,

            string id,

            string maskingPolicyId,

            string maskingReportId,

            string maskingWorkRequestId,

            string targetId,

            string timeMaskingFinished,

            string timeMaskingStarted,

            string totalMaskedColumns,

            string totalMaskedObjects,

            string totalMaskedSchemas,

            string totalMaskedSensitiveTypes,

            string totalMaskedValues)
        {
            CompartmentId = compartmentId;
            Id = id;
            MaskingPolicyId = maskingPolicyId;
            MaskingReportId = maskingReportId;
            MaskingWorkRequestId = maskingWorkRequestId;
            TargetId = targetId;
            TimeMaskingFinished = timeMaskingFinished;
            TimeMaskingStarted = timeMaskingStarted;
            TotalMaskedColumns = totalMaskedColumns;
            TotalMaskedObjects = totalMaskedObjects;
            TotalMaskedSchemas = totalMaskedSchemas;
            TotalMaskedSensitiveTypes = totalMaskedSensitiveTypes;
            TotalMaskedValues = totalMaskedValues;
        }
    }
}
