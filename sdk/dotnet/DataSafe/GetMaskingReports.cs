// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetMaskingReports
    {
        /// <summary>
        /// This data source provides the list of Masking Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of masking reports based on the specified query parameters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReports = Oci.DataSafe.GetMaskingReports.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Masking_report_access_level,
        ///         CompartmentIdInSubtree = @var.Masking_report_compartment_id_in_subtree,
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMaskingReportsResult> InvokeAsync(GetMaskingReportsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaskingReportsResult>("oci:DataSafe/getMaskingReports:getMaskingReports", args ?? new GetMaskingReportsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Masking Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of masking reports based on the specified query parameters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaskingReports = Oci.DataSafe.GetMaskingReports.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Masking_report_access_level,
        ///         CompartmentIdInSubtree = @var.Masking_report_compartment_id_in_subtree,
        ///         MaskingPolicyId = oci_data_safe_masking_policy.Test_masking_policy.Id,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaskingReportsResult> Invoke(GetMaskingReportsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaskingReportsResult>("oci:DataSafe/getMaskingReports:getMaskingReports", args ?? new GetMaskingReportsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaskingReportsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetMaskingReportsFilterArgs>? _filters;
        public List<Inputs.GetMaskingReportsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMaskingReportsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public string? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetMaskingReportsArgs()
        {
        }
        public static new GetMaskingReportsArgs Empty => new GetMaskingReportsArgs();
    }

    public sealed class GetMaskingReportsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMaskingReportsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMaskingReportsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMaskingReportsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified masking policy OCID.
        /// </summary>
        [Input("maskingPolicyId")]
        public Input<string>? MaskingPolicyId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetMaskingReportsInvokeArgs()
        {
        }
        public static new GetMaskingReportsInvokeArgs Empty => new GetMaskingReportsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaskingReportsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment that contains the masking report.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetMaskingReportsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the masking policy used.
        /// </summary>
        public readonly string? MaskingPolicyId;
        /// <summary>
        /// The list of masking_report_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaskingReportsMaskingReportCollectionResult> MaskingReportCollections;
        /// <summary>
        /// The OCID of the target database masked.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetMaskingReportsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetMaskingReportsFilterResult> filters,

            string id,

            string? maskingPolicyId,

            ImmutableArray<Outputs.GetMaskingReportsMaskingReportCollectionResult> maskingReportCollections,

            string? targetId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            MaskingPolicyId = maskingPolicyId;
            MaskingReportCollections = maskingReportCollections;
            TargetId = targetId;
        }
    }
}
