// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetReports
    {
        /// <summary>
        /// This data source provides the list of Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the reports in the compartment. It contains information such as report generation time.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testReports = Oci.DataSafe.GetReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = reportAccessLevel,
        ///         CompartmentIdInSubtree = reportCompartmentIdInSubtree,
        ///         DisplayName = reportDisplayName,
        ///         MimeType = reportMimeType,
        ///         ReportDefinitionId = testReportDefinition.Id,
        ///         State = reportState,
        ///         TimeGeneratedGreaterThanOrEqualTo = reportTimeGeneratedGreaterThanOrEqualTo,
        ///         TimeGeneratedLessThan = reportTimeGeneratedLessThan,
        ///         Type = reportType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetReportsResult> InvokeAsync(GetReportsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReportsResult>("oci:DataSafe/getReports:getReports", args ?? new GetReportsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the reports in the compartment. It contains information such as report generation time.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testReports = Oci.DataSafe.GetReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = reportAccessLevel,
        ///         CompartmentIdInSubtree = reportCompartmentIdInSubtree,
        ///         DisplayName = reportDisplayName,
        ///         MimeType = reportMimeType,
        ///         ReportDefinitionId = testReportDefinition.Id,
        ///         State = reportState,
        ///         TimeGeneratedGreaterThanOrEqualTo = reportTimeGeneratedGreaterThanOrEqualTo,
        ///         TimeGeneratedLessThan = reportTimeGeneratedLessThan,
        ///         Type = reportType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetReportsResult> Invoke(GetReportsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReportsResult>("oci:DataSafe/getReports:getReports", args ?? new GetReportsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the reports in the compartment. It contains information such as report generation time.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testReports = Oci.DataSafe.GetReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = reportAccessLevel,
        ///         CompartmentIdInSubtree = reportCompartmentIdInSubtree,
        ///         DisplayName = reportDisplayName,
        ///         MimeType = reportMimeType,
        ///         ReportDefinitionId = testReportDefinition.Id,
        ///         State = reportState,
        ///         TimeGeneratedGreaterThanOrEqualTo = reportTimeGeneratedGreaterThanOrEqualTo,
        ///         TimeGeneratedLessThan = reportTimeGeneratedLessThan,
        ///         Type = reportType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetReportsResult> Invoke(GetReportsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetReportsResult>("oci:DataSafe/getReports:getReports", args ?? new GetReportsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReportsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// The name of the report definition to query.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetReportsFilterArgs>? _filters;
        public List<Inputs.GetReportsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetReportsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified mime type.
        /// </summary>
        [Input("mimeType")]
        public string? MimeType { get; set; }

        /// <summary>
        /// The ID of the report definition to filter the list of reports
        /// </summary>
        [Input("reportDefinitionId")]
        public string? ReportDefinitionId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were generated after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeGeneratedGreaterThanOrEqualToQueryParam parameter retrieves all resources generated after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeGeneratedGreaterThanOrEqualTo")]
        public string? TimeGeneratedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were generated before a specific date. Specifying this parameter corresponding `timeGeneratedLessThan` parameter will retrieve all resources generated before the specified generated date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeGeneratedLessThan")]
        public string? TimeGeneratedLessThan { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified type.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetReportsArgs()
        {
        }
        public static new GetReportsArgs Empty => new GetReportsArgs();
    }

    public sealed class GetReportsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// The name of the report definition to query.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetReportsFilterInputArgs>? _filters;
        public InputList<Inputs.GetReportsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetReportsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified mime type.
        /// </summary>
        [Input("mimeType")]
        public Input<string>? MimeType { get; set; }

        /// <summary>
        /// The ID of the report definition to filter the list of reports
        /// </summary>
        [Input("reportDefinitionId")]
        public Input<string>? ReportDefinitionId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were generated after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeGeneratedGreaterThanOrEqualToQueryParam parameter retrieves all resources generated after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeGeneratedGreaterThanOrEqualTo")]
        public Input<string>? TimeGeneratedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were generated before a specific date. Specifying this parameter corresponding `timeGeneratedLessThan` parameter will retrieve all resources generated before the specified generated date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeGeneratedLessThan")]
        public Input<string>? TimeGeneratedLessThan { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetReportsInvokeArgs()
        {
        }
        public static new GetReportsInvokeArgs Empty => new GetReportsInvokeArgs();
    }


    [OutputType]
    public sealed class GetReportsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the report.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// Name of the report.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetReportsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the format of report to be .xls or .pdf or .json
        /// </summary>
        public readonly string? MimeType;
        /// <summary>
        /// The list of report_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReportsReportCollectionResult> ReportCollections;
        /// <summary>
        /// The OCID of the report definition.
        /// </summary>
        public readonly string? ReportDefinitionId;
        /// <summary>
        /// The current state of the audit report.
        /// </summary>
        public readonly string? State;
        public readonly string? TimeGeneratedGreaterThanOrEqualTo;
        public readonly string? TimeGeneratedLessThan;
        /// <summary>
        /// The type of the audit report.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetReportsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetReportsFilterResult> filters,

            string id,

            string? mimeType,

            ImmutableArray<Outputs.GetReportsReportCollectionResult> reportCollections,

            string? reportDefinitionId,

            string? state,

            string? timeGeneratedGreaterThanOrEqualTo,

            string? timeGeneratedLessThan,

            string? type)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MimeType = mimeType;
            ReportCollections = reportCollections;
            ReportDefinitionId = reportDefinitionId;
            State = state;
            TimeGeneratedGreaterThanOrEqualTo = timeGeneratedGreaterThanOrEqualTo;
            TimeGeneratedLessThan = timeGeneratedLessThan;
            Type = type;
        }
    }
}
