// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentChecks
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Checks in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the security checks in the specified compartment for security assessment of type TEMPLATE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentChecks = Oci.DataSafe.GetSecurityAssessmentChecks.Invoke(new()
        ///     {
        ///         SecurityAssessmentId = testSecurityAssessment.Id,
        ///         AccessLevel = securityAssessmentCheckAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentCheckCompartmentIdInSubtree,
        ///         ContainsReferences = securityAssessmentCheckContainsReferences,
        ///         ContainsSeverities = securityAssessmentCheckContainsSeverity,
        ///         Key = securityAssessmentCheckKey,
        ///         SuggestedSeverity = securityAssessmentCheckSuggestedSeverity,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAssessmentChecksResult> InvokeAsync(GetSecurityAssessmentChecksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentChecksResult>("oci:DataSafe/getSecurityAssessmentChecks:getSecurityAssessmentChecks", args ?? new GetSecurityAssessmentChecksArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Checks in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the security checks in the specified compartment for security assessment of type TEMPLATE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentChecks = Oci.DataSafe.GetSecurityAssessmentChecks.Invoke(new()
        ///     {
        ///         SecurityAssessmentId = testSecurityAssessment.Id,
        ///         AccessLevel = securityAssessmentCheckAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentCheckCompartmentIdInSubtree,
        ///         ContainsReferences = securityAssessmentCheckContainsReferences,
        ///         ContainsSeverities = securityAssessmentCheckContainsSeverity,
        ///         Key = securityAssessmentCheckKey,
        ///         SuggestedSeverity = securityAssessmentCheckSuggestedSeverity,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentChecksResult> Invoke(GetSecurityAssessmentChecksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentChecksResult>("oci:DataSafe/getSecurityAssessmentChecks:getSecurityAssessmentChecks", args ?? new GetSecurityAssessmentChecksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Checks in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the security checks in the specified compartment for security assessment of type TEMPLATE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentChecks = Oci.DataSafe.GetSecurityAssessmentChecks.Invoke(new()
        ///     {
        ///         SecurityAssessmentId = testSecurityAssessment.Id,
        ///         AccessLevel = securityAssessmentCheckAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentCheckCompartmentIdInSubtree,
        ///         ContainsReferences = securityAssessmentCheckContainsReferences,
        ///         ContainsSeverities = securityAssessmentCheckContainsSeverity,
        ///         Key = securityAssessmentCheckKey,
        ///         SuggestedSeverity = securityAssessmentCheckSuggestedSeverity,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentChecksResult> Invoke(GetSecurityAssessmentChecksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentChecksResult>("oci:DataSafe/getSecurityAssessmentChecks:getSecurityAssessmentChecks", args ?? new GetSecurityAssessmentChecksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentChecksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("containsReferences")]
        private List<string>? _containsReferences;

        /// <summary>
        /// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
        /// </summary>
        public List<string> ContainsReferences
        {
            get => _containsReferences ?? (_containsReferences = new List<string>());
            set => _containsReferences = value;
        }

        [Input("containsSeverities")]
        private List<string>? _containsSeverities;

        /// <summary>
        /// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
        /// </summary>
        public List<string> ContainsSeverities
        {
            get => _containsSeverities ?? (_containsSeverities = new List<string>());
            set => _containsSeverities = value;
        }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentChecksFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentChecksFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentChecksFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Each check in security assessment has an associated key (think of key as a check's name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
        /// </summary>
        [Input("key")]
        public string? Key { get; set; }

        /// <summary>
        /// The OCID of the security assessment.
        /// </summary>
        [Input("securityAssessmentId", required: true)]
        public string SecurityAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only checks of a particular risk level.
        /// </summary>
        [Input("suggestedSeverity")]
        public string? SuggestedSeverity { get; set; }

        public GetSecurityAssessmentChecksArgs()
        {
        }
        public static new GetSecurityAssessmentChecksArgs Empty => new GetSecurityAssessmentChecksArgs();
    }

    public sealed class GetSecurityAssessmentChecksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("containsReferences")]
        private InputList<string>? _containsReferences;

        /// <summary>
        /// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
        /// </summary>
        public InputList<string> ContainsReferences
        {
            get => _containsReferences ?? (_containsReferences = new InputList<string>());
            set => _containsReferences = value;
        }

        [Input("containsSeverities")]
        private InputList<string>? _containsSeverities;

        /// <summary>
        /// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
        /// </summary>
        public InputList<string> ContainsSeverities
        {
            get => _containsSeverities ?? (_containsSeverities = new InputList<string>());
            set => _containsSeverities = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentChecksFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentChecksFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentChecksFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Each check in security assessment has an associated key (think of key as a check's name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The OCID of the security assessment.
        /// </summary>
        [Input("securityAssessmentId", required: true)]
        public Input<string> SecurityAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only checks of a particular risk level.
        /// </summary>
        [Input("suggestedSeverity")]
        public Input<string>? SuggestedSeverity { get; set; }

        public GetSecurityAssessmentChecksInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentChecksInvokeArgs Empty => new GetSecurityAssessmentChecksInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentChecksResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The list of checks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentChecksCheckResult> Checks;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<string> ContainsReferences;
        public readonly ImmutableArray<string> ContainsSeverities;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentChecksFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique identifier for the check.
        /// </summary>
        public readonly string? Key;
        public readonly string SecurityAssessmentId;
        /// <summary>
        /// The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
        /// </summary>
        public readonly string? SuggestedSeverity;

        [OutputConstructor]
        private GetSecurityAssessmentChecksResult(
            string? accessLevel,

            ImmutableArray<Outputs.GetSecurityAssessmentChecksCheckResult> checks,

            bool? compartmentIdInSubtree,

            ImmutableArray<string> containsReferences,

            ImmutableArray<string> containsSeverities,

            ImmutableArray<Outputs.GetSecurityAssessmentChecksFilterResult> filters,

            string id,

            string? key,

            string securityAssessmentId,

            string? suggestedSeverity)
        {
            AccessLevel = accessLevel;
            Checks = checks;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            ContainsReferences = containsReferences;
            ContainsSeverities = containsSeverities;
            Filters = filters;
            Id = id;
            Key = key;
            SecurityAssessmentId = securityAssessmentId;
            SuggestedSeverity = suggestedSeverity;
        }
    }
}
