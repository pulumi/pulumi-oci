// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentFindingAnalytics
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Finding Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of findings aggregated details in the specified compartment. This provides information about the overall state
        /// of security assessment findings. You can use groupBy to get the count of findings under a certain risk level and with a certain findingKey, 
        /// and as well as get the list of the targets that match the condition.
        /// This data is especially useful content for the statistic chart or to support analytics.
        /// 
        /// When you perform the ListFindingAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentFindingAnalytics = Oci.DataSafe.GetSecurityAssessmentFindingAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_assessment_finding_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Security_assessment_finding_analytic_compartment_id_in_subtree,
        ///         FindingKey = @var.Security_assessment_finding_analytic_finding_key,
        ///         GroupBy = @var.Security_assessment_finding_analytic_group_by,
        ///         IsTopFinding = @var.Security_assessment_finding_analytic_is_top_finding,
        ///         Severity = @var.Security_assessment_finding_analytic_severity,
        ///         TopFindingStatus = @var.Security_assessment_finding_analytic_top_finding_status,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecurityAssessmentFindingAnalyticsResult> InvokeAsync(GetSecurityAssessmentFindingAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentFindingAnalyticsResult>("oci:DataSafe/getSecurityAssessmentFindingAnalytics:getSecurityAssessmentFindingAnalytics", args ?? new GetSecurityAssessmentFindingAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Finding Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of findings aggregated details in the specified compartment. This provides information about the overall state
        /// of security assessment findings. You can use groupBy to get the count of findings under a certain risk level and with a certain findingKey, 
        /// and as well as get the list of the targets that match the condition.
        /// This data is especially useful content for the statistic chart or to support analytics.
        /// 
        /// When you perform the ListFindingAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentFindingAnalytics = Oci.DataSafe.GetSecurityAssessmentFindingAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_assessment_finding_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Security_assessment_finding_analytic_compartment_id_in_subtree,
        ///         FindingKey = @var.Security_assessment_finding_analytic_finding_key,
        ///         GroupBy = @var.Security_assessment_finding_analytic_group_by,
        ///         IsTopFinding = @var.Security_assessment_finding_analytic_is_top_finding,
        ///         Severity = @var.Security_assessment_finding_analytic_severity,
        ///         TopFindingStatus = @var.Security_assessment_finding_analytic_top_finding_status,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecurityAssessmentFindingAnalyticsResult> Invoke(GetSecurityAssessmentFindingAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentFindingAnalyticsResult>("oci:DataSafe/getSecurityAssessmentFindingAnalytics:getSecurityAssessmentFindingAnalytics", args ?? new GetSecurityAssessmentFindingAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentFindingAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentFindingAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentFindingAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentFindingAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique key that identifies the finding. It is a string and unique within a security assessment.
        /// </summary>
        [Input("findingKey")]
        public string? FindingKey { get; set; }

        /// <summary>
        /// Attribute by which the finding analytics data should be grouped.
        /// </summary>
        [Input("groupBy")]
        public string? GroupBy { get; set; }

        /// <summary>
        /// A filter to return only the findings that are marked as top findings.
        /// </summary>
        [Input("isTopFinding")]
        public bool? IsTopFinding { get; set; }

        /// <summary>
        /// A filter to return only findings of a particular risk level.
        /// </summary>
        [Input("severity")]
        public string? Severity { get; set; }

        /// <summary>
        /// An optional filter to return only the top finding that match the specified status.
        /// </summary>
        [Input("topFindingStatus")]
        public string? TopFindingStatus { get; set; }

        public GetSecurityAssessmentFindingAnalyticsArgs()
        {
        }
        public static new GetSecurityAssessmentFindingAnalyticsArgs Empty => new GetSecurityAssessmentFindingAnalyticsArgs();
    }

    public sealed class GetSecurityAssessmentFindingAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentFindingAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentFindingAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentFindingAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique key that identifies the finding. It is a string and unique within a security assessment.
        /// </summary>
        [Input("findingKey")]
        public Input<string>? FindingKey { get; set; }

        /// <summary>
        /// Attribute by which the finding analytics data should be grouped.
        /// </summary>
        [Input("groupBy")]
        public Input<string>? GroupBy { get; set; }

        /// <summary>
        /// A filter to return only the findings that are marked as top findings.
        /// </summary>
        [Input("isTopFinding")]
        public Input<bool>? IsTopFinding { get; set; }

        /// <summary>
        /// A filter to return only findings of a particular risk level.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// An optional filter to return only the top finding that match the specified status.
        /// </summary>
        [Input("topFindingStatus")]
        public Input<string>? TopFindingStatus { get; set; }

        public GetSecurityAssessmentFindingAnalyticsInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentFindingAnalyticsInvokeArgs Empty => new GetSecurityAssessmentFindingAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentFindingAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentFindingAnalyticsFilterResult> Filters;
        /// <summary>
        /// The list of finding_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionResult> FindingAnalyticsCollections;
        public readonly string? FindingKey;
        public readonly string? GroupBy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsTopFinding;
        /// <summary>
        /// The severity (risk level) of the finding.
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// The status of the top finding.  All findings will have "severity" to indicate the risk level, but only top findings will have "status".  Possible status: Pass / Risk (Low, Medium, High)/ Evaluate / Advisory / Deferred Instead of having "Low, Medium, High" in severity, "Risk" will include these three situations in status.
        /// </summary>
        public readonly string? TopFindingStatus;

        [OutputConstructor]
        private GetSecurityAssessmentFindingAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAssessmentFindingAnalyticsFilterResult> filters,

            ImmutableArray<Outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionResult> findingAnalyticsCollections,

            string? findingKey,

            string? groupBy,

            string id,

            bool? isTopFinding,

            string? severity,

            string? topFindingStatus)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            FindingAnalyticsCollections = findingAnalyticsCollections;
            FindingKey = findingKey;
            GroupBy = groupBy;
            Id = id;
            IsTopFinding = isTopFinding;
            Severity = severity;
            TopFindingStatus = topFindingStatus;
        }
    }
}
