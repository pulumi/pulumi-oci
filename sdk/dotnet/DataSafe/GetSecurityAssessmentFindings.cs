// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentFindings
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the findings for the specified assessment except for type TEMPLATE. If the assessment is of type TEMPLATE_BASELINE, the findings returned are the security checks with the user-defined severity from the template.
        /// </summary>
        public static Task<GetSecurityAssessmentFindingsResult> InvokeAsync(GetSecurityAssessmentFindingsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentFindingsResult>("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", args ?? new GetSecurityAssessmentFindingsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the findings for the specified assessment except for type TEMPLATE. If the assessment is of type TEMPLATE_BASELINE, the findings returned are the security checks with the user-defined severity from the template.
        /// </summary>
        public static Output<GetSecurityAssessmentFindingsResult> Invoke(GetSecurityAssessmentFindingsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentFindingsResult>("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", args ?? new GetSecurityAssessmentFindingsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists all the findings for the specified assessment except for type TEMPLATE. If the assessment is of type TEMPLATE_BASELINE, the findings returned are the security checks with the user-defined severity from the template.
        /// </summary>
        public static Output<GetSecurityAssessmentFindingsResult> Invoke(GetSecurityAssessmentFindingsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentFindingsResult>("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", args ?? new GetSecurityAssessmentFindingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentFindingsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// The category of the finding.
        /// </summary>
        [Input("category")]
        public string? Category { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("containsReferences")]
        private List<string>? _containsReferences;

        /// <summary>
        /// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
        /// </summary>
        public List<string> ContainsReferences
        {
            get => _containsReferences ?? (_containsReferences = new List<string>());
            set => _containsReferences = value;
        }

        [Input("containsSeverities")]
        private List<string>? _containsSeverities;

        /// <summary>
        /// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
        /// </summary>
        public List<string> ContainsSeverities
        {
            get => _containsSeverities ?? (_containsSeverities = new List<string>());
            set => _containsSeverities = value;
        }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies a subset of fields to be returned in the response.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentFindingsFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentFindingsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentFindingsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
        /// </summary>
        [Input("findingKey")]
        public string? FindingKey { get; set; }

        /// <summary>
        /// A filter to return only the findings that are marked as top findings.
        /// </summary>
        [Input("isTopFinding")]
        public bool? IsTopFinding { get; set; }

        /// <summary>
        /// An optional filter to return only findings that match the specified reference.
        /// </summary>
        [Input("references")]
        public string? References { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "Target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
        /// 
        /// Supported fields: severity findingKey reference targetId isTopFinding title category remarks details summary isRiskModified
        /// </summary>
        [Input("scimQuery")]
        public string? ScimQuery { get; set; }

        /// <summary>
        /// The OCID of the security assessment.
        /// </summary>
        [Input("securityAssessmentId", required: true)]
        public string SecurityAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only findings of a particular risk level.
        /// </summary>
        [Input("severity")]
        public string? Severity { get; set; }

        /// <summary>
        /// A filter to return only the findings that match the specified lifecycle states.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        [Input("targetIds")]
        private List<string>? _targetIds;

        /// <summary>
        /// An optional filter to return only findings that match the specified target ids. Use this parameter to filter by multiple target ids.
        /// </summary>
        public List<string> TargetIds
        {
            get => _targetIds ?? (_targetIds = new List<string>());
            set => _targetIds = value;
        }

        public GetSecurityAssessmentFindingsArgs()
        {
        }
        public static new GetSecurityAssessmentFindingsArgs Empty => new GetSecurityAssessmentFindingsArgs();
    }

    public sealed class GetSecurityAssessmentFindingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// The category of the finding.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("containsReferences")]
        private InputList<string>? _containsReferences;

        /// <summary>
        /// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
        /// </summary>
        public InputList<string> ContainsReferences
        {
            get => _containsReferences ?? (_containsReferences = new InputList<string>());
            set => _containsReferences = value;
        }

        [Input("containsSeverities")]
        private InputList<string>? _containsSeverities;

        /// <summary>
        /// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
        /// </summary>
        public InputList<string> ContainsSeverities
        {
            get => _containsSeverities ?? (_containsSeverities = new InputList<string>());
            set => _containsSeverities = value;
        }

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Specifies a subset of fields to be returned in the response.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentFindingsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentFindingsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentFindingsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
        /// </summary>
        [Input("findingKey")]
        public Input<string>? FindingKey { get; set; }

        /// <summary>
        /// A filter to return only the findings that are marked as top findings.
        /// </summary>
        [Input("isTopFinding")]
        public Input<bool>? IsTopFinding { get; set; }

        /// <summary>
        /// An optional filter to return only findings that match the specified reference.
        /// </summary>
        [Input("references")]
        public Input<string>? References { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "Target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
        /// 
        /// Supported fields: severity findingKey reference targetId isTopFinding title category remarks details summary isRiskModified
        /// </summary>
        [Input("scimQuery")]
        public Input<string>? ScimQuery { get; set; }

        /// <summary>
        /// The OCID of the security assessment.
        /// </summary>
        [Input("securityAssessmentId", required: true)]
        public Input<string> SecurityAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only findings of a particular risk level.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// A filter to return only the findings that match the specified lifecycle states.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        [Input("targetIds")]
        private InputList<string>? _targetIds;

        /// <summary>
        /// An optional filter to return only findings that match the specified target ids. Use this parameter to filter by multiple target ids.
        /// </summary>
        public InputList<string> TargetIds
        {
            get => _targetIds ?? (_targetIds = new InputList<string>());
            set => _targetIds = value;
        }

        public GetSecurityAssessmentFindingsInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentFindingsInvokeArgs Empty => new GetSecurityAssessmentFindingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentFindingsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The category to which the finding belongs to.
        /// </summary>
        public readonly string? Category;
        public readonly string? CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<string> ContainsReferences;
        public readonly ImmutableArray<string> ContainsSeverities;
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentFindingsFilterResult> Filters;
        public readonly string? FindingKey;
        /// <summary>
        /// The list of findings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentFindingsFindingResult> Findings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether a given finding is marked as topFinding or not.
        /// </summary>
        public readonly bool? IsTopFinding;
        /// <summary>
        /// Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
        /// </summary>
        public readonly string? References;
        public readonly string? ScimQuery;
        public readonly string SecurityAssessmentId;
        /// <summary>
        /// The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// The current state of the finding.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target database.
        /// </summary>
        public readonly string? TargetId;
        public readonly ImmutableArray<string> TargetIds;

        [OutputConstructor]
        private GetSecurityAssessmentFindingsResult(
            string? accessLevel,

            string? category,

            string? compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<string> containsReferences,

            ImmutableArray<string> containsSeverities,

            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetSecurityAssessmentFindingsFilterResult> filters,

            string? findingKey,

            ImmutableArray<Outputs.GetSecurityAssessmentFindingsFindingResult> findings,

            string id,

            bool? isTopFinding,

            string? references,

            string? scimQuery,

            string securityAssessmentId,

            string? severity,

            string? state,

            string? targetId,

            ImmutableArray<string> targetIds)
        {
            AccessLevel = accessLevel;
            Category = category;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            ContainsReferences = containsReferences;
            ContainsSeverities = containsSeverities;
            Fields = fields;
            Filters = filters;
            FindingKey = findingKey;
            Findings = findings;
            Id = id;
            IsTopFinding = isTopFinding;
            References = references;
            ScimQuery = scimQuery;
            SecurityAssessmentId = securityAssessmentId;
            Severity = severity;
            State = state;
            TargetId = targetId;
            TargetIds = targetIds;
        }
    }
}
