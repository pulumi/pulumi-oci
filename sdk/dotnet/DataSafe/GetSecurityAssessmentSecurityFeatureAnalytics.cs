// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentSecurityFeatureAnalytics
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Security Feature Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
        /// overall security controls, by returning the counting number of the target databases using the security features.
        /// 
        /// When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentSecurityFeatureAnalytics = Oci.DataSafe.GetSecurityAssessmentSecurityFeatureAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_assessment_security_feature_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Security_assessment_security_feature_analytic_compartment_id_in_subtree,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetSecurityAssessmentSecurityFeatureAnalyticsResult> InvokeAsync(GetSecurityAssessmentSecurityFeatureAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentSecurityFeatureAnalyticsResult>("oci:DataSafe/getSecurityAssessmentSecurityFeatureAnalytics:getSecurityAssessmentSecurityFeatureAnalytics", args ?? new GetSecurityAssessmentSecurityFeatureAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Security Feature Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
        /// overall security controls, by returning the counting number of the target databases using the security features.
        /// 
        /// When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentSecurityFeatureAnalytics = Oci.DataSafe.GetSecurityAssessmentSecurityFeatureAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_assessment_security_feature_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Security_assessment_security_feature_analytic_compartment_id_in_subtree,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetSecurityAssessmentSecurityFeatureAnalyticsResult> Invoke(GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentSecurityFeatureAnalyticsResult>("oci:DataSafe/getSecurityAssessmentSecurityFeatureAnalytics:getSecurityAssessmentSecurityFeatureAnalytics", args ?? new GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentSecurityFeatureAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetSecurityAssessmentSecurityFeatureAnalyticsArgs()
        {
        }
        public static new GetSecurityAssessmentSecurityFeatureAnalyticsArgs Empty => new GetSecurityAssessmentSecurityFeatureAnalyticsArgs();
    }

    public sealed class GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs Empty => new GetSecurityAssessmentSecurityFeatureAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentSecurityFeatureAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of security_feature_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionResult> SecurityFeatureAnalyticsCollections;
        public readonly string? TargetId;

        [OutputConstructor]
        private GetSecurityAssessmentSecurityFeatureAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeatureAnalyticsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionResult> securityFeatureAnalyticsCollections,

            string? targetId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            SecurityFeatureAnalyticsCollections = securityFeatureAnalyticsCollections;
            TargetId = targetId;
        }
    }
}
