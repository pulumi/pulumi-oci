// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentSecurityFeatures
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Security Features in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists the usage of Database security features for a given compartment or a target level, based on the filters provided.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentSecurityFeatures = Oci.DataSafe.GetSecurityAssessmentSecurityFeatures.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentSecurityFeatureAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentSecurityFeatureCompartmentIdInSubtree,
        ///         TargetId = testTarget.Id,
        ///         TargetsWithColumnEncryption = securityAssessmentSecurityFeatureTargetsWithColumnEncryption,
        ///         TargetsWithDatabaseVault = securityAssessmentSecurityFeatureTargetsWithDatabaseVault,
        ///         TargetsWithExternalAuthentication = securityAssessmentSecurityFeatureTargetsWithExternalAuthentication,
        ///         TargetsWithFineGrainedAudit = securityAssessmentSecurityFeatureTargetsWithFineGrainedAudit,
        ///         TargetsWithGlobalAuthentication = securityAssessmentSecurityFeatureTargetsWithGlobalAuthentication,
        ///         TargetsWithNetworkEncryption = securityAssessmentSecurityFeatureTargetsWithNetworkEncryption,
        ///         TargetsWithPasswordAuthentication = securityAssessmentSecurityFeatureTargetsWithPasswordAuthentication,
        ///         TargetsWithPrivilegeAnalysis = securityAssessmentSecurityFeatureTargetsWithPrivilegeAnalysis,
        ///         TargetsWithTablespaceEncryption = securityAssessmentSecurityFeatureTargetsWithTablespaceEncryption,
        ///         TargetsWithTraditionalAudit = securityAssessmentSecurityFeatureTargetsWithTraditionalAudit,
        ///         TargetsWithUnifiedAudit = securityAssessmentSecurityFeatureTargetsWithUnifiedAudit,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAssessmentSecurityFeaturesResult> InvokeAsync(GetSecurityAssessmentSecurityFeaturesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentSecurityFeaturesResult>("oci:DataSafe/getSecurityAssessmentSecurityFeatures:getSecurityAssessmentSecurityFeatures", args ?? new GetSecurityAssessmentSecurityFeaturesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Security Features in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists the usage of Database security features for a given compartment or a target level, based on the filters provided.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentSecurityFeatures = Oci.DataSafe.GetSecurityAssessmentSecurityFeatures.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentSecurityFeatureAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentSecurityFeatureCompartmentIdInSubtree,
        ///         TargetId = testTarget.Id,
        ///         TargetsWithColumnEncryption = securityAssessmentSecurityFeatureTargetsWithColumnEncryption,
        ///         TargetsWithDatabaseVault = securityAssessmentSecurityFeatureTargetsWithDatabaseVault,
        ///         TargetsWithExternalAuthentication = securityAssessmentSecurityFeatureTargetsWithExternalAuthentication,
        ///         TargetsWithFineGrainedAudit = securityAssessmentSecurityFeatureTargetsWithFineGrainedAudit,
        ///         TargetsWithGlobalAuthentication = securityAssessmentSecurityFeatureTargetsWithGlobalAuthentication,
        ///         TargetsWithNetworkEncryption = securityAssessmentSecurityFeatureTargetsWithNetworkEncryption,
        ///         TargetsWithPasswordAuthentication = securityAssessmentSecurityFeatureTargetsWithPasswordAuthentication,
        ///         TargetsWithPrivilegeAnalysis = securityAssessmentSecurityFeatureTargetsWithPrivilegeAnalysis,
        ///         TargetsWithTablespaceEncryption = securityAssessmentSecurityFeatureTargetsWithTablespaceEncryption,
        ///         TargetsWithTraditionalAudit = securityAssessmentSecurityFeatureTargetsWithTraditionalAudit,
        ///         TargetsWithUnifiedAudit = securityAssessmentSecurityFeatureTargetsWithUnifiedAudit,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentSecurityFeaturesResult> Invoke(GetSecurityAssessmentSecurityFeaturesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentSecurityFeaturesResult>("oci:DataSafe/getSecurityAssessmentSecurityFeatures:getSecurityAssessmentSecurityFeatures", args ?? new GetSecurityAssessmentSecurityFeaturesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Security Features in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Lists the usage of Database security features for a given compartment or a target level, based on the filters provided.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentSecurityFeatures = Oci.DataSafe.GetSecurityAssessmentSecurityFeatures.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentSecurityFeatureAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentSecurityFeatureCompartmentIdInSubtree,
        ///         TargetId = testTarget.Id,
        ///         TargetsWithColumnEncryption = securityAssessmentSecurityFeatureTargetsWithColumnEncryption,
        ///         TargetsWithDatabaseVault = securityAssessmentSecurityFeatureTargetsWithDatabaseVault,
        ///         TargetsWithExternalAuthentication = securityAssessmentSecurityFeatureTargetsWithExternalAuthentication,
        ///         TargetsWithFineGrainedAudit = securityAssessmentSecurityFeatureTargetsWithFineGrainedAudit,
        ///         TargetsWithGlobalAuthentication = securityAssessmentSecurityFeatureTargetsWithGlobalAuthentication,
        ///         TargetsWithNetworkEncryption = securityAssessmentSecurityFeatureTargetsWithNetworkEncryption,
        ///         TargetsWithPasswordAuthentication = securityAssessmentSecurityFeatureTargetsWithPasswordAuthentication,
        ///         TargetsWithPrivilegeAnalysis = securityAssessmentSecurityFeatureTargetsWithPrivilegeAnalysis,
        ///         TargetsWithTablespaceEncryption = securityAssessmentSecurityFeatureTargetsWithTablespaceEncryption,
        ///         TargetsWithTraditionalAudit = securityAssessmentSecurityFeatureTargetsWithTraditionalAudit,
        ///         TargetsWithUnifiedAudit = securityAssessmentSecurityFeatureTargetsWithUnifiedAudit,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentSecurityFeaturesResult> Invoke(GetSecurityAssessmentSecurityFeaturesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentSecurityFeaturesResult>("oci:DataSafe/getSecurityAssessmentSecurityFeatures:getSecurityAssessmentSecurityFeatures", args ?? new GetSecurityAssessmentSecurityFeaturesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentSecurityFeaturesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentSecurityFeaturesFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentSecurityFeaturesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentSecurityFeaturesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithColumnEncryption")]
        public string? TargetsWithColumnEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
        /// </summary>
        [Input("targetsWithDatabaseVault")]
        public string? TargetsWithDatabaseVault { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithExternalAuthentication")]
        public string? TargetsWithExternalAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithFineGrainedAudit")]
        public string? TargetsWithFineGrainedAudit { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithGlobalAuthentication")]
        public string? TargetsWithGlobalAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithNetworkEncryption")]
        public string? TargetsWithNetworkEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithPasswordAuthentication")]
        public string? TargetsWithPasswordAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
        /// </summary>
        [Input("targetsWithPrivilegeAnalysis")]
        public string? TargetsWithPrivilegeAnalysis { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithTablespaceEncryption")]
        public string? TargetsWithTablespaceEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithTraditionalAudit")]
        public string? TargetsWithTraditionalAudit { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithUnifiedAudit")]
        public string? TargetsWithUnifiedAudit { get; set; }

        public GetSecurityAssessmentSecurityFeaturesArgs()
        {
        }
        public static new GetSecurityAssessmentSecurityFeaturesArgs Empty => new GetSecurityAssessmentSecurityFeaturesArgs();
    }

    public sealed class GetSecurityAssessmentSecurityFeaturesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentSecurityFeaturesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentSecurityFeaturesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentSecurityFeaturesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the targets that enable the DB security feature - Column Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithColumnEncryption")]
        public Input<string>? TargetsWithColumnEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Database Vault enabled/disabled.
        /// </summary>
        [Input("targetsWithDatabaseVault")]
        public Input<string>? TargetsWithDatabaseVault { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - External Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithExternalAuthentication")]
        public Input<string>? TargetsWithExternalAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Fine Grained Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithFineGrainedAudit")]
        public Input<string>? TargetsWithFineGrainedAudit { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Global Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithGlobalAuthentication")]
        public Input<string>? TargetsWithGlobalAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Network Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithNetworkEncryption")]
        public Input<string>? TargetsWithNetworkEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Password Authentication enabled/disabled.
        /// </summary>
        [Input("targetsWithPasswordAuthentication")]
        public Input<string>? TargetsWithPasswordAuthentication { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Privilege Analysis enabled/disabled.
        /// </summary>
        [Input("targetsWithPrivilegeAnalysis")]
        public Input<string>? TargetsWithPrivilegeAnalysis { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Tablespace Encryption enabled/disabled.
        /// </summary>
        [Input("targetsWithTablespaceEncryption")]
        public Input<string>? TargetsWithTablespaceEncryption { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Traditional Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithTraditionalAudit")]
        public Input<string>? TargetsWithTraditionalAudit { get; set; }

        /// <summary>
        /// A filter to return only the targets with the DB security feature - Unified Audit enabled/disabled.
        /// </summary>
        [Input("targetsWithUnifiedAudit")]
        public Input<string>? TargetsWithUnifiedAudit { get; set; }

        public GetSecurityAssessmentSecurityFeaturesInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentSecurityFeaturesInvokeArgs Empty => new GetSecurityAssessmentSecurityFeaturesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentSecurityFeaturesResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeaturesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of security_feature_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionResult> SecurityFeatureCollections;
        /// <summary>
        /// The OCID of the target database.
        /// </summary>
        public readonly string? TargetId;
        public readonly string? TargetsWithColumnEncryption;
        public readonly string? TargetsWithDatabaseVault;
        public readonly string? TargetsWithExternalAuthentication;
        public readonly string? TargetsWithFineGrainedAudit;
        public readonly string? TargetsWithGlobalAuthentication;
        public readonly string? TargetsWithNetworkEncryption;
        public readonly string? TargetsWithPasswordAuthentication;
        public readonly string? TargetsWithPrivilegeAnalysis;
        public readonly string? TargetsWithTablespaceEncryption;
        public readonly string? TargetsWithTraditionalAudit;
        public readonly string? TargetsWithUnifiedAudit;

        [OutputConstructor]
        private GetSecurityAssessmentSecurityFeaturesResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeaturesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionResult> securityFeatureCollections,

            string? targetId,

            string? targetsWithColumnEncryption,

            string? targetsWithDatabaseVault,

            string? targetsWithExternalAuthentication,

            string? targetsWithFineGrainedAudit,

            string? targetsWithGlobalAuthentication,

            string? targetsWithNetworkEncryption,

            string? targetsWithPasswordAuthentication,

            string? targetsWithPrivilegeAnalysis,

            string? targetsWithTablespaceEncryption,

            string? targetsWithTraditionalAudit,

            string? targetsWithUnifiedAudit)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            SecurityFeatureCollections = securityFeatureCollections;
            TargetId = targetId;
            TargetsWithColumnEncryption = targetsWithColumnEncryption;
            TargetsWithDatabaseVault = targetsWithDatabaseVault;
            TargetsWithExternalAuthentication = targetsWithExternalAuthentication;
            TargetsWithFineGrainedAudit = targetsWithFineGrainedAudit;
            TargetsWithGlobalAuthentication = targetsWithGlobalAuthentication;
            TargetsWithNetworkEncryption = targetsWithNetworkEncryption;
            TargetsWithPasswordAuthentication = targetsWithPasswordAuthentication;
            TargetsWithPrivilegeAnalysis = targetsWithPrivilegeAnalysis;
            TargetsWithTablespaceEncryption = targetsWithTablespaceEncryption;
            TargetsWithTraditionalAudit = targetsWithTraditionalAudit;
            TargetsWithUnifiedAudit = targetsWithUnifiedAudit;
        }
    }
}
