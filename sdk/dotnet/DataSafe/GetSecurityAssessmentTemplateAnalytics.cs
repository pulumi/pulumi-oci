// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentTemplateAnalytics
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Template Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template aggregated details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates. It also provides information
        /// about the statistics for the template baseline and the comparison related. If the comparison is done, it will show if there is any drift,
        /// and how many checks have drifts.
        /// The dimension field - isGroup identifies if the targetId belongs to a target group or a individual target.
        /// The dimension field - isCompared identifies if the comparison between the latest assessment and the template baseline assessment is done or not.
        /// The dimension field - isCompliant identifies if the latest assessment is compliant with the template baseline assessment or not.
        /// The dimension field - totalChecksFailed identifies how many checks in the template have drifts in the comparison.
        /// 
        /// When you perform the ListTemplateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAnalyticCompartmentIdInSubtree,
        ///         IsCompared = securityAssessmentTemplateAnalyticIsCompared,
        ///         IsCompliant = securityAssessmentTemplateAnalyticIsCompliant,
        ///         IsGroup = securityAssessmentTemplateAnalyticIsGroup,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAssessmentTemplateAnalyticsResult> InvokeAsync(GetSecurityAssessmentTemplateAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentTemplateAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAnalytics:getSecurityAssessmentTemplateAnalytics", args ?? new GetSecurityAssessmentTemplateAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Template Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template aggregated details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates. It also provides information
        /// about the statistics for the template baseline and the comparison related. If the comparison is done, it will show if there is any drift,
        /// and how many checks have drifts.
        /// The dimension field - isGroup identifies if the targetId belongs to a target group or a individual target.
        /// The dimension field - isCompared identifies if the comparison between the latest assessment and the template baseline assessment is done or not.
        /// The dimension field - isCompliant identifies if the latest assessment is compliant with the template baseline assessment or not.
        /// The dimension field - totalChecksFailed identifies how many checks in the template have drifts in the comparison.
        /// 
        /// When you perform the ListTemplateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAnalyticCompartmentIdInSubtree,
        ///         IsCompared = securityAssessmentTemplateAnalyticIsCompared,
        ///         IsCompliant = securityAssessmentTemplateAnalyticIsCompliant,
        ///         IsGroup = securityAssessmentTemplateAnalyticIsGroup,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentTemplateAnalyticsResult> Invoke(GetSecurityAssessmentTemplateAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentTemplateAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAnalytics:getSecurityAssessmentTemplateAnalytics", args ?? new GetSecurityAssessmentTemplateAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Template Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template aggregated details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates. It also provides information
        /// about the statistics for the template baseline and the comparison related. If the comparison is done, it will show if there is any drift,
        /// and how many checks have drifts.
        /// The dimension field - isGroup identifies if the targetId belongs to a target group or a individual target.
        /// The dimension field - isCompared identifies if the comparison between the latest assessment and the template baseline assessment is done or not.
        /// The dimension field - isCompliant identifies if the latest assessment is compliant with the template baseline assessment or not.
        /// The dimension field - totalChecksFailed identifies how many checks in the template have drifts in the comparison.
        /// 
        /// When you perform the ListTemplateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAnalyticCompartmentIdInSubtree,
        ///         IsCompared = securityAssessmentTemplateAnalyticIsCompared,
        ///         IsCompliant = securityAssessmentTemplateAnalyticIsCompliant,
        ///         IsGroup = securityAssessmentTemplateAnalyticIsGroup,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentTemplateAnalyticsResult> Invoke(GetSecurityAssessmentTemplateAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentTemplateAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAnalytics:getSecurityAssessmentTemplateAnalytics", args ?? new GetSecurityAssessmentTemplateAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentTemplateAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
        /// </summary>
        [Input("isCompared")]
        public bool? IsCompared { get; set; }

        /// <summary>
        /// A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
        /// </summary>
        [Input("isCompliant")]
        public bool? IsCompliant { get; set; }

        /// <summary>
        /// A filter to return only the target group related information if the OCID belongs to a target group.
        /// </summary>
        [Input("isGroup")]
        public bool? IsGroup { get; set; }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public string? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        [Input("templateAssessmentId")]
        public string? TemplateAssessmentId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        [Input("templateBaselineAssessmentId")]
        public string? TemplateBaselineAssessmentId { get; set; }

        public GetSecurityAssessmentTemplateAnalyticsArgs()
        {
        }
        public static new GetSecurityAssessmentTemplateAnalyticsArgs Empty => new GetSecurityAssessmentTemplateAnalyticsArgs();
    }

    public sealed class GetSecurityAssessmentTemplateAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentTemplateAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the statistics where the comparison between the latest assessment and the template baseline assessment is done.
        /// </summary>
        [Input("isCompared")]
        public Input<bool>? IsCompared { get; set; }

        /// <summary>
        /// A filter to return only the statistics where the latest assessment is compliant with the template baseline assessment.
        /// </summary>
        [Input("isCompliant")]
        public Input<bool>? IsCompliant { get; set; }

        /// <summary>
        /// A filter to return only the target group related information if the OCID belongs to a target group.
        /// </summary>
        [Input("isGroup")]
        public Input<bool>? IsGroup { get; set; }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public Input<string>? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        [Input("templateAssessmentId")]
        public Input<string>? TemplateAssessmentId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        [Input("templateBaselineAssessmentId")]
        public Input<string>? TemplateBaselineAssessmentId { get; set; }

        public GetSecurityAssessmentTemplateAnalyticsInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentTemplateAnalyticsInvokeArgs Empty => new GetSecurityAssessmentTemplateAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentTemplateAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentTemplateAnalyticsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether or not the comparison between the latest assessment and the template baseline assessment is done. If the value is false, it means the comparison is not done yet.
        /// </summary>
        public readonly bool? IsCompared;
        /// <summary>
        /// Indicates whether or not the latest assessment is compliant with the template baseline assessment. If the value is false, it means there is drift in the comparison report and the totalChecksFailed field will have a non-zero value.
        /// </summary>
        public readonly bool? IsCompliant;
        /// <summary>
        /// Indicates whether or not the template security assessment is applied to a target group.  If the value is false, it means the template security assessment is applied to a individual target.
        /// </summary>
        public readonly bool? IsGroup;
        /// <summary>
        /// The OCID of the target database group that the group assessment is created for.  This field will be in the response if the template was applied on a target group.
        /// </summary>
        public readonly string? TargetDatabaseGroupId;
        /// <summary>
        /// The OCID of the target database. This field will be in the response if the template was applied on an individual target.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The list of template_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionResult> TemplateAnalyticsCollections;
        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        public readonly string? TemplateAssessmentId;
        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        public readonly string? TemplateBaselineAssessmentId;

        [OutputConstructor]
        private GetSecurityAssessmentTemplateAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAssessmentTemplateAnalyticsFilterResult> filters,

            string id,

            bool? isCompared,

            bool? isCompliant,

            bool? isGroup,

            string? targetDatabaseGroupId,

            string? targetId,

            ImmutableArray<Outputs.GetSecurityAssessmentTemplateAnalyticsTemplateAnalyticsCollectionResult> templateAnalyticsCollections,

            string? templateAssessmentId,

            string? templateBaselineAssessmentId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            IsCompared = isCompared;
            IsCompliant = isCompliant;
            IsGroup = isGroup;
            TargetDatabaseGroupId = targetDatabaseGroupId;
            TargetId = targetId;
            TemplateAnalyticsCollections = templateAnalyticsCollections;
            TemplateAssessmentId = templateAssessmentId;
            TemplateBaselineAssessmentId = templateBaselineAssessmentId;
        }
    }
}
