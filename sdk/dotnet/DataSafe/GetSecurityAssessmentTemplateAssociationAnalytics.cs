// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityAssessmentTemplateAssociationAnalytics
    {
        /// <summary>
        /// This data source provides the list of Security Assessment Template Association Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template association details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates.
        /// 
        /// If the template baseline is created for a target group which contains several targets, we will have each individual target 
        /// listed there as targetId field together with targetDatabaseGroupId. And if the template baseline is created for an individual target,
        /// it will have targetId field only.
        /// 
        /// By leveraging the targetId filter, you will be able to know all the template or template baseline that this target has something to do with.
        /// No matter if they are directly applied or created for this target, or they are for the target group the target belongs to.
        /// 
        /// When you perform the ListTemplateAssociationAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAssociationAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAssociationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAssociationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAssociationAnalyticCompartmentIdInSubtree,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAssessmentTemplateAssociationAnalyticsResult> InvokeAsync(GetSecurityAssessmentTemplateAssociationAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAssessmentTemplateAssociationAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAssociationAnalytics:getSecurityAssessmentTemplateAssociationAnalytics", args ?? new GetSecurityAssessmentTemplateAssociationAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Template Association Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template association details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates.
        /// 
        /// If the template baseline is created for a target group which contains several targets, we will have each individual target 
        /// listed there as targetId field together with targetDatabaseGroupId. And if the template baseline is created for an individual target,
        /// it will have targetId field only.
        /// 
        /// By leveraging the targetId filter, you will be able to know all the template or template baseline that this target has something to do with.
        /// No matter if they are directly applied or created for this target, or they are for the target group the target belongs to.
        /// 
        /// When you perform the ListTemplateAssociationAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAssociationAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAssociationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAssociationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAssociationAnalyticCompartmentIdInSubtree,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentTemplateAssociationAnalyticsResult> Invoke(GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentTemplateAssociationAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAssociationAnalytics:getSecurityAssessmentTemplateAssociationAnalytics", args ?? new GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Assessment Template Association Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of template association details in the specified compartment. This provides information about the
        /// overall template usage, by returning the count of the target databases/target groups using the templates.
        /// 
        /// If the template baseline is created for a target group which contains several targets, we will have each individual target 
        /// listed there as targetId field together with targetDatabaseGroupId. And if the template baseline is created for an individual target,
        /// it will have targetId field only.
        /// 
        /// By leveraging the targetId filter, you will be able to know all the template or template baseline that this target has something to do with.
        /// No matter if they are directly applied or created for this target, or they are for the target group the target belongs to.
        /// 
        /// When you perform the ListTemplateAssociationAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAssessmentTemplateAssociationAnalytics = Oci.DataSafe.GetSecurityAssessmentTemplateAssociationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityAssessmentTemplateAssociationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = securityAssessmentTemplateAssociationAnalyticCompartmentIdInSubtree,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TemplateAssessmentId = testTemplateAssessment.Id,
        ///         TemplateBaselineAssessmentId = testTemplateBaselineAssessment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAssessmentTemplateAssociationAnalyticsResult> Invoke(GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAssessmentTemplateAssociationAnalyticsResult>("oci:DataSafe/getSecurityAssessmentTemplateAssociationAnalytics:getSecurityAssessmentTemplateAssociationAnalytics", args ?? new GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAssessmentTemplateAssociationAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public string? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        [Input("templateAssessmentId")]
        public string? TemplateAssessmentId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        [Input("templateBaselineAssessmentId")]
        public string? TemplateBaselineAssessmentId { get; set; }

        public GetSecurityAssessmentTemplateAssociationAnalyticsArgs()
        {
        }
        public static new GetSecurityAssessmentTemplateAssociationAnalyticsArgs Empty => new GetSecurityAssessmentTemplateAssociationAnalyticsArgs();
    }

    public sealed class GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public Input<string>? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        [Input("templateAssessmentId")]
        public Input<string>? TemplateAssessmentId { get; set; }

        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        [Input("templateBaselineAssessmentId")]
        public Input<string>? TemplateBaselineAssessmentId { get; set; }

        public GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs()
        {
        }
        public static new GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs Empty => new GetSecurityAssessmentTemplateAssociationAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAssessmentTemplateAssociationAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the target database group that the group assessment is created for.  This field will be in the response if the template was applied on a target group.
        /// </summary>
        public readonly string? TargetDatabaseGroupId;
        /// <summary>
        /// The OCID of the target database. If the template was applied on a target group, this field will be the OCID of the target members of the target group. If the template was applied on an individual target, this field will contain that targetId.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE.
        /// </summary>
        public readonly string? TemplateAssessmentId;
        /// <summary>
        /// The list of template_association_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAssessmentTemplateAssociationAnalyticsTemplateAssociationAnalyticsCollectionResult> TemplateAssociationAnalyticsCollections;
        /// <summary>
        /// The OCID of the security assessment of type TEMPLATE_BASELINE.
        /// </summary>
        public readonly string? TemplateBaselineAssessmentId;

        [OutputConstructor]
        private GetSecurityAssessmentTemplateAssociationAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAssessmentTemplateAssociationAnalyticsFilterResult> filters,

            string id,

            string? targetDatabaseGroupId,

            string? targetId,

            string? templateAssessmentId,

            ImmutableArray<Outputs.GetSecurityAssessmentTemplateAssociationAnalyticsTemplateAssociationAnalyticsCollectionResult> templateAssociationAnalyticsCollections,

            string? templateBaselineAssessmentId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            TargetDatabaseGroupId = targetDatabaseGroupId;
            TargetId = targetId;
            TemplateAssessmentId = templateAssessmentId;
            TemplateAssociationAnalyticsCollections = templateAssociationAnalyticsCollections;
            TemplateBaselineAssessmentId = templateBaselineAssessmentId;
        }
    }
}
