// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityPolicyDeployments
    {
        /// <summary>
        /// This data source provides the list of Security Policy Deployments in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all security policy deployments in Data Safe.
        /// 
        /// The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityPolicyDeployments = Oci.DataSafe.GetSecurityPolicyDeployments.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_policy_deployment_access_level,
        ///         CompartmentIdInSubtree = @var.Security_policy_deployment_compartment_id_in_subtree,
        ///         DisplayName = @var.Security_policy_deployment_display_name,
        ///         SecurityPolicyDeploymentId = oci_data_safe_security_policy_deployment.Test_security_policy_deployment.Id,
        ///         SecurityPolicyId = oci_data_safe_security_policy.Test_security_policy.Id,
        ///         State = @var.Security_policy_deployment_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetSecurityPolicyDeploymentsResult> InvokeAsync(GetSecurityPolicyDeploymentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityPolicyDeploymentsResult>("oci:DataSafe/getSecurityPolicyDeployments:getSecurityPolicyDeployments", args ?? new GetSecurityPolicyDeploymentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Policy Deployments in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all security policy deployments in Data Safe.
        /// 
        /// The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityPolicyDeployments = Oci.DataSafe.GetSecurityPolicyDeployments.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Security_policy_deployment_access_level,
        ///         CompartmentIdInSubtree = @var.Security_policy_deployment_compartment_id_in_subtree,
        ///         DisplayName = @var.Security_policy_deployment_display_name,
        ///         SecurityPolicyDeploymentId = oci_data_safe_security_policy_deployment.Test_security_policy_deployment.Id,
        ///         SecurityPolicyId = oci_data_safe_security_policy.Test_security_policy.Id,
        ///         State = @var.Security_policy_deployment_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetSecurityPolicyDeploymentsResult> Invoke(GetSecurityPolicyDeploymentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityPolicyDeploymentsResult>("oci:DataSafe/getSecurityPolicyDeployments:getSecurityPolicyDeployments", args ?? new GetSecurityPolicyDeploymentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityPolicyDeploymentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityPolicyDeploymentsFilterArgs>? _filters;
        public List<Inputs.GetSecurityPolicyDeploymentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityPolicyDeploymentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
        /// </summary>
        [Input("securityPolicyDeploymentId")]
        public string? SecurityPolicyDeploymentId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public string? SecurityPolicyId { get; set; }

        /// <summary>
        /// The current state of the security policy deployment.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetSecurityPolicyDeploymentsArgs()
        {
        }
        public static new GetSecurityPolicyDeploymentsArgs Empty => new GetSecurityPolicyDeploymentsArgs();
    }

    public sealed class GetSecurityPolicyDeploymentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityPolicyDeploymentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityPolicyDeploymentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityPolicyDeploymentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
        /// </summary>
        [Input("securityPolicyDeploymentId")]
        public Input<string>? SecurityPolicyDeploymentId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// The current state of the security policy deployment.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetSecurityPolicyDeploymentsInvokeArgs()
        {
        }
        public static new GetSecurityPolicyDeploymentsInvokeArgs Empty => new GetSecurityPolicyDeploymentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityPolicyDeploymentsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the security policy deployment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the security policy deployment.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSecurityPolicyDeploymentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of security_policy_deployment_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult> SecurityPolicyDeploymentCollections;
        public readonly string? SecurityPolicyDeploymentId;
        /// <summary>
        /// The OCID of the security policy corresponding to the security policy deployment.
        /// </summary>
        public readonly string? SecurityPolicyId;
        /// <summary>
        /// The current state of the security policy deployment.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target where the security policy is deployed.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetSecurityPolicyDeploymentsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetSecurityPolicyDeploymentsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult> securityPolicyDeploymentCollections,

            string? securityPolicyDeploymentId,

            string? securityPolicyId,

            string? state,

            string? targetId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SecurityPolicyDeploymentCollections = securityPolicyDeploymentCollections;
            SecurityPolicyDeploymentId = securityPolicyDeploymentId;
            SecurityPolicyId = securityPolicyId;
            State = state;
            TargetId = targetId;
        }
    }
}
