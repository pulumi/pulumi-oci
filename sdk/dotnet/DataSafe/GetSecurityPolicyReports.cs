// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSecurityPolicyReports
    {
        /// <summary>
        /// This data source provides the list of Security Policy Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all security policy reports in Data Safe.
        /// 
        /// The ListSecurityPolicyReports operation returns only the security policy reports in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyReports on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityPolicyReports = Oci.DataSafe.GetSecurityPolicyReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityPolicyReportAccessLevel,
        ///         CompartmentIdInSubtree = securityPolicyReportCompartmentIdInSubtree,
        ///         DisplayName = securityPolicyReportDisplayName,
        ///         SecurityPolicyReportId = testSecurityPolicyReport.Id,
        ///         State = securityPolicyReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityPolicyReportsResult> InvokeAsync(GetSecurityPolicyReportsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityPolicyReportsResult>("oci:DataSafe/getSecurityPolicyReports:getSecurityPolicyReports", args ?? new GetSecurityPolicyReportsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Policy Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all security policy reports in Data Safe.
        /// 
        /// The ListSecurityPolicyReports operation returns only the security policy reports in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyReports on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityPolicyReports = Oci.DataSafe.GetSecurityPolicyReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityPolicyReportAccessLevel,
        ///         CompartmentIdInSubtree = securityPolicyReportCompartmentIdInSubtree,
        ///         DisplayName = securityPolicyReportDisplayName,
        ///         SecurityPolicyReportId = testSecurityPolicyReport.Id,
        ///         State = securityPolicyReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityPolicyReportsResult> Invoke(GetSecurityPolicyReportsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityPolicyReportsResult>("oci:DataSafe/getSecurityPolicyReports:getSecurityPolicyReports", args ?? new GetSecurityPolicyReportsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Policy Reports in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all security policy reports in Data Safe.
        /// 
        /// The ListSecurityPolicyReports operation returns only the security policy reports in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyReports on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityPolicyReports = Oci.DataSafe.GetSecurityPolicyReports.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = securityPolicyReportAccessLevel,
        ///         CompartmentIdInSubtree = securityPolicyReportCompartmentIdInSubtree,
        ///         DisplayName = securityPolicyReportDisplayName,
        ///         SecurityPolicyReportId = testSecurityPolicyReport.Id,
        ///         State = securityPolicyReportState,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityPolicyReportsResult> Invoke(GetSecurityPolicyReportsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityPolicyReportsResult>("oci:DataSafe/getSecurityPolicyReports:getSecurityPolicyReports", args ?? new GetSecurityPolicyReportsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityPolicyReportsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityPolicyReportsFilterArgs>? _filters;
        public List<Inputs.GetSecurityPolicyReportsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityPolicyReportsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy report resource.
        /// </summary>
        [Input("securityPolicyReportId")]
        public string? SecurityPolicyReportId { get; set; }

        /// <summary>
        /// The current state of the security policy report.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetSecurityPolicyReportsArgs()
        {
        }
        public static new GetSecurityPolicyReportsArgs Empty => new GetSecurityPolicyReportsArgs();
    }

    public sealed class GetSecurityPolicyReportsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityPolicyReportsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityPolicyReportsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityPolicyReportsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy report resource.
        /// </summary>
        [Input("securityPolicyReportId")]
        public Input<string>? SecurityPolicyReportId { get; set; }

        /// <summary>
        /// The current state of the security policy report.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetSecurityPolicyReportsInvokeArgs()
        {
        }
        public static new GetSecurityPolicyReportsInvokeArgs Empty => new GetSecurityPolicyReportsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityPolicyReportsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment that contains the security policy report.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the security policy report.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSecurityPolicyReportsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of security_policy_report_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityPolicyReportsSecurityPolicyReportCollectionResult> SecurityPolicyReportCollections;
        public readonly string? SecurityPolicyReportId;
        /// <summary>
        /// The current state of the security policy report.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the of the  target database.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetSecurityPolicyReportsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetSecurityPolicyReportsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSecurityPolicyReportsSecurityPolicyReportCollectionResult> securityPolicyReportCollections,

            string? securityPolicyReportId,

            string? state,

            string? targetId)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SecurityPolicyReportCollections = securityPolicyReportCollections;
            SecurityPolicyReportId = securityPolicyReportId;
            State = state;
            TargetId = targetId;
        }
    }
}
