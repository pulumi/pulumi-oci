// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSensitiveColumnAnalytics
    {
        /// <summary>
        /// This data source provides the list of Sensitive Column Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets consolidated sensitive columns analytics data based on the specified query parameters.
        /// 
        /// When you perform the ListSensitiveColumnAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListSensitiveColumnAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveColumnAnalytics = Oci.DataSafe.GetSensitiveColumnAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveColumnAnalyticAccessLevel,
        ///         ColumnNames = sensitiveColumnAnalyticColumnName,
        ///         CompartmentIdInSubtree = sensitiveColumnAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sensitiveColumnAnalyticGroupBy,
        ///         Objects = sensitiveColumnAnalyticObject,
        ///         SchemaNames = sensitiveColumnAnalyticSchemaName,
        ///         SensitiveDataModelId = testSensitiveDataModel.Id,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         SensitiveTypeIds = testSensitiveType.Id,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSensitiveColumnAnalyticsResult> InvokeAsync(GetSensitiveColumnAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSensitiveColumnAnalyticsResult>("oci:DataSafe/getSensitiveColumnAnalytics:getSensitiveColumnAnalytics", args ?? new GetSensitiveColumnAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sensitive Column Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets consolidated sensitive columns analytics data based on the specified query parameters.
        /// 
        /// When you perform the ListSensitiveColumnAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListSensitiveColumnAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveColumnAnalytics = Oci.DataSafe.GetSensitiveColumnAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveColumnAnalyticAccessLevel,
        ///         ColumnNames = sensitiveColumnAnalyticColumnName,
        ///         CompartmentIdInSubtree = sensitiveColumnAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sensitiveColumnAnalyticGroupBy,
        ///         Objects = sensitiveColumnAnalyticObject,
        ///         SchemaNames = sensitiveColumnAnalyticSchemaName,
        ///         SensitiveDataModelId = testSensitiveDataModel.Id,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         SensitiveTypeIds = testSensitiveType.Id,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensitiveColumnAnalyticsResult> Invoke(GetSensitiveColumnAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensitiveColumnAnalyticsResult>("oci:DataSafe/getSensitiveColumnAnalytics:getSensitiveColumnAnalytics", args ?? new GetSensitiveColumnAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sensitive Column Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets consolidated sensitive columns analytics data based on the specified query parameters.
        /// 
        /// When you perform the ListSensitiveColumnAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListSensitiveColumnAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveColumnAnalytics = Oci.DataSafe.GetSensitiveColumnAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveColumnAnalyticAccessLevel,
        ///         ColumnNames = sensitiveColumnAnalyticColumnName,
        ///         CompartmentIdInSubtree = sensitiveColumnAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sensitiveColumnAnalyticGroupBy,
        ///         Objects = sensitiveColumnAnalyticObject,
        ///         SchemaNames = sensitiveColumnAnalyticSchemaName,
        ///         SensitiveDataModelId = testSensitiveDataModel.Id,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         SensitiveTypeIds = testSensitiveType.Id,
        ///         TargetId = testTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensitiveColumnAnalyticsResult> Invoke(GetSensitiveColumnAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensitiveColumnAnalyticsResult>("oci:DataSafe/getSensitiveColumnAnalytics:getSensitiveColumnAnalytics", args ?? new GetSensitiveColumnAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSensitiveColumnAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        [Input("columnNames")]
        private List<string>? _columnNames;

        /// <summary>
        /// A filter to return only a specific column based on column name.
        /// </summary>
        public List<string> ColumnNames
        {
            get => _columnNames ?? (_columnNames = new List<string>());
            set => _columnNames = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSensitiveColumnAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSensitiveColumnAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSensitiveColumnAnalyticsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize the sensitive columns.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        [Input("objects")]
        private List<string>? _objects;

        /// <summary>
        /// A filter to return only items related to a specific object name.
        /// </summary>
        public List<string> Objects
        {
            get => _objects ?? (_objects = new List<string>());
            set => _objects = value;
        }

        [Input("schemaNames")]
        private List<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public List<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new List<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified sensitive data model OCID.
        /// </summary>
        [Input("sensitiveDataModelId")]
        public string? SensitiveDataModelId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
        /// </summary>
        [Input("sensitiveTypeGroupId")]
        public string? SensitiveTypeGroupId { get; set; }

        [Input("sensitiveTypeIds")]
        private List<string>? _sensitiveTypeIds;

        /// <summary>
        /// A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        /// </summary>
        public List<string> SensitiveTypeIds
        {
            get => _sensitiveTypeIds ?? (_sensitiveTypeIds = new List<string>());
            set => _sensitiveTypeIds = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        public GetSensitiveColumnAnalyticsArgs()
        {
        }
        public static new GetSensitiveColumnAnalyticsArgs Empty => new GetSensitiveColumnAnalyticsArgs();
    }

    public sealed class GetSensitiveColumnAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        [Input("columnNames")]
        private InputList<string>? _columnNames;

        /// <summary>
        /// A filter to return only a specific column based on column name.
        /// </summary>
        public InputList<string> ColumnNames
        {
            get => _columnNames ?? (_columnNames = new InputList<string>());
            set => _columnNames = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSensitiveColumnAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSensitiveColumnAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSensitiveColumnAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize the sensitive columns.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("objects")]
        private InputList<string>? _objects;

        /// <summary>
        /// A filter to return only items related to a specific object name.
        /// </summary>
        public InputList<string> Objects
        {
            get => _objects ?? (_objects = new InputList<string>());
            set => _objects = value;
        }

        [Input("schemaNames")]
        private InputList<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public InputList<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new InputList<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the specified sensitive data model OCID.
        /// </summary>
        [Input("sensitiveDataModelId")]
        public Input<string>? SensitiveDataModelId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
        /// </summary>
        [Input("sensitiveTypeGroupId")]
        public Input<string>? SensitiveTypeGroupId { get; set; }

        [Input("sensitiveTypeIds")]
        private InputList<string>? _sensitiveTypeIds;

        /// <summary>
        /// A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        /// </summary>
        public InputList<string> SensitiveTypeIds
        {
            get => _sensitiveTypeIds ?? (_sensitiveTypeIds = new InputList<string>());
            set => _sensitiveTypeIds = value;
        }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public GetSensitiveColumnAnalyticsInvokeArgs()
        {
        }
        public static new GetSensitiveColumnAnalyticsInvokeArgs Empty => new GetSensitiveColumnAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSensitiveColumnAnalyticsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        public readonly ImmutableArray<string> ColumnNames;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSensitiveColumnAnalyticsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        public readonly ImmutableArray<string> Objects;
        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        public readonly ImmutableArray<string> SchemaNames;
        /// <summary>
        /// The list of sensitive_column_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionResult> SensitiveColumnAnalyticsCollections;
        /// <summary>
        /// The OCID of the sensitive data model which contains the sensitive column.
        /// </summary>
        public readonly string? SensitiveDataModelId;
        public readonly string? SensitiveTypeGroupId;
        /// <summary>
        /// The OCID of the sensitive type associated with the sensitive column.
        /// </summary>
        public readonly ImmutableArray<string> SensitiveTypeIds;
        /// <summary>
        /// The OCID of the target database associated with the sensitive column.
        /// </summary>
        public readonly string? TargetId;

        [OutputConstructor]
        private GetSensitiveColumnAnalyticsResult(
            string? accessLevel,

            ImmutableArray<string> columnNames,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSensitiveColumnAnalyticsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string id,

            ImmutableArray<string> objects,

            ImmutableArray<string> schemaNames,

            ImmutableArray<Outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionResult> sensitiveColumnAnalyticsCollections,

            string? sensitiveDataModelId,

            string? sensitiveTypeGroupId,

            ImmutableArray<string> sensitiveTypeIds,

            string? targetId)
        {
            AccessLevel = accessLevel;
            ColumnNames = columnNames;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            Objects = objects;
            SchemaNames = schemaNames;
            SensitiveColumnAnalyticsCollections = sensitiveColumnAnalyticsCollections;
            SensitiveDataModelId = sensitiveDataModelId;
            SensitiveTypeGroupId = sensitiveTypeGroupId;
            SensitiveTypeIds = sensitiveTypeIds;
            TargetId = targetId;
        }
    }
}
