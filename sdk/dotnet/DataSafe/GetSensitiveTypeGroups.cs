// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSensitiveTypeGroups
    {
        /// <summary>
        /// This data source provides the list of Sensitive Type Groups in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of sensitive type groups based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveTypeGroups = Oci.DataSafe.GetSensitiveTypeGroups.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveTypeGroupAccessLevel,
        ///         CompartmentIdInSubtree = sensitiveTypeGroupCompartmentIdInSubtree,
        ///         DisplayName = sensitiveTypeGroupDisplayName,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         State = sensitiveTypeGroupState,
        ///         TimeCreatedGreaterThanOrEqualTo = sensitiveTypeGroupTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sensitiveTypeGroupTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSensitiveTypeGroupsResult> InvokeAsync(GetSensitiveTypeGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSensitiveTypeGroupsResult>("oci:DataSafe/getSensitiveTypeGroups:getSensitiveTypeGroups", args ?? new GetSensitiveTypeGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sensitive Type Groups in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of sensitive type groups based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveTypeGroups = Oci.DataSafe.GetSensitiveTypeGroups.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveTypeGroupAccessLevel,
        ///         CompartmentIdInSubtree = sensitiveTypeGroupCompartmentIdInSubtree,
        ///         DisplayName = sensitiveTypeGroupDisplayName,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         State = sensitiveTypeGroupState,
        ///         TimeCreatedGreaterThanOrEqualTo = sensitiveTypeGroupTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sensitiveTypeGroupTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensitiveTypeGroupsResult> Invoke(GetSensitiveTypeGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensitiveTypeGroupsResult>("oci:DataSafe/getSensitiveTypeGroups:getSensitiveTypeGroups", args ?? new GetSensitiveTypeGroupsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sensitive Type Groups in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of sensitive type groups based on the specified query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSensitiveTypeGroups = Oci.DataSafe.GetSensitiveTypeGroups.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sensitiveTypeGroupAccessLevel,
        ///         CompartmentIdInSubtree = sensitiveTypeGroupCompartmentIdInSubtree,
        ///         DisplayName = sensitiveTypeGroupDisplayName,
        ///         SensitiveTypeGroupId = testSensitiveTypeGroup.Id,
        ///         State = sensitiveTypeGroupState,
        ///         TimeCreatedGreaterThanOrEqualTo = sensitiveTypeGroupTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sensitiveTypeGroupTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensitiveTypeGroupsResult> Invoke(GetSensitiveTypeGroupsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensitiveTypeGroupsResult>("oci:DataSafe/getSensitiveTypeGroups:getSensitiveTypeGroups", args ?? new GetSensitiveTypeGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSensitiveTypeGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSensitiveTypeGroupsFilterArgs>? _filters;
        public List<Inputs.GetSensitiveTypeGroupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSensitiveTypeGroupsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
        /// </summary>
        [Input("sensitiveTypeGroupId")]
        public string? SensitiveTypeGroupId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public string? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public string? TimeCreatedLessThan { get; set; }

        public GetSensitiveTypeGroupsArgs()
        {
        }
        public static new GetSensitiveTypeGroupsArgs Empty => new GetSensitiveTypeGroupsArgs();
    }

    public sealed class GetSensitiveTypeGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSensitiveTypeGroupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSensitiveTypeGroupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSensitiveTypeGroupsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the sensitive type group resource.
        /// </summary>
        [Input("sensitiveTypeGroupId")]
        public Input<string>? SensitiveTypeGroupId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public Input<string>? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public Input<string>? TimeCreatedLessThan { get; set; }

        public GetSensitiveTypeGroupsInvokeArgs()
        {
        }
        public static new GetSensitiveTypeGroupsInvokeArgs Empty => new GetSensitiveTypeGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSensitiveTypeGroupsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment that contains the sensitive type group.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The display name of the sensitive type group.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSensitiveTypeGroupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of sensitive_type_group_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSensitiveTypeGroupsSensitiveTypeGroupCollectionResult> SensitiveTypeGroupCollections;
        public readonly string? SensitiveTypeGroupId;
        /// <summary>
        /// The current state of the sensitive type group.
        /// </summary>
        public readonly string? State;
        public readonly string? TimeCreatedGreaterThanOrEqualTo;
        public readonly string? TimeCreatedLessThan;

        [OutputConstructor]
        private GetSensitiveTypeGroupsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetSensitiveTypeGroupsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSensitiveTypeGroupsSensitiveTypeGroupCollectionResult> sensitiveTypeGroupCollections,

            string? sensitiveTypeGroupId,

            string? state,

            string? timeCreatedGreaterThanOrEqualTo,

            string? timeCreatedLessThan)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SensitiveTypeGroupCollections = sensitiveTypeGroupCollections;
            SensitiveTypeGroupId = sensitiveTypeGroupId;
            State = state;
            TimeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            TimeCreatedLessThan = timeCreatedLessThan;
        }
    }
}
