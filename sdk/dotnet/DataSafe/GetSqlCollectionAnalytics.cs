// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlCollectionAnalytics
    {
        /// <summary>
        /// This data source provides the list of Sql Collection Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL collection analytics in Data Safe.
        /// 
        /// The ListSqlCollectionAnalytics operation returns only the analytics for the SQL collections in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlCollectionAnalytics = Oci.DataSafe.GetSqlCollectionAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Sql_collection_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Sql_collection_analytic_compartment_id_in_subtree,
        ///         GroupBies = @var.Sql_collection_analytic_group_by,
        ///         State = @var.Sql_collection_analytic_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TimeEnded = @var.Sql_collection_analytic_time_ended,
        ///         TimeStarted = @var.Sql_collection_analytic_time_started,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSqlCollectionAnalyticsResult> InvokeAsync(GetSqlCollectionAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlCollectionAnalyticsResult>("oci:DataSafe/getSqlCollectionAnalytics:getSqlCollectionAnalytics", args ?? new GetSqlCollectionAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Collection Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL collection analytics in Data Safe.
        /// 
        /// The ListSqlCollectionAnalytics operation returns only the analytics for the SQL collections in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlCollectionAnalytics = Oci.DataSafe.GetSqlCollectionAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Sql_collection_analytic_access_level,
        ///         CompartmentIdInSubtree = @var.Sql_collection_analytic_compartment_id_in_subtree,
        ///         GroupBies = @var.Sql_collection_analytic_group_by,
        ///         State = @var.Sql_collection_analytic_state,
        ///         TargetId = oci_cloud_guard_target.Test_target.Id,
        ///         TimeEnded = @var.Sql_collection_analytic_time_ended,
        ///         TimeStarted = @var.Sql_collection_analytic_time_started,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSqlCollectionAnalyticsResult> Invoke(GetSqlCollectionAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlCollectionAnalyticsResult>("oci:DataSafe/getSqlCollectionAnalytics:getSqlCollectionAnalytics", args ?? new GetSqlCollectionAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlCollectionAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlCollectionAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSqlCollectionAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlCollectionAnalyticsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize SQL collection aggregation.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public string? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public string? TimeStarted { get; set; }

        public GetSqlCollectionAnalyticsArgs()
        {
        }
        public static new GetSqlCollectionAnalyticsArgs Empty => new GetSqlCollectionAnalyticsArgs();
    }

    public sealed class GetSqlCollectionAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlCollectionAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlCollectionAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlCollectionAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize SQL collection aggregation.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public GetSqlCollectionAnalyticsInvokeArgs()
        {
        }
        public static new GetSqlCollectionAnalyticsInvokeArgs Empty => new GetSqlCollectionAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlCollectionAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSqlCollectionAnalyticsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of sql_collection_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult> SqlCollectionAnalyticsCollections;
        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the target corresponding to the security policy deployment.
        /// </summary>
        public readonly string? TargetId;
        public readonly string? TimeEnded;
        public readonly string? TimeStarted;

        [OutputConstructor]
        private GetSqlCollectionAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSqlCollectionAnalyticsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string? id,

            ImmutableArray<Outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult> sqlCollectionAnalyticsCollections,

            string? state,

            string? targetId,

            string? timeEnded,

            string? timeStarted)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            SqlCollectionAnalyticsCollections = sqlCollectionAnalyticsCollections;
            State = state;
            TargetId = targetId;
            TimeEnded = timeEnded;
            TimeStarted = timeStarted;
        }
    }
}
