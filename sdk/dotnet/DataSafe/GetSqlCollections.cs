// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlCollections
    {
        /// <summary>
        /// This data source provides the list of Sql Collections in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL collections in Data Safe.
        /// 
        /// The ListSqlCollections operation returns only the SQL collections in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlCollections = Oci.DataSafe.GetSqlCollections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlCollectionAccessLevel,
        ///         CompartmentIdInSubtree = sqlCollectionCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlCollectionDisplayName,
        ///         SqlCollectionId = testSqlCollection.Id,
        ///         State = sqlCollectionState,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlCollectionTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlCollectionTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlCollectionsResult> InvokeAsync(GetSqlCollectionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlCollectionsResult>("oci:DataSafe/getSqlCollections:getSqlCollections", args ?? new GetSqlCollectionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Collections in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL collections in Data Safe.
        /// 
        /// The ListSqlCollections operation returns only the SQL collections in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlCollections = Oci.DataSafe.GetSqlCollections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlCollectionAccessLevel,
        ///         CompartmentIdInSubtree = sqlCollectionCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlCollectionDisplayName,
        ///         SqlCollectionId = testSqlCollection.Id,
        ///         State = sqlCollectionState,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlCollectionTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlCollectionTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlCollectionsResult> Invoke(GetSqlCollectionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlCollectionsResult>("oci:DataSafe/getSqlCollections:getSqlCollections", args ?? new GetSqlCollectionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Collections in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL collections in Data Safe.
        /// 
        /// The ListSqlCollections operation returns only the SQL collections in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlCollections = Oci.DataSafe.GetSqlCollections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlCollectionAccessLevel,
        ///         CompartmentIdInSubtree = sqlCollectionCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlCollectionDisplayName,
        ///         SqlCollectionId = testSqlCollection.Id,
        ///         State = sqlCollectionState,
        ///         TargetDatabaseGroupId = testTargetDatabaseGroup.Id,
        ///         TargetId = testTarget.Id,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlCollectionTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlCollectionTimeCreatedLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlCollectionsResult> Invoke(GetSqlCollectionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlCollectionsResult>("oci:DataSafe/getSqlCollections:getSqlCollections", args ?? new GetSqlCollectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlCollectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified user name.
        /// </summary>
        [Input("dbUserName")]
        public string? DbUserName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlCollectionsFilterArgs>? _filters;
        public List<Inputs.GetSqlCollectionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlCollectionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the SQL collection resource.
        /// </summary>
        [Input("sqlCollectionId")]
        public string? SqlCollectionId { get; set; }

        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public string? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public string? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public string? TimeCreatedLessThan { get; set; }

        public GetSqlCollectionsArgs()
        {
        }
        public static new GetSqlCollectionsArgs Empty => new GetSqlCollectionsArgs();
    }

    public sealed class GetSqlCollectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified user name.
        /// </summary>
        [Input("dbUserName")]
        public Input<string>? DbUserName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlCollectionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlCollectionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlCollectionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the SQL collection resource.
        /// </summary>
        [Input("sqlCollectionId")]
        public Input<string>? SqlCollectionId { get; set; }

        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return the target database group that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseGroupId")]
        public Input<string>? TargetDatabaseGroupId { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public Input<string>? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public Input<string>? TimeCreatedLessThan { get; set; }

        public GetSqlCollectionsInvokeArgs()
        {
        }
        public static new GetSqlCollectionsInvokeArgs Empty => new GetSqlCollectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlCollectionsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the SQL collection.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The database user name.
        /// </summary>
        public readonly string? DbUserName;
        /// <summary>
        /// The display name of the SQL collection.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSqlCollectionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of sql_collection_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlCollectionsSqlCollectionCollectionResult> SqlCollectionCollections;
        public readonly string? SqlCollectionId;
        /// <summary>
        /// The current state of the SQL collection.
        /// </summary>
        public readonly string? State;
        public readonly string? TargetDatabaseGroupId;
        /// <summary>
        /// The OCID of the target corresponding to the security policy deployment.
        /// </summary>
        public readonly string? TargetId;
        public readonly string? TimeCreatedGreaterThanOrEqualTo;
        public readonly string? TimeCreatedLessThan;

        [OutputConstructor]
        private GetSqlCollectionsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? dbUserName,

            string? displayName,

            ImmutableArray<Outputs.GetSqlCollectionsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSqlCollectionsSqlCollectionCollectionResult> sqlCollectionCollections,

            string? sqlCollectionId,

            string? state,

            string? targetDatabaseGroupId,

            string? targetId,

            string? timeCreatedGreaterThanOrEqualTo,

            string? timeCreatedLessThan)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DbUserName = dbUserName;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SqlCollectionCollections = sqlCollectionCollections;
            SqlCollectionId = sqlCollectionId;
            State = state;
            TargetDatabaseGroupId = targetDatabaseGroupId;
            TargetId = targetId;
            TimeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            TimeCreatedLessThan = timeCreatedLessThan;
        }
    }
}
