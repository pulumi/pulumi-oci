// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlFirewallAllowedSqlAnalytics
    {
        /// <summary>
        /// This data source provides the list of Sql Firewall Allowed Sql Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of all SQL Firewall allowed SQL statements.
        /// 
        /// The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallAllowedSqlAnalytics = Oci.DataSafe.GetSqlFirewallAllowedSqlAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallAllowedSqlAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallAllowedSqlAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallAllowedSqlAnalyticGroupBy,
        ///         ScimQuery = sqlFirewallAllowedSqlAnalyticScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlFirewallAllowedSqlAnalyticsResult> InvokeAsync(GetSqlFirewallAllowedSqlAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlFirewallAllowedSqlAnalyticsResult>("oci:DataSafe/getSqlFirewallAllowedSqlAnalytics:getSqlFirewallAllowedSqlAnalytics", args ?? new GetSqlFirewallAllowedSqlAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Allowed Sql Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of all SQL Firewall allowed SQL statements.
        /// 
        /// The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallAllowedSqlAnalytics = Oci.DataSafe.GetSqlFirewallAllowedSqlAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallAllowedSqlAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallAllowedSqlAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallAllowedSqlAnalyticGroupBy,
        ///         ScimQuery = sqlFirewallAllowedSqlAnalyticScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallAllowedSqlAnalyticsResult> Invoke(GetSqlFirewallAllowedSqlAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallAllowedSqlAnalyticsResult>("oci:DataSafe/getSqlFirewallAllowedSqlAnalytics:getSqlFirewallAllowedSqlAnalytics", args ?? new GetSqlFirewallAllowedSqlAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Allowed Sql Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of all SQL Firewall allowed SQL statements.
        /// 
        /// The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `true`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallAllowedSqlAnalytics = Oci.DataSafe.GetSqlFirewallAllowedSqlAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallAllowedSqlAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallAllowedSqlAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallAllowedSqlAnalyticGroupBy,
        ///         ScimQuery = sqlFirewallAllowedSqlAnalyticScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallAllowedSqlAnalyticsResult> Invoke(GetSqlFirewallAllowedSqlAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallAllowedSqlAnalyticsResult>("oci:DataSafe/getSqlFirewallAllowedSqlAnalytics:getSqlFirewallAllowedSqlAnalytics", args ?? new GetSqlFirewallAllowedSqlAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlFirewallAllowedSqlAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize the allowed SQL aggregation.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(currentUser eq 'SCOTT') and (topLevel eq 'YES')
        /// </summary>
        [Input("scimQuery")]
        public string? ScimQuery { get; set; }

        public GetSqlFirewallAllowedSqlAnalyticsArgs()
        {
        }
        public static new GetSqlFirewallAllowedSqlAnalyticsArgs Empty => new GetSqlFirewallAllowedSqlAnalyticsArgs();
    }

    public sealed class GetSqlFirewallAllowedSqlAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlFirewallAllowedSqlAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize the allowed SQL aggregation.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(currentUser eq 'SCOTT') and (topLevel eq 'YES')
        /// </summary>
        [Input("scimQuery")]
        public Input<string>? ScimQuery { get; set; }

        public GetSqlFirewallAllowedSqlAnalyticsInvokeArgs()
        {
        }
        public static new GetSqlFirewallAllowedSqlAnalyticsInvokeArgs Empty => new GetSqlFirewallAllowedSqlAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlFirewallAllowedSqlAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSqlFirewallAllowedSqlAnalyticsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ScimQuery;
        /// <summary>
        /// The list of sql_firewall_allowed_sql_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult> SqlFirewallAllowedSqlAnalyticsCollections;

        [OutputConstructor]
        private GetSqlFirewallAllowedSqlAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSqlFirewallAllowedSqlAnalyticsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string id,

            string? scimQuery,

            ImmutableArray<Outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult> sqlFirewallAllowedSqlAnalyticsCollections)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            ScimQuery = scimQuery;
            SqlFirewallAllowedSqlAnalyticsCollections = sqlFirewallAllowedSqlAnalyticsCollections;
        }
    }
}
