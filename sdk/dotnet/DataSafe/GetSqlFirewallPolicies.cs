// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlFirewallPolicies
    {
        /// <summary>
        /// This data source provides the list of Sql Firewall Policies in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL Firewall policies.
        /// 
        /// The ListSqlFirewallPolicies operation returns only the SQL Firewall policies in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicies = Oci.DataSafe.GetSqlFirewallPolicies.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlFirewallPolicyDisplayName,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         SqlFirewallPolicyId = testSqlFirewallPolicy.Id,
        ///         State = sqlFirewallPolicyState,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlFirewallPolicyTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlFirewallPolicyTimeCreatedLessThan,
        ///         ViolationAction = sqlFirewallPolicyViolationAction,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlFirewallPoliciesResult> InvokeAsync(GetSqlFirewallPoliciesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlFirewallPoliciesResult>("oci:DataSafe/getSqlFirewallPolicies:getSqlFirewallPolicies", args ?? new GetSqlFirewallPoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Policies in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL Firewall policies.
        /// 
        /// The ListSqlFirewallPolicies operation returns only the SQL Firewall policies in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicies = Oci.DataSafe.GetSqlFirewallPolicies.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlFirewallPolicyDisplayName,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         SqlFirewallPolicyId = testSqlFirewallPolicy.Id,
        ///         State = sqlFirewallPolicyState,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlFirewallPolicyTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlFirewallPolicyTimeCreatedLessThan,
        ///         ViolationAction = sqlFirewallPolicyViolationAction,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallPoliciesResult> Invoke(GetSqlFirewallPoliciesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallPoliciesResult>("oci:DataSafe/getSqlFirewallPolicies:getSqlFirewallPolicies", args ?? new GetSqlFirewallPoliciesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Policies in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Retrieves a list of all SQL Firewall policies.
        /// 
        /// The ListSqlFirewallPolicies operation returns only the SQL Firewall policies in the specified `compartmentId`.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// Principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
        /// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicies = Oci.DataSafe.GetSqlFirewallPolicies.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyCompartmentIdInSubtree,
        ///         DbUserName = testUser.Name,
        ///         DisplayName = sqlFirewallPolicyDisplayName,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         SqlFirewallPolicyId = testSqlFirewallPolicy.Id,
        ///         State = sqlFirewallPolicyState,
        ///         TimeCreatedGreaterThanOrEqualTo = sqlFirewallPolicyTimeCreatedGreaterThanOrEqualTo,
        ///         TimeCreatedLessThan = sqlFirewallPolicyTimeCreatedLessThan,
        ///         ViolationAction = sqlFirewallPolicyViolationAction,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallPoliciesResult> Invoke(GetSqlFirewallPoliciesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallPoliciesResult>("oci:DataSafe/getSqlFirewallPolicies:getSqlFirewallPolicies", args ?? new GetSqlFirewallPoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlFirewallPoliciesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified user name.
        /// </summary>
        [Input("dbUserName")]
        public string? DbUserName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlFirewallPoliciesFilterArgs>? _filters;
        public List<Inputs.GetSqlFirewallPoliciesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlFirewallPoliciesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public string? SecurityPolicyId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the SQL Firewall policy resource.
        /// </summary>
        [Input("sqlFirewallPolicyId")]
        public string? SqlFirewallPolicyId { get; set; }

        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public string? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public string? TimeCreatedLessThan { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified violation action.
        /// </summary>
        [Input("violationAction")]
        public string? ViolationAction { get; set; }

        public GetSqlFirewallPoliciesArgs()
        {
        }
        public static new GetSqlFirewallPoliciesArgs Empty => new GetSqlFirewallPoliciesArgs();
    }

    public sealed class GetSqlFirewallPoliciesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified user name.
        /// </summary>
        [Input("dbUserName")]
        public Input<string>? DbUserName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlFirewallPoliciesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlFirewallPoliciesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlFirewallPoliciesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the SQL Firewall policy resource.
        /// </summary>
        [Input("sqlFirewallPolicyId")]
        public Input<string>? SqlFirewallPolicyId { get; set; }

        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedGreaterThanOrEqualTo")]
        public Input<string>? TimeCreatedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
        /// 
        /// **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timeCreatedLessThan")]
        public Input<string>? TimeCreatedLessThan { get; set; }

        /// <summary>
        /// An optional filter to return only resources that match the specified violation action.
        /// </summary>
        [Input("violationAction")]
        public Input<string>? ViolationAction { get; set; }

        public GetSqlFirewallPoliciesInvokeArgs()
        {
        }
        public static new GetSqlFirewallPoliciesInvokeArgs Empty => new GetSqlFirewallPoliciesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlFirewallPoliciesResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the SQL Firewall policy.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The database user name.
        /// </summary>
        public readonly string? DbUserName;
        /// <summary>
        /// The display name of the SQL Firewall policy.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSqlFirewallPoliciesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the security policy corresponding to the SQL Firewall policy.
        /// </summary>
        public readonly string? SecurityPolicyId;
        /// <summary>
        /// The list of sql_firewall_policy_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult> SqlFirewallPolicyCollections;
        public readonly string? SqlFirewallPolicyId;
        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        public readonly string? State;
        public readonly string? TimeCreatedGreaterThanOrEqualTo;
        public readonly string? TimeCreatedLessThan;
        /// <summary>
        /// Specifies the mode in which the SQL Firewall policy is enabled.
        /// </summary>
        public readonly string? ViolationAction;

        [OutputConstructor]
        private GetSqlFirewallPoliciesResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? dbUserName,

            string? displayName,

            ImmutableArray<Outputs.GetSqlFirewallPoliciesFilterResult> filters,

            string id,

            string? securityPolicyId,

            ImmutableArray<Outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult> sqlFirewallPolicyCollections,

            string? sqlFirewallPolicyId,

            string? state,

            string? timeCreatedGreaterThanOrEqualTo,

            string? timeCreatedLessThan,

            string? violationAction)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DbUserName = dbUserName;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SecurityPolicyId = securityPolicyId;
            SqlFirewallPolicyCollections = sqlFirewallPolicyCollections;
            SqlFirewallPolicyId = sqlFirewallPolicyId;
            State = state;
            TimeCreatedGreaterThanOrEqualTo = timeCreatedGreaterThanOrEqualTo;
            TimeCreatedLessThan = timeCreatedLessThan;
            ViolationAction = violationAction;
        }
    }
}
