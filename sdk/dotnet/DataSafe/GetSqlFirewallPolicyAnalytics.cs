// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlFirewallPolicyAnalytics
    {
        /// <summary>
        /// This data source provides the list of Sql Firewall Policy Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of aggregated SQL Firewall policy details.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
        /// `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicyAnalytics = Oci.DataSafe.GetSqlFirewallPolicyAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallPolicyAnalyticGroupBy,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         State = sqlFirewallPolicyAnalyticState,
        ///         TimeEnded = sqlFirewallPolicyAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallPolicyAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlFirewallPolicyAnalyticsResult> InvokeAsync(GetSqlFirewallPolicyAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlFirewallPolicyAnalyticsResult>("oci:DataSafe/getSqlFirewallPolicyAnalytics:getSqlFirewallPolicyAnalytics", args ?? new GetSqlFirewallPolicyAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Policy Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of aggregated SQL Firewall policy details.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
        /// `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicyAnalytics = Oci.DataSafe.GetSqlFirewallPolicyAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallPolicyAnalyticGroupBy,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         State = sqlFirewallPolicyAnalyticState,
        ///         TimeEnded = sqlFirewallPolicyAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallPolicyAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallPolicyAnalyticsResult> Invoke(GetSqlFirewallPolicyAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallPolicyAnalyticsResult>("oci:DataSafe/getSqlFirewallPolicyAnalytics:getSqlFirewallPolicyAnalytics", args ?? new GetSqlFirewallPolicyAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Policy Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of aggregated SQL Firewall policy details.
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
        /// principal doesn't have access to even one of the child compartments. This is valid only when
        /// `compartmentIdInSubtree` is set to `True`.
        /// 
        /// The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
        /// `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallPolicyAnalytics = Oci.DataSafe.GetSqlFirewallPolicyAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallPolicyAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallPolicyAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallPolicyAnalyticGroupBy,
        ///         SecurityPolicyId = testSecurityPolicy.Id,
        ///         State = sqlFirewallPolicyAnalyticState,
        ///         TimeEnded = sqlFirewallPolicyAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallPolicyAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallPolicyAnalyticsResult> Invoke(GetSqlFirewallPolicyAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallPolicyAnalyticsResult>("oci:DataSafe/getSqlFirewallPolicyAnalytics:getSqlFirewallPolicyAnalytics", args ?? new GetSqlFirewallPolicyAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlFirewallPolicyAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlFirewallPolicyAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSqlFirewallPolicyAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlFirewallPolicyAnalyticsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize SQL Firewall policy aggregation.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public string? SecurityPolicyId { get; set; }

        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public string? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public string? TimeStarted { get; set; }

        public GetSqlFirewallPolicyAnalyticsArgs()
        {
        }
        public static new GetSqlFirewallPolicyAnalyticsArgs Empty => new GetSqlFirewallPolicyAnalyticsArgs();
    }

    public sealed class GetSqlFirewallPolicyAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlFirewallPolicyAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlFirewallPolicyAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlFirewallPolicyAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// The group by parameter to summarize SQL Firewall policy aggregation.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// An optional filter to return only resources that match the specified OCID of the security policy resource.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// An optional filter to return the summary of the SQL Firewall policies created before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return the summary of the SQL Firewall policies created after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public GetSqlFirewallPolicyAnalyticsInvokeArgs()
        {
        }
        public static new GetSqlFirewallPolicyAnalyticsInvokeArgs Empty => new GetSqlFirewallPolicyAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlFirewallPolicyAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSqlFirewallPolicyAnalyticsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the security policy corresponding to the SQL Firewall policy.
        /// </summary>
        public readonly string? SecurityPolicyId;
        /// <summary>
        /// The list of sql_firewall_policy_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult> SqlFirewallPolicyAnalyticsCollections;
        /// <summary>
        /// The current state of the SQL Firewall policy.
        /// </summary>
        public readonly string? State;
        public readonly string? TimeEnded;
        public readonly string? TimeStarted;

        [OutputConstructor]
        private GetSqlFirewallPolicyAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSqlFirewallPolicyAnalyticsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string id,

            string? securityPolicyId,

            ImmutableArray<Outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult> sqlFirewallPolicyAnalyticsCollections,

            string? state,

            string? timeEnded,

            string? timeStarted)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            SecurityPolicyId = securityPolicyId;
            SqlFirewallPolicyAnalyticsCollections = sqlFirewallPolicyAnalyticsCollections;
            State = state;
            TimeEnded = timeEnded;
            TimeStarted = timeStarted;
        }
    }
}
