// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlFirewallViolationAnalytics
    {
        /// <summary>
        /// This data source provides the list of Sql Firewall Violation Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of the SQL Firewall violations.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolationAnalytics = Oci.DataSafe.GetSqlFirewallViolationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallViolationAnalyticGroupBy,
        ///         QueryTimeZone = sqlFirewallViolationAnalyticQueryTimeZone,
        ///         ScimQuery = sqlFirewallViolationAnalyticScimQuery,
        ///         SummaryFields = sqlFirewallViolationAnalyticSummaryField,
        ///         TimeEnded = sqlFirewallViolationAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallViolationAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlFirewallViolationAnalyticsResult> InvokeAsync(GetSqlFirewallViolationAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlFirewallViolationAnalyticsResult>("oci:DataSafe/getSqlFirewallViolationAnalytics:getSqlFirewallViolationAnalytics", args ?? new GetSqlFirewallViolationAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Violation Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of the SQL Firewall violations.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolationAnalytics = Oci.DataSafe.GetSqlFirewallViolationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallViolationAnalyticGroupBy,
        ///         QueryTimeZone = sqlFirewallViolationAnalyticQueryTimeZone,
        ///         ScimQuery = sqlFirewallViolationAnalyticScimQuery,
        ///         SummaryFields = sqlFirewallViolationAnalyticSummaryField,
        ///         TimeEnded = sqlFirewallViolationAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallViolationAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallViolationAnalyticsResult> Invoke(GetSqlFirewallViolationAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallViolationAnalyticsResult>("oci:DataSafe/getSqlFirewallViolationAnalytics:getSqlFirewallViolationAnalytics", args ?? new GetSqlFirewallViolationAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Violation Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the aggregation details of the SQL Firewall violations.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolationAnalytics = Oci.DataSafe.GetSqlFirewallViolationAnalytics.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationAnalyticCompartmentIdInSubtree,
        ///         GroupBies = sqlFirewallViolationAnalyticGroupBy,
        ///         QueryTimeZone = sqlFirewallViolationAnalyticQueryTimeZone,
        ///         ScimQuery = sqlFirewallViolationAnalyticScimQuery,
        ///         SummaryFields = sqlFirewallViolationAnalyticSummaryField,
        ///         TimeEnded = sqlFirewallViolationAnalyticTimeEnded,
        ///         TimeStarted = sqlFirewallViolationAnalyticTimeStarted,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallViolationAnalyticsResult> Invoke(GetSqlFirewallViolationAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallViolationAnalyticsResult>("oci:DataSafe/getSqlFirewallViolationAnalytics:getSqlFirewallViolationAnalytics", args ?? new GetSqlFirewallViolationAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlFirewallViolationAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlFirewallViolationAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetSqlFirewallViolationAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlFirewallViolationAnalyticsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
        /// </summary>
        [Input("queryTimeZone")]
        public string? QueryTimeZone { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(operationTime ge "2021-06-04T01:00:26.000Z") and (violationAction eq "BLOCKED")
        /// </summary>
        [Input("scimQuery")]
        public string? ScimQuery { get; set; }

        [Input("summaryFields")]
        private List<string>? _summaryFields;

        /// <summary>
        /// Specifies a subset of summarized fields to be returned in the response.
        /// </summary>
        public List<string> SummaryFields
        {
            get => _summaryFields ?? (_summaryFields = new List<string>());
            set => _summaryFields = value;
        }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public string? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public string? TimeStarted { get; set; }

        public GetSqlFirewallViolationAnalyticsArgs()
        {
        }
        public static new GetSqlFirewallViolationAnalyticsArgs Empty => new GetSqlFirewallViolationAnalyticsArgs();
    }

    public sealed class GetSqlFirewallViolationAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlFirewallViolationAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlFirewallViolationAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlFirewallViolationAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
        /// </summary>
        [Input("queryTimeZone")]
        public Input<string>? QueryTimeZone { get; set; }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(operationTime ge "2021-06-04T01:00:26.000Z") and (violationAction eq "BLOCKED")
        /// </summary>
        [Input("scimQuery")]
        public Input<string>? ScimQuery { get; set; }

        [Input("summaryFields")]
        private InputList<string>? _summaryFields;

        /// <summary>
        /// Specifies a subset of summarized fields to be returned in the response.
        /// </summary>
        public InputList<string> SummaryFields
        {
            get => _summaryFields ?? (_summaryFields = new InputList<string>());
            set => _summaryFields = value;
        }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        public GetSqlFirewallViolationAnalyticsInvokeArgs()
        {
        }
        public static new GetSqlFirewallViolationAnalyticsInvokeArgs Empty => new GetSqlFirewallViolationAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlFirewallViolationAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSqlFirewallViolationAnalyticsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? QueryTimeZone;
        public readonly string? ScimQuery;
        /// <summary>
        /// The list of sql_firewall_violation_analytics_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult> SqlFirewallViolationAnalyticsCollections;
        public readonly ImmutableArray<string> SummaryFields;
        /// <summary>
        /// The time at which the aggregation ended.
        /// </summary>
        public readonly string? TimeEnded;
        /// <summary>
        /// The time at which the aggregation started.
        /// </summary>
        public readonly string? TimeStarted;

        [OutputConstructor]
        private GetSqlFirewallViolationAnalyticsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSqlFirewallViolationAnalyticsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string id,

            string? queryTimeZone,

            string? scimQuery,

            ImmutableArray<Outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult> sqlFirewallViolationAnalyticsCollections,

            ImmutableArray<string> summaryFields,

            string? timeEnded,

            string? timeStarted)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            QueryTimeZone = queryTimeZone;
            ScimQuery = scimQuery;
            SqlFirewallViolationAnalyticsCollections = sqlFirewallViolationAnalyticsCollections;
            SummaryFields = summaryFields;
            TimeEnded = timeEnded;
            TimeStarted = timeStarted;
        }
    }
}
