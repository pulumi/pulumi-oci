// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetSqlFirewallViolations
    {
        /// <summary>
        /// This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the SQL Firewall violations captured by the firewall.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolations = Oci.DataSafe.GetSqlFirewallViolations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationCompartmentIdInSubtree,
        ///         ScimQuery = sqlFirewallViolationScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlFirewallViolationsResult> InvokeAsync(GetSqlFirewallViolationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlFirewallViolationsResult>("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", args ?? new GetSqlFirewallViolationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the SQL Firewall violations captured by the firewall.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolations = Oci.DataSafe.GetSqlFirewallViolations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationCompartmentIdInSubtree,
        ///         ScimQuery = sqlFirewallViolationScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallViolationsResult> Invoke(GetSqlFirewallViolationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallViolationsResult>("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", args ?? new GetSqlFirewallViolationsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of all the SQL Firewall violations captured by the firewall.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSqlFirewallViolations = Oci.DataSafe.GetSqlFirewallViolations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = sqlFirewallViolationAccessLevel,
        ///         CompartmentIdInSubtree = sqlFirewallViolationCompartmentIdInSubtree,
        ///         ScimQuery = sqlFirewallViolationScimQuery,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlFirewallViolationsResult> Invoke(GetSqlFirewallViolationsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlFirewallViolationsResult>("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", args ?? new GetSqlFirewallViolationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlFirewallViolationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSqlFirewallViolationsFilterArgs>? _filters;
        public List<Inputs.GetSqlFirewallViolationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSqlFirewallViolationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(operationTime ge "2021-06-04T01:00:26.000Z") and (violationAction eq "BLOCKED")
        /// </summary>
        [Input("scimQuery")]
        public string? ScimQuery { get; set; }

        public GetSqlFirewallViolationsArgs()
        {
        }
        public static new GetSqlFirewallViolationsArgs Empty => new GetSqlFirewallViolationsArgs();
    }

    public sealed class GetSqlFirewallViolationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSqlFirewallViolationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSqlFirewallViolationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSqlFirewallViolationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
        /// 
        /// **Example:** query=(operationTime ge "2021-06-04T01:00:26.000Z") and (violationAction eq "BLOCKED")
        /// </summary>
        [Input("scimQuery")]
        public Input<string>? ScimQuery { get; set; }

        public GetSqlFirewallViolationsInvokeArgs()
        {
        }
        public static new GetSqlFirewallViolationsInvokeArgs Empty => new GetSqlFirewallViolationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlFirewallViolationsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment containing the SQL violation.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSqlFirewallViolationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ScimQuery;
        /// <summary>
        /// The list of sql_firewall_violations_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult> SqlFirewallViolationsCollections;

        [OutputConstructor]
        private GetSqlFirewallViolationsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSqlFirewallViolationsFilterResult> filters,

            string id,

            string? scimQuery,

            ImmutableArray<Outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult> sqlFirewallViolationsCollections)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            ScimQuery = scimQuery;
            SqlFirewallViolationsCollections = sqlFirewallViolationsCollections;
        }
    }
}
