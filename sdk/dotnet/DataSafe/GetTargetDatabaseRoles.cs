// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetTargetDatabaseRoles
    {
        /// <summary>
        /// This data source provides the list of Target Database Roles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns a list of role metadata objects.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabaseRoles = Oci.DataSafe.GetTargetDatabaseRoles.Invoke(new()
        ///     {
        ///         TargetDatabaseId = oci_data_safe_target_database.Test_target_database.Id,
        ///         AuthenticationType = @var.Target_database_role_authentication_type,
        ///         IsOracleMaintained = @var.Target_database_role_is_oracle_maintained,
        ///         RoleNames = @var.Target_database_role_role_name,
        ///         RoleNameContains = @var.Target_database_role_role_name_contains,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTargetDatabaseRolesResult> InvokeAsync(GetTargetDatabaseRolesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTargetDatabaseRolesResult>("oci:DataSafe/getTargetDatabaseRoles:getTargetDatabaseRoles", args ?? new GetTargetDatabaseRolesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Target Database Roles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns a list of role metadata objects.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabaseRoles = Oci.DataSafe.GetTargetDatabaseRoles.Invoke(new()
        ///     {
        ///         TargetDatabaseId = oci_data_safe_target_database.Test_target_database.Id,
        ///         AuthenticationType = @var.Target_database_role_authentication_type,
        ///         IsOracleMaintained = @var.Target_database_role_is_oracle_maintained,
        ///         RoleNames = @var.Target_database_role_role_name,
        ///         RoleNameContains = @var.Target_database_role_role_name_contains,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTargetDatabaseRolesResult> Invoke(GetTargetDatabaseRolesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTargetDatabaseRolesResult>("oci:DataSafe/getTargetDatabaseRoles:getTargetDatabaseRoles", args ?? new GetTargetDatabaseRolesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTargetDatabaseRolesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return roles based on authentication type.
        /// </summary>
        [Input("authenticationType")]
        public string? AuthenticationType { get; set; }

        [Input("filters")]
        private List<Inputs.GetTargetDatabaseRolesFilterArgs>? _filters;
        public List<Inputs.GetTargetDatabaseRolesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTargetDatabaseRolesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return roles based on whether they are maintained by oracle or not.
        /// </summary>
        [Input("isOracleMaintained")]
        public bool? IsOracleMaintained { get; set; }

        /// <summary>
        /// A filter to return only items if role name contains a specific string.
        /// </summary>
        [Input("roleNameContains")]
        public string? RoleNameContains { get; set; }

        [Input("roleNames")]
        private List<string>? _roleNames;

        /// <summary>
        /// A filter to return only a specific role based on role name.
        /// </summary>
        public List<string> RoleNames
        {
            get => _roleNames ?? (_roleNames = new List<string>());
            set => _roleNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public string TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabaseRolesArgs()
        {
        }
        public static new GetTargetDatabaseRolesArgs Empty => new GetTargetDatabaseRolesArgs();
    }

    public sealed class GetTargetDatabaseRolesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return roles based on authentication type.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetTargetDatabaseRolesFilterInputArgs>? _filters;
        public InputList<Inputs.GetTargetDatabaseRolesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTargetDatabaseRolesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return roles based on whether they are maintained by oracle or not.
        /// </summary>
        [Input("isOracleMaintained")]
        public Input<bool>? IsOracleMaintained { get; set; }

        /// <summary>
        /// A filter to return only items if role name contains a specific string.
        /// </summary>
        [Input("roleNameContains")]
        public Input<string>? RoleNameContains { get; set; }

        [Input("roleNames")]
        private InputList<string>? _roleNames;

        /// <summary>
        /// A filter to return only a specific role based on role name.
        /// </summary>
        public InputList<string> RoleNames
        {
            get => _roleNames ?? (_roleNames = new InputList<string>());
            set => _roleNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public Input<string> TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabaseRolesInvokeArgs()
        {
        }
        public static new GetTargetDatabaseRolesInvokeArgs Empty => new GetTargetDatabaseRolesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTargetDatabaseRolesResult
    {
        /// <summary>
        /// Type of authentication.
        /// </summary>
        public readonly string? AuthenticationType;
        public readonly ImmutableArray<Outputs.GetTargetDatabaseRolesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Is the role oracle maintained.
        /// </summary>
        public readonly bool? IsOracleMaintained;
        public readonly string? RoleNameContains;
        /// <summary>
        /// Name of the role.
        /// </summary>
        public readonly ImmutableArray<string> RoleNames;
        /// <summary>
        /// The list of roles.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetDatabaseRolesRoleResult> Roles;
        public readonly string TargetDatabaseId;

        [OutputConstructor]
        private GetTargetDatabaseRolesResult(
            string? authenticationType,

            ImmutableArray<Outputs.GetTargetDatabaseRolesFilterResult> filters,

            string id,

            bool? isOracleMaintained,

            string? roleNameContains,

            ImmutableArray<string> roleNames,

            ImmutableArray<Outputs.GetTargetDatabaseRolesRoleResult> roles,

            string targetDatabaseId)
        {
            AuthenticationType = authenticationType;
            Filters = filters;
            Id = id;
            IsOracleMaintained = isOracleMaintained;
            RoleNameContains = roleNameContains;
            RoleNames = roleNames;
            Roles = roles;
            TargetDatabaseId = targetDatabaseId;
        }
    }
}
