// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetTargetDatabases
    {
        /// <summary>
        /// This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the list of registered target databases in Data Safe.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabases = Oci.DataSafe.GetTargetDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = targetDatabaseAccessLevel,
        ///         AssociatedResourceId = testAssociatedResource.Id,
        ///         CompartmentIdInSubtree = targetDatabaseCompartmentIdInSubtree,
        ///         DatabaseType = targetDatabaseDatabaseType,
        ///         DisplayName = targetDatabaseDisplayName,
        ///         InfrastructureType = targetDatabaseInfrastructureType,
        ///         State = targetDatabaseState,
        ///         TargetDatabaseId = testTargetDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTargetDatabasesResult> InvokeAsync(GetTargetDatabasesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTargetDatabasesResult>("oci:DataSafe/getTargetDatabases:getTargetDatabases", args ?? new GetTargetDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the list of registered target databases in Data Safe.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabases = Oci.DataSafe.GetTargetDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = targetDatabaseAccessLevel,
        ///         AssociatedResourceId = testAssociatedResource.Id,
        ///         CompartmentIdInSubtree = targetDatabaseCompartmentIdInSubtree,
        ///         DatabaseType = targetDatabaseDatabaseType,
        ///         DisplayName = targetDatabaseDisplayName,
        ///         InfrastructureType = targetDatabaseInfrastructureType,
        ///         State = targetDatabaseState,
        ///         TargetDatabaseId = testTargetDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTargetDatabasesResult> Invoke(GetTargetDatabasesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTargetDatabasesResult>("oci:DataSafe/getTargetDatabases:getTargetDatabases", args ?? new GetTargetDatabasesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns the list of registered target databases in Data Safe.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabases = Oci.DataSafe.GetTargetDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = targetDatabaseAccessLevel,
        ///         AssociatedResourceId = testAssociatedResource.Id,
        ///         CompartmentIdInSubtree = targetDatabaseCompartmentIdInSubtree,
        ///         DatabaseType = targetDatabaseDatabaseType,
        ///         DisplayName = targetDatabaseDisplayName,
        ///         InfrastructureType = targetDatabaseInfrastructureType,
        ///         State = targetDatabaseState,
        ///         TargetDatabaseId = testTargetDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTargetDatabasesResult> Invoke(GetTargetDatabasesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTargetDatabasesResult>("oci:DataSafe/getTargetDatabases:getTargetDatabases", args ?? new GetTargetDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTargetDatabasesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return the target databases that are associated to the resource id passed in as a parameter value.
        /// </summary>
        [Input("associatedResourceId")]
        public string? AssociatedResourceId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only target databases that match the specified database type.
        /// </summary>
        [Input("databaseType")]
        public string? DatabaseType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetTargetDatabasesFilterArgs>? _filters;
        public List<Inputs.GetTargetDatabasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTargetDatabasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only target databases that match the specified infrastructure type.
        /// </summary>
        [Input("infrastructureType")]
        public string? InfrastructureType { get; set; }

        /// <summary>
        /// A filter to return only target databases that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return the target database that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseId")]
        public string? TargetDatabaseId { get; set; }

        public GetTargetDatabasesArgs()
        {
        }
        public static new GetTargetDatabasesArgs Empty => new GetTargetDatabasesArgs();
    }

    public sealed class GetTargetDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return the target databases that are associated to the resource id passed in as a parameter value.
        /// </summary>
        [Input("associatedResourceId")]
        public Input<string>? AssociatedResourceId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only target databases that match the specified database type.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetTargetDatabasesFilterInputArgs>? _filters;
        public InputList<Inputs.GetTargetDatabasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTargetDatabasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only target databases that match the specified infrastructure type.
        /// </summary>
        [Input("infrastructureType")]
        public Input<string>? InfrastructureType { get; set; }

        /// <summary>
        /// A filter to return only target databases that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return the target database that matches the specified OCID.
        /// </summary>
        [Input("targetDatabaseId")]
        public Input<string>? TargetDatabaseId { get; set; }

        public GetTargetDatabasesInvokeArgs()
        {
        }
        public static new GetTargetDatabasesInvokeArgs Empty => new GetTargetDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTargetDatabasesResult
    {
        public readonly string? AccessLevel;
        public readonly string? AssociatedResourceId;
        /// <summary>
        /// The OCID of the compartment which contains the Data Safe target database.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The database type.
        /// </summary>
        public readonly string? DatabaseType;
        /// <summary>
        /// The display name of the peer target database in Data Safe.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetTargetDatabasesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The infrastructure type the database is running on.
        /// </summary>
        public readonly string? InfrastructureType;
        /// <summary>
        /// The current state of the target database in Data Safe.
        /// </summary>
        public readonly string? State;
        public readonly string? TargetDatabaseId;
        /// <summary>
        /// The list of target_databases.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetDatabasesTargetDatabaseResult> TargetDatabases;

        [OutputConstructor]
        private GetTargetDatabasesResult(
            string? accessLevel,

            string? associatedResourceId,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? databaseType,

            string? displayName,

            ImmutableArray<Outputs.GetTargetDatabasesFilterResult> filters,

            string id,

            string? infrastructureType,

            string? state,

            string? targetDatabaseId,

            ImmutableArray<Outputs.GetTargetDatabasesTargetDatabaseResult> targetDatabases)
        {
            AccessLevel = accessLevel;
            AssociatedResourceId = associatedResourceId;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DatabaseType = databaseType;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            InfrastructureType = infrastructureType;
            State = state;
            TargetDatabaseId = targetDatabaseId;
            TargetDatabases = targetDatabases;
        }
    }
}
