// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetTargetDatabasesSchemas
    {
        /// <summary>
        /// This data source provides the list of Target Databases Schemas in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns list of schema.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabasesSchemas = Oci.DataSafe.GetTargetDatabasesSchemas.Invoke(new()
        ///     {
        ///         TargetDatabaseId = oci_data_safe_target_database.Test_target_database.Id,
        ///         IsOracleMaintained = @var.Target_databases_schema_is_oracle_maintained,
        ///         SchemaNames = @var.Target_databases_schema_schema_name,
        ///         SchemaNameContains = @var.Target_databases_schema_schema_name_contains,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTargetDatabasesSchemasResult> InvokeAsync(GetTargetDatabasesSchemasArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTargetDatabasesSchemasResult>("oci:DataSafe/getTargetDatabasesSchemas:getTargetDatabasesSchemas", args ?? new GetTargetDatabasesSchemasArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Target Databases Schemas in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns list of schema.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabasesSchemas = Oci.DataSafe.GetTargetDatabasesSchemas.Invoke(new()
        ///     {
        ///         TargetDatabaseId = oci_data_safe_target_database.Test_target_database.Id,
        ///         IsOracleMaintained = @var.Target_databases_schema_is_oracle_maintained,
        ///         SchemaNames = @var.Target_databases_schema_schema_name,
        ///         SchemaNameContains = @var.Target_databases_schema_schema_name_contains,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTargetDatabasesSchemasResult> Invoke(GetTargetDatabasesSchemasInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTargetDatabasesSchemasResult>("oci:DataSafe/getTargetDatabasesSchemas:getTargetDatabasesSchemas", args ?? new GetTargetDatabasesSchemasInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTargetDatabasesSchemasArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetTargetDatabasesSchemasFilterArgs>? _filters;
        public List<Inputs.GetTargetDatabasesSchemasFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTargetDatabasesSchemasFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to specific type of schema.
        /// </summary>
        [Input("isOracleMaintained")]
        public bool? IsOracleMaintained { get; set; }

        /// <summary>
        /// A filter to return only items if schema name contains a specific string.
        /// </summary>
        [Input("schemaNameContains")]
        public string? SchemaNameContains { get; set; }

        [Input("schemaNames")]
        private List<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public List<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new List<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public string TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabasesSchemasArgs()
        {
        }
        public static new GetTargetDatabasesSchemasArgs Empty => new GetTargetDatabasesSchemasArgs();
    }

    public sealed class GetTargetDatabasesSchemasInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetTargetDatabasesSchemasFilterInputArgs>? _filters;
        public InputList<Inputs.GetTargetDatabasesSchemasFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTargetDatabasesSchemasFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items related to specific type of schema.
        /// </summary>
        [Input("isOracleMaintained")]
        public Input<bool>? IsOracleMaintained { get; set; }

        /// <summary>
        /// A filter to return only items if schema name contains a specific string.
        /// </summary>
        [Input("schemaNameContains")]
        public Input<string>? SchemaNameContains { get; set; }

        [Input("schemaNames")]
        private InputList<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public InputList<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new InputList<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public Input<string> TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabasesSchemasInvokeArgs()
        {
        }
        public static new GetTargetDatabasesSchemasInvokeArgs Empty => new GetTargetDatabasesSchemasInvokeArgs();
    }


    [OutputType]
    public sealed class GetTargetDatabasesSchemasResult
    {
        public readonly ImmutableArray<Outputs.GetTargetDatabasesSchemasFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the schema is oracle supplied.
        /// </summary>
        public readonly bool? IsOracleMaintained;
        public readonly string? SchemaNameContains;
        /// <summary>
        /// Name of the schema.
        /// </summary>
        public readonly ImmutableArray<string> SchemaNames;
        /// <summary>
        /// The list of schemas.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetDatabasesSchemasSchemaResult> Schemas;
        public readonly string TargetDatabaseId;

        [OutputConstructor]
        private GetTargetDatabasesSchemasResult(
            ImmutableArray<Outputs.GetTargetDatabasesSchemasFilterResult> filters,

            string id,

            bool? isOracleMaintained,

            string? schemaNameContains,

            ImmutableArray<string> schemaNames,

            ImmutableArray<Outputs.GetTargetDatabasesSchemasSchemaResult> schemas,

            string targetDatabaseId)
        {
            Filters = filters;
            Id = id;
            IsOracleMaintained = isOracleMaintained;
            SchemaNameContains = schemaNameContains;
            SchemaNames = schemaNames;
            Schemas = schemas;
            TargetDatabaseId = targetDatabaseId;
        }
    }
}
