// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetTargetDatabasesTables
    {
        /// <summary>
        /// This data source provides the list of Target Databases Tables in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns a list of table metadata objects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabasesTables = Oci.DataSafe.GetTargetDatabasesTables.Invoke(new()
        ///     {
        ///         TargetDatabaseId = testTargetDatabase.Id,
        ///         SchemaNames = targetDatabasesTableSchemaName,
        ///         SchemaNameContains = targetDatabasesTableSchemaNameContains,
        ///         TableNames = testTable.Name,
        ///         TableNameContains = targetDatabasesTableTableNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTargetDatabasesTablesResult> InvokeAsync(GetTargetDatabasesTablesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTargetDatabasesTablesResult>("oci:DataSafe/getTargetDatabasesTables:getTargetDatabasesTables", args ?? new GetTargetDatabasesTablesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Target Databases Tables in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Returns a list of table metadata objects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTargetDatabasesTables = Oci.DataSafe.GetTargetDatabasesTables.Invoke(new()
        ///     {
        ///         TargetDatabaseId = testTargetDatabase.Id,
        ///         SchemaNames = targetDatabasesTableSchemaName,
        ///         SchemaNameContains = targetDatabasesTableSchemaNameContains,
        ///         TableNames = testTable.Name,
        ///         TableNameContains = targetDatabasesTableTableNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTargetDatabasesTablesResult> Invoke(GetTargetDatabasesTablesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTargetDatabasesTablesResult>("oci:DataSafe/getTargetDatabasesTables:getTargetDatabasesTables", args ?? new GetTargetDatabasesTablesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTargetDatabasesTablesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetTargetDatabasesTablesFilterArgs>? _filters;
        public List<Inputs.GetTargetDatabasesTablesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTargetDatabasesTablesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items if schema name contains a specific string.
        /// </summary>
        [Input("schemaNameContains")]
        public string? SchemaNameContains { get; set; }

        [Input("schemaNames")]
        private List<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public List<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new List<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// A filter to return only items if table name contains a specific string.
        /// </summary>
        [Input("tableNameContains")]
        public string? TableNameContains { get; set; }

        [Input("tableNames")]
        private List<string>? _tableNames;

        /// <summary>
        /// A filter to return only items related to specific table name.
        /// </summary>
        public List<string> TableNames
        {
            get => _tableNames ?? (_tableNames = new List<string>());
            set => _tableNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public string TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabasesTablesArgs()
        {
        }
        public static new GetTargetDatabasesTablesArgs Empty => new GetTargetDatabasesTablesArgs();
    }

    public sealed class GetTargetDatabasesTablesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetTargetDatabasesTablesFilterInputArgs>? _filters;
        public InputList<Inputs.GetTargetDatabasesTablesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTargetDatabasesTablesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only items if schema name contains a specific string.
        /// </summary>
        [Input("schemaNameContains")]
        public Input<string>? SchemaNameContains { get; set; }

        [Input("schemaNames")]
        private InputList<string>? _schemaNames;

        /// <summary>
        /// A filter to return only items related to specific schema name.
        /// </summary>
        public InputList<string> SchemaNames
        {
            get => _schemaNames ?? (_schemaNames = new InputList<string>());
            set => _schemaNames = value;
        }

        /// <summary>
        /// A filter to return only items if table name contains a specific string.
        /// </summary>
        [Input("tableNameContains")]
        public Input<string>? TableNameContains { get; set; }

        [Input("tableNames")]
        private InputList<string>? _tableNames;

        /// <summary>
        /// A filter to return only items related to specific table name.
        /// </summary>
        public InputList<string> TableNames
        {
            get => _tableNames ?? (_tableNames = new InputList<string>());
            set => _tableNames = value;
        }

        /// <summary>
        /// The OCID of the Data Safe target database.
        /// </summary>
        [Input("targetDatabaseId", required: true)]
        public Input<string> TargetDatabaseId { get; set; } = null!;

        public GetTargetDatabasesTablesInvokeArgs()
        {
        }
        public static new GetTargetDatabasesTablesInvokeArgs Empty => new GetTargetDatabasesTablesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTargetDatabasesTablesResult
    {
        public readonly ImmutableArray<Outputs.GetTargetDatabasesTablesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? SchemaNameContains;
        /// <summary>
        /// Name of the schema.
        /// </summary>
        public readonly ImmutableArray<string> SchemaNames;
        public readonly string? TableNameContains;
        /// <summary>
        /// Name of the table.
        /// </summary>
        public readonly ImmutableArray<string> TableNames;
        /// <summary>
        /// The list of tables.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTargetDatabasesTablesTableResult> Tables;
        public readonly string TargetDatabaseId;

        [OutputConstructor]
        private GetTargetDatabasesTablesResult(
            ImmutableArray<Outputs.GetTargetDatabasesTablesFilterResult> filters,

            string id,

            string? schemaNameContains,

            ImmutableArray<string> schemaNames,

            string? tableNameContains,

            ImmutableArray<string> tableNames,

            ImmutableArray<Outputs.GetTargetDatabasesTablesTableResult> tables,

            string targetDatabaseId)
        {
            Filters = filters;
            Id = id;
            SchemaNameContains = schemaNameContains;
            SchemaNames = schemaNames;
            TableNameContains = tableNameContains;
            TableNames = tableNames;
            Tables = tables;
            TargetDatabaseId = targetDatabaseId;
        }
    }
}
