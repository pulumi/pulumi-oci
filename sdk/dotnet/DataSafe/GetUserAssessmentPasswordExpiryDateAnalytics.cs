// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetUserAssessmentPasswordExpiryDateAnalytics
    {
        /// <summary>
        /// This data source provides the list of User Assessment Password Expiry Date Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of count of the users with password expiry dates in next 30 days, between next 30-90 days, and beyond 90 days based on specified user assessment.
        /// It internally uses the aforementioned userAnalytics api.
        /// 
        /// When you perform the ListPasswordExpiryDateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListPasswordExpiryDateAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserAssessmentPasswordExpiryDateAnalytics = Oci.DataSafe.GetUserAssessmentPasswordExpiryDateAnalytics.Invoke(new()
        ///     {
        ///         UserAssessmentId = testUserAssessment.Id,
        ///         AccessLevel = userAssessmentPasswordExpiryDateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = userAssessmentPasswordExpiryDateAnalyticCompartmentIdInSubtree,
        ///         TimePasswordExpiryLessThan = userAssessmentPasswordExpiryDateAnalyticTimePasswordExpiryLessThan,
        ///         UserCategory = userAssessmentPasswordExpiryDateAnalyticUserCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserAssessmentPasswordExpiryDateAnalyticsResult> InvokeAsync(GetUserAssessmentPasswordExpiryDateAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserAssessmentPasswordExpiryDateAnalyticsResult>("oci:DataSafe/getUserAssessmentPasswordExpiryDateAnalytics:getUserAssessmentPasswordExpiryDateAnalytics", args ?? new GetUserAssessmentPasswordExpiryDateAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of User Assessment Password Expiry Date Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of count of the users with password expiry dates in next 30 days, between next 30-90 days, and beyond 90 days based on specified user assessment.
        /// It internally uses the aforementioned userAnalytics api.
        /// 
        /// When you perform the ListPasswordExpiryDateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListPasswordExpiryDateAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserAssessmentPasswordExpiryDateAnalytics = Oci.DataSafe.GetUserAssessmentPasswordExpiryDateAnalytics.Invoke(new()
        ///     {
        ///         UserAssessmentId = testUserAssessment.Id,
        ///         AccessLevel = userAssessmentPasswordExpiryDateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = userAssessmentPasswordExpiryDateAnalyticCompartmentIdInSubtree,
        ///         TimePasswordExpiryLessThan = userAssessmentPasswordExpiryDateAnalyticTimePasswordExpiryLessThan,
        ///         UserCategory = userAssessmentPasswordExpiryDateAnalyticUserCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserAssessmentPasswordExpiryDateAnalyticsResult> Invoke(GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserAssessmentPasswordExpiryDateAnalyticsResult>("oci:DataSafe/getUserAssessmentPasswordExpiryDateAnalytics:getUserAssessmentPasswordExpiryDateAnalytics", args ?? new GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of User Assessment Password Expiry Date Analytics in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of count of the users with password expiry dates in next 30 days, between next 30-90 days, and beyond 90 days based on specified user assessment.
        /// It internally uses the aforementioned userAnalytics api.
        /// 
        /// When you perform the ListPasswordExpiryDateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
        /// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
        /// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
        /// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
        /// compartmentId, then "Not Authorized" is returned.
        /// 
        /// To use ListPasswordExpiryDateAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
        /// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserAssessmentPasswordExpiryDateAnalytics = Oci.DataSafe.GetUserAssessmentPasswordExpiryDateAnalytics.Invoke(new()
        ///     {
        ///         UserAssessmentId = testUserAssessment.Id,
        ///         AccessLevel = userAssessmentPasswordExpiryDateAnalyticAccessLevel,
        ///         CompartmentIdInSubtree = userAssessmentPasswordExpiryDateAnalyticCompartmentIdInSubtree,
        ///         TimePasswordExpiryLessThan = userAssessmentPasswordExpiryDateAnalyticTimePasswordExpiryLessThan,
        ///         UserCategory = userAssessmentPasswordExpiryDateAnalyticUserCategory,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserAssessmentPasswordExpiryDateAnalyticsResult> Invoke(GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserAssessmentPasswordExpiryDateAnalyticsResult>("oci:DataSafe/getUserAssessmentPasswordExpiryDateAnalytics:getUserAssessmentPasswordExpiryDateAnalytics", args ?? new GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserAssessmentPasswordExpiryDateAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs>? _filters;
        public List<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timePasswordExpiryLessThan")]
        public string? TimePasswordExpiryLessThan { get; set; }

        /// <summary>
        /// The OCID of the user assessment.
        /// </summary>
        [Input("userAssessmentId", required: true)]
        public string UserAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only items that match the specified user category.
        /// </summary>
        [Input("userCategory")]
        public string? UserCategory { get; set; }

        public GetUserAssessmentPasswordExpiryDateAnalyticsArgs()
        {
        }
        public static new GetUserAssessmentPasswordExpiryDateAnalyticsArgs Empty => new GetUserAssessmentPasswordExpiryDateAnalyticsArgs();
    }

    public sealed class GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterInputArgs>? _filters;
        public InputList<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
        /// </summary>
        [Input("timePasswordExpiryLessThan")]
        public Input<string>? TimePasswordExpiryLessThan { get; set; }

        /// <summary>
        /// The OCID of the user assessment.
        /// </summary>
        [Input("userAssessmentId", required: true)]
        public Input<string> UserAssessmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only items that match the specified user category.
        /// </summary>
        [Input("userCategory")]
        public Input<string>? UserCategory { get; set; }

        public GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs()
        {
        }
        public static new GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs Empty => new GetUserAssessmentPasswordExpiryDateAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserAssessmentPasswordExpiryDateAnalyticsResult
    {
        public readonly string? AccessLevel;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? TimePasswordExpiryLessThan;
        /// <summary>
        /// The list of user_aggregations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationResult> UserAggregations;
        public readonly string UserAssessmentId;
        public readonly string? UserCategory;

        [OutputConstructor]
        private GetUserAssessmentPasswordExpiryDateAnalyticsResult(
            string? accessLevel,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetUserAssessmentPasswordExpiryDateAnalyticsFilterResult> filters,

            string id,

            string? timePasswordExpiryLessThan,

            ImmutableArray<Outputs.GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationResult> userAggregations,

            string userAssessmentId,

            string? userCategory)
        {
            AccessLevel = accessLevel;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            TimePasswordExpiryLessThan = timePasswordExpiryLessThan;
            UserAggregations = userAggregations;
            UserAssessmentId = userAssessmentId;
            UserCategory = userCategory;
        }
    }
}
