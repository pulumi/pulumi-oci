// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    public static class GetUserAssessmentProfiles
    {
        /// <summary>
        /// This data source provides the list of User Assessment Profiles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of user profiles containing the profile details along with the target id and user counts.
        /// 
        /// The ListProfiles operation returns only the profiles belonging to a certain target. If compartment type user assessment
        /// id is provided, then profile information for all the targets belonging to the pertaining compartment is returned.
        /// The list does not include any subcompartments of the compartment under consideration.
        /// 
        /// The parameter 'accessLevel' specifies whether to return only those compartments for which the requestor has 
        /// INSPECT permissions on at least one resource directly or indirectly (ACCESSIBLE) (the resource can be in a 
        /// subcompartment) or to return Not Authorized if Principal doesn't have access to even one of the child compartments.
        /// This is valid only when 'compartmentIdInSubtree' is set to 'true'.
        /// 
        /// The parameter 'compartmentIdInSubtree' applies when you perform ListUserProfiles on the 'compartmentId' belonging
        /// to the assessmentId passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment), set the parameter
        /// 'compartmentIdInSubtree' to true and 'accessLevel' to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserAssessmentProfiles = Oci.DataSafe.GetUserAssessmentProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         UserAssessmentId = testUserAssessment.Id,
        ///         AccessLevel = userAssessmentProfileAccessLevel,
        ///         CompartmentIdInSubtree = userAssessmentProfileCompartmentIdInSubtree,
        ///         FailedLoginAttemptsGreaterThanOrEqual = userAssessmentProfileFailedLoginAttemptsGreaterThanOrEqual,
        ///         FailedLoginAttemptsLessThan = userAssessmentProfileFailedLoginAttemptsLessThan,
        ///         InactiveAccountTimeGreaterThanOrEqual = userAssessmentProfileInactiveAccountTimeGreaterThanOrEqual,
        ///         InactiveAccountTimeLessThan = userAssessmentProfileInactiveAccountTimeLessThan,
        ///         IsUserCreated = userAssessmentProfileIsUserCreated,
        ///         PasswordLockTimeGreaterThanOrEqual = userAssessmentProfilePasswordLockTimeGreaterThanOrEqual,
        ///         PasswordLockTimeLessThan = userAssessmentProfilePasswordLockTimeLessThan,
        ///         PasswordVerificationFunction = userAssessmentProfilePasswordVerificationFunction,
        ///         ProfileName = testProfile.Name,
        ///         SessionsPerUserGreaterThanOrEqual = userAssessmentProfileSessionsPerUserGreaterThanOrEqual,
        ///         SessionsPerUserLessThan = userAssessmentProfileSessionsPerUserLessThan,
        ///         TargetId = testTarget.Id,
        ///         UserCountGreaterThanOrEqual = userAssessmentProfileUserCountGreaterThanOrEqual,
        ///         UserCountLessThan = userAssessmentProfileUserCountLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetUserAssessmentProfilesResult> InvokeAsync(GetUserAssessmentProfilesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserAssessmentProfilesResult>("oci:DataSafe/getUserAssessmentProfiles:getUserAssessmentProfiles", args ?? new GetUserAssessmentProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of User Assessment Profiles in Oracle Cloud Infrastructure Data Safe service.
        /// 
        /// Gets a list of user profiles containing the profile details along with the target id and user counts.
        /// 
        /// The ListProfiles operation returns only the profiles belonging to a certain target. If compartment type user assessment
        /// id is provided, then profile information for all the targets belonging to the pertaining compartment is returned.
        /// The list does not include any subcompartments of the compartment under consideration.
        /// 
        /// The parameter 'accessLevel' specifies whether to return only those compartments for which the requestor has 
        /// INSPECT permissions on at least one resource directly or indirectly (ACCESSIBLE) (the resource can be in a 
        /// subcompartment) or to return Not Authorized if Principal doesn't have access to even one of the child compartments.
        /// This is valid only when 'compartmentIdInSubtree' is set to 'true'.
        /// 
        /// The parameter 'compartmentIdInSubtree' applies when you perform ListUserProfiles on the 'compartmentId' belonging
        /// to the assessmentId passed and when it is set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment), set the parameter
        /// 'compartmentIdInSubtree' to true and 'accessLevel' to ACCESSIBLE.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserAssessmentProfiles = Oci.DataSafe.GetUserAssessmentProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         UserAssessmentId = testUserAssessment.Id,
        ///         AccessLevel = userAssessmentProfileAccessLevel,
        ///         CompartmentIdInSubtree = userAssessmentProfileCompartmentIdInSubtree,
        ///         FailedLoginAttemptsGreaterThanOrEqual = userAssessmentProfileFailedLoginAttemptsGreaterThanOrEqual,
        ///         FailedLoginAttemptsLessThan = userAssessmentProfileFailedLoginAttemptsLessThan,
        ///         InactiveAccountTimeGreaterThanOrEqual = userAssessmentProfileInactiveAccountTimeGreaterThanOrEqual,
        ///         InactiveAccountTimeLessThan = userAssessmentProfileInactiveAccountTimeLessThan,
        ///         IsUserCreated = userAssessmentProfileIsUserCreated,
        ///         PasswordLockTimeGreaterThanOrEqual = userAssessmentProfilePasswordLockTimeGreaterThanOrEqual,
        ///         PasswordLockTimeLessThan = userAssessmentProfilePasswordLockTimeLessThan,
        ///         PasswordVerificationFunction = userAssessmentProfilePasswordVerificationFunction,
        ///         ProfileName = testProfile.Name,
        ///         SessionsPerUserGreaterThanOrEqual = userAssessmentProfileSessionsPerUserGreaterThanOrEqual,
        ///         SessionsPerUserLessThan = userAssessmentProfileSessionsPerUserLessThan,
        ///         TargetId = testTarget.Id,
        ///         UserCountGreaterThanOrEqual = userAssessmentProfileUserCountGreaterThanOrEqual,
        ///         UserCountLessThan = userAssessmentProfileUserCountLessThan,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetUserAssessmentProfilesResult> Invoke(GetUserAssessmentProfilesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserAssessmentProfilesResult>("oci:DataSafe/getUserAssessmentProfiles:getUserAssessmentProfiles", args ?? new GetUserAssessmentProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserAssessmentProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("failedLoginAttemptsGreaterThanOrEqual")]
        public string? FailedLoginAttemptsGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("failedLoginAttemptsLessThan")]
        public string? FailedLoginAttemptsLessThan { get; set; }

        [Input("filters")]
        private List<Inputs.GetUserAssessmentProfilesFilterArgs>? _filters;
        public List<Inputs.GetUserAssessmentProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUserAssessmentProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("inactiveAccountTimeGreaterThanOrEqual")]
        public string? InactiveAccountTimeGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("inactiveAccountTimeLessThan")]
        public string? InactiveAccountTimeLessThan { get; set; }

        /// <summary>
        /// An optional filter to return the user created profiles.
        /// </summary>
        [Input("isUserCreated")]
        public bool? IsUserCreated { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("passwordLockTimeGreaterThanOrEqual")]
        public string? PasswordLockTimeGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("passwordLockTimeLessThan")]
        public string? PasswordLockTimeLessThan { get; set; }

        /// <summary>
        /// An optional filter to filter the profiles based on password verification function.
        /// </summary>
        [Input("passwordVerificationFunction")]
        public string? PasswordVerificationFunction { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified profile name.
        /// </summary>
        [Input("profileName")]
        public string? ProfileName { get; set; }

        /// <summary>
        /// An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("sessionsPerUserGreaterThanOrEqual")]
        public string? SessionsPerUserGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("sessionsPerUserLessThan")]
        public string? SessionsPerUserLessThan { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public string? TargetId { get; set; }

        /// <summary>
        /// The OCID of the user assessment.
        /// </summary>
        [Input("userAssessmentId", required: true)]
        public string UserAssessmentId { get; set; } = null!;

        /// <summary>
        /// An optional filter to return the profiles having user count greater than or equal to the provided value.
        /// </summary>
        [Input("userCountGreaterThanOrEqual")]
        public string? UserCountGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having user count less than the provided value.
        /// </summary>
        [Input("userCountLessThan")]
        public string? UserCountLessThan { get; set; }

        public GetUserAssessmentProfilesArgs()
        {
        }
        public static new GetUserAssessmentProfilesArgs Empty => new GetUserAssessmentProfilesArgs();
    }

    public sealed class GetUserAssessmentProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("failedLoginAttemptsGreaterThanOrEqual")]
        public Input<string>? FailedLoginAttemptsGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having failed login attempts number less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("failedLoginAttemptsLessThan")]
        public Input<string>? FailedLoginAttemptsLessThan { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetUserAssessmentProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetUserAssessmentProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUserAssessmentProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("inactiveAccountTimeGreaterThanOrEqual")]
        public Input<string>? InactiveAccountTimeGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles  allowing inactive account time in days less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("inactiveAccountTimeLessThan")]
        public Input<string>? InactiveAccountTimeLessThan { get; set; }

        /// <summary>
        /// An optional filter to return the user created profiles.
        /// </summary>
        [Input("isUserCreated")]
        public Input<bool>? IsUserCreated { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having password lock number greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("passwordLockTimeGreaterThanOrEqual")]
        public Input<string>? PasswordLockTimeGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having password lock number less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("passwordLockTimeLessThan")]
        public Input<string>? PasswordLockTimeLessThan { get; set; }

        /// <summary>
        /// An optional filter to filter the profiles based on password verification function.
        /// </summary>
        [Input("passwordVerificationFunction")]
        public Input<string>? PasswordVerificationFunction { get; set; }

        /// <summary>
        /// A filter to return only items that match the specified profile name.
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// An optional filter to return the profiles permitting the user to spawn multiple sessions having count. greater than or equal to the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("sessionsPerUserGreaterThanOrEqual")]
        public Input<string>? SessionsPerUserGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than the provided value. String value is used for accommodating the "UNLIMITED" and "DEFAULT" values.
        /// </summary>
        [Input("sessionsPerUserLessThan")]
        public Input<string>? SessionsPerUserLessThan { get; set; }

        /// <summary>
        /// A filter to return only items related to a specific target OCID.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        /// <summary>
        /// The OCID of the user assessment.
        /// </summary>
        [Input("userAssessmentId", required: true)]
        public Input<string> UserAssessmentId { get; set; } = null!;

        /// <summary>
        /// An optional filter to return the profiles having user count greater than or equal to the provided value.
        /// </summary>
        [Input("userCountGreaterThanOrEqual")]
        public Input<string>? UserCountGreaterThanOrEqual { get; set; }

        /// <summary>
        /// An optional filter to return the profiles having user count less than the provided value.
        /// </summary>
        [Input("userCountLessThan")]
        public Input<string>? UserCountLessThan { get; set; }

        public GetUserAssessmentProfilesInvokeArgs()
        {
        }
        public static new GetUserAssessmentProfilesInvokeArgs Empty => new GetUserAssessmentProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserAssessmentProfilesResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the compartment that contains the user assessment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly string? FailedLoginAttemptsGreaterThanOrEqual;
        public readonly string? FailedLoginAttemptsLessThan;
        public readonly ImmutableArray<Outputs.GetUserAssessmentProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? InactiveAccountTimeGreaterThanOrEqual;
        public readonly string? InactiveAccountTimeLessThan;
        /// <summary>
        /// Represents if the profile is created by user.
        /// </summary>
        public readonly bool? IsUserCreated;
        public readonly string? PasswordLockTimeGreaterThanOrEqual;
        public readonly string? PasswordLockTimeLessThan;
        /// <summary>
        /// Name of the PL/SQL that can be used for password verification.
        /// </summary>
        public readonly string? PasswordVerificationFunction;
        /// <summary>
        /// The name of the profile.
        /// </summary>
        public readonly string? ProfileName;
        /// <summary>
        /// The list of profiles.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserAssessmentProfilesProfileResult> Profiles;
        public readonly string? SessionsPerUserGreaterThanOrEqual;
        public readonly string? SessionsPerUserLessThan;
        /// <summary>
        /// The OCID of the target database.
        /// </summary>
        public readonly string? TargetId;
        /// <summary>
        /// The OCID of the latest user assessment corresponding to the target under consideration. A compartment  type assessment can also be passed to profiles from all the targets from the corresponding compartment.
        /// </summary>
        public readonly string UserAssessmentId;
        public readonly string? UserCountGreaterThanOrEqual;
        public readonly string? UserCountLessThan;

        [OutputConstructor]
        private GetUserAssessmentProfilesResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? failedLoginAttemptsGreaterThanOrEqual,

            string? failedLoginAttemptsLessThan,

            ImmutableArray<Outputs.GetUserAssessmentProfilesFilterResult> filters,

            string id,

            string? inactiveAccountTimeGreaterThanOrEqual,

            string? inactiveAccountTimeLessThan,

            bool? isUserCreated,

            string? passwordLockTimeGreaterThanOrEqual,

            string? passwordLockTimeLessThan,

            string? passwordVerificationFunction,

            string? profileName,

            ImmutableArray<Outputs.GetUserAssessmentProfilesProfileResult> profiles,

            string? sessionsPerUserGreaterThanOrEqual,

            string? sessionsPerUserLessThan,

            string? targetId,

            string userAssessmentId,

            string? userCountGreaterThanOrEqual,

            string? userCountLessThan)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            FailedLoginAttemptsGreaterThanOrEqual = failedLoginAttemptsGreaterThanOrEqual;
            FailedLoginAttemptsLessThan = failedLoginAttemptsLessThan;
            Filters = filters;
            Id = id;
            InactiveAccountTimeGreaterThanOrEqual = inactiveAccountTimeGreaterThanOrEqual;
            InactiveAccountTimeLessThan = inactiveAccountTimeLessThan;
            IsUserCreated = isUserCreated;
            PasswordLockTimeGreaterThanOrEqual = passwordLockTimeGreaterThanOrEqual;
            PasswordLockTimeLessThan = passwordLockTimeLessThan;
            PasswordVerificationFunction = passwordVerificationFunction;
            ProfileName = profileName;
            Profiles = profiles;
            SessionsPerUserGreaterThanOrEqual = sessionsPerUserGreaterThanOrEqual;
            SessionsPerUserLessThan = sessionsPerUserLessThan;
            TargetId = targetId;
            UserAssessmentId = userAssessmentId;
            UserCountGreaterThanOrEqual = userCountGreaterThanOrEqual;
            UserCountLessThan = userCountLessThan;
        }
    }
}
