// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe.Inputs
{

    public sealed class MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The name of the substitution column.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// (Updatable) The description of the format entry.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// (Updatable) The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        /// </summary>
        [Input("endLength")]
        public Input<int>? EndLength { get; set; }

        /// <summary>
        /// (Updatable) The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        /// </summary>
        [Input("endValue")]
        public Input<double>? EndValue { get; set; }

        /// <summary>
        /// (Updatable) The constant number to be used for masking.
        /// </summary>
        [Input("fixedNumber")]
        public Input<double>? FixedNumber { get; set; }

        /// <summary>
        /// (Updatable) The constant string to be used for masking.
        /// </summary>
        [Input("fixedString")]
        public Input<string>? FixedString { get; set; }

        [Input("groupingColumns")]
        private InputList<string>? _groupingColumns;

        /// <summary>
        /// (Updatable) One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        /// </summary>
        public InputList<string> GroupingColumns
        {
            get => _groupingColumns ?? (_groupingColumns = new InputList<string>());
            set => _groupingColumns = value;
        }

        /// <summary>
        /// (Updatable) The number of characters that should be there in the substring. It should be an integer and greater than zero.
        /// </summary>
        [Input("length")]
        public Input<int>? Length { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the library masking format.
        /// </summary>
        [Input("libraryMaskingFormatId")]
        public Input<string>? LibraryMaskingFormatId { get; set; }

        /// <summary>
        /// (Updatable) The pattern that should be used to mask data.
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        /// <summary>
        /// (Updatable) The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        /// </summary>
        [Input("postProcessingFunction")]
        public Input<string>? PostProcessingFunction { get; set; }

        [Input("randomLists")]
        private InputList<string>? _randomLists;

        /// <summary>
        /// (Updatable) A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        /// </summary>
        public InputList<string> RandomLists
        {
            get => _randomLists ?? (_randomLists = new InputList<string>());
            set => _randomLists = value;
        }

        /// <summary>
        /// (Updatable) The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        /// 
        /// In the case of ASCII characters, if a regular expression is not provided,  Deterministic Encryption can encrypt variable-length column values while  preserving their original format.
        /// 
        /// If a regular expression is provided, the column values in all the rows must match  the regular expression. Deterministic Encryption supports a subset of the regular  expression language. It supports encryption of fixed-length strings, and does not  support * or + syntax of regular expressions. The encrypted values also match the  regular expression, which helps to ensure that the original format is preserved.  If an original value does not match the regular expression, Deterministic Encryption  might not produce a one-to-one mapping. All non-confirming values are mapped to a  single encrypted value, thereby producing a many-to-one mapping.
        /// </summary>
        [Input("regularExpression")]
        public Input<string>? RegularExpression { get; set; }

        /// <summary>
        /// (Updatable) The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number, null value, or  SQL expression.
        /// </summary>
        [Input("replaceWith")]
        public Input<string>? ReplaceWith { get; set; }

        /// <summary>
        /// The name of the schema that contains the database column. This attribute cannot be updated for an existing masking column.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// (Updatable) The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%!)(MISSING)  symbols.
        /// </summary>
        [Input("sqlExpression")]
        public Input<string>? SqlExpression { get; set; }

        /// <summary>
        /// (Updatable) The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// (Updatable) The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        /// </summary>
        [Input("startLength")]
        public Input<int>? StartLength { get; set; }

        /// <summary>
        /// (Updatable) The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        /// </summary>
        [Input("startPosition")]
        public Input<int>? StartPosition { get; set; }

        /// <summary>
        /// (Updatable) The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        /// </summary>
        [Input("startValue")]
        public Input<double>? StartValue { get; set; }

        /// <summary>
        /// (Updatable) The name of the table that contains the substitution column.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        /// <summary>
        /// (Updatable) The type of the format entry.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// (Updatable) The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        /// </summary>
        [Input("userDefinedFunction")]
        public Input<string>? UserDefinedFunction { get; set; }

        public MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs()
        {
        }
        public static new MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs Empty => new MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs();
    }
}
