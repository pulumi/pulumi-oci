// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    /// <summary>
    /// This resource provides the Masking Policy resource in Oracle Cloud Infrastructure Data Safe service.
    /// 
    /// Creates a new masking policy and associates it with a sensitive data model or a reference target database.
    /// 
    /// To use a sensitive data model as the source of masking columns, set the columnSource attribute to
    /// SENSITIVE_DATA_MODEL and provide the sensitiveDataModelId attribute. After creating a masking policy,
    /// you can use the AddMaskingColumnsFromSdm operation to automatically add all the columns from
    /// the associated sensitive data model. In this case, the target database associated with the
    /// sensitive data model is used for column and masking format validations.
    /// 
    /// You can also create a masking policy without using a sensitive data model. In this case,
    /// you need to associate your masking policy with a target database by setting the columnSource
    /// attribute to TARGET and providing the targetId attribute. The specified target database
    /// is used for column and masking format validations.
    /// 
    /// After creating a masking policy, you can use the CreateMaskingColumn or PatchMaskingColumns
    /// operation to manually add columns to the policy. You need to add the parent columns only,
    /// and it automatically adds the child columns (in referential relationship with the parent columns)
    /// from the associated sensitive data model or target database.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testMaskingPolicy = new Oci.DataSafe.MaskingPolicy("testMaskingPolicy", new Oci.DataSafe.MaskingPolicyArgs
    ///         {
    ///             ColumnSources = 
    ///             {
    ///                 new Oci.DataSafe.Inputs.MaskingPolicyColumnSourceArgs
    ///                 {
    ///                     ColumnSource = @var.Masking_policy_column_source_column_source,
    ///                     SensitiveDataModelId = oci_data_safe_sensitive_data_model.Test_sensitive_data_model.Id,
    ///                     TargetId = oci_cloud_guard_target.Test_target.Id,
    ///                 },
    ///             },
    ///             CompartmentId = @var.Compartment_id,
    ///             DefinedTags = 
    ///             {
    ///                 { "Operations.CostCenter", "42" },
    ///             },
    ///             Description = @var.Masking_policy_description,
    ///             DisplayName = @var.Masking_policy_display_name,
    ///             FreeformTags = 
    ///             {
    ///                 { "Department", "Finance" },
    ///             },
    ///             IsDropTempTablesEnabled = @var.Masking_policy_is_drop_temp_tables_enabled,
    ///             IsRedoLoggingEnabled = @var.Masking_policy_is_redo_logging_enabled,
    ///             IsRefreshStatsEnabled = @var.Masking_policy_is_refresh_stats_enabled,
    ///             ParallelDegree = @var.Masking_policy_parallel_degree,
    ///             PostMaskingScript = @var.Masking_policy_post_masking_script,
    ///             PreMaskingScript = @var.Masking_policy_pre_masking_script,
    ///             Recompile = @var.Masking_policy_recompile,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// MaskingPolicies can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:DataSafe/maskingPolicy:MaskingPolicy test_masking_policy "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataSafe/maskingPolicy:MaskingPolicy")]
    public partial class MaskingPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
        /// </summary>
        [Output("addMaskingColumnsFromSdmTrigger")]
        public Output<int?> AddMaskingColumnsFromSdmTrigger { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The source of masking columns.
        /// </summary>
        [Output("columnSources")]
        public Output<ImmutableArray<Outputs.MaskingPolicyColumnSource>> ColumnSources { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment where the masking policy should be created.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The description of the masking policy.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        /// </summary>
        [Output("isDropTempTablesEnabled")]
        public Output<bool> IsDropTempTablesEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        /// </summary>
        [Output("isRedoLoggingEnabled")]
        public Output<bool> IsRedoLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        /// </summary>
        [Output("isRefreshStatsEnabled")]
        public Output<bool> IsRefreshStatsEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        /// </summary>
        [Output("parallelDegree")]
        public Output<string> ParallelDegree { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        /// </summary>
        [Output("postMaskingScript")]
        public Output<string> PostMaskingScript { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        /// </summary>
        [Output("preMaskingScript")]
        public Output<string> PreMaskingScript { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used.
        /// </summary>
        [Output("recompile")]
        public Output<string> Recompile { get; private set; } = null!;

        /// <summary>
        /// The current state of the masking policy.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a MaskingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaskingPolicy(string name, MaskingPolicyArgs args, CustomResourceOptions? options = null)
            : base("oci:DataSafe/maskingPolicy:MaskingPolicy", name, args ?? new MaskingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaskingPolicy(string name, Input<string> id, MaskingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataSafe/maskingPolicy:MaskingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaskingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaskingPolicy Get(string name, Input<string> id, MaskingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new MaskingPolicy(name, id, state, options);
        }
    }

    public sealed class MaskingPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
        /// </summary>
        [Input("addMaskingColumnsFromSdmTrigger")]
        public Input<int>? AddMaskingColumnsFromSdmTrigger { get; set; }

        [Input("columnSources", required: true)]
        private InputList<Inputs.MaskingPolicyColumnSourceArgs>? _columnSources;

        /// <summary>
        /// (Updatable) The source of masking columns.
        /// </summary>
        public InputList<Inputs.MaskingPolicyColumnSourceArgs> ColumnSources
        {
            get => _columnSources ?? (_columnSources = new InputList<Inputs.MaskingPolicyColumnSourceArgs>());
            set => _columnSources = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment where the masking policy should be created.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The description of the masking policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        /// </summary>
        [Input("isDropTempTablesEnabled")]
        public Input<bool>? IsDropTempTablesEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        /// </summary>
        [Input("isRedoLoggingEnabled")]
        public Input<bool>? IsRedoLoggingEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        /// </summary>
        [Input("isRefreshStatsEnabled")]
        public Input<bool>? IsRefreshStatsEnabled { get; set; }

        /// <summary>
        /// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        /// </summary>
        [Input("parallelDegree")]
        public Input<string>? ParallelDegree { get; set; }

        /// <summary>
        /// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        /// </summary>
        [Input("postMaskingScript")]
        public Input<string>? PostMaskingScript { get; set; }

        /// <summary>
        /// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        /// </summary>
        [Input("preMaskingScript")]
        public Input<string>? PreMaskingScript { get; set; }

        /// <summary>
        /// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used.
        /// </summary>
        [Input("recompile")]
        public Input<string>? Recompile { get; set; }

        public MaskingPolicyArgs()
        {
        }
    }

    public sealed class MaskingPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
        /// </summary>
        [Input("addMaskingColumnsFromSdmTrigger")]
        public Input<int>? AddMaskingColumnsFromSdmTrigger { get; set; }

        [Input("columnSources")]
        private InputList<Inputs.MaskingPolicyColumnSourceGetArgs>? _columnSources;

        /// <summary>
        /// (Updatable) The source of masking columns.
        /// </summary>
        public InputList<Inputs.MaskingPolicyColumnSourceGetArgs> ColumnSources
        {
            get => _columnSources ?? (_columnSources = new InputList<Inputs.MaskingPolicyColumnSourceGetArgs>());
            set => _columnSources = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment where the masking policy should be created.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The description of the masking policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        /// </summary>
        [Input("isDropTempTablesEnabled")]
        public Input<bool>? IsDropTempTablesEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        /// </summary>
        [Input("isRedoLoggingEnabled")]
        public Input<bool>? IsRedoLoggingEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        /// </summary>
        [Input("isRefreshStatsEnabled")]
        public Input<bool>? IsRefreshStatsEnabled { get; set; }

        /// <summary>
        /// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUsi and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        /// </summary>
        [Input("parallelDegree")]
        public Input<string>? ParallelDegree { get; set; }

        /// <summary>
        /// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        /// </summary>
        [Input("postMaskingScript")]
        public Input<string>? PostMaskingScript { get; set; }

        /// <summary>
        /// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        /// </summary>
        [Input("preMaskingScript")]
        public Input<string>? PreMaskingScript { get; set; }

        /// <summary>
        /// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used.
        /// </summary>
        [Input("recompile")]
        public Input<string>? Recompile { get; set; }

        /// <summary>
        /// The current state of the masking policy.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public MaskingPolicyState()
        {
        }
    }
}
