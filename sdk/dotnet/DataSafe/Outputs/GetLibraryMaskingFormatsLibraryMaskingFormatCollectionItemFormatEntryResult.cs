// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe.Outputs
{

    [OutputType]
    public sealed class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult
    {
        /// <summary>
        /// The name of the substitution column.
        /// </summary>
        public readonly string ColumnName;
        /// <summary>
        /// The description of the format entry.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        /// </summary>
        public readonly string EndDate;
        /// <summary>
        /// The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        /// </summary>
        public readonly int EndLength;
        /// <summary>
        /// The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        /// </summary>
        public readonly double EndValue;
        /// <summary>
        /// The constant number to be used for masking.
        /// </summary>
        public readonly double FixedNumber;
        /// <summary>
        /// The constant string to be used for masking.
        /// </summary>
        public readonly string FixedString;
        /// <summary>
        /// One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        /// </summary>
        public readonly ImmutableArray<string> GroupingColumns;
        /// <summary>
        /// The number of characters that should be there in the substring. It should be an integer and greater than zero.
        /// </summary>
        public readonly int Length;
        /// <summary>
        /// A filter to return only the resources that match the specified library masking format OCID.
        /// </summary>
        public readonly string LibraryMaskingFormatId;
        /// <summary>
        /// The pattern that should be used to mask data.
        /// </summary>
        public readonly string Pattern;
        /// <summary>
        /// The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        /// </summary>
        public readonly string PostProcessingFunction;
        /// <summary>
        /// A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        /// </summary>
        public readonly ImmutableArray<string> RandomLists;
        /// <summary>
        /// The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        /// </summary>
        public readonly string RegularExpression;
        /// <summary>
        /// The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number, null value, or  SQL expression.
        /// </summary>
        public readonly string ReplaceWith;
        /// <summary>
        /// The name of the schema that contains the substitution column.
        /// </summary>
        public readonly string SchemaName;
        /// <summary>
        /// The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%!)(MISSING)  symbols.
        /// </summary>
        public readonly string SqlExpression;
        /// <summary>
        /// The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        /// </summary>
        public readonly string StartDate;
        /// <summary>
        /// The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        /// </summary>
        public readonly int StartLength;
        /// <summary>
        /// The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        /// </summary>
        public readonly int StartPosition;
        /// <summary>
        /// The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        /// </summary>
        public readonly double StartValue;
        /// <summary>
        /// The name of the table that contains the substitution column.
        /// </summary>
        public readonly string TableName;
        /// <summary>
        /// The type of the format entry.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        /// </summary>
        public readonly string UserDefinedFunction;

        [OutputConstructor]
        private GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult(
            string columnName,

            string description,

            string endDate,

            int endLength,

            double endValue,

            double fixedNumber,

            string fixedString,

            ImmutableArray<string> groupingColumns,

            int length,

            string libraryMaskingFormatId,

            string pattern,

            string postProcessingFunction,

            ImmutableArray<string> randomLists,

            string regularExpression,

            string replaceWith,

            string schemaName,

            string sqlExpression,

            string startDate,

            int startLength,

            int startPosition,

            double startValue,

            string tableName,

            string type,

            string userDefinedFunction)
        {
            ColumnName = columnName;
            Description = description;
            EndDate = endDate;
            EndLength = endLength;
            EndValue = endValue;
            FixedNumber = fixedNumber;
            FixedString = fixedString;
            GroupingColumns = groupingColumns;
            Length = length;
            LibraryMaskingFormatId = libraryMaskingFormatId;
            Pattern = pattern;
            PostProcessingFunction = postProcessingFunction;
            RandomLists = randomLists;
            RegularExpression = regularExpression;
            ReplaceWith = replaceWith;
            SchemaName = schemaName;
            SqlExpression = sqlExpression;
            StartDate = startDate;
            StartLength = startLength;
            StartPosition = startPosition;
            StartValue = startValue;
            TableName = tableName;
            Type = type;
            UserDefinedFunction = userDefinedFunction;
        }
    }
}
