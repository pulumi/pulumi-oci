// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataSafe
{
    /// <summary>
    /// This resource provides the Sensitive Data Models Sensitive Column resource in Oracle Cloud Infrastructure Data Safe service.
    /// 
    /// Creates a new sensitive column in the specified sensitive data model.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSensitiveDataModelsSensitiveColumn = new Oci.DataSafe.SensitiveDataModelsSensitiveColumn("testSensitiveDataModelsSensitiveColumn", new()
    ///     {
    ///         ColumnName = @var.Sensitive_data_models_sensitive_column_column_name,
    ///         Object = @var.Sensitive_data_models_sensitive_column_object,
    ///         SchemaName = @var.Sensitive_data_models_sensitive_column_schema_name,
    ///         SensitiveDataModelId = oci_data_safe_sensitive_data_model.Test_sensitive_data_model.Id,
    ///         AppDefinedChildColumnKeys = @var.Sensitive_data_models_sensitive_column_app_defined_child_column_keys,
    ///         AppName = @var.Sensitive_data_models_sensitive_column_app_name,
    ///         DataType = @var.Sensitive_data_models_sensitive_column_data_type,
    ///         DbDefinedChildColumnKeys = @var.Sensitive_data_models_sensitive_column_db_defined_child_column_keys,
    ///         ObjectType = @var.Sensitive_data_models_sensitive_column_object_type,
    ///         ParentColumnKeys = @var.Sensitive_data_models_sensitive_column_parent_column_keys,
    ///         RelationType = @var.Sensitive_data_models_sensitive_column_relation_type,
    ///         SensitiveTypeId = oci_data_safe_sensitive_type.Test_sensitive_type.Id,
    ///         Status = @var.Sensitive_data_models_sensitive_column_status,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// SensitiveDataModelsSensitiveColumns can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn test_sensitive_data_models_sensitive_column "sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn")]
    public partial class SensitiveDataModelsSensitiveColumn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        [Output("appDefinedChildColumnKeys")]
        public Output<ImmutableArray<string>> AppDefinedChildColumnKeys { get; private set; } = null!;

        /// <summary>
        /// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
        /// </summary>
        [Output("columnGroups")]
        public Output<ImmutableArray<string>> ColumnGroups { get; private set; } = null!;

        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        [Output("columnName")]
        public Output<string> ColumnName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The data type of the sensitive column.
        /// </summary>
        [Output("dataType")]
        public Output<string> DataType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        [Output("dbDefinedChildColumnKeys")]
        public Output<ImmutableArray<string>> DbDefinedChildColumnKeys { get; private set; } = null!;

        /// <summary>
        /// The estimated number of data values the column has in the associated database.
        /// </summary>
        [Output("estimatedDataValueCount")]
        public Output<string> EstimatedDataValueCount { get; private set; } = null!;

        /// <summary>
        /// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Details about the current state of the sensitive column.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// The type of the database object that contains the sensitive column.
        /// </summary>
        [Output("objectType")]
        public Output<string> ObjectType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
        /// </summary>
        [Output("parentColumnKeys")]
        public Output<ImmutableArray<string>> ParentColumnKeys { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        [Output("relationType")]
        public Output<string> RelationType { get; private set; } = null!;

        /// <summary>
        /// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        /// </summary>
        [Output("sampleDataValues")]
        public Output<ImmutableArray<string>> SampleDataValues { get; private set; } = null!;

        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;

        /// <summary>
        /// The OCID of the sensitive data model.
        /// </summary>
        [Output("sensitiveDataModelId")]
        public Output<string> SensitiveDataModelId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
        /// </summary>
        [Output("sensitiveTypeId")]
        public Output<string> SensitiveTypeId { get; private set; } = null!;

        /// <summary>
        /// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// The current state of the sensitive column.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a SensitiveDataModelsSensitiveColumn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SensitiveDataModelsSensitiveColumn(string name, SensitiveDataModelsSensitiveColumnArgs args, CustomResourceOptions? options = null)
            : base("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, args ?? new SensitiveDataModelsSensitiveColumnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SensitiveDataModelsSensitiveColumn(string name, Input<string> id, SensitiveDataModelsSensitiveColumnState? state = null, CustomResourceOptions? options = null)
            : base("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SensitiveDataModelsSensitiveColumn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SensitiveDataModelsSensitiveColumn Get(string name, Input<string> id, SensitiveDataModelsSensitiveColumnState? state = null, CustomResourceOptions? options = null)
        {
            return new SensitiveDataModelsSensitiveColumn(name, id, state, options);
        }
    }

    public sealed class SensitiveDataModelsSensitiveColumnArgs : global::Pulumi.ResourceArgs
    {
        [Input("appDefinedChildColumnKeys")]
        private InputList<string>? _appDefinedChildColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> AppDefinedChildColumnKeys
        {
            get => _appDefinedChildColumnKeys ?? (_appDefinedChildColumnKeys = new InputList<string>());
            set => _appDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        [Input("columnName", required: true)]
        public Input<string> ColumnName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The data type of the sensitive column.
        /// </summary>
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        [Input("dbDefinedChildColumnKeys")]
        private InputList<string>? _dbDefinedChildColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> DbDefinedChildColumnKeys
        {
            get => _dbDefinedChildColumnKeys ?? (_dbDefinedChildColumnKeys = new InputList<string>());
            set => _dbDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        [Input("object", required: true)]
        public Input<string> Object { get; set; } = null!;

        /// <summary>
        /// The type of the database object that contains the sensitive column.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        [Input("parentColumnKeys")]
        private InputList<string>? _parentColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> ParentColumnKeys
        {
            get => _parentColumnKeys ?? (_parentColumnKeys = new InputList<string>());
            set => _parentColumnKeys = value;
        }

        /// <summary>
        /// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        [Input("relationType")]
        public Input<string>? RelationType { get; set; }

        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        [Input("schemaName", required: true)]
        public Input<string> SchemaName { get; set; } = null!;

        /// <summary>
        /// The OCID of the sensitive data model.
        /// </summary>
        [Input("sensitiveDataModelId", required: true)]
        public Input<string> SensitiveDataModelId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
        /// </summary>
        [Input("sensitiveTypeId")]
        public Input<string>? SensitiveTypeId { get; set; }

        /// <summary>
        /// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SensitiveDataModelsSensitiveColumnArgs()
        {
        }
        public static new SensitiveDataModelsSensitiveColumnArgs Empty => new SensitiveDataModelsSensitiveColumnArgs();
    }

    public sealed class SensitiveDataModelsSensitiveColumnState : global::Pulumi.ResourceArgs
    {
        [Input("appDefinedChildColumnKeys")]
        private InputList<string>? _appDefinedChildColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> AppDefinedChildColumnKeys
        {
            get => _appDefinedChildColumnKeys ?? (_appDefinedChildColumnKeys = new InputList<string>());
            set => _appDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        [Input("columnGroups")]
        private InputList<string>? _columnGroups;

        /// <summary>
        /// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
        /// </summary>
        public InputList<string> ColumnGroups
        {
            get => _columnGroups ?? (_columnGroups = new InputList<string>());
            set => _columnGroups = value;
        }

        /// <summary>
        /// The name of the sensitive column.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// (Updatable) The data type of the sensitive column.
        /// </summary>
        [Input("dataType")]
        public Input<string>? DataType { get; set; }

        [Input("dbDefinedChildColumnKeys")]
        private InputList<string>? _dbDefinedChildColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> DbDefinedChildColumnKeys
        {
            get => _dbDefinedChildColumnKeys ?? (_dbDefinedChildColumnKeys = new InputList<string>());
            set => _dbDefinedChildColumnKeys = value;
        }

        /// <summary>
        /// The estimated number of data values the column has in the associated database.
        /// </summary>
        [Input("estimatedDataValueCount")]
        public Input<string>? EstimatedDataValueCount { get; set; }

        /// <summary>
        /// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Details about the current state of the sensitive column.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The database object that contains the sensitive column.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// The type of the database object that contains the sensitive column.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        [Input("parentColumnKeys")]
        private InputList<string>? _parentColumnKeys;

        /// <summary>
        /// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
        /// </summary>
        public InputList<string> ParentColumnKeys
        {
            get => _parentColumnKeys ?? (_parentColumnKeys = new InputList<string>());
            set => _parentColumnKeys = value;
        }

        /// <summary>
        /// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        /// </summary>
        [Input("relationType")]
        public Input<string>? RelationType { get; set; }

        [Input("sampleDataValues")]
        private InputList<string>? _sampleDataValues;

        /// <summary>
        /// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        /// </summary>
        public InputList<string> SampleDataValues
        {
            get => _sampleDataValues ?? (_sampleDataValues = new InputList<string>());
            set => _sampleDataValues = value;
        }

        /// <summary>
        /// The database schema that contains the sensitive column.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        /// <summary>
        /// The OCID of the sensitive data model.
        /// </summary>
        [Input("sensitiveDataModelId")]
        public Input<string>? SensitiveDataModelId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
        /// </summary>
        [Input("sensitiveTypeId")]
        public Input<string>? SensitiveTypeId { get; set; }

        /// <summary>
        /// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The current state of the sensitive column.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public SensitiveDataModelsSensitiveColumnState()
        {
        }
        public static new SensitiveDataModelsSensitiveColumnState Empty => new SensitiveDataModelsSensitiveColumnState();
    }
}
