// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataScience
{
    public static class GetContainers
    {
        /// <summary>
        /// This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
        /// 
        /// List containers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainers = Oci.DataScience.GetContainers.Invoke(new()
        ///     {
        ///         ContainerName = testContainer.Name,
        ///         DisplayName = containerDisplayName,
        ///         IsLatest = containerIsLatest,
        ///         State = containerState,
        ///         TagQueryParam = containerTagQueryParam,
        ///         TargetWorkload = containerTargetWorkload,
        ///         UsageQueryParam = containerUsageQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainersResult> InvokeAsync(GetContainersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainersResult>("oci:DataScience/getContainers:getContainers", args ?? new GetContainersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
        /// 
        /// List containers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainers = Oci.DataScience.GetContainers.Invoke(new()
        ///     {
        ///         ContainerName = testContainer.Name,
        ///         DisplayName = containerDisplayName,
        ///         IsLatest = containerIsLatest,
        ///         State = containerState,
        ///         TagQueryParam = containerTagQueryParam,
        ///         TargetWorkload = containerTargetWorkload,
        ///         UsageQueryParam = containerUsageQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainersResult> Invoke(GetContainersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainersResult>("oci:DataScience/getContainers:getContainers", args ?? new GetContainersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
        /// 
        /// List containers.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainers = Oci.DataScience.GetContainers.Invoke(new()
        ///     {
        ///         ContainerName = testContainer.Name,
        ///         DisplayName = containerDisplayName,
        ///         IsLatest = containerIsLatest,
        ///         State = containerState,
        ///         TagQueryParam = containerTagQueryParam,
        ///         TargetWorkload = containerTargetWorkload,
        ///         UsageQueryParam = containerUsageQueryParam,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainersResult> Invoke(GetContainersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainersResult>("oci:DataScience/getContainers:getContainers", args ?? new GetContainersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the container name.
        /// </summary>
        [Input("containerName")]
        public string? ContainerName { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by its user-friendly name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetContainersFilterArgs>? _filters;
        public List<Inputs.GetContainersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// if true, this returns latest version of container.
        /// </summary>
        [Input("isLatest")]
        public bool? IsLatest { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the container version tag.
        /// </summary>
        [Input("tagQueryParam")]
        public string? TagQueryParam { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the target workload.
        /// </summary>
        [Input("targetWorkload")]
        public string? TargetWorkload { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the usage.
        /// </summary>
        [Input("usageQueryParam")]
        public string? UsageQueryParam { get; set; }

        public GetContainersArgs()
        {
        }
        public static new GetContainersArgs Empty => new GetContainersArgs();
    }

    public sealed class GetContainersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the container name.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by its user-friendly name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetContainersFilterInputArgs>? _filters;
        public InputList<Inputs.GetContainersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// if true, this returns latest version of container.
        /// </summary>
        [Input("isLatest")]
        public Input<bool>? IsLatest { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the specified lifecycle state. Must be a valid state for the resource type.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the container version tag.
        /// </summary>
        [Input("tagQueryParam")]
        public Input<string>? TagQueryParam { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the target workload.
        /// </summary>
        [Input("targetWorkload")]
        public Input<string>? TargetWorkload { get; set; }

        /// <summary>
        /// &lt;b&gt;Filter&lt;/b&gt; results by the usage.
        /// </summary>
        [Input("usageQueryParam")]
        public Input<string>? UsageQueryParam { get; set; }

        public GetContainersInvokeArgs()
        {
        }
        public static new GetContainersInvokeArgs Empty => new GetContainersInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainersResult
    {
        /// <summary>
        /// The name of the container. This can be same for different tags
        /// </summary>
        public readonly string? ContainerName;
        /// <summary>
        /// The list of containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainersContainerResult> Containers;
        /// <summary>
        /// The display name of the container.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetContainersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The latest tag of the container.
        /// </summary>
        public readonly bool? IsLatest;
        /// <summary>
        /// Container Version LifecycleState.
        /// </summary>
        public readonly string? State;
        public readonly string? TagQueryParam;
        public readonly string? TargetWorkload;
        public readonly string? UsageQueryParam;

        [OutputConstructor]
        private GetContainersResult(
            string? containerName,

            ImmutableArray<Outputs.GetContainersContainerResult> containers,

            string? displayName,

            ImmutableArray<Outputs.GetContainersFilterResult> filters,

            string id,

            bool? isLatest,

            string? state,

            string? tagQueryParam,

            string? targetWorkload,

            string? usageQueryParam)
        {
            ContainerName = containerName;
            Containers = containers;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            IsLatest = isLatest;
            State = state;
            TagQueryParam = tagQueryParam;
            TargetWorkload = targetWorkload;
            UsageQueryParam = usageQueryParam;
        }
    }
}
