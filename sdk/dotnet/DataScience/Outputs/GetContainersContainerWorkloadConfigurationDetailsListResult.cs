// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DataScience.Outputs
{

    [OutputType]
    public sealed class GetContainersContainerWorkloadConfigurationDetailsListResult
    {
        /// <summary>
        /// The additional configurations
        /// </summary>
        public readonly ImmutableDictionary<string, string> AdditionalConfigurations;
        /// <summary>
        /// The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        /// </summary>
        public readonly string Cmd;
        /// <summary>
        /// The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        /// </summary>
        public readonly int HealthCheckPort;
        /// <summary>
        /// The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        /// </summary>
        public readonly int ServerPort;
        /// <summary>
        /// The use-case configuration details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult> UseCaseConfigurations;
        /// <summary>
        /// The workload use case.
        /// </summary>
        public readonly string WorkloadType;

        [OutputConstructor]
        private GetContainersContainerWorkloadConfigurationDetailsListResult(
            ImmutableDictionary<string, string> additionalConfigurations,

            string cmd,

            int healthCheckPort,

            int serverPort,

            ImmutableArray<Outputs.GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult> useCaseConfigurations,

            string workloadType)
        {
            AdditionalConfigurations = additionalConfigurations;
            Cmd = cmd;
            HealthCheckPort = healthCheckPort;
            ServerPort = serverPort;
            UseCaseConfigurations = useCaseConfigurations;
            WorkloadType = workloadType;
        }
    }
}
