// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    /// <summary>
    /// This resource provides the Autonomous Database Instance Wallet Management resource in Oracle Cloud Infrastructure Database service.
    /// 
    /// Updates the wallet for the specified Autonomous Database.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAutonomousDatabaseInstanceWalletManagement = new Oci.Database.AutonomousDatabaseInstanceWalletManagement("testAutonomousDatabaseInstanceWalletManagement", new()
    ///     {
    ///         AutonomousDatabaseId = oci_database_autonomous_database.Test_autonomous_database.Id,
    ///         GracePeriod = @var.Autonomous_database_instance_wallet_management_grace_period,
    ///         ShouldRotate = @var.Autonomous_database_instance_wallet_management_should_rotate,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [OciResourceType("oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement")]
    public partial class AutonomousDatabaseInstanceWalletManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Output("autonomousDatabaseId")]
        public Output<string> AutonomousDatabaseId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Grace period in hours to keep the existing wallet valid after rotation.
        /// </summary>
        [Output("gracePeriod")]
        public Output<int> GracePeriod { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Output("shouldRotate")]
        public Output<bool?> ShouldRotate { get; private set; } = null!;

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Output("timeRotated")]
        public Output<string> TimeRotated { get; private set; } = null!;


        /// <summary>
        /// Create a AutonomousDatabaseInstanceWalletManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutonomousDatabaseInstanceWalletManagement(string name, AutonomousDatabaseInstanceWalletManagementArgs args, CustomResourceOptions? options = null)
            : base("oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement", name, args ?? new AutonomousDatabaseInstanceWalletManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutonomousDatabaseInstanceWalletManagement(string name, Input<string> id, AutonomousDatabaseInstanceWalletManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutonomousDatabaseInstanceWalletManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutonomousDatabaseInstanceWalletManagement Get(string name, Input<string> id, AutonomousDatabaseInstanceWalletManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new AutonomousDatabaseInstanceWalletManagement(name, id, state, options);
        }
    }

    public sealed class AutonomousDatabaseInstanceWalletManagementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("autonomousDatabaseId", required: true)]
        public Input<string> AutonomousDatabaseId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Grace period in hours to keep the existing wallet valid after rotation.
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        public AutonomousDatabaseInstanceWalletManagementArgs()
        {
        }
        public static new AutonomousDatabaseInstanceWalletManagementArgs Empty => new AutonomousDatabaseInstanceWalletManagementArgs();
    }

    public sealed class AutonomousDatabaseInstanceWalletManagementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("autonomousDatabaseId")]
        public Input<string>? AutonomousDatabaseId { get; set; }

        /// <summary>
        /// (Updatable) Grace period in hours to keep the existing wallet valid after rotation.
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Input("timeRotated")]
        public Input<string>? TimeRotated { get; set; }

        public AutonomousDatabaseInstanceWalletManagementState()
        {
        }
        public static new AutonomousDatabaseInstanceWalletManagementState Empty => new AutonomousDatabaseInstanceWalletManagementState();
    }
}
