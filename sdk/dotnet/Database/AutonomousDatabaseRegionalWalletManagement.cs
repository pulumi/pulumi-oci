// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    /// <summary>
    /// This resource provides the Autonomous Database Regional Wallet Management resource in Oracle Cloud Infrastructure Database service.
    /// 
    /// Updates the Autonomous Database regional wallet.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAutonomousDatabaseRegionalWalletManagement = new Oci.Database.AutonomousDatabaseRegionalWalletManagement("testAutonomousDatabaseRegionalWalletManagement", new()
    ///     {
    ///         GracePeriod = @var.Autonomous_database_regional_wallet_management_grace_period,
    ///         ShouldRotate = @var.Autonomous_database_regional_wallet_management_should_rotate,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [OciResourceType("oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement")]
    public partial class AutonomousDatabaseRegionalWalletManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
        /// </summary>
        [Output("gracePeriod")]
        public Output<int> GracePeriod { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("shouldRotate")]
        public Output<bool?> ShouldRotate { get; private set; } = null!;

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Output("timeRotated")]
        public Output<string> TimeRotated { get; private set; } = null!;


        /// <summary>
        /// Create a AutonomousDatabaseRegionalWalletManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutonomousDatabaseRegionalWalletManagement(string name, AutonomousDatabaseRegionalWalletManagementArgs? args = null, CustomResourceOptions? options = null)
            : base("oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement", name, args ?? new AutonomousDatabaseRegionalWalletManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutonomousDatabaseRegionalWalletManagement(string name, Input<string> id, AutonomousDatabaseRegionalWalletManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutonomousDatabaseRegionalWalletManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutonomousDatabaseRegionalWalletManagement Get(string name, Input<string> id, AutonomousDatabaseRegionalWalletManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new AutonomousDatabaseRegionalWalletManagement(name, id, state, options);
        }
    }

    public sealed class AutonomousDatabaseRegionalWalletManagementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        public AutonomousDatabaseRegionalWalletManagementArgs()
        {
        }
        public static new AutonomousDatabaseRegionalWalletManagementArgs Empty => new AutonomousDatabaseRegionalWalletManagementArgs();
    }

    public sealed class AutonomousDatabaseRegionalWalletManagementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Input("timeRotated")]
        public Input<string>? TimeRotated { get; set; }

        public AutonomousDatabaseRegionalWalletManagementState()
        {
        }
        public static new AutonomousDatabaseRegionalWalletManagementState Empty => new AutonomousDatabaseRegionalWalletManagementState();
    }
}
