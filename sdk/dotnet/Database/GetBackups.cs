// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetBackups
    {
        /// <summary>
        /// This data source provides the list of Backups in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of backups based on the `databaseId` or `compartmentId` specified. Either one of these query parameters must be provided.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBackups = Oci.Database.GetBackups.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DatabaseId = oci_database_database.Test_database.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBackupsResult> InvokeAsync(GetBackupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupsResult>("oci:Database/getBackups:getBackups", args ?? new GetBackupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Backups in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of backups based on the `databaseId` or `compartmentId` specified. Either one of these query parameters must be provided.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBackups = Oci.Database.GetBackups.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DatabaseId = oci_database_database.Test_database.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBackupsResult> Invoke(GetBackupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupsResult>("oci:Database/getBackups:getBackups", args ?? new GetBackupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Input("databaseId")]
        public string? DatabaseId { get; set; }

        [Input("filters")]
        private List<Inputs.GetBackupsFilterArgs>? _filters;
        public List<Inputs.GetBackupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBackupsFilterArgs>());
            set => _filters = value;
        }

        public GetBackupsArgs()
        {
        }
        public static new GetBackupsArgs Empty => new GetBackupsArgs();
    }

    public sealed class GetBackupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetBackupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetBackupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBackupsFilterInputArgs>());
            set => _filters = value;
        }

        public GetBackupsInvokeArgs()
        {
        }
        public static new GetBackupsInvokeArgs Empty => new GetBackupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupsResult
    {
        /// <summary>
        /// The list of backups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupsBackupResult> Backups;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        public readonly string? DatabaseId;
        public readonly ImmutableArray<Outputs.GetBackupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetBackupsResult(
            ImmutableArray<Outputs.GetBackupsBackupResult> backups,

            string? compartmentId,

            string? databaseId,

            ImmutableArray<Outputs.GetBackupsFilterResult> filters,

            string id)
        {
            Backups = backups;
            CompartmentId = compartmentId;
            DatabaseId = databaseId;
            Filters = filters;
            Id = id;
        }
    }
}
