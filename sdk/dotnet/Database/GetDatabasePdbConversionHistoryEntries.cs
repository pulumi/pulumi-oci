// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetDatabasePdbConversionHistoryEntries
    {
        /// <summary>
        /// This data source provides the list of Database Pdb Conversion History Entries in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets the pluggable database conversion history for a specified database in a bare metal or virtual machine DB system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabasePdbConversionHistoryEntries = Oci.Database.GetDatabasePdbConversionHistoryEntries.Invoke(new()
        ///     {
        ///         DatabaseId = oci_database_database.Test_database.Id,
        ///         PdbConversionAction = @var.Database_pdb_conversion_history_entry_pdb_conversion_action,
        ///         State = @var.Database_pdb_conversion_history_entry_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabasePdbConversionHistoryEntriesResult> InvokeAsync(GetDatabasePdbConversionHistoryEntriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabasePdbConversionHistoryEntriesResult>("oci:Database/getDatabasePdbConversionHistoryEntries:getDatabasePdbConversionHistoryEntries", args ?? new GetDatabasePdbConversionHistoryEntriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Database Pdb Conversion History Entries in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets the pluggable database conversion history for a specified database in a bare metal or virtual machine DB system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabasePdbConversionHistoryEntries = Oci.Database.GetDatabasePdbConversionHistoryEntries.Invoke(new()
        ///     {
        ///         DatabaseId = oci_database_database.Test_database.Id,
        ///         PdbConversionAction = @var.Database_pdb_conversion_history_entry_pdb_conversion_action,
        ///         State = @var.Database_pdb_conversion_history_entry_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabasePdbConversionHistoryEntriesResult> Invoke(GetDatabasePdbConversionHistoryEntriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasePdbConversionHistoryEntriesResult>("oci:Database/getDatabasePdbConversionHistoryEntries:getDatabasePdbConversionHistoryEntries", args ?? new GetDatabasePdbConversionHistoryEntriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabasePdbConversionHistoryEntriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDatabasePdbConversionHistoryEntriesFilterArgs>? _filters;
        public List<Inputs.GetDatabasePdbConversionHistoryEntriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabasePdbConversionHistoryEntriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the pluggable database conversion history entries that match the specified conversion action. For example, you can use this filter to return only entries for the precheck operation.
        /// </summary>
        [Input("pdbConversionAction")]
        public string? PdbConversionAction { get; set; }

        /// <summary>
        /// A filter to return only the pluggable database conversion history entries that match the specified lifecycle state. For example, you can use this filter to return only entries in the "failed" lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDatabasePdbConversionHistoryEntriesArgs()
        {
        }
        public static new GetDatabasePdbConversionHistoryEntriesArgs Empty => new GetDatabasePdbConversionHistoryEntriesArgs();
    }

    public sealed class GetDatabasePdbConversionHistoryEntriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDatabasePdbConversionHistoryEntriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabasePdbConversionHistoryEntriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabasePdbConversionHistoryEntriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the pluggable database conversion history entries that match the specified conversion action. For example, you can use this filter to return only entries for the precheck operation.
        /// </summary>
        [Input("pdbConversionAction")]
        public Input<string>? PdbConversionAction { get; set; }

        /// <summary>
        /// A filter to return only the pluggable database conversion history entries that match the specified lifecycle state. For example, you can use this filter to return only entries in the "failed" lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDatabasePdbConversionHistoryEntriesInvokeArgs()
        {
        }
        public static new GetDatabasePdbConversionHistoryEntriesInvokeArgs Empty => new GetDatabasePdbConversionHistoryEntriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabasePdbConversionHistoryEntriesResult
    {
        public readonly string DatabaseId;
        public readonly ImmutableArray<Outputs.GetDatabasePdbConversionHistoryEntriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? PdbConversionAction;
        /// <summary>
        /// The list of pdb_conversion_history_entries.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntryResult> PdbConversionHistoryEntries;
        /// <summary>
        /// Status of an operation performed during the conversion of a non-container database to a pluggable database.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDatabasePdbConversionHistoryEntriesResult(
            string databaseId,

            ImmutableArray<Outputs.GetDatabasePdbConversionHistoryEntriesFilterResult> filters,

            string id,

            string? pdbConversionAction,

            ImmutableArray<Outputs.GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntryResult> pdbConversionHistoryEntries,

            string? state)
        {
            DatabaseId = databaseId;
            Filters = filters;
            Id = id;
            PdbConversionAction = pdbConversionAction;
            PdbConversionHistoryEntries = pdbConversionHistoryEntries;
            State = state;
        }
    }
}
