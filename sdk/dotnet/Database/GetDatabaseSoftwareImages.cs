// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetDatabaseSoftwareImages
    {
        /// <summary>
        /// This data source provides the list of Database Software Images in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the database software images in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSoftwareImages = Oci.Database.GetDatabaseSoftwareImages.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DbSystemId = testDbSystem.Id,
        ///         DisplayName = databaseSoftwareImageDisplayName,
        ///         ImageShapeFamily = databaseSoftwareImageImageShapeFamily,
        ///         ImageType = databaseSoftwareImageImageType,
        ///         IsUpgradeSupported = databaseSoftwareImageIsUpgradeSupported,
        ///         State = databaseSoftwareImageState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseSoftwareImagesResult> InvokeAsync(GetDatabaseSoftwareImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseSoftwareImagesResult>("oci:Database/getDatabaseSoftwareImages:getDatabaseSoftwareImages", args ?? new GetDatabaseSoftwareImagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Database Software Images in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the database software images in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSoftwareImages = Oci.Database.GetDatabaseSoftwareImages.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DbSystemId = testDbSystem.Id,
        ///         DisplayName = databaseSoftwareImageDisplayName,
        ///         ImageShapeFamily = databaseSoftwareImageImageShapeFamily,
        ///         ImageType = databaseSoftwareImageImageType,
        ///         IsUpgradeSupported = databaseSoftwareImageIsUpgradeSupported,
        ///         State = databaseSoftwareImageState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSoftwareImagesResult> Invoke(GetDatabaseSoftwareImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSoftwareImagesResult>("oci:Database/getDatabaseSoftwareImages:getDatabaseSoftwareImages", args ?? new GetDatabaseSoftwareImagesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Database Software Images in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the database software images in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseSoftwareImages = Oci.Database.GetDatabaseSoftwareImages.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DbSystemId = testDbSystem.Id,
        ///         DisplayName = databaseSoftwareImageDisplayName,
        ///         ImageShapeFamily = databaseSoftwareImageImageShapeFamily,
        ///         ImageType = databaseSoftwareImageImageType,
        ///         IsUpgradeSupported = databaseSoftwareImageIsUpgradeSupported,
        ///         State = databaseSoftwareImageState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseSoftwareImagesResult> Invoke(GetDatabaseSoftwareImagesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseSoftwareImagesResult>("oci:Database/getDatabaseSoftwareImages:getDatabaseSoftwareImages", args ?? new GetDatabaseSoftwareImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseSoftwareImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
        /// </summary>
        [Input("dbSystemId")]
        public string? DbSystemId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatabaseSoftwareImagesFilterArgs>? _filters;
        public List<Inputs.GetDatabaseSoftwareImagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabaseSoftwareImagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given image shape family exactly.
        /// </summary>
        [Input("imageShapeFamily")]
        public string? ImageShapeFamily { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given image type exactly.
        /// </summary>
        [Input("imageType")]
        public string? ImageType { get; set; }

        /// <summary>
        /// If provided, filters the results to the set of database versions which are supported for Upgrade.
        /// </summary>
        [Input("isUpgradeSupported")]
        public bool? IsUpgradeSupported { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDatabaseSoftwareImagesArgs()
        {
        }
        public static new GetDatabaseSoftwareImagesArgs Empty => new GetDatabaseSoftwareImagesArgs();
    }

    public sealed class GetDatabaseSoftwareImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDatabaseSoftwareImagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabaseSoftwareImagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabaseSoftwareImagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given image shape family exactly.
        /// </summary>
        [Input("imageShapeFamily")]
        public Input<string>? ImageShapeFamily { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given image type exactly.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        /// <summary>
        /// If provided, filters the results to the set of database versions which are supported for Upgrade.
        /// </summary>
        [Input("isUpgradeSupported")]
        public Input<bool>? IsUpgradeSupported { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDatabaseSoftwareImagesInvokeArgs()
        {
        }
        public static new GetDatabaseSoftwareImagesInvokeArgs Empty => new GetDatabaseSoftwareImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseSoftwareImagesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of database_software_images.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseSoftwareImagesDatabaseSoftwareImageResult> DatabaseSoftwareImages;
        public readonly string? DbSystemId;
        /// <summary>
        /// The user-friendly name for the database software image. The name does not have to be unique.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDatabaseSoftwareImagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// To what shape the image is meant for.
        /// </summary>
        public readonly string? ImageShapeFamily;
        /// <summary>
        /// The type of software image. Can be grid or database.
        /// </summary>
        public readonly string? ImageType;
        /// <summary>
        /// True if this Database software image is supported for Upgrade.
        /// </summary>
        public readonly bool? IsUpgradeSupported;
        /// <summary>
        /// The current state of the database software image.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDatabaseSoftwareImagesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetDatabaseSoftwareImagesDatabaseSoftwareImageResult> databaseSoftwareImages,

            string? dbSystemId,

            string? displayName,

            ImmutableArray<Outputs.GetDatabaseSoftwareImagesFilterResult> filters,

            string id,

            string? imageShapeFamily,

            string? imageType,

            bool? isUpgradeSupported,

            string? state)
        {
            CompartmentId = compartmentId;
            DatabaseSoftwareImages = databaseSoftwareImages;
            DbSystemId = dbSystemId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ImageShapeFamily = imageShapeFamily;
            ImageType = imageType;
            IsUpgradeSupported = isUpgradeSupported;
            State = state;
        }
    }
}
