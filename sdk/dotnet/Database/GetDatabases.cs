// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetDatabases
    {
        /// <summary>
        /// This data source provides the list of Databases in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the databases in the specified Database Home.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabases = Oci.Database.GetDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DbHomeId = oci_database_db_home.Test_db_home.Id,
        ///         DbName = @var.Database_db_name,
        ///         State = @var.Database_state,
        ///         SystemId = oci_database_system.Test_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabasesResult> InvokeAsync(GetDatabasesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabasesResult>("oci:Database/getDatabases:getDatabases", args ?? new GetDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Databases in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the databases in the specified Database Home.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabases = Oci.Database.GetDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DbHomeId = oci_database_db_home.Test_db_home.Id,
        ///         DbName = @var.Database_db_name,
        ///         State = @var.Database_state,
        ///         SystemId = oci_database_system.Test_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabasesResult> Invoke(GetDatabasesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasesResult>("oci:Database/getDatabases:getDatabases", args ?? new GetDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabasesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
        /// </summary>
        [Input("dbHomeId")]
        public string? DbHomeId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire database name given. The match is not case sensitive.
        /// </summary>
        [Input("dbName")]
        public string? DbName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatabasesFilterArgs>? _filters;
        public List<Inputs.GetDatabasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
        /// </summary>
        [Input("systemId")]
        public string? SystemId { get; set; }

        public GetDatabasesArgs()
        {
        }
        public static new GetDatabasesArgs Empty => new GetDatabasesArgs();
    }

    public sealed class GetDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A Database Home [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). *Note: Either `db_home_id` or `system_id` is required to make the LIST API call.
        /// </summary>
        [Input("dbHomeId")]
        public Input<string>? DbHomeId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire database name given. The match is not case sensitive.
        /// </summary>
        [Input("dbName")]
        public Input<string>? DbName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDatabasesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata DB system that you want to filter the database results by. Applies only to Exadata DB systems.
        /// </summary>
        [Input("systemId")]
        public Input<string>? SystemId { get; set; }

        public GetDatabasesInvokeArgs()
        {
        }
        public static new GetDatabasesInvokeArgs Empty => new GetDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabasesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of databases.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabasesDatabaseResult> Databases;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
        /// </summary>
        public readonly string? DbHomeId;
        /// <summary>
        /// The database name.
        /// </summary>
        public readonly string? DbName;
        public readonly ImmutableArray<Outputs.GetDatabasesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The current state of the database.
        /// </summary>
        public readonly string? State;
        public readonly string? SystemId;

        [OutputConstructor]
        private GetDatabasesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetDatabasesDatabaseResult> databases,

            string? dbHomeId,

            string? dbName,

            ImmutableArray<Outputs.GetDatabasesFilterResult> filters,

            string? id,

            string? state,

            string? systemId)
        {
            CompartmentId = compartmentId;
            Databases = databases;
            DbHomeId = dbHomeId;
            DbName = dbName;
            Filters = filters;
            Id = id;
            State = state;
            SystemId = systemId;
        }
    }
}
