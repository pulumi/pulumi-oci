// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetExternalDatabaseConnectors
    {
        /// <summary>
        /// This data source provides the list of External Database Connectors in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the external database connectors in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalDatabaseConnectors = Oci.Database.GetExternalDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ExternalDatabaseId = testDatabase.Id,
        ///         DisplayName = externalDatabaseConnectorDisplayName,
        ///         State = externalDatabaseConnectorState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetExternalDatabaseConnectorsResult> InvokeAsync(GetExternalDatabaseConnectorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalDatabaseConnectorsResult>("oci:Database/getExternalDatabaseConnectors:getExternalDatabaseConnectors", args ?? new GetExternalDatabaseConnectorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of External Database Connectors in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the external database connectors in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalDatabaseConnectors = Oci.Database.GetExternalDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ExternalDatabaseId = testDatabase.Id,
        ///         DisplayName = externalDatabaseConnectorDisplayName,
        ///         State = externalDatabaseConnectorState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalDatabaseConnectorsResult> Invoke(GetExternalDatabaseConnectorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalDatabaseConnectorsResult>("oci:Database/getExternalDatabaseConnectors:getExternalDatabaseConnectors", args ?? new GetExternalDatabaseConnectorsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of External Database Connectors in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the external database connectors in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalDatabaseConnectors = Oci.Database.GetExternalDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ExternalDatabaseId = testDatabase.Id,
        ///         DisplayName = externalDatabaseConnectorDisplayName,
        ///         State = externalDatabaseConnectorState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalDatabaseConnectorsResult> Invoke(GetExternalDatabaseConnectorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalDatabaseConnectorsResult>("oci:Database/getExternalDatabaseConnectors:getExternalDatabaseConnectors", args ?? new GetExternalDatabaseConnectorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalDatabaseConnectorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database whose connectors will be listed.
        /// </summary>
        [Input("externalDatabaseId", required: true)]
        public string ExternalDatabaseId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetExternalDatabaseConnectorsFilterArgs>? _filters;
        public List<Inputs.GetExternalDatabaseConnectorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetExternalDatabaseConnectorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetExternalDatabaseConnectorsArgs()
        {
        }
        public static new GetExternalDatabaseConnectorsArgs Empty => new GetExternalDatabaseConnectorsArgs();
    }

    public sealed class GetExternalDatabaseConnectorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database whose connectors will be listed.
        /// </summary>
        [Input("externalDatabaseId", required: true)]
        public Input<string> ExternalDatabaseId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetExternalDatabaseConnectorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetExternalDatabaseConnectorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetExternalDatabaseConnectorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetExternalDatabaseConnectorsInvokeArgs()
        {
        }
        public static new GetExternalDatabaseConnectorsInvokeArgs Empty => new GetExternalDatabaseConnectorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalDatabaseConnectorsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The user-friendly name for the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails). The name does not have to be unique.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The list of external_database_connectors.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExternalDatabaseConnectorsExternalDatabaseConnectorResult> ExternalDatabaseConnectors;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external database resource.
        /// </summary>
        public readonly string ExternalDatabaseId;
        public readonly ImmutableArray<Outputs.GetExternalDatabaseConnectorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current lifecycle state of the external database connector resource.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetExternalDatabaseConnectorsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetExternalDatabaseConnectorsExternalDatabaseConnectorResult> externalDatabaseConnectors,

            string externalDatabaseId,

            ImmutableArray<Outputs.GetExternalDatabaseConnectorsFilterResult> filters,

            string id,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            ExternalDatabaseConnectors = externalDatabaseConnectors;
            ExternalDatabaseId = externalDatabaseId;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
