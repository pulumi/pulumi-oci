// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetPluggableDatabase
    {
        /// <summary>
        /// This data source provides details about a specific Pluggable Database resource in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets information about the specified pluggable database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabase = Oci.Database.GetPluggableDatabase.Invoke(new()
        ///     {
        ///         PluggableDatabaseId = testPluggableDatabaseOciDatabasePluggableDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPluggableDatabaseResult> InvokeAsync(GetPluggableDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPluggableDatabaseResult>("oci:Database/getPluggableDatabase:getPluggableDatabase", args ?? new GetPluggableDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Pluggable Database resource in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets information about the specified pluggable database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabase = Oci.Database.GetPluggableDatabase.Invoke(new()
        ///     {
        ///         PluggableDatabaseId = testPluggableDatabaseOciDatabasePluggableDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluggableDatabaseResult> Invoke(GetPluggableDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluggableDatabaseResult>("oci:Database/getPluggableDatabase:getPluggableDatabase", args ?? new GetPluggableDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluggableDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId", required: true)]
        public string PluggableDatabaseId { get; set; } = null!;

        public GetPluggableDatabaseArgs()
        {
        }
        public static new GetPluggableDatabaseArgs Empty => new GetPluggableDatabaseArgs();
    }

    public sealed class GetPluggableDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId", required: true)]
        public Input<string> PluggableDatabaseId { get; set; } = null!;

        public GetPluggableDatabaseInvokeArgs()
        {
        }
        public static new GetPluggableDatabaseInvokeArgs Empty => new GetPluggableDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetPluggableDatabaseResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Connection strings to connect to an Oracle Pluggable Database.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabaseConnectionStringResult> ConnectionStrings;
        public readonly string ContainerDatabaseAdminPassword;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
        /// </summary>
        public readonly string ContainerDatabaseId;
        public readonly int ConvertToRegularTrigger;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pluggable database.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
        /// </summary>
        public readonly bool IsRestricted;
        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
        /// </summary>
        public readonly string OpenMode;
        public readonly string PdbAdminPassword;
        public readonly ImmutableArray<Outputs.GetPluggableDatabasePdbCreationTypeDetailResult> PdbCreationTypeDetails;
        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        public readonly string PdbName;
        /// <summary>
        /// Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabasePdbNodeLevelDetailResult> PdbNodeLevelDetails;
        public readonly string PluggableDatabaseId;
        /// <summary>
        /// The configuration of the Pluggable Database Management service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabasePluggableDatabaseManagementConfigResult> PluggableDatabaseManagementConfigs;
        public readonly int RefreshTrigger;
        /// <summary>
        /// Pluggable Database Refreshable Clone Configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabaseRefreshableCloneConfigResult> RefreshableCloneConfigs;
        public readonly int RotateKeyTrigger;
        public readonly bool ShouldCreatePdbBackup;
        public readonly bool ShouldPdbAdminAccountBeLocked;
        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        public readonly string State;
        public readonly string TdeWalletPassword;
        /// <summary>
        /// The date and time the pluggable database was created.
        /// </summary>
        public readonly string TimeCreated;

        [OutputConstructor]
        private GetPluggableDatabaseResult(
            string compartmentId,

            ImmutableArray<Outputs.GetPluggableDatabaseConnectionStringResult> connectionStrings,

            string containerDatabaseAdminPassword,

            string containerDatabaseId,

            int convertToRegularTrigger,

            ImmutableDictionary<string, object> definedTags,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isRestricted,

            string lifecycleDetails,

            string openMode,

            string pdbAdminPassword,

            ImmutableArray<Outputs.GetPluggableDatabasePdbCreationTypeDetailResult> pdbCreationTypeDetails,

            string pdbName,

            ImmutableArray<Outputs.GetPluggableDatabasePdbNodeLevelDetailResult> pdbNodeLevelDetails,

            string pluggableDatabaseId,

            ImmutableArray<Outputs.GetPluggableDatabasePluggableDatabaseManagementConfigResult> pluggableDatabaseManagementConfigs,

            int refreshTrigger,

            ImmutableArray<Outputs.GetPluggableDatabaseRefreshableCloneConfigResult> refreshableCloneConfigs,

            int rotateKeyTrigger,

            bool shouldCreatePdbBackup,

            bool shouldPdbAdminAccountBeLocked,

            string state,

            string tdeWalletPassword,

            string timeCreated)
        {
            CompartmentId = compartmentId;
            ConnectionStrings = connectionStrings;
            ContainerDatabaseAdminPassword = containerDatabaseAdminPassword;
            ContainerDatabaseId = containerDatabaseId;
            ConvertToRegularTrigger = convertToRegularTrigger;
            DefinedTags = definedTags;
            FreeformTags = freeformTags;
            Id = id;
            IsRestricted = isRestricted;
            LifecycleDetails = lifecycleDetails;
            OpenMode = openMode;
            PdbAdminPassword = pdbAdminPassword;
            PdbCreationTypeDetails = pdbCreationTypeDetails;
            PdbName = pdbName;
            PdbNodeLevelDetails = pdbNodeLevelDetails;
            PluggableDatabaseId = pluggableDatabaseId;
            PluggableDatabaseManagementConfigs = pluggableDatabaseManagementConfigs;
            RefreshTrigger = refreshTrigger;
            RefreshableCloneConfigs = refreshableCloneConfigs;
            RotateKeyTrigger = rotateKeyTrigger;
            ShouldCreatePdbBackup = shouldCreatePdbBackup;
            ShouldPdbAdminAccountBeLocked = shouldPdbAdminAccountBeLocked;
            State = state;
            TdeWalletPassword = tdeWalletPassword;
            TimeCreated = timeCreated;
        }
    }
}
