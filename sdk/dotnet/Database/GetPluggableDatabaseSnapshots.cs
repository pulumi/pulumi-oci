// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetPluggableDatabaseSnapshots
    {
        /// <summary>
        /// This data source provides the list of Pluggable Database Snapshots in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the Exadata Pluggable Database Snapshots in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabaseSnapshots = Oci.Database.GetPluggableDatabaseSnapshots.Invoke(new()
        ///     {
        ///         ClusterId = testCluster.Id,
        ///         CompartmentId = compartmentId,
        ///         Name = pluggableDatabaseSnapshotName,
        ///         PluggableDatabaseId = testPluggableDatabase.Id,
        ///         State = pluggableDatabaseSnapshotState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPluggableDatabaseSnapshotsResult> InvokeAsync(GetPluggableDatabaseSnapshotsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPluggableDatabaseSnapshotsResult>("oci:Database/getPluggableDatabaseSnapshots:getPluggableDatabaseSnapshots", args ?? new GetPluggableDatabaseSnapshotsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pluggable Database Snapshots in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the Exadata Pluggable Database Snapshots in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabaseSnapshots = Oci.Database.GetPluggableDatabaseSnapshots.Invoke(new()
        ///     {
        ///         ClusterId = testCluster.Id,
        ///         CompartmentId = compartmentId,
        ///         Name = pluggableDatabaseSnapshotName,
        ///         PluggableDatabaseId = testPluggableDatabase.Id,
        ///         State = pluggableDatabaseSnapshotState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluggableDatabaseSnapshotsResult> Invoke(GetPluggableDatabaseSnapshotsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluggableDatabaseSnapshotsResult>("oci:Database/getPluggableDatabaseSnapshots:getPluggableDatabaseSnapshots", args ?? new GetPluggableDatabaseSnapshotsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pluggable Database Snapshots in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the Exadata Pluggable Database Snapshots in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabaseSnapshots = Oci.Database.GetPluggableDatabaseSnapshots.Invoke(new()
        ///     {
        ///         ClusterId = testCluster.Id,
        ///         CompartmentId = compartmentId,
        ///         Name = pluggableDatabaseSnapshotName,
        ///         PluggableDatabaseId = testPluggableDatabase.Id,
        ///         State = pluggableDatabaseSnapshotState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluggableDatabaseSnapshotsResult> Invoke(GetPluggableDatabaseSnapshotsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluggableDatabaseSnapshotsResult>("oci:Database/getPluggableDatabaseSnapshots:getPluggableDatabaseSnapshots", args ?? new GetPluggableDatabaseSnapshotsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluggableDatabaseSnapshotsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only Exadata Database Node Snapshots that match the given VM cluster.
        /// </summary>
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetPluggableDatabaseSnapshotsFilterArgs>? _filters;
        public List<Inputs.GetPluggableDatabaseSnapshotsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPluggableDatabaseSnapshotsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only Exadata Pluggable Database Snapshots that match the given database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId")]
        public string? PluggableDatabaseId { get; set; }

        /// <summary>
        /// A filter to return only Exadata Pluggable Database Snapshots that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetPluggableDatabaseSnapshotsArgs()
        {
        }
        public static new GetPluggableDatabaseSnapshotsArgs Empty => new GetPluggableDatabaseSnapshotsArgs();
    }

    public sealed class GetPluggableDatabaseSnapshotsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only Exadata Database Node Snapshots that match the given VM cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPluggableDatabaseSnapshotsFilterInputArgs>? _filters;
        public InputList<Inputs.GetPluggableDatabaseSnapshotsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPluggableDatabaseSnapshotsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only Exadata Pluggable Database Snapshots that match the given database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId")]
        public Input<string>? PluggableDatabaseId { get; set; }

        /// <summary>
        /// A filter to return only Exadata Pluggable Database Snapshots that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetPluggableDatabaseSnapshotsInvokeArgs()
        {
        }
        public static new GetPluggableDatabaseSnapshotsInvokeArgs Empty => new GetPluggableDatabaseSnapshotsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPluggableDatabaseSnapshotsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
        /// </summary>
        public readonly string? ClusterId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetPluggableDatabaseSnapshotsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The user-friendly name for the Database Snapshot. The name should be unique.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
        /// </summary>
        public readonly string? PluggableDatabaseId;
        /// <summary>
        /// The list of pluggable_database_snapshots.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshotResult> PluggableDatabaseSnapshots;
        /// <summary>
        /// The current state of the Exadata Pluggable Database Snapshot.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetPluggableDatabaseSnapshotsResult(
            string? clusterId,

            string? compartmentId,

            ImmutableArray<Outputs.GetPluggableDatabaseSnapshotsFilterResult> filters,

            string id,

            string? name,

            string? pluggableDatabaseId,

            ImmutableArray<Outputs.GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshotResult> pluggableDatabaseSnapshots,

            string? state)
        {
            ClusterId = clusterId;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            PluggableDatabaseId = pluggableDatabaseId;
            PluggableDatabaseSnapshots = pluggableDatabaseSnapshots;
            State = state;
        }
    }
}
