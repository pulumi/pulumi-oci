// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetPluggableDatabases
    {
        /// <summary>
        /// This data source provides the list of Pluggable Databases in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the pluggable databases in a database or compartment. You must provide either a `databaseId` or `compartmentId` value.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabases = Oci.Database.GetPluggableDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseId = testDatabase.Id,
        ///         PdbName = pluggableDatabasePdbName,
        ///         State = pluggableDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPluggableDatabasesResult> InvokeAsync(GetPluggableDatabasesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPluggableDatabasesResult>("oci:Database/getPluggableDatabases:getPluggableDatabases", args ?? new GetPluggableDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pluggable Databases in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets a list of the pluggable databases in a database or compartment. You must provide either a `databaseId` or `compartmentId` value.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPluggableDatabases = Oci.Database.GetPluggableDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseId = testDatabase.Id,
        ///         PdbName = pluggableDatabasePdbName,
        ///         State = pluggableDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPluggableDatabasesResult> Invoke(GetPluggableDatabasesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPluggableDatabasesResult>("oci:Database/getPluggableDatabases:getPluggableDatabases", args ?? new GetPluggableDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPluggableDatabasesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Input("databaseId")]
        public string? DatabaseId { get; set; }

        [Input("filters")]
        private List<Inputs.GetPluggableDatabasesFilterArgs>? _filters;
        public List<Inputs.GetPluggableDatabasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPluggableDatabasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("pdbName")]
        public string? PdbName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetPluggableDatabasesArgs()
        {
        }
        public static new GetPluggableDatabasesArgs Empty => new GetPluggableDatabasesArgs();
    }

    public sealed class GetPluggableDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPluggableDatabasesFilterInputArgs>? _filters;
        public InputList<Inputs.GetPluggableDatabasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPluggableDatabasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("pdbName")]
        public Input<string>? PdbName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetPluggableDatabasesInvokeArgs()
        {
        }
        public static new GetPluggableDatabasesInvokeArgs Empty => new GetPluggableDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPluggableDatabasesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DatabaseId;
        public readonly ImmutableArray<Outputs.GetPluggableDatabasesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        public readonly string? PdbName;
        /// <summary>
        /// The list of pluggable_databases.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPluggableDatabasesPluggableDatabaseResult> PluggableDatabases;
        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetPluggableDatabasesResult(
            string? compartmentId,

            string? databaseId,

            ImmutableArray<Outputs.GetPluggableDatabasesFilterResult> filters,

            string id,

            string? pdbName,

            ImmutableArray<Outputs.GetPluggableDatabasesPluggableDatabaseResult> pluggableDatabases,

            string? state)
        {
            CompartmentId = compartmentId;
            DatabaseId = databaseId;
            Filters = filters;
            Id = id;
            PdbName = pdbName;
            PluggableDatabases = pluggableDatabases;
            State = state;
        }
    }
}
