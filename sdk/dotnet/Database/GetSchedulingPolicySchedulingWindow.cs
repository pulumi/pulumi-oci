// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetSchedulingPolicySchedulingWindow
    {
        /// <summary>
        /// This data source provides details about a specific Scheduling Policy Scheduling Window resource in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets information about the specified Scheduling Window.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindow = Oci.Database.GetSchedulingPolicySchedulingWindow.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         SchedulingWindowId = testSchedulingWindow.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSchedulingPolicySchedulingWindowResult> InvokeAsync(GetSchedulingPolicySchedulingWindowArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchedulingPolicySchedulingWindowResult>("oci:Database/getSchedulingPolicySchedulingWindow:getSchedulingPolicySchedulingWindow", args ?? new GetSchedulingPolicySchedulingWindowArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Scheduling Policy Scheduling Window resource in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets information about the specified Scheduling Window.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindow = Oci.Database.GetSchedulingPolicySchedulingWindow.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         SchedulingWindowId = testSchedulingWindow.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchedulingPolicySchedulingWindowResult> Invoke(GetSchedulingPolicySchedulingWindowInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchedulingPolicySchedulingWindowResult>("oci:Database/getSchedulingPolicySchedulingWindow:getSchedulingPolicySchedulingWindow", args ?? new GetSchedulingPolicySchedulingWindowInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Scheduling Policy Scheduling Window resource in Oracle Cloud Infrastructure Database service.
        /// 
        /// Gets information about the specified Scheduling Window.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindow = Oci.Database.GetSchedulingPolicySchedulingWindow.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         SchedulingWindowId = testSchedulingWindow.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchedulingPolicySchedulingWindowResult> Invoke(GetSchedulingPolicySchedulingWindowInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchedulingPolicySchedulingWindowResult>("oci:Database/getSchedulingPolicySchedulingWindow:getSchedulingPolicySchedulingWindow", args ?? new GetSchedulingPolicySchedulingWindowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchedulingPolicySchedulingWindowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingPolicyId", required: true)]
        public string SchedulingPolicyId { get; set; } = null!;

        /// <summary>
        /// The Scheduling Window [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingWindowId", required: true)]
        public string SchedulingWindowId { get; set; } = null!;

        public GetSchedulingPolicySchedulingWindowArgs()
        {
        }
        public static new GetSchedulingPolicySchedulingWindowArgs Empty => new GetSchedulingPolicySchedulingWindowArgs();
    }

    public sealed class GetSchedulingPolicySchedulingWindowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingPolicyId", required: true)]
        public Input<string> SchedulingPolicyId { get; set; } = null!;

        /// <summary>
        /// The Scheduling Window [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingWindowId", required: true)]
        public Input<string> SchedulingWindowId { get; set; } = null!;

        public GetSchedulingPolicySchedulingWindowInvokeArgs()
        {
        }
        public static new GetSchedulingPolicySchedulingWindowInvokeArgs Empty => new GetSchedulingPolicySchedulingWindowInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchedulingPolicySchedulingWindowResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// The user-friendly name for the Scheduling Window. The name does not need to be unique.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Window.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
        /// </summary>
        public readonly string SchedulingPolicyId;
        public readonly string SchedulingWindowId;
        /// <summary>
        /// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the Scheduling Window was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time of the next upcoming window associated within the schedulingWindow is planned to start.
        /// </summary>
        public readonly string TimeNextSchedulingWindowStarts;
        /// <summary>
        /// The last date and time that the Scheduling Window was updated.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The Single Scheduling Window details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowWindowPreferenceResult> WindowPreferences;

        [OutputConstructor]
        private GetSchedulingPolicySchedulingWindowResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string lifecycleDetails,

            string schedulingPolicyId,

            string schedulingWindowId,

            string state,

            string timeCreated,

            string timeNextSchedulingWindowStarts,

            string timeUpdated,

            ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowWindowPreferenceResult> windowPreferences)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            SchedulingPolicyId = schedulingPolicyId;
            SchedulingWindowId = schedulingWindowId;
            State = state;
            TimeCreated = timeCreated;
            TimeNextSchedulingWindowStarts = timeNextSchedulingWindowStarts;
            TimeUpdated = timeUpdated;
            WindowPreferences = windowPreferences;
        }
    }
}
