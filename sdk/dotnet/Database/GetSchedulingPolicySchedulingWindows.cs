// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    public static class GetSchedulingPolicySchedulingWindows
    {
        /// <summary>
        /// This data source provides the list of Scheduling Policy Scheduling Windows in Oracle Cloud Infrastructure Database service.
        /// 
        /// Lists the Scheduling Window resources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindows = Oci.Database.GetSchedulingPolicySchedulingWindows.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = schedulingPolicySchedulingWindowDisplayName,
        ///         State = schedulingPolicySchedulingWindowState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSchedulingPolicySchedulingWindowsResult> InvokeAsync(GetSchedulingPolicySchedulingWindowsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchedulingPolicySchedulingWindowsResult>("oci:Database/getSchedulingPolicySchedulingWindows:getSchedulingPolicySchedulingWindows", args ?? new GetSchedulingPolicySchedulingWindowsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Scheduling Policy Scheduling Windows in Oracle Cloud Infrastructure Database service.
        /// 
        /// Lists the Scheduling Window resources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindows = Oci.Database.GetSchedulingPolicySchedulingWindows.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = schedulingPolicySchedulingWindowDisplayName,
        ///         State = schedulingPolicySchedulingWindowState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchedulingPolicySchedulingWindowsResult> Invoke(GetSchedulingPolicySchedulingWindowsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchedulingPolicySchedulingWindowsResult>("oci:Database/getSchedulingPolicySchedulingWindows:getSchedulingPolicySchedulingWindows", args ?? new GetSchedulingPolicySchedulingWindowsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Scheduling Policy Scheduling Windows in Oracle Cloud Infrastructure Database service.
        /// 
        /// Lists the Scheduling Window resources in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSchedulingPolicySchedulingWindows = Oci.Database.GetSchedulingPolicySchedulingWindows.Invoke(new()
        ///     {
        ///         SchedulingPolicyId = testSchedulingPolicy.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = schedulingPolicySchedulingWindowDisplayName,
        ///         State = schedulingPolicySchedulingWindowState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchedulingPolicySchedulingWindowsResult> Invoke(GetSchedulingPolicySchedulingWindowsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchedulingPolicySchedulingWindowsResult>("oci:Database/getSchedulingPolicySchedulingWindows:getSchedulingPolicySchedulingWindows", args ?? new GetSchedulingPolicySchedulingWindowsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchedulingPolicySchedulingWindowsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetSchedulingPolicySchedulingWindowsFilterArgs>? _filters;
        public List<Inputs.GetSchedulingPolicySchedulingWindowsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSchedulingPolicySchedulingWindowsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingPolicyId", required: true)]
        public string SchedulingPolicyId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetSchedulingPolicySchedulingWindowsArgs()
        {
        }
        public static new GetSchedulingPolicySchedulingWindowsArgs Empty => new GetSchedulingPolicySchedulingWindowsArgs();
    }

    public sealed class GetSchedulingPolicySchedulingWindowsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSchedulingPolicySchedulingWindowsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSchedulingPolicySchedulingWindowsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSchedulingPolicySchedulingWindowsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("schedulingPolicyId", required: true)]
        public Input<string> SchedulingPolicyId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetSchedulingPolicySchedulingWindowsInvokeArgs()
        {
        }
        public static new GetSchedulingPolicySchedulingWindowsInvokeArgs Empty => new GetSchedulingPolicySchedulingWindowsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchedulingPolicySchedulingWindowsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The user-friendly name for the Scheduling Window. The name does not need to be unique.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
        /// </summary>
        public readonly string SchedulingPolicyId;
        /// <summary>
        /// The list of scheduling_windows.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowsSchedulingWindowResult> SchedulingWindows;
        /// <summary>
        /// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetSchedulingPolicySchedulingWindowsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowsFilterResult> filters,

            string id,

            string schedulingPolicyId,

            ImmutableArray<Outputs.GetSchedulingPolicySchedulingWindowsSchedulingWindowResult> schedulingWindows,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SchedulingPolicyId = schedulingPolicyId;
            SchedulingWindows = schedulingWindows;
            State = state;
        }
    }
}
