// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database.Inputs
{

    public sealed class PluggableDatabasePdbCreationTypeDetailsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Pluggable Database creation type.
        /// </summary>
        [Input("creationType", required: true)]
        public Input<string> CreationType { get; set; } = null!;

        [Input("dblinkUserPassword")]
        private Input<string>? _dblinkUserPassword;

        /// <summary>
        /// The DB link user password.
        /// </summary>
        public Input<string>? DblinkUserPassword
        {
            get => _dblinkUserPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dblinkUserPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the DB link user.
        /// </summary>
        [Input("dblinkUsername")]
        public Input<string>? DblinkUsername { get; set; }

        /// <summary>
        /// True if Pluggable Database needs to be thin cloned and false if Pluggable Database needs to be thick cloned.
        /// </summary>
        [Input("isThinClone")]
        public Input<bool>? IsThinClone { get; set; }

        /// <summary>
        /// Parameters for creating Pluggable Database Refreshable Clone. **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
        /// </summary>
        [Input("refreshableCloneDetails")]
        public Input<Inputs.PluggableDatabasePdbCreationTypeDetailsRefreshableCloneDetailsArgs>? RefreshableCloneDetails { get; set; }

        [Input("sourceContainerDatabaseAdminPassword")]
        private Input<string>? _sourceContainerDatabaseAdminPassword;

        /// <summary>
        /// The DB system administrator password of the source Container Database.
        /// </summary>
        public Input<string>? SourceContainerDatabaseAdminPassword
        {
            get => _sourceContainerDatabaseAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sourceContainerDatabaseAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The OCID of the Source Pluggable Database.
        /// </summary>
        [Input("sourcePluggableDatabaseId", required: true)]
        public Input<string> SourcePluggableDatabaseId { get; set; } = null!;

        public PluggableDatabasePdbCreationTypeDetailsArgs()
        {
        }
        public static new PluggableDatabasePdbCreationTypeDetailsArgs Empty => new PluggableDatabasePdbCreationTypeDetailsArgs();
    }
}
