// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database.Inputs
{

    public sealed class SchedulingPolicySchedulingWindowWindowPreferenceGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("daysOfWeeks", required: true)]
        private InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekGetArgs>? _daysOfWeeks;

        /// <summary>
        /// (Updatable) Days during the week when scheduling window should be performed.
        /// </summary>
        public InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekGetArgs> DaysOfWeeks
        {
            get => _daysOfWeeks ?? (_daysOfWeeks = new InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekGetArgs>());
            set => _daysOfWeeks = value;
        }

        /// <summary>
        /// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
        /// </summary>
        [Input("duration", required: true)]
        public Input<int> Duration { get; set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
        /// </summary>
        [Input("isEnforcedDuration", required: true)]
        public Input<bool> IsEnforcedDuration { get; set; } = null!;

        [Input("months", required: true)]
        private InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceMonthGetArgs>? _months;

        /// <summary>
        /// (Updatable) Months during the year when scheduled window should be performed.
        /// </summary>
        public InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceMonthGetArgs> Months
        {
            get => _months ?? (_months = new InputList<Inputs.SchedulingPolicySchedulingWindowWindowPreferenceMonthGetArgs>());
            set => _months = value;
        }

        /// <summary>
        /// (Updatable) The scheduling window start time. The value must use the ISO-8601 format "hh:mm".
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        [Input("weeksOfMonths", required: true)]
        private InputList<int>? _weeksOfMonths;

        /// <summary>
        /// (Updatable) Weeks during the month when scheduled window should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week. For example, to allow scheduling window during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Scheduling window cannot be scheduled for the fifth week of months that contain more than 28 days. Note that this parameter works in conjunction with the  daysOfWeek and startTime parameters to allow you to specify specific days of the week and hours that scheduled window will be performed. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public InputList<int> WeeksOfMonths
        {
            get => _weeksOfMonths ?? (_weeksOfMonths = new InputList<int>());
            set => _weeksOfMonths = value;
        }

        public SchedulingPolicySchedulingWindowWindowPreferenceGetArgs()
        {
        }
        public static new SchedulingPolicySchedulingWindowWindowPreferenceGetArgs Empty => new SchedulingPolicySchedulingWindowWindowPreferenceGetArgs();
    }
}
