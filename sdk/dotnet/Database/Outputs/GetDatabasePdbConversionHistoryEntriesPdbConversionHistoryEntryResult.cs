// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database.Outputs
{

    [OutputType]
    public sealed class GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntryResult
    {
        /// <summary>
        /// The operations used to convert a non-container database to a pluggable database.
        /// * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
        /// * Use `CONVERT` to convert a non-container database into a pluggable database.
        /// * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
        /// * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Additional container database parameter.
        /// </summary>
        public readonly string AdditionalCdbParams;
        /// <summary>
        /// The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
        /// </summary>
        public readonly string CdbName;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database conversion history.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Additional information about the current lifecycle state for the conversion operation.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        public readonly string SourceDatabaseId;
        /// <summary>
        /// A filter to return only the pluggable database conversion history entries that match the specified lifecycle state. For example, you can use this filter to return only entries in the "failed" lifecycle state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
        /// * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        /// </summary>
        public readonly string TargetDatabaseId;
        /// <summary>
        /// The date and time when the database conversion operation ended.
        /// </summary>
        public readonly string TimeEnded;
        /// <summary>
        /// The date and time when the database conversion operation started.
        /// </summary>
        public readonly string TimeStarted;

        [OutputConstructor]
        private GetDatabasePdbConversionHistoryEntriesPdbConversionHistoryEntryResult(
            string action,

            string additionalCdbParams,

            string cdbName,

            string id,

            string lifecycleDetails,

            string sourceDatabaseId,

            string state,

            string target,

            string targetDatabaseId,

            string timeEnded,

            string timeStarted)
        {
            Action = action;
            AdditionalCdbParams = additionalCdbParams;
            CdbName = cdbName;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            SourceDatabaseId = sourceDatabaseId;
            State = state;
            Target = target;
            TargetDatabaseId = targetDatabaseId;
            TimeEnded = timeEnded;
            TimeStarted = timeStarted;
        }
    }
}
