// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database.Outputs
{

    [OutputType]
    public sealed class GetExadataInfrastructuresExadataInfrastructureResult
    {
        /// <summary>
        /// The requested number of additional storage servers activated for the Exadata infrastructure.
        /// </summary>
        public readonly int ActivatedStorageCount;
        public readonly string ActivationFile;
        /// <summary>
        /// The requested number of additional compute servers for the Exadata infrastructure.
        /// </summary>
        public readonly int AdditionalComputeCount;
        /// <summary>
        /// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
        /// </summary>
        public readonly string AdditionalComputeSystemModel;
        /// <summary>
        /// The requested number of additional storage servers for the Exadata infrastructure.
        /// </summary>
        public readonly int AdditionalStorageCount;
        /// <summary>
        /// The CIDR block for the Exadata administration network.
        /// </summary>
        public readonly string AdminNetworkCidr;
        /// <summary>
        /// The name of the availability domain that the Exadata infrastructure is located in.
        /// </summary>
        public readonly string AvailabilityDomain;
        /// <summary>
        /// The IP address for the first control plane server.
        /// </summary>
        public readonly string CloudControlPlaneServer1;
        /// <summary>
        /// The IP address for the second control plane server.
        /// </summary>
        public readonly string CloudControlPlaneServer2;
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The number of compute servers for the Exadata infrastructure.
        /// </summary>
        public readonly int ComputeCount;
        /// <summary>
        /// The compute model of the Autonomous Database. This is required if using the `computeCount` parameter. If using `cpuCoreCount` then it is an error to specify `computeModel` to a non-null value. ECPU compute model is the recommended model and OCPU compute model is legacy.
        /// </summary>
        public readonly string ComputeModel;
        /// <summary>
        /// The list of contacts for the Exadata infrastructure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureContactResult> Contacts;
        /// <summary>
        /// The corporate network proxy for access to the control plane network.
        /// </summary>
        public readonly string CorporateProxy;
        /// <summary>
        /// The number of enabled CPU cores.
        /// </summary>
        public readonly int CpusEnabled;
        public readonly bool CreateAsync;
        /// <summary>
        /// The CSI Number of the Exadata infrastructure.
        /// </summary>
        public readonly string CsiNumber;
        /// <summary>
        /// Size, in terabytes, of the DATA disk group.
        /// </summary>
        public readonly double DataStorageSizeInTbs;
        /// <summary>
        /// The database server type of the Exadata infrastructure.
        /// </summary>
        public readonly string DatabaseServerType;
        /// <summary>
        /// The local node storage allocated in GBs.
        /// </summary>
        public readonly int DbNodeStorageSizeInGbs;
        /// <summary>
        /// The software version of the database servers (dom0) in the Exadata infrastructure.
        /// </summary>
        public readonly string DbServerVersion;
        /// <summary>
        /// Details of the file system configuration of the Exadata infrastructure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfigurationResult> DefinedFileSystemConfigurations;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A filter to return only resources that match the entire display name given. The match is not case sensitive.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The list of DNS server IP addresses. Maximum of 3 allowed.
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// The exascale config response details for the Exadata Cloud@Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud@Customer instances and Exadata Cloud Service instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureExascaleConfigResult> ExascaleConfigs;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The gateway for the control plane network.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The CIDR block for the Exadata InfiniBand interconnect.
        /// </summary>
        public readonly string InfiniBandNetworkCidr;
        /// <summary>
        /// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
        /// </summary>
        public readonly bool IsCpsOfflineReportEnabled;
        /// <summary>
        /// Indicates if deployment is Multi-Rack or not.
        /// </summary>
        public readonly bool IsMultiRackDeployment;
        /// <summary>
        /// If true, the infrastructure is using granular maintenance scheduling preference.
        /// </summary>
        public readonly bool IsSchedulingPolicyAssociated;
        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
        /// </summary>
        public readonly string MaintenanceSloStatus;
        /// <summary>
        /// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureMaintenanceWindowResult> MaintenanceWindows;
        /// <summary>
        /// The total number of CPU cores available.
        /// </summary>
        public readonly int MaxCpuCount;
        /// <summary>
        /// The total available DATA disk group size.
        /// </summary>
        public readonly double MaxDataStorageInTbs;
        /// <summary>
        /// The total local node storage available in GBs.
        /// </summary>
        public readonly int MaxDbNodeStorageInGbs;
        /// <summary>
        /// The total memory available in GBs.
        /// </summary>
        public readonly int MaxMemoryInGbs;
        /// <summary>
        /// The memory allocated in GBs.
        /// </summary>
        public readonly int MemorySizeInGbs;
        /// <summary>
        /// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
        /// </summary>
        public readonly string MonthlyDbServerVersion;
        /// <summary>
        /// The base64 encoded Multi-Rack configuration json file.
        /// </summary>
        public readonly string MultiRackConfigurationFile;
        /// <summary>
        /// The netmask for the control plane network.
        /// </summary>
        public readonly string Netmask;
        /// <summary>
        /// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetailResult> NetworkBondingModeDetails;
        /// <summary>
        /// The list of NTP server IP addresses. Maximum of 3 allowed.
        /// </summary>
        public readonly ImmutableArray<string> NtpServers;
        /// <summary>
        /// The serial number for the Exadata infrastructure.
        /// </summary>
        public readonly string RackSerialNumber;
        /// <summary>
        /// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The number of Exadata storage servers for the Exadata infrastructure.
        /// </summary>
        public readonly int StorageCount;
        /// <summary>
        /// The storage server type of the Exadata infrastructure.
        /// </summary>
        public readonly string StorageServerType;
        /// <summary>
        /// The software version of the storage servers (cells) in the Exadata infrastructure.
        /// </summary>
        public readonly string StorageServerVersion;
        /// <summary>
        /// The date and time the Exadata infrastructure was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
        /// </summary>
        public readonly string TimeZone;

        [OutputConstructor]
        private GetExadataInfrastructuresExadataInfrastructureResult(
            int activatedStorageCount,

            string activationFile,

            int additionalComputeCount,

            string additionalComputeSystemModel,

            int additionalStorageCount,

            string adminNetworkCidr,

            string availabilityDomain,

            string cloudControlPlaneServer1,

            string cloudControlPlaneServer2,

            string compartmentId,

            int computeCount,

            string computeModel,

            ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureContactResult> contacts,

            string corporateProxy,

            int cpusEnabled,

            bool createAsync,

            string csiNumber,

            double dataStorageSizeInTbs,

            string databaseServerType,

            int dbNodeStorageSizeInGbs,

            string dbServerVersion,

            ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureDefinedFileSystemConfigurationResult> definedFileSystemConfigurations,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableArray<string> dnsServers,

            ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureExascaleConfigResult> exascaleConfigs,

            ImmutableDictionary<string, string> freeformTags,

            string gateway,

            string id,

            string infiniBandNetworkCidr,

            bool isCpsOfflineReportEnabled,

            bool isMultiRackDeployment,

            bool isSchedulingPolicyAssociated,

            string lifecycleDetails,

            string maintenanceSloStatus,

            ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureMaintenanceWindowResult> maintenanceWindows,

            int maxCpuCount,

            double maxDataStorageInTbs,

            int maxDbNodeStorageInGbs,

            int maxMemoryInGbs,

            int memorySizeInGbs,

            string monthlyDbServerVersion,

            string multiRackConfigurationFile,

            string netmask,

            ImmutableArray<Outputs.GetExadataInfrastructuresExadataInfrastructureNetworkBondingModeDetailResult> networkBondingModeDetails,

            ImmutableArray<string> ntpServers,

            string rackSerialNumber,

            string shape,

            string state,

            int storageCount,

            string storageServerType,

            string storageServerVersion,

            string timeCreated,

            string timeZone)
        {
            ActivatedStorageCount = activatedStorageCount;
            ActivationFile = activationFile;
            AdditionalComputeCount = additionalComputeCount;
            AdditionalComputeSystemModel = additionalComputeSystemModel;
            AdditionalStorageCount = additionalStorageCount;
            AdminNetworkCidr = adminNetworkCidr;
            AvailabilityDomain = availabilityDomain;
            CloudControlPlaneServer1 = cloudControlPlaneServer1;
            CloudControlPlaneServer2 = cloudControlPlaneServer2;
            CompartmentId = compartmentId;
            ComputeCount = computeCount;
            ComputeModel = computeModel;
            Contacts = contacts;
            CorporateProxy = corporateProxy;
            CpusEnabled = cpusEnabled;
            CreateAsync = createAsync;
            CsiNumber = csiNumber;
            DataStorageSizeInTbs = dataStorageSizeInTbs;
            DatabaseServerType = databaseServerType;
            DbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            DbServerVersion = dbServerVersion;
            DefinedFileSystemConfigurations = definedFileSystemConfigurations;
            DefinedTags = definedTags;
            DisplayName = displayName;
            DnsServers = dnsServers;
            ExascaleConfigs = exascaleConfigs;
            FreeformTags = freeformTags;
            Gateway = gateway;
            Id = id;
            InfiniBandNetworkCidr = infiniBandNetworkCidr;
            IsCpsOfflineReportEnabled = isCpsOfflineReportEnabled;
            IsMultiRackDeployment = isMultiRackDeployment;
            IsSchedulingPolicyAssociated = isSchedulingPolicyAssociated;
            LifecycleDetails = lifecycleDetails;
            MaintenanceSloStatus = maintenanceSloStatus;
            MaintenanceWindows = maintenanceWindows;
            MaxCpuCount = maxCpuCount;
            MaxDataStorageInTbs = maxDataStorageInTbs;
            MaxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            MaxMemoryInGbs = maxMemoryInGbs;
            MemorySizeInGbs = memorySizeInGbs;
            MonthlyDbServerVersion = monthlyDbServerVersion;
            MultiRackConfigurationFile = multiRackConfigurationFile;
            Netmask = netmask;
            NetworkBondingModeDetails = networkBondingModeDetails;
            NtpServers = ntpServers;
            RackSerialNumber = rackSerialNumber;
            Shape = shape;
            State = state;
            StorageCount = storageCount;
            StorageServerType = storageServerType;
            StorageServerVersion = storageServerVersion;
            TimeCreated = timeCreated;
            TimeZone = timeZone;
        }
    }
}
