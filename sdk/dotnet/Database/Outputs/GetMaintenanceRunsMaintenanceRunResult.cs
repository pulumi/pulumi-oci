// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database.Outputs
{

    [OutputType]
    public sealed class GetMaintenanceRunsMaintenanceRunResult
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
        /// </summary>
        public readonly int CurrentCustomActionTimeoutInMins;
        /// <summary>
        /// The name of the current infrastruture component that is getting patched.
        /// </summary>
        public readonly string CurrentPatchingComponent;
        /// <summary>
        /// Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
        /// </summary>
        public readonly int CustomActionTimeoutInMins;
        /// <summary>
        /// The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        /// </summary>
        public readonly string DatabaseSoftwareImageId;
        /// <summary>
        /// Description of the maintenance run.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The user-friendly name for the maintenance run.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The estimated start time of the next infrastruture component patching operation.
        /// </summary>
        public readonly string EstimatedComponentPatchingStartTime;
        /// <summary>
        /// The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaintenanceRunsMaintenanceRunEstimatedPatchingTimeResult> EstimatedPatchingTimes;
        /// <summary>
        /// The OCID of the maintenance run.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
        /// </summary>
        public readonly bool IsCustomActionTimeoutEnabled;
        /// <summary>
        /// Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
        /// </summary>
        public readonly bool IsDstFileUpdateEnabled;
        /// <summary>
        /// If `FALSE`, the maintenance run doesn't support granular maintenance.
        /// </summary>
        public readonly bool IsMaintenanceRunGranular;
        /// <summary>
        /// Additional information about the current lifecycle state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The sub-type of the maintenance run.
        /// </summary>
        public readonly string MaintenanceSubtype;
        /// <summary>
        /// The maintenance type.
        /// </summary>
        public readonly string MaintenanceType;
        /// <summary>
        /// Contain the patch failure count.
        /// </summary>
        public readonly int PatchFailureCount;
        /// <summary>
        /// The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
        /// </summary>
        public readonly string PatchId;
        public readonly string PatchType;
        /// <summary>
        /// The time when the patching operation ended.
        /// </summary>
        public readonly string PatchingEndTime;
        /// <summary>
        /// Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
        /// </summary>
        public readonly string PatchingMode;
        /// <summary>
        /// The time when the patching operation started.
        /// </summary>
        public readonly string PatchingStartTime;
        /// <summary>
        /// The status of the patching operation.
        /// </summary>
        public readonly string PatchingStatus;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
        /// </summary>
        public readonly string PeerMaintenanceRunId;
        /// <summary>
        /// A filter to return only resources that match the given lifecycle state exactly.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The target software version for the database server patching operation.
        /// </summary>
        public readonly string TargetDbServerVersion;
        /// <summary>
        /// The target resource ID.
        /// </summary>
        public readonly string TargetResourceId;
        /// <summary>
        /// The type of the target resource. Accepted values are: AUTONOMOUS_CONTAINER_DATABASE, AUTONOMOUS_EXADATA_INFRASTRUCTURE, EXADATA_DB_SYSTEM
        /// </summary>
        public readonly string TargetResourceType;
        /// <summary>
        /// The target Cell version that is to be patched to.
        /// </summary>
        public readonly string TargetStorageServerVersion;
        /// <summary>
        /// The date and time the maintenance run was completed.
        /// </summary>
        public readonly string TimeEnded;
        /// <summary>
        /// The date and time the maintenance run is scheduled to occur.
        /// </summary>
        public readonly string TimeScheduled;
        /// <summary>
        /// The date and time the maintenance run starts.
        /// </summary>
        public readonly string TimeStarted;
        /// <summary>
        /// The total time taken by corresponding resource activity in minutes.
        /// </summary>
        public readonly int TotalTimeTakenInMins;

        [OutputConstructor]
        private GetMaintenanceRunsMaintenanceRunResult(
            string compartmentId,

            int currentCustomActionTimeoutInMins,

            string currentPatchingComponent,

            int customActionTimeoutInMins,

            string databaseSoftwareImageId,

            string description,

            string displayName,

            string estimatedComponentPatchingStartTime,

            ImmutableArray<Outputs.GetMaintenanceRunsMaintenanceRunEstimatedPatchingTimeResult> estimatedPatchingTimes,

            string id,

            bool isCustomActionTimeoutEnabled,

            bool isDstFileUpdateEnabled,

            bool isMaintenanceRunGranular,

            string lifecycleDetails,

            string maintenanceSubtype,

            string maintenanceType,

            int patchFailureCount,

            string patchId,

            string patchType,

            string patchingEndTime,

            string patchingMode,

            string patchingStartTime,

            string patchingStatus,

            string peerMaintenanceRunId,

            string state,

            string targetDbServerVersion,

            string targetResourceId,

            string targetResourceType,

            string targetStorageServerVersion,

            string timeEnded,

            string timeScheduled,

            string timeStarted,

            int totalTimeTakenInMins)
        {
            CompartmentId = compartmentId;
            CurrentCustomActionTimeoutInMins = currentCustomActionTimeoutInMins;
            CurrentPatchingComponent = currentPatchingComponent;
            CustomActionTimeoutInMins = customActionTimeoutInMins;
            DatabaseSoftwareImageId = databaseSoftwareImageId;
            Description = description;
            DisplayName = displayName;
            EstimatedComponentPatchingStartTime = estimatedComponentPatchingStartTime;
            EstimatedPatchingTimes = estimatedPatchingTimes;
            Id = id;
            IsCustomActionTimeoutEnabled = isCustomActionTimeoutEnabled;
            IsDstFileUpdateEnabled = isDstFileUpdateEnabled;
            IsMaintenanceRunGranular = isMaintenanceRunGranular;
            LifecycleDetails = lifecycleDetails;
            MaintenanceSubtype = maintenanceSubtype;
            MaintenanceType = maintenanceType;
            PatchFailureCount = patchFailureCount;
            PatchId = patchId;
            PatchType = patchType;
            PatchingEndTime = patchingEndTime;
            PatchingMode = patchingMode;
            PatchingStartTime = patchingStartTime;
            PatchingStatus = patchingStatus;
            PeerMaintenanceRunId = peerMaintenanceRunId;
            State = state;
            TargetDbServerVersion = targetDbServerVersion;
            TargetResourceId = targetResourceId;
            TargetResourceType = targetResourceType;
            TargetStorageServerVersion = targetStorageServerVersion;
            TimeEnded = timeEnded;
            TimeScheduled = timeScheduled;
            TimeStarted = timeStarted;
            TotalTimeTakenInMins = totalTimeTakenInMins;
        }
    }
}
