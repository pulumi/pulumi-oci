// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    /// <summary>
    /// This resource provides the Pluggable Database resource in Oracle Cloud Infrastructure Database service.
    /// 
    /// Creates and starts a pluggable database in the specified container database.
    /// Pluggable Database can be created using different operations (e.g. LocalClone, RemoteClone, Relocate ) with this API.
    /// Use the [StartPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StartPluggableDatabase) and [StopPluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/StopPluggableDatabase) APIs to start and stop the pluggable database.
    /// 
    /// ## Import
    /// 
    /// PluggableDatabases can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Database/pluggableDatabase:PluggableDatabase test_pluggable_database "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Database/pluggableDatabase:PluggableDatabase")]
    public partial class PluggableDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Connection strings to connect to an Oracle Pluggable Database.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.PluggableDatabaseConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The DB system administrator password of the Container Database.
        /// </summary>
        [Output("containerDatabaseAdminPassword")]
        public Output<string> ContainerDatabaseAdminPassword { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
        /// </summary>
        [Output("containerDatabaseId")]
        public Output<string> ContainerDatabaseId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
        /// </summary>
        [Output("convertToRegularTrigger")]
        public Output<int?> ConvertToRegularTrigger { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
        /// </summary>
        [Output("isRestricted")]
        public Output<bool> IsRestricted { get; private set; } = null!;

        [Output("kmsKeyVersionId")]
        public Output<string?> KmsKeyVersionId { get; private set; } = null!;

        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
        /// </summary>
        [Output("openMode")]
        public Output<string> OpenMode { get; private set; } = null!;

        /// <summary>
        /// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        [Output("pdbAdminPassword")]
        public Output<string> PdbAdminPassword { get; private set; } = null!;

        /// <summary>
        /// The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure.
        /// 
        /// Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
        /// </summary>
        [Output("pdbCreationTypeDetails")]
        public Output<Outputs.PluggableDatabasePdbCreationTypeDetails> PdbCreationTypeDetails { get; private set; } = null!;

        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Output("pdbName")]
        public Output<string> PdbName { get; private set; } = null!;

        /// <summary>
        /// Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
        /// </summary>
        [Output("pdbNodeLevelDetails")]
        public Output<ImmutableArray<Outputs.PluggableDatabasePdbNodeLevelDetail>> PdbNodeLevelDetails { get; private set; } = null!;

        /// <summary>
        /// The configuration of the Pluggable Database Management service.
        /// </summary>
        [Output("pluggableDatabaseManagementConfigs")]
        public Output<ImmutableArray<Outputs.PluggableDatabasePluggableDatabaseManagementConfig>> PluggableDatabaseManagementConfigs { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
        /// </summary>
        [Output("refreshTrigger")]
        public Output<int?> RefreshTrigger { get; private set; } = null!;

        /// <summary>
        /// Pluggable Database Refreshable Clone Configuration.
        /// </summary>
        [Output("refreshableCloneConfigs")]
        public Output<ImmutableArray<Outputs.PluggableDatabaseRefreshableCloneConfig>> RefreshableCloneConfigs { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("rotateKeyTrigger")]
        public Output<int?> RotateKeyTrigger { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to take Pluggable Database Backup after the operation.
        /// </summary>
        [Output("shouldCreatePdbBackup")]
        public Output<bool> ShouldCreatePdbBackup { get; private set; } = null!;

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Output("shouldPdbAdminAccountBeLocked")]
        public Output<bool> ShouldPdbAdminAccountBeLocked { get; private set; } = null!;

        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The existing TDE wallet password of the CDB.
        /// </summary>
        [Output("tdeWalletPassword")]
        public Output<string> TdeWalletPassword { get; private set; } = null!;

        /// <summary>
        /// The date and time the pluggable database was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;


        /// <summary>
        /// Create a PluggableDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PluggableDatabase(string name, PluggableDatabaseArgs args, CustomResourceOptions? options = null)
            : base("oci:Database/pluggableDatabase:PluggableDatabase", name, args ?? new PluggableDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PluggableDatabase(string name, Input<string> id, PluggableDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("oci:Database/pluggableDatabase:PluggableDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "containerDatabaseAdminPassword",
                    "pdbAdminPassword",
                    "tdeWalletPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PluggableDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PluggableDatabase Get(string name, Input<string> id, PluggableDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new PluggableDatabase(name, id, state, options);
        }
    }

    public sealed class PluggableDatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("containerDatabaseAdminPassword")]
        private Input<string>? _containerDatabaseAdminPassword;

        /// <summary>
        /// The DB system administrator password of the Container Database.
        /// </summary>
        public Input<string>? ContainerDatabaseAdminPassword
        {
            get => _containerDatabaseAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _containerDatabaseAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
        /// </summary>
        [Input("containerDatabaseId", required: true)]
        public Input<string> ContainerDatabaseId { get; set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
        /// </summary>
        [Input("convertToRegularTrigger")]
        public Input<int>? ConvertToRegularTrigger { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("kmsKeyVersionId")]
        public Input<string>? KmsKeyVersionId { get; set; }

        [Input("pdbAdminPassword")]
        private Input<string>? _pdbAdminPassword;

        /// <summary>
        /// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        public Input<string>? PdbAdminPassword
        {
            get => _pdbAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pdbAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure.
        /// 
        /// Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
        /// </summary>
        [Input("pdbCreationTypeDetails")]
        public Input<Inputs.PluggableDatabasePdbCreationTypeDetailsArgs>? PdbCreationTypeDetails { get; set; }

        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Input("pdbName", required: true)]
        public Input<string> PdbName { get; set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
        /// </summary>
        [Input("refreshTrigger")]
        public Input<int>? RefreshTrigger { get; set; }

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("rotateKeyTrigger")]
        public Input<int>? RotateKeyTrigger { get; set; }

        /// <summary>
        /// Indicates whether to take Pluggable Database Backup after the operation.
        /// </summary>
        [Input("shouldCreatePdbBackup")]
        public Input<bool>? ShouldCreatePdbBackup { get; set; }

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Input("shouldPdbAdminAccountBeLocked")]
        public Input<bool>? ShouldPdbAdminAccountBeLocked { get; set; }

        [Input("tdeWalletPassword")]
        private Input<string>? _tdeWalletPassword;

        /// <summary>
        /// The existing TDE wallet password of the CDB.
        /// </summary>
        public Input<string>? TdeWalletPassword
        {
            get => _tdeWalletPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdeWalletPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public PluggableDatabaseArgs()
        {
        }
        public static new PluggableDatabaseArgs Empty => new PluggableDatabaseArgs();
    }

    public sealed class PluggableDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.PluggableDatabaseConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// Connection strings to connect to an Oracle Pluggable Database.
        /// </summary>
        public InputList<Inputs.PluggableDatabaseConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.PluggableDatabaseConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        [Input("containerDatabaseAdminPassword")]
        private Input<string>? _containerDatabaseAdminPassword;

        /// <summary>
        /// The DB system administrator password of the Container Database.
        /// </summary>
        public Input<string>? ContainerDatabaseAdminPassword
        {
            get => _containerDatabaseAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _containerDatabaseAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB
        /// </summary>
        [Input("containerDatabaseId")]
        public Input<string>? ContainerDatabaseId { get; set; }

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Convert To Regular. Could be set to any integer value.
        /// </summary>
        [Input("convertToRegularTrigger")]
        public Input<int>? ConvertToRegularTrigger { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
        /// </summary>
        [Input("isRestricted")]
        public Input<bool>? IsRestricted { get; set; }

        [Input("kmsKeyVersionId")]
        public Input<string>? KmsKeyVersionId { get; set; }

        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
        /// </summary>
        [Input("openMode")]
        public Input<string>? OpenMode { get; set; }

        [Input("pdbAdminPassword")]
        private Input<string>? _pdbAdminPassword;

        /// <summary>
        /// A strong password for PDB Admin. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        public Input<string>? PdbAdminPassword
        {
            get => _pdbAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pdbAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Pluggable Database creation type. Use `LOCAL_CLONE_PDB` for creating a new PDB using Local Clone on Source Pluggable Database. This will Clone and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure. Use `REMOTE_CLONE_PDB` for creating a new PDB using Remote Clone on Source Pluggable Database. This will Clone a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone. For Exadata Cloud@Customer instances, the source pluggable database (PDB) must be on the same Exadata Infrastructure as the target container database (CDB) to create a remote clone. isThinClone options are supported only for Exadata VM cluster on Exascale Infrastructure.
        /// 
        /// Use `RELOCATE_PDB` for relocating the Pluggable Database from Source CDB and creating it in target CDB. This will relocate a pluggable database (PDB) to a different database from the source PDB. The source PDB must be in the `READ_WRITE` openMode when performing the relocate.
        /// </summary>
        [Input("pdbCreationTypeDetails")]
        public Input<Inputs.PluggableDatabasePdbCreationTypeDetailsGetArgs>? PdbCreationTypeDetails { get; set; }

        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Input("pdbName")]
        public Input<string>? PdbName { get; set; }

        [Input("pdbNodeLevelDetails")]
        private InputList<Inputs.PluggableDatabasePdbNodeLevelDetailGetArgs>? _pdbNodeLevelDetails;

        /// <summary>
        /// Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
        /// </summary>
        public InputList<Inputs.PluggableDatabasePdbNodeLevelDetailGetArgs> PdbNodeLevelDetails
        {
            get => _pdbNodeLevelDetails ?? (_pdbNodeLevelDetails = new InputList<Inputs.PluggableDatabasePdbNodeLevelDetailGetArgs>());
            set => _pdbNodeLevelDetails = value;
        }

        [Input("pluggableDatabaseManagementConfigs")]
        private InputList<Inputs.PluggableDatabasePluggableDatabaseManagementConfigGetArgs>? _pluggableDatabaseManagementConfigs;

        /// <summary>
        /// The configuration of the Pluggable Database Management service.
        /// </summary>
        public InputList<Inputs.PluggableDatabasePluggableDatabaseManagementConfigGetArgs> PluggableDatabaseManagementConfigs
        {
            get => _pluggableDatabaseManagementConfigs ?? (_pluggableDatabaseManagementConfigs = new InputList<Inputs.PluggableDatabasePluggableDatabaseManagementConfigGetArgs>());
            set => _pluggableDatabaseManagementConfigs = value;
        }

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Refresh. Could be set to any integer value.
        /// </summary>
        [Input("refreshTrigger")]
        public Input<int>? RefreshTrigger { get; set; }

        [Input("refreshableCloneConfigs")]
        private InputList<Inputs.PluggableDatabaseRefreshableCloneConfigGetArgs>? _refreshableCloneConfigs;

        /// <summary>
        /// Pluggable Database Refreshable Clone Configuration.
        /// </summary>
        public InputList<Inputs.PluggableDatabaseRefreshableCloneConfigGetArgs> RefreshableCloneConfigs
        {
            get => _refreshableCloneConfigs ?? (_refreshableCloneConfigs = new InputList<Inputs.PluggableDatabaseRefreshableCloneConfigGetArgs>());
            set => _refreshableCloneConfigs = value;
        }

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Rotate Key. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("rotateKeyTrigger")]
        public Input<int>? RotateKeyTrigger { get; set; }

        /// <summary>
        /// Indicates whether to take Pluggable Database Backup after the operation.
        /// </summary>
        [Input("shouldCreatePdbBackup")]
        public Input<bool>? ShouldCreatePdbBackup { get; set; }

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Input("shouldPdbAdminAccountBeLocked")]
        public Input<bool>? ShouldPdbAdminAccountBeLocked { get; set; }

        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tdeWalletPassword")]
        private Input<string>? _tdeWalletPassword;

        /// <summary>
        /// The existing TDE wallet password of the CDB.
        /// </summary>
        public Input<string>? TdeWalletPassword
        {
            get => _tdeWalletPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdeWalletPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The date and time the pluggable database was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        public PluggableDatabaseState()
        {
        }
        public static new PluggableDatabaseState Empty => new PluggableDatabaseState();
    }
}
