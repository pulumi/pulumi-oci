// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Database
{
    /// <summary>
    /// This resource provides the Pluggable Databases Local Clone resource in Oracle Cloud Infrastructure Database service. Although pluggable databases(PDB) belong to a container database(CDB), there is no change to the parent(CDB) as a result of this operation.
    /// 
    /// **Deprecated.** Use [CreatePluggableDatabase](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/PluggableDatabase/CreatePluggableDatabase) for Pluggable Database LocalClone Operation.
    /// Clones and starts a pluggable database (PDB) in the same database (CDB) as the source PDB. The source PDB must be in the `READ_WRITE` openMode to perform the clone operation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testPluggableDatabasesLocalClone = new Oci.Database.PluggableDatabasesLocalClone("test_pluggable_databases_local_clone", new()
    ///     {
    ///         ClonedPdbName = pluggableDatabasesLocalCloneClonedPdbName,
    ///         PluggableDatabaseId = testPluggableDatabase.Id,
    ///         PdbAdminPassword = pluggableDatabasesLocalClonePdbAdminPassword,
    ///         ShouldPdbAdminAccountBeLocked = pluggableDatabasesLocalCloneShouldPdbAdminAccountBeLocked,
    ///         TargetTdeWalletPassword = pluggableDatabasesLocalCloneTargetTdeWalletPassword,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [OciResourceType("oci:Database/pluggableDatabasesLocalClone:PluggableDatabasesLocalClone")]
    public partial class PluggableDatabasesLocalClone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Output("clonedPdbName")]
        public Output<string> ClonedPdbName { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Connection strings to connect to an Oracle Pluggable Database.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.PluggableDatabasesLocalCloneConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
        /// </summary>
        [Output("containerDatabaseId")]
        public Output<string> ContainerDatabaseId { get; private set; } = null!;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
        /// </summary>
        [Output("isRestricted")]
        public Output<bool> IsRestricted { get; private set; } = null!;

        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
        /// </summary>
        [Output("openMode")]
        public Output<string> OpenMode { get; private set; } = null!;

        /// <summary>
        /// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        [Output("pdbAdminPassword")]
        public Output<string> PdbAdminPassword { get; private set; } = null!;

        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Output("pdbName")]
        public Output<string> PdbName { get; private set; } = null!;

        /// <summary>
        /// Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
        /// </summary>
        [Output("pdbNodeLevelDetails")]
        public Output<ImmutableArray<Outputs.PluggableDatabasesLocalClonePdbNodeLevelDetail>> PdbNodeLevelDetails { get; private set; } = null!;

        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Output("pluggableDatabaseId")]
        public Output<string> PluggableDatabaseId { get; private set; } = null!;

        /// <summary>
        /// The configuration of the Pluggable Database Management service.
        /// </summary>
        [Output("pluggableDatabaseManagementConfigs")]
        public Output<ImmutableArray<Outputs.PluggableDatabasesLocalClonePluggableDatabaseManagementConfig>> PluggableDatabaseManagementConfigs { get; private set; } = null!;

        /// <summary>
        /// Pluggable Database Refreshable Clone Configuration.
        /// </summary>
        [Output("refreshableCloneConfigs")]
        public Output<ImmutableArray<Outputs.PluggableDatabasesLocalCloneRefreshableCloneConfig>> RefreshableCloneConfigs { get; private set; } = null!;

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Output("shouldPdbAdminAccountBeLocked")]
        public Output<bool> ShouldPdbAdminAccountBeLocked { get; private set; } = null!;

        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The existing TDE wallet password of the target CDB.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("targetTdeWalletPassword")]
        public Output<string> TargetTdeWalletPassword { get; private set; } = null!;

        /// <summary>
        /// The date and time the pluggable database was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;


        /// <summary>
        /// Create a PluggableDatabasesLocalClone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PluggableDatabasesLocalClone(string name, PluggableDatabasesLocalCloneArgs args, CustomResourceOptions? options = null)
            : base("oci:Database/pluggableDatabasesLocalClone:PluggableDatabasesLocalClone", name, args ?? new PluggableDatabasesLocalCloneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PluggableDatabasesLocalClone(string name, Input<string> id, PluggableDatabasesLocalCloneState? state = null, CustomResourceOptions? options = null)
            : base("oci:Database/pluggableDatabasesLocalClone:PluggableDatabasesLocalClone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "pdbAdminPassword",
                    "targetTdeWalletPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PluggableDatabasesLocalClone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PluggableDatabasesLocalClone Get(string name, Input<string> id, PluggableDatabasesLocalCloneState? state = null, CustomResourceOptions? options = null)
        {
            return new PluggableDatabasesLocalClone(name, id, state, options);
        }
    }

    public sealed class PluggableDatabasesLocalCloneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Input("clonedPdbName", required: true)]
        public Input<string> ClonedPdbName { get; set; } = null!;

        [Input("pdbAdminPassword")]
        private Input<string>? _pdbAdminPassword;

        /// <summary>
        /// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        public Input<string>? PdbAdminPassword
        {
            get => _pdbAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pdbAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId", required: true)]
        public Input<string> PluggableDatabaseId { get; set; } = null!;

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Input("shouldPdbAdminAccountBeLocked")]
        public Input<bool>? ShouldPdbAdminAccountBeLocked { get; set; }

        [Input("targetTdeWalletPassword")]
        private Input<string>? _targetTdeWalletPassword;

        /// <summary>
        /// The existing TDE wallet password of the target CDB.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public Input<string>? TargetTdeWalletPassword
        {
            get => _targetTdeWalletPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _targetTdeWalletPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public PluggableDatabasesLocalCloneArgs()
        {
        }
        public static new PluggableDatabasesLocalCloneArgs Empty => new PluggableDatabasesLocalCloneArgs();
    }

    public sealed class PluggableDatabasesLocalCloneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Input("clonedPdbName")]
        public Input<string>? ClonedPdbName { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.PluggableDatabasesLocalCloneConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// Connection strings to connect to an Oracle Pluggable Database.
        /// </summary>
        public InputList<Inputs.PluggableDatabasesLocalCloneConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.PluggableDatabasesLocalCloneConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
        /// </summary>
        [Input("containerDatabaseId")]
        public Input<string>? ContainerDatabaseId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
        /// </summary>
        [Input("isRestricted")]
        public Input<bool>? IsRestricted { get; set; }

        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
        /// </summary>
        [Input("openMode")]
        public Input<string>? OpenMode { get; set; }

        [Input("pdbAdminPassword")]
        private Input<string>? _pdbAdminPassword;

        /// <summary>
        /// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
        /// </summary>
        public Input<string>? PdbAdminPassword
        {
            get => _pdbAdminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pdbAdminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
        /// </summary>
        [Input("pdbName")]
        public Input<string>? PdbName { get; set; }

        [Input("pdbNodeLevelDetails")]
        private InputList<Inputs.PluggableDatabasesLocalClonePdbNodeLevelDetailGetArgs>? _pdbNodeLevelDetails;

        /// <summary>
        /// Pluggable Database Node Level Details. Example: [{"nodeName" : "node1", "openMode" : "READ_WRITE"}, {"nodeName" : "node2", "openMode" : "READ_ONLY"}]
        /// </summary>
        public InputList<Inputs.PluggableDatabasesLocalClonePdbNodeLevelDetailGetArgs> PdbNodeLevelDetails
        {
            get => _pdbNodeLevelDetails ?? (_pdbNodeLevelDetails = new InputList<Inputs.PluggableDatabasesLocalClonePdbNodeLevelDetailGetArgs>());
            set => _pdbNodeLevelDetails = value;
        }

        /// <summary>
        /// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("pluggableDatabaseId")]
        public Input<string>? PluggableDatabaseId { get; set; }

        [Input("pluggableDatabaseManagementConfigs")]
        private InputList<Inputs.PluggableDatabasesLocalClonePluggableDatabaseManagementConfigGetArgs>? _pluggableDatabaseManagementConfigs;

        /// <summary>
        /// The configuration of the Pluggable Database Management service.
        /// </summary>
        public InputList<Inputs.PluggableDatabasesLocalClonePluggableDatabaseManagementConfigGetArgs> PluggableDatabaseManagementConfigs
        {
            get => _pluggableDatabaseManagementConfigs ?? (_pluggableDatabaseManagementConfigs = new InputList<Inputs.PluggableDatabasesLocalClonePluggableDatabaseManagementConfigGetArgs>());
            set => _pluggableDatabaseManagementConfigs = value;
        }

        [Input("refreshableCloneConfigs")]
        private InputList<Inputs.PluggableDatabasesLocalCloneRefreshableCloneConfigGetArgs>? _refreshableCloneConfigs;

        /// <summary>
        /// Pluggable Database Refreshable Clone Configuration.
        /// </summary>
        public InputList<Inputs.PluggableDatabasesLocalCloneRefreshableCloneConfigGetArgs> RefreshableCloneConfigs
        {
            get => _refreshableCloneConfigs ?? (_refreshableCloneConfigs = new InputList<Inputs.PluggableDatabasesLocalCloneRefreshableCloneConfigGetArgs>());
            set => _refreshableCloneConfigs = value;
        }

        /// <summary>
        /// The locked mode of the pluggable database admin account. If false, the user needs to provide the PDB Admin Password to connect to it. If true, the pluggable database will be locked and user cannot login to it.
        /// </summary>
        [Input("shouldPdbAdminAccountBeLocked")]
        public Input<bool>? ShouldPdbAdminAccountBeLocked { get; set; }

        /// <summary>
        /// The current state of the pluggable database.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("targetTdeWalletPassword")]
        private Input<string>? _targetTdeWalletPassword;

        /// <summary>
        /// The existing TDE wallet password of the target CDB.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public Input<string>? TargetTdeWalletPassword
        {
            get => _targetTdeWalletPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _targetTdeWalletPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The date and time the pluggable database was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        public PluggableDatabasesLocalCloneState()
        {
        }
        public static new PluggableDatabasesLocalCloneState Empty => new PluggableDatabasesLocalCloneState();
    }
}
