// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    /// <summary>
    /// This resource provides the External Db System Database Managements Management resource in Oracle Cloud Infrastructure Database Management service.
    /// 
    /// Enables Database Management service for all the components of the specified
    /// external DB system (except databases).
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testExternalDbSystemDatabaseManagementsManagement = new Oci.DatabaseManagement.ExternalDbSystemDatabaseManagementsManagement("testExternalDbSystemDatabaseManagementsManagement", new()
    ///     {
    ///         ExternalDbSystemId = oci_database_management_external_db_system.Test_external_db_system.Id,
    ///         EnableDatabaseManagement = @var.Enable_database_management,
    ///         LicenseModel = @var.External_db_system_database_managements_management_license_model,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [OciResourceType("oci:DatabaseManagement/externalDbSystemDatabaseManagementsManagement:ExternalDbSystemDatabaseManagementsManagement")]
    public partial class ExternalDbSystemDatabaseManagementsManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("enableDatabaseManagement")]
        public Output<bool> EnableDatabaseManagement { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
        /// </summary>
        [Output("externalDbSystemId")]
        public Output<string> ExternalDbSystemId { get; private set; } = null!;

        /// <summary>
        /// The Oracle license model that applies to the external database.
        /// </summary>
        [Output("licenseModel")]
        public Output<string> LicenseModel { get; private set; } = null!;


        /// <summary>
        /// Create a ExternalDbSystemDatabaseManagementsManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExternalDbSystemDatabaseManagementsManagement(string name, ExternalDbSystemDatabaseManagementsManagementArgs args, CustomResourceOptions? options = null)
            : base("oci:DatabaseManagement/externalDbSystemDatabaseManagementsManagement:ExternalDbSystemDatabaseManagementsManagement", name, args ?? new ExternalDbSystemDatabaseManagementsManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExternalDbSystemDatabaseManagementsManagement(string name, Input<string> id, ExternalDbSystemDatabaseManagementsManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:DatabaseManagement/externalDbSystemDatabaseManagementsManagement:ExternalDbSystemDatabaseManagementsManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExternalDbSystemDatabaseManagementsManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExternalDbSystemDatabaseManagementsManagement Get(string name, Input<string> id, ExternalDbSystemDatabaseManagementsManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new ExternalDbSystemDatabaseManagementsManagement(name, id, state, options);
        }
    }

    public sealed class ExternalDbSystemDatabaseManagementsManagementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("enableDatabaseManagement", required: true)]
        public Input<bool> EnableDatabaseManagement { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
        /// </summary>
        [Input("externalDbSystemId", required: true)]
        public Input<string> ExternalDbSystemId { get; set; } = null!;

        /// <summary>
        /// The Oracle license model that applies to the external database.
        /// </summary>
        [Input("licenseModel")]
        public Input<string>? LicenseModel { get; set; }

        public ExternalDbSystemDatabaseManagementsManagementArgs()
        {
        }
        public static new ExternalDbSystemDatabaseManagementsManagementArgs Empty => new ExternalDbSystemDatabaseManagementsManagementArgs();
    }

    public sealed class ExternalDbSystemDatabaseManagementsManagementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("enableDatabaseManagement")]
        public Input<bool>? EnableDatabaseManagement { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the external DB system.
        /// </summary>
        [Input("externalDbSystemId")]
        public Input<string>? ExternalDbSystemId { get; set; }

        /// <summary>
        /// The Oracle license model that applies to the external database.
        /// </summary>
        [Input("licenseModel")]
        public Input<string>? LicenseModel { get; set; }

        public ExternalDbSystemDatabaseManagementsManagementState()
        {
        }
        public static new ExternalDbSystemDatabaseManagementsManagementState Empty => new ExternalDbSystemDatabaseManagementsManagementState();
    }
}
