// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    /// <summary>
    /// This resource provides the External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
    /// 
    /// Creates an external MySQL connector resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testExternalMySqlDatabaseConnector = new Oci.DatabaseManagement.ExternalMySqlDatabaseConnector("test_external_my_sql_database_connector", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         ConnectorDetails = new Oci.DatabaseManagement.Inputs.ExternalMySqlDatabaseConnectorConnectorDetailsArgs
    ///         {
    ///             CredentialType = externalMySqlDatabaseConnectorConnectorDetailsCredentialType,
    ///             DisplayName = externalMySqlDatabaseConnectorConnectorDetailsDisplayName,
    ///             ExternalDatabaseId = testExternalDatabase.Id,
    ///             HostName = externalMySqlDatabaseConnectorConnectorDetailsHostName,
    ///             MacsAgentId = testAgent.Id,
    ///             NetworkProtocol = externalMySqlDatabaseConnectorConnectorDetailsNetworkProtocol,
    ///             Port = externalMySqlDatabaseConnectorConnectorDetailsPort,
    ///             SslSecretId = testSecret.Id,
    ///         },
    ///         IsTestConnectionParam = externalMySqlDatabaseConnectorIsTestConnectionParam,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ExternalMySqlDatabaseConnectors can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector test_external_my_sql_database_connector "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector")]
    public partial class ExternalMySqlDatabaseConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Oracle Cloud Infrastructure Services associated with this connector.
        /// </summary>
        [Output("associatedServices")]
        public Output<string> AssociatedServices { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("checkConnectionStatusTrigger")]
        public Output<int?> CheckConnectionStatusTrigger { get; private set; } = null!;

        /// <summary>
        /// (Updatable) OCID of compartment for the External MySQL Database.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Connection Status
        /// </summary>
        [Output("connectionStatus")]
        public Output<string> ConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Create Details of external database connector.
        /// </summary>
        [Output("connectorDetails")]
        public Output<Outputs.ExternalMySqlDatabaseConnectorConnectorDetails> ConnectorDetails { get; private set; } = null!;

        /// <summary>
        /// Connector Type.
        /// </summary>
        [Output("connectorType")]
        public Output<string> ConnectorType { get; private set; } = null!;

        /// <summary>
        /// Credential type used to connect to database.
        /// </summary>
        [Output("credentialType")]
        public Output<string> CredentialType { get; private set; } = null!;

        /// <summary>
        /// OCID of MySQL Database resource
        /// </summary>
        [Output("externalDatabaseId")]
        public Output<string> ExternalDatabaseId { get; private set; } = null!;

        /// <summary>
        /// Host name for Connector.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// Parameter indicating whether database connection needs to be tested.
        /// </summary>
        [Output("isTestConnectionParam")]
        public Output<bool> IsTestConnectionParam { get; private set; } = null!;

        /// <summary>
        /// Agent Id of the MACS agent.
        /// </summary>
        [Output("macsAgentId")]
        public Output<string> MacsAgentId { get; private set; } = null!;

        /// <summary>
        /// External MySQL Database Connector Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network Protocol.
        /// </summary>
        [Output("networkProtocol")]
        public Output<string> NetworkProtocol { get; private set; } = null!;

        /// <summary>
        /// Connector port.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Name of MySQL Database.
        /// </summary>
        [Output("sourceDatabase")]
        public Output<string> SourceDatabase { get; private set; } = null!;

        /// <summary>
        /// Type of MySQL Database.
        /// </summary>
        [Output("sourceDatabaseType")]
        public Output<string> SourceDatabaseType { get; private set; } = null!;

        /// <summary>
        /// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        [Output("sslSecretId")]
        public Output<string> SslSecretId { get; private set; } = null!;

        /// <summary>
        /// Name of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        [Output("sslSecretName")]
        public Output<string> SslSecretName { get; private set; } = null!;

        /// <summary>
        /// Indicates lifecycle  state of the resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Time when connection status was last updated.
        /// </summary>
        [Output("timeConnectionStatusUpdated")]
        public Output<string> TimeConnectionStatusUpdated { get; private set; } = null!;

        /// <summary>
        /// Connector creation time.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// Connector update time.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a ExternalMySqlDatabaseConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExternalMySqlDatabaseConnector(string name, ExternalMySqlDatabaseConnectorArgs args, CustomResourceOptions? options = null)
            : base("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, args ?? new ExternalMySqlDatabaseConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExternalMySqlDatabaseConnector(string name, Input<string> id, ExternalMySqlDatabaseConnectorState? state = null, CustomResourceOptions? options = null)
            : base("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExternalMySqlDatabaseConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExternalMySqlDatabaseConnector Get(string name, Input<string> id, ExternalMySqlDatabaseConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new ExternalMySqlDatabaseConnector(name, id, state, options);
        }
    }

    public sealed class ExternalMySqlDatabaseConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("checkConnectionStatusTrigger")]
        public Input<int>? CheckConnectionStatusTrigger { get; set; }

        /// <summary>
        /// (Updatable) OCID of compartment for the External MySQL Database.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Create Details of external database connector.
        /// </summary>
        [Input("connectorDetails", required: true)]
        public Input<Inputs.ExternalMySqlDatabaseConnectorConnectorDetailsArgs> ConnectorDetails { get; set; } = null!;

        /// <summary>
        /// Parameter indicating whether database connection needs to be tested.
        /// </summary>
        [Input("isTestConnectionParam", required: true)]
        public Input<bool> IsTestConnectionParam { get; set; } = null!;

        public ExternalMySqlDatabaseConnectorArgs()
        {
        }
        public static new ExternalMySqlDatabaseConnectorArgs Empty => new ExternalMySqlDatabaseConnectorArgs();
    }

    public sealed class ExternalMySqlDatabaseConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Oracle Cloud Infrastructure Services associated with this connector.
        /// </summary>
        [Input("associatedServices")]
        public Input<string>? AssociatedServices { get; set; }

        /// <summary>
        /// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("checkConnectionStatusTrigger")]
        public Input<int>? CheckConnectionStatusTrigger { get; set; }

        /// <summary>
        /// (Updatable) OCID of compartment for the External MySQL Database.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Connection Status
        /// </summary>
        [Input("connectionStatus")]
        public Input<string>? ConnectionStatus { get; set; }

        /// <summary>
        /// (Updatable) Create Details of external database connector.
        /// </summary>
        [Input("connectorDetails")]
        public Input<Inputs.ExternalMySqlDatabaseConnectorConnectorDetailsGetArgs>? ConnectorDetails { get; set; }

        /// <summary>
        /// Connector Type.
        /// </summary>
        [Input("connectorType")]
        public Input<string>? ConnectorType { get; set; }

        /// <summary>
        /// Credential type used to connect to database.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        /// <summary>
        /// OCID of MySQL Database resource
        /// </summary>
        [Input("externalDatabaseId")]
        public Input<string>? ExternalDatabaseId { get; set; }

        /// <summary>
        /// Host name for Connector.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// Parameter indicating whether database connection needs to be tested.
        /// </summary>
        [Input("isTestConnectionParam")]
        public Input<bool>? IsTestConnectionParam { get; set; }

        /// <summary>
        /// Agent Id of the MACS agent.
        /// </summary>
        [Input("macsAgentId")]
        public Input<string>? MacsAgentId { get; set; }

        /// <summary>
        /// External MySQL Database Connector Name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Protocol.
        /// </summary>
        [Input("networkProtocol")]
        public Input<string>? NetworkProtocol { get; set; }

        /// <summary>
        /// Connector port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Name of MySQL Database.
        /// </summary>
        [Input("sourceDatabase")]
        public Input<string>? SourceDatabase { get; set; }

        /// <summary>
        /// Type of MySQL Database.
        /// </summary>
        [Input("sourceDatabaseType")]
        public Input<string>? SourceDatabaseType { get; set; }

        /// <summary>
        /// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        [Input("sslSecretId")]
        public Input<string>? SslSecretId { get; set; }

        /// <summary>
        /// Name of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        [Input("sslSecretName")]
        public Input<string>? SslSecretName { get; set; }

        /// <summary>
        /// Indicates lifecycle  state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Time when connection status was last updated.
        /// </summary>
        [Input("timeConnectionStatusUpdated")]
        public Input<string>? TimeConnectionStatusUpdated { get; set; }

        /// <summary>
        /// Connector creation time.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// Connector update time.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public ExternalMySqlDatabaseConnectorState()
        {
        }
        public static new ExternalMySqlDatabaseConnectorState Empty => new ExternalMySqlDatabaseConnectorState();
    }
}
