// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetExternalExadataStorageServer
    {
        /// <summary>
        /// This data source provides details about a specific External Exadata Storage Server resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the summary for the Exadata storage server specified by exadataStorageServerId.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalExadataStorageServer = Oci.DatabaseManagement.GetExternalExadataStorageServer.Invoke(new()
        ///     {
        ///         ExternalExadataStorageServerId = oci_database_management_external_exadata_storage_server.Test_external_exadata_storage_server.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetExternalExadataStorageServerResult> InvokeAsync(GetExternalExadataStorageServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalExadataStorageServerResult>("oci:DatabaseManagement/getExternalExadataStorageServer:getExternalExadataStorageServer", args ?? new GetExternalExadataStorageServerArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific External Exadata Storage Server resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the summary for the Exadata storage server specified by exadataStorageServerId.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalExadataStorageServer = Oci.DatabaseManagement.GetExternalExadataStorageServer.Invoke(new()
        ///     {
        ///         ExternalExadataStorageServerId = oci_database_management_external_exadata_storage_server.Test_external_exadata_storage_server.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetExternalExadataStorageServerResult> Invoke(GetExternalExadataStorageServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalExadataStorageServerResult>("oci:DatabaseManagement/getExternalExadataStorageServer:getExternalExadataStorageServer", args ?? new GetExternalExadataStorageServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalExadataStorageServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
        /// </summary>
        [Input("externalExadataStorageServerId", required: true)]
        public string ExternalExadataStorageServerId { get; set; } = null!;

        public GetExternalExadataStorageServerArgs()
        {
        }
        public static new GetExternalExadataStorageServerArgs Empty => new GetExternalExadataStorageServerArgs();
    }

    public sealed class GetExternalExadataStorageServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
        /// </summary>
        [Input("externalExadataStorageServerId", required: true)]
        public Input<string> ExternalExadataStorageServerId { get; set; } = null!;

        public GetExternalExadataStorageServerInvokeArgs()
        {
        }
        public static new GetExternalExadataStorageServerInvokeArgs Empty => new GetExternalExadataStorageServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalExadataStorageServerResult
    {
        /// <summary>
        /// The additional details of the resource defined in `{"key": "value"}` format. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? AdditionalDetails;
        /// <summary>
        /// The connector of the Exadata storage server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExternalExadataStorageServerConnectorResult> Connectors;
        /// <summary>
        /// The CPU count of the Exadata storage server.
        /// </summary>
        public readonly double? CpuCount;
        /// <summary>
        /// The name of the Exadata resource. English letters, numbers, "-", "_" and "." only.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
        /// </summary>
        public readonly string? ExadataInfrastructureId;
        public readonly string ExternalExadataStorageServerId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The internal ID of the Exadata resource.
        /// </summary>
        public readonly string? InternalId;
        /// <summary>
        /// The IP address of the Exadata storage server.
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// The details of the lifecycle state of the Exadata resource.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// The make model of the Exadata storage server.
        /// </summary>
        public readonly string? MakeModel;
        /// <summary>
        /// The maximum flash disk IO operations per second of the Exadata storage server.
        /// </summary>
        public readonly int? MaxFlashDiskIops;
        /// <summary>
        /// The maximum flash disk IO throughput in MB/s of the Exadata storage server.
        /// </summary>
        public readonly int? MaxFlashDiskThroughput;
        /// <summary>
        /// The maximum hard disk IO operations per second of the Exadata storage server.
        /// </summary>
        public readonly int? MaxHardDiskIops;
        /// <summary>
        /// The maximum hard disk IO throughput in MB/s of the Exadata storage server.
        /// </summary>
        public readonly int? MaxHardDiskThroughput;
        /// <summary>
        /// The Exadata storage server memory size in GB.
        /// </summary>
        public readonly double? MemoryGb;
        /// <summary>
        /// The type of Exadata resource.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The current lifecycle state of the database resource.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The status of the Exadata resource.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server grid.
        /// </summary>
        public readonly string? StorageGridId;
        /// <summary>
        /// The timestamp of the creation of the Exadata resource.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The timestamp of the last update of the Exadata resource.
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// The version of the Exadata resource.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetExternalExadataStorageServerResult(
            ImmutableDictionary<string, object>? additionalDetails,

            ImmutableArray<Outputs.GetExternalExadataStorageServerConnectorResult> connectors,

            double? cpuCount,

            string? displayName,

            string? exadataInfrastructureId,

            string externalExadataStorageServerId,

            string? id,

            string? internalId,

            string? ipAddress,

            string? lifecycleDetails,

            string? makeModel,

            int? maxFlashDiskIops,

            int? maxFlashDiskThroughput,

            int? maxHardDiskIops,

            int? maxHardDiskThroughput,

            double? memoryGb,

            string? resourceType,

            string? state,

            string? status,

            string? storageGridId,

            string? timeCreated,

            string? timeUpdated,

            string? version)
        {
            AdditionalDetails = additionalDetails;
            Connectors = connectors;
            CpuCount = cpuCount;
            DisplayName = displayName;
            ExadataInfrastructureId = exadataInfrastructureId;
            ExternalExadataStorageServerId = externalExadataStorageServerId;
            Id = id;
            InternalId = internalId;
            IpAddress = ipAddress;
            LifecycleDetails = lifecycleDetails;
            MakeModel = makeModel;
            MaxFlashDiskIops = maxFlashDiskIops;
            MaxFlashDiskThroughput = maxFlashDiskThroughput;
            MaxHardDiskIops = maxHardDiskIops;
            MaxHardDiskThroughput = maxHardDiskThroughput;
            MemoryGb = memoryGb;
            ResourceType = resourceType;
            State = state;
            Status = status;
            StorageGridId = storageGridId;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Version = version;
        }
    }
}
