// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetExternalExadataStorageServerIormPlan
    {
        /// <summary>
        /// This data source provides details about a specific External Exadata Storage Server Iorm Plan resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Get the IORM plan from the specific Exadata storage server.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalExadataStorageServerIormPlan = Oci.DatabaseManagement.GetExternalExadataStorageServerIormPlan.Invoke(new()
        ///     {
        ///         ExternalExadataStorageServerId = testExternalExadataStorageServer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetExternalExadataStorageServerIormPlanResult> InvokeAsync(GetExternalExadataStorageServerIormPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalExadataStorageServerIormPlanResult>("oci:DatabaseManagement/getExternalExadataStorageServerIormPlan:getExternalExadataStorageServerIormPlan", args ?? new GetExternalExadataStorageServerIormPlanArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific External Exadata Storage Server Iorm Plan resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Get the IORM plan from the specific Exadata storage server.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalExadataStorageServerIormPlan = Oci.DatabaseManagement.GetExternalExadataStorageServerIormPlan.Invoke(new()
        ///     {
        ///         ExternalExadataStorageServerId = testExternalExadataStorageServer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalExadataStorageServerIormPlanResult> Invoke(GetExternalExadataStorageServerIormPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalExadataStorageServerIormPlanResult>("oci:DatabaseManagement/getExternalExadataStorageServerIormPlan:getExternalExadataStorageServerIormPlan", args ?? new GetExternalExadataStorageServerIormPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalExadataStorageServerIormPlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
        /// </summary>
        [Input("externalExadataStorageServerId", required: true)]
        public string ExternalExadataStorageServerId { get; set; } = null!;

        public GetExternalExadataStorageServerIormPlanArgs()
        {
        }
        public static new GetExternalExadataStorageServerIormPlanArgs Empty => new GetExternalExadataStorageServerIormPlanArgs();
    }

    public sealed class GetExternalExadataStorageServerIormPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
        /// </summary>
        [Input("externalExadataStorageServerId", required: true)]
        public Input<string> ExternalExadataStorageServerId { get; set; } = null!;

        public GetExternalExadataStorageServerIormPlanInvokeArgs()
        {
        }
        public static new GetExternalExadataStorageServerIormPlanInvokeArgs Empty => new GetExternalExadataStorageServerIormPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalExadataStorageServerIormPlanResult
    {
        /// <summary>
        /// The resource allocation directives must all use the share attribute, or they must all use the level and allocation attributes. If you use the share attribute to allocate I/O resources, then the database plan can have a maximum of 1024 directives. If you use the level and allocation attributes to allocate I/O resources, then the database plan can have a maximum of 32 directives. Only one directive is allowed for each database name and each profile name.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExternalExadataStorageServerIormPlanDbPlanResult> DbPlans;
        public readonly string ExternalExadataStorageServerId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The objective of the IORM plan.
        /// </summary>
        public readonly string PlanObjective;
        /// <summary>
        /// The status of the IORM plan.
        /// </summary>
        public readonly string PlanStatus;

        [OutputConstructor]
        private GetExternalExadataStorageServerIormPlanResult(
            ImmutableArray<Outputs.GetExternalExadataStorageServerIormPlanDbPlanResult> dbPlans,

            string externalExadataStorageServerId,

            string id,

            string planObjective,

            string planStatus)
        {
            DbPlans = dbPlans;
            ExternalExadataStorageServerId = externalExadataStorageServerId;
            Id = id;
            PlanObjective = planObjective;
            PlanStatus = planStatus;
        }
    }
}
