// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetExternalMySqlDatabaseConnector
    {
        /// <summary>
        /// This data source provides details about a specific External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves the MySQL database connector.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnector = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnector.Invoke(new()
        ///     {
        ///         ExternalMySqlDatabaseConnectorId = testExternalMySqlDatabaseConnectorOciDatabaseManagementExternalMySqlDatabaseConnector.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetExternalMySqlDatabaseConnectorResult> InvokeAsync(GetExternalMySqlDatabaseConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalMySqlDatabaseConnectorResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnector:getExternalMySqlDatabaseConnector", args ?? new GetExternalMySqlDatabaseConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves the MySQL database connector.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnector = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnector.Invoke(new()
        ///     {
        ///         ExternalMySqlDatabaseConnectorId = testExternalMySqlDatabaseConnectorOciDatabaseManagementExternalMySqlDatabaseConnector.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMySqlDatabaseConnectorResult> Invoke(GetExternalMySqlDatabaseConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMySqlDatabaseConnectorResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnector:getExternalMySqlDatabaseConnector", args ?? new GetExternalMySqlDatabaseConnectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves the MySQL database connector.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnector = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnector.Invoke(new()
        ///     {
        ///         ExternalMySqlDatabaseConnectorId = testExternalMySqlDatabaseConnectorOciDatabaseManagementExternalMySqlDatabaseConnector.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMySqlDatabaseConnectorResult> Invoke(GetExternalMySqlDatabaseConnectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMySqlDatabaseConnectorResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnector:getExternalMySqlDatabaseConnector", args ?? new GetExternalMySqlDatabaseConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalMySqlDatabaseConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the External MySQL Database Connector.
        /// </summary>
        [Input("externalMySqlDatabaseConnectorId", required: true)]
        public string ExternalMySqlDatabaseConnectorId { get; set; } = null!;

        public GetExternalMySqlDatabaseConnectorArgs()
        {
        }
        public static new GetExternalMySqlDatabaseConnectorArgs Empty => new GetExternalMySqlDatabaseConnectorArgs();
    }

    public sealed class GetExternalMySqlDatabaseConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the External MySQL Database Connector.
        /// </summary>
        [Input("externalMySqlDatabaseConnectorId", required: true)]
        public Input<string> ExternalMySqlDatabaseConnectorId { get; set; } = null!;

        public GetExternalMySqlDatabaseConnectorInvokeArgs()
        {
        }
        public static new GetExternalMySqlDatabaseConnectorInvokeArgs Empty => new GetExternalMySqlDatabaseConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalMySqlDatabaseConnectorResult
    {
        /// <summary>
        /// Oracle Cloud Infrastructure Services associated with this connector.
        /// </summary>
        public readonly string AssociatedServices;
        public readonly int CheckConnectionStatusTrigger;
        /// <summary>
        /// OCID of compartment for the External MySQL connector.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Connection Status
        /// </summary>
        public readonly string ConnectionStatus;
        public readonly ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorConnectorDetailResult> ConnectorDetails;
        /// <summary>
        /// Connector Type.
        /// </summary>
        public readonly string ConnectorType;
        /// <summary>
        /// Credential type used to connect to database.
        /// </summary>
        public readonly string CredentialType;
        /// <summary>
        /// OCID of MySQL Database resource
        /// </summary>
        public readonly string ExternalDatabaseId;
        public readonly string ExternalMySqlDatabaseConnectorId;
        /// <summary>
        /// Host name for Connector.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// OCID of MySQL Database Connector.
        /// </summary>
        public readonly string Id;
        public readonly bool IsTestConnectionParam;
        /// <summary>
        /// Agent Id of the MACS agent.
        /// </summary>
        public readonly string MacsAgentId;
        /// <summary>
        /// External MySQL Database Connector Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Protocol.
        /// </summary>
        public readonly string NetworkProtocol;
        /// <summary>
        /// Connector port.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Name of MySQL Database.
        /// </summary>
        public readonly string SourceDatabase;
        /// <summary>
        /// Type of MySQL Database.
        /// </summary>
        public readonly string SourceDatabaseType;
        /// <summary>
        /// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        public readonly string SslSecretId;
        /// <summary>
        /// Name of the SSL secret, if TCPS with SSL is used to connect to database.
        /// </summary>
        public readonly string SslSecretName;
        /// <summary>
        /// Indicates lifecycle  state of the resource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Time when connection status was last updated.
        /// </summary>
        public readonly string TimeConnectionStatusUpdated;
        /// <summary>
        /// Connector creation time.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Connector update time.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetExternalMySqlDatabaseConnectorResult(
            string associatedServices,

            int checkConnectionStatusTrigger,

            string compartmentId,

            string connectionStatus,

            ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorConnectorDetailResult> connectorDetails,

            string connectorType,

            string credentialType,

            string externalDatabaseId,

            string externalMySqlDatabaseConnectorId,

            string hostName,

            string id,

            bool isTestConnectionParam,

            string macsAgentId,

            string name,

            string networkProtocol,

            int port,

            string sourceDatabase,

            string sourceDatabaseType,

            string sslSecretId,

            string sslSecretName,

            string state,

            string timeConnectionStatusUpdated,

            string timeCreated,

            string timeUpdated)
        {
            AssociatedServices = associatedServices;
            CheckConnectionStatusTrigger = checkConnectionStatusTrigger;
            CompartmentId = compartmentId;
            ConnectionStatus = connectionStatus;
            ConnectorDetails = connectorDetails;
            ConnectorType = connectorType;
            CredentialType = credentialType;
            ExternalDatabaseId = externalDatabaseId;
            ExternalMySqlDatabaseConnectorId = externalMySqlDatabaseConnectorId;
            HostName = hostName;
            Id = id;
            IsTestConnectionParam = isTestConnectionParam;
            MacsAgentId = macsAgentId;
            Name = name;
            NetworkProtocol = networkProtocol;
            Port = port;
            SourceDatabase = sourceDatabase;
            SourceDatabaseType = sourceDatabaseType;
            SslSecretId = sslSecretId;
            SslSecretName = sslSecretName;
            State = state;
            TimeConnectionStatusUpdated = timeConnectionStatusUpdated;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
