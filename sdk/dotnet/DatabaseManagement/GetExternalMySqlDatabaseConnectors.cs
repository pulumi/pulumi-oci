// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetExternalMySqlDatabaseConnectors
    {
        /// <summary>
        /// This data source provides the list of External My Sql Database Connectors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of External MySQL Database connectors. 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnectors = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = externalMySqlDatabaseConnectorName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetExternalMySqlDatabaseConnectorsResult> InvokeAsync(GetExternalMySqlDatabaseConnectorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalMySqlDatabaseConnectorsResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnectors:getExternalMySqlDatabaseConnectors", args ?? new GetExternalMySqlDatabaseConnectorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of External My Sql Database Connectors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of External MySQL Database connectors. 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnectors = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = externalMySqlDatabaseConnectorName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMySqlDatabaseConnectorsResult> Invoke(GetExternalMySqlDatabaseConnectorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMySqlDatabaseConnectorsResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnectors:getExternalMySqlDatabaseConnectors", args ?? new GetExternalMySqlDatabaseConnectorsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of External My Sql Database Connectors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of External MySQL Database connectors. 
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testExternalMySqlDatabaseConnectors = Oci.DatabaseManagement.GetExternalMySqlDatabaseConnectors.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = externalMySqlDatabaseConnectorName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetExternalMySqlDatabaseConnectorsResult> Invoke(GetExternalMySqlDatabaseConnectorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalMySqlDatabaseConnectorsResult>("oci:DatabaseManagement/getExternalMySqlDatabaseConnectors:getExternalMySqlDatabaseConnectors", args ?? new GetExternalMySqlDatabaseConnectorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalMySqlDatabaseConnectorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetExternalMySqlDatabaseConnectorsFilterArgs>? _filters;
        public List<Inputs.GetExternalMySqlDatabaseConnectorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetExternalMySqlDatabaseConnectorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The parameter to filter by MySQL Database System type.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetExternalMySqlDatabaseConnectorsArgs()
        {
        }
        public static new GetExternalMySqlDatabaseConnectorsArgs Empty => new GetExternalMySqlDatabaseConnectorsArgs();
    }

    public sealed class GetExternalMySqlDatabaseConnectorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetExternalMySqlDatabaseConnectorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetExternalMySqlDatabaseConnectorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetExternalMySqlDatabaseConnectorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The parameter to filter by MySQL Database System type.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetExternalMySqlDatabaseConnectorsInvokeArgs()
        {
        }
        public static new GetExternalMySqlDatabaseConnectorsInvokeArgs Empty => new GetExternalMySqlDatabaseConnectorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalMySqlDatabaseConnectorsResult
    {
        /// <summary>
        /// OCID of compartment for the External MySQL connector.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of my_sql_connector_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionResult> MySqlConnectorCollections;
        /// <summary>
        /// External MySQL Database Connector Name.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetExternalMySqlDatabaseConnectorsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetExternalMySqlDatabaseConnectorsMySqlConnectorCollectionResult> mySqlConnectorCollections,

            string? name)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            MySqlConnectorCollections = mySqlConnectorCollections;
            Name = name;
        }
    }
}
