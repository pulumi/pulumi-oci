// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetManagedDatabaseUserDataAccessContainers
    {
        /// <summary>
        /// This data source provides the list of Managed Database User Data Access Containers in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedDatabaseUserDataAccessContainers = Oci.DatabaseManagement.GetManagedDatabaseUserDataAccessContainers.Invoke(new()
        ///     {
        ///         ManagedDatabaseId = testManagedDatabase.Id,
        ///         UserName = testUser.Name,
        ///         Name = managedDatabaseUserDataAccessContainerName,
        ///         OpcNamedCredentialId = managedDatabaseUserDataAccessContainerOpcNamedCredentialId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedDatabaseUserDataAccessContainersResult> InvokeAsync(GetManagedDatabaseUserDataAccessContainersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedDatabaseUserDataAccessContainersResult>("oci:DatabaseManagement/getManagedDatabaseUserDataAccessContainers:getManagedDatabaseUserDataAccessContainers", args ?? new GetManagedDatabaseUserDataAccessContainersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Database User Data Access Containers in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedDatabaseUserDataAccessContainers = Oci.DatabaseManagement.GetManagedDatabaseUserDataAccessContainers.Invoke(new()
        ///     {
        ///         ManagedDatabaseId = testManagedDatabase.Id,
        ///         UserName = testUser.Name,
        ///         Name = managedDatabaseUserDataAccessContainerName,
        ///         OpcNamedCredentialId = managedDatabaseUserDataAccessContainerOpcNamedCredentialId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedDatabaseUserDataAccessContainersResult> Invoke(GetManagedDatabaseUserDataAccessContainersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedDatabaseUserDataAccessContainersResult>("oci:DatabaseManagement/getManagedDatabaseUserDataAccessContainers:getManagedDatabaseUserDataAccessContainers", args ?? new GetManagedDatabaseUserDataAccessContainersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Database User Data Access Containers in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedDatabaseUserDataAccessContainers = Oci.DatabaseManagement.GetManagedDatabaseUserDataAccessContainers.Invoke(new()
        ///     {
        ///         ManagedDatabaseId = testManagedDatabase.Id,
        ///         UserName = testUser.Name,
        ///         Name = managedDatabaseUserDataAccessContainerName,
        ///         OpcNamedCredentialId = managedDatabaseUserDataAccessContainerOpcNamedCredentialId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedDatabaseUserDataAccessContainersResult> Invoke(GetManagedDatabaseUserDataAccessContainersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedDatabaseUserDataAccessContainersResult>("oci:DatabaseManagement/getManagedDatabaseUserDataAccessContainers:getManagedDatabaseUserDataAccessContainers", args ?? new GetManagedDatabaseUserDataAccessContainersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedDatabaseUserDataAccessContainersArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetManagedDatabaseUserDataAccessContainersFilterArgs>? _filters;
        public List<Inputs.GetManagedDatabaseUserDataAccessContainersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagedDatabaseUserDataAccessContainersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        /// </summary>
        [Input("managedDatabaseId", required: true)]
        public string ManagedDatabaseId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The OCID of the Named Credential.
        /// </summary>
        [Input("opcNamedCredentialId")]
        public string? OpcNamedCredentialId { get; set; }

        /// <summary>
        /// The name of the user whose details are to be viewed.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetManagedDatabaseUserDataAccessContainersArgs()
        {
        }
        public static new GetManagedDatabaseUserDataAccessContainersArgs Empty => new GetManagedDatabaseUserDataAccessContainersArgs();
    }

    public sealed class GetManagedDatabaseUserDataAccessContainersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetManagedDatabaseUserDataAccessContainersFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagedDatabaseUserDataAccessContainersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagedDatabaseUserDataAccessContainersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        /// </summary>
        [Input("managedDatabaseId", required: true)]
        public Input<string> ManagedDatabaseId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The OCID of the Named Credential.
        /// </summary>
        [Input("opcNamedCredentialId")]
        public Input<string>? OpcNamedCredentialId { get; set; }

        /// <summary>
        /// The name of the user whose details are to be viewed.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public GetManagedDatabaseUserDataAccessContainersInvokeArgs()
        {
        }
        public static new GetManagedDatabaseUserDataAccessContainersInvokeArgs Empty => new GetManagedDatabaseUserDataAccessContainersInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedDatabaseUserDataAccessContainersResult
    {
        /// <summary>
        /// The list of data_access_container_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult> DataAccessContainerCollections;
        public readonly ImmutableArray<Outputs.GetManagedDatabaseUserDataAccessContainersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ManagedDatabaseId;
        /// <summary>
        /// The name of the container included in the attribute.
        /// </summary>
        public readonly string? Name;
        public readonly string? OpcNamedCredentialId;
        public readonly string UserName;

        [OutputConstructor]
        private GetManagedDatabaseUserDataAccessContainersResult(
            ImmutableArray<Outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult> dataAccessContainerCollections,

            ImmutableArray<Outputs.GetManagedDatabaseUserDataAccessContainersFilterResult> filters,

            string id,

            string managedDatabaseId,

            string? name,

            string? opcNamedCredentialId,

            string userName)
        {
            DataAccessContainerCollections = dataAccessContainerCollections;
            Filters = filters;
            Id = id;
            ManagedDatabaseId = managedDatabaseId;
            Name = name;
            OpcNamedCredentialId = opcNamedCredentialId;
            UserName = userName;
        }
    }
}
