// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetManagedMySqlDatabase
    {
        /// <summary>
        /// This data source provides details about a specific Managed My Sql Database resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves General Information for given MySQL Instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabase = Oci.DatabaseManagement.GetManagedMySqlDatabase.Invoke(new()
        ///     {
        ///         ManagedMySqlDatabaseId = oci_database_management_managed_my_sql_database.Test_managed_my_sql_database.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedMySqlDatabaseResult> InvokeAsync(GetManagedMySqlDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedMySqlDatabaseResult>("oci:DatabaseManagement/getManagedMySqlDatabase:getManagedMySqlDatabase", args ?? new GetManagedMySqlDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Managed My Sql Database resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves General Information for given MySQL Instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabase = Oci.DatabaseManagement.GetManagedMySqlDatabase.Invoke(new()
        ///     {
        ///         ManagedMySqlDatabaseId = oci_database_management_managed_my_sql_database.Test_managed_my_sql_database.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedMySqlDatabaseResult> Invoke(GetManagedMySqlDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedMySqlDatabaseResult>("oci:DatabaseManagement/getManagedMySqlDatabase:getManagedMySqlDatabase", args ?? new GetManagedMySqlDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedMySqlDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of ManagedMySqlDatabase.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public string ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseArgs()
        {
        }
        public static new GetManagedMySqlDatabaseArgs Empty => new GetManagedMySqlDatabaseArgs();
    }

    public sealed class GetManagedMySqlDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of ManagedMySqlDatabase.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public Input<string> ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseInvokeArgs()
        {
        }
        public static new GetManagedMySqlDatabaseInvokeArgs Empty => new GetManagedMySqlDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedMySqlDatabaseResult
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The name of the MySQL Database.
        /// </summary>
        public readonly string DbName;
        /// <summary>
        /// The version of the MySQL Database.
        /// </summary>
        public readonly string DbVersion;
        /// <summary>
        /// The name of the HeatWave cluster.
        /// </summary>
        public readonly string HeatWaveClusterDisplayName;
        /// <summary>
        /// The total memory belonging to the HeatWave cluster in GBs.
        /// </summary>
        public readonly int HeatWaveMemorySize;
        /// <summary>
        /// Shape of the nodes in the HeatWave cluster.
        /// </summary>
        public readonly string HeatWaveNodeShape;
        /// <summary>
        /// The information about an individual HeatWave nodes in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedMySqlDatabaseHeatWaveNodeResult> HeatWaveNodes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If the HeatWave cluster is active or not.
        /// </summary>
        public readonly bool IsHeatWaveActive;
        /// <summary>
        /// If HeatWave is enabled for this db system or not.
        /// </summary>
        public readonly bool IsHeatWaveEnabled;
        /// <summary>
        /// If HeatWave Lakehouse is enabled for the db system or not.
        /// </summary>
        public readonly bool IsLakehouseEnabled;
        public readonly string ManagedMySqlDatabaseId;
        /// <summary>
        /// The name of the Managed MySQL Database.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The date and time the node was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the Managed MySQL Database was created.
        /// </summary>
        public readonly string TimeCreatedHeatWave;

        [OutputConstructor]
        private GetManagedMySqlDatabaseResult(
            string compartmentId,

            string dbName,

            string dbVersion,

            string heatWaveClusterDisplayName,

            int heatWaveMemorySize,

            string heatWaveNodeShape,

            ImmutableArray<Outputs.GetManagedMySqlDatabaseHeatWaveNodeResult> heatWaveNodes,

            string id,

            bool isHeatWaveActive,

            bool isHeatWaveEnabled,

            bool isLakehouseEnabled,

            string managedMySqlDatabaseId,

            string name,

            string timeCreated,

            string timeCreatedHeatWave)
        {
            CompartmentId = compartmentId;
            DbName = dbName;
            DbVersion = dbVersion;
            HeatWaveClusterDisplayName = heatWaveClusterDisplayName;
            HeatWaveMemorySize = heatWaveMemorySize;
            HeatWaveNodeShape = heatWaveNodeShape;
            HeatWaveNodes = heatWaveNodes;
            Id = id;
            IsHeatWaveActive = isHeatWaveActive;
            IsHeatWaveEnabled = isHeatWaveEnabled;
            IsLakehouseEnabled = isLakehouseEnabled;
            ManagedMySqlDatabaseId = managedMySqlDatabaseId;
            Name = name;
            TimeCreated = timeCreated;
            TimeCreatedHeatWave = timeCreatedHeatWave;
        }
    }
}
