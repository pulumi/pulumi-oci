// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetManagedMySqlDatabaseDigestErrors
    {
        /// <summary>
        /// This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves any potential errors for a given digest.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseDigestErrors = Oci.DatabaseManagement.GetManagedMySqlDatabaseDigestErrors.Invoke(new()
        ///     {
        ///         Digest = managedMySqlDatabaseDigestErrorDigest,
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedMySqlDatabaseDigestErrorsResult> InvokeAsync(GetManagedMySqlDatabaseDigestErrorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedMySqlDatabaseDigestErrorsResult>("oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors", args ?? new GetManagedMySqlDatabaseDigestErrorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves any potential errors for a given digest.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseDigestErrors = Oci.DatabaseManagement.GetManagedMySqlDatabaseDigestErrors.Invoke(new()
        ///     {
        ///         Digest = managedMySqlDatabaseDigestErrorDigest,
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedMySqlDatabaseDigestErrorsResult> Invoke(GetManagedMySqlDatabaseDigestErrorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedMySqlDatabaseDigestErrorsResult>("oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors", args ?? new GetManagedMySqlDatabaseDigestErrorsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves any potential errors for a given digest.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseDigestErrors = Oci.DatabaseManagement.GetManagedMySqlDatabaseDigestErrors.Invoke(new()
        ///     {
        ///         Digest = managedMySqlDatabaseDigestErrorDigest,
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedMySqlDatabaseDigestErrorsResult> Invoke(GetManagedMySqlDatabaseDigestErrorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedMySqlDatabaseDigestErrorsResult>("oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors", args ?? new GetManagedMySqlDatabaseDigestErrorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedMySqlDatabaseDigestErrorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The digest of a MySQL normalized query.
        /// </summary>
        [Input("digest", required: true)]
        public string Digest { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterArgs>? _filters;
        public List<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the Managed MySQL Database.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public string ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseDigestErrorsArgs()
        {
        }
        public static new GetManagedMySqlDatabaseDigestErrorsArgs Empty => new GetManagedMySqlDatabaseDigestErrorsArgs();
    }

    public sealed class GetManagedMySqlDatabaseDigestErrorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The digest of a MySQL normalized query.
        /// </summary>
        [Input("digest", required: true)]
        public Input<string> Digest { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagedMySqlDatabaseDigestErrorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the Managed MySQL Database.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public Input<string> ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseDigestErrorsInvokeArgs()
        {
        }
        public static new GetManagedMySqlDatabaseDigestErrorsInvokeArgs Empty => new GetManagedMySqlDatabaseDigestErrorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedMySqlDatabaseDigestErrorsResult
    {
        public readonly string Digest;
        public readonly ImmutableArray<Outputs.GetManagedMySqlDatabaseDigestErrorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ManagedMySqlDatabaseId;
        /// <summary>
        /// The list of my_sql_digest_errors_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollectionResult> MySqlDigestErrorsCollections;

        [OutputConstructor]
        private GetManagedMySqlDatabaseDigestErrorsResult(
            string digest,

            ImmutableArray<Outputs.GetManagedMySqlDatabaseDigestErrorsFilterResult> filters,

            string id,

            string managedMySqlDatabaseId,

            ImmutableArray<Outputs.GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollectionResult> mySqlDigestErrorsCollections)
        {
            Digest = digest;
            Filters = filters;
            Id = id;
            ManagedMySqlDatabaseId = managedMySqlDatabaseId;
            MySqlDigestErrorsCollections = mySqlDigestErrorsCollections;
        }
    }
}
