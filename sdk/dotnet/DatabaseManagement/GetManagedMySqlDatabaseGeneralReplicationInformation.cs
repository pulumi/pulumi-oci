// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement
{
    public static class GetManagedMySqlDatabaseGeneralReplicationInformation
    {
        /// <summary>
        /// This data source provides details about a specific Managed My Sql Database General Replication Information resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves general information regarding the replication of a specific MySQL server.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseGeneralReplicationInformation = Oci.DatabaseManagement.GetManagedMySqlDatabaseGeneralReplicationInformation.Invoke(new()
        ///     {
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedMySqlDatabaseGeneralReplicationInformationResult> InvokeAsync(GetManagedMySqlDatabaseGeneralReplicationInformationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedMySqlDatabaseGeneralReplicationInformationResult>("oci:DatabaseManagement/getManagedMySqlDatabaseGeneralReplicationInformation:getManagedMySqlDatabaseGeneralReplicationInformation", args ?? new GetManagedMySqlDatabaseGeneralReplicationInformationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Managed My Sql Database General Replication Information resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves general information regarding the replication of a specific MySQL server.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseGeneralReplicationInformation = Oci.DatabaseManagement.GetManagedMySqlDatabaseGeneralReplicationInformation.Invoke(new()
        ///     {
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedMySqlDatabaseGeneralReplicationInformationResult> Invoke(GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedMySqlDatabaseGeneralReplicationInformationResult>("oci:DatabaseManagement/getManagedMySqlDatabaseGeneralReplicationInformation:getManagedMySqlDatabaseGeneralReplicationInformation", args ?? new GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Managed My Sql Database General Replication Information resource in Oracle Cloud Infrastructure Database Management service.
        /// 
        /// Retrieves general information regarding the replication of a specific MySQL server.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedMySqlDatabaseGeneralReplicationInformation = Oci.DatabaseManagement.GetManagedMySqlDatabaseGeneralReplicationInformation.Invoke(new()
        ///     {
        ///         ManagedMySqlDatabaseId = testManagedMySqlDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedMySqlDatabaseGeneralReplicationInformationResult> Invoke(GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedMySqlDatabaseGeneralReplicationInformationResult>("oci:DatabaseManagement/getManagedMySqlDatabaseGeneralReplicationInformation:getManagedMySqlDatabaseGeneralReplicationInformation", args ?? new GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedMySqlDatabaseGeneralReplicationInformationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Managed MySQL Database.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public string ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseGeneralReplicationInformationArgs()
        {
        }
        public static new GetManagedMySqlDatabaseGeneralReplicationInformationArgs Empty => new GetManagedMySqlDatabaseGeneralReplicationInformationArgs();
    }

    public sealed class GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Managed MySQL Database.
        /// </summary>
        [Input("managedMySqlDatabaseId", required: true)]
        public Input<string> ManagedMySqlDatabaseId { get; set; } = null!;

        public GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs()
        {
        }
        public static new GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs Empty => new GetManagedMySqlDatabaseGeneralReplicationInformationInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedMySqlDatabaseGeneralReplicationInformationResult
    {
        /// <summary>
        /// A summary of the current status of apply operations.
        /// </summary>
        public readonly string ApplyStatusSummary;
        /// <summary>
        /// The binary logging format used by this server.
        /// </summary>
        public readonly string BinaryLogFormat;
        /// <summary>
        /// The status of binary logging on this server.
        /// </summary>
        public readonly string BinaryLogging;
        /// <summary>
        /// The set of global transaction identifiers for transactions that have been executed on this source server.
        /// </summary>
        public readonly string ExecutedGtidSet;
        /// <summary>
        /// A summary of the current status of fetch operations.
        /// </summary>
        public readonly string FetchStatusSummary;
        /// <summary>
        /// The Global Transaction Identifier (GTID) mode of this server.
        /// </summary>
        public readonly string GtidMode;
        /// <summary>
        /// The state of this server as a group replication member.
        /// </summary>
        public readonly string HighAvailabilityMemberState;
        /// <summary>
        /// This server's host name.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of sources this server is replicating from.
        /// </summary>
        public readonly int InboundReplicationsCount;
        /// <summary>
        /// The type of the instance for example, Source, Replica, Primary Group Member, and Secondary Group Member. If the instance is replicating from one or more sources and has one or more replicas, which means, it belongs to a replication chain, the instance type can be Replica/Source.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// Specifies if high availability is enabled on this server.
        /// </summary>
        public readonly bool IsHighAvailabilityEnabled;
        public readonly string ManagedMySqlDatabaseId;
        /// <summary>
        /// The number of replicas replicating from this server.
        /// </summary>
        public readonly int OutboundReplicationsCount;
        /// <summary>
        /// The number of the port on which the server listens for TCP/IP connections.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// If the value is ON, the instance is configured as read_only. If the value is SUPER, the instance is configured as super_read_only. If the value is OFF, the instance is neither read_only nor super_read_only.
        /// </summary>
        public readonly string ReadOnly;
        /// <summary>
        /// The number of seconds the replica is behind the source. When multiple sources are involved, this is the maximum value across all sources.
        /// </summary>
        public readonly string SecondsBehindSourceMax;
        /// <summary>
        /// This server's ID.
        /// </summary>
        public readonly string ServerId;
        /// <summary>
        /// This server's Universally Unique Identifier (UUID).
        /// </summary>
        public readonly string ServerUuid;

        [OutputConstructor]
        private GetManagedMySqlDatabaseGeneralReplicationInformationResult(
            string applyStatusSummary,

            string binaryLogFormat,

            string binaryLogging,

            string executedGtidSet,

            string fetchStatusSummary,

            string gtidMode,

            string highAvailabilityMemberState,

            string hostName,

            string id,

            int inboundReplicationsCount,

            string instanceType,

            bool isHighAvailabilityEnabled,

            string managedMySqlDatabaseId,

            int outboundReplicationsCount,

            int port,

            string readOnly,

            string secondsBehindSourceMax,

            string serverId,

            string serverUuid)
        {
            ApplyStatusSummary = applyStatusSummary;
            BinaryLogFormat = binaryLogFormat;
            BinaryLogging = binaryLogging;
            ExecutedGtidSet = executedGtidSet;
            FetchStatusSummary = fetchStatusSummary;
            GtidMode = gtidMode;
            HighAvailabilityMemberState = highAvailabilityMemberState;
            HostName = hostName;
            Id = id;
            InboundReplicationsCount = inboundReplicationsCount;
            InstanceType = instanceType;
            IsHighAvailabilityEnabled = isHighAvailabilityEnabled;
            ManagedMySqlDatabaseId = managedMySqlDatabaseId;
            OutboundReplicationsCount = outboundReplicationsCount;
            Port = port;
            ReadOnly = readOnly;
            SecondsBehindSourceMax = secondsBehindSourceMax;
            ServerId = serverId;
            ServerUuid = serverUuid;
        }
    }
}
