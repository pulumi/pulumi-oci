// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement.Inputs
{

    public sealed class DatabaseDbmFeaturesManagementFeatureDetailsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether Diagnostics &amp; Management should be enabled for all the current pluggable databases in the container database.
        /// </summary>
        [Input("canEnableAllCurrentPdbs")]
        public Input<bool>? CanEnableAllCurrentPdbs { get; set; }

        /// <summary>
        /// The connector details required to connect to an Oracle cloud database.
        /// </summary>
        [Input("connectorDetails")]
        public Input<Inputs.DatabaseDbmFeaturesManagementFeatureDetailsConnectorDetailsGetArgs>? ConnectorDetails { get; set; }

        /// <summary>
        /// The connection details required to connect to the database.
        /// </summary>
        [Input("databaseConnectionDetails")]
        public Input<Inputs.DatabaseDbmFeaturesManagementFeatureDetailsDatabaseConnectionDetailsGetArgs>? DatabaseConnectionDetails { get; set; }

        /// <summary>
        /// The name of the Database Management feature.
        /// </summary>
        [Input("feature", required: true)]
        public Input<string> Feature { get; set; } = null!;

        /// <summary>
        /// Indicates whether Diagnostics &amp; Management should be enabled automatically for all the pluggable databases in the container database.
        /// </summary>
        [Input("isAutoEnablePluggableDatabase")]
        public Input<bool>? IsAutoEnablePluggableDatabase { get; set; }

        /// <summary>
        /// The management type for the database. Use "BASIC" for basic management. Use "ADVANCED" for full management.
        /// </summary>
        [Input("managementType")]
        public Input<string>? ManagementType { get; set; }

        public DatabaseDbmFeaturesManagementFeatureDetailsGetArgs()
        {
        }
        public static new DatabaseDbmFeaturesManagementFeatureDetailsGetArgs Empty => new DatabaseDbmFeaturesManagementFeatureDetailsGetArgs();
    }
}
