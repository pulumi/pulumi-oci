// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement.Inputs
{

    public sealed class ManagedDatabasesResetDatabaseParameterDatabaseCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the credential for tablespace administration tasks.
        /// </summary>
        [Input("credentialType", required: true)]
        public Input<string> CredentialType { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the named credential where the database password metadata is stored.
        /// </summary>
        [Input("namedCredentialId")]
        public Input<string>? NamedCredentialId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The database user's password encoded using BASE64 scheme.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("passwordSecretId")]
        private Input<string>? _passwordSecretId;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the database password is stored.
        /// </summary>
        public Input<string>? PasswordSecretId
        {
            get => _passwordSecretId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passwordSecretId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The role of the database user.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The user to connect to the database.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedDatabasesResetDatabaseParameterDatabaseCredentialArgs()
        {
        }
        public static new ManagedDatabasesResetDatabaseParameterDatabaseCredentialArgs Empty => new ManagedDatabasesResetDatabaseParameterDatabaseCredentialArgs();
    }
}
