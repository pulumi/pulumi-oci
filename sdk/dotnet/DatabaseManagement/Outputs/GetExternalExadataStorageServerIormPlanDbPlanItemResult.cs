// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement.Outputs
{

    [OutputType]
    public sealed class GetExternalExadataStorageServerIormPlanDbPlanItemResult
    {
        /// <summary>
        /// The resource allocation as a percentage (0-100) within the level.
        /// </summary>
        public readonly int Allocation;
        /// <summary>
        /// Starting with Oracle Exadata System Software release 19.1.0, you can use the asmcluster attribute to distinguish between databases with the same name running in different Oracle ASM clusters.
        /// </summary>
        public readonly string AsmCluster;
        /// <summary>
        /// Defines a soft limit for space usage in Exadata Smart Flash Cache. If the cache is not full, the limit can be exceeded. You specify the value for flashcachelimit in bytes. You can also use the suffixes M (megabytes), G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T. The value for flashcachelimit must be at least 4 MB. The flashcachelimit and flashcachesize attributes cannot be specified in the same directive. The value for flashcachelimit cannot be smaller than flashcachemin, if it is specified.
        /// </summary>
        public readonly string FlashCacheLimit;
        /// <summary>
        /// Specifies a minimum guaranteed space allocation in Exadata Smart Flash Cache. You specify the value for flashcachemin in bytes. You can also use the suffixes M (megabytes), G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T. The value for flashcachemin must be at least 4 MB. In any plan, the sum of all flashcachemin values cannot exceed the size of Exadata Smart Flash Cache. If flashcachelimit is specified, then the value for flashcachemin cannot exceed flashcachelimit. If flashcachesize is specified, then the value for flashcachemin cannot exceed flashcachesize.
        /// </summary>
        public readonly string FlashCacheMin;
        /// <summary>
        /// Defines a hard limit for space usage in Exadata Smart Flash Cache. The limit cannot be exceeded, even if the cache is not full. In an IORM plan, if the size of Exadata Smart Flash Cache can accommodate all of the flashcachemin and flashcachesize allocations, then each flashcachesize definition represents a guaranteed space allocation. However, starting with Oracle Exadata System Software release 19.2.0 you can use the flashcachesize attribute to over-provision space in Exadata Smart Flash Cache. Consequently, if the size of Exadata Smart Flash Cache cannot accommodate all of the flashcachemin and flashcachesize allocations, then only flashcachemin is guaranteed.
        /// </summary>
        public readonly string FlashCacheSize;
        /// <summary>
        /// Controls use of Exadata Smart Flash Cache by a database. This ensures that cache space is reserved for mission-critical databases. flashcache=off is invalid in a directive that contains the flashcachemin, flashcachelimit, or flashcachesize attributes.
        /// </summary>
        public readonly bool IsFlashCacheOn;
        /// <summary>
        /// Controls use of Exadata Smart Flash Log by a database. This ensures that Exadata Smart Flash Log is reserved for mission-critical databases.
        /// </summary>
        public readonly bool IsFlashLogOn;
        /// <summary>
        /// Controls use of the persistent memory (PMEM) cache by a database. This ensures that cache space is reserved for mission-critical databases. pmemcache=off is invalid in a directive that contains the pmemcachemin, pmemcachelimit, or pmemcachesize attributes.
        /// </summary>
        public readonly bool IsPmemCacheOn;
        /// <summary>
        /// Controls use of persistent memory logging (PMEM log) by a database. This ensures that PMEM log is reserved for mission-critical databases.
        /// </summary>
        public readonly bool IsPmemLogOn;
        /// <summary>
        /// The allocation level. Valid values are from 1 to 8. Resources are allocated to level 1 first, and then remaining resources are allocated to level 2, and so on.
        /// </summary>
        public readonly int Level;
        public readonly int Limit;
        /// <summary>
        /// The name of a database or a profile.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Defines a soft limit for space usage in the persistent memory (PMEM) cache. If the cache is not full, the limit can be exceeded. You specify the value for pmemcachelimit in bytes. You can also use the suffixes M (megabytes), G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T. The value for pmemcachelimit must be at least 4 MB. The pmemcachelimit and pmemcachesize attributes cannot be specified in the same directive. The value for pmemcachelimit cannot be smaller than pmemcachemin, if it is specified.
        /// </summary>
        public readonly string PmemCacheLimit;
        /// <summary>
        /// Specifies a minimum guaranteed space allocation in the persistent memory (PMEM) cache.
        /// </summary>
        public readonly string PmemCacheMin;
        /// <summary>
        /// Defines a hard limit for space usage in the persistent memory (PMEM) cache. The limit cannot be exceeded, even if the cache is not full. In an IORM plan, if the size of the PMEM cache can accommodate all of the pmemcachemin and pmemcachesize allocations, then each pmemcachesize definition represents a guaranteed space allocation. However, you can use the pmemcachesize attribute to over-provision space in the PMEM cache. Consequently, if the PMEM cache size cannot accommodate all of the pmemcachemin and pmemcachesize allocations, then only pmemcachemin is guaranteed.
        /// </summary>
        public readonly string PmemCacheSize;
        /// <summary>
        /// Enables you to specify different plan directives based on the Oracle Data Guard database role.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The relative priority of a database in the database plan. A higher share value implies higher priority and more access to the I/O resources. Use either share or (level, allocation). All plan directives in a database plan should use the same setting. Share-based resource allocation is the recommended method for a database plan.
        /// </summary>
        public readonly int Share;
        /// <summary>
        /// Enables you to create a profile or template, to ease management and configuration of resource plans in environments with many databases.
        /// * type=database: Specifies a directive that applies to a specific database. If type in not specified, then the directive defaults to the database type.
        /// * type=profile: Specifies a directive that applies to a profile rather than a specific database.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetExternalExadataStorageServerIormPlanDbPlanItemResult(
            int allocation,

            string asmCluster,

            string flashCacheLimit,

            string flashCacheMin,

            string flashCacheSize,

            bool isFlashCacheOn,

            bool isFlashLogOn,

            bool isPmemCacheOn,

            bool isPmemLogOn,

            int level,

            int limit,

            string name,

            string pmemCacheLimit,

            string pmemCacheMin,

            string pmemCacheSize,

            string role,

            int share,

            string type)
        {
            Allocation = allocation;
            AsmCluster = asmCluster;
            FlashCacheLimit = flashCacheLimit;
            FlashCacheMin = flashCacheMin;
            FlashCacheSize = flashCacheSize;
            IsFlashCacheOn = isFlashCacheOn;
            IsFlashLogOn = isFlashLogOn;
            IsPmemCacheOn = isPmemCacheOn;
            IsPmemLogOn = isPmemLogOn;
            Level = level;
            Limit = limit;
            Name = name;
            PmemCacheLimit = pmemCacheLimit;
            PmemCacheMin = pmemCacheMin;
            PmemCacheSize = pmemCacheSize;
            Role = role;
            Share = share;
            Type = type;
        }
    }
}
