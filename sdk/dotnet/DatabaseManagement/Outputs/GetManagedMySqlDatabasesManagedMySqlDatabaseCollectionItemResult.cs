// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseManagement.Outputs
{

    [OutputType]
    public sealed class GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The type of the MySQL Database. Indicates whether the database is external or MDS.
        /// </summary>
        public readonly string DatabaseType;
        /// <summary>
        /// The name of the MySQL Database.
        /// </summary>
        public readonly string DbName;
        /// <summary>
        /// The version of the MySQL Database.
        /// </summary>
        public readonly string DbVersion;
        /// <summary>
        /// The name of the HeatWave cluster.
        /// </summary>
        public readonly string HeatWaveClusterDisplayName;
        /// <summary>
        /// The customer's selected type for HeatWave management.
        /// </summary>
        public readonly string HeatWaveManagementType;
        /// <summary>
        /// The total memory belonging to the HeatWave cluster in GBs.
        /// </summary>
        public readonly int HeatWaveMemorySize;
        /// <summary>
        /// Shape of the nodes in the HeatWave cluster.
        /// </summary>
        public readonly string HeatWaveNodeShape;
        /// <summary>
        /// The information about an individual HeatWave nodes in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemHeatWaveNodeResult> HeatWaveNodes;
        /// <summary>
        /// The ID associated with the HeatWave node.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If the HeatWave cluster is active or not.
        /// </summary>
        public readonly bool IsHeatWaveActive;
        /// <summary>
        /// If HeatWave is enabled for this db system or not.
        /// </summary>
        public readonly bool IsHeatWaveEnabled;
        /// <summary>
        /// If HeatWave Lakehouse is enabled for the db system or not.
        /// </summary>
        public readonly bool IsLakehouseEnabled;
        /// <summary>
        /// Indicates database management status.
        /// </summary>
        public readonly string ManagementState;
        /// <summary>
        /// The name of the Managed MySQL Database.
        /// </summary>
        public readonly string Name;
        public readonly string State;
        /// <summary>
        /// The date and time the node was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the Managed MySQL Database was created.
        /// </summary>
        public readonly string TimeCreatedHeatWave;
        /// <summary>
        /// The date and time the Managed MySQL Database was updated.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemResult(
            string compartmentId,

            string databaseType,

            string dbName,

            string dbVersion,

            string heatWaveClusterDisplayName,

            string heatWaveManagementType,

            int heatWaveMemorySize,

            string heatWaveNodeShape,

            ImmutableArray<Outputs.GetManagedMySqlDatabasesManagedMySqlDatabaseCollectionItemHeatWaveNodeResult> heatWaveNodes,

            string id,

            bool isHeatWaveActive,

            bool isHeatWaveEnabled,

            bool isLakehouseEnabled,

            string managementState,

            string name,

            string state,

            string timeCreated,

            string timeCreatedHeatWave,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DatabaseType = databaseType;
            DbName = dbName;
            DbVersion = dbVersion;
            HeatWaveClusterDisplayName = heatWaveClusterDisplayName;
            HeatWaveManagementType = heatWaveManagementType;
            HeatWaveMemorySize = heatWaveMemorySize;
            HeatWaveNodeShape = heatWaveNodeShape;
            HeatWaveNodes = heatWaveNodes;
            Id = id;
            IsHeatWaveActive = isHeatWaveActive;
            IsHeatWaveEnabled = isHeatWaveEnabled;
            IsLakehouseEnabled = isLakehouseEnabled;
            ManagementState = managementState;
            Name = name;
            State = state;
            TimeCreated = timeCreated;
            TimeCreatedHeatWave = timeCreatedHeatWave;
            TimeUpdated = timeUpdated;
        }
    }
}
