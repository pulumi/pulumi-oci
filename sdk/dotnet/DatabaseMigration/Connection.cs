// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseMigration
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testConnection = new Oci.DatabaseMigration.Connection("test_connection", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         ConnectionType = connectionConnectionType,
    ///         DisplayName = connectionDisplayName,
    ///         KeyId = testKey.Id,
    ///         Password = connectionPassword,
    ///         TechnologyType = connectionTechnologyType,
    ///         Username = connectionUsername,
    ///         VaultId = testVault.Id,
    ///         AdditionalAttributes = new[]
    ///         {
    ///             new Oci.DatabaseMigration.Inputs.ConnectionAdditionalAttributeArgs
    ///             {
    ///                 Name = connectionAdditionalAttributesName,
    ///                 Value = connectionAdditionalAttributesValue,
    ///             },
    ///         },
    ///         ConnectionString = connectionConnectionString,
    ///         DatabaseId = testDatabase.Id,
    ///         DatabaseName = testDatabase.Name,
    ///         DbSystemId = testDbSystem.Id,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         Description = connectionDescription,
    ///         FreeformTags = connectionFreeformTags,
    ///         Host = connectionHost,
    ///         NsgIds = connectionNsgIds,
    ///         Port = connectionPort,
    ///         ReplicationPassword = connectionReplicationPassword,
    ///         ReplicationUsername = connectionReplicationUsername,
    ///         SecurityProtocol = connectionSecurityProtocol,
    ///         SshHost = connectionSshHost,
    ///         SshKey = connectionSshKey,
    ///         SshSudoLocation = connectionSshSudoLocation,
    ///         SshUser = connectionSshUser,
    ///         SslCa = connectionSslCa,
    ///         SslCert = connectionSslCert,
    ///         SslCrl = connectionSslCrl,
    ///         SslKey = connectionSslKey,
    ///         SslMode = connectionSslMode,
    ///         SubnetId = testSubnet.Id,
    ///         Wallet = connectionWallet,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connections can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DatabaseMigration/connection:Connection test_connection "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:DatabaseMigration/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries.
        /// </summary>
        [Output("additionalAttributes")]
        public Output<ImmutableArray<Outputs.ConnectionAdditionalAttribute>> AdditionalAttributes { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
        /// </summary>
        [Output("connectionString")]
        public Output<string> ConnectionString { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defines the type of connection. For example, ORACLE.
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the database being referenced.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the database being referenced.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the database system being referenced.
        /// </summary>
        [Output("dbSystemId")]
        public Output<string> DbSystemId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The IP Address of the host.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// List of ingress IP addresses from where to connect to this connection's privateIp.
        /// </summary>
        [Output("ingressIps")]
        public Output<ImmutableArray<Outputs.ConnectionIngressIp>> IngressIps { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the key used in cryptographic operations.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
        /// </summary>
        [Output("nsgIds")]
        public Output<ImmutableArray<string>> NsgIds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The port to be used for the connection.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        [Output("privateEndpointId")]
        public Output<string> PrivateEndpointId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        [Output("replicationPassword")]
        public Output<string> ReplicationPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Output("replicationUsername")]
        public Output<string> ReplicationUsername { get; private set; } = null!;

        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Security Type for MySQL.
        /// </summary>
        [Output("securityProtocol")]
        public Output<string> SecurityProtocol { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name of the host the SSH key is valid for.
        /// </summary>
        [Output("sshHost")]
        public Output<string> SshHost { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Private SSH key string.
        /// </summary>
        [Output("sshKey")]
        public Output<string> SshKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Sudo location
        /// </summary>
        [Output("sshSudoLocation")]
        public Output<string> SshSudoLocation { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Output("sshUser")]
        public Output<string> SshUser { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Output("sslCa")]
        public Output<string> SslCa { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Output("sslCert")]
        public Output<string> SslCert { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Output("sslCrl")]
        public Output<string> SslCrl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Output("sslKey")]
        public Output<string> SslKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) SSL modes for MySQL.
        /// </summary>
        [Output("sslMode")]
        public Output<string> SslMode { get; private set; } = null!;

        /// <summary>
        /// The Connection's current lifecycle state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
        /// </summary>
        [Output("technologyType")]
        public Output<string> TechnologyType { get; private set; } = null!;

        /// <summary>
        /// The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("wallet")]
        public Output<string> Wallet { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("oci:DatabaseMigration/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("oci:DatabaseMigration/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                    "replicationPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalAttributes")]
        private InputList<Inputs.ConnectionAdditionalAttributeArgs>? _additionalAttributes;

        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries.
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalAttributeArgs> AdditionalAttributes
        {
            get => _additionalAttributes ?? (_additionalAttributes = new InputList<Inputs.ConnectionAdditionalAttributeArgs>());
            set => _additionalAttributes = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
        /// </summary>
        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        /// <summary>
        /// (Updatable) Defines the type of connection. For example, ORACLE.
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the database being referenced.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// (Updatable) The name of the database being referenced.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the database system being referenced.
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The IP Address of the host.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the key used in cryptographic operations.
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The port to be used for the connection.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicationPassword")]
        private Input<string>? _replicationPassword;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        public Input<string>? ReplicationPassword
        {
            get => _replicationPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _replicationPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("replicationUsername")]
        public Input<string>? ReplicationUsername { get; set; }

        /// <summary>
        /// (Updatable) Security Type for MySQL.
        /// </summary>
        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        /// <summary>
        /// (Updatable) Name of the host the SSH key is valid for.
        /// </summary>
        [Input("sshHost")]
        public Input<string>? SshHost { get; set; }

        /// <summary>
        /// (Updatable) Private SSH key string.
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// (Updatable) Sudo location
        /// </summary>
        [Input("sshSudoLocation")]
        public Input<string>? SshSudoLocation { get; set; }

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Input("sslCa")]
        public Input<string>? SslCa { get; set; }

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Input("sslCert")]
        public Input<string>? SslCert { get; set; }

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Input("sslCrl")]
        public Input<string>? SslCrl { get; set; }

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Input("sslKey")]
        public Input<string>? SslKey { get; set; }

        /// <summary>
        /// (Updatable) SSL modes for MySQL.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
        /// </summary>
        [Input("technologyType", required: true)]
        public Input<string> TechnologyType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("wallet")]
        public Input<string>? Wallet { get; set; }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("additionalAttributes")]
        private InputList<Inputs.ConnectionAdditionalAttributeGetArgs>? _additionalAttributes;

        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries.
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalAttributeGetArgs> AdditionalAttributes
        {
            get => _additionalAttributes ?? (_additionalAttributes = new InputList<Inputs.ConnectionAdditionalAttributeGetArgs>());
            set => _additionalAttributes = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
        /// </summary>
        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        /// <summary>
        /// (Updatable) Defines the type of connection. For example, ORACLE.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the database being referenced.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// (Updatable) The name of the database being referenced.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the database system being referenced.
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The IP Address of the host.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("ingressIps")]
        private InputList<Inputs.ConnectionIngressIpGetArgs>? _ingressIps;

        /// <summary>
        /// List of ingress IP addresses from where to connect to this connection's privateIp.
        /// </summary>
        public InputList<Inputs.ConnectionIngressIpGetArgs> IngressIps
        {
            get => _ingressIps ?? (_ingressIps = new InputList<Inputs.ConnectionIngressIpGetArgs>());
            set => _ingressIps = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the key used in cryptographic operations.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for Connections.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The port to be used for the connection.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        [Input("privateEndpointId")]
        public Input<string>? PrivateEndpointId { get; set; }

        [Input("replicationPassword")]
        private Input<string>? _replicationPassword;

        /// <summary>
        /// (Updatable) The password (credential) used when creating or updating this resource.
        /// </summary>
        public Input<string>? ReplicationPassword
        {
            get => _replicationPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _replicationPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("replicationUsername")]
        public Input<string>? ReplicationUsername { get; set; }

        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// (Updatable) Security Type for MySQL.
        /// </summary>
        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        /// <summary>
        /// (Updatable) Name of the host the SSH key is valid for.
        /// </summary>
        [Input("sshHost")]
        public Input<string>? SshHost { get; set; }

        /// <summary>
        /// (Updatable) Private SSH key string.
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// (Updatable) Sudo location
        /// </summary>
        [Input("sshSudoLocation")]
        public Input<string>? SshSudoLocation { get; set; }

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Input("sslCa")]
        public Input<string>? SslCa { get; set; }

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Input("sslCert")]
        public Input<string>? SslCert { get; set; }

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Input("sslCrl")]
        public Input<string>? SslCrl { get; set; }

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Input("sslKey")]
        public Input<string>? SslKey { get; set; }

        /// <summary>
        /// (Updatable) SSL modes for MySQL.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// The Connection's current lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
        /// </summary>
        [Input("technologyType")]
        public Input<string>? TechnologyType { get; set; }

        /// <summary>
        /// The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The username (credential) used when creating or updating this resource.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure resource ID.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        /// <summary>
        /// (Updatable) The wallet contents used to make connections to a database.  This attribute is expected to be base64 encoded.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("wallet")]
        public Input<string>? Wallet { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
