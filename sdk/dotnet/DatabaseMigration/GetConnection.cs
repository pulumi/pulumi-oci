// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseMigration
{
    public static class GetConnection
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnection = Oci.DatabaseMigration.GetConnection.Invoke(new()
        ///     {
        ///         ConnectionId = testConnectionOciDatabaseMigrationConnection.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("oci:DatabaseMigration/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnection = Oci.DatabaseMigration.GetConnection.Invoke(new()
        ///     {
        ///         ConnectionId = testConnectionOciDatabaseMigrationConnection.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("oci:DatabaseMigration/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the database connection.
        /// </summary>
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the database connection.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// An array of name-value pair attribute entries.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionAdditionalAttributeResult> AdditionalAttributes;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string ConnectionId;
        /// <summary>
        /// Connect descriptor or Easy Connect Naming method used to connect to a database.
        /// </summary>
        public readonly string ConnectionString;
        /// <summary>
        /// Defines the type of connection. For example, ORACLE.
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// The OCID of the database being referenced.
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// The name of the database being referenced.
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// The OCID of the database system being referenced.
        /// </summary>
        public readonly string DbSystemId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The IP Address of the host.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The OCID of the connection being referenced.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of ingress IP addresses from where to connect to this connection's privateIp.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionIngressIpResult> IngressIps;
        /// <summary>
        /// The OCID of the key used in cryptographic operations.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// An array of Network Security Group OCIDs used to define network access for Connections.
        /// </summary>
        public readonly ImmutableArray<string> NsgIds;
        /// <summary>
        /// The password (credential) used when creating or updating this resource.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The port to be used for the connection.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        public readonly string PrivateEndpointId;
        /// <summary>
        /// The password (credential) used when creating or updating this resource.
        /// </summary>
        public readonly string ReplicationPassword;
        /// <summary>
        /// The username (credential) used when creating or updating this resource.
        /// </summary>
        public readonly string ReplicationUsername;
        /// <summary>
        /// The OCID of the resource being referenced.
        /// </summary>
        public readonly string SecretId;
        /// <summary>
        /// Security Protocol to be used for the connection.
        /// </summary>
        public readonly string SecurityProtocol;
        /// <summary>
        /// Name of the host the SSH key is valid for.
        /// </summary>
        public readonly string SshHost;
        /// <summary>
        /// Private SSH key string.
        /// </summary>
        public readonly string SshKey;
        /// <summary>
        /// Sudo location
        /// </summary>
        public readonly string SshSudoLocation;
        /// <summary>
        /// The username (credential) used when creating or updating this resource.
        /// </summary>
        public readonly string SshUser;
        public readonly string SslCa;
        public readonly string SslCert;
        public readonly string SslCrl;
        public readonly string SslKey;
        /// <summary>
        /// SSL mode to be used for the connection.
        /// </summary>
        public readonly string SslMode;
        /// <summary>
        /// The Connection's current lifecycle state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Oracle Cloud Infrastructure resource ID.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
        /// </summary>
        public readonly string TechnologyType;
        /// <summary>
        /// The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The username (credential) used when creating or updating this resource.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Oracle Cloud Infrastructure resource ID.
        /// </summary>
        public readonly string VaultId;
        public readonly string Wallet;

        [OutputConstructor]
        private GetConnectionResult(
            ImmutableArray<Outputs.GetConnectionAdditionalAttributeResult> additionalAttributes,

            string compartmentId,

            string connectionId,

            string connectionString,

            string connectionType,

            string databaseId,

            string databaseName,

            string dbSystemId,

            ImmutableDictionary<string, string> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string host,

            string id,

            ImmutableArray<Outputs.GetConnectionIngressIpResult> ingressIps,

            string keyId,

            string lifecycleDetails,

            ImmutableArray<string> nsgIds,

            string password,

            int port,

            string privateEndpointId,

            string replicationPassword,

            string replicationUsername,

            string secretId,

            string securityProtocol,

            string sshHost,

            string sshKey,

            string sshSudoLocation,

            string sshUser,

            string sslCa,

            string sslCert,

            string sslCrl,

            string sslKey,

            string sslMode,

            string state,

            string subnetId,

            ImmutableDictionary<string, string> systemTags,

            string technologyType,

            string timeCreated,

            string timeUpdated,

            string username,

            string vaultId,

            string wallet)
        {
            AdditionalAttributes = additionalAttributes;
            CompartmentId = compartmentId;
            ConnectionId = connectionId;
            ConnectionString = connectionString;
            ConnectionType = connectionType;
            DatabaseId = databaseId;
            DatabaseName = databaseName;
            DbSystemId = dbSystemId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Host = host;
            Id = id;
            IngressIps = ingressIps;
            KeyId = keyId;
            LifecycleDetails = lifecycleDetails;
            NsgIds = nsgIds;
            Password = password;
            Port = port;
            PrivateEndpointId = privateEndpointId;
            ReplicationPassword = replicationPassword;
            ReplicationUsername = replicationUsername;
            SecretId = secretId;
            SecurityProtocol = securityProtocol;
            SshHost = sshHost;
            SshKey = sshKey;
            SshSudoLocation = sshSudoLocation;
            SshUser = sshUser;
            SslCa = sslCa;
            SslCert = sslCert;
            SslCrl = sslCrl;
            SslKey = sslKey;
            SslMode = sslMode;
            State = state;
            SubnetId = subnetId;
            SystemTags = systemTags;
            TechnologyType = technologyType;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Username = username;
            VaultId = vaultId;
            Wallet = wallet;
        }
    }
}
