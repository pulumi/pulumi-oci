// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseMigration
{
    public static class GetConnections
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnections = Oci.DatabaseMigration.GetConnections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ConnectionTypes = connectionConnectionType,
        ///         DisplayName = connectionDisplayName,
        ///         SourceConnectionId = testConnection.Id,
        ///         State = connectionState,
        ///         TechnologyTypes = connectionTechnologyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionsResult> InvokeAsync(GetConnectionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionsResult>("oci:DatabaseMigration/getConnections:getConnections", args ?? new GetConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnections = Oci.DatabaseMigration.GetConnections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ConnectionTypes = connectionConnectionType,
        ///         DisplayName = connectionDisplayName,
        ///         SourceConnectionId = testConnection.Id,
        ///         State = connectionState,
        ///         TechnologyTypes = connectionTechnologyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionsResult> Invoke(GetConnectionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionsResult>("oci:DatabaseMigration/getConnections:getConnections", args ?? new GetConnectionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnections = Oci.DatabaseMigration.GetConnections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ConnectionTypes = connectionConnectionType,
        ///         DisplayName = connectionDisplayName,
        ///         SourceConnectionId = testConnection.Id,
        ///         State = connectionState,
        ///         TechnologyTypes = connectionTechnologyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionsResult> Invoke(GetConnectionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionsResult>("oci:DatabaseMigration/getConnections:getConnections", args ?? new GetConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("connectionTypes")]
        private List<string>? _connectionTypes;

        /// <summary>
        /// The array of connection types.
        /// </summary>
        public List<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new List<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetConnectionsFilterArgs>? _filters;
        public List<Inputs.GetConnectionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetConnectionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the source database connection.
        /// </summary>
        [Input("sourceConnectionId")]
        public string? SourceConnectionId { get; set; }

        /// <summary>
        /// The current state of the Database Migration Deployment.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("technologyTypes")]
        private List<string>? _technologyTypes;

        /// <summary>
        /// The array of technology types.
        /// </summary>
        public List<string> TechnologyTypes
        {
            get => _technologyTypes ?? (_technologyTypes = new List<string>());
            set => _technologyTypes = value;
        }

        public GetConnectionsArgs()
        {
        }
        public static new GetConnectionsArgs Empty => new GetConnectionsArgs();
    }

    public sealed class GetConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("connectionTypes")]
        private InputList<string>? _connectionTypes;

        /// <summary>
        /// The array of connection types.
        /// </summary>
        public InputList<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new InputList<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetConnectionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetConnectionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetConnectionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the source database connection.
        /// </summary>
        [Input("sourceConnectionId")]
        public Input<string>? SourceConnectionId { get; set; }

        /// <summary>
        /// The current state of the Database Migration Deployment.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("technologyTypes")]
        private InputList<string>? _technologyTypes;

        /// <summary>
        /// The array of technology types.
        /// </summary>
        public InputList<string> TechnologyTypes
        {
            get => _technologyTypes ?? (_technologyTypes = new InputList<string>());
            set => _technologyTypes = value;
        }

        public GetConnectionsInvokeArgs()
        {
        }
        public static new GetConnectionsInvokeArgs Empty => new GetConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionsResult
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of connection_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionsConnectionCollectionResult> ConnectionCollections;
        /// <summary>
        /// Defines the type of connection. For example, ORACLE.
        /// </summary>
        public readonly ImmutableArray<string> ConnectionTypes;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetConnectionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? SourceConnectionId;
        /// <summary>
        /// The Connection's current lifecycle state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
        /// </summary>
        public readonly ImmutableArray<string> TechnologyTypes;

        [OutputConstructor]
        private GetConnectionsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetConnectionsConnectionCollectionResult> connectionCollections,

            ImmutableArray<string> connectionTypes,

            string? displayName,

            ImmutableArray<Outputs.GetConnectionsFilterResult> filters,

            string id,

            string? sourceConnectionId,

            string? state,

            ImmutableArray<string> technologyTypes)
        {
            CompartmentId = compartmentId;
            ConnectionCollections = connectionCollections;
            ConnectionTypes = connectionTypes;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            SourceConnectionId = sourceConnectionId;
            State = state;
            TechnologyTypes = technologyTypes;
        }
    }
}
