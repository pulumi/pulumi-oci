// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseMigration.Inputs
{

    public sealed class JobProgressPhaseGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The text describing the action required to fix the issue
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Duration of the phase in milliseconds
        /// </summary>
        [Input("durationInMs")]
        public Input<int>? DurationInMs { get; set; }

        [Input("editableParameterFiles")]
        private InputList<string>? _editableParameterFiles;

        /// <summary>
        /// Attribute that returns an array of names and types of GoldenGate configuration files that are available for read or update.
        /// </summary>
        public InputList<string> EditableParameterFiles
        {
            get => _editableParameterFiles ?? (_editableParameterFiles = new InputList<string>());
            set => _editableParameterFiles = value;
        }

        [Input("extracts")]
        private InputList<Inputs.JobProgressPhaseExtractGetArgs>? _extracts;

        /// <summary>
        /// Summary of phase status results.
        /// </summary>
        public InputList<Inputs.JobProgressPhaseExtractGetArgs> Extracts
        {
            get => _extracts ?? (_extracts = new InputList<Inputs.JobProgressPhaseExtractGetArgs>());
            set => _extracts = value;
        }

        /// <summary>
        /// True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
        /// </summary>
        [Input("isAdvisorReportAvailable")]
        public Input<bool>? IsAdvisorReportAvailable { get; set; }

        /// <summary>
        /// This is returned as true if the current phase can be suspended.
        /// </summary>
        [Input("isSuspendAvailable")]
        public Input<bool>? IsSuspendAvailable { get; set; }

        /// <summary>
        /// The text describing the root cause of the reported issue
        /// </summary>
        [Input("issue")]
        public Input<string>? Issue { get; set; }

        [Input("logLocations")]
        private InputList<Inputs.JobProgressPhaseLogLocationGetArgs>? _logLocations;

        /// <summary>
        /// Details to access log file in the specified Object Storage bucket, if any.
        /// </summary>
        public InputList<Inputs.JobProgressPhaseLogLocationGetArgs> LogLocations
        {
            get => _logLocations ?? (_logLocations = new InputList<Inputs.JobProgressPhaseLogLocationGetArgs>());
            set => _logLocations = value;
        }

        /// <summary>
        /// Phase name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Percent progress of job phase.
        /// </summary>
        [Input("progress")]
        public Input<int>? Progress { get; set; }

        /// <summary>
        /// Phase status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public JobProgressPhaseGetArgs()
        {
        }
        public static new JobProgressPhaseGetArgs Empty => new JobProgressPhaseGetArgs();
    }
}
