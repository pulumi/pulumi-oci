// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DatabaseTools
{
    public static class GetDatabaseToolsConnection
    {
        /// <summary>
        /// This data source provides details about a specific Database Tools Connection resource in Oracle Cloud Infrastructure Database Tools service.
        /// 
        /// Gets details of the specified Database Tools connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseToolsConnection = Oci.DatabaseTools.GetDatabaseToolsConnection.Invoke(new()
        ///     {
        ///         DatabaseToolsConnectionId = oci_database_tools_database_tools_connection.Test_database_tools_connection.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseToolsConnectionResult> InvokeAsync(GetDatabaseToolsConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseToolsConnectionResult>("oci:DatabaseTools/getDatabaseToolsConnection:getDatabaseToolsConnection", args ?? new GetDatabaseToolsConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Database Tools Connection resource in Oracle Cloud Infrastructure Database Tools service.
        /// 
        /// Gets details of the specified Database Tools connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseToolsConnection = Oci.DatabaseTools.GetDatabaseToolsConnection.Invoke(new()
        ///     {
        ///         DatabaseToolsConnectionId = oci_database_tools_database_tools_connection.Test_database_tools_connection.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseToolsConnectionResult> Invoke(GetDatabaseToolsConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseToolsConnectionResult>("oci:DatabaseTools/getDatabaseToolsConnection:getDatabaseToolsConnection", args ?? new GetDatabaseToolsConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseToolsConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Database Tools connection.
        /// </summary>
        [Input("databaseToolsConnectionId", required: true)]
        public string DatabaseToolsConnectionId { get; set; } = null!;

        public GetDatabaseToolsConnectionArgs()
        {
        }
        public static new GetDatabaseToolsConnectionArgs Empty => new GetDatabaseToolsConnectionArgs();
    }

    public sealed class GetDatabaseToolsConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Database Tools connection.
        /// </summary>
        [Input("databaseToolsConnectionId", required: true)]
        public Input<string> DatabaseToolsConnectionId { get; set; } = null!;

        public GetDatabaseToolsConnectionInvokeArgs()
        {
        }
        public static new GetDatabaseToolsConnectionInvokeArgs Empty => new GetDatabaseToolsConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseToolsConnectionResult
    {
        /// <summary>
        /// The advanced connection properties key-value pair (for example, `oracle.net.ssl_server_dn_match`).
        /// </summary>
        public readonly ImmutableDictionary<string, object> AdvancedProperties;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the Database Tools connection.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The connect descriptor or Easy Connect Naming method used to connect to the database.
        /// </summary>
        public readonly string ConnectionString;
        public readonly string DatabaseToolsConnectionId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools connection.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Oracle wallet or Java Keystores containing trusted certificates for authenticating the server's public certificate and the client private key and associated certificates required for client authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseToolsConnectionKeyStoreResult> KeyStores;
        /// <summary>
        /// A message describing the current state in more detail. For example, this message can be used to provide actionable information for a resource in the Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Tools private endpoint used to access the database in the customer VCN.
        /// </summary>
        public readonly string PrivateEndpointId;
        /// <summary>
        /// A related resource
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseToolsConnectionRelatedResourceResult> RelatedResources;
        /// <summary>
        /// The current state of the Database Tools connection.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time the Database Tools connection was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the DatabaseToolsConnection was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The Database Tools connection type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The database user name.
        /// </summary>
        public readonly string UserName;
        /// <summary>
        /// The user password.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseToolsConnectionUserPasswordResult> UserPasswords;

        [OutputConstructor]
        private GetDatabaseToolsConnectionResult(
            ImmutableDictionary<string, object> advancedProperties,

            string compartmentId,

            string connectionString,

            string databaseToolsConnectionId,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            ImmutableArray<Outputs.GetDatabaseToolsConnectionKeyStoreResult> keyStores,

            string lifecycleDetails,

            string privateEndpointId,

            ImmutableArray<Outputs.GetDatabaseToolsConnectionRelatedResourceResult> relatedResources,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            string type,

            string userName,

            ImmutableArray<Outputs.GetDatabaseToolsConnectionUserPasswordResult> userPasswords)
        {
            AdvancedProperties = advancedProperties;
            CompartmentId = compartmentId;
            ConnectionString = connectionString;
            DatabaseToolsConnectionId = databaseToolsConnectionId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            KeyStores = keyStores;
            LifecycleDetails = lifecycleDetails;
            PrivateEndpointId = privateEndpointId;
            RelatedResources = relatedResources;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Type = type;
            UserName = userName;
            UserPasswords = userPasswords;
        }
    }
}
