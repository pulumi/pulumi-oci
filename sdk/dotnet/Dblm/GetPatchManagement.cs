// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dblm
{
    public static class GetPatchManagement
    {
        /// <summary>
        /// This data source provides details about a specific Patch Management resource in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Overview of Patch Management.
        /// </summary>
        public static Task<GetPatchManagementResult> InvokeAsync(GetPatchManagementArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPatchManagementResult>("oci:Dblm/getPatchManagement:getPatchManagement", args ?? new GetPatchManagementArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Patch Management resource in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Overview of Patch Management.
        /// </summary>
        public static Output<GetPatchManagementResult> Invoke(GetPatchManagementInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchManagementResult>("oci:Dblm/getPatchManagement:getPatchManagement", args ?? new GetPatchManagementInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Patch Management resource in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Overview of Patch Management.
        /// </summary>
        public static Output<GetPatchManagementResult> Invoke(GetPatchManagementInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchManagementResult>("oci:Dblm/getPatchManagement:getPatchManagement", args ?? new GetPatchManagementInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPatchManagementArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The required ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public string? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
        /// </summary>
        [Input("timeStartedGreaterThanOrEqualTo")]
        public string? TimeStartedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return only resources whose timeStarted is less than the given date-time.
        /// </summary>
        [Input("timeStartedLessThan")]
        public string? TimeStartedLessThan { get; set; }

        public GetPatchManagementArgs()
        {
        }
        public static new GetPatchManagementArgs Empty => new GetPatchManagementArgs();
    }

    public sealed class GetPatchManagementInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The required ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public Input<string>? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
        /// </summary>
        [Input("timeStartedGreaterThanOrEqualTo")]
        public Input<string>? TimeStartedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return only resources whose timeStarted is less than the given date-time.
        /// </summary>
        [Input("timeStartedLessThan")]
        public Input<string>? TimeStartedLessThan { get; set; }

        public GetPatchManagementInvokeArgs()
        {
        }
        public static new GetPatchManagementInvokeArgs Empty => new GetPatchManagementInvokeArgs();
    }


    [OutputType]
    public sealed class GetPatchManagementResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        public readonly string? DatabaseRelease;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Summary of image patches recommended to install.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchManagementImagesPatchRecommendationSummaryResult> ImagesPatchRecommendationSummaries;
        /// <summary>
        /// A message describing the status of the feature's state
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// Summary of patch operations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchManagementPatchOperationsSummaryResult> PatchOperationsSummaries;
        /// <summary>
        /// resources objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchManagementResourceResult> Resources;
        /// <summary>
        /// Summary of image patches to be compliant to install.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchManagementResourcesPatchComplianceSummaryResult> ResourcesPatchComplianceSummaries;
        /// <summary>
        /// The current state of the feature.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the Vulnerability was enabled. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeEnabled;
        public readonly string? TimeStartedGreaterThanOrEqualTo;
        public readonly string? TimeStartedLessThan;

        [OutputConstructor]
        private GetPatchManagementResult(
            string compartmentId,

            string? databaseRelease,

            ImmutableDictionary<string, string> definedTags,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            ImmutableArray<Outputs.GetPatchManagementImagesPatchRecommendationSummaryResult> imagesPatchRecommendationSummaries,

            string message,

            ImmutableArray<Outputs.GetPatchManagementPatchOperationsSummaryResult> patchOperationsSummaries,

            ImmutableArray<Outputs.GetPatchManagementResourceResult> resources,

            ImmutableArray<Outputs.GetPatchManagementResourcesPatchComplianceSummaryResult> resourcesPatchComplianceSummaries,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeEnabled,

            string? timeStartedGreaterThanOrEqualTo,

            string? timeStartedLessThan)
        {
            CompartmentId = compartmentId;
            DatabaseRelease = databaseRelease;
            DefinedTags = definedTags;
            FreeformTags = freeformTags;
            Id = id;
            ImagesPatchRecommendationSummaries = imagesPatchRecommendationSummaries;
            Message = message;
            PatchOperationsSummaries = patchOperationsSummaries;
            Resources = resources;
            ResourcesPatchComplianceSummaries = resourcesPatchComplianceSummaries;
            State = state;
            SystemTags = systemTags;
            TimeEnabled = timeEnabled;
            TimeStartedGreaterThanOrEqualTo = timeStartedGreaterThanOrEqualTo;
            TimeStartedLessThan = timeStartedLessThan;
        }
    }
}
