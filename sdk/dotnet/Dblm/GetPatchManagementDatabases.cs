// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dblm
{
    public static class GetPatchManagementDatabases
    {
        /// <summary>
        /// This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the list of databases
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatchManagementDatabases = Oci.Dblm.GetPatchManagementDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = patchManagementDatabaseDatabaseRelease,
        ///         DatabaseType = patchManagementDatabaseDatabaseType,
        ///         DisplayName = patchManagementDatabaseDisplayName,
        ///         DrifterPatchId = testPatch.Id,
        ///         ImageCompliance = patchManagementDatabaseImageCompliance,
        ///         ImageId = testImage.Id,
        ///         SeverityTypes = patchManagementDatabaseSeverityType,
        ///         State = patchManagementDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPatchManagementDatabasesResult> InvokeAsync(GetPatchManagementDatabasesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPatchManagementDatabasesResult>("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", args ?? new GetPatchManagementDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the list of databases
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatchManagementDatabases = Oci.Dblm.GetPatchManagementDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = patchManagementDatabaseDatabaseRelease,
        ///         DatabaseType = patchManagementDatabaseDatabaseType,
        ///         DisplayName = patchManagementDatabaseDisplayName,
        ///         DrifterPatchId = testPatch.Id,
        ///         ImageCompliance = patchManagementDatabaseImageCompliance,
        ///         ImageId = testImage.Id,
        ///         SeverityTypes = patchManagementDatabaseSeverityType,
        ///         State = patchManagementDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPatchManagementDatabasesResult> Invoke(GetPatchManagementDatabasesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchManagementDatabasesResult>("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", args ?? new GetPatchManagementDatabasesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the list of databases
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatchManagementDatabases = Oci.Dblm.GetPatchManagementDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = patchManagementDatabaseDatabaseRelease,
        ///         DatabaseType = patchManagementDatabaseDatabaseType,
        ///         DisplayName = patchManagementDatabaseDisplayName,
        ///         DrifterPatchId = testPatch.Id,
        ///         ImageCompliance = patchManagementDatabaseImageCompliance,
        ///         ImageId = testImage.Id,
        ///         SeverityTypes = patchManagementDatabaseSeverityType,
        ///         State = patchManagementDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPatchManagementDatabasesResult> Invoke(GetPatchManagementDatabasesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchManagementDatabasesResult>("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", args ?? new GetPatchManagementDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPatchManagementDatabasesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public string? DatabaseRelease { get; set; }

        /// <summary>
        /// Filter by database type. Possible values Single Instance or RAC.
        /// </summary>
        [Input("databaseType")]
        public string? DatabaseType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only database that have given patchId as additional patch (drifter from image version).
        /// </summary>
        [Input("drifterPatchId")]
        public int? DrifterPatchId { get; set; }

        [Input("filters")]
        private List<Inputs.GetPatchManagementDatabasesFilterArgs>? _filters;
        public List<Inputs.GetPatchManagementDatabasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPatchManagementDatabasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filter databases by image compliance status.
        /// </summary>
        [Input("imageCompliance")]
        public string? ImageCompliance { get; set; }

        /// <summary>
        /// Subscribed image
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        [Input("severityTypes")]
        private List<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
        /// </summary>
        public List<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new List<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetPatchManagementDatabasesArgs()
        {
        }
        public static new GetPatchManagementDatabasesArgs Empty => new GetPatchManagementDatabasesArgs();
    }

    public sealed class GetPatchManagementDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public Input<string>? DatabaseRelease { get; set; }

        /// <summary>
        /// Filter by database type. Possible values Single Instance or RAC.
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return only database that have given patchId as additional patch (drifter from image version).
        /// </summary>
        [Input("drifterPatchId")]
        public Input<int>? DrifterPatchId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPatchManagementDatabasesFilterInputArgs>? _filters;
        public InputList<Inputs.GetPatchManagementDatabasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPatchManagementDatabasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filter databases by image compliance status.
        /// </summary>
        [Input("imageCompliance")]
        public Input<string>? ImageCompliance { get; set; }

        /// <summary>
        /// Subscribed image
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("severityTypes")]
        private InputList<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
        /// </summary>
        public InputList<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new InputList<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetPatchManagementDatabasesInvokeArgs()
        {
        }
        public static new GetPatchManagementDatabasesInvokeArgs Empty => new GetPatchManagementDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPatchManagementDatabasesResult
    {
        public readonly string? CompartmentId;
        public readonly string? DatabaseRelease;
        /// <summary>
        /// Database type.
        /// </summary>
        public readonly string? DatabaseType;
        public readonly string? DisplayName;
        public readonly int? DrifterPatchId;
        public readonly ImmutableArray<Outputs.GetPatchManagementDatabasesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ImageCompliance;
        /// <summary>
        /// Image identifier.
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// The list of patch_databases_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchManagementDatabasesPatchDatabasesCollectionResult> PatchDatabasesCollections;
        public readonly ImmutableArray<string> SeverityTypes;
        /// <summary>
        /// The current state of the database.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetPatchManagementDatabasesResult(
            string? compartmentId,

            string? databaseRelease,

            string? databaseType,

            string? displayName,

            int? drifterPatchId,

            ImmutableArray<Outputs.GetPatchManagementDatabasesFilterResult> filters,

            string id,

            string? imageCompliance,

            string? imageId,

            ImmutableArray<Outputs.GetPatchManagementDatabasesPatchDatabasesCollectionResult> patchDatabasesCollections,

            ImmutableArray<string> severityTypes,

            string? state)
        {
            CompartmentId = compartmentId;
            DatabaseRelease = databaseRelease;
            DatabaseType = databaseType;
            DisplayName = displayName;
            DrifterPatchId = drifterPatchId;
            Filters = filters;
            Id = id;
            ImageCompliance = imageCompliance;
            ImageId = imageId;
            PatchDatabasesCollections = patchDatabasesCollections;
            SeverityTypes = severityTypes;
            State = state;
        }
    }
}
