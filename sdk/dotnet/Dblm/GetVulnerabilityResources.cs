// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dblm
{
    public static class GetVulnerabilityResources
    {
        /// <summary>
        /// This data source provides the list of Vulnerability Resources in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Lists the summary of vulnerable and clean resourcees
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityResources = Oci.Dblm.GetVulnerabilityResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CveId = testCve.Id,
        ///         DatabaseRelease = vulnerabilityResourceDatabaseRelease,
        ///         DisplayName = vulnerabilityResourceDisplayName,
        ///         PatchRecommendations = vulnerabilityResourcePatchRecommendation,
        ///         SeverityTypes = vulnerabilityResourceSeverityType,
        ///         State = vulnerabilityResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVulnerabilityResourcesResult> InvokeAsync(GetVulnerabilityResourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVulnerabilityResourcesResult>("oci:Dblm/getVulnerabilityResources:getVulnerabilityResources", args ?? new GetVulnerabilityResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vulnerability Resources in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Lists the summary of vulnerable and clean resourcees
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityResources = Oci.Dblm.GetVulnerabilityResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CveId = testCve.Id,
        ///         DatabaseRelease = vulnerabilityResourceDatabaseRelease,
        ///         DisplayName = vulnerabilityResourceDisplayName,
        ///         PatchRecommendations = vulnerabilityResourcePatchRecommendation,
        ///         SeverityTypes = vulnerabilityResourceSeverityType,
        ///         State = vulnerabilityResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVulnerabilityResourcesResult> Invoke(GetVulnerabilityResourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVulnerabilityResourcesResult>("oci:Dblm/getVulnerabilityResources:getVulnerabilityResources", args ?? new GetVulnerabilityResourcesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vulnerability Resources in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Lists the summary of vulnerable and clean resourcees
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityResources = Oci.Dblm.GetVulnerabilityResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CveId = testCve.Id,
        ///         DatabaseRelease = vulnerabilityResourceDatabaseRelease,
        ///         DisplayName = vulnerabilityResourceDisplayName,
        ///         PatchRecommendations = vulnerabilityResourcePatchRecommendation,
        ///         SeverityTypes = vulnerabilityResourceSeverityType,
        ///         State = vulnerabilityResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVulnerabilityResourcesResult> Invoke(GetVulnerabilityResourcesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVulnerabilityResourcesResult>("oci:Dblm/getVulnerabilityResources:getVulnerabilityResources", args ?? new GetVulnerabilityResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVulnerabilityResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The required ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The id of a CVE.
        /// </summary>
        [Input("cveId")]
        public string? CveId { get; set; }

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public string? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetVulnerabilityResourcesFilterArgs>? _filters;
        public List<Inputs.GetVulnerabilityResourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVulnerabilityResourcesFilterArgs>());
            set => _filters = value;
        }

        [Input("patchRecommendations")]
        private List<string>? _patchRecommendations;

        /// <summary>
        /// Filter by one or more severity types. Possible values are upToDate, patchAvailable
        /// </summary>
        public List<string> PatchRecommendations
        {
            get => _patchRecommendations ?? (_patchRecommendations = new List<string>());
            set => _patchRecommendations = value;
        }

        [Input("severityTypes")]
        private List<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
        /// </summary>
        public List<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new List<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetVulnerabilityResourcesArgs()
        {
        }
        public static new GetVulnerabilityResourcesArgs Empty => new GetVulnerabilityResourcesArgs();
    }

    public sealed class GetVulnerabilityResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The required ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The id of a CVE.
        /// </summary>
        [Input("cveId")]
        public Input<string>? CveId { get; set; }

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public Input<string>? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVulnerabilityResourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetVulnerabilityResourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVulnerabilityResourcesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("patchRecommendations")]
        private InputList<string>? _patchRecommendations;

        /// <summary>
        /// Filter by one or more severity types. Possible values are upToDate, patchAvailable
        /// </summary>
        public InputList<string> PatchRecommendations
        {
            get => _patchRecommendations ?? (_patchRecommendations = new InputList<string>());
            set => _patchRecommendations = value;
        }

        [Input("severityTypes")]
        private InputList<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
        /// </summary>
        public InputList<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new InputList<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetVulnerabilityResourcesInvokeArgs()
        {
        }
        public static new GetVulnerabilityResourcesInvokeArgs Empty => new GetVulnerabilityResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVulnerabilityResourcesResult
    {
        public readonly string CompartmentId;
        public readonly string? CveId;
        public readonly string? DatabaseRelease;
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetVulnerabilityResourcesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> PatchRecommendations;
        public readonly ImmutableArray<string> SeverityTypes;
        public readonly string? State;
        /// <summary>
        /// The list of vulnerability_resource_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionResult> VulnerabilityResourceCollections;

        [OutputConstructor]
        private GetVulnerabilityResourcesResult(
            string compartmentId,

            string? cveId,

            string? databaseRelease,

            string? displayName,

            ImmutableArray<Outputs.GetVulnerabilityResourcesFilterResult> filters,

            string id,

            ImmutableArray<string> patchRecommendations,

            ImmutableArray<string> severityTypes,

            string? state,

            ImmutableArray<Outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionResult> vulnerabilityResourceCollections)
        {
            CompartmentId = compartmentId;
            CveId = cveId;
            DatabaseRelease = databaseRelease;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            PatchRecommendations = patchRecommendations;
            SeverityTypes = severityTypes;
            State = state;
            VulnerabilityResourceCollections = vulnerabilityResourceCollections;
        }
    }
}
