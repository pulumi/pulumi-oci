// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dblm
{
    public static class GetVulnerabilityVulnerabilities
    {
        /// <summary>
        /// This data source provides the list of Vulnerability Vulnerabilities in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the vulnerabilities summary list
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityVulnerabilities = Oci.Dblm.GetVulnerabilityVulnerabilities.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = vulnerabilityVulnerabilityDatabaseRelease,
        ///         DisplayName = vulnerabilityVulnerabilityDisplayName,
        ///         ResourceId = testResource.Id,
        ///         SearchBy = vulnerabilityVulnerabilitySearchBy,
        ///         SeverityTypes = vulnerabilityVulnerabilitySeverityType,
        ///         State = vulnerabilityVulnerabilityState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVulnerabilityVulnerabilitiesResult> InvokeAsync(GetVulnerabilityVulnerabilitiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVulnerabilityVulnerabilitiesResult>("oci:Dblm/getVulnerabilityVulnerabilities:getVulnerabilityVulnerabilities", args ?? new GetVulnerabilityVulnerabilitiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vulnerability Vulnerabilities in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the vulnerabilities summary list
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityVulnerabilities = Oci.Dblm.GetVulnerabilityVulnerabilities.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = vulnerabilityVulnerabilityDatabaseRelease,
        ///         DisplayName = vulnerabilityVulnerabilityDisplayName,
        ///         ResourceId = testResource.Id,
        ///         SearchBy = vulnerabilityVulnerabilitySearchBy,
        ///         SeverityTypes = vulnerabilityVulnerabilitySeverityType,
        ///         State = vulnerabilityVulnerabilityState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVulnerabilityVulnerabilitiesResult> Invoke(GetVulnerabilityVulnerabilitiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVulnerabilityVulnerabilitiesResult>("oci:Dblm/getVulnerabilityVulnerabilities:getVulnerabilityVulnerabilities", args ?? new GetVulnerabilityVulnerabilitiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vulnerability Vulnerabilities in Oracle Cloud Infrastructure Dblm service.
        /// 
        /// Gets the vulnerabilities summary list
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVulnerabilityVulnerabilities = Oci.Dblm.GetVulnerabilityVulnerabilities.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DatabaseRelease = vulnerabilityVulnerabilityDatabaseRelease,
        ///         DisplayName = vulnerabilityVulnerabilityDisplayName,
        ///         ResourceId = testResource.Id,
        ///         SearchBy = vulnerabilityVulnerabilitySearchBy,
        ///         SeverityTypes = vulnerabilityVulnerabilitySeverityType,
        ///         State = vulnerabilityVulnerabilityState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVulnerabilityVulnerabilitiesResult> Invoke(GetVulnerabilityVulnerabilitiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVulnerabilityVulnerabilitiesResult>("oci:Dblm/getVulnerabilityVulnerabilities:getVulnerabilityVulnerabilities", args ?? new GetVulnerabilityVulnerabilitiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVulnerabilityVulnerabilitiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public string? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetVulnerabilityVulnerabilitiesFilterArgs>? _filters;
        public List<Inputs.GetVulnerabilityVulnerabilitiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVulnerabilityVulnerabilitiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given resource id.
        /// </summary>
        [Input("resourceId")]
        public string? ResourceId { get; set; }

        /// <summary>
        /// The search input for filter cve id and cve description.
        /// </summary>
        [Input("searchBy")]
        public string? SearchBy { get; set; }

        [Input("severityTypes")]
        private List<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info.
        /// </summary>
        public List<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new List<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetVulnerabilityVulnerabilitiesArgs()
        {
        }
        public static new GetVulnerabilityVulnerabilitiesArgs Empty => new GetVulnerabilityVulnerabilitiesArgs();
    }

    public sealed class GetVulnerabilityVulnerabilitiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only database that match the given release version.
        /// </summary>
        [Input("databaseRelease")]
        public Input<string>? DatabaseRelease { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVulnerabilityVulnerabilitiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetVulnerabilityVulnerabilitiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVulnerabilityVulnerabilitiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given resource id.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The search input for filter cve id and cve description.
        /// </summary>
        [Input("searchBy")]
        public Input<string>? SearchBy { get; set; }

        [Input("severityTypes")]
        private InputList<string>? _severityTypes;

        /// <summary>
        /// Filter by one or more severity types. Possible values are critical, high, medium, low, info.
        /// </summary>
        public InputList<string> SeverityTypes
        {
            get => _severityTypes ?? (_severityTypes = new InputList<string>());
            set => _severityTypes = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetVulnerabilityVulnerabilitiesInvokeArgs()
        {
        }
        public static new GetVulnerabilityVulnerabilitiesInvokeArgs Empty => new GetVulnerabilityVulnerabilitiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVulnerabilityVulnerabilitiesResult
    {
        public readonly string CompartmentId;
        public readonly string? DatabaseRelease;
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetVulnerabilityVulnerabilitiesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResourceId;
        public readonly string? SearchBy;
        public readonly ImmutableArray<string> SeverityTypes;
        public readonly string? State;
        /// <summary>
        /// The list of vulnerability_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVulnerabilityVulnerabilitiesVulnerabilityCollectionResult> VulnerabilityCollections;

        [OutputConstructor]
        private GetVulnerabilityVulnerabilitiesResult(
            string compartmentId,

            string? databaseRelease,

            string? displayName,

            ImmutableArray<Outputs.GetVulnerabilityVulnerabilitiesFilterResult> filters,

            string id,

            string? resourceId,

            string? searchBy,

            ImmutableArray<string> severityTypes,

            string? state,

            ImmutableArray<Outputs.GetVulnerabilityVulnerabilitiesVulnerabilityCollectionResult> vulnerabilityCollections)
        {
            CompartmentId = compartmentId;
            DatabaseRelease = databaseRelease;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ResourceId = resourceId;
            SearchBy = searchBy;
            SeverityTypes = severityTypes;
            State = state;
            VulnerabilityCollections = vulnerabilityCollections;
        }
    }
}
