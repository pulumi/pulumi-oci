// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DelegateAccessControl
{
    public static class GetServiceProviderActions
    {
        /// <summary>
        /// This data source provides the list of Service Provider Actions in Oracle Cloud Infrastructure Delegate Access Control service.
        /// 
        /// Lists all the ServiceProviderActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceProviderActions = Oci.DelegateAccessControl.GetServiceProviderActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = serviceProviderActionName,
        ///         ResourceType = serviceProviderActionResourceType,
        ///         ServiceProviderServiceTypes = serviceProviderActionServiceProviderServiceType,
        ///         State = serviceProviderActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceProviderActionsResult> InvokeAsync(GetServiceProviderActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceProviderActionsResult>("oci:DelegateAccessControl/getServiceProviderActions:getServiceProviderActions", args ?? new GetServiceProviderActionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Service Provider Actions in Oracle Cloud Infrastructure Delegate Access Control service.
        /// 
        /// Lists all the ServiceProviderActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceProviderActions = Oci.DelegateAccessControl.GetServiceProviderActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = serviceProviderActionName,
        ///         ResourceType = serviceProviderActionResourceType,
        ///         ServiceProviderServiceTypes = serviceProviderActionServiceProviderServiceType,
        ///         State = serviceProviderActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceProviderActionsResult> Invoke(GetServiceProviderActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceProviderActionsResult>("oci:DelegateAccessControl/getServiceProviderActions:getServiceProviderActions", args ?? new GetServiceProviderActionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Service Provider Actions in Oracle Cloud Infrastructure Delegate Access Control service.
        /// 
        /// Lists all the ServiceProviderActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceProviderActions = Oci.DelegateAccessControl.GetServiceProviderActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = serviceProviderActionName,
        ///         ResourceType = serviceProviderActionResourceType,
        ///         ServiceProviderServiceTypes = serviceProviderActionServiceProviderServiceType,
        ///         State = serviceProviderActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceProviderActionsResult> Invoke(GetServiceProviderActionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceProviderActionsResult>("oci:DelegateAccessControl/getServiceProviderActions:getServiceProviderActions", args ?? new GetServiceProviderActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceProviderActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetServiceProviderActionsFilterArgs>? _filters;
        public List<Inputs.GetServiceProviderActionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServiceProviderActionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given resource type.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        [Input("serviceProviderServiceTypes")]
        private List<string>? _serviceProviderServiceTypes;

        /// <summary>
        /// A filter to return only resources that match the given Service Provider service type.
        /// </summary>
        public List<string> ServiceProviderServiceTypes
        {
            get => _serviceProviderServiceTypes ?? (_serviceProviderServiceTypes = new List<string>());
            set => _serviceProviderServiceTypes = value;
        }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetServiceProviderActionsArgs()
        {
        }
        public static new GetServiceProviderActionsArgs Empty => new GetServiceProviderActionsArgs();
    }

    public sealed class GetServiceProviderActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetServiceProviderActionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetServiceProviderActionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServiceProviderActionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given resource type.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("serviceProviderServiceTypes")]
        private InputList<string>? _serviceProviderServiceTypes;

        /// <summary>
        /// A filter to return only resources that match the given Service Provider service type.
        /// </summary>
        public InputList<string> ServiceProviderServiceTypes
        {
            get => _serviceProviderServiceTypes ?? (_serviceProviderServiceTypes = new InputList<string>());
            set => _serviceProviderServiceTypes = value;
        }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetServiceProviderActionsInvokeArgs()
        {
        }
        public static new GetServiceProviderActionsInvokeArgs Empty => new GetServiceProviderActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceProviderActionsResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetServiceProviderActionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the property
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// resourceType for which the ServiceProviderAction is applicable
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The list of service_provider_action_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceProviderActionsServiceProviderActionSummaryCollectionResult> ServiceProviderActionSummaryCollections;
        public readonly ImmutableArray<string> ServiceProviderServiceTypes;
        /// <summary>
        /// The current lifecycle state of the Service Provider Action.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetServiceProviderActionsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetServiceProviderActionsFilterResult> filters,

            string id,

            string? name,

            string? resourceType,

            ImmutableArray<Outputs.GetServiceProviderActionsServiceProviderActionSummaryCollectionResult> serviceProviderActionSummaryCollections,

            ImmutableArray<string> serviceProviderServiceTypes,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            ResourceType = resourceType;
            ServiceProviderActionSummaryCollections = serviceProviderActionSummaryCollections;
            ServiceProviderServiceTypes = serviceProviderServiceTypes;
            State = state;
        }
    }
}
