// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DelegateAccessControl
{
    public static class GetServiceProviders
    {
        /// <summary>
        /// This data source provides the list of Service Providers in Oracle Cloud Infrastructure Delegate Access Control service.
        /// 
        /// Lists the Service Providers.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceProviders = Oci.DelegateAccessControl.GetServiceProviders.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = serviceProviderName,
        ///         ServiceProviderType = serviceProviderServiceProviderType,
        ///         State = serviceProviderState,
        ///         SupportedResourceType = serviceProviderSupportedResourceType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceProvidersResult> InvokeAsync(GetServiceProvidersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceProvidersResult>("oci:DelegateAccessControl/getServiceProviders:getServiceProviders", args ?? new GetServiceProvidersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Service Providers in Oracle Cloud Infrastructure Delegate Access Control service.
        /// 
        /// Lists the Service Providers.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceProviders = Oci.DelegateAccessControl.GetServiceProviders.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = serviceProviderName,
        ///         ServiceProviderType = serviceProviderServiceProviderType,
        ///         State = serviceProviderState,
        ///         SupportedResourceType = serviceProviderSupportedResourceType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceProvidersResult> Invoke(GetServiceProvidersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceProvidersResult>("oci:DelegateAccessControl/getServiceProviders:getServiceProviders", args ?? new GetServiceProvidersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceProvidersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetServiceProvidersFilterArgs>? _filters;
        public List<Inputs.GetServiceProvidersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServiceProvidersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return Service Provider resources that match the given name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose provider type matches the given provider type.
        /// </summary>
        [Input("serviceProviderType")]
        public string? ServiceProviderType { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose supported resource type matches the given resource type.
        /// </summary>
        [Input("supportedResourceType")]
        public string? SupportedResourceType { get; set; }

        public GetServiceProvidersArgs()
        {
        }
        public static new GetServiceProvidersArgs Empty => new GetServiceProvidersArgs();
    }

    public sealed class GetServiceProvidersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetServiceProvidersFilterInputArgs>? _filters;
        public InputList<Inputs.GetServiceProvidersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServiceProvidersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return Service Provider resources that match the given name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose provider type matches the given provider type.
        /// </summary>
        [Input("serviceProviderType")]
        public Input<string>? ServiceProviderType { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only Service Provider resources whose supported resource type matches the given resource type.
        /// </summary>
        [Input("supportedResourceType")]
        public Input<string>? SupportedResourceType { get; set; }

        public GetServiceProvidersInvokeArgs()
        {
        }
        public static new GetServiceProvidersInvokeArgs Empty => new GetServiceProvidersInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceProvidersResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the Delegation Control.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetServiceProvidersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique name of the Service Provider.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of service_provider_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceProvidersServiceProviderSummaryCollectionResult> ServiceProviderSummaryCollections;
        /// <summary>
        /// Service Provider type.
        /// </summary>
        public readonly string? ServiceProviderType;
        /// <summary>
        /// The current lifecycle state of the Service Provider.
        /// </summary>
        public readonly string? State;
        public readonly string? SupportedResourceType;

        [OutputConstructor]
        private GetServiceProvidersResult(
            string compartmentId,

            ImmutableArray<Outputs.GetServiceProvidersFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetServiceProvidersServiceProviderSummaryCollectionResult> serviceProviderSummaryCollections,

            string? serviceProviderType,

            string? state,

            string? supportedResourceType)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            ServiceProviderSummaryCollections = serviceProviderSummaryCollections;
            ServiceProviderType = serviceProviderType;
            State = state;
            SupportedResourceType = supportedResourceType;
        }
    }
}
