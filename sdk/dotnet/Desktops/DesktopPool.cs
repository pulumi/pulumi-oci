// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Desktops
{
    /// <summary>
    /// This resource provides the Desktop Pool resource in Oracle Cloud Infrastructure Desktops service.
    /// 
    /// Creates a desktop pool with the given configuration parameters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDesktopPool = new Oci.Desktops.DesktopPool("test_desktop_pool", new()
    ///     {
    ///         ArePrivilegedUsers = desktopPoolArePrivilegedUsers,
    ///         AvailabilityDomain = desktopPoolAvailabilityDomain,
    ///         AvailabilityPolicy = new Oci.Desktops.Inputs.DesktopPoolAvailabilityPolicyArgs
    ///         {
    ///             StartSchedule = new Oci.Desktops.Inputs.DesktopPoolAvailabilityPolicyStartScheduleArgs
    ///             {
    ///                 CronExpression = "0 10 8 ? * 2",
    ///                 Timezone = "America/Denver",
    ///             },
    ///             StopSchedule = new Oci.Desktops.Inputs.DesktopPoolAvailabilityPolicyStopScheduleArgs
    ///             {
    ///                 CronExpression = "0 20 18 ? * 6",
    ///                 Timezone = "America/Denver",
    ///             },
    ///         },
    ///         CompartmentId = compartmentId,
    ///         ContactDetails = desktopPoolContactDetails,
    ///         DevicePolicy = new Oci.Desktops.Inputs.DesktopPoolDevicePolicyArgs
    ///         {
    ///             AudioMode = desktopPoolDevicePolicyAudioMode,
    ///             CdmMode = desktopPoolDevicePolicyCdmMode,
    ///             ClipboardMode = desktopPoolDevicePolicyClipboardMode,
    ///             IsDisplayEnabled = desktopPoolDevicePolicyIsDisplayEnabled,
    ///             IsKeyboardEnabled = desktopPoolDevicePolicyIsKeyboardEnabled,
    ///             IsPointerEnabled = desktopPoolDevicePolicyIsPointerEnabled,
    ///             IsPrintingEnabled = desktopPoolDevicePolicyIsPrintingEnabled,
    ///         },
    ///         DisplayName = desktopPoolDisplayName,
    ///         Image = new Oci.Desktops.Inputs.DesktopPoolImageArgs
    ///         {
    ///             ImageId = testImage.Id,
    ///             ImageName = desktopPoolImageImageName,
    ///         },
    ///         IsStorageEnabled = desktopPoolIsStorageEnabled,
    ///         MaximumSize = desktopPoolMaximumSize,
    ///         NetworkConfiguration = new Oci.Desktops.Inputs.DesktopPoolNetworkConfigurationArgs
    ///         {
    ///             SubnetId = testSubnet.Id,
    ///             VcnId = testVcn.Id,
    ///         },
    ///         ShapeName = "VM.Standard.E4.Flex",
    ///         StandbySize = desktopPoolStandbySize,
    ///         StorageBackupPolicyId = "ocid1.volumebackuppolicy.oc1.xxxxyyyyyzzzz",
    ///         StorageSizeInGbs = desktopPoolStorageSizeInGbs,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         Description = desktopPoolDescription,
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         NsgIds = desktopPoolNsgIds,
    ///         TimeStartScheduled = desktopPoolTimeStartScheduled,
    ///         TimeStopScheduled = desktopPoolTimeStopScheduled,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DesktopPools can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Desktops/desktopPool:DesktopPool test_desktop_pool "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Desktops/desktopPool:DesktopPool")]
    public partial class DesktopPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of active desktops in the desktop pool.
        /// </summary>
        [Output("activeDesktops")]
        public Output<int> ActiveDesktops { get; private set; } = null!;

        /// <summary>
        /// Indicates whether desktop pool users have administrative privileges on their desktop.
        /// </summary>
        [Output("arePrivilegedUsers")]
        public Output<bool> ArePrivilegedUsers { get; private set; } = null!;

        /// <summary>
        /// The availability domain of the desktop pool.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        /// </summary>
        [Output("availabilityPolicy")]
        public Output<Outputs.DesktopPoolAvailabilityPolicy> AvailabilityPolicy { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment which will contain the desktop pool.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        /// </summary>
        [Output("contactDetails")]
        public Output<string> ContactDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        /// </summary>
        [Output("devicePolicy")]
        public Output<Outputs.DesktopPoolDevicePolicy> DevicePolicy { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user friendly display name. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Provides information about the desktop image.
        /// </summary>
        [Output("image")]
        public Output<Outputs.DesktopPoolImage> Image { get; private set; } = null!;

        /// <summary>
        /// Indicates whether storage is enabled for the desktop pool.
        /// </summary>
        [Output("isStorageEnabled")]
        public Output<bool> IsStorageEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of desktops permitted in the desktop pool.
        /// </summary>
        [Output("maximumSize")]
        public Output<int> MaximumSize { get; private set; } = null!;

        /// <summary>
        /// Provides information about the network configuration of the desktop pool.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.DesktopPoolNetworkConfiguration> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// A list of network security groups for the desktop pool.
        /// </summary>
        [Output("nsgIds")]
        public Output<ImmutableArray<string>> NsgIds { get; private set; } = null!;

        /// <summary>
        /// The shape of the desktop pool.
        /// </summary>
        [Output("shapeName")]
        public Output<string> ShapeName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of standby desktops available in the desktop pool.
        /// </summary>
        [Output("standbySize")]
        public Output<int> StandbySize { get; private set; } = null!;

        /// <summary>
        /// The current state of the desktop pool.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The backup policy OCID of the storage.
        /// </summary>
        [Output("storageBackupPolicyId")]
        public Output<string> StorageBackupPolicyId { get; private set; } = null!;

        /// <summary>
        /// The size in GBs of the storage for the desktop pool.
        /// </summary>
        [Output("storageSizeInGbs")]
        public Output<int> StorageSizeInGbs { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The start time of the desktop pool.
        /// </summary>
        [Output("timeStartScheduled")]
        public Output<string?> TimeStartScheduled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The stop time of the desktop pool.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("timeStopScheduled")]
        public Output<string?> TimeStopScheduled { get; private set; } = null!;


        /// <summary>
        /// Create a DesktopPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DesktopPool(string name, DesktopPoolArgs args, CustomResourceOptions? options = null)
            : base("oci:Desktops/desktopPool:DesktopPool", name, args ?? new DesktopPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DesktopPool(string name, Input<string> id, DesktopPoolState? state = null, CustomResourceOptions? options = null)
            : base("oci:Desktops/desktopPool:DesktopPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DesktopPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DesktopPool Get(string name, Input<string> id, DesktopPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new DesktopPool(name, id, state, options);
        }
    }

    public sealed class DesktopPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether desktop pool users have administrative privileges on their desktop.
        /// </summary>
        [Input("arePrivilegedUsers", required: true)]
        public Input<bool> ArePrivilegedUsers { get; set; } = null!;

        /// <summary>
        /// The availability domain of the desktop pool.
        /// </summary>
        [Input("availabilityDomain", required: true)]
        public Input<string> AvailabilityDomain { get; set; } = null!;

        /// <summary>
        /// (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        /// </summary>
        [Input("availabilityPolicy", required: true)]
        public Input<Inputs.DesktopPoolAvailabilityPolicyArgs> AvailabilityPolicy { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment which will contain the desktop pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        /// </summary>
        [Input("contactDetails", required: true)]
        public Input<string> ContactDetails { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        /// </summary>
        [Input("devicePolicy", required: true)]
        public Input<Inputs.DesktopPoolDevicePolicyArgs> DevicePolicy { get; set; } = null!;

        /// <summary>
        /// (Updatable) A user friendly display name. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Provides information about the desktop image.
        /// </summary>
        [Input("image", required: true)]
        public Input<Inputs.DesktopPoolImageArgs> Image { get; set; } = null!;

        /// <summary>
        /// Indicates whether storage is enabled for the desktop pool.
        /// </summary>
        [Input("isStorageEnabled", required: true)]
        public Input<bool> IsStorageEnabled { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of desktops permitted in the desktop pool.
        /// </summary>
        [Input("maximumSize", required: true)]
        public Input<int> MaximumSize { get; set; } = null!;

        /// <summary>
        /// Provides information about the network configuration of the desktop pool.
        /// </summary>
        [Input("networkConfiguration", required: true)]
        public Input<Inputs.DesktopPoolNetworkConfigurationArgs> NetworkConfiguration { get; set; } = null!;

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// A list of network security groups for the desktop pool.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        /// <summary>
        /// The shape of the desktop pool.
        /// </summary>
        [Input("shapeName", required: true)]
        public Input<string> ShapeName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of standby desktops available in the desktop pool.
        /// </summary>
        [Input("standbySize", required: true)]
        public Input<int> StandbySize { get; set; } = null!;

        /// <summary>
        /// The backup policy OCID of the storage.
        /// </summary>
        [Input("storageBackupPolicyId", required: true)]
        public Input<string> StorageBackupPolicyId { get; set; } = null!;

        /// <summary>
        /// The size in GBs of the storage for the desktop pool.
        /// </summary>
        [Input("storageSizeInGbs", required: true)]
        public Input<int> StorageSizeInGbs { get; set; } = null!;

        /// <summary>
        /// (Updatable) The start time of the desktop pool.
        /// </summary>
        [Input("timeStartScheduled")]
        public Input<string>? TimeStartScheduled { get; set; }

        /// <summary>
        /// (Updatable) The stop time of the desktop pool.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timeStopScheduled")]
        public Input<string>? TimeStopScheduled { get; set; }

        public DesktopPoolArgs()
        {
        }
        public static new DesktopPoolArgs Empty => new DesktopPoolArgs();
    }

    public sealed class DesktopPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of active desktops in the desktop pool.
        /// </summary>
        [Input("activeDesktops")]
        public Input<int>? ActiveDesktops { get; set; }

        /// <summary>
        /// Indicates whether desktop pool users have administrative privileges on their desktop.
        /// </summary>
        [Input("arePrivilegedUsers")]
        public Input<bool>? ArePrivilegedUsers { get; set; }

        /// <summary>
        /// The availability domain of the desktop pool.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        /// </summary>
        [Input("availabilityPolicy")]
        public Input<Inputs.DesktopPoolAvailabilityPolicyGetArgs>? AvailabilityPolicy { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment which will contain the desktop pool.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        /// </summary>
        [Input("contactDetails")]
        public Input<string>? ContactDetails { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        /// </summary>
        [Input("devicePolicy")]
        public Input<Inputs.DesktopPoolDevicePolicyGetArgs>? DevicePolicy { get; set; }

        /// <summary>
        /// (Updatable) A user friendly display name. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Provides information about the desktop image.
        /// </summary>
        [Input("image")]
        public Input<Inputs.DesktopPoolImageGetArgs>? Image { get; set; }

        /// <summary>
        /// Indicates whether storage is enabled for the desktop pool.
        /// </summary>
        [Input("isStorageEnabled")]
        public Input<bool>? IsStorageEnabled { get; set; }

        /// <summary>
        /// (Updatable) The maximum number of desktops permitted in the desktop pool.
        /// </summary>
        [Input("maximumSize")]
        public Input<int>? MaximumSize { get; set; }

        /// <summary>
        /// Provides information about the network configuration of the desktop pool.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.DesktopPoolNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// A list of network security groups for the desktop pool.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        /// <summary>
        /// The shape of the desktop pool.
        /// </summary>
        [Input("shapeName")]
        public Input<string>? ShapeName { get; set; }

        /// <summary>
        /// (Updatable) The maximum number of standby desktops available in the desktop pool.
        /// </summary>
        [Input("standbySize")]
        public Input<int>? StandbySize { get; set; }

        /// <summary>
        /// The current state of the desktop pool.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The backup policy OCID of the storage.
        /// </summary>
        [Input("storageBackupPolicyId")]
        public Input<string>? StorageBackupPolicyId { get; set; }

        /// <summary>
        /// The size in GBs of the storage for the desktop pool.
        /// </summary>
        [Input("storageSizeInGbs")]
        public Input<int>? StorageSizeInGbs { get; set; }

        /// <summary>
        /// The date and time the resource was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// (Updatable) The start time of the desktop pool.
        /// </summary>
        [Input("timeStartScheduled")]
        public Input<string>? TimeStartScheduled { get; set; }

        /// <summary>
        /// (Updatable) The stop time of the desktop pool.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timeStopScheduled")]
        public Input<string>? TimeStopScheduled { get; set; }

        public DesktopPoolState()
        {
        }
        public static new DesktopPoolState Empty => new DesktopPoolState();
    }
}
