// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Desktops
{
    public static class GetDesktopPoolDesktops
    {
        /// <summary>
        /// This data source provides the list of Desktop Pool Desktops in Oracle Cloud Infrastructure Desktops service.
        /// 
        /// Returns a list of desktops within a given desktop pool. You can limit the results to an availability domain, desktop name, or desktop state. You can limit the number of results returned, sort the results by time or name, and sort in ascending or descending order.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDesktopPoolDesktops = Oci.Desktops.GetDesktopPoolDesktops.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DesktopPoolId = testDesktopPool.Id,
        ///         AvailabilityDomain = desktopPoolDesktopAvailabilityDomain,
        ///         DisplayName = desktopPoolDesktopDisplayName,
        ///         Id = desktopPoolDesktopId,
        ///         State = desktopPoolDesktopState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDesktopPoolDesktopsResult> InvokeAsync(GetDesktopPoolDesktopsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDesktopPoolDesktopsResult>("oci:Desktops/getDesktopPoolDesktops:getDesktopPoolDesktops", args ?? new GetDesktopPoolDesktopsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Desktop Pool Desktops in Oracle Cloud Infrastructure Desktops service.
        /// 
        /// Returns a list of desktops within a given desktop pool. You can limit the results to an availability domain, desktop name, or desktop state. You can limit the number of results returned, sort the results by time or name, and sort in ascending or descending order.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDesktopPoolDesktops = Oci.Desktops.GetDesktopPoolDesktops.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DesktopPoolId = testDesktopPool.Id,
        ///         AvailabilityDomain = desktopPoolDesktopAvailabilityDomain,
        ///         DisplayName = desktopPoolDesktopDisplayName,
        ///         Id = desktopPoolDesktopId,
        ///         State = desktopPoolDesktopState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDesktopPoolDesktopsResult> Invoke(GetDesktopPoolDesktopsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDesktopPoolDesktopsResult>("oci:Desktops/getDesktopPoolDesktops:getDesktopPoolDesktops", args ?? new GetDesktopPoolDesktopsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Desktop Pool Desktops in Oracle Cloud Infrastructure Desktops service.
        /// 
        /// Returns a list of desktops within a given desktop pool. You can limit the results to an availability domain, desktop name, or desktop state. You can limit the number of results returned, sort the results by time or name, and sort in ascending or descending order.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDesktopPoolDesktops = Oci.Desktops.GetDesktopPoolDesktops.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DesktopPoolId = testDesktopPool.Id,
        ///         AvailabilityDomain = desktopPoolDesktopAvailabilityDomain,
        ///         DisplayName = desktopPoolDesktopDisplayName,
        ///         Id = desktopPoolDesktopId,
        ///         State = desktopPoolDesktopState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDesktopPoolDesktopsResult> Invoke(GetDesktopPoolDesktopsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDesktopPoolDesktopsResult>("oci:Desktops/getDesktopPoolDesktops:getDesktopPoolDesktops", args ?? new GetDesktopPoolDesktopsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDesktopPoolDesktopsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment of the desktop pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the desktop pool.
        /// </summary>
        [Input("desktopPoolId", required: true)]
        public string DesktopPoolId { get; set; } = null!;

        /// <summary>
        /// A filter to return only results with the given displayName.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDesktopPoolDesktopsFilterArgs>? _filters;
        public List<Inputs.GetDesktopPoolDesktopsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDesktopPoolDesktopsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only results with the given OCID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only results with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDesktopPoolDesktopsArgs()
        {
        }
        public static new GetDesktopPoolDesktopsArgs Empty => new GetDesktopPoolDesktopsArgs();
    }

    public sealed class GetDesktopPoolDesktopsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment of the desktop pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the desktop pool.
        /// </summary>
        [Input("desktopPoolId", required: true)]
        public Input<string> DesktopPoolId { get; set; } = null!;

        /// <summary>
        /// A filter to return only results with the given displayName.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDesktopPoolDesktopsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDesktopPoolDesktopsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDesktopPoolDesktopsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only results with the given OCID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only results with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDesktopPoolDesktopsInvokeArgs()
        {
        }
        public static new GetDesktopPoolDesktopsInvokeArgs Empty => new GetDesktopPoolDesktopsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDesktopPoolDesktopsResult
    {
        public readonly string? AvailabilityDomain;
        public readonly string CompartmentId;
        /// <summary>
        /// The list of desktop_pool_desktop_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDesktopPoolDesktopsDesktopPoolDesktopCollectionResult> DesktopPoolDesktopCollections;
        public readonly string DesktopPoolId;
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDesktopPoolDesktopsFilterResult> Filters;
        public readonly string? Id;
        /// <summary>
        /// The state of the desktop.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDesktopPoolDesktopsResult(
            string? availabilityDomain,

            string compartmentId,

            ImmutableArray<Outputs.GetDesktopPoolDesktopsDesktopPoolDesktopCollectionResult> desktopPoolDesktopCollections,

            string desktopPoolId,

            string? displayName,

            ImmutableArray<Outputs.GetDesktopPoolDesktopsFilterResult> filters,

            string? id,

            string? state)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            DesktopPoolDesktopCollections = desktopPoolDesktopCollections;
            DesktopPoolId = desktopPoolId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
