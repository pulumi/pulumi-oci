// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Desktops
{
    public static class GetDesktopPoolVolumes
    {
        /// <summary>
        /// This data source provides the list of Desktop Pool Volumes in Oracle Cloud Infrastructure Desktops service.
        /// 
        /// Returns a list of volumes within the given desktop pool. You can limit the results to an availability domain, volume name, or volume state. You can limit the number of results returned, sort the results by time or name, and sort in ascending or descending order.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDesktopPoolVolumes = Oci.Desktops.GetDesktopPoolVolumes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DesktopPoolId = testDesktopPool.Id,
        ///         AvailabilityDomain = desktopPoolVolumeAvailabilityDomain,
        ///         DisplayName = desktopPoolVolumeDisplayName,
        ///         Id = desktopPoolVolumeId,
        ///         State = desktopPoolVolumeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDesktopPoolVolumesResult> InvokeAsync(GetDesktopPoolVolumesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDesktopPoolVolumesResult>("oci:Desktops/getDesktopPoolVolumes:getDesktopPoolVolumes", args ?? new GetDesktopPoolVolumesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Desktop Pool Volumes in Oracle Cloud Infrastructure Desktops service.
        /// 
        /// Returns a list of volumes within the given desktop pool. You can limit the results to an availability domain, volume name, or volume state. You can limit the number of results returned, sort the results by time or name, and sort in ascending or descending order.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDesktopPoolVolumes = Oci.Desktops.GetDesktopPoolVolumes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DesktopPoolId = testDesktopPool.Id,
        ///         AvailabilityDomain = desktopPoolVolumeAvailabilityDomain,
        ///         DisplayName = desktopPoolVolumeDisplayName,
        ///         Id = desktopPoolVolumeId,
        ///         State = desktopPoolVolumeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDesktopPoolVolumesResult> Invoke(GetDesktopPoolVolumesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDesktopPoolVolumesResult>("oci:Desktops/getDesktopPoolVolumes:getDesktopPoolVolumes", args ?? new GetDesktopPoolVolumesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDesktopPoolVolumesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment of the desktop pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the desktop pool.
        /// </summary>
        [Input("desktopPoolId", required: true)]
        public string DesktopPoolId { get; set; } = null!;

        /// <summary>
        /// A filter to return only results with the given displayName.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDesktopPoolVolumesFilterArgs>? _filters;
        public List<Inputs.GetDesktopPoolVolumesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDesktopPoolVolumesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only results with the given OCID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only results with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDesktopPoolVolumesArgs()
        {
        }
        public static new GetDesktopPoolVolumesArgs Empty => new GetDesktopPoolVolumesArgs();
    }

    public sealed class GetDesktopPoolVolumesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the availability domain.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment of the desktop pool.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the desktop pool.
        /// </summary>
        [Input("desktopPoolId", required: true)]
        public Input<string> DesktopPoolId { get; set; } = null!;

        /// <summary>
        /// A filter to return only results with the given displayName.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDesktopPoolVolumesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDesktopPoolVolumesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDesktopPoolVolumesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only results with the given OCID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only results with the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDesktopPoolVolumesInvokeArgs()
        {
        }
        public static new GetDesktopPoolVolumesInvokeArgs Empty => new GetDesktopPoolVolumesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDesktopPoolVolumesResult
    {
        /// <summary>
        /// The availability domain of the desktop pool.
        /// </summary>
        public readonly string? AvailabilityDomain;
        public readonly string CompartmentId;
        public readonly string DesktopPoolId;
        /// <summary>
        /// The list of desktop_pool_volume_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDesktopPoolVolumesDesktopPoolVolumeCollectionResult> DesktopPoolVolumeCollections;
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDesktopPoolVolumesFilterResult> Filters;
        /// <summary>
        /// The OCID of the desktop pool volume.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The state of the desktop pool volume.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDesktopPoolVolumesResult(
            string? availabilityDomain,

            string compartmentId,

            string desktopPoolId,

            ImmutableArray<Outputs.GetDesktopPoolVolumesDesktopPoolVolumeCollectionResult> desktopPoolVolumeCollections,

            string? displayName,

            ImmutableArray<Outputs.GetDesktopPoolVolumesFilterResult> filters,

            string? id,

            string? state)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            DesktopPoolId = desktopPoolId;
            DesktopPoolVolumeCollections = desktopPoolVolumeCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
