// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    /// <summary>
    /// This resource provides the Deployment resource in Oracle Cloud Infrastructure Devops service.
    /// 
    /// Creates a new deployment.
    /// 
    /// ## Import
    /// 
    /// Deployments can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DevOps/deployment:Deployment test_deployment "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:DevOps/deployment:Deployment")]
    public partial class Deployment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of a compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of artifact override arguments at the time of deployment.
        /// </summary>
        [Output("deployArtifactOverrideArguments")]
        public Output<Outputs.DeploymentDeployArtifactOverrideArguments> DeployArtifactOverrideArguments { get; private set; } = null!;

        /// <summary>
        /// List of all artifacts used in the pipeline.
        /// </summary>
        [Output("deployPipelineArtifacts")]
        public Output<ImmutableArray<Outputs.DeploymentDeployPipelineArtifact>> DeployPipelineArtifacts { get; private set; } = null!;

        /// <summary>
        /// List of all environments used in the pipeline.
        /// </summary>
        [Output("deployPipelineEnvironments")]
        public Output<ImmutableArray<Outputs.DeploymentDeployPipelineEnvironment>> DeployPipelineEnvironments { get; private set; } = null!;

        /// <summary>
        /// The OCID of a pipeline.
        /// </summary>
        [Output("deployPipelineId")]
        public Output<string> DeployPipelineId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the stage.
        /// </summary>
        [Output("deployStageId")]
        public Output<string> DeployStageId { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of arguments to be overriden per Stage at the time of deployment.
        /// </summary>
        [Output("deployStageOverrideArguments")]
        public Output<Outputs.DeploymentDeployStageOverrideArguments> DeployStageOverrideArguments { get; private set; } = null!;

        /// <summary>
        /// Specifies list of arguments passed along with the deployment.
        /// </summary>
        [Output("deploymentArguments")]
        public Output<Outputs.DeploymentDeploymentArguments> DeploymentArguments { get; private set; } = null!;

        /// <summary>
        /// The execution progress details of a deployment.
        /// </summary>
        [Output("deploymentExecutionProgresses")]
        public Output<ImmutableArray<Outputs.DeploymentDeploymentExecutionProgress>> DeploymentExecutionProgresses { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies type for this deployment.
        /// </summary>
        [Output("deploymentType")]
        public Output<string> DeploymentType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Deployment display name. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// Specifies the OCID of the previous deployment to be redeployed.
        /// </summary>
        [Output("previousDeploymentId")]
        public Output<string> PreviousDeploymentId { get; private set; } = null!;

        /// <summary>
        /// The OCID of a project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The current state of the deployment.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// A boolean specifying if a new deployment should be created on every apply. As long as this value is set to true in the config, every apply will trigger a new deployment to be created. The existing deployment resource will be replaced with the new one in the state file (deployment resources are never deleted, they persist as a store of records, but your state file will only track the latest one created with this resource block). 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values. Additionally, while `trigger_new_devops_deployment`
        /// is set true each apply will force the destruction and recreation of the resource with the new property values.
        /// </summary>
        [Output("triggerNewDevopsDeployment")]
        public Output<bool?> TriggerNewDevopsDeployment { get; private set; } = null!;


        /// <summary>
        /// Create a Deployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Deployment(string name, DeploymentArgs args, CustomResourceOptions? options = null)
            : base("oci:DevOps/deployment:Deployment", name, args ?? new DeploymentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Deployment(string name, Input<string> id, DeploymentState? state = null, CustomResourceOptions? options = null)
            : base("oci:DevOps/deployment:Deployment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Deployment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Deployment Get(string name, Input<string> id, DeploymentState? state = null, CustomResourceOptions? options = null)
        {
            return new Deployment(name, id, state, options);
        }
    }

    public sealed class DeploymentArgs : global::Pulumi.ResourceArgs
    {
        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// Specifies the list of artifact override arguments at the time of deployment.
        /// </summary>
        [Input("deployArtifactOverrideArguments")]
        public Input<Inputs.DeploymentDeployArtifactOverrideArgumentsArgs>? DeployArtifactOverrideArguments { get; set; }

        /// <summary>
        /// The OCID of a pipeline.
        /// </summary>
        [Input("deployPipelineId", required: true)]
        public Input<string> DeployPipelineId { get; set; } = null!;

        /// <summary>
        /// The OCID of the stage.
        /// </summary>
        [Input("deployStageId")]
        public Input<string>? DeployStageId { get; set; }

        /// <summary>
        /// Specifies the list of arguments to be overriden per Stage at the time of deployment.
        /// </summary>
        [Input("deployStageOverrideArguments")]
        public Input<Inputs.DeploymentDeployStageOverrideArgumentsArgs>? DeployStageOverrideArguments { get; set; }

        /// <summary>
        /// Specifies list of arguments passed along with the deployment.
        /// </summary>
        [Input("deploymentArguments")]
        public Input<Inputs.DeploymentDeploymentArgumentsArgs>? DeploymentArguments { get; set; }

        /// <summary>
        /// (Updatable) Specifies type for this deployment.
        /// </summary>
        [Input("deploymentType", required: true)]
        public Input<string> DeploymentType { get; set; } = null!;

        /// <summary>
        /// (Updatable) Deployment display name. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Specifies the OCID of the previous deployment to be redeployed.
        /// </summary>
        [Input("previousDeploymentId")]
        public Input<string>? PreviousDeploymentId { get; set; }

        /// <summary>
        /// A boolean specifying if a new deployment should be created on every apply. As long as this value is set to true in the config, every apply will trigger a new deployment to be created. The existing deployment resource will be replaced with the new one in the state file (deployment resources are never deleted, they persist as a store of records, but your state file will only track the latest one created with this resource block). 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values. Additionally, while `trigger_new_devops_deployment`
        /// is set true each apply will force the destruction and recreation of the resource with the new property values.
        /// </summary>
        [Input("triggerNewDevopsDeployment")]
        public Input<bool>? TriggerNewDevopsDeployment { get; set; }

        public DeploymentArgs()
        {
        }
        public static new DeploymentArgs Empty => new DeploymentArgs();
    }

    public sealed class DeploymentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of a compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// Specifies the list of artifact override arguments at the time of deployment.
        /// </summary>
        [Input("deployArtifactOverrideArguments")]
        public Input<Inputs.DeploymentDeployArtifactOverrideArgumentsGetArgs>? DeployArtifactOverrideArguments { get; set; }

        [Input("deployPipelineArtifacts")]
        private InputList<Inputs.DeploymentDeployPipelineArtifactGetArgs>? _deployPipelineArtifacts;

        /// <summary>
        /// List of all artifacts used in the pipeline.
        /// </summary>
        public InputList<Inputs.DeploymentDeployPipelineArtifactGetArgs> DeployPipelineArtifacts
        {
            get => _deployPipelineArtifacts ?? (_deployPipelineArtifacts = new InputList<Inputs.DeploymentDeployPipelineArtifactGetArgs>());
            set => _deployPipelineArtifacts = value;
        }

        [Input("deployPipelineEnvironments")]
        private InputList<Inputs.DeploymentDeployPipelineEnvironmentGetArgs>? _deployPipelineEnvironments;

        /// <summary>
        /// List of all environments used in the pipeline.
        /// </summary>
        public InputList<Inputs.DeploymentDeployPipelineEnvironmentGetArgs> DeployPipelineEnvironments
        {
            get => _deployPipelineEnvironments ?? (_deployPipelineEnvironments = new InputList<Inputs.DeploymentDeployPipelineEnvironmentGetArgs>());
            set => _deployPipelineEnvironments = value;
        }

        /// <summary>
        /// The OCID of a pipeline.
        /// </summary>
        [Input("deployPipelineId")]
        public Input<string>? DeployPipelineId { get; set; }

        /// <summary>
        /// The OCID of the stage.
        /// </summary>
        [Input("deployStageId")]
        public Input<string>? DeployStageId { get; set; }

        /// <summary>
        /// Specifies the list of arguments to be overriden per Stage at the time of deployment.
        /// </summary>
        [Input("deployStageOverrideArguments")]
        public Input<Inputs.DeploymentDeployStageOverrideArgumentsGetArgs>? DeployStageOverrideArguments { get; set; }

        /// <summary>
        /// Specifies list of arguments passed along with the deployment.
        /// </summary>
        [Input("deploymentArguments")]
        public Input<Inputs.DeploymentDeploymentArgumentsGetArgs>? DeploymentArguments { get; set; }

        [Input("deploymentExecutionProgresses")]
        private InputList<Inputs.DeploymentDeploymentExecutionProgressGetArgs>? _deploymentExecutionProgresses;

        /// <summary>
        /// The execution progress details of a deployment.
        /// </summary>
        public InputList<Inputs.DeploymentDeploymentExecutionProgressGetArgs> DeploymentExecutionProgresses
        {
            get => _deploymentExecutionProgresses ?? (_deploymentExecutionProgresses = new InputList<Inputs.DeploymentDeploymentExecutionProgressGetArgs>());
            set => _deploymentExecutionProgresses = value;
        }

        /// <summary>
        /// (Updatable) Specifies type for this deployment.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// (Updatable) Deployment display name. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// Specifies the OCID of the previous deployment to be redeployed.
        /// </summary>
        [Input("previousDeploymentId")]
        public Input<string>? PreviousDeploymentId { get; set; }

        /// <summary>
        /// The OCID of a project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The current state of the deployment.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// A boolean specifying if a new deployment should be created on every apply. As long as this value is set to true in the config, every apply will trigger a new deployment to be created. The existing deployment resource will be replaced with the new one in the state file (deployment resources are never deleted, they persist as a store of records, but your state file will only track the latest one created with this resource block). 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values. Additionally, while `trigger_new_devops_deployment`
        /// is set true each apply will force the destruction and recreation of the resource with the new property values.
        /// </summary>
        [Input("triggerNewDevopsDeployment")]
        public Input<bool>? TriggerNewDevopsDeployment { get; set; }

        public DeploymentState()
        {
        }
        public static new DeploymentState Empty => new DeploymentState();
    }
}
