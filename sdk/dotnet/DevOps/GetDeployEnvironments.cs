// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetDeployEnvironments
    {
        /// <summary>
        /// This data source provides the list of Deploy Environments in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of deployment environments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployEnvironments = Oci.DevOps.GetDeployEnvironments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = deployEnvironmentDisplayName,
        ///         Id = deployEnvironmentId,
        ///         ProjectId = testProject.Id,
        ///         State = deployEnvironmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeployEnvironmentsResult> InvokeAsync(GetDeployEnvironmentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeployEnvironmentsResult>("oci:DevOps/getDeployEnvironments:getDeployEnvironments", args ?? new GetDeployEnvironmentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Deploy Environments in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of deployment environments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployEnvironments = Oci.DevOps.GetDeployEnvironments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = deployEnvironmentDisplayName,
        ///         Id = deployEnvironmentId,
        ///         ProjectId = testProject.Id,
        ///         State = deployEnvironmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeployEnvironmentsResult> Invoke(GetDeployEnvironmentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeployEnvironmentsResult>("oci:DevOps/getDeployEnvironments:getDeployEnvironments", args ?? new GetDeployEnvironmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeployEnvironmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDeployEnvironmentsFilterArgs>? _filters;
        public List<Inputs.GetDeployEnvironmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDeployEnvironmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single resource by ID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only DeployEnvironments that matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDeployEnvironmentsArgs()
        {
        }
        public static new GetDeployEnvironmentsArgs Empty => new GetDeployEnvironmentsArgs();
    }

    public sealed class GetDeployEnvironmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDeployEnvironmentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDeployEnvironmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDeployEnvironmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single resource by ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only DeployEnvironments that matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDeployEnvironmentsInvokeArgs()
        {
        }
        public static new GetDeployEnvironmentsInvokeArgs Empty => new GetDeployEnvironmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeployEnvironmentsResult
    {
        /// <summary>
        /// The OCID of a compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The list of deploy_environment_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeployEnvironmentsDeployEnvironmentCollectionResult> DeployEnvironmentCollections;
        /// <summary>
        /// Deployment environment display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDeployEnvironmentsFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The OCID of a project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The current state of the deployment environment.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDeployEnvironmentsResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetDeployEnvironmentsDeployEnvironmentCollectionResult> deployEnvironmentCollections,

            string? displayName,

            ImmutableArray<Outputs.GetDeployEnvironmentsFilterResult> filters,

            string? id,

            string? projectId,

            string? state)
        {
            CompartmentId = compartmentId;
            DeployEnvironmentCollections = deployEnvironmentCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ProjectId = projectId;
            State = state;
        }
    }
}
