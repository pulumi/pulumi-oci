// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetDeployPipelines
    {
        /// <summary>
        /// This data source provides the list of Deploy Pipelines in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of deployment pipelines.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployPipelines = Oci.DevOps.GetDeployPipelines.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = deployPipelineDisplayName,
        ///         Id = deployPipelineId,
        ///         ProjectId = testProject.Id,
        ///         State = deployPipelineState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDeployPipelinesResult> InvokeAsync(GetDeployPipelinesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeployPipelinesResult>("oci:DevOps/getDeployPipelines:getDeployPipelines", args ?? new GetDeployPipelinesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Deploy Pipelines in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of deployment pipelines.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployPipelines = Oci.DevOps.GetDeployPipelines.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = deployPipelineDisplayName,
        ///         Id = deployPipelineId,
        ///         ProjectId = testProject.Id,
        ///         State = deployPipelineState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDeployPipelinesResult> Invoke(GetDeployPipelinesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeployPipelinesResult>("oci:DevOps/getDeployPipelines:getDeployPipelines", args ?? new GetDeployPipelinesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeployPipelinesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDeployPipelinesFilterArgs>? _filters;
        public List<Inputs.GetDeployPipelinesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDeployPipelinesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single resource by ID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only DeployPipelines that matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDeployPipelinesArgs()
        {
        }
        public static new GetDeployPipelinesArgs Empty => new GetDeployPipelinesArgs();
    }

    public sealed class GetDeployPipelinesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDeployPipelinesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDeployPipelinesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDeployPipelinesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single resource by ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only DeployPipelines that matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDeployPipelinesInvokeArgs()
        {
        }
        public static new GetDeployPipelinesInvokeArgs Empty => new GetDeployPipelinesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeployPipelinesResult
    {
        /// <summary>
        /// The OCID of the compartment where the pipeline is created.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The list of deploy_pipeline_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeployPipelinesDeployPipelineCollectionResult> DeployPipelineCollections;
        /// <summary>
        /// Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDeployPipelinesFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The OCID of a project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The current state of the deployment pipeline.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDeployPipelinesResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetDeployPipelinesDeployPipelineCollectionResult> deployPipelineCollections,

            string? displayName,

            ImmutableArray<Outputs.GetDeployPipelinesFilterResult> filters,

            string? id,

            string? projectId,

            string? state)
        {
            CompartmentId = compartmentId;
            DeployPipelineCollections = deployPipelineCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ProjectId = projectId;
            State = state;
        }
    }
}
