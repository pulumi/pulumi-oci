// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetDeployment
    {
        /// <summary>
        /// This data source provides details about a specific Deployment resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a deployment by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployment = Oci.DevOps.GetDeployment.Invoke(new()
        ///     {
        ///         DeploymentId = oci_devops_deployment.Test_deployment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDeploymentResult> InvokeAsync(GetDeploymentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentResult>("oci:DevOps/getDeployment:getDeployment", args ?? new GetDeploymentArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Deployment resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a deployment by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployment = Oci.DevOps.GetDeployment.Invoke(new()
        ///     {
        ///         DeploymentId = oci_devops_deployment.Test_deployment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDeploymentResult> Invoke(GetDeploymentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentResult>("oci:DevOps/getDeployment:getDeployment", args ?? new GetDeploymentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique deployment identifier.
        /// </summary>
        [Input("deploymentId", required: true)]
        public string DeploymentId { get; set; } = null!;

        public GetDeploymentArgs()
        {
        }
        public static new GetDeploymentArgs Empty => new GetDeploymentArgs();
    }

    public sealed class GetDeploymentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique deployment identifier.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        public GetDeploymentInvokeArgs()
        {
        }
        public static new GetDeploymentInvokeArgs Empty => new GetDeploymentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentResult
    {
        /// <summary>
        /// The OCID of a compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Specifies the list of artifact override arguments at the time of deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeployArtifactOverrideArgumentResult> DeployArtifactOverrideArguments;
        /// <summary>
        /// List of all artifacts used in the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeployPipelineArtifactResult> DeployPipelineArtifacts;
        /// <summary>
        /// List of all environments used in the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeployPipelineEnvironmentResult> DeployPipelineEnvironments;
        /// <summary>
        /// The OCID of a pipeline.
        /// </summary>
        public readonly string DeployPipelineId;
        /// <summary>
        /// The OCID of the stage.
        /// </summary>
        public readonly string DeployStageId;
        /// <summary>
        /// Specifies the list of arguments to be overriden per Stage at the time of deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeployStageOverrideArgumentResult> DeployStageOverrideArguments;
        /// <summary>
        /// Specifies list of arguments passed along with the deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeploymentArgumentResult> DeploymentArguments;
        /// <summary>
        /// The execution progress details of a deployment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentDeploymentExecutionProgressResult> DeploymentExecutionProgresses;
        public readonly string DeploymentId;
        /// <summary>
        /// Specifies type of Deployment
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// Deployment identifier which can be renamed and is not necessarily unique. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Specifies the OCID of the previous deployment to be redeployed.
        /// </summary>
        public readonly string PreviousDeploymentId;
        /// <summary>
        /// The OCID of a project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The current state of the deployment.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// Time the deployment was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Time the deployment was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;
        public readonly bool TriggerNewDevopsDeployment;

        [OutputConstructor]
        private GetDeploymentResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            ImmutableArray<Outputs.GetDeploymentDeployArtifactOverrideArgumentResult> deployArtifactOverrideArguments,

            ImmutableArray<Outputs.GetDeploymentDeployPipelineArtifactResult> deployPipelineArtifacts,

            ImmutableArray<Outputs.GetDeploymentDeployPipelineEnvironmentResult> deployPipelineEnvironments,

            string deployPipelineId,

            string deployStageId,

            ImmutableArray<Outputs.GetDeploymentDeployStageOverrideArgumentResult> deployStageOverrideArguments,

            ImmutableArray<Outputs.GetDeploymentDeploymentArgumentResult> deploymentArguments,

            ImmutableArray<Outputs.GetDeploymentDeploymentExecutionProgressResult> deploymentExecutionProgresses,

            string deploymentId,

            string deploymentType,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string lifecycleDetails,

            string previousDeploymentId,

            string projectId,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            bool triggerNewDevopsDeployment)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DeployArtifactOverrideArguments = deployArtifactOverrideArguments;
            DeployPipelineArtifacts = deployPipelineArtifacts;
            DeployPipelineEnvironments = deployPipelineEnvironments;
            DeployPipelineId = deployPipelineId;
            DeployStageId = deployStageId;
            DeployStageOverrideArguments = deployStageOverrideArguments;
            DeploymentArguments = deploymentArguments;
            DeploymentExecutionProgresses = deploymentExecutionProgresses;
            DeploymentId = deploymentId;
            DeploymentType = deploymentType;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            PreviousDeploymentId = previousDeploymentId;
            ProjectId = projectId;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TriggerNewDevopsDeployment = triggerNewDevopsDeployment;
        }
    }
}
