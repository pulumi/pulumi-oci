// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositories
    {
        /// <summary>
        /// This data source provides the list of Repositories in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of repositories given a compartment ID or a project ID.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositories = Oci.DevOps.GetRepositories.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = repositoryName,
        ///         ProjectId = testProject.Id,
        ///         RepositoryId = testRepository.Id,
        ///         State = repositoryState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoriesResult> InvokeAsync(GetRepositoriesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoriesResult>("oci:DevOps/getRepositories:getRepositories", args ?? new GetRepositoriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Repositories in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of repositories given a compartment ID or a project ID.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositories = Oci.DevOps.GetRepositories.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = repositoryName,
        ///         ProjectId = testProject.Id,
        ///         RepositoryId = testRepository.Id,
        ///         State = repositoryState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoriesResult> Invoke(GetRepositoriesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoriesResult>("oci:DevOps/getRepositories:getRepositories", args ?? new GetRepositoriesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Repositories in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of repositories given a compartment ID or a project ID.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositories = Oci.DevOps.GetRepositories.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = repositoryName,
        ///         ProjectId = testProject.Id,
        ///         RepositoryId = testRepository.Id,
        ///         State = repositoryState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoriesResult> Invoke(GetRepositoriesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoriesResult>("oci:DevOps/getRepositories:getRepositories", args ?? new GetRepositoriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetRepositoriesFilterArgs>? _filters;
        public List<Inputs.GetRepositoriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRepositoriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId")]
        public string? RepositoryId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycle state matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetRepositoriesArgs()
        {
        }
        public static new GetRepositoriesArgs Empty => new GetRepositoriesArgs();
    }

    public sealed class GetRepositoriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRepositoriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetRepositoriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRepositoriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycle state matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetRepositoriesInvokeArgs()
        {
        }
        public static new GetRepositoriesInvokeArgs Empty => new GetRepositoriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoriesResult
    {
        /// <summary>
        /// The OCID of the repository's compartment.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetRepositoriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the repository. Should be unique within the project. This value is mutable.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The OCID of the DevOps project containing the repository.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The list of repository_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoriesRepositoryCollectionResult> RepositoryCollections;
        public readonly string? RepositoryId;
        /// <summary>
        /// The current state of the repository.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetRepositoriesResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetRepositoriesFilterResult> filters,

            string id,

            string? name,

            string? projectId,

            ImmutableArray<Outputs.GetRepositoriesRepositoryCollectionResult> repositoryCollections,

            string? repositoryId,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            ProjectId = projectId;
            RepositoryCollections = repositoryCollections;
            RepositoryId = repositoryId;
            State = state;
        }
    }
}
