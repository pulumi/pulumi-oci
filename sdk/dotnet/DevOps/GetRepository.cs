// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepository
    {
        /// <summary>
        /// This data source provides details about a specific Repository resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a repository by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepository = Oci.DevOps.GetRepository.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         Fields = @var.Repository_fields,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryResult> InvokeAsync(GetRepositoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryResult>("oci:DevOps/getRepository:getRepository", args ?? new GetRepositoryArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a repository by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepository = Oci.DevOps.GetRepository.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         Fields = @var.Repository_fields,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryResult> Invoke(GetRepositoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryResult>("oci:DevOps/getRepository:getRepository", args ?? new GetRepositoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryArgs : global::Pulumi.InvokeArgs
    {
        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Fields parameter can contain multiple flags useful in deciding the API functionality.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryArgs()
        {
        }
        public static new GetRepositoryArgs Empty => new GetRepositoryArgs();
    }

    public sealed class GetRepositoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Fields parameter can contain multiple flags useful in deciding the API functionality.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryInvokeArgs()
        {
        }
        public static new GetRepositoryInvokeArgs Empty => new GetRepositoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryResult
    {
        /// <summary>
        /// The count of the branches present in the repository.
        /// </summary>
        public readonly int? BranchCount;
        /// <summary>
        /// The count of the commits present in the repository.
        /// </summary>
        public readonly int? CommitCount;
        /// <summary>
        /// The OCID of the repository's compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The default branch of the repository.
        /// </summary>
        public readonly string? DefaultBranch;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// Details of the repository. Avoid entering confidential information.
        /// </summary>
        public readonly string? Description;
        public readonly ImmutableArray<string> Fields;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// HTTP URL that you use to git clone, pull and push.
        /// </summary>
        public readonly string? HttpUrl;
        /// <summary>
        /// The OCID of the repository. This value is unique and immutable.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string? LifecyleDetails;
        /// <summary>
        /// Configuration information for mirroring the repository.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryMirrorRepositoryConfigResult> MirrorRepositoryConfigs;
        /// <summary>
        /// Unique name of a repository. This value is mutable.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Tenancy unique namespace.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// The OCID of the DevOps project containing the repository.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Unique project name in a namespace.
        /// </summary>
        public readonly string? ProjectName;
        public readonly string RepositoryId;
        /// <summary>
        /// Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository.
        /// </summary>
        public readonly string? RepositoryType;
        /// <summary>
        /// The size of the repository in bytes.
        /// </summary>
        public readonly string? SizeInBytes;
        /// <summary>
        /// SSH URL that you use to git clone, pull and push.
        /// </summary>
        public readonly string? SshUrl;
        /// <summary>
        /// The current state of the repository.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SystemTags;
        /// <summary>
        /// The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
        /// </summary>
        public readonly ImmutableArray<string> TriggerBuildEvents;

        [OutputConstructor]
        private GetRepositoryResult(
            int? branchCount,

            int? commitCount,

            string? compartmentId,

            string? defaultBranch,

            ImmutableDictionary<string, object>? definedTags,

            string? description,

            ImmutableArray<string> fields,

            ImmutableDictionary<string, object>? freeformTags,

            string? httpUrl,

            string? id,

            string? lifecyleDetails,

            ImmutableArray<Outputs.GetRepositoryMirrorRepositoryConfigResult> mirrorRepositoryConfigs,

            string? name,

            string? @namespace,

            string? projectId,

            string? projectName,

            string repositoryId,

            string? repositoryType,

            string? sizeInBytes,

            string? sshUrl,

            string? state,

            ImmutableDictionary<string, object>? systemTags,

            string? timeCreated,

            string? timeUpdated,

            ImmutableArray<string> triggerBuildEvents)
        {
            BranchCount = branchCount;
            CommitCount = commitCount;
            CompartmentId = compartmentId;
            DefaultBranch = defaultBranch;
            DefinedTags = definedTags;
            Description = description;
            Fields = fields;
            FreeformTags = freeformTags;
            HttpUrl = httpUrl;
            Id = id;
            LifecyleDetails = lifecyleDetails;
            MirrorRepositoryConfigs = mirrorRepositoryConfigs;
            Name = name;
            Namespace = @namespace;
            ProjectId = projectId;
            ProjectName = projectName;
            RepositoryId = repositoryId;
            RepositoryType = repositoryType;
            SizeInBytes = sizeInBytes;
            SshUrl = sshUrl;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TriggerBuildEvents = triggerBuildEvents;
        }
    }
}
