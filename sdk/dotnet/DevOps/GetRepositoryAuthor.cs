// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryAuthor
    {
        /// <summary>
        /// This data source provides details about a specific Repository Author resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieve a list of all the authors.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRepositoryAuthor = Output.Create(Oci.DevOps.GetRepositoryAuthor.InvokeAsync(new Oci.DevOps.GetRepositoryAuthorArgs
        ///         {
        ///             RepositoryId = oci_devops_repository.Test_repository.Id,
        ///             RefName = @var.Repository_author_ref_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryAuthorResult> InvokeAsync(GetRepositoryAuthorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryAuthorResult>("oci:DevOps/getRepositoryAuthor:getRepositoryAuthor", args ?? new GetRepositoryAuthorArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository Author resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieve a list of all the authors.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRepositoryAuthor = Output.Create(Oci.DevOps.GetRepositoryAuthor.InvokeAsync(new Oci.DevOps.GetRepositoryAuthorArgs
        ///         {
        ///             RepositoryId = oci_devops_repository.Test_repository.Id,
        ///             RefName = @var.Repository_author_ref_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryAuthorResult> Invoke(GetRepositoryAuthorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRepositoryAuthorResult>("oci:DevOps/getRepositoryAuthor:getRepositoryAuthor", args ?? new GetRepositoryAuthorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryAuthorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public string? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryAuthorArgs()
        {
        }
    }

    public sealed class GetRepositoryAuthorInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public Input<string>? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryAuthorInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRepositoryAuthorResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of author objects.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryAuthorItemResult> Items;
        public readonly string? RefName;
        public readonly string RepositoryId;

        [OutputConstructor]
        private GetRepositoryAuthorResult(
            string id,

            ImmutableArray<Outputs.GetRepositoryAuthorItemResult> items,

            string? refName,

            string repositoryId)
        {
            Id = id;
            Items = items;
            RefName = refName;
            RepositoryId = repositoryId;
        }
    }
}
