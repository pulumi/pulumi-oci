// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryAuthors
    {
        /// <summary>
        /// This data source provides the list of Repository Authors in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieve a list of all the authors.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryAuthors = Oci.DevOps.GetRepositoryAuthors.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         RefName = @var.Repository_author_ref_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryAuthorsResult> InvokeAsync(GetRepositoryAuthorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryAuthorsResult>("oci:DevOps/getRepositoryAuthors:getRepositoryAuthors", args ?? new GetRepositoryAuthorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Repository Authors in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieve a list of all the authors.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryAuthors = Oci.DevOps.GetRepositoryAuthors.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         RefName = @var.Repository_author_ref_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryAuthorsResult> Invoke(GetRepositoryAuthorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryAuthorsResult>("oci:DevOps/getRepositoryAuthors:getRepositoryAuthors", args ?? new GetRepositoryAuthorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryAuthorsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRepositoryAuthorsFilterArgs>? _filters;
        public List<Inputs.GetRepositoryAuthorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRepositoryAuthorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public string? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryAuthorsArgs()
        {
        }
        public static new GetRepositoryAuthorsArgs Empty => new GetRepositoryAuthorsArgs();
    }

    public sealed class GetRepositoryAuthorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRepositoryAuthorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRepositoryAuthorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRepositoryAuthorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public Input<string>? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryAuthorsInvokeArgs()
        {
        }
        public static new GetRepositoryAuthorsInvokeArgs Empty => new GetRepositoryAuthorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryAuthorsResult
    {
        public readonly ImmutableArray<Outputs.GetRepositoryAuthorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        public readonly string? RefName;
        /// <summary>
        /// The list of repository_author_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryAuthorsRepositoryAuthorCollectionResult> RepositoryAuthorCollections;
        public readonly string RepositoryId;

        [OutputConstructor]
        private GetRepositoryAuthorsResult(
            ImmutableArray<Outputs.GetRepositoryAuthorsFilterResult> filters,

            string? id,

            string? refName,

            ImmutableArray<Outputs.GetRepositoryAuthorsRepositoryAuthorCollectionResult> repositoryAuthorCollections,

            string repositoryId)
        {
            Filters = filters;
            Id = id;
            RefName = refName;
            RepositoryAuthorCollections = repositoryAuthorCollections;
            RepositoryId = repositoryId;
        }
    }
}
