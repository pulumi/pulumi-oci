// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryCommit
    {
        /// <summary>
        /// This data source provides details about a specific Repository Commit resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a repository's commit by commit ID.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRepositoryCommit = Output.Create(Oci.DevOps.GetRepositoryCommit.InvokeAsync(new Oci.DevOps.GetRepositoryCommitArgs
        ///         {
        ///             CommitId = oci_devops_commit.Test_commit.Id,
        ///             RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryCommitResult> InvokeAsync(GetRepositoryCommitArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryCommitResult>("oci:DevOps/getRepositoryCommit:getRepositoryCommit", args ?? new GetRepositoryCommitArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository Commit resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a repository's commit by commit ID.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testRepositoryCommit = Output.Create(Oci.DevOps.GetRepositoryCommit.InvokeAsync(new Oci.DevOps.GetRepositoryCommitArgs
        ///         {
        ///             CommitId = oci_devops_commit.Test_commit.Id,
        ///             RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryCommitResult> Invoke(GetRepositoryCommitInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRepositoryCommitResult>("oci:DevOps/getRepositoryCommit:getRepositoryCommit", args ?? new GetRepositoryCommitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryCommitArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given commit ID.
        /// </summary>
        [Input("commitId", required: true)]
        public string CommitId { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryCommitArgs()
        {
        }
    }

    public sealed class GetRepositoryCommitInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given commit ID.
        /// </summary>
        [Input("commitId", required: true)]
        public Input<string> CommitId { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryCommitInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRepositoryCommitResult
    {
        /// <summary>
        /// Email of the author of the repository.
        /// </summary>
        public readonly string AuthorEmail;
        /// <summary>
        /// Name of the author of the repository.
        /// </summary>
        public readonly string AuthorName;
        /// <summary>
        /// Commit hash pointed to by reference name.
        /// </summary>
        public readonly string CommitId;
        /// <summary>
        /// The commit message.
        /// </summary>
        public readonly string CommitMessage;
        /// <summary>
        /// Email of who creates the commit.
        /// </summary>
        public readonly string CommitterEmail;
        /// <summary>
        /// Name of who creates the commit.
        /// </summary>
        public readonly string CommitterName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An array of parent commit IDs of created commit.
        /// </summary>
        public readonly ImmutableArray<string> ParentCommitIds;
        public readonly string RepositoryId;
        /// <summary>
        /// The time at which commit was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Tree information for the specified commit.
        /// </summary>
        public readonly string TreeId;

        [OutputConstructor]
        private GetRepositoryCommitResult(
            string authorEmail,

            string authorName,

            string commitId,

            string commitMessage,

            string committerEmail,

            string committerName,

            string id,

            ImmutableArray<string> parentCommitIds,

            string repositoryId,

            string timeCreated,

            string treeId)
        {
            AuthorEmail = authorEmail;
            AuthorName = authorName;
            CommitId = commitId;
            CommitMessage = commitMessage;
            CommitterEmail = committerEmail;
            CommitterName = committerName;
            Id = id;
            ParentCommitIds = parentCommitIds;
            RepositoryId = repositoryId;
            TimeCreated = timeCreated;
            TreeId = treeId;
        }
    }
}
