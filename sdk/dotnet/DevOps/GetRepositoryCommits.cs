// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryCommits
    {
        /// <summary>
        /// This data source provides the list of Repository Commits in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of commits.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryCommits = Oci.DevOps.GetRepositoryCommits.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         AuthorName = @var.Repository_commit_author_name,
        ///         CommitMessage = @var.Repository_commit_commit_message,
        ///         ExcludeRefName = @var.Repository_commit_exclude_ref_name,
        ///         FilePath = @var.Repository_commit_file_path,
        ///         RefName = @var.Repository_commit_ref_name,
        ///         TimestampGreaterThanOrEqualTo = @var.Repository_commit_timestamp_greater_than_or_equal_to,
        ///         TimestampLessThanOrEqualTo = @var.Repository_commit_timestamp_less_than_or_equal_to,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoryCommitsResult> InvokeAsync(GetRepositoryCommitsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryCommitsResult>("oci:DevOps/getRepositoryCommits:getRepositoryCommits", args ?? new GetRepositoryCommitsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Repository Commits in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of commits.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryCommits = Oci.DevOps.GetRepositoryCommits.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         AuthorName = @var.Repository_commit_author_name,
        ///         CommitMessage = @var.Repository_commit_commit_message,
        ///         ExcludeRefName = @var.Repository_commit_exclude_ref_name,
        ///         FilePath = @var.Repository_commit_file_path,
        ///         RefName = @var.Repository_commit_ref_name,
        ///         TimestampGreaterThanOrEqualTo = @var.Repository_commit_timestamp_greater_than_or_equal_to,
        ///         TimestampLessThanOrEqualTo = @var.Repository_commit_timestamp_less_than_or_equal_to,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryCommitsResult> Invoke(GetRepositoryCommitsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryCommitsResult>("oci:DevOps/getRepositoryCommits:getRepositoryCommits", args ?? new GetRepositoryCommitsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryCommitsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return any commits that are pushed by the requested author.
        /// </summary>
        [Input("authorName")]
        public string? AuthorName { get; set; }

        /// <summary>
        /// A filter to return any commits that contains the given message.
        /// </summary>
        [Input("commitMessage")]
        public string? CommitMessage { get; set; }

        /// <summary>
        /// A filter to exclude commits that match the given reference name.
        /// </summary>
        [Input("excludeRefName")]
        public string? ExcludeRefName { get; set; }

        /// <summary>
        /// A filter to return only commits that affect any of the specified paths.
        /// </summary>
        [Input("filePath")]
        public string? FilePath { get; set; }

        [Input("filters")]
        private List<Inputs.GetRepositoryCommitsFilterArgs>? _filters;
        public List<Inputs.GetRepositoryCommitsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRepositoryCommitsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public string? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        /// <summary>
        /// A filter to return commits only created after the specified timestamp value.
        /// </summary>
        [Input("timestampGreaterThanOrEqualTo")]
        public string? TimestampGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return commits only created before the specified timestamp value.
        /// </summary>
        [Input("timestampLessThanOrEqualTo")]
        public string? TimestampLessThanOrEqualTo { get; set; }

        public GetRepositoryCommitsArgs()
        {
        }
        public static new GetRepositoryCommitsArgs Empty => new GetRepositoryCommitsArgs();
    }

    public sealed class GetRepositoryCommitsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return any commits that are pushed by the requested author.
        /// </summary>
        [Input("authorName")]
        public Input<string>? AuthorName { get; set; }

        /// <summary>
        /// A filter to return any commits that contains the given message.
        /// </summary>
        [Input("commitMessage")]
        public Input<string>? CommitMessage { get; set; }

        /// <summary>
        /// A filter to exclude commits that match the given reference name.
        /// </summary>
        [Input("excludeRefName")]
        public Input<string>? ExcludeRefName { get; set; }

        /// <summary>
        /// A filter to return only commits that affect any of the specified paths.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRepositoryCommitsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRepositoryCommitsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRepositoryCommitsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public Input<string>? RefName { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// A filter to return commits only created after the specified timestamp value.
        /// </summary>
        [Input("timestampGreaterThanOrEqualTo")]
        public Input<string>? TimestampGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return commits only created before the specified timestamp value.
        /// </summary>
        [Input("timestampLessThanOrEqualTo")]
        public Input<string>? TimestampLessThanOrEqualTo { get; set; }

        public GetRepositoryCommitsInvokeArgs()
        {
        }
        public static new GetRepositoryCommitsInvokeArgs Empty => new GetRepositoryCommitsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryCommitsResult
    {
        /// <summary>
        /// Name of the author of the repository.
        /// </summary>
        public readonly string? AuthorName;
        /// <summary>
        /// The commit message.
        /// </summary>
        public readonly string? CommitMessage;
        public readonly string? ExcludeRefName;
        public readonly string? FilePath;
        public readonly ImmutableArray<Outputs.GetRepositoryCommitsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? RefName;
        /// <summary>
        /// The list of repository_commit_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryCommitsRepositoryCommitCollectionResult> RepositoryCommitCollections;
        public readonly string RepositoryId;
        public readonly string? TimestampGreaterThanOrEqualTo;
        public readonly string? TimestampLessThanOrEqualTo;

        [OutputConstructor]
        private GetRepositoryCommitsResult(
            string? authorName,

            string? commitMessage,

            string? excludeRefName,

            string? filePath,

            ImmutableArray<Outputs.GetRepositoryCommitsFilterResult> filters,

            string id,

            string? refName,

            ImmutableArray<Outputs.GetRepositoryCommitsRepositoryCommitCollectionResult> repositoryCommitCollections,

            string repositoryId,

            string? timestampGreaterThanOrEqualTo,

            string? timestampLessThanOrEqualTo)
        {
            AuthorName = authorName;
            CommitMessage = commitMessage;
            ExcludeRefName = excludeRefName;
            FilePath = filePath;
            Filters = filters;
            Id = id;
            RefName = refName;
            RepositoryCommitCollections = repositoryCommitCollections;
            RepositoryId = repositoryId;
            TimestampGreaterThanOrEqualTo = timestampGreaterThanOrEqualTo;
            TimestampLessThanOrEqualTo = timestampLessThanOrEqualTo;
        }
    }
}
