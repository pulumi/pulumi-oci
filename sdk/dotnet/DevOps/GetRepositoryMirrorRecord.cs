// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryMirrorRecord
    {
        /// <summary>
        /// This data source provides details about a specific Repository Mirror Record resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns either current mirror record or last successful mirror record for a specific mirror repository.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryMirrorRecord = Oci.DevOps.GetRepositoryMirrorRecord.Invoke(new()
        ///     {
        ///         MirrorRecordType = @var.Repository_mirror_record_mirror_record_type,
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRepositoryMirrorRecordResult> InvokeAsync(GetRepositoryMirrorRecordArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryMirrorRecordResult>("oci:DevOps/getRepositoryMirrorRecord:getRepositoryMirrorRecord", args ?? new GetRepositoryMirrorRecordArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository Mirror Record resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns either current mirror record or last successful mirror record for a specific mirror repository.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryMirrorRecord = Oci.DevOps.GetRepositoryMirrorRecord.Invoke(new()
        ///     {
        ///         MirrorRecordType = @var.Repository_mirror_record_mirror_record_type,
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRepositoryMirrorRecordResult> Invoke(GetRepositoryMirrorRecordInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRepositoryMirrorRecordResult>("oci:DevOps/getRepositoryMirrorRecord:getRepositoryMirrorRecord", args ?? new GetRepositoryMirrorRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryMirrorRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The field of mirror record type. Only one mirror record type can be provided: current - The current mirror record. lastSuccessful - The last successful mirror record.
        /// </summary>
        [Input("mirrorRecordType", required: true)]
        public string MirrorRecordType { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryMirrorRecordArgs()
        {
        }
        public static new GetRepositoryMirrorRecordArgs Empty => new GetRepositoryMirrorRecordArgs();
    }

    public sealed class GetRepositoryMirrorRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The field of mirror record type. Only one mirror record type can be provided: current - The current mirror record. lastSuccessful - The last successful mirror record.
        /// </summary>
        [Input("mirrorRecordType", required: true)]
        public Input<string> MirrorRecordType { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryMirrorRecordInvokeArgs()
        {
        }
        public static new GetRepositoryMirrorRecordInvokeArgs Empty => new GetRepositoryMirrorRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryMirrorRecordResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MirrorRecordType;
        /// <summary>
        /// Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
        /// </summary>
        public readonly string MirrorStatus;
        public readonly string RepositoryId;
        /// <summary>
        /// The time taken to complete a mirror operation. Value is null if not completed.
        /// </summary>
        public readonly string TimeEnded;
        /// <summary>
        /// The time to enqueue a mirror operation.
        /// </summary>
        public readonly string TimeEnqueued;
        /// <summary>
        /// The time to start a mirror operation.
        /// </summary>
        public readonly string TimeStarted;
        /// <summary>
        /// Workrequest ID to track current mirror operation.
        /// </summary>
        public readonly string WorkRequestId;

        [OutputConstructor]
        private GetRepositoryMirrorRecordResult(
            string id,

            string mirrorRecordType,

            string mirrorStatus,

            string repositoryId,

            string timeEnded,

            string timeEnqueued,

            string timeStarted,

            string workRequestId)
        {
            Id = id;
            MirrorRecordType = mirrorRecordType;
            MirrorStatus = mirrorStatus;
            RepositoryId = repositoryId;
            TimeEnded = timeEnded;
            TimeEnqueued = timeEnqueued;
            TimeStarted = timeStarted;
            WorkRequestId = workRequestId;
        }
    }
}
