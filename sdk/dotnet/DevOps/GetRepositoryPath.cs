// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryPath
    {
        /// <summary>
        /// This data source provides details about a specific Repository Path resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a list of files and directories in a repository.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryPath = Oci.DevOps.GetRepositoryPath.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         DisplayName = @var.Repository_path_display_name,
        ///         FolderPath = @var.Repository_path_folder_path,
        ///         PathsInSubtree = @var.Repository_path_paths_in_subtree,
        ///         Ref = @var.Repository_path_ref,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRepositoryPathResult> InvokeAsync(GetRepositoryPathArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryPathResult>("oci:DevOps/getRepositoryPath:getRepositoryPath", args ?? new GetRepositoryPathArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository Path resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Retrieves a list of files and directories in a repository.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryPath = Oci.DevOps.GetRepositoryPath.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         DisplayName = @var.Repository_path_display_name,
        ///         FolderPath = @var.Repository_path_folder_path,
        ///         PathsInSubtree = @var.Repository_path_paths_in_subtree,
        ///         Ref = @var.Repository_path_ref,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRepositoryPathResult> Invoke(GetRepositoryPathInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryPathResult>("oci:DevOps/getRepositoryPath:getRepositoryPath", args ?? new GetRepositoryPathInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryPathArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
        /// </summary>
        [Input("folderPath")]
        public string? FolderPath { get; set; }

        /// <summary>
        /// Flag to determine if files must be retrived recursively. Flag is False by default.
        /// </summary>
        [Input("pathsInSubtree")]
        public bool? PathsInSubtree { get; set; }

        /// <summary>
        /// The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit &gt; branch &gt; tag. You can disambiguate with "heads/foobar" and "tags/foobar". If left blank repository's default branch will be used.
        /// </summary>
        [Input("ref")]
        public string? Ref { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryPathArgs()
        {
        }
        public static new GetRepositoryPathArgs Empty => new GetRepositoryPathArgs();
    }

    public sealed class GetRepositoryPathInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// Flag to determine if files must be retrived recursively. Flag is False by default.
        /// </summary>
        [Input("pathsInSubtree")]
        public Input<bool>? PathsInSubtree { get; set; }

        /// <summary>
        /// The name of branch/tag or commit hash it points to. If names conflict, order of preference is commit &gt; branch &gt; tag. You can disambiguate with "heads/foobar" and "tags/foobar". If left blank repository's default branch will be used.
        /// </summary>
        [Input("ref")]
        public Input<string>? Ref { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryPathInvokeArgs()
        {
        }
        public static new GetRepositoryPathInvokeArgs Empty => new GetRepositoryPathInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryPathResult
    {
        public readonly string? DisplayName;
        public readonly string? FolderPath;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of objects describing files or directories in a repository.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryPathItemResult> Items;
        public readonly bool? PathsInSubtree;
        public readonly string? Ref;
        public readonly string RepositoryId;

        [OutputConstructor]
        private GetRepositoryPathResult(
            string? displayName,

            string? folderPath,

            string id,

            ImmutableArray<Outputs.GetRepositoryPathItemResult> items,

            bool? pathsInSubtree,

            string? @ref,

            string repositoryId)
        {
            DisplayName = displayName;
            FolderPath = folderPath;
            Id = id;
            Items = items;
            PathsInSubtree = pathsInSubtree;
            Ref = @ref;
            RepositoryId = repositoryId;
        }
    }
}
