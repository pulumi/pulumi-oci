// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryRef
    {
        /// <summary>
        /// This data source provides details about a specific Repository Ref resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// This API will be deprecated on Wed, 12 June 2024 01:00:00 GMT as it does not get recognized when refName has '/'. This will be replaced by "/repositories/{repositoryId}/refs". Retrieves a repository's reference by its name with preference for branches over tags if the name is ambiguous. This can be disambiguated by using full names like "heads/&lt;name&gt;" or "tags/&lt;name&gt;".
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryRef = Oci.DevOps.GetRepositoryRef.Invoke(new()
        ///     {
        ///         RefName = repositoryRefRefName,
        ///         RepositoryId = testRepository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoryRefResult> InvokeAsync(GetRepositoryRefArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryRefResult>("oci:DevOps/getRepositoryRef:getRepositoryRef", args ?? new GetRepositoryRefArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Repository Ref resource in Oracle Cloud Infrastructure Devops service.
        /// 
        /// This API will be deprecated on Wed, 12 June 2024 01:00:00 GMT as it does not get recognized when refName has '/'. This will be replaced by "/repositories/{repositoryId}/refs". Retrieves a repository's reference by its name with preference for branches over tags if the name is ambiguous. This can be disambiguated by using full names like "heads/&lt;name&gt;" or "tags/&lt;name&gt;".
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryRef = Oci.DevOps.GetRepositoryRef.Invoke(new()
        ///     {
        ///         RefName = repositoryRefRefName,
        ///         RepositoryId = testRepository.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryRefResult> Invoke(GetRepositoryRefInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryRefResult>("oci:DevOps/getRepositoryRef:getRepositoryRef", args ?? new GetRepositoryRefInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryRefArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName", required: true)]
        public string RefName { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryRefArgs()
        {
        }
        public static new GetRepositoryRefArgs Empty => new GetRepositoryRefArgs();
    }

    public sealed class GetRepositoryRefInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName", required: true)]
        public Input<string> RefName { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryRefInvokeArgs()
        {
        }
        public static new GetRepositoryRefInvokeArgs Empty => new GetRepositoryRefInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryRefResult
    {
        /// <summary>
        /// Commit ID pointed to by the new branch.
        /// </summary>
        public readonly string CommitId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Unique full reference name inside a repository.
        /// </summary>
        public readonly string FullRefName;
        public readonly string Id;
        /// <summary>
        /// SHA-1 hash value of the object pointed to by the tag.
        /// </summary>
        public readonly string ObjectId;
        /// <summary>
        /// Unique reference name inside a repository.
        /// </summary>
        public readonly string RefName;
        /// <summary>
        /// The type of reference (BRANCH or TAG).
        /// </summary>
        public readonly string RefType;
        /// <summary>
        /// The OCID of the repository containing the reference.
        /// </summary>
        public readonly string RepositoryId;

        [OutputConstructor]
        private GetRepositoryRefResult(
            string commitId,

            ImmutableDictionary<string, string> definedTags,

            ImmutableDictionary<string, string> freeformTags,

            string fullRefName,

            string id,

            string objectId,

            string refName,

            string refType,

            string repositoryId)
        {
            CommitId = commitId;
            DefinedTags = definedTags;
            FreeformTags = freeformTags;
            FullRefName = fullRefName;
            Id = id;
            ObjectId = objectId;
            RefName = refName;
            RefType = refType;
            RepositoryId = repositoryId;
        }
    }
}
