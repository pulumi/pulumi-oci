// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetRepositoryRefs
    {
        /// <summary>
        /// This data source provides the list of Repository Refs in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of references.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryRefs = Oci.DevOps.GetRepositoryRefs.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         CommitId = oci_devops_commit.Test_commit.Id,
        ///         RefName = @var.Repository_ref_ref_name,
        ///         RefType = @var.Repository_ref_ref_type,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoryRefsResult> InvokeAsync(GetRepositoryRefsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryRefsResult>("oci:DevOps/getRepositoryRefs:getRepositoryRefs", args ?? new GetRepositoryRefsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Repository Refs in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of references.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRepositoryRefs = Oci.DevOps.GetRepositoryRefs.Invoke(new()
        ///     {
        ///         RepositoryId = oci_devops_repository.Test_repository.Id,
        ///         CommitId = oci_devops_commit.Test_commit.Id,
        ///         RefName = @var.Repository_ref_ref_name,
        ///         RefType = @var.Repository_ref_ref_type,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryRefsResult> Invoke(GetRepositoryRefsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryRefsResult>("oci:DevOps/getRepositoryRefs:getRepositoryRefs", args ?? new GetRepositoryRefsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryRefsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Commit ID in a repository.
        /// </summary>
        [Input("commitId")]
        public string? CommitId { get; set; }

        [Input("filters")]
        private List<Inputs.GetRepositoryRefsFilterArgs>? _filters;
        public List<Inputs.GetRepositoryRefsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRepositoryRefsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public string? RefName { get; set; }

        /// <summary>
        /// Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
        /// </summary>
        [Input("refType")]
        public string? RefType { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        public GetRepositoryRefsArgs()
        {
        }
        public static new GetRepositoryRefsArgs Empty => new GetRepositoryRefsArgs();
    }

    public sealed class GetRepositoryRefsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Commit ID in a repository.
        /// </summary>
        [Input("commitId")]
        public Input<string>? CommitId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRepositoryRefsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRepositoryRefsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRepositoryRefsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public Input<string>? RefName { get; set; }

        /// <summary>
        /// Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
        /// </summary>
        [Input("refType")]
        public Input<string>? RefType { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public GetRepositoryRefsInvokeArgs()
        {
        }
        public static new GetRepositoryRefsInvokeArgs Empty => new GetRepositoryRefsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryRefsResult
    {
        /// <summary>
        /// Commit ID pointed to by the new branch.
        /// </summary>
        public readonly string? CommitId;
        public readonly ImmutableArray<Outputs.GetRepositoryRefsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique reference name inside a repository.
        /// </summary>
        public readonly string? RefName;
        /// <summary>
        /// The type of reference (BRANCH or TAG).
        /// </summary>
        public readonly string? RefType;
        /// <summary>
        /// The OCID of the repository containing the reference.
        /// </summary>
        public readonly string RepositoryId;
        /// <summary>
        /// The list of repository_ref_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryRefsRepositoryRefCollectionResult> RepositoryRefCollections;

        [OutputConstructor]
        private GetRepositoryRefsResult(
            string? commitId,

            ImmutableArray<Outputs.GetRepositoryRefsFilterResult> filters,

            string id,

            string? refName,

            string? refType,

            string repositoryId,

            ImmutableArray<Outputs.GetRepositoryRefsRepositoryRefCollectionResult> repositoryRefCollections)
        {
            CommitId = commitId;
            Filters = filters;
            Id = id;
            RefName = refName;
            RefType = refType;
            RepositoryId = repositoryId;
            RepositoryRefCollections = repositoryRefCollections;
        }
    }
}
