// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    public static class GetTriggers
    {
        /// <summary>
        /// This data source provides the list of Triggers in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of triggers.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTriggers = Oci.DevOps.GetTriggers.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Trigger_display_name,
        ///         Id = @var.Trigger_id,
        ///         ProjectId = oci_devops_project.Test_project.Id,
        ///         State = @var.Trigger_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetTriggersResult> InvokeAsync(GetTriggersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggersResult>("oci:DevOps/getTriggers:getTriggers", args ?? new GetTriggersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Triggers in Oracle Cloud Infrastructure Devops service.
        /// 
        /// Returns a list of triggers.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTriggers = Oci.DevOps.GetTriggers.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Trigger_display_name,
        ///         Id = @var.Trigger_id,
        ///         ProjectId = oci_devops_project.Test_project.Id,
        ///         State = @var.Trigger_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetTriggersResult> Invoke(GetTriggersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggersResult>("oci:DevOps/getTriggers:getTriggers", args ?? new GetTriggersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetTriggersFilterArgs>? _filters;

        /// <summary>
        /// The filters for the trigger.
        /// </summary>
        public List<Inputs.GetTriggersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTriggersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique trigger identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only triggers that matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetTriggersArgs()
        {
        }
        public static new GetTriggersArgs Empty => new GetTriggersArgs();
    }

    public sealed class GetTriggersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetTriggersFilterInputArgs>? _filters;

        /// <summary>
        /// The filters for the trigger.
        /// </summary>
        public InputList<Inputs.GetTriggersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTriggersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique trigger identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// unique project identifier
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A filter to return only triggers that matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetTriggersInvokeArgs()
        {
        }
        public static new GetTriggersInvokeArgs Empty => new GetTriggersInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggersResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the trigger.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Trigger display name. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The filters for the trigger.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTriggersFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The OCID of the DevOps project to which the trigger belongs to.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The current state of the trigger.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of trigger_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTriggersTriggerCollectionResult> TriggerCollections;

        [OutputConstructor]
        private GetTriggersResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetTriggersFilterResult> filters,

            string? id,

            string? projectId,

            string? state,

            ImmutableArray<Outputs.GetTriggersTriggerCollectionResult> triggerCollections)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ProjectId = projectId;
            State = state;
            TriggerCollections = triggerCollections;
        }
    }
}
