// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    /// <summary>
    /// This resource provides the Project Repository Setting resource in Oracle Cloud Infrastructure Devops service.
    /// 
    /// Updates the repository settings for a project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProjectRepositorySetting = new Oci.DevOps.ProjectRepositorySetting("test_project_repository_setting", new()
    ///     {
    ///         ProjectId = testProject.Id,
    ///         ApprovalRules = new Oci.DevOps.Inputs.ProjectRepositorySettingApprovalRulesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 new Oci.DevOps.Inputs.ProjectRepositorySettingApprovalRulesItemArgs
    ///                 {
    ///                     MinApprovalsCount = projectRepositorySettingApprovalRulesItemsMinApprovalsCount,
    ///                     Name = projectRepositorySettingApprovalRulesItemsName,
    ///                     DestinationBranch = projectRepositorySettingApprovalRulesItemsDestinationBranch,
    ///                     Reviewers = new[]
    ///                     {
    ///                         new Oci.DevOps.Inputs.ProjectRepositorySettingApprovalRulesItemReviewerArgs
    ///                         {
    ///                             PrincipalId = testPrincipal.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         MergeSettings = new Oci.DevOps.Inputs.ProjectRepositorySettingMergeSettingsArgs
    ///         {
    ///             AllowedMergeStrategies = projectRepositorySettingMergeSettingsAllowedMergeStrategies,
    ///             DefaultMergeStrategy = projectRepositorySettingMergeSettingsDefaultMergeStrategy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ProjectRepositorySettings can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DevOps/projectRepositorySetting:ProjectRepositorySetting test_project_repository_setting "projects/{projectId}/repositorySettings"
    /// ```
    /// </summary>
    [OciResourceType("oci:DevOps/projectRepositorySetting:ProjectRepositorySetting")]
    public partial class ProjectRepositorySetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Output("approvalRules")]
        public Output<Outputs.ProjectRepositorySettingApprovalRules> ApprovalRules { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Output("mergeSettings")]
        public Output<Outputs.ProjectRepositorySettingMergeSettings> MergeSettings { get; private set; } = null!;

        /// <summary>
        /// Unique project identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectRepositorySetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectRepositorySetting(string name, ProjectRepositorySettingArgs args, CustomResourceOptions? options = null)
            : base("oci:DevOps/projectRepositorySetting:ProjectRepositorySetting", name, args ?? new ProjectRepositorySettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectRepositorySetting(string name, Input<string> id, ProjectRepositorySettingState? state = null, CustomResourceOptions? options = null)
            : base("oci:DevOps/projectRepositorySetting:ProjectRepositorySetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectRepositorySetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectRepositorySetting Get(string name, Input<string> id, ProjectRepositorySettingState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectRepositorySetting(name, id, state, options);
        }
    }

    public sealed class ProjectRepositorySettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Input("approvalRules")]
        public Input<Inputs.ProjectRepositorySettingApprovalRulesArgs>? ApprovalRules { get; set; }

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Input("mergeSettings")]
        public Input<Inputs.ProjectRepositorySettingMergeSettingsArgs>? MergeSettings { get; set; }

        /// <summary>
        /// Unique project identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public ProjectRepositorySettingArgs()
        {
        }
        public static new ProjectRepositorySettingArgs Empty => new ProjectRepositorySettingArgs();
    }

    public sealed class ProjectRepositorySettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Input("approvalRules")]
        public Input<Inputs.ProjectRepositorySettingApprovalRulesGetArgs>? ApprovalRules { get; set; }

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Input("mergeSettings")]
        public Input<Inputs.ProjectRepositorySettingMergeSettingsGetArgs>? MergeSettings { get; set; }

        /// <summary>
        /// Unique project identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public ProjectRepositorySettingState()
        {
        }
        public static new ProjectRepositorySettingState Empty => new ProjectRepositorySettingState();
    }
}
