// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    /// <summary>
    /// This resource provides the Repository Ref resource in Oracle Cloud Infrastructure Devops service.
    /// 
    /// Creates a new reference or updates an existing one.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testRepositoryRef = new Oci.DevOps.RepositoryRef("testRepositoryRef", new()
    ///     {
    ///         RefName = @var.Repository_ref_ref_name,
    ///         RefType = @var.Repository_ref_ref_type,
    ///         RepositoryId = oci_devops_repository.Test_repository.Id,
    ///         CommitId = oci_devops_commit.Test_commit.Id,
    ///         ObjectId = oci_objectstorage_object.Test_object.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RepositoryRefs can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DevOps/repositoryRef:RepositoryRef test_repository_ref "repositories/{repositoryId}/refs/{refName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:DevOps/repositoryRef:RepositoryRef")]
    public partial class RepositoryRef : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Commit ID pointed to by the new branch.
        /// </summary>
        [Output("commitId")]
        public Output<string> CommitId { get; private set; } = null!;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Unique full reference name inside a repository.
        /// </summary>
        [Output("fullRefName")]
        public Output<string> FullRefName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) SHA-1 hash value of the object pointed to by the tag.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Output("refName")]
        public Output<string> RefName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The type of reference (BRANCH or TAG).
        /// </summary>
        [Output("refType")]
        public Output<string> RefType { get; private set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryRef resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryRef(string name, RepositoryRefArgs args, CustomResourceOptions? options = null)
            : base("oci:DevOps/repositoryRef:RepositoryRef", name, args ?? new RepositoryRefArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryRef(string name, Input<string> id, RepositoryRefState? state = null, CustomResourceOptions? options = null)
            : base("oci:DevOps/repositoryRef:RepositoryRef", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryRef resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryRef Get(string name, Input<string> id, RepositoryRefState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryRef(name, id, state, options);
        }
    }

    public sealed class RepositoryRefArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Commit ID pointed to by the new branch.
        /// </summary>
        [Input("commitId")]
        public Input<string>? CommitId { get; set; }

        /// <summary>
        /// (Updatable) SHA-1 hash value of the object pointed to by the tag.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName", required: true)]
        public Input<string> RefName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The type of reference (BRANCH or TAG).
        /// </summary>
        [Input("refType", required: true)]
        public Input<string> RefType { get; set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public RepositoryRefArgs()
        {
        }
        public static new RepositoryRefArgs Empty => new RepositoryRefArgs();
    }

    public sealed class RepositoryRefState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Commit ID pointed to by the new branch.
        /// </summary>
        [Input("commitId")]
        public Input<string>? CommitId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Unique full reference name inside a repository.
        /// </summary>
        [Input("fullRefName")]
        public Input<string>? FullRefName { get; set; }

        /// <summary>
        /// (Updatable) SHA-1 hash value of the object pointed to by the tag.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given reference name.
        /// </summary>
        [Input("refName")]
        public Input<string>? RefName { get; set; }

        /// <summary>
        /// (Updatable) The type of reference (BRANCH or TAG).
        /// </summary>
        [Input("refType")]
        public Input<string>? RefType { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        public RepositoryRefState()
        {
        }
        public static new RepositoryRefState Empty => new RepositoryRefState();
    }
}
