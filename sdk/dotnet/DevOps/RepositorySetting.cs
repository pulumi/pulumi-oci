// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DevOps
{
    /// <summary>
    /// This resource provides the Repository Setting resource in Oracle Cloud Infrastructure Devops service.
    /// 
    /// Updates the settings for a repository.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testRepositorySetting = new Oci.DevOps.RepositorySetting("test_repository_setting", new()
    ///     {
    ///         RepositoryId = testRepository.Id,
    ///         ApprovalRules = new Oci.DevOps.Inputs.RepositorySettingApprovalRulesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 new Oci.DevOps.Inputs.RepositorySettingApprovalRulesItemArgs
    ///                 {
    ///                     MinApprovalsCount = repositorySettingApprovalRulesItemsMinApprovalsCount,
    ///                     Name = repositorySettingApprovalRulesItemsName,
    ///                     DestinationBranch = repositorySettingApprovalRulesItemsDestinationBranch,
    ///                     Reviewers = new[]
    ///                     {
    ///                         new Oci.DevOps.Inputs.RepositorySettingApprovalRulesItemReviewerArgs
    ///                         {
    ///                             PrincipalId = testPrincipal.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         MergeChecks = new Oci.DevOps.Inputs.RepositorySettingMergeChecksArgs
    ///         {
    ///             LastBuildSucceeded = repositorySettingMergeChecksLastBuildSucceeded,
    ///         },
    ///         MergeSettings = new Oci.DevOps.Inputs.RepositorySettingMergeSettingsArgs
    ///         {
    ///             AllowedMergeStrategies = repositorySettingMergeSettingsAllowedMergeStrategies,
    ///             DefaultMergeStrategy = repositorySettingMergeSettingsDefaultMergeStrategy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RepositorySettings can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:DevOps/repositorySetting:RepositorySetting test_repository_setting "repositories/{repositoryId}/repositorySettings"
    /// ```
    /// </summary>
    [OciResourceType("oci:DevOps/repositorySetting:RepositorySetting")]
    public partial class RepositorySetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Output("approvalRules")]
        public Output<Outputs.RepositorySettingApprovalRules> ApprovalRules { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Criteria which must be satisfied to merge a pull request.
        /// </summary>
        [Output("mergeChecks")]
        public Output<Outputs.RepositorySettingMergeChecks> MergeChecks { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Output("mergeSettings")]
        public Output<Outputs.RepositorySettingMergeSettings> MergeSettings { get; private set; } = null!;

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;


        /// <summary>
        /// Create a RepositorySetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositorySetting(string name, RepositorySettingArgs args, CustomResourceOptions? options = null)
            : base("oci:DevOps/repositorySetting:RepositorySetting", name, args ?? new RepositorySettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositorySetting(string name, Input<string> id, RepositorySettingState? state = null, CustomResourceOptions? options = null)
            : base("oci:DevOps/repositorySetting:RepositorySetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositorySetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositorySetting Get(string name, Input<string> id, RepositorySettingState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositorySetting(name, id, state, options);
        }
    }

    public sealed class RepositorySettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Input("approvalRules")]
        public Input<Inputs.RepositorySettingApprovalRulesArgs>? ApprovalRules { get; set; }

        /// <summary>
        /// (Updatable) Criteria which must be satisfied to merge a pull request.
        /// </summary>
        [Input("mergeChecks")]
        public Input<Inputs.RepositorySettingMergeChecksArgs>? MergeChecks { get; set; }

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Input("mergeSettings")]
        public Input<Inputs.RepositorySettingMergeSettingsArgs>? MergeSettings { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        public RepositorySettingArgs()
        {
        }
        public static new RepositorySettingArgs Empty => new RepositorySettingArgs();
    }

    public sealed class RepositorySettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
        /// </summary>
        [Input("approvalRules")]
        public Input<Inputs.RepositorySettingApprovalRulesGetArgs>? ApprovalRules { get; set; }

        /// <summary>
        /// (Updatable) Criteria which must be satisfied to merge a pull request.
        /// </summary>
        [Input("mergeChecks")]
        public Input<Inputs.RepositorySettingMergeChecksGetArgs>? MergeChecks { get; set; }

        /// <summary>
        /// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
        /// </summary>
        [Input("mergeSettings")]
        public Input<Inputs.RepositorySettingMergeSettingsGetArgs>? MergeSettings { get; set; }

        /// <summary>
        /// Unique repository identifier.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        public RepositorySettingState()
        {
        }
        public static new RepositorySettingState Empty => new RepositorySettingState();
    }
}
