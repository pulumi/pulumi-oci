// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DisasterRecovery
{
    public static class GetDrPlans
    {
        /// <summary>
        /// This data source provides the list of Dr Plans in Oracle Cloud Infrastructure Disaster Recovery service.
        /// 
        /// Get a summary list of all DR plans for a DR protection group.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDrPlans = Oci.DisasterRecovery.GetDrPlans.Invoke(new()
        ///     {
        ///         DrProtectionGroupId = testDrProtectionGroup.Id,
        ///         DisplayName = drPlanDisplayName,
        ///         DrPlanId = testDrPlan.Id,
        ///         DrPlanType = drPlanDrPlanType,
        ///         State = drPlanState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDrPlansResult> InvokeAsync(GetDrPlansArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDrPlansResult>("oci:DisasterRecovery/getDrPlans:getDrPlans", args ?? new GetDrPlansArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Dr Plans in Oracle Cloud Infrastructure Disaster Recovery service.
        /// 
        /// Get a summary list of all DR plans for a DR protection group.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDrPlans = Oci.DisasterRecovery.GetDrPlans.Invoke(new()
        ///     {
        ///         DrProtectionGroupId = testDrProtectionGroup.Id,
        ///         DisplayName = drPlanDisplayName,
        ///         DrPlanId = testDrPlan.Id,
        ///         DrPlanType = drPlanDrPlanType,
        ///         State = drPlanState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDrPlansResult> Invoke(GetDrPlansInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDrPlansResult>("oci:DisasterRecovery/getDrPlans:getDrPlans", args ?? new GetDrPlansInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDrPlansArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The OCID of the DR plan.  Example: `ocid1.drplan.oc1..uniqueID`
        /// </summary>
        [Input("drPlanId")]
        public string? DrPlanId { get; set; }

        /// <summary>
        /// The DR plan type.
        /// </summary>
        [Input("drPlanType")]
        public string? DrPlanType { get; set; }

        /// <summary>
        /// The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        /// </summary>
        [Input("drProtectionGroupId", required: true)]
        public string DrProtectionGroupId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDrPlansFilterArgs>? _filters;
        public List<Inputs.GetDrPlansFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDrPlansFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only DR plans that match the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDrPlansArgs()
        {
        }
        public static new GetDrPlansArgs Empty => new GetDrPlansArgs();
    }

    public sealed class GetDrPlansInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The OCID of the DR plan.  Example: `ocid1.drplan.oc1..uniqueID`
        /// </summary>
        [Input("drPlanId")]
        public Input<string>? DrPlanId { get; set; }

        /// <summary>
        /// The DR plan type.
        /// </summary>
        [Input("drPlanType")]
        public Input<string>? DrPlanType { get; set; }

        /// <summary>
        /// The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        /// </summary>
        [Input("drProtectionGroupId", required: true)]
        public Input<string> DrProtectionGroupId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDrPlansFilterInputArgs>? _filters;
        public InputList<Inputs.GetDrPlansFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDrPlansFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only DR plans that match the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDrPlansInvokeArgs()
        {
        }
        public static new GetDrPlansInvokeArgs Empty => new GetDrPlansInvokeArgs();
    }


    [OutputType]
    public sealed class GetDrPlansResult
    {
        /// <summary>
        /// The display name of the group.  Example: `DATABASE_SWITCHOVER`
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The list of dr_plan_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrPlansDrPlanCollectionResult> DrPlanCollections;
        public readonly string? DrPlanId;
        public readonly string? DrPlanType;
        /// <summary>
        /// The OCID of the DR protection group to which this DR plan belongs.  Example: `ocid1.drplan.oc1..uniqueID`
        /// </summary>
        public readonly string DrProtectionGroupId;
        public readonly ImmutableArray<Outputs.GetDrPlansFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the DR plan.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDrPlansResult(
            string? displayName,

            ImmutableArray<Outputs.GetDrPlansDrPlanCollectionResult> drPlanCollections,

            string? drPlanId,

            string? drPlanType,

            string drProtectionGroupId,

            ImmutableArray<Outputs.GetDrPlansFilterResult> filters,

            string id,

            string? state)
        {
            DisplayName = displayName;
            DrPlanCollections = drPlanCollections;
            DrPlanId = drPlanId;
            DrPlanType = drPlanType;
            DrProtectionGroupId = drProtectionGroupId;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
