// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DisasterRecovery.Outputs
{

    [OutputType]
    public sealed class DrProtectionGroupMember
    {
        /// <summary>
        /// (Updatable) This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
        /// </summary>
        public readonly string? AutonomousDatabaseStandbyTypeForDrDrills;
        /// <summary>
        /// (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberBackendSetMapping> BackendSetMappings;
        /// <summary>
        /// (Updatable) Create backup configuration properties for an OKE member.
        /// </summary>
        public readonly Outputs.DrProtectionGroupMemberBackupConfig? BackupConfig;
        /// <summary>
        /// (Updatable) The details for creating the backup location of an OKE Cluster.
        /// </summary>
        public readonly Outputs.DrProtectionGroupMemberBackupLocation? BackupLocation;
        /// <summary>
        /// (Updatable) The details for creating the operations performed on a block volume.
        /// </summary>
        public readonly Outputs.DrProtectionGroupMemberBlockVolumeAttachAndMountOperations? BlockVolumeAttachAndMountOperations;
        /// <summary>
        /// (Updatable) Deprecated. Use the 'blockVolumeAttachAndMountOperations' attribute instead of this. A list of operations performed on block volumes used by the compute instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberBlockVolumeOperation> BlockVolumeOperations;
        /// <summary>
        /// (Updatable) The bucket name inside the object storage namespace.  Example: `bucket_name`
        /// </summary>
        public readonly string? Bucket;
        /// <summary>
        /// (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
        /// </summary>
        public readonly Outputs.DrProtectionGroupMemberCommonDestinationKey? CommonDestinationKey;
        /// <summary>
        /// (Updatable) The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
        /// </summary>
        public readonly string? ConnectionStringType;
        /// <summary>
        /// (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
        /// </summary>
        public readonly string? DestinationAvailabilityDomain;
        /// <summary>
        /// (Updatable) The OCID of the backup policy to use in the destination region. This policy will be used to create backups  for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationBackupPolicyId;
        /// <summary>
        /// (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationCapacityReservationId;
        /// <summary>
        /// (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationCompartmentId;
        /// <summary>
        /// (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationDedicatedVmHostId;
        /// <summary>
        /// (Updatable) Create properties for a customer-managed vault and encryption key in the destination region.  The customer-managed encryption key in this will be used to encrypt the resource or containing resources after they  move to the destination region.
        /// </summary>
        public readonly Outputs.DrProtectionGroupMemberDestinationEncryptionKey? DestinationEncryptionKey;
        /// <summary>
        /// (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationLoadBalancerId;
        /// <summary>
        /// (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationNetworkLoadBalancerId;
        /// <summary>
        /// (Updatable) The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
        /// </summary>
        public readonly string? DestinationSnapshotPolicyId;
        /// <summary>
        /// (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberExportMapping> ExportMappings;
        /// <summary>
        /// (Updatable) A list of operations performed on file systems used by the compute instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberFileSystemOperation> FileSystemOperations;
        /// <summary>
        /// (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        /// </summary>
        public readonly bool? IsMovable;
        /// <summary>
        /// (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        /// </summary>
        public readonly bool? IsRetainFaultDomain;
        /// <summary>
        /// (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
        /// </summary>
        public readonly bool? IsStartStopEnabled;
        /// <summary>
        /// (Updatable) The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent's Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
        /// </summary>
        public readonly string? JumpHostId;
        /// <summary>
        /// (Updatable) The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberLoadBalancerMapping> LoadBalancerMappings;
        /// <summary>
        /// (Updatable) The list of managed node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberManagedNodePoolConfig> ManagedNodePoolConfigs;
        /// <summary>
        /// (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        /// </summary>
        public readonly string MemberId;
        /// <summary>
        /// (Updatable) The type of the member.
        /// </summary>
        public readonly string MemberType;
        /// <summary>
        /// (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// (Updatable) The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberNetworkLoadBalancerMapping> NetworkLoadBalancerMappings;
        /// <summary>
        /// (Updatable) The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        /// </summary>
        public readonly string? PasswordVaultSecretId;
        /// <summary>
        /// (Updatable) The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.   Example: `ocid1.cluster.oc1..uniqueID`
        /// </summary>
        public readonly string? PeerClusterId;
        /// <summary>
        /// (Updatable) A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
        /// 
        /// If you add the entry for source volumes and its corresponding vault and encryption keys here, you can not use  'commonDestinationKey' for encrypting all volumes with common encryption key. Similarly, if you specify common vault and encryption key using 'commonDestinationKey', you cannot specify vaults and encryption keys individually  for each volume using 'sourceVolumeToDestinationEncryptionKeyMappings'.
        /// 
        /// An entry for each volume in volume group should be added in this list. The encryption key will not be updated  for the volumes that are part of volume group but missing in this list.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> SourceVolumeToDestinationEncryptionKeyMappings;
        /// <summary>
        /// (Updatable) The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberVaultMapping> VaultMappings;
        /// <summary>
        /// (Updatable) The list of virtual node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberVirtualNodePoolConfig> VirtualNodePoolConfigs;
        /// <summary>
        /// (Updatable) A list of compute instance VNIC mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberVnicMapping> VnicMapping;
        /// <summary>
        /// (Updatable) A list of compute instance VNIC mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.DrProtectionGroupMemberVnicMapping> VnicMappings;

        [OutputConstructor]
        private DrProtectionGroupMember(
            string? autonomousDatabaseStandbyTypeForDrDrills,

            ImmutableArray<Outputs.DrProtectionGroupMemberBackendSetMapping> backendSetMappings,

            Outputs.DrProtectionGroupMemberBackupConfig? backupConfig,

            Outputs.DrProtectionGroupMemberBackupLocation? backupLocation,

            Outputs.DrProtectionGroupMemberBlockVolumeAttachAndMountOperations? blockVolumeAttachAndMountOperations,

            ImmutableArray<Outputs.DrProtectionGroupMemberBlockVolumeOperation> blockVolumeOperations,

            string? bucket,

            Outputs.DrProtectionGroupMemberCommonDestinationKey? commonDestinationKey,

            string? connectionStringType,

            string? destinationAvailabilityDomain,

            string? destinationBackupPolicyId,

            string? destinationCapacityReservationId,

            string? destinationCompartmentId,

            string? destinationDedicatedVmHostId,

            Outputs.DrProtectionGroupMemberDestinationEncryptionKey? destinationEncryptionKey,

            string? destinationLoadBalancerId,

            string? destinationNetworkLoadBalancerId,

            string? destinationSnapshotPolicyId,

            ImmutableArray<Outputs.DrProtectionGroupMemberExportMapping> exportMappings,

            ImmutableArray<Outputs.DrProtectionGroupMemberFileSystemOperation> fileSystemOperations,

            bool? isMovable,

            bool? isRetainFaultDomain,

            bool? isStartStopEnabled,

            string? jumpHostId,

            ImmutableArray<Outputs.DrProtectionGroupMemberLoadBalancerMapping> loadBalancerMappings,

            ImmutableArray<Outputs.DrProtectionGroupMemberManagedNodePoolConfig> managedNodePoolConfigs,

            string memberId,

            string memberType,

            string? @namespace,

            ImmutableArray<Outputs.DrProtectionGroupMemberNetworkLoadBalancerMapping> networkLoadBalancerMappings,

            string? passwordVaultSecretId,

            string? peerClusterId,

            ImmutableArray<Outputs.DrProtectionGroupMemberSourceVolumeToDestinationEncryptionKeyMapping> sourceVolumeToDestinationEncryptionKeyMappings,

            ImmutableArray<Outputs.DrProtectionGroupMemberVaultMapping> vaultMappings,

            ImmutableArray<Outputs.DrProtectionGroupMemberVirtualNodePoolConfig> virtualNodePoolConfigs,

            ImmutableArray<Outputs.DrProtectionGroupMemberVnicMapping> vnicMapping,

            ImmutableArray<Outputs.DrProtectionGroupMemberVnicMapping> vnicMappings)
        {
            AutonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            BackendSetMappings = backendSetMappings;
            BackupConfig = backupConfig;
            BackupLocation = backupLocation;
            BlockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            BlockVolumeOperations = blockVolumeOperations;
            Bucket = bucket;
            CommonDestinationKey = commonDestinationKey;
            ConnectionStringType = connectionStringType;
            DestinationAvailabilityDomain = destinationAvailabilityDomain;
            DestinationBackupPolicyId = destinationBackupPolicyId;
            DestinationCapacityReservationId = destinationCapacityReservationId;
            DestinationCompartmentId = destinationCompartmentId;
            DestinationDedicatedVmHostId = destinationDedicatedVmHostId;
            DestinationEncryptionKey = destinationEncryptionKey;
            DestinationLoadBalancerId = destinationLoadBalancerId;
            DestinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            DestinationSnapshotPolicyId = destinationSnapshotPolicyId;
            ExportMappings = exportMappings;
            FileSystemOperations = fileSystemOperations;
            IsMovable = isMovable;
            IsRetainFaultDomain = isRetainFaultDomain;
            IsStartStopEnabled = isStartStopEnabled;
            JumpHostId = jumpHostId;
            LoadBalancerMappings = loadBalancerMappings;
            ManagedNodePoolConfigs = managedNodePoolConfigs;
            MemberId = memberId;
            MemberType = memberType;
            Namespace = @namespace;
            NetworkLoadBalancerMappings = networkLoadBalancerMappings;
            PasswordVaultSecretId = passwordVaultSecretId;
            PeerClusterId = peerClusterId;
            SourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            VaultMappings = vaultMappings;
            VirtualNodePoolConfigs = virtualNodePoolConfigs;
            VnicMapping = vnicMapping;
            VnicMappings = vnicMappings;
        }
    }
}
