// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.DisasterRecovery.Outputs
{

    [OutputType]
    public sealed class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult
    {
        /// <summary>
        /// This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types. See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
        /// </summary>
        public readonly string AutonomousDatabaseStandbyTypeForDrDrills;
        /// <summary>
        /// A list of backend set mappings that are used to transfer or update backends during DR.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult> BackendSetMappings;
        /// <summary>
        /// The details of backup performed on OKE Cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackupConfigResult> BackupConfigs;
        /// <summary>
        /// The details for object storage backup location of an OKE Cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackupLocationResult> BackupLocations;
        /// <summary>
        /// The details of the block volume operations performed on the non-movable compute instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeAttachAndMountOperationResult> BlockVolumeAttachAndMountOperations;
        /// <summary>
        /// Deprecated. Use the 'blockVolumeAttachAndMountOperations' attribute instead of this. Operations performed on a list of block volumes used on the non-movable compute instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult> BlockVolumeOperations;
        /// <summary>
        /// The bucket name inside the object storage namespace.  Example: `OperationLogs`
        /// </summary>
        public readonly string Bucket;
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberCommonDestinationKeyResult> CommonDestinationKeys;
        /// <summary>
        /// The type of connection strings used to connect to an Autonomous Container Database snapshot standby created during a DR Drill operation. See https://docs.oracle.com/en/cloud/paas/autonomous-database/dedicated/adbcl/index.html for information about these service types.
        /// </summary>
        public readonly string ConnectionStringType;
        /// <summary>
        /// The credentials for the HeatWave MySQL DB System administrator user, containing the username and the OCID of the vault secret that stores the password.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDbSystemAdminUserDetailResult> DbSystemAdminUserDetails;
        /// <summary>
        /// The credentials for the HeatWave MySQL DB System replication user, containing the username and the OCID of the vault secret that stores the password.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDbSystemReplicationUserDetailResult> DbSystemReplicationUserDetails;
        /// <summary>
        /// The availability domain of the destination mount target. Example: `BBTh:region-AD`
        /// </summary>
        public readonly string DestinationAvailabilityDomain;
        /// <summary>
        /// The OCID of the backup policy to use in the destination region. This policy will be used to create backups for this volume group after it moves the destination region.  Example: `ocid1.volumebackuppolicy.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationBackupPolicyId;
        /// <summary>
        /// The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationCapacityReservationId;
        /// <summary>
        /// The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationCompartmentId;
        /// <summary>
        /// The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationDedicatedVmHostId;
        /// <summary>
        /// The OCID of a vault and customer-managed encryption key in the destination region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDestinationEncryptionKeyResult> DestinationEncryptionKeys;
        /// <summary>
        /// The OCID of the destination Load Balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationLoadBalancerId;
        /// <summary>
        /// The OCID of the destination Network Load Balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationNetworkLoadBalancerId;
        /// <summary>
        /// The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.  Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
        /// </summary>
        public readonly string DestinationSnapshotPolicyId;
        /// <summary>
        /// A list of mappings between the primary region file system export and destination region mount target.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult> ExportMappings;
        /// <summary>
        /// Operations performed on a list of file systems used on the non-movable compute instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult> FileSystemOperations;
        /// <summary>
        /// The maximum time (in seconds) to wait for the Global Transaction Identifier (GTID) synchronization process to complete before timing out.  Example: `600`
        /// </summary>
        public readonly int GtidReconciliationTimeout;
        /// <summary>
        /// A flag indicating whether to continue with DR operation if the Global Transaction Identifier (GTID) reconciliation operation times out.  Example: `False`
        /// </summary>
        public readonly bool IsContinueOnGtidReconciliationTimeout;
        /// <summary>
        /// A flag indicating if the compute instance should be moved during DR operations.  Example: `False`
        /// </summary>
        public readonly bool IsMovable;
        /// <summary>
        /// A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `False`
        /// </summary>
        public readonly bool IsRetainFaultDomain;
        /// <summary>
        /// A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
        /// </summary>
        public readonly bool IsStartStopEnabled;
        /// <summary>
        /// The OCID of the compute instance member that is designated as a jump host. This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent's Run Command feature.  Example: `ocid1.instance.oc1..uniqueID`
        /// </summary>
        public readonly string JumpHostId;
        /// <summary>
        /// The list of source-to-destination load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberLoadBalancerMappingResult> LoadBalancerMappings;
        /// <summary>
        /// The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberManagedNodePoolConfigResult> ManagedNodePoolConfigs;
        /// <summary>
        /// The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        /// </summary>
        public readonly string MemberId;
        /// <summary>
        /// The type of the member.
        /// </summary>
        public readonly string MemberType;
        /// <summary>
        /// The namespace in object storage (Note - this is usually the tenancy name).  Example: `Myocitenancy`
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// The list of source-to-destination network load balancer mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberNetworkLoadBalancerMappingResult> NetworkLoadBalancerMappings;
        /// <summary>
        /// The OCID of the vault secret where the database SYSDBA password is stored. This password is required and used for performing database DR Drill operations when using full clone.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        /// </summary>
        public readonly string PasswordVaultSecretId;
        /// <summary>
        /// The OCID of the peer OKE cluster. This property applies to the OKE cluster member in both the primary and standby region.  Example: `ocid1.cluster.oc1.uniqueID`
        /// </summary>
        public readonly string PeerClusterId;
        /// <summary>
        /// The OCID of the peer HeatWave MySQL DB System from the peer region.  Example: `ocid1.mysqldbsystem.oc1..uniqueID`
        /// </summary>
        public readonly string PeerDbSystemId;
        /// <summary>
        /// A list of mappings between source volume IDs in the volume group and customer-managed encryption keys in the  destination region which will be used to encrypt the volume after it moves to the destination region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberSourceVolumeToDestinationEncryptionKeyMappingResult> SourceVolumeToDestinationEncryptionKeyMappings;
        /// <summary>
        /// The list of source-to-destination vault mappings required for DR operations. This property applies to the OKE cluster member in primary region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVaultMappingResult> VaultMappings;
        /// <summary>
        /// The list of node pools with configurations for minimum and maximum node counts. This property applies to the OKE cluster member in both the primary and standby region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVirtualNodePoolConfigResult> VirtualNodePoolConfigs;
        /// <summary>
        /// A list of compute instance VNIC mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult> VnicMapping;
        /// <summary>
        /// A list of compute instance VNIC mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult> VnicMappings;

        [OutputConstructor]
        private GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult(
            string autonomousDatabaseStandbyTypeForDrDrills,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult> backendSetMappings,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackupConfigResult> backupConfigs,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackupLocationResult> backupLocations,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeAttachAndMountOperationResult> blockVolumeAttachAndMountOperations,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult> blockVolumeOperations,

            string bucket,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberCommonDestinationKeyResult> commonDestinationKeys,

            string connectionStringType,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDbSystemAdminUserDetailResult> dbSystemAdminUserDetails,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDbSystemReplicationUserDetailResult> dbSystemReplicationUserDetails,

            string destinationAvailabilityDomain,

            string destinationBackupPolicyId,

            string destinationCapacityReservationId,

            string destinationCompartmentId,

            string destinationDedicatedVmHostId,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberDestinationEncryptionKeyResult> destinationEncryptionKeys,

            string destinationLoadBalancerId,

            string destinationNetworkLoadBalancerId,

            string destinationSnapshotPolicyId,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult> exportMappings,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult> fileSystemOperations,

            int gtidReconciliationTimeout,

            bool isContinueOnGtidReconciliationTimeout,

            bool isMovable,

            bool isRetainFaultDomain,

            bool isStartStopEnabled,

            string jumpHostId,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberLoadBalancerMappingResult> loadBalancerMappings,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberManagedNodePoolConfigResult> managedNodePoolConfigs,

            string memberId,

            string memberType,

            string @namespace,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberNetworkLoadBalancerMappingResult> networkLoadBalancerMappings,

            string passwordVaultSecretId,

            string peerClusterId,

            string peerDbSystemId,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberSourceVolumeToDestinationEncryptionKeyMappingResult> sourceVolumeToDestinationEncryptionKeyMappings,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVaultMappingResult> vaultMappings,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVirtualNodePoolConfigResult> virtualNodePoolConfigs,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult> vnicMapping,

            ImmutableArray<Outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult> vnicMappings)
        {
            AutonomousDatabaseStandbyTypeForDrDrills = autonomousDatabaseStandbyTypeForDrDrills;
            BackendSetMappings = backendSetMappings;
            BackupConfigs = backupConfigs;
            BackupLocations = backupLocations;
            BlockVolumeAttachAndMountOperations = blockVolumeAttachAndMountOperations;
            BlockVolumeOperations = blockVolumeOperations;
            Bucket = bucket;
            CommonDestinationKeys = commonDestinationKeys;
            ConnectionStringType = connectionStringType;
            DbSystemAdminUserDetails = dbSystemAdminUserDetails;
            DbSystemReplicationUserDetails = dbSystemReplicationUserDetails;
            DestinationAvailabilityDomain = destinationAvailabilityDomain;
            DestinationBackupPolicyId = destinationBackupPolicyId;
            DestinationCapacityReservationId = destinationCapacityReservationId;
            DestinationCompartmentId = destinationCompartmentId;
            DestinationDedicatedVmHostId = destinationDedicatedVmHostId;
            DestinationEncryptionKeys = destinationEncryptionKeys;
            DestinationLoadBalancerId = destinationLoadBalancerId;
            DestinationNetworkLoadBalancerId = destinationNetworkLoadBalancerId;
            DestinationSnapshotPolicyId = destinationSnapshotPolicyId;
            ExportMappings = exportMappings;
            FileSystemOperations = fileSystemOperations;
            GtidReconciliationTimeout = gtidReconciliationTimeout;
            IsContinueOnGtidReconciliationTimeout = isContinueOnGtidReconciliationTimeout;
            IsMovable = isMovable;
            IsRetainFaultDomain = isRetainFaultDomain;
            IsStartStopEnabled = isStartStopEnabled;
            JumpHostId = jumpHostId;
            LoadBalancerMappings = loadBalancerMappings;
            ManagedNodePoolConfigs = managedNodePoolConfigs;
            MemberId = memberId;
            MemberType = memberType;
            Namespace = @namespace;
            NetworkLoadBalancerMappings = networkLoadBalancerMappings;
            PasswordVaultSecretId = passwordVaultSecretId;
            PeerClusterId = peerClusterId;
            PeerDbSystemId = peerDbSystemId;
            SourceVolumeToDestinationEncryptionKeyMappings = sourceVolumeToDestinationEncryptionKeyMappings;
            VaultMappings = vaultMappings;
            VirtualNodePoolConfigs = virtualNodePoolConfigs;
            VnicMapping = vnicMapping;
            VnicMappings = vnicMappings;
        }
    }
}
