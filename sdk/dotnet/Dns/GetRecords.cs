// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    public static class GetRecords
    {
        /// <summary>
        /// **Deprecated. Use oci.Dns.getRrsets instead.**
        /// 
        /// This data source provides the list of Records in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets all records in the specified zone.
        /// 
        /// The results are sorted by `domain` in alphabetical order by default. For more information about records,
        /// see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
        /// When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter
        /// then the viewId query parameter is required.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecords = Oci.Dns.GetRecords.Invoke(new()
        ///     {
        ///         ZoneNameOrId = testZoneNameOr.Id,
        ///         Domain = recordDomain,
        ///         DomainContains = recordDomainContains,
        ///         Rtype = recordRtype,
        ///         ZoneVersion = recordZoneVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRecordsResult> InvokeAsync(GetRecordsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordsResult>("oci:Dns/getRecords:getRecords", args ?? new GetRecordsArgs(), options.WithDefaults());

        /// <summary>
        /// **Deprecated. Use oci.Dns.getRrsets instead.**
        /// 
        /// This data source provides the list of Records in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets all records in the specified zone.
        /// 
        /// The results are sorted by `domain` in alphabetical order by default. For more information about records,
        /// see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
        /// When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter
        /// then the viewId query parameter is required.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecords = Oci.Dns.GetRecords.Invoke(new()
        ///     {
        ///         ZoneNameOrId = testZoneNameOr.Id,
        ///         Domain = recordDomain,
        ///         DomainContains = recordDomainContains,
        ///         Rtype = recordRtype,
        ///         ZoneVersion = recordZoneVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecordsResult> Invoke(GetRecordsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordsResult>("oci:Dns/getRecords:getRecords", args ?? new GetRecordsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment the zone belongs to.
        /// 
        /// This parameter is deprecated and should be omitted.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// Search by domain. Will match any record whose domain (case-insensitive) equals the provided value.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// Search by domain. Will match any record whose domain (case-insensitive) contains the provided value.
        /// </summary>
        [Input("domainContains")]
        public string? DomainContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetRecordsFilterArgs>? _filters;
        public List<Inputs.GetRecordsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRecordsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
        /// </summary>
        [Input("rtype")]
        public string? Rtype { get; set; }

        /// <summary>
        /// The field by which to sort records. Allowed values are: domain|rtype|ttl
        /// </summary>
        [Input("sortBy")]
        public string? SortBy { get; set; }

        /// <summary>
        /// The order to sort the resources. Allowed values are: ASC|DESC
        /// </summary>
        [Input("sortOrder")]
        public string? SortOrder { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public string ZoneNameOrId { get; set; } = null!;

        /// <summary>
        /// The version of the zone for which data is requested.
        /// </summary>
        [Input("zoneVersion")]
        public string? ZoneVersion { get; set; }

        public GetRecordsArgs()
        {
        }
        public static new GetRecordsArgs Empty => new GetRecordsArgs();
    }

    public sealed class GetRecordsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment the zone belongs to.
        /// 
        /// This parameter is deprecated and should be omitted.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Search by domain. Will match any record whose domain (case-insensitive) equals the provided value.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Search by domain. Will match any record whose domain (case-insensitive) contains the provided value.
        /// </summary>
        [Input("domainContains")]
        public Input<string>? DomainContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRecordsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRecordsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRecordsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
        /// </summary>
        [Input("rtype")]
        public Input<string>? Rtype { get; set; }

        /// <summary>
        /// The field by which to sort records. Allowed values are: domain|rtype|ttl
        /// </summary>
        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        /// <summary>
        /// The order to sort the resources. Allowed values are: ASC|DESC
        /// </summary>
        [Input("sortOrder")]
        public Input<string>? SortOrder { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public Input<string> ZoneNameOrId { get; set; } = null!;

        /// <summary>
        /// The version of the zone for which data is requested.
        /// </summary>
        [Input("zoneVersion")]
        public Input<string>? ZoneVersion { get; set; }

        public GetRecordsInvokeArgs()
        {
        }
        public static new GetRecordsInvokeArgs Empty => new GetRecordsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordsResult
    {
        public readonly string? CompartmentId;
        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        public readonly string? Domain;
        public readonly string? DomainContains;
        public readonly ImmutableArray<Outputs.GetRecordsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordsRecordResult> Records;
        /// <summary>
        /// The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
        /// </summary>
        public readonly string? Rtype;
        public readonly string? SortBy;
        public readonly string? SortOrder;
        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        public readonly string ZoneNameOrId;
        public readonly string? ZoneVersion;

        [OutputConstructor]
        private GetRecordsResult(
            string? compartmentId,

            string? domain,

            string? domainContains,

            ImmutableArray<Outputs.GetRecordsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRecordsRecordResult> records,

            string? rtype,

            string? sortBy,

            string? sortOrder,

            string zoneNameOrId,

            string? zoneVersion)
        {
            CompartmentId = compartmentId;
            Domain = domain;
            DomainContains = domainContains;
            Filters = filters;
            Id = id;
            Records = records;
            Rtype = rtype;
            SortBy = sortBy;
            SortOrder = sortOrder;
            ZoneNameOrId = zoneNameOrId;
            ZoneVersion = zoneVersion;
        }
    }
}
