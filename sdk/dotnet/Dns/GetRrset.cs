// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    public static class GetRrset
    {
        /// <summary>
        /// This data source provides details about a specific Rrset resource in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets a list of all records in the specified RRSet. The results are sorted by `recordHash` by default. For
        /// private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
        /// provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
        /// parameter is required.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRrset = Oci.Dns.GetRrset.Invoke(new()
        ///     {
        ///         Domain = rrsetDomain,
        ///         Rtype = rrsetRtype,
        ///         ZoneNameOrId = testZone.Id,
        ///         CompartmentId = compartmentId,
        ///         Scope = rrsetScope,
        ///         ViewId = testView.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRrsetResult> InvokeAsync(GetRrsetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRrsetResult>("oci:Dns/getRrset:getRrset", args ?? new GetRrsetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Rrset resource in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets a list of all records in the specified RRSet. The results are sorted by `recordHash` by default. For
        /// private zones, the scope query parameter is required with a value of `PRIVATE`. When the zone name is
        /// provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query
        /// parameter is required.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRrset = Oci.Dns.GetRrset.Invoke(new()
        ///     {
        ///         Domain = rrsetDomain,
        ///         Rtype = rrsetRtype,
        ///         ZoneNameOrId = testZone.Id,
        ///         CompartmentId = compartmentId,
        ///         Scope = rrsetScope,
        ///         ViewId = testView.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRrsetResult> Invoke(GetRrsetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRrsetResult>("oci:Dns/getRrset:getRrset", args ?? new GetRrsetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRrsetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment the resource belongs to.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The target fully-qualified domain name (FQDN) within the target zone.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// The type of the target RRSet within the target zone.
        /// </summary>
        [Input("rtype", required: true)]
        public string Rtype { get; set; } = null!;

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope.
        /// This value will be null for zones in the global DNS and `PRIVATE` when listing private Rrsets.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the resource is associated with.
        /// </summary>
        [Input("viewId")]
        public string? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public string ZoneNameOrId { get; set; } = null!;

        /// <summary>
        /// The version of the zone for which data is requested.
        /// </summary>
        [Input("zoneVersion")]
        public string? ZoneVersion { get; set; }

        public GetRrsetArgs()
        {
        }
        public static new GetRrsetArgs Empty => new GetRrsetArgs();
    }

    public sealed class GetRrsetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment the resource belongs to.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The target fully-qualified domain name (FQDN) within the target zone.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The type of the target RRSet within the target zone.
        /// </summary>
        [Input("rtype", required: true)]
        public Input<string> Rtype { get; set; } = null!;

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope.
        /// This value will be null for zones in the global DNS and `PRIVATE` when listing private Rrsets.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the resource is associated with.
        /// </summary>
        [Input("viewId")]
        public Input<string>? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public Input<string> ZoneNameOrId { get; set; } = null!;

        /// <summary>
        /// The version of the zone for which data is requested.
        /// </summary>
        [Input("zoneVersion")]
        public Input<string>? ZoneVersion { get; set; }

        public GetRrsetInvokeArgs()
        {
        }
        public static new GetRrsetInvokeArgs Empty => new GetRrsetInvokeArgs();
    }


    [OutputType]
    public sealed class GetRrsetResult
    {
        public readonly string? CompartmentId;
        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        public readonly string Domain;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetRrsetItemResult> Items;
        /// <summary>
        /// The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
        /// </summary>
        public readonly string Rtype;
        public readonly string? Scope;
        public readonly string? ViewId;
        public readonly string ZoneNameOrId;
        public readonly string? ZoneVersion;

        [OutputConstructor]
        private GetRrsetResult(
            string? compartmentId,

            string domain,

            string id,

            ImmutableArray<Outputs.GetRrsetItemResult> items,

            string rtype,

            string? scope,

            string? viewId,

            string zoneNameOrId,

            string? zoneVersion)
        {
            CompartmentId = compartmentId;
            Domain = domain;
            Id = id;
            Items = items;
            Rtype = rtype;
            Scope = scope;
            ViewId = viewId;
            ZoneNameOrId = zoneNameOrId;
            ZoneVersion = zoneVersion;
        }
    }
}
