// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    public static class GetRrsets
    {
        /// <summary>
        /// This data source provides the list of RRsets in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets a list of all rrsets in the specified zone.
        /// 
        /// You can optionally filter the results using the listed parameters. When the zone name
        /// is provided as a path parameter and `PRIVATE` is used for the scope query parameter then
        /// the viewId parameter is required.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRrsets = Oci.Dns.GetRrsets.Invoke(new()
        ///     {
        ///         ZoneNameOrId = testZone.Id,
        ///         Domain = rrsetDomain,
        ///         DomainContains = rrsetDomain,
        ///         Rtype = rrsetRtype,
        ///         Scope = rrsetScope,
        ///         ViewId = testView.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRrsetsResult> InvokeAsync(GetRrsetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRrsetsResult>("oci:Dns/getRrsets:getRrsets", args ?? new GetRrsetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of RRsets in Oracle Cloud Infrastructure DNS service.
        /// 
        /// Gets a list of all rrsets in the specified zone.
        /// 
        /// You can optionally filter the results using the listed parameters. When the zone name
        /// is provided as a path parameter and `PRIVATE` is used for the scope query parameter then
        /// the viewId parameter is required.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRrsets = Oci.Dns.GetRrsets.Invoke(new()
        ///     {
        ///         ZoneNameOrId = testZone.Id,
        ///         Domain = rrsetDomain,
        ///         DomainContains = rrsetDomain,
        ///         Rtype = rrsetRtype,
        ///         Scope = rrsetScope,
        ///         ViewId = testView.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRrsetsResult> Invoke(GetRrsetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRrsetsResult>("oci:Dns/getRrsets:getRrsets", args ?? new GetRrsetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRrsetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The target fully-qualified domain name (FQDN) within the target zone.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
        /// </summary>
        [Input("domainContains")]
        public string? DomainContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetRrsetsFilterArgs>? _filters;
        public List<Inputs.GetRrsetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRrsetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
        /// </summary>
        [Input("rtype")]
        public string? Rtype { get; set; }

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the zone is associated with. Required when accessing a private zone by name.
        /// </summary>
        [Input("viewId")]
        public string? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public string ZoneNameOrId { get; set; } = null!;

        public GetRrsetsArgs()
        {
        }
        public static new GetRrsetsArgs Empty => new GetRrsetsArgs();
    }

    public sealed class GetRrsetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The target fully-qualified domain name (FQDN) within the target zone.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Matches any rrset whose fully-qualified domain name (FQDN) contains the provided value.
        /// </summary>
        [Input("domainContains")]
        public Input<string>? DomainContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRrsetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRrsetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRrsetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Search by record type. Will match any record whose [type](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4) (case-insensitive) equals the provided value.
        /// </summary>
        [Input("rtype")]
        public Input<string>? Rtype { get; set; }

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the zone is associated with. Required when accessing a private zone by name.
        /// </summary>
        [Input("viewId")]
        public Input<string>? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public Input<string> ZoneNameOrId { get; set; } = null!;

        public GetRrsetsInvokeArgs()
        {
        }
        public static new GetRrsetsInvokeArgs Empty => new GetRrsetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRrsetsResult
    {
        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        public readonly string? Domain;
        public readonly string? DomainContains;
        public readonly ImmutableArray<Outputs.GetRrsetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of rrsets.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRrsetsRrsetResult> Rrsets;
        /// <summary>
        /// The type of DNS record, such as A or CNAME. For more information, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
        /// </summary>
        public readonly string? Rtype;
        public readonly string? Scope;
        public readonly string? ViewId;
        public readonly string ZoneNameOrId;

        [OutputConstructor]
        private GetRrsetsResult(
            string? domain,

            string? domainContains,

            ImmutableArray<Outputs.GetRrsetsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRrsetsRrsetResult> rrsets,

            string? rtype,

            string? scope,

            string? viewId,

            string zoneNameOrId)
        {
            Domain = domain;
            DomainContains = domainContains;
            Filters = filters;
            Id = id;
            Rrsets = rrsets;
            Rtype = rtype;
            Scope = scope;
            ViewId = viewId;
            ZoneNameOrId = zoneNameOrId;
        }
    }
}
