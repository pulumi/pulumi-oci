// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns.Inputs
{

    public sealed class ZoneDnssecConfigKskDnssecKeyVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The signing algorithm used for the key.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("dsDatas")]
        private InputList<Inputs.ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs>? _dsDatas;

        /// <summary>
        /// An array of data for DS records corresponding with this key version. An entry will exist for each supported DS digest algorithm.
        /// </summary>
        public InputList<Inputs.ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs> DsDatas
        {
            get => _dsDatas ?? (_dsDatas = new InputList<Inputs.ZoneDnssecConfigKskDnssecKeyVersionDsDataArgs>());
            set => _dsDatas = value;
        }

        /// <summary>
        /// The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see [RFC 4034](https://tools.ietf.org/html/rfc4034).
        /// </summary>
        [Input("keyTag")]
        public Input<int>? KeyTag { get; set; }

        /// <summary>
        /// The length of the corresponding private key in bytes, expressed as an integer.
        /// </summary>
        [Input("lengthInBytes")]
        public Input<int>? LengthInBytes { get; set; }

        /// <summary>
        /// When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has replaced.
        /// </summary>
        [Input("predecessorDnssecKeyVersionUuid")]
        public Input<string>? PredecessorDnssecKeyVersionUuid { get; set; }

        /// <summary>
        /// When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this `DnssecKeyVersion`.
        /// </summary>
        [Input("successorDnssecKeyVersionUuid")]
        public Input<string>? SuccessorDnssecKeyVersionUuid { get; set; }

        /// <summary>
        /// The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is when the key material will be used to generate RRSIGs.
        /// </summary>
        [Input("timeActivated")]
        public Input<string>? TimeActivated { get; set; }

        /// <summary>
        /// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this `DnssecKeyVersion`'s successor then it will remain active for arbitrarily long past its recommended lifetime. This prevents service disruption at the potential increased risk of key compromise.
        /// </summary>
        [Input("timeExpired")]
        public Input<string>? TimeExpired { get; set; }

        /// <summary>
        /// The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
        /// </summary>
        [Input("timeInactivated")]
        public Input<string>? TimeInactivated { get; set; }

        /// <summary>
        /// The date and time the key version was promoted expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timePromoted")]
        public Input<string>? TimePromoted { get; set; }

        /// <summary>
        /// The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is when the zone contents will include a DNSKEY record corresponding to the key material.
        /// </summary>
        [Input("timePublished")]
        public Input<string>? TimePublished { get; set; }

        /// <summary>
        /// The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
        /// </summary>
        [Input("timeUnpublished")]
        public Input<string>? TimeUnpublished { get; set; }

        /// <summary>
        /// The UUID of the `DnssecKeyVersion`.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ZoneDnssecConfigKskDnssecKeyVersionArgs()
        {
        }
        public static new ZoneDnssecConfigKskDnssecKeyVersionArgs Empty => new ZoneDnssecConfigKskDnssecKeyVersionArgs();
    }
}
