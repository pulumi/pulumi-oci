// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    /// <summary>
    /// This resource provides the Resolver resource in Oracle Cloud Infrastructure DNS service.
    /// 
    /// Updates the specified resolver with your new information.
    /// 
    /// Note: Resolvers are associated with VCNs and created when a VCN is created. Wait until created VCN's state shows as Available in OCI console before updating DNS resolver properties.
    /// Also a VCN cannot be deleted while its resolver has resolver endpoints. Additionally a resolver endpoint cannot be deleted if it is referenced in the resolver's rules. To remove the rules from a resolver user needs to update the resolver resource. Since DNS Resolver gets deleted when VCN is deleted there is no support for Delete for DNS Resolver.
    /// 
    /// ## Import
    /// 
    /// Resolvers can be imported using their OCID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Dns/resolver:Resolver test_resolver "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Dns/resolver:Resolver")]
    public partial class Resolver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the attached VCN.
        /// </summary>
        [Output("attachedVcnId")]
        public Output<string> AttachedVcnId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The attached views. Views are evaluated in order.
        /// </summary>
        [Output("attachedViews")]
        public Output<ImmutableArray<Outputs.ResolverAttachedView>> AttachedViews { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the owning compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the default view.
        /// </summary>
        [Output("defaultViewId")]
        public Output<string> DefaultViewId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Operations": {"CostCenter": "42"}}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The display name of the resolver.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Read-only array of endpoints for the resolver.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.ResolverEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        /// </summary>
        [Output("isProtected")]
        public Output<bool> IsProtected { get; private set; } = null!;

        /// <summary>
        /// The OCID of the target resolver.
        /// </summary>
        [Output("resolverId")]
        public Output<string> ResolverId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Rules for the resolver. Rules are evaluated in order.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.ResolverRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The canonical absolute URL of the resource.
        /// </summary>
        [Output("self")]
        public Output<string> Self { get; private set; } = null!;

        /// <summary>
        /// The current state of the resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a Resolver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Resolver(string name, ResolverArgs args, CustomResourceOptions? options = null)
            : base("oci:Dns/resolver:Resolver", name, args ?? new ResolverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Resolver(string name, Input<string> id, ResolverState? state = null, CustomResourceOptions? options = null)
            : base("oci:Dns/resolver:Resolver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Resolver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Resolver Get(string name, Input<string> id, ResolverState? state = null, CustomResourceOptions? options = null)
        {
            return new Resolver(name, id, state, options);
        }
    }

    public sealed class ResolverArgs : global::Pulumi.ResourceArgs
    {
        [Input("attachedViews")]
        private InputList<Inputs.ResolverAttachedViewArgs>? _attachedViews;

        /// <summary>
        /// (Updatable) The attached views. Views are evaluated in order.
        /// </summary>
        public InputList<Inputs.ResolverAttachedViewArgs> AttachedViews
        {
            get => _attachedViews ?? (_attachedViews = new InputList<Inputs.ResolverAttachedViewArgs>());
            set => _attachedViews = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the owning compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Operations": {"CostCenter": "42"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The display name of the resolver.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The OCID of the target resolver.
        /// </summary>
        [Input("resolverId", required: true)]
        public Input<string> ResolverId { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.ResolverRuleArgs>? _rules;

        /// <summary>
        /// (Updatable) Rules for the resolver. Rules are evaluated in order.
        /// </summary>
        public InputList<Inputs.ResolverRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ResolverRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ResolverArgs()
        {
        }
        public static new ResolverArgs Empty => new ResolverArgs();
    }

    public sealed class ResolverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the attached VCN.
        /// </summary>
        [Input("attachedVcnId")]
        public Input<string>? AttachedVcnId { get; set; }

        [Input("attachedViews")]
        private InputList<Inputs.ResolverAttachedViewGetArgs>? _attachedViews;

        /// <summary>
        /// (Updatable) The attached views. Views are evaluated in order.
        /// </summary>
        public InputList<Inputs.ResolverAttachedViewGetArgs> AttachedViews
        {
            get => _attachedViews ?? (_attachedViews = new InputList<Inputs.ResolverAttachedViewGetArgs>());
            set => _attachedViews = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the owning compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The OCID of the default view.
        /// </summary>
        [Input("defaultViewId")]
        public Input<string>? DefaultViewId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Operations": {"CostCenter": "42"}}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The display name of the resolver.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.ResolverEndpointGetArgs>? _endpoints;

        /// <summary>
        /// Read-only array of endpoints for the resolver.
        /// </summary>
        public InputList<Inputs.ResolverEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.ResolverEndpointGetArgs>());
            set => _endpoints = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// 
        /// **Example:** `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        /// </summary>
        [Input("isProtected")]
        public Input<bool>? IsProtected { get; set; }

        /// <summary>
        /// The OCID of the target resolver.
        /// </summary>
        [Input("resolverId")]
        public Input<string>? ResolverId { get; set; }

        [Input("rules")]
        private InputList<Inputs.ResolverRuleGetArgs>? _rules;

        /// <summary>
        /// (Updatable) Rules for the resolver. Rules are evaluated in order.
        /// </summary>
        public InputList<Inputs.ResolverRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ResolverRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The canonical absolute URL of the resource.
        /// </summary>
        [Input("self")]
        public Input<string>? Self { get; set; }

        /// <summary>
        /// The current state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public ResolverState()
        {
        }
        public static new ResolverState Empty => new ResolverState();
    }
}
