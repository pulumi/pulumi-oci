// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Dns
{
    /// <summary>
    /// This resource provides the Steering Policy resource in Oracle Cloud Infrastructure DNS service.
    /// 
    /// Creates a new steering policy in the specified compartment. For more information on
    /// creating policies with templates, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSteeringPolicy = new Oci.Dns.SteeringPolicy("test_steering_policy", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         DisplayName = steeringPolicyDisplayName,
    ///         Template = steeringPolicyTemplate,
    ///         Answers = new[]
    ///         {
    ///             new Oci.Dns.Inputs.SteeringPolicyAnswerArgs
    ///             {
    ///                 Name = steeringPolicyAnswersName,
    ///                 Rdata = steeringPolicyAnswersRdata,
    ///                 Rtype = steeringPolicyAnswersRtype,
    ///                 IsDisabled = steeringPolicyAnswersIsDisabled,
    ///                 Pool = steeringPolicyAnswersPool,
    ///             },
    ///         },
    ///         DefinedTags = steeringPolicyDefinedTags,
    ///         FreeformTags = steeringPolicyFreeformTags,
    ///         HealthCheckMonitorId = testHttpMonitor.Id,
    ///         Rules = new[]
    ///         {
    ///             new Oci.Dns.Inputs.SteeringPolicyRuleArgs
    ///             {
    ///                 RuleType = steeringPolicyRulesRuleType,
    ///                 Cases = new[]
    ///                 {
    ///                     new Oci.Dns.Inputs.SteeringPolicyRuleCaseArgs
    ///                     {
    ///                         AnswerDatas = new[]
    ///                         {
    ///                             new Oci.Dns.Inputs.SteeringPolicyRuleCaseAnswerDataArgs
    ///                             {
    ///                                 AnswerCondition = steeringPolicyRulesCasesAnswerDataAnswerCondition,
    ///                                 ShouldKeep = steeringPolicyRulesCasesAnswerDataShouldKeep,
    ///                                 Value = steeringPolicyRulesCasesAnswerDataValue,
    ///                             },
    ///                         },
    ///                         CaseCondition = steeringPolicyRulesCasesCaseCondition,
    ///                         Count = steeringPolicyRulesCasesCount,
    ///                     },
    ///                 },
    ///                 DefaultAnswerDatas = new[]
    ///                 {
    ///                     new Oci.Dns.Inputs.SteeringPolicyRuleDefaultAnswerDataArgs
    ///                     {
    ///                         AnswerCondition = steeringPolicyRulesDefaultAnswerDataAnswerCondition,
    ///                         ShouldKeep = steeringPolicyRulesDefaultAnswerDataShouldKeep,
    ///                         Value = steeringPolicyRulesDefaultAnswerDataValue,
    ///                     },
    ///                 },
    ///                 DefaultCount = steeringPolicyRulesDefaultCount,
    ///                 Description = steeringPolicyRulesDescription,
    ///             },
    ///         },
    ///         Ttl = steeringPolicyTtl,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SteeringPolicies can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Dns/steeringPolicy:SteeringPolicy test_steering_policy "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Dns/steeringPolicy:SteeringPolicy")]
    public partial class SteeringPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The set of all answers that can potentially issue from the steering policy.
        /// </summary>
        [Output("answers")]
        public Output<ImmutableArray<Outputs.SteeringPolicyAnswer>> Answers { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment containing the steering policy.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `Rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `Rdata` not matching any monitored endpoint will be assumed healthy.
        /// 
        /// **Note:** To use the Health Check monitoring feature in a steering policy, a monitor must be created using the Health Checks service first. For more information on how to create a monitor, please see [Managing Health Checks](https://docs.cloud.oracle.com/iaas/Content/HealthChecks/Tasks/managinghealthchecks.htm).
        /// </summary>
        [Output("healthCheckMonitorId")]
        public Output<string> HealthCheckMonitorId { get; private set; } = null!;

        /// <summary>
        /// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
        /// 
        /// The first rule receives a shuffled list of all answers, and every other rule receives the list of answers emitted by the one preceding it. The last rule populates the response.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.SteeringPolicyRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The canonical absolute URL of the resource.
        /// </summary>
        [Output("self")]
        public Output<string> Self { get; private set; } = null!;

        /// <summary>
        /// The current state of the resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
        /// 
        /// **Example:** The `FAILOVER` template determines answers by filtering the policy's answers using the `FILTER` rule first, then the following rules in succession: `HEALTH`, `PRIORITY`, and `LIMIT`. This gives the domain dynamic failover capability.
        /// 
        /// It is **strongly recommended** to use a template other than `CUSTOM` when creating a steering policy.
        /// 
        /// All templates require the rule order to begin with an unconditional `FILTER` rule that keeps answers contingent upon `answer.isDisabled != true`, except for `CUSTOM`. A defined `HEALTH` rule must follow the `FILTER` rule if the policy references a `healthCheckMonitorId`. The last rule of a template must must be a `LIMIT` rule. For more information about templates and code examples, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
        /// 
        /// **Template Types**
        /// * `FAILOVER` - Uses health check information on your endpoints to determine which DNS answers to serve. If an endpoint fails a health check, the answer for that endpoint will be removed from the list of available answers until the endpoint is detected as healthy.
        /// * `LOAD_BALANCE` - Distributes web traffic to specified endpoints based on defined weights.
        /// * `ROUTE_BY_GEO` - Answers DNS queries based on the query's geographic location. For a list of geographic locations to route by, see [Traffic Management Geographic Locations](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Reference/trafficmanagementgeo.htm).
        /// * `ROUTE_BY_ASN` - Answers DNS queries based on the query's originating ASN.
        /// * `ROUTE_BY_IP` - Answers DNS queries based on the query's IP address.
        /// * `CUSTOM` - Allows a customized configuration of rules.
        /// </summary>
        [Output("template")]
        public Output<string> Template { get; private set; } = null!;

        /// <summary>
        /// The date and time the resource was created, expressed in RFC 3339 timestamp format.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a SteeringPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SteeringPolicy(string name, SteeringPolicyArgs args, CustomResourceOptions? options = null)
            : base("oci:Dns/steeringPolicy:SteeringPolicy", name, args ?? new SteeringPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SteeringPolicy(string name, Input<string> id, SteeringPolicyState? state = null, CustomResourceOptions? options = null)
            : base("oci:Dns/steeringPolicy:SteeringPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SteeringPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SteeringPolicy Get(string name, Input<string> id, SteeringPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SteeringPolicy(name, id, state, options);
        }
    }

    public sealed class SteeringPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputList<Inputs.SteeringPolicyAnswerArgs>? _answers;

        /// <summary>
        /// The set of all answers that can potentially issue from the steering policy.
        /// </summary>
        public InputList<Inputs.SteeringPolicyAnswerArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.SteeringPolicyAnswerArgs>());
            set => _answers = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment containing the steering policy.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `Rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `Rdata` not matching any monitored endpoint will be assumed healthy.
        /// 
        /// **Note:** To use the Health Check monitoring feature in a steering policy, a monitor must be created using the Health Checks service first. For more information on how to create a monitor, please see [Managing Health Checks](https://docs.cloud.oracle.com/iaas/Content/HealthChecks/Tasks/managinghealthchecks.htm).
        /// </summary>
        [Input("healthCheckMonitorId")]
        public Input<string>? HealthCheckMonitorId { get; set; }

        [Input("rules")]
        private InputList<Inputs.SteeringPolicyRuleArgs>? _rules;

        /// <summary>
        /// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
        /// 
        /// The first rule receives a shuffled list of all answers, and every other rule receives the list of answers emitted by the one preceding it. The last rule populates the response.
        /// </summary>
        public InputList<Inputs.SteeringPolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SteeringPolicyRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
        /// 
        /// **Example:** The `FAILOVER` template determines answers by filtering the policy's answers using the `FILTER` rule first, then the following rules in succession: `HEALTH`, `PRIORITY`, and `LIMIT`. This gives the domain dynamic failover capability.
        /// 
        /// It is **strongly recommended** to use a template other than `CUSTOM` when creating a steering policy.
        /// 
        /// All templates require the rule order to begin with an unconditional `FILTER` rule that keeps answers contingent upon `answer.isDisabled != true`, except for `CUSTOM`. A defined `HEALTH` rule must follow the `FILTER` rule if the policy references a `healthCheckMonitorId`. The last rule of a template must must be a `LIMIT` rule. For more information about templates and code examples, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
        /// 
        /// **Template Types**
        /// * `FAILOVER` - Uses health check information on your endpoints to determine which DNS answers to serve. If an endpoint fails a health check, the answer for that endpoint will be removed from the list of available answers until the endpoint is detected as healthy.
        /// * `LOAD_BALANCE` - Distributes web traffic to specified endpoints based on defined weights.
        /// * `ROUTE_BY_GEO` - Answers DNS queries based on the query's geographic location. For a list of geographic locations to route by, see [Traffic Management Geographic Locations](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Reference/trafficmanagementgeo.htm).
        /// * `ROUTE_BY_ASN` - Answers DNS queries based on the query's originating ASN.
        /// * `ROUTE_BY_IP` - Answers DNS queries based on the query's IP address.
        /// * `CUSTOM` - Allows a customized configuration of rules.
        /// </summary>
        [Input("template", required: true)]
        public Input<string> Template { get; set; } = null!;

        /// <summary>
        /// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public SteeringPolicyArgs()
        {
        }
        public static new SteeringPolicyArgs Empty => new SteeringPolicyArgs();
    }

    public sealed class SteeringPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputList<Inputs.SteeringPolicyAnswerGetArgs>? _answers;

        /// <summary>
        /// The set of all answers that can potentially issue from the steering policy.
        /// </summary>
        public InputList<Inputs.SteeringPolicyAnswerGetArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.SteeringPolicyAnswerGetArgs>());
            set => _answers = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment containing the steering policy.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `Rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `Rdata` not matching any monitored endpoint will be assumed healthy.
        /// 
        /// **Note:** To use the Health Check monitoring feature in a steering policy, a monitor must be created using the Health Checks service first. For more information on how to create a monitor, please see [Managing Health Checks](https://docs.cloud.oracle.com/iaas/Content/HealthChecks/Tasks/managinghealthchecks.htm).
        /// </summary>
        [Input("healthCheckMonitorId")]
        public Input<string>? HealthCheckMonitorId { get; set; }

        [Input("rules")]
        private InputList<Inputs.SteeringPolicyRuleGetArgs>? _rules;

        /// <summary>
        /// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
        /// 
        /// The first rule receives a shuffled list of all answers, and every other rule receives the list of answers emitted by the one preceding it. The last rule populates the response.
        /// </summary>
        public InputList<Inputs.SteeringPolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SteeringPolicyRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The canonical absolute URL of the resource.
        /// </summary>
        [Input("self")]
        public Input<string>? Self { get; set; }

        /// <summary>
        /// The current state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
        /// 
        /// **Example:** The `FAILOVER` template determines answers by filtering the policy's answers using the `FILTER` rule first, then the following rules in succession: `HEALTH`, `PRIORITY`, and `LIMIT`. This gives the domain dynamic failover capability.
        /// 
        /// It is **strongly recommended** to use a template other than `CUSTOM` when creating a steering policy.
        /// 
        /// All templates require the rule order to begin with an unconditional `FILTER` rule that keeps answers contingent upon `answer.isDisabled != true`, except for `CUSTOM`. A defined `HEALTH` rule must follow the `FILTER` rule if the policy references a `healthCheckMonitorId`. The last rule of a template must must be a `LIMIT` rule. For more information about templates and code examples, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
        /// 
        /// **Template Types**
        /// * `FAILOVER` - Uses health check information on your endpoints to determine which DNS answers to serve. If an endpoint fails a health check, the answer for that endpoint will be removed from the list of available answers until the endpoint is detected as healthy.
        /// * `LOAD_BALANCE` - Distributes web traffic to specified endpoints based on defined weights.
        /// * `ROUTE_BY_GEO` - Answers DNS queries based on the query's geographic location. For a list of geographic locations to route by, see [Traffic Management Geographic Locations](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Reference/trafficmanagementgeo.htm).
        /// * `ROUTE_BY_ASN` - Answers DNS queries based on the query's originating ASN.
        /// * `ROUTE_BY_IP` - Answers DNS queries based on the query's IP address.
        /// * `CUSTOM` - Allows a customized configuration of rules.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// The date and time the resource was created, expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public SteeringPolicyState()
        {
        }
        public static new SteeringPolicyState Empty => new SteeringPolicyState();
    }
}
