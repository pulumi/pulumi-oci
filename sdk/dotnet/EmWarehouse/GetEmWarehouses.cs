// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.EmWarehouse
{
    public static class GetEmWarehouses
    {
        /// <summary>
        /// This data source provides the list of Em Warehouses in Oracle Cloud Infrastructure Em Warehouse service.
        /// 
        /// Returns a list of EmWarehouses.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEmWarehouses = Oci.EmWarehouse.GetEmWarehouses.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Em_warehouse_display_name,
        ///         Id = @var.Em_warehouse_id,
        ///         OperationsInsightsWarehouseId = oci_opsi_operations_insights_warehouse.Test_operations_insights_warehouse.Id,
        ///         State = @var.Em_warehouse_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetEmWarehousesResult> InvokeAsync(GetEmWarehousesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEmWarehousesResult>("oci:EmWarehouse/getEmWarehouses:getEmWarehouses", args ?? new GetEmWarehousesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Em Warehouses in Oracle Cloud Infrastructure Em Warehouse service.
        /// 
        /// Returns a list of EmWarehouses.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEmWarehouses = Oci.EmWarehouse.GetEmWarehouses.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Em_warehouse_display_name,
        ///         Id = @var.Em_warehouse_id,
        ///         OperationsInsightsWarehouseId = oci_opsi_operations_insights_warehouse.Test_operations_insights_warehouse.Id,
        ///         State = @var.Em_warehouse_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetEmWarehousesResult> Invoke(GetEmWarehousesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEmWarehousesResult>("oci:EmWarehouse/getEmWarehouses:getEmWarehouses", args ?? new GetEmWarehousesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEmWarehousesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetEmWarehousesFilterArgs>? _filters;
        public List<Inputs.GetEmWarehousesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEmWarehousesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique EmWarehouse identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// unique operationsInsightsWarehouseId identifier
        /// </summary>
        [Input("operationsInsightsWarehouseId")]
        public string? OperationsInsightsWarehouseId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetEmWarehousesArgs()
        {
        }
        public static new GetEmWarehousesArgs Empty => new GetEmWarehousesArgs();
    }

    public sealed class GetEmWarehousesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetEmWarehousesFilterInputArgs>? _filters;
        public InputList<Inputs.GetEmWarehousesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEmWarehousesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique EmWarehouse identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// unique operationsInsightsWarehouseId identifier
        /// </summary>
        [Input("operationsInsightsWarehouseId")]
        public Input<string>? OperationsInsightsWarehouseId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetEmWarehousesInvokeArgs()
        {
        }
        public static new GetEmWarehousesInvokeArgs Empty => new GetEmWarehousesInvokeArgs();
    }


    [OutputType]
    public sealed class GetEmWarehousesResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// EmWarehouse Identifier, can be renamed
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// The list of em_warehouse_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEmWarehousesEmWarehouseCollectionResult> EmWarehouseCollections;
        public readonly ImmutableArray<Outputs.GetEmWarehousesFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// operations Insights Warehouse Identifier
        /// </summary>
        public readonly string? OperationsInsightsWarehouseId;
        /// <summary>
        /// The current state of the EmWarehouse.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetEmWarehousesResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetEmWarehousesEmWarehouseCollectionResult> emWarehouseCollections,

            ImmutableArray<Outputs.GetEmWarehousesFilterResult> filters,

            string? id,

            string? operationsInsightsWarehouseId,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            EmWarehouseCollections = emWarehouseCollections;
            Filters = filters;
            Id = id;
            OperationsInsightsWarehouseId = operationsInsightsWarehouseId;
            State = state;
        }
    }
}
