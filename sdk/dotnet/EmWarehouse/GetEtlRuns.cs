// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.EmWarehouse
{
    public static class GetEtlRuns
    {
        /// <summary>
        /// This data source provides the list of Em Warehouse Etl Runs in Oracle Cloud Infrastructure Em Warehouse service.
        /// 
        /// Gets a list of runs of an EmWarehouseResource by identifier
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEmWarehouseEtlRuns = Oci.EmWarehouse.GetEtlRuns.Invoke(new()
        ///     {
        ///         EmWarehouseId = testEmWarehouse.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = emWarehouseEtlRunDisplayName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEtlRunsResult> InvokeAsync(GetEtlRunsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEtlRunsResult>("oci:EmWarehouse/getEtlRuns:getEtlRuns", args ?? new GetEtlRunsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Em Warehouse Etl Runs in Oracle Cloud Infrastructure Em Warehouse service.
        /// 
        /// Gets a list of runs of an EmWarehouseResource by identifier
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testEmWarehouseEtlRuns = Oci.EmWarehouse.GetEtlRuns.Invoke(new()
        ///     {
        ///         EmWarehouseId = testEmWarehouse.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = emWarehouseEtlRunDisplayName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEtlRunsResult> Invoke(GetEtlRunsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEtlRunsResult>("oci:EmWarehouse/getEtlRuns:getEtlRuns", args ?? new GetEtlRunsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEtlRunsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// unique EmWarehouse identifier
        /// </summary>
        [Input("emWarehouseId", required: true)]
        public string EmWarehouseId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetEtlRunsFilterArgs>? _filters;
        public List<Inputs.GetEtlRunsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEtlRunsFilterArgs>());
            set => _filters = value;
        }

        public GetEtlRunsArgs()
        {
        }
        public static new GetEtlRunsArgs Empty => new GetEtlRunsArgs();
    }

    public sealed class GetEtlRunsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// unique EmWarehouse identifier
        /// </summary>
        [Input("emWarehouseId", required: true)]
        public Input<string> EmWarehouseId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetEtlRunsFilterInputArgs>? _filters;
        public InputList<Inputs.GetEtlRunsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEtlRunsFilterInputArgs>());
            set => _filters = value;
        }

        public GetEtlRunsInvokeArgs()
        {
        }
        public static new GetEtlRunsInvokeArgs Empty => new GetEtlRunsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEtlRunsResult
    {
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The name of the ETLRun.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string EmWarehouseId;
        /// <summary>
        /// The list of etl_run_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEtlRunsEtlRunCollectionResult> EtlRunCollections;
        public readonly ImmutableArray<Outputs.GetEtlRunsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetEtlRunsResult(
            string? compartmentId,

            string? displayName,

            string emWarehouseId,

            ImmutableArray<Outputs.GetEtlRunsEtlRunCollectionResult> etlRunCollections,

            ImmutableArray<Outputs.GetEtlRunsFilterResult> filters,

            string id)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            EmWarehouseId = emWarehouseId;
            EtlRunCollections = etlRunCollections;
            Filters = filters;
            Id = id;
        }
    }
}
