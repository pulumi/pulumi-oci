// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Email
{
    public static class GetSenders
    {
        /// <summary>
        /// This data source provides the list of Senders in Oracle Cloud Infrastructure Email service.
        /// 
        /// Gets a collection of approved sender email addresses and sender IDs.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSenders = Oci.Email.GetSenders.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Domain = @var.Sender_domain,
        ///         EmailAddress = @var.Sender_email_address,
        ///         State = @var.Sender_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSendersResult> InvokeAsync(GetSendersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSendersResult>("oci:Email/getSenders:getSenders", args ?? new GetSendersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Senders in Oracle Cloud Infrastructure Email service.
        /// 
        /// Gets a collection of approved sender email addresses and sender IDs.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSenders = Oci.Email.GetSenders.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Domain = @var.Sender_domain,
        ///         EmailAddress = @var.Sender_email_address,
        ///         State = @var.Sender_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSendersResult> Invoke(GetSendersInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSendersResult>("oci:Email/getSenders:getSenders", args ?? new GetSendersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSendersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to only return resources that match the given domain exactly.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// The email address of the approved sender.
        /// </summary>
        [Input("emailAddress")]
        public string? EmailAddress { get; set; }

        [Input("filters")]
        private List<Inputs.GetSendersFilterArgs>? _filters;
        public List<Inputs.GetSendersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSendersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of a sender.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetSendersArgs()
        {
        }
        public static new GetSendersArgs Empty => new GetSendersArgs();
    }

    public sealed class GetSendersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to only return resources that match the given domain exactly.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The email address of the approved sender.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSendersFilterInputArgs>? _filters;
        public InputList<Inputs.GetSendersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSendersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of a sender.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetSendersInvokeArgs()
        {
        }
        public static new GetSendersInvokeArgs Empty => new GetSendersInvokeArgs();
    }


    [OutputType]
    public sealed class GetSendersResult
    {
        /// <summary>
        /// The OCID for the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string? Domain;
        /// <summary>
        /// The email address of the sender.
        /// </summary>
        public readonly string? EmailAddress;
        public readonly ImmutableArray<Outputs.GetSendersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of senders.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSendersSenderResult> Senders;
        /// <summary>
        /// The current status of the approved sender.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetSendersResult(
            string compartmentId,

            string? domain,

            string? emailAddress,

            ImmutableArray<Outputs.GetSendersFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSendersSenderResult> senders,

            string? state)
        {
            CompartmentId = compartmentId;
            Domain = domain;
            EmailAddress = emailAddress;
            Filters = filters;
            Id = id;
            Senders = senders;
            State = state;
        }
    }
}
