// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FileStorage
{
    public static class GetSnapshot
    {
        /// <summary>
        /// This data source provides details about a specific Snapshot resource in Oracle Cloud Infrastructure File Storage service.
        /// 
        /// Gets the specified snapshot's information.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSnapshot = Oci.FileStorage.GetSnapshot.Invoke(new()
        ///     {
        ///         SnapshotId = oci_file_storage_snapshot.Test_snapshot.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("oci:FileStorage/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Snapshot resource in Oracle Cloud Infrastructure File Storage service.
        /// 
        /// Gets the specified snapshot's information.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSnapshot = Oci.FileStorage.GetSnapshot.Invoke(new()
        ///     {
        ///         SnapshotId = oci_file_storage_snapshot.Test_snapshot.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("oci:FileStorage/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the snapshot.
        /// </summary>
        [Input("snapshotId", required: true)]
        public string SnapshotId { get; set; } = null!;

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the snapshot.
        /// </summary>
        [Input("snapshotId", required: true)]
        public Input<string> SnapshotId { get; set; } = null!;

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system from which the snapshot was created.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the snapshot.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether the snapshot has been cloned. See [Cloning a File System](https://docs.cloud.oracle.com/iaas/Content/File/Tasks/cloningFS.htm).
        /// </summary>
        public readonly bool IsCloneSource;
        /// <summary>
        /// Additional information about the current `lifecycleState`.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Name of the snapshot. This value is immutable.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// An [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) identifying the parent from which this snapshot was cloned. If this snapshot was not cloned, then the `provenanceId` is the same as the snapshot `id` value. If this snapshot was cloned, then the `provenanceId` value is the parent's `provenanceId`. See [Cloning a File System](https://docs.cloud.oracle.com/iaas/Content/File/Tasks/cloningFS.htm).
        /// </summary>
        public readonly string ProvenanceId;
        public readonly string SnapshotId;
        /// <summary>
        /// The date and time the snapshot was taken, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format. This value might be the same or different from `timeCreated` depending on the following factors:
        /// * If the snapshot is created in the original file system directory.
        /// * If the snapshot is cloned from a file system.
        /// * If the snapshot is replicated from a file system.
        /// </summary>
        public readonly string SnapshotTime;
        /// <summary>
        /// Specifies the generation type of the snapshot.
        /// </summary>
        public readonly string SnapshotType;
        /// <summary>
        /// The current state of the snapshot.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the snapshot was created, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;

        [OutputConstructor]
        private GetSnapshotResult(
            ImmutableDictionary<string, object> definedTags,

            string fileSystemId,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isCloneSource,

            string lifecycleDetails,

            string name,

            string provenanceId,

            string snapshotId,

            string snapshotTime,

            string snapshotType,

            string state,

            string timeCreated)
        {
            DefinedTags = definedTags;
            FileSystemId = fileSystemId;
            FreeformTags = freeformTags;
            Id = id;
            IsCloneSource = isCloneSource;
            LifecycleDetails = lifecycleDetails;
            Name = name;
            ProvenanceId = provenanceId;
            SnapshotId = snapshotId;
            SnapshotTime = snapshotTime;
            SnapshotType = snapshotType;
            State = state;
            TimeCreated = timeCreated;
        }
    }
}
