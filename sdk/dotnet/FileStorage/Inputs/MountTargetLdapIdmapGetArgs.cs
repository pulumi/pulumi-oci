// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FileStorage.Inputs
{

    public sealed class MountTargetLdapIdmapGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The maximum amount of time the mount target is allowed to use a cached entry.
        /// </summary>
        [Input("cacheLifetimeSeconds")]
        public Input<int>? CacheLifetimeSeconds { get; set; }

        /// <summary>
        /// (Updatable) The amount of time that the mount target should allow an entry to persist in its cache before attempting to refresh the entry.
        /// </summary>
        [Input("cacheRefreshIntervalSeconds")]
        public Input<int>? CacheRefreshIntervalSeconds { get; set; }

        /// <summary>
        /// (Updatable) All LDAP searches are recursive starting at this group.  Example: `CN=Group,DC=domain,DC=com`
        /// </summary>
        [Input("groupSearchBase")]
        public Input<string>? GroupSearchBase { get; set; }

        /// <summary>
        /// (Updatable) The amount of time that a mount target will maintain information that a user is not found in the ID mapping configuration.
        /// </summary>
        [Input("negativeCacheLifetimeSeconds")]
        public Input<int>? NegativeCacheLifetimeSeconds { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the first connector to use to communicate with the LDAP server.
        /// </summary>
        [Input("outboundConnector1id")]
        public Input<string>? OutboundConnector1id { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the second connector to use to communicate with the LDAP server.
        /// </summary>
        [Input("outboundConnector2id")]
        public Input<string>? OutboundConnector2id { get; set; }

        /// <summary>
        /// (Updatable) Schema type of the LDAP account.
        /// </summary>
        [Input("schemaType")]
        public Input<string>? SchemaType { get; set; }

        /// <summary>
        /// (Updatable) All LDAP searches are recursive starting at this user.  Example: `CN=User,DC=domain,DC=com`
        /// </summary>
        [Input("userSearchBase")]
        public Input<string>? UserSearchBase { get; set; }

        public MountTargetLdapIdmapGetArgs()
        {
        }
        public static new MountTargetLdapIdmapGetArgs Empty => new MountTargetLdapIdmapGetArgs();
    }
}
