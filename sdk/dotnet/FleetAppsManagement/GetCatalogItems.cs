// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetCatalogItems
    {
        /// <summary>
        /// This data source provides the list of Catalog Items in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Gets a list of Catalog Items in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogItems = Oci.FleetAppsManagement.GetCatalogItems.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CatalogListingId = testListing.Id,
        ///         CatalogListingVersionCriteria = catalogItemCatalogListingVersionCriteria,
        ///         ConfigSourceType = catalogItemConfigSourceType,
        ///         DisplayName = catalogItemDisplayName,
        ///         ShouldListPublicItems = catalogItemShouldListPublicItems,
        ///         State = catalogItemState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCatalogItemsResult> InvokeAsync(GetCatalogItemsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogItemsResult>("oci:FleetAppsManagement/getCatalogItems:getCatalogItems", args ?? new GetCatalogItemsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Catalog Items in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Gets a list of Catalog Items in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogItems = Oci.FleetAppsManagement.GetCatalogItems.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CatalogListingId = testListing.Id,
        ///         CatalogListingVersionCriteria = catalogItemCatalogListingVersionCriteria,
        ///         ConfigSourceType = catalogItemConfigSourceType,
        ///         DisplayName = catalogItemDisplayName,
        ///         ShouldListPublicItems = catalogItemShouldListPublicItems,
        ///         State = catalogItemState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogItemsResult> Invoke(GetCatalogItemsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogItemsResult>("oci:FleetAppsManagement/getCatalogItems:getCatalogItems", args ?? new GetCatalogItemsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Catalog Items in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Gets a list of Catalog Items in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCatalogItems = Oci.FleetAppsManagement.GetCatalogItems.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CatalogListingId = testListing.Id,
        ///         CatalogListingVersionCriteria = catalogItemCatalogListingVersionCriteria,
        ///         ConfigSourceType = catalogItemConfigSourceType,
        ///         DisplayName = catalogItemDisplayName,
        ///         ShouldListPublicItems = catalogItemShouldListPublicItems,
        ///         State = catalogItemState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCatalogItemsResult> Invoke(GetCatalogItemsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogItemsResult>("oci:FleetAppsManagement/getCatalogItems:getCatalogItems", args ?? new GetCatalogItemsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogItemsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// catalogListingId of the package. This is an integer whose min and max length are specified.
        /// </summary>
        [Input("catalogListingId")]
        public string? CatalogListingId { get; set; }

        /// <summary>
        /// Parameter to list all catalog items only with latest version or list all catalog items with all versions.
        /// </summary>
        [Input("catalogListingVersionCriteria")]
        public string? CatalogListingVersionCriteria { get; set; }

        /// <summary>
        /// (Updatable) The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        /// </summary>
        [Input("configSourceType")]
        public string? ConfigSourceType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetCatalogItemsFilterArgs>? _filters;
        public List<Inputs.GetCatalogItemsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCatalogItemsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The indicator to append Public Items from the root compartment to any query, when set to TRUE.
        /// </summary>
        [Input("shouldListPublicItems")]
        public bool? ShouldListPublicItems { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCatalogItemsArgs()
        {
        }
        public static new GetCatalogItemsArgs Empty => new GetCatalogItemsArgs();
    }

    public sealed class GetCatalogItemsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// catalogListingId of the package. This is an integer whose min and max length are specified.
        /// </summary>
        [Input("catalogListingId")]
        public Input<string>? CatalogListingId { get; set; }

        /// <summary>
        /// Parameter to list all catalog items only with latest version or list all catalog items with all versions.
        /// </summary>
        [Input("catalogListingVersionCriteria")]
        public Input<string>? CatalogListingVersionCriteria { get; set; }

        /// <summary>
        /// (Updatable) The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The [ConfigSourceType](https://www.terraform.io/definitions/CatalogItem/configSourceType) Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, URL_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        /// </summary>
        [Input("configSourceType")]
        public Input<string>? ConfigSourceType { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCatalogItemsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCatalogItemsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCatalogItemsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The indicator to append Public Items from the root compartment to any query, when set to TRUE.
        /// </summary>
        [Input("shouldListPublicItems")]
        public Input<bool>? ShouldListPublicItems { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCatalogItemsInvokeArgs()
        {
        }
        public static new GetCatalogItemsInvokeArgs Empty => new GetCatalogItemsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogItemsResult
    {
        /// <summary>
        /// The list of catalog_item_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCatalogItemsCatalogItemCollectionResult> CatalogItemCollections;
        public readonly string? CatalogListingId;
        public readonly string? CatalogListingVersionCriteria;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
        /// </summary>
        public readonly string? ConfigSourceType;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetCatalogItemsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The indicator to append Public Items from the root compartment to any query, when set to TRUE.
        /// </summary>
        public readonly bool? ShouldListPublicItems;
        /// <summary>
        /// The current state of the CatalogItem.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCatalogItemsResult(
            ImmutableArray<Outputs.GetCatalogItemsCatalogItemCollectionResult> catalogItemCollections,

            string? catalogListingId,

            string? catalogListingVersionCriteria,

            string compartmentId,

            string? configSourceType,

            string? displayName,

            ImmutableArray<Outputs.GetCatalogItemsFilterResult> filters,

            string id,

            bool? shouldListPublicItems,

            string? state)
        {
            CatalogItemCollections = catalogItemCollections;
            CatalogListingId = catalogListingId;
            CatalogListingVersionCriteria = catalogListingVersionCriteria;
            CompartmentId = compartmentId;
            ConfigSourceType = configSourceType;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ShouldListPublicItems = shouldListPublicItems;
            State = state;
        }
    }
}
