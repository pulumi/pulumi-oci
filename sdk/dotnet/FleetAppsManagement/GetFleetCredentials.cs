// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetFleetCredentials
    {
        /// <summary>
        /// This data source provides the list of Fleet Credentials in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List credentials in Fleet Application Management.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCredentials = Oci.FleetAppsManagement.GetFleetCredentials.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         CompartmentId = compartmentId,
        ///         CredentialLevel = fleetCredentialCredentialLevel,
        ///         DisplayName = fleetCredentialDisplayName,
        ///         Id = fleetCredentialId,
        ///         ResourceId = testResource.Id,
        ///         State = fleetCredentialState,
        ///         Target = fleetCredentialTarget,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFleetCredentialsResult> InvokeAsync(GetFleetCredentialsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFleetCredentialsResult>("oci:FleetAppsManagement/getFleetCredentials:getFleetCredentials", args ?? new GetFleetCredentialsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleet Credentials in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List credentials in Fleet Application Management.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCredentials = Oci.FleetAppsManagement.GetFleetCredentials.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         CompartmentId = compartmentId,
        ///         CredentialLevel = fleetCredentialCredentialLevel,
        ///         DisplayName = fleetCredentialDisplayName,
        ///         Id = fleetCredentialId,
        ///         ResourceId = testResource.Id,
        ///         State = fleetCredentialState,
        ///         Target = fleetCredentialTarget,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetCredentialsResult> Invoke(GetFleetCredentialsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetCredentialsResult>("oci:FleetAppsManagement/getFleetCredentials:getFleetCredentials", args ?? new GetFleetCredentialsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleet Credentials in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List credentials in Fleet Application Management.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCredentials = Oci.FleetAppsManagement.GetFleetCredentials.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         CompartmentId = compartmentId,
        ///         CredentialLevel = fleetCredentialCredentialLevel,
        ///         DisplayName = fleetCredentialDisplayName,
        ///         Id = fleetCredentialId,
        ///         ResourceId = testResource.Id,
        ///         State = fleetCredentialState,
        ///         Target = fleetCredentialTarget,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetCredentialsResult> Invoke(GetFleetCredentialsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetCredentialsResult>("oci:FleetAppsManagement/getFleetCredentials:getFleetCredentials", args ?? new GetFleetCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFleetCredentialsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources whose credentialLevel matches the given credentialLevel.
        /// </summary>
        [Input("credentialLevel")]
        public string? CredentialLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetFleetCredentialsFilterArgs>? _filters;
        public List<Inputs.GetFleetCredentialsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFleetCredentialsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public string FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose credential identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Resource Identifier
        /// </summary>
        [Input("resourceId")]
        public string? ResourceId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only resources whose target matches the given target name.
        /// </summary>
        [Input("target")]
        public string? Target { get; set; }

        public GetFleetCredentialsArgs()
        {
        }
        public static new GetFleetCredentialsArgs Empty => new GetFleetCredentialsArgs();
    }

    public sealed class GetFleetCredentialsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources whose credentialLevel matches the given credentialLevel.
        /// </summary>
        [Input("credentialLevel")]
        public Input<string>? CredentialLevel { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetFleetCredentialsFilterInputArgs>? _filters;
        public InputList<Inputs.GetFleetCredentialsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFleetCredentialsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public Input<string> FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose credential identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Resource Identifier
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only resources whose target matches the given target name.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public GetFleetCredentialsInvokeArgs()
        {
        }
        public static new GetFleetCredentialsInvokeArgs Empty => new GetFleetCredentialsInvokeArgs();
    }


    [OutputType]
    public sealed class GetFleetCredentialsResult
    {
        /// <summary>
        /// Tenancy OCID
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// At what level the credential is provided?
        /// </summary>
        public readonly string? CredentialLevel;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetFleetCredentialsFilterResult> Filters;
        /// <summary>
        /// The list of fleet_credential_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFleetCredentialsFleetCredentialCollectionResult> FleetCredentialCollections;
        public readonly string FleetId;
        /// <summary>
        /// The unique id of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// OCID of the resource associated with the target for which the credential is created.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The current state of the FleetCredential.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Target name for which the credential is provided.
        /// </summary>
        public readonly string? Target;

        [OutputConstructor]
        private GetFleetCredentialsResult(
            string? compartmentId,

            string? credentialLevel,

            string? displayName,

            ImmutableArray<Outputs.GetFleetCredentialsFilterResult> filters,

            ImmutableArray<Outputs.GetFleetCredentialsFleetCredentialCollectionResult> fleetCredentialCollections,

            string fleetId,

            string? id,

            string? resourceId,

            string? state,

            string? target)
        {
            CompartmentId = compartmentId;
            CredentialLevel = credentialLevel;
            DisplayName = displayName;
            Filters = filters;
            FleetCredentialCollections = fleetCredentialCollections;
            FleetId = fleetId;
            Id = id;
            ResourceId = resourceId;
            State = state;
            Target = target;
        }
    }
}
