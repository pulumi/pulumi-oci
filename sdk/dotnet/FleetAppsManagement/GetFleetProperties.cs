// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetFleetProperties
    {
        /// <summary>
        /// This data source provides the list of Fleet Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List properties associated with a fleet.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetProperties = Oci.FleetAppsManagement.GetFleetProperties.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         DisplayName = fleetPropertyDisplayName,
        ///         Id = fleetPropertyId,
        ///         State = fleetPropertyState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFleetPropertiesResult> InvokeAsync(GetFleetPropertiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFleetPropertiesResult>("oci:FleetAppsManagement/getFleetProperties:getFleetProperties", args ?? new GetFleetPropertiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleet Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List properties associated with a fleet.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetProperties = Oci.FleetAppsManagement.GetFleetProperties.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         DisplayName = fleetPropertyDisplayName,
        ///         Id = fleetPropertyId,
        ///         State = fleetPropertyState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetPropertiesResult> Invoke(GetFleetPropertiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetPropertiesResult>("oci:FleetAppsManagement/getFleetProperties:getFleetProperties", args ?? new GetFleetPropertiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleet Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List properties associated with a fleet.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetProperties = Oci.FleetAppsManagement.GetFleetProperties.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         DisplayName = fleetPropertyDisplayName,
        ///         Id = fleetPropertyId,
        ///         State = fleetPropertyState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetPropertiesResult> Invoke(GetFleetPropertiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetPropertiesResult>("oci:FleetAppsManagement/getFleetProperties:getFleetProperties", args ?? new GetFleetPropertiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFleetPropertiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetFleetPropertiesFilterArgs>? _filters;
        public List<Inputs.GetFleetPropertiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFleetPropertiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public string FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose fleetProperty identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetFleetPropertiesArgs()
        {
        }
        public static new GetFleetPropertiesArgs Empty => new GetFleetPropertiesArgs();
    }

    public sealed class GetFleetPropertiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetFleetPropertiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetFleetPropertiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFleetPropertiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public Input<string> FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose fleetProperty identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetFleetPropertiesInvokeArgs()
        {
        }
        public static new GetFleetPropertiesInvokeArgs Empty => new GetFleetPropertiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetFleetPropertiesResult
    {
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetFleetPropertiesFilterResult> Filters;
        public readonly string FleetId;
        /// <summary>
        /// The list of fleet_property_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFleetPropertiesFleetPropertyCollectionResult> FleetPropertyCollections;
        /// <summary>
        /// The unique id of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The current state of the FleetProperty.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetFleetPropertiesResult(
            string? displayName,

            ImmutableArray<Outputs.GetFleetPropertiesFilterResult> filters,

            string fleetId,

            ImmutableArray<Outputs.GetFleetPropertiesFleetPropertyCollectionResult> fleetPropertyCollections,

            string? id,

            string? state)
        {
            DisplayName = displayName;
            Filters = filters;
            FleetId = fleetId;
            FleetPropertyCollections = fleetPropertyCollections;
            Id = id;
            State = state;
        }
    }
}
