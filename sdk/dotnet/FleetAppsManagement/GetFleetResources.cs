// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetFleetResources
    {
        /// <summary>
        /// This data source provides the list of Fleet Resources in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List resources for a fleet in Fleet Application Management.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetResources = Oci.FleetAppsManagement.GetFleetResources.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         DisplayName = fleetResourceDisplayName,
        ///         FleetResourceType = fleetResourceFleetResourceType,
        ///         Id = fleetResourceId,
        ///         State = fleetResourceState,
        ///         TenancyId = testTenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFleetResourcesResult> InvokeAsync(GetFleetResourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFleetResourcesResult>("oci:FleetAppsManagement/getFleetResources:getFleetResources", args ?? new GetFleetResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleet Resources in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// List resources for a fleet in Fleet Application Management.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetResources = Oci.FleetAppsManagement.GetFleetResources.Invoke(new()
        ///     {
        ///         FleetId = testFleet.Id,
        ///         DisplayName = fleetResourceDisplayName,
        ///         FleetResourceType = fleetResourceFleetResourceType,
        ///         Id = fleetResourceId,
        ///         State = fleetResourceState,
        ///         TenancyId = testTenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetResourcesResult> Invoke(GetFleetResourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetResourcesResult>("oci:FleetAppsManagement/getFleetResources:getFleetResources", args ?? new GetFleetResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFleetResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetFleetResourcesFilterArgs>? _filters;
        public List<Inputs.GetFleetResourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFleetResourcesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public string FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose resourceType matches the given resourceType.
        /// </summary>
        [Input("fleetResourceType")]
        public string? FleetResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Resource Tenancy Id
        /// </summary>
        [Input("tenancyId")]
        public string? TenancyId { get; set; }

        public GetFleetResourcesArgs()
        {
        }
        public static new GetFleetResourcesArgs Empty => new GetFleetResourcesArgs();
    }

    public sealed class GetFleetResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetFleetResourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetFleetResourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFleetResourcesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Fleet identifier.
        /// </summary>
        [Input("fleetId", required: true)]
        public Input<string> FleetId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources whose resourceType matches the given resourceType.
        /// </summary>
        [Input("fleetResourceType")]
        public Input<string>? FleetResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose identifier matches the given identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Resource Tenancy Id
        /// </summary>
        [Input("tenancyId")]
        public Input<string>? TenancyId { get; set; }

        public GetFleetResourcesInvokeArgs()
        {
        }
        public static new GetFleetResourcesInvokeArgs Empty => new GetFleetResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetFleetResourcesResult
    {
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetFleetResourcesFilterResult> Filters;
        public readonly string FleetId;
        /// <summary>
        /// The list of fleet_resource_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFleetResourcesFleetResourceCollectionResult> FleetResourceCollections;
        public readonly string? FleetResourceType;
        /// <summary>
        /// The unique id of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The current state of the FleetResource.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// OCID of the tenancy to which the resource belongs to.
        /// </summary>
        public readonly string? TenancyId;

        [OutputConstructor]
        private GetFleetResourcesResult(
            string? displayName,

            ImmutableArray<Outputs.GetFleetResourcesFilterResult> filters,

            string fleetId,

            ImmutableArray<Outputs.GetFleetResourcesFleetResourceCollectionResult> fleetResourceCollections,

            string? fleetResourceType,

            string? id,

            string? state,

            string? tenancyId)
        {
            DisplayName = displayName;
            Filters = filters;
            FleetId = fleetId;
            FleetResourceCollections = fleetResourceCollections;
            FleetResourceType = fleetResourceType;
            Id = id;
            State = state;
            TenancyId = tenancyId;
        }
    }
}
