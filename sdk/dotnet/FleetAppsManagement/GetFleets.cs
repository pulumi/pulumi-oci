// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetFleets
    {
        /// <summary>
        /// This data source provides the list of Fleets in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of Fleets in the specified Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleets = Oci.FleetAppsManagement.GetFleets.Invoke(new()
        ///     {
        ///         ApplicationType = fleetApplicationType,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = fleetDisplayName,
        ///         EnvironmentType = fleetEnvironmentType,
        ///         FleetType = fleetFleetType,
        ///         Id = fleetId,
        ///         Product = fleetProduct,
        ///         State = fleetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFleetsResult> InvokeAsync(GetFleetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFleetsResult>("oci:FleetAppsManagement/getFleets:getFleets", args ?? new GetFleetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleets in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of Fleets in the specified Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleets = Oci.FleetAppsManagement.GetFleets.Invoke(new()
        ///     {
        ///         ApplicationType = fleetApplicationType,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = fleetDisplayName,
        ///         EnvironmentType = fleetEnvironmentType,
        ///         FleetType = fleetFleetType,
        ///         Id = fleetId,
        ///         Product = fleetProduct,
        ///         State = fleetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetsResult> Invoke(GetFleetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetsResult>("oci:FleetAppsManagement/getFleets:getFleets", args ?? new GetFleetsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fleets in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of Fleets in the specified Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleets = Oci.FleetAppsManagement.GetFleets.Invoke(new()
        ///     {
        ///         ApplicationType = fleetApplicationType,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = fleetDisplayName,
        ///         EnvironmentType = fleetEnvironmentType,
        ///         FleetType = fleetFleetType,
        ///         Id = fleetId,
        ///         Product = fleetProduct,
        ///         State = fleetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetsResult> Invoke(GetFleetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetsResult>("oci:FleetAppsManagement/getFleets:getFleets", args ?? new GetFleetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFleetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return resources that match the Application Type/Product Stack given..
        /// </summary>
        [Input("applicationType")]
        public string? ApplicationType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that match the Environment Type given.
        /// </summary>
        [Input("environmentType")]
        public string? EnvironmentType { get; set; }

        [Input("filters")]
        private List<Inputs.GetFleetsFilterArgs>? _filters;
        public List<Inputs.GetFleetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFleetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return fleets whose fleetType matches the given fleetType.
        /// </summary>
        [Input("fleetType")]
        public string? FleetType { get; set; }

        /// <summary>
        /// A filter to return fleets whose id matches the given Fleet identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return resources that match the Product given.
        /// </summary>
        [Input("product")]
        public string? Product { get; set; }

        /// <summary>
        /// A filter to return fleets whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetFleetsArgs()
        {
        }
        public static new GetFleetsArgs Empty => new GetFleetsArgs();
    }

    public sealed class GetFleetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return resources that match the Application Type/Product Stack given..
        /// </summary>
        [Input("applicationType")]
        public Input<string>? ApplicationType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that match the Environment Type given.
        /// </summary>
        [Input("environmentType")]
        public Input<string>? EnvironmentType { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetFleetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetFleetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFleetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return fleets whose fleetType matches the given fleetType.
        /// </summary>
        [Input("fleetType")]
        public Input<string>? FleetType { get; set; }

        /// <summary>
        /// A filter to return fleets whose id matches the given Fleet identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return resources that match the Product given.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// A filter to return fleets whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetFleetsInvokeArgs()
        {
        }
        public static new GetFleetsInvokeArgs Empty => new GetFleetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetFleetsResult
    {
        /// <summary>
        /// Product stack associated with the Fleet. Applicable for ENVIRONMENT fleet types.
        /// </summary>
        public readonly string? ApplicationType;
        /// <summary>
        /// Tenancy Id (Root Compartment Id)for which the rule is created.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Environment Type associated with the Fleet. Applicable for ENVIRONMENT fleet types.
        /// </summary>
        public readonly string? EnvironmentType;
        public readonly ImmutableArray<Outputs.GetFleetsFilterResult> Filters;
        /// <summary>
        /// The list of fleet_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFleetsFleetCollectionResult> FleetCollections;
        /// <summary>
        /// Type of the Fleet. PRODUCT - A fleet of product-specific resources for a product type. ENVIRONMENT - A fleet of environment-specific resources for a product stack. GROUP - A fleet of a fleet of either environment or product fleets. GENERIC - A fleet of resources selected dynamically or manually for reporting purposes
        /// </summary>
        public readonly string? FleetType;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        public readonly string? Product;
        /// <summary>
        /// The lifecycle state of the Fleet.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetFleetsResult(
            string? applicationType,

            string? compartmentId,

            string? displayName,

            string? environmentType,

            ImmutableArray<Outputs.GetFleetsFilterResult> filters,

            ImmutableArray<Outputs.GetFleetsFleetCollectionResult> fleetCollections,

            string? fleetType,

            string? id,

            string? product,

            string? state)
        {
            ApplicationType = applicationType;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            EnvironmentType = environmentType;
            Filters = filters;
            FleetCollections = fleetCollections;
            FleetType = fleetType;
            Id = id;
            Product = product;
            State = state;
        }
    }
}
