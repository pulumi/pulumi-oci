// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetInventoryResources
    {
        /// <summary>
        /// This data source provides the list of Inventory Resources in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of InventoryResources.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testInventoryResources = Oci.FleetAppsManagement.GetInventoryResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ResourceCompartmentId = testCompartment.Id,
        ///         DefinedTagEquals = inventoryResourceDefinedTagEquals,
        ///         DisplayName = inventoryResourceDisplayName,
        ///         FreeformTagEquals = inventoryResourceFreeformTagEquals,
        ///         InventoryProperties = inventoryResourceInventoryProperties,
        ///         MatchingCriteria = inventoryResourceMatchingCriteria,
        ///         ResourceRegion = inventoryResourceResourceRegion,
        ///         State = inventoryResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInventoryResourcesResult> InvokeAsync(GetInventoryResourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInventoryResourcesResult>("oci:FleetAppsManagement/getInventoryResources:getInventoryResources", args ?? new GetInventoryResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Inventory Resources in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of InventoryResources.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testInventoryResources = Oci.FleetAppsManagement.GetInventoryResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ResourceCompartmentId = testCompartment.Id,
        ///         DefinedTagEquals = inventoryResourceDefinedTagEquals,
        ///         DisplayName = inventoryResourceDisplayName,
        ///         FreeformTagEquals = inventoryResourceFreeformTagEquals,
        ///         InventoryProperties = inventoryResourceInventoryProperties,
        ///         MatchingCriteria = inventoryResourceMatchingCriteria,
        ///         ResourceRegion = inventoryResourceResourceRegion,
        ///         State = inventoryResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInventoryResourcesResult> Invoke(GetInventoryResourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInventoryResourcesResult>("oci:FleetAppsManagement/getInventoryResources:getInventoryResources", args ?? new GetInventoryResourcesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Inventory Resources in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of InventoryResources.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testInventoryResources = Oci.FleetAppsManagement.GetInventoryResources.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ResourceCompartmentId = testCompartment.Id,
        ///         DefinedTagEquals = inventoryResourceDefinedTagEquals,
        ///         DisplayName = inventoryResourceDisplayName,
        ///         FreeformTagEquals = inventoryResourceFreeformTagEquals,
        ///         InventoryProperties = inventoryResourceInventoryProperties,
        ///         MatchingCriteria = inventoryResourceMatchingCriteria,
        ///         ResourceRegion = inventoryResourceResourceRegion,
        ///         State = inventoryResourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInventoryResourcesResult> Invoke(GetInventoryResourcesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInventoryResourcesResult>("oci:FleetAppsManagement/getInventoryResources:getInventoryResources", args ?? new GetInventoryResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInventoryResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("definedTagEquals")]
        private List<string>? _definedTagEquals;

        /// <summary>
        /// A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format "{namespace}.{tagName}={value}".  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as "OR". Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as "AND". Example: Identification.Development=Yes
        /// </summary>
        public List<string> DefinedTagEquals
        {
            get => _definedTagEquals ?? (_definedTagEquals = new List<string>());
            set => _definedTagEquals = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetInventoryResourcesFilterArgs>? _filters;
        public List<Inputs.GetInventoryResourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInventoryResourcesFilterArgs>());
            set => _filters = value;
        }

        [Input("freeformTagEquals")]
        private List<string>? _freeformTagEquals;

        /// <summary>
        /// A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is "{tagName}.{value}".  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as "OR".  Values for different tag names are interpreted as "AND".
        /// </summary>
        public List<string> FreeformTagEquals
        {
            get => _freeformTagEquals ?? (_freeformTagEquals = new List<string>());
            set => _freeformTagEquals = value;
        }

        [Input("inventoryProperties")]
        private List<string>? _inventoryProperties;

        /// <summary>
        /// A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is "{resourceType}.{inventoryProperty}={value}". Example: Instance.displayName=TEST_INSTANCE
        /// </summary>
        public List<string> InventoryProperties
        {
            get => _inventoryProperties ?? (_inventoryProperties = new List<string>());
            set => _inventoryProperties = value;
        }

        /// <summary>
        /// Fetch resources matching ANY or ALL criteria passed as params in "tags" and "inventoryProperties". Example: matchingCriteria=ANY
        /// </summary>
        [Input("matchingCriteria")]
        public string? MatchingCriteria { get; set; }

        /// <summary>
        /// A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        /// </summary>
        [Input("resourceCompartmentId", required: true)]
        public string ResourceCompartmentId { get; set; } = null!;

        /// <summary>
        /// Resource Region
        /// </summary>
        [Input("resourceRegion")]
        public string? ResourceRegion { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetInventoryResourcesArgs()
        {
        }
        public static new GetInventoryResourcesArgs Empty => new GetInventoryResourcesArgs();
    }

    public sealed class GetInventoryResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTagEquals")]
        private InputList<string>? _definedTagEquals;

        /// <summary>
        /// A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned. Each item in the list has the format "{namespace}.{tagName}={value}".  All inputs are case-insensitive. Multiple values for the same key (i.e. same namespace and tag name) are interpreted as "OR". Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as "AND". Example: Identification.Development=Yes
        /// </summary>
        public InputList<string> DefinedTagEquals
        {
            get => _definedTagEquals ?? (_definedTagEquals = new InputList<string>());
            set => _definedTagEquals = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetInventoryResourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetInventoryResourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInventoryResourcesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("freeformTagEquals")]
        private InputList<string>? _freeformTagEquals;

        /// <summary>
        /// A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned. The key for each tag is "{tagName}.{value}".  All inputs are case-insensitive. Multiple values for the same tag name are interpreted as "OR".  Values for different tag names are interpreted as "AND".
        /// </summary>
        public InputList<string> FreeformTagEquals
        {
            get => _freeformTagEquals ?? (_freeformTagEquals = new InputList<string>());
            set => _freeformTagEquals = value;
        }

        [Input("inventoryProperties")]
        private InputList<string>? _inventoryProperties;

        /// <summary>
        /// A list of inventory properties filters to apply. The key for each inventory property and value for each resource type is "{resourceType}.{inventoryProperty}={value}". Example: Instance.displayName=TEST_INSTANCE
        /// </summary>
        public InputList<string> InventoryProperties
        {
            get => _inventoryProperties ?? (_inventoryProperties = new InputList<string>());
            set => _inventoryProperties = value;
        }

        /// <summary>
        /// Fetch resources matching ANY or ALL criteria passed as params in "tags" and "inventoryProperties". Example: matchingCriteria=ANY
        /// </summary>
        [Input("matchingCriteria")]
        public Input<string>? MatchingCriteria { get; set; }

        /// <summary>
        /// A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        /// </summary>
        [Input("resourceCompartmentId", required: true)]
        public Input<string> ResourceCompartmentId { get; set; } = null!;

        /// <summary>
        /// Resource Region
        /// </summary>
        [Input("resourceRegion")]
        public Input<string>? ResourceRegion { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetInventoryResourcesInvokeArgs()
        {
        }
        public static new GetInventoryResourcesInvokeArgs Empty => new GetInventoryResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetInventoryResourcesResult
    {
        /// <summary>
        /// OCID of the compartment to which the resource belongs to.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<string> DefinedTagEquals;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetInventoryResourcesFilterResult> Filters;
        public readonly ImmutableArray<string> FreeformTagEquals;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InventoryProperties;
        /// <summary>
        /// The list of inventory_resource_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInventoryResourcesInventoryResourceCollectionResult> InventoryResourceCollections;
        public readonly string? MatchingCriteria;
        /// <summary>
        /// Compartment Id of the resource.
        /// </summary>
        public readonly string ResourceCompartmentId;
        /// <summary>
        /// The region the resource belongs to.
        /// </summary>
        public readonly string? ResourceRegion;
        /// <summary>
        /// The current state of the Resource.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetInventoryResourcesResult(
            string compartmentId,

            ImmutableArray<string> definedTagEquals,

            string? displayName,

            ImmutableArray<Outputs.GetInventoryResourcesFilterResult> filters,

            ImmutableArray<string> freeformTagEquals,

            string id,

            ImmutableArray<string> inventoryProperties,

            ImmutableArray<Outputs.GetInventoryResourcesInventoryResourceCollectionResult> inventoryResourceCollections,

            string? matchingCriteria,

            string resourceCompartmentId,

            string? resourceRegion,

            string? state)
        {
            CompartmentId = compartmentId;
            DefinedTagEquals = definedTagEquals;
            DisplayName = displayName;
            Filters = filters;
            FreeformTagEquals = freeformTagEquals;
            Id = id;
            InventoryProperties = inventoryProperties;
            InventoryResourceCollections = inventoryResourceCollections;
            MatchingCriteria = matchingCriteria;
            ResourceCompartmentId = resourceCompartmentId;
            ResourceRegion = resourceRegion;
            State = state;
        }
    }
}
