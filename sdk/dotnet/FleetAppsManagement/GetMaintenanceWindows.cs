// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetMaintenanceWindows
    {
        /// <summary>
        /// This data source provides the list of Maintenance Windows in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of MaintenanceWindows in the specified Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaintenanceWindows = Oci.FleetAppsManagement.GetMaintenanceWindows.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = maintenanceWindowDisplayName,
        ///         Id = maintenanceWindowId,
        ///         State = maintenanceWindowState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMaintenanceWindowsResult> InvokeAsync(GetMaintenanceWindowsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMaintenanceWindowsResult>("oci:FleetAppsManagement/getMaintenanceWindows:getMaintenanceWindows", args ?? new GetMaintenanceWindowsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Maintenance Windows in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of MaintenanceWindows in the specified Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMaintenanceWindows = Oci.FleetAppsManagement.GetMaintenanceWindows.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = maintenanceWindowDisplayName,
        ///         Id = maintenanceWindowId,
        ///         State = maintenanceWindowState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMaintenanceWindowsResult> Invoke(GetMaintenanceWindowsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMaintenanceWindowsResult>("oci:FleetAppsManagement/getMaintenanceWindows:getMaintenanceWindows", args ?? new GetMaintenanceWindowsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMaintenanceWindowsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMaintenanceWindowsFilterArgs>? _filters;
        public List<Inputs.GetMaintenanceWindowsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMaintenanceWindowsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique MaintenanceWindow identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetMaintenanceWindowsArgs()
        {
        }
        public static new GetMaintenanceWindowsArgs Empty => new GetMaintenanceWindowsArgs();
    }

    public sealed class GetMaintenanceWindowsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMaintenanceWindowsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMaintenanceWindowsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMaintenanceWindowsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique MaintenanceWindow identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetMaintenanceWindowsInvokeArgs()
        {
        }
        public static new GetMaintenanceWindowsInvokeArgs Empty => new GetMaintenanceWindowsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMaintenanceWindowsResult
    {
        /// <summary>
        /// Tenancy OCID
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMaintenanceWindowsFilterResult> Filters;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of maintenance_window_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMaintenanceWindowsMaintenanceWindowCollectionResult> MaintenanceWindowCollections;
        /// <summary>
        /// The current state of the MaintenanceWindow.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetMaintenanceWindowsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetMaintenanceWindowsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetMaintenanceWindowsMaintenanceWindowCollectionResult> maintenanceWindowCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MaintenanceWindowCollections = maintenanceWindowCollections;
            State = state;
        }
    }
}
