// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetPatches
    {
        /// <summary>
        /// This data source provides the list of Patches in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Patches in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatches = Oci.FleetAppsManagement.GetPatches.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = patchId,
        ///         Name = patchName,
        ///         PatchTypeId = testPatchType.Id,
        ///         ProductId = testProduct.Id,
        ///         ShouldCompliancePolicyRulesBeApplied = patchShouldCompliancePolicyRulesBeApplied,
        ///         State = patchState,
        ///         TimeReleasedGreaterThanOrEqualTo = patchTimeReleasedGreaterThanOrEqualTo,
        ///         TimeReleasedLessThan = patchTimeReleasedLessThan,
        ///         Type = patchType,
        ///         Version = patchVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPatchesResult> InvokeAsync(GetPatchesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPatchesResult>("oci:FleetAppsManagement/getPatches:getPatches", args ?? new GetPatchesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Patches in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Patches in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatches = Oci.FleetAppsManagement.GetPatches.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = patchId,
        ///         Name = patchName,
        ///         PatchTypeId = testPatchType.Id,
        ///         ProductId = testProduct.Id,
        ///         ShouldCompliancePolicyRulesBeApplied = patchShouldCompliancePolicyRulesBeApplied,
        ///         State = patchState,
        ///         TimeReleasedGreaterThanOrEqualTo = patchTimeReleasedGreaterThanOrEqualTo,
        ///         TimeReleasedLessThan = patchTimeReleasedLessThan,
        ///         Type = patchType,
        ///         Version = patchVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPatchesResult> Invoke(GetPatchesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchesResult>("oci:FleetAppsManagement/getPatches:getPatches", args ?? new GetPatchesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Patches in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Patches in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPatches = Oci.FleetAppsManagement.GetPatches.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = patchId,
        ///         Name = patchName,
        ///         PatchTypeId = testPatchType.Id,
        ///         ProductId = testProduct.Id,
        ///         ShouldCompliancePolicyRulesBeApplied = patchShouldCompliancePolicyRulesBeApplied,
        ///         State = patchState,
        ///         TimeReleasedGreaterThanOrEqualTo = patchTimeReleasedGreaterThanOrEqualTo,
        ///         TimeReleasedLessThan = patchTimeReleasedLessThan,
        ///         Type = patchType,
        ///         Version = patchVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPatchesResult> Invoke(GetPatchesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchesResult>("oci:FleetAppsManagement/getPatches:getPatches", args ?? new GetPatchesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPatchesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetPatchesFilterArgs>? _filters;
        public List<Inputs.GetPatchesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPatchesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Patch Type platformConfigurationId associated with the Patch.
        /// </summary>
        [Input("patchTypeId")]
        public string? PatchTypeId { get; set; }

        /// <summary>
        /// Product platformConfigurationId associated with the Patch.
        /// </summary>
        [Input("productId")]
        public string? ProductId { get; set; }

        /// <summary>
        /// Filter patch based on compliance policy rules for the Product.
        /// </summary>
        [Input("shouldCompliancePolicyRulesBeApplied")]
        public bool? ShouldCompliancePolicyRulesBeApplied { get; set; }

        /// <summary>
        /// The current state of the Patch.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return patches whose release date is greater than or equal to the given date.
        /// </summary>
        [Input("timeReleasedGreaterThanOrEqualTo")]
        public string? TimeReleasedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return patches whose release date is less than the given date.
        /// </summary>
        [Input("timeReleasedLessThan")]
        public string? TimeReleasedLessThan { get; set; }

        /// <summary>
        /// DefinedBy type.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetPatchesArgs()
        {
        }
        public static new GetPatchesArgs Empty => new GetPatchesArgs();
    }

    public sealed class GetPatchesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPatchesFilterInputArgs>? _filters;
        public InputList<Inputs.GetPatchesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPatchesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Patch by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Patch Type platformConfigurationId associated with the Patch.
        /// </summary>
        [Input("patchTypeId")]
        public Input<string>? PatchTypeId { get; set; }

        /// <summary>
        /// Product platformConfigurationId associated with the Patch.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// Filter patch based on compliance policy rules for the Product.
        /// </summary>
        [Input("shouldCompliancePolicyRulesBeApplied")]
        public Input<bool>? ShouldCompliancePolicyRulesBeApplied { get; set; }

        /// <summary>
        /// The current state of the Patch.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return patches whose release date is greater than or equal to the given date.
        /// </summary>
        [Input("timeReleasedGreaterThanOrEqualTo")]
        public Input<string>? TimeReleasedGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// A filter to return patches whose release date is less than the given date.
        /// </summary>
        [Input("timeReleasedLessThan")]
        public Input<string>? TimeReleasedLessThan { get; set; }

        /// <summary>
        /// DefinedBy type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetPatchesInvokeArgs()
        {
        }
        public static new GetPatchesInvokeArgs Empty => new GetPatchesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPatchesResult
    {
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetPatchesFilterResult> Filters;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// A user-friendly name. Should be unique within the tenancy, and cannot be changed after creation.  Avoid entering confidential information.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of patch_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPatchesPatchCollectionResult> PatchCollections;
        public readonly string? PatchTypeId;
        public readonly string? ProductId;
        public readonly bool? ShouldCompliancePolicyRulesBeApplied;
        /// <summary>
        /// The current state of the Patch.
        /// </summary>
        public readonly string? State;
        public readonly string? TimeReleasedGreaterThanOrEqualTo;
        public readonly string? TimeReleasedLessThan;
        /// <summary>
        /// Provide information on who defined the patch. Example: For Custom Patches the value will be USER_DEFINED For Oracle Defined Patches the value will be ORACLE_DEFINED
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// product version.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetPatchesResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetPatchesFilterResult> filters,

            string? id,

            string? name,

            ImmutableArray<Outputs.GetPatchesPatchCollectionResult> patchCollections,

            string? patchTypeId,

            string? productId,

            bool? shouldCompliancePolicyRulesBeApplied,

            string? state,

            string? timeReleasedGreaterThanOrEqualTo,

            string? timeReleasedLessThan,

            string? type,

            string? version)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            PatchCollections = patchCollections;
            PatchTypeId = patchTypeId;
            ProductId = productId;
            ShouldCompliancePolicyRulesBeApplied = shouldCompliancePolicyRulesBeApplied;
            State = state;
            TimeReleasedGreaterThanOrEqualTo = timeReleasedGreaterThanOrEqualTo;
            TimeReleasedLessThan = timeReleasedLessThan;
            Type = type;
            Version = version;
        }
    }
}
