// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetPlatformConfigurations
    {
        /// <summary>
        /// This data source provides the list of Platform Configurations in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of PlatformConfiguration for Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPlatformConfigurations = Oci.FleetAppsManagement.GetPlatformConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ConfigCategory = platformConfigurationConfigCategory,
        ///         DisplayName = platformConfigurationDisplayName,
        ///         Id = platformConfigurationId,
        ///         State = platformConfigurationState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPlatformConfigurationsResult> InvokeAsync(GetPlatformConfigurationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPlatformConfigurationsResult>("oci:FleetAppsManagement/getPlatformConfigurations:getPlatformConfigurations", args ?? new GetPlatformConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Platform Configurations in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of PlatformConfiguration for Tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPlatformConfigurations = Oci.FleetAppsManagement.GetPlatformConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         ConfigCategory = platformConfigurationConfigCategory,
        ///         DisplayName = platformConfigurationDisplayName,
        ///         Id = platformConfigurationId,
        ///         State = platformConfigurationState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPlatformConfigurationsResult> Invoke(GetPlatformConfigurationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlatformConfigurationsResult>("oci:FleetAppsManagement/getPlatformConfigurations:getPlatformConfigurations", args ?? new GetPlatformConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlatformConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// Config Category
        /// </summary>
        [Input("configCategory")]
        public string? ConfigCategory { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetPlatformConfigurationsFilterArgs>? _filters;
        public List<Inputs.GetPlatformConfigurationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPlatformConfigurationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique PlatformConfiguration identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetPlatformConfigurationsArgs()
        {
        }
        public static new GetPlatformConfigurationsArgs Empty => new GetPlatformConfigurationsArgs();
    }

    public sealed class GetPlatformConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Config Category
        /// </summary>
        [Input("configCategory")]
        public Input<string>? ConfigCategory { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPlatformConfigurationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetPlatformConfigurationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPlatformConfigurationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique PlatformConfiguration identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetPlatformConfigurationsInvokeArgs()
        {
        }
        public static new GetPlatformConfigurationsInvokeArgs Empty => new GetPlatformConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlatformConfigurationsResult
    {
        /// <summary>
        /// Tenancy OCID
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Category of configuration
        /// </summary>
        public readonly string? ConfigCategory;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetPlatformConfigurationsFilterResult> Filters;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of platform_configuration_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPlatformConfigurationsPlatformConfigurationCollectionResult> PlatformConfigurationCollections;
        /// <summary>
        /// The current state of the PlatformConfiguration.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetPlatformConfigurationsResult(
            string? compartmentId,

            string? configCategory,

            string? displayName,

            ImmutableArray<Outputs.GetPlatformConfigurationsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetPlatformConfigurationsPlatformConfigurationCollectionResult> platformConfigurationCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            ConfigCategory = configCategory;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            PlatformConfigurationCollections = platformConfigurationCollections;
            State = state;
        }
    }
}
