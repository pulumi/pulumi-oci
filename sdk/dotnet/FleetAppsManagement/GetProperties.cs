// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetProperties
    {
        /// <summary>
        /// This data source provides the list of Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Properties in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProperties = Oci.FleetAppsManagement.GetProperties.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = propertyDisplayName,
        ///         Id = propertyId,
        ///         Scope = propertyScope,
        ///         State = propertyState,
        ///         Type = propertyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPropertiesResult> InvokeAsync(GetPropertiesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPropertiesResult>("oci:FleetAppsManagement/getProperties:getProperties", args ?? new GetPropertiesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Properties in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProperties = Oci.FleetAppsManagement.GetProperties.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = propertyDisplayName,
        ///         Id = propertyId,
        ///         Scope = propertyScope,
        ///         State = propertyState,
        ///         Type = propertyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPropertiesResult> Invoke(GetPropertiesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPropertiesResult>("oci:FleetAppsManagement/getProperties:getProperties", args ?? new GetPropertiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Properties in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the Properties in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProperties = Oci.FleetAppsManagement.GetProperties.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = propertyDisplayName,
        ///         Id = propertyId,
        ///         Scope = propertyScope,
        ///         State = propertyState,
        ///         Type = propertyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPropertiesResult> Invoke(GetPropertiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPropertiesResult>("oci:FleetAppsManagement/getProperties:getProperties", args ?? new GetPropertiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPropertiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetPropertiesFilterArgs>? _filters;
        public List<Inputs.GetPropertiesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPropertiesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Property by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their scope matches the given scope.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return properties whose type matches the given type.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetPropertiesArgs()
        {
        }
        public static new GetPropertiesArgs Empty => new GetPropertiesArgs();
    }

    public sealed class GetPropertiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPropertiesFilterInputArgs>? _filters;
        public InputList<Inputs.GetPropertiesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPropertiesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Property by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their scope matches the given scope.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return properties whose type matches the given type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetPropertiesInvokeArgs()
        {
        }
        public static new GetPropertiesInvokeArgs Empty => new GetPropertiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPropertiesResult
    {
        /// <summary>
        /// Compartment OCID
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetPropertiesFilterResult> Filters;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of property_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPropertiesPropertyCollectionResult> PropertyCollections;
        /// <summary>
        /// The scope of the property.
        /// </summary>
        public readonly string? Scope;
        /// <summary>
        /// The current state of the Property.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of the property.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetPropertiesResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetPropertiesFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetPropertiesPropertyCollectionResult> propertyCollections,

            string? scope,

            string? state,

            string? type)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            PropertyCollections = propertyCollections;
            Scope = scope;
            State = state;
            Type = type;
        }
    }
}
