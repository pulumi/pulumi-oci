// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement
{
    public static class GetRunbooks
    {
        /// <summary>
        /// This data source provides the list of Runbooks in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the runbooks in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunbooks = Oci.FleetAppsManagement.GetRunbooks.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = runbookDisplayName,
        ///         Id = runbookId,
        ///         Operation = runbookOperation,
        ///         Platform = runbookPlatform,
        ///         State = runbookState,
        ///         Type = runbookType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRunbooksResult> InvokeAsync(GetRunbooksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRunbooksResult>("oci:FleetAppsManagement/getRunbooks:getRunbooks", args ?? new GetRunbooksArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Runbooks in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the runbooks in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunbooks = Oci.FleetAppsManagement.GetRunbooks.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = runbookDisplayName,
        ///         Id = runbookId,
        ///         Operation = runbookOperation,
        ///         Platform = runbookPlatform,
        ///         State = runbookState,
        ///         Type = runbookType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRunbooksResult> Invoke(GetRunbooksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunbooksResult>("oci:FleetAppsManagement/getRunbooks:getRunbooks", args ?? new GetRunbooksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Runbooks in Oracle Cloud Infrastructure Fleet Apps Management service.
        /// 
        /// Returns a list of all the runbooks in the specified compartment.
        /// The query parameter `compartmentId` is required unless the query parameter `Id` is specified.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRunbooks = Oci.FleetAppsManagement.GetRunbooks.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = runbookDisplayName,
        ///         Id = runbookId,
        ///         Operation = runbookOperation,
        ///         Platform = runbookPlatform,
        ///         State = runbookState,
        ///         Type = runbookType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRunbooksResult> Invoke(GetRunbooksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRunbooksResult>("oci:FleetAppsManagement/getRunbooks:getRunbooks", args ?? new GetRunbooksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRunbooksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetRunbooksFilterArgs>? _filters;
        public List<Inputs.GetRunbooksFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRunbooksFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return runbooks whose operation matches the given lifecycle operation.
        /// </summary>
        [Input("operation")]
        public string? Operation { get; set; }

        /// <summary>
        /// A filter to return runbooks whose platform matches the given platform.
        /// </summary>
        [Input("platform")]
        public string? Platform { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return runbooks whose type matches the given type.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRunbooksArgs()
        {
        }
        public static new GetRunbooksArgs Empty => new GetRunbooksArgs();
    }

    public sealed class GetRunbooksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. Empty only if the resource OCID query param is not specified.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRunbooksFilterInputArgs>? _filters;
        public InputList<Inputs.GetRunbooksFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRunbooksFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique identifier or OCID for listing a single Runbook by id. Either compartmentId or id must be provided.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return runbooks whose operation matches the given lifecycle operation.
        /// </summary>
        [Input("operation")]
        public Input<string>? Operation { get; set; }

        /// <summary>
        /// A filter to return runbooks whose platform matches the given platform.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return runbooks whose type matches the given type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRunbooksInvokeArgs()
        {
        }
        public static new GetRunbooksInvokeArgs Empty => new GetRunbooksInvokeArgs();
    }


    [OutputType]
    public sealed class GetRunbooksResult
    {
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetRunbooksFilterResult> Filters;
        /// <summary>
        /// The OCID of the resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The lifecycle operation performed by the runbook.
        /// </summary>
        public readonly string? Operation;
        /// <summary>
        /// The platform of the runbook.
        /// </summary>
        public readonly string? Platform;
        /// <summary>
        /// The list of runbook_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunbooksRunbookCollectionResult> RunbookCollections;
        /// <summary>
        /// The current state of the runbook.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of the runbook.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetRunbooksResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetRunbooksFilterResult> filters,

            string? id,

            string? operation,

            string? platform,

            ImmutableArray<Outputs.GetRunbooksRunbookCollectionResult> runbookCollections,

            string? state,

            string? type)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            Operation = operation;
            Platform = platform;
            RunbookCollections = runbookCollections;
            State = state;
            Type = type;
        }
    }
}
