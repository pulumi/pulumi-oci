// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetAppsManagement.Outputs
{

    [OutputType]
    public sealed class GetRunbookAssociationTaskStepPropertyResult
    {
        /// <summary>
        /// The action to be taken in case of a failure.
        /// </summary>
        public readonly string ActionOnFailure;
        /// <summary>
        /// Build control flow conditions that determine the relevance of the task execution.
        /// </summary>
        public readonly string Condition;
        /// <summary>
        /// Preferences to send notifications on the task activities.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunbookAssociationTaskStepPropertyNotificationPreferenceResult> NotificationPreferences;
        /// <summary>
        /// Pause Details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRunbookAssociationTaskStepPropertyPauseDetailResult> PauseDetails;
        /// <summary>
        /// The runOn condition for the task/group/container. Build task execution conditions if applicable to product and product-specific components. This condition is relevant when handling product stack workflows. Example: target.product.name = Oracle WebLogic Server OR target.product.name = Oracle HTTP Server
        /// </summary>
        public readonly string RunOn;

        [OutputConstructor]
        private GetRunbookAssociationTaskStepPropertyResult(
            string actionOnFailure,

            string condition,

            ImmutableArray<Outputs.GetRunbookAssociationTaskStepPropertyNotificationPreferenceResult> notificationPreferences,

            ImmutableArray<Outputs.GetRunbookAssociationTaskStepPropertyPauseDetailResult> pauseDetails,

            string runOn)
        {
            ActionOnFailure = actionOnFailure;
            Condition = condition;
            NotificationPreferences = notificationPreferences;
            PauseDetails = pauseDetails;
            RunOn = runOn;
        }
    }
}
