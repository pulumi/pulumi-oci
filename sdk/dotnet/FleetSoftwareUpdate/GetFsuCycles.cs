// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.FleetSoftwareUpdate
{
    public static class GetFsuCycles
    {
        /// <summary>
        /// This data source provides the list of Fsu Cycles in Oracle Cloud Infrastructure Fleet Software Update service.
        /// 
        /// Gets a list of all Exadata Fleet Update Cycles in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFsuCycles = Oci.FleetSoftwareUpdate.GetFsuCycles.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CollectionType = fsuCycleCollectionType,
        ///         DisplayName = fsuCycleDisplayName,
        ///         FsuCollectionId = testFsuCollection.Id,
        ///         State = fsuCycleState,
        ///         TargetVersion = fsuCycleTargetVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFsuCyclesResult> InvokeAsync(GetFsuCyclesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFsuCyclesResult>("oci:FleetSoftwareUpdate/getFsuCycles:getFsuCycles", args ?? new GetFsuCyclesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Fsu Cycles in Oracle Cloud Infrastructure Fleet Software Update service.
        /// 
        /// Gets a list of all Exadata Fleet Update Cycles in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFsuCycles = Oci.FleetSoftwareUpdate.GetFsuCycles.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CollectionType = fsuCycleCollectionType,
        ///         DisplayName = fsuCycleDisplayName,
        ///         FsuCollectionId = testFsuCollection.Id,
        ///         State = fsuCycleState,
        ///         TargetVersion = fsuCycleTargetVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFsuCyclesResult> Invoke(GetFsuCyclesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFsuCyclesResult>("oci:FleetSoftwareUpdate/getFsuCycles:getFsuCycles", args ?? new GetFsuCyclesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFsuCyclesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources whose Collection type matches the given type.
        /// </summary>
        [Input("collectionType")]
        public string? CollectionType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetFsuCyclesFilterArgs>? _filters;
        public List<Inputs.GetFsuCyclesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFsuCyclesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
        /// </summary>
        [Input("fsuCollectionId")]
        public string? FsuCollectionId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only entries whose targetVersion matches the given targetVersion.
        /// </summary>
        [Input("targetVersion")]
        public string? TargetVersion { get; set; }

        public GetFsuCyclesArgs()
        {
        }
        public static new GetFsuCyclesArgs Empty => new GetFsuCyclesArgs();
    }

    public sealed class GetFsuCyclesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources whose Collection type matches the given type.
        /// </summary>
        [Input("collectionType")]
        public Input<string>? CollectionType { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetFsuCyclesFilterInputArgs>? _filters;
        public InputList<Inputs.GetFsuCyclesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFsuCyclesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources whose fsuCollectionId matches the given fsuCollectionId.
        /// </summary>
        [Input("fsuCollectionId")]
        public Input<string>? FsuCollectionId { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only entries whose targetVersion matches the given targetVersion.
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        public GetFsuCyclesInvokeArgs()
        {
        }
        public static new GetFsuCyclesInvokeArgs Empty => new GetFsuCyclesInvokeArgs();
    }


    [OutputType]
    public sealed class GetFsuCyclesResult
    {
        /// <summary>
        /// Type of Collection this Exadata Fleet Update Cycle belongs to.
        /// </summary>
        public readonly string? CollectionType;
        /// <summary>
        /// Compartment Identifier.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Exadata Fleet Update Cycle display name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetFsuCyclesFilterResult> Filters;
        /// <summary>
        /// OCID identifier for the Collection ID the Exadata Fleet Update Cycle is assigned to.
        /// </summary>
        public readonly string? FsuCollectionId;
        /// <summary>
        /// The list of fsu_cycle_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFsuCyclesFsuCycleSummaryCollectionResult> FsuCycleSummaryCollections;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the Exadata Fleet Update Cycle.
        /// </summary>
        public readonly string? State;
        public readonly string? TargetVersion;

        [OutputConstructor]
        private GetFsuCyclesResult(
            string? collectionType,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetFsuCyclesFilterResult> filters,

            string? fsuCollectionId,

            ImmutableArray<Outputs.GetFsuCyclesFsuCycleSummaryCollectionResult> fsuCycleSummaryCollections,

            string id,

            string? state,

            string? targetVersion)
        {
            CollectionType = collectionType;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            FsuCollectionId = fsuCollectionId;
            FsuCycleSummaryCollections = fsuCycleSummaryCollections;
            Id = id;
            State = state;
            TargetVersion = targetVersion;
        }
    }
}
