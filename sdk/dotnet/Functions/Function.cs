// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Functions
{
    /// <summary>
    /// This resource provides the Function resource in Oracle Cloud Infrastructure Functions service.
    /// 
    /// Creates a new function.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testFunction = new Oci.Functions.Function("test_function", new()
    ///     {
    ///         ApplicationId = testApplication.Id,
    ///         DisplayName = functionDisplayName,
    ///         MemoryInMbs = functionMemoryInMbs,
    ///         Config = functionConfig,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         Image = functionImage,
    ///         ImageDigest = functionImageDigest,
    ///         ProvisionedConcurrencyConfig = new Oci.Functions.Inputs.FunctionProvisionedConcurrencyConfigArgs
    ///         {
    ///             Strategy = functionProvisionedConcurrencyConfigStrategy,
    ///             Count = functionProvisionedConcurrencyConfigCount,
    ///         },
    ///         SourceDetails = new Oci.Functions.Inputs.FunctionSourceDetailsArgs
    ///         {
    ///             PbfListingId = testPbfListing.Id,
    ///             SourceType = functionSourceDetailsSourceType,
    ///         },
    ///         TimeoutInSeconds = functionTimeoutInSeconds,
    ///         TraceConfig = new Oci.Functions.Inputs.FunctionTraceConfigArgs
    ///         {
    ///             IsEnabled = functionTraceConfigIsEnabled,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Functions can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Functions/function:Function test_function "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Functions/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the application this function belongs to.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment that contains the function.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
        /// 
        /// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, string>> Config { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if ImageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
        /// </summary>
        [Output("image")]
        public Output<string> Image { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
        /// </summary>
        [Output("imageDigest")]
        public Output<string> ImageDigest { get; private set; } = null!;

        /// <summary>
        /// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
        /// </summary>
        [Output("invokeEndpoint")]
        public Output<string> InvokeEndpoint { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Maximum usable memory for the function (MiB).
        /// </summary>
        [Output("memoryInMbs")]
        public Output<string> MemoryInMbs { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Define the strategy for provisioned concurrency for the function.
        /// </summary>
        [Output("provisionedConcurrencyConfig")]
        public Output<Outputs.FunctionProvisionedConcurrencyConfig> ProvisionedConcurrencyConfig { get; private set; } = null!;

        /// <summary>
        /// The processor shape (`GENERIC_X86`/`GENERIC_ARM`) on which to run functions in the application, extracted from the image manifest.
        /// </summary>
        [Output("shape")]
        public Output<string> Shape { get; private set; } = null!;

        /// <summary>
        /// The source details for the Function. The function can be created from various sources.
        /// </summary>
        [Output("sourceDetails")]
        public Output<Outputs.FunctionSourceDetails> SourceDetails { get; private set; } = null!;

        /// <summary>
        /// The current state of the function.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Timeout for executions of the function. Value in seconds.
        /// </summary>
        [Output("timeoutInSeconds")]
        public Output<int> TimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Define the tracing configuration for a function.
        /// </summary>
        [Output("traceConfig")]
        public Output<Outputs.FunctionTraceConfig> TraceConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("oci:Functions/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("oci:Functions/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the application this function belongs to.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
        /// 
        /// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if ImageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
        /// </summary>
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        /// <summary>
        /// (Updatable) Maximum usable memory for the function (MiB).
        /// </summary>
        [Input("memoryInMbs", required: true)]
        public Input<string> MemoryInMbs { get; set; } = null!;

        /// <summary>
        /// (Updatable) Define the strategy for provisioned concurrency for the function.
        /// </summary>
        [Input("provisionedConcurrencyConfig")]
        public Input<Inputs.FunctionProvisionedConcurrencyConfigArgs>? ProvisionedConcurrencyConfig { get; set; }

        /// <summary>
        /// The source details for the Function. The function can be created from various sources.
        /// </summary>
        [Input("sourceDetails")]
        public Input<Inputs.FunctionSourceDetailsArgs>? SourceDetails { get; set; }

        /// <summary>
        /// (Updatable) Timeout for executions of the function. Value in seconds.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        /// <summary>
        /// (Updatable) Define the tracing configuration for a function.
        /// </summary>
        [Input("traceConfig")]
        public Input<Inputs.FunctionTraceConfigArgs>? TraceConfig { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the application this function belongs to.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the function.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
        /// 
        /// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if ImageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
        /// </summary>
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        /// <summary>
        /// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
        /// </summary>
        [Input("invokeEndpoint")]
        public Input<string>? InvokeEndpoint { get; set; }

        /// <summary>
        /// (Updatable) Maximum usable memory for the function (MiB).
        /// </summary>
        [Input("memoryInMbs")]
        public Input<string>? MemoryInMbs { get; set; }

        /// <summary>
        /// (Updatable) Define the strategy for provisioned concurrency for the function.
        /// </summary>
        [Input("provisionedConcurrencyConfig")]
        public Input<Inputs.FunctionProvisionedConcurrencyConfigGetArgs>? ProvisionedConcurrencyConfig { get; set; }

        /// <summary>
        /// The processor shape (`GENERIC_X86`/`GENERIC_ARM`) on which to run functions in the application, extracted from the image manifest.
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        /// <summary>
        /// The source details for the Function. The function can be created from various sources.
        /// </summary>
        [Input("sourceDetails")]
        public Input<Inputs.FunctionSourceDetailsGetArgs>? SourceDetails { get; set; }

        /// <summary>
        /// The current state of the function.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) Timeout for executions of the function. Value in seconds.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        /// <summary>
        /// (Updatable) Define the tracing configuration for a function.
        /// </summary>
        [Input("traceConfig")]
        public Input<Inputs.FunctionTraceConfigGetArgs>? TraceConfig { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
