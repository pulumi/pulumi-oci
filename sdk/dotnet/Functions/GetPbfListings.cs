// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Functions
{
    public static class GetPbfListings
    {
        /// <summary>
        /// This data source provides the list of Pbf Listings in Oracle Cloud Infrastructure Functions service.
        /// 
        /// Fetches a wrapped list of all Pre-built Function(PBF) Listings. Returns a PbfListingCollection containing 
        /// an array of PbfListingSummary response models.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPbfListings = Oci.Functions.GetPbfListings.Invoke(new()
        ///     {
        ///         Name = pbfListingName,
        ///         NameContains = pbfListingNameContains,
        ///         NameStartsWith = pbfListingNameStartsWith,
        ///         PbfListingId = testPbfListing.Id,
        ///         State = pbfListingState,
        ///         Triggers = pbfListingTrigger,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPbfListingsResult> InvokeAsync(GetPbfListingsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPbfListingsResult>("oci:Functions/getPbfListings:getPbfListings", args ?? new GetPbfListingsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pbf Listings in Oracle Cloud Infrastructure Functions service.
        /// 
        /// Fetches a wrapped list of all Pre-built Function(PBF) Listings. Returns a PbfListingCollection containing 
        /// an array of PbfListingSummary response models.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPbfListings = Oci.Functions.GetPbfListings.Invoke(new()
        ///     {
        ///         Name = pbfListingName,
        ///         NameContains = pbfListingNameContains,
        ///         NameStartsWith = pbfListingNameStartsWith,
        ///         PbfListingId = testPbfListing.Id,
        ///         State = pbfListingState,
        ///         Triggers = pbfListingTrigger,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPbfListingsResult> Invoke(GetPbfListingsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPbfListingsResult>("oci:Functions/getPbfListings:getPbfListings", args ?? new GetPbfListingsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pbf Listings in Oracle Cloud Infrastructure Functions service.
        /// 
        /// Fetches a wrapped list of all Pre-built Function(PBF) Listings. Returns a PbfListingCollection containing 
        /// an array of PbfListingSummary response models.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPbfListings = Oci.Functions.GetPbfListings.Invoke(new()
        ///     {
        ///         Name = pbfListingName,
        ///         NameContains = pbfListingNameContains,
        ///         NameStartsWith = pbfListingNameStartsWith,
        ///         PbfListingId = testPbfListing.Id,
        ///         State = pbfListingState,
        ///         Triggers = pbfListingTrigger,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPbfListingsResult> Invoke(GetPbfListingsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPbfListingsResult>("oci:Functions/getPbfListings:getPbfListings", args ?? new GetPbfListingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPbfListingsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPbfListingsFilterArgs>? _filters;
        public List<Inputs.GetPbfListingsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPbfListingsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire PBF name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that contain the supplied filter text in the PBF name given.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        /// <summary>
        /// A filter to return only resources that start with the supplied filter text in the PBF name given.
        /// </summary>
        [Input("nameStartsWith")]
        public string? NameStartsWith { get; set; }

        /// <summary>
        /// unique PbfListing identifier
        /// </summary>
        [Input("pbfListingId")]
        public string? PbfListingId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("triggers")]
        private List<string>? _triggers;

        /// <summary>
        /// A filter to return only resources that match the service trigger sources of a PBF.
        /// </summary>
        public List<string> Triggers
        {
            get => _triggers ?? (_triggers = new List<string>());
            set => _triggers = value;
        }

        public GetPbfListingsArgs()
        {
        }
        public static new GetPbfListingsArgs Empty => new GetPbfListingsArgs();
    }

    public sealed class GetPbfListingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPbfListingsFilterInputArgs>? _filters;
        public InputList<Inputs.GetPbfListingsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPbfListingsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire PBF name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that contain the supplied filter text in the PBF name given.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        /// <summary>
        /// A filter to return only resources that start with the supplied filter text in the PBF name given.
        /// </summary>
        [Input("nameStartsWith")]
        public Input<string>? NameStartsWith { get; set; }

        /// <summary>
        /// unique PbfListing identifier
        /// </summary>
        [Input("pbfListingId")]
        public Input<string>? PbfListingId { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("triggers")]
        private InputList<string>? _triggers;

        /// <summary>
        /// A filter to return only resources that match the service trigger sources of a PBF.
        /// </summary>
        public InputList<string> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<string>());
            set => _triggers = value;
        }

        public GetPbfListingsInvokeArgs()
        {
        }
        public static new GetPbfListingsInvokeArgs Empty => new GetPbfListingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPbfListingsResult
    {
        public readonly ImmutableArray<Outputs.GetPbfListingsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A brief descriptive name for the PBF trigger.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameContains;
        public readonly string? NameStartsWith;
        public readonly string? PbfListingId;
        /// <summary>
        /// The list of pbf_listings_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPbfListingsPbfListingsCollectionResult> PbfListingsCollections;
        /// <summary>
        /// The current state of the PBF resource.
        /// </summary>
        public readonly string? State;
        public readonly ImmutableArray<string> Triggers;

        [OutputConstructor]
        private GetPbfListingsResult(
            ImmutableArray<Outputs.GetPbfListingsFilterResult> filters,

            string id,

            string? name,

            string? nameContains,

            string? nameStartsWith,

            string? pbfListingId,

            ImmutableArray<Outputs.GetPbfListingsPbfListingsCollectionResult> pbfListingsCollections,

            string? state,

            ImmutableArray<string> triggers)
        {
            Filters = filters;
            Id = id;
            Name = name;
            NameContains = nameContains;
            NameStartsWith = nameStartsWith;
            PbfListingId = pbfListingId;
            PbfListingsCollections = pbfListingsCollections;
            State = state;
            Triggers = triggers;
        }
    }
}
