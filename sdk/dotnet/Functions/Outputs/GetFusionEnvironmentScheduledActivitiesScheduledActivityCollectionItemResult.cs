// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Functions.Outputs
{

    [OutputType]
    public sealed class GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult
    {
        /// <summary>
        /// List of actions
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult> Actions;
        /// <summary>
        /// Cumulative delay hours
        /// </summary>
        public readonly int DelayInHours;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// unique FusionEnvironment identifier
        /// </summary>
        public readonly string FusionEnvironmentId;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// A filter that returns all resources that match the specified run cycle.
        /// </summary>
        public readonly string RunCycle;
        /// <summary>
        /// Service availability / impact during scheduled activity execution up down
        /// </summary>
        public readonly string ServiceAvailability;
        /// <summary>
        /// A filter that returns all resources that match the specified status
        /// </summary>
        public readonly string State;
        public readonly string TimeAccepted;
        /// <summary>
        /// Current time the scheduled activity is scheduled to end. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeExpectedFinish;
        /// <summary>
        /// The time the scheduled activity actually completed / cancelled / failed. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeFinished;
        /// <summary>
        /// Current time the scheduled activity is scheduled to start. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeScheduledStart;
        /// <summary>
        /// The time the scheduled activity record was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemResult(
            ImmutableArray<Outputs.GetFusionEnvironmentScheduledActivitiesScheduledActivityCollectionItemActionResult> actions,

            int delayInHours,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string fusionEnvironmentId,

            string id,

            string lifecycleDetails,

            string runCycle,

            string serviceAvailability,

            string state,

            string timeAccepted,

            string timeExpectedFinish,

            string timeFinished,

            string timeScheduledStart,

            string timeUpdated)
        {
            Actions = actions;
            DelayInHours = delayInHours;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            FusionEnvironmentId = fusionEnvironmentId;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            RunCycle = runCycle;
            ServiceAvailability = serviceAvailability;
            State = state;
            TimeAccepted = timeAccepted;
            TimeExpectedFinish = timeExpectedFinish;
            TimeFinished = timeFinished;
            TimeScheduledStart = timeScheduledStart;
            TimeUpdated = timeUpdated;
        }
    }
}
