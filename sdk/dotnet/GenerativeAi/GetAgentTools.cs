// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GenerativeAi
{
    public static class GetAgentTools
    {
        /// <summary>
        /// This data source provides the list of Tools in Oracle Cloud Infrastructure Generative Ai Agent service.
        /// 
        /// Gets a list of tools.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTools = Oci.GenerativeAi.GetAgentTools.Invoke(new()
        ///     {
        ///         AgentId = testAgent.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = toolDisplayName,
        ///         State = toolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAgentToolsResult> InvokeAsync(GetAgentToolsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAgentToolsResult>("oci:GenerativeAi/getAgentTools:getAgentTools", args ?? new GetAgentToolsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Tools in Oracle Cloud Infrastructure Generative Ai Agent service.
        /// 
        /// Gets a list of tools.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTools = Oci.GenerativeAi.GetAgentTools.Invoke(new()
        ///     {
        ///         AgentId = testAgent.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = toolDisplayName,
        ///         State = toolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAgentToolsResult> Invoke(GetAgentToolsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAgentToolsResult>("oci:GenerativeAi/getAgentTools:getAgentTools", args ?? new GetAgentToolsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Tools in Oracle Cloud Infrastructure Generative Ai Agent service.
        /// 
        /// Gets a list of tools.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTools = Oci.GenerativeAi.GetAgentTools.Invoke(new()
        ///     {
        ///         AgentId = testAgent.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = toolDisplayName,
        ///         State = toolState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAgentToolsResult> Invoke(GetAgentToolsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAgentToolsResult>("oci:GenerativeAi/getAgentTools:getAgentTools", args ?? new GetAgentToolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAgentToolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        /// </summary>
        [Input("agentId")]
        public string? AgentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAgentToolsFilterArgs>? _filters;
        public List<Inputs.GetAgentToolsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAgentToolsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetAgentToolsArgs()
        {
        }
        public static new GetAgentToolsArgs Empty => new GetAgentToolsArgs();
    }

    public sealed class GetAgentToolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the agent.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAgentToolsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAgentToolsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAgentToolsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetAgentToolsInvokeArgs()
        {
        }
        public static new GetAgentToolsInvokeArgs Empty => new GetAgentToolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAgentToolsResult
    {
        /// <summary>
        /// The OCID of the agent that this Tool is attached to.
        /// </summary>
        public readonly string? AgentId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAgentToolsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the Tool.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of tool_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAgentToolsToolCollectionResult> ToolCollections;

        [OutputConstructor]
        private GetAgentToolsResult(
            string? agentId,

            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetAgentToolsFilterResult> filters,

            string id,

            string? state,

            ImmutableArray<Outputs.GetAgentToolsToolCollectionResult> toolCollections)
        {
            AgentId = agentId;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            ToolCollections = toolCollections;
        }
    }
}
