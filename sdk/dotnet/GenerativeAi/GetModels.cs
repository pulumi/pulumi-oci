// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GenerativeAi
{
    public static class GetModels
    {
        /// <summary>
        /// This data source provides the list of Models in Oracle Cloud Infrastructure Generative Ai service.
        /// 
        /// Lists the models in a specific compartment. Includes pretrained base models and fine-tuned custom models.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModels = Oci.GenerativeAi.GetModels.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Capabilities = modelCapability,
        ///         DisplayName = modelDisplayName,
        ///         Id = modelId,
        ///         State = modelState,
        ///         Vendor = modelVendor,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetModelsResult> InvokeAsync(GetModelsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetModelsResult>("oci:GenerativeAi/getModels:getModels", args ?? new GetModelsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Models in Oracle Cloud Infrastructure Generative Ai service.
        /// 
        /// Lists the models in a specific compartment. Includes pretrained base models and fine-tuned custom models.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testModels = Oci.GenerativeAi.GetModels.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Capabilities = modelCapability,
        ///         DisplayName = modelDisplayName,
        ///         Id = modelId,
        ///         State = modelState,
        ///         Vendor = modelVendor,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetModelsResult> Invoke(GetModelsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetModelsResult>("oci:GenerativeAi/getModels:getModels", args ?? new GetModelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetModelsArgs : global::Pulumi.InvokeArgs
    {
        [Input("capabilities")]
        private List<string>? _capabilities;

        /// <summary>
        /// A filter to return only resources their capability matches the given capability.
        /// </summary>
        public List<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new List<string>());
            set => _capabilities = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetModelsFilterArgs>? _filters;
        public List<Inputs.GetModelsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetModelsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the model.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire vendor given.
        /// </summary>
        [Input("vendor")]
        public string? Vendor { get; set; }

        public GetModelsArgs()
        {
        }
        public static new GetModelsArgs Empty => new GetModelsArgs();
    }

    public sealed class GetModelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("capabilities")]
        private InputList<string>? _capabilities;

        /// <summary>
        /// A filter to return only resources their capability matches the given capability.
        /// </summary>
        public InputList<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<string>());
            set => _capabilities = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetModelsFilterInputArgs>? _filters;
        public InputList<Inputs.GetModelsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetModelsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the model.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire vendor given.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public GetModelsInvokeArgs()
        {
        }
        public static new GetModelsInvokeArgs Empty => new GetModelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetModelsResult
    {
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// The compartment OCID for fine-tuned models. For pretrained models, this value is null.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A user-friendly name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetModelsFilterResult> Filters;
        /// <summary>
        /// An ID that uniquely identifies a pretrained or fine-tuned model.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of model_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetModelsModelCollectionResult> ModelCollections;
        /// <summary>
        /// The lifecycle state of the model.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The provider of the base model.
        /// </summary>
        public readonly string? Vendor;

        [OutputConstructor]
        private GetModelsResult(
            ImmutableArray<string> capabilities,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetModelsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetModelsModelCollectionResult> modelCollections,

            string? state,

            string? vendor)
        {
            Capabilities = capabilities;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ModelCollections = modelCollections;
            State = state;
            Vendor = vendor;
        }
    }
}
