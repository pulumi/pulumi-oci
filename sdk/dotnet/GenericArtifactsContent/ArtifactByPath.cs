// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GenericArtifactsContent
{
    /// <summary>
    /// Provides the Artifact By Path resource in Oracle Cloud Infrastructure Generic Artifacts Content service. This resource supports upload/download the content of a generic artifact by specifying the repository id, artifact path, and artifact version
    /// 
    /// ## Note
    /// 
    /// This resource is not supported to delete generic artifact.
    /// In order to delete generic artifact, you can use `oci.Artifacts.GenericArtifact`
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testArtifactByPath = new Oci.GenericArtifactsContent.ArtifactByPath("test_artifact_by_path", new()
    ///     {
    ///         ArtifactPath = artifactPath,
    ///         RepositoryId = testRepository.Id,
    ///         Version = version,
    ///         Source = source,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [OciResourceType("oci:GenericArtifactsContent/artifactByPath:ArtifactByPath")]
    public partial class ArtifactByPath : global::Pulumi.CustomResource
    {
        [Output("artifactId")]
        public Output<string> ArtifactId { get; private set; } = null!;

        /// <summary>
        /// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
        /// </summary>
        [Output("artifactPath")]
        public Output<string> ArtifactPath { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// The artifact name with the format of `&lt;artifact-path&gt;:&lt;artifact-version&gt;`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
        /// </summary>
        [Output("sha256")]
        public Output<string> Sha256 { get; private set; } = null!;

        /// <summary>
        /// The size of the artifact in bytes.
        /// </summary>
        [Output("sizeInBytes")]
        public Output<string> SizeInBytes { get; private set; } = null!;

        /// <summary>
        /// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        /// <summary>
        /// The current state of the artifact.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// An RFC 3339 timestamp indicating when the repository was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ArtifactByPath resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ArtifactByPath(string name, ArtifactByPathArgs args, CustomResourceOptions? options = null)
            : base("oci:GenericArtifactsContent/artifactByPath:ArtifactByPath", name, args ?? new ArtifactByPathArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ArtifactByPath(string name, Input<string> id, ArtifactByPathState? state = null, CustomResourceOptions? options = null)
            : base("oci:GenericArtifactsContent/artifactByPath:ArtifactByPath", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ArtifactByPath resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ArtifactByPath Get(string name, Input<string> id, ArtifactByPathState? state = null, CustomResourceOptions? options = null)
        {
            return new ArtifactByPath(name, id, state, options);
        }
    }

    public sealed class ArtifactByPathArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
        /// </summary>
        [Input("artifactPath", required: true)]
        public Input<string> ArtifactPath { get; set; } = null!;

        /// <summary>
        /// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public ArtifactByPathArgs()
        {
        }
        public static new ArtifactByPathArgs Empty => new ArtifactByPathArgs();
    }

    public sealed class ArtifactByPathState : global::Pulumi.ResourceArgs
    {
        [Input("artifactId")]
        public Input<string>? ArtifactId { get; set; }

        /// <summary>
        /// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
        /// </summary>
        [Input("artifactPath")]
        public Input<string>? ArtifactPath { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// The artifact name with the format of `&lt;artifact-path&gt;:&lt;artifact-version&gt;`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
        /// </summary>
        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        /// <summary>
        /// The size of the artifact in bytes.
        /// </summary>
        [Input("sizeInBytes")]
        public Input<string>? SizeInBytes { get; set; }

        /// <summary>
        /// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// The current state of the artifact.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// An RFC 3339 timestamp indicating when the repository was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ArtifactByPathState()
        {
        }
        public static new ArtifactByPathState Empty => new ArtifactByPathState();
    }
}
