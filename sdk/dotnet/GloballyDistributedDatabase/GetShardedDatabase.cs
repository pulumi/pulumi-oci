// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GloballyDistributedDatabase
{
    public static class GetShardedDatabase
    {
        /// <summary>
        /// This data source provides details about a specific Sharded Database resource in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// Gets the details of the Sharded database identified by given id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabase = Oci.GloballyDistributedDatabase.GetShardedDatabase.Invoke(new()
        ///     {
        ///         ShardedDatabaseId = testShardedDatabaseOciGloballyDistributedDatabaseShardedDatabase.Id,
        ///         Metadata = shardedDatabaseMetadata,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetShardedDatabaseResult> InvokeAsync(GetShardedDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetShardedDatabaseResult>("oci:GloballyDistributedDatabase/getShardedDatabase:getShardedDatabase", args ?? new GetShardedDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Sharded Database resource in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// Gets the details of the Sharded database identified by given id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabase = Oci.GloballyDistributedDatabase.GetShardedDatabase.Invoke(new()
        ///     {
        ///         ShardedDatabaseId = testShardedDatabaseOciGloballyDistributedDatabaseShardedDatabase.Id,
        ///         Metadata = shardedDatabaseMetadata,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetShardedDatabaseResult> Invoke(GetShardedDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetShardedDatabaseResult>("oci:GloballyDistributedDatabase/getShardedDatabase:getShardedDatabase", args ?? new GetShardedDatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Sharded Database resource in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// Gets the details of the Sharded database identified by given id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabase = Oci.GloballyDistributedDatabase.GetShardedDatabase.Invoke(new()
        ///     {
        ///         ShardedDatabaseId = testShardedDatabaseOciGloballyDistributedDatabaseShardedDatabase.Id,
        ///         Metadata = shardedDatabaseMetadata,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetShardedDatabaseResult> Invoke(GetShardedDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetShardedDatabaseResult>("oci:GloballyDistributedDatabase/getShardedDatabase:getShardedDatabase", args ?? new GetShardedDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShardedDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
        /// </summary>
        [Input("metadata")]
        public string? Metadata { get; set; }

        /// <summary>
        /// Sharded Database identifier
        /// </summary>
        [Input("shardedDatabaseId", required: true)]
        public string ShardedDatabaseId { get; set; } = null!;

        public GetShardedDatabaseArgs()
        {
        }
        public static new GetShardedDatabaseArgs Empty => new GetShardedDatabaseArgs();
    }

    public sealed class GetShardedDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Comma separated names of argument corresponding to which metadata need to be retrived, namely VM_CLUSTER_INFO, ADDITIONAL_RESOURCE_INFO. An example is metadata=VM_CLUSTER_INFO,ADDITIONAL_RESOURCE_INFO.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// Sharded Database identifier
        /// </summary>
        [Input("shardedDatabaseId", required: true)]
        public Input<string> ShardedDatabaseId { get; set; } = null!;

        public GetShardedDatabaseInvokeArgs()
        {
        }
        public static new GetShardedDatabaseInvokeArgs Empty => new GetShardedDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetShardedDatabaseResult
    {
        public readonly string CaSignedCertificate;
        /// <summary>
        /// Details of ATP-D based catalogs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardedDatabaseCatalogDetailResult> CatalogDetails;
        /// <summary>
        /// The character set for the database.
        /// </summary>
        public readonly string CharacterSet;
        /// <summary>
        /// The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
        /// </summary>
        public readonly int Chunks;
        /// <summary>
        /// The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
        /// </summary>
        public readonly string ClusterCertificateCommonName;
        /// <summary>
        /// Identifier of the compartment in which sharded database exists.
        /// </summary>
        public readonly string CompartmentId;
        public readonly int ConfigureGsmsTrigger;
        public readonly bool ConfigureGsmsTriggerIsLatestGsmImage;
        public readonly ImmutableArray<string> ConfigureGsmsTriggerOldGsmNames;
        public readonly int ConfigureShardingTrigger;
        /// <summary>
        /// Details of sharded database connection String.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardedDatabaseConnectionStringResult> ConnectionStrings;
        /// <summary>
        /// The database deployment type.
        /// </summary>
        public readonly string DbDeploymentType;
        /// <summary>
        /// Oracle Database version number.
        /// </summary>
        public readonly string DbVersion;
        /// <summary>
        /// Possible workload types.
        /// </summary>
        public readonly string DbWorkload;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Oracle sharded database display name.
        /// </summary>
        public readonly string DisplayName;
        public readonly int DownloadGsmCertificateSigningRequestTrigger;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        public readonly int GenerateGsmCertificateSigningRequestTrigger;
        public readonly string GenerateWalletPassword;
        public readonly int GenerateWalletTrigger;
        public readonly int GetConnectionStringTrigger;
        /// <summary>
        /// Details of GSM instances for the sharded database.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardedDatabaseGsmResult> Gsms;
        /// <summary>
        /// Sharded Database identifier
        /// </summary>
        public readonly string Id;
        public readonly string LifecycleState;
        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        public readonly string LifecycleStateDetails;
        /// <summary>
        /// The GSM listener port number.
        /// </summary>
        public readonly int ListenerPort;
        /// <summary>
        /// The TLS listener port number for sharded database.
        /// </summary>
        public readonly int ListenerPortTls;
        /// <summary>
        /// Additional metadata related to shard's underlying supporting resource.
        /// </summary>
        public readonly string? Metadata;
        /// <summary>
        /// The national character set for the database.
        /// </summary>
        public readonly string NcharacterSet;
        /// <summary>
        /// Ons local port number.
        /// </summary>
        public readonly int OnsPortLocal;
        /// <summary>
        /// Ons remote port number.
        /// </summary>
        public readonly int OnsPortRemote;
        public readonly ImmutableArray<Outputs.GetShardedDatabasePatchOperationResult> PatchOperations;
        /// <summary>
        /// Unique prefix for the sharded database.
        /// </summary>
        public readonly string Prefix;
        /// <summary>
        /// The OCID of private endpoint being used by the sharded database.
        /// </summary>
        public readonly string PrivateEndpoint;
        /// <summary>
        /// The Replication factor for RAFT replication based sharded database. Currently supported values are 3, 5 and 7.
        /// </summary>
        public readonly int ReplicationFactor;
        /// <summary>
        /// The Replication method for sharded database. Use RAFT for Raft replication, and DG for DataGuard. If replicationMethod is not provided, it defaults to DG.
        /// </summary>
        public readonly string ReplicationMethod;
        /// <summary>
        /// For RAFT replication based sharded database, the value should be atleast twice the number of shards.
        /// </summary>
        public readonly int ReplicationUnit;
        /// <summary>
        /// Details of ATP-D based shards.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardedDatabaseShardDetailResult> ShardDetails;
        public readonly string ShardedDatabaseId;
        /// <summary>
        /// Sharding Method.
        /// </summary>
        public readonly string ShardingMethod;
        public readonly int StartDatabaseTrigger;
        /// <summary>
        /// Lifecycle states for sharded databases.
        /// </summary>
        public readonly string State;
        public readonly int StopDatabaseTrigger;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the the Sharded Database was created. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the Sharded Database was last updated. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// Timezone associated with the sharded database.
        /// </summary>
        public readonly string TimeZone;
        public readonly int UploadSignedCertificateAndGenerateWalletTrigger;
        public readonly int ValidateNetworkTrigger;

        [OutputConstructor]
        private GetShardedDatabaseResult(
            string caSignedCertificate,

            ImmutableArray<Outputs.GetShardedDatabaseCatalogDetailResult> catalogDetails,

            string characterSet,

            int chunks,

            string clusterCertificateCommonName,

            string compartmentId,

            int configureGsmsTrigger,

            bool configureGsmsTriggerIsLatestGsmImage,

            ImmutableArray<string> configureGsmsTriggerOldGsmNames,

            int configureShardingTrigger,

            ImmutableArray<Outputs.GetShardedDatabaseConnectionStringResult> connectionStrings,

            string dbDeploymentType,

            string dbVersion,

            string dbWorkload,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            int downloadGsmCertificateSigningRequestTrigger,

            ImmutableDictionary<string, string> freeformTags,

            int generateGsmCertificateSigningRequestTrigger,

            string generateWalletPassword,

            int generateWalletTrigger,

            int getConnectionStringTrigger,

            ImmutableArray<Outputs.GetShardedDatabaseGsmResult> gsms,

            string id,

            string lifecycleState,

            string lifecycleStateDetails,

            int listenerPort,

            int listenerPortTls,

            string? metadata,

            string ncharacterSet,

            int onsPortLocal,

            int onsPortRemote,

            ImmutableArray<Outputs.GetShardedDatabasePatchOperationResult> patchOperations,

            string prefix,

            string privateEndpoint,

            int replicationFactor,

            string replicationMethod,

            int replicationUnit,

            ImmutableArray<Outputs.GetShardedDatabaseShardDetailResult> shardDetails,

            string shardedDatabaseId,

            string shardingMethod,

            int startDatabaseTrigger,

            string state,

            int stopDatabaseTrigger,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            string timeZone,

            int uploadSignedCertificateAndGenerateWalletTrigger,

            int validateNetworkTrigger)
        {
            CaSignedCertificate = caSignedCertificate;
            CatalogDetails = catalogDetails;
            CharacterSet = characterSet;
            Chunks = chunks;
            ClusterCertificateCommonName = clusterCertificateCommonName;
            CompartmentId = compartmentId;
            ConfigureGsmsTrigger = configureGsmsTrigger;
            ConfigureGsmsTriggerIsLatestGsmImage = configureGsmsTriggerIsLatestGsmImage;
            ConfigureGsmsTriggerOldGsmNames = configureGsmsTriggerOldGsmNames;
            ConfigureShardingTrigger = configureShardingTrigger;
            ConnectionStrings = connectionStrings;
            DbDeploymentType = dbDeploymentType;
            DbVersion = dbVersion;
            DbWorkload = dbWorkload;
            DefinedTags = definedTags;
            DisplayName = displayName;
            DownloadGsmCertificateSigningRequestTrigger = downloadGsmCertificateSigningRequestTrigger;
            FreeformTags = freeformTags;
            GenerateGsmCertificateSigningRequestTrigger = generateGsmCertificateSigningRequestTrigger;
            GenerateWalletPassword = generateWalletPassword;
            GenerateWalletTrigger = generateWalletTrigger;
            GetConnectionStringTrigger = getConnectionStringTrigger;
            Gsms = gsms;
            Id = id;
            LifecycleState = lifecycleState;
            LifecycleStateDetails = lifecycleStateDetails;
            ListenerPort = listenerPort;
            ListenerPortTls = listenerPortTls;
            Metadata = metadata;
            NcharacterSet = ncharacterSet;
            OnsPortLocal = onsPortLocal;
            OnsPortRemote = onsPortRemote;
            PatchOperations = patchOperations;
            Prefix = prefix;
            PrivateEndpoint = privateEndpoint;
            ReplicationFactor = replicationFactor;
            ReplicationMethod = replicationMethod;
            ReplicationUnit = replicationUnit;
            ShardDetails = shardDetails;
            ShardedDatabaseId = shardedDatabaseId;
            ShardingMethod = shardingMethod;
            StartDatabaseTrigger = startDatabaseTrigger;
            State = state;
            StopDatabaseTrigger = stopDatabaseTrigger;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TimeZone = timeZone;
            UploadSignedCertificateAndGenerateWalletTrigger = uploadSignedCertificateAndGenerateWalletTrigger;
            ValidateNetworkTrigger = validateNetworkTrigger;
        }
    }
}
