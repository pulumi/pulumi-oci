// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GloballyDistributedDatabase
{
    public static class GetShardedDatabases
    {
        /// <summary>
        /// This data source provides the list of Sharded Databases in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// List of Sharded databases.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabases = Oci.GloballyDistributedDatabase.GetShardedDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = shardedDatabaseDisplayName,
        ///         State = shardedDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetShardedDatabasesResult> InvokeAsync(GetShardedDatabasesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetShardedDatabasesResult>("oci:GloballyDistributedDatabase/getShardedDatabases:getShardedDatabases", args ?? new GetShardedDatabasesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sharded Databases in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// List of Sharded databases.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabases = Oci.GloballyDistributedDatabase.GetShardedDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = shardedDatabaseDisplayName,
        ///         State = shardedDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetShardedDatabasesResult> Invoke(GetShardedDatabasesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetShardedDatabasesResult>("oci:GloballyDistributedDatabase/getShardedDatabases:getShardedDatabases", args ?? new GetShardedDatabasesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Sharded Databases in Oracle Cloud Infrastructure Globally Distributed Database service.
        /// 
        /// List of Sharded databases.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testShardedDatabases = Oci.GloballyDistributedDatabase.GetShardedDatabases.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = shardedDatabaseDisplayName,
        ///         State = shardedDatabaseState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetShardedDatabasesResult> Invoke(GetShardedDatabasesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetShardedDatabasesResult>("oci:GloballyDistributedDatabase/getShardedDatabases:getShardedDatabases", args ?? new GetShardedDatabasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShardedDatabasesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only sharded databases that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetShardedDatabasesFilterArgs>? _filters;
        public List<Inputs.GetShardedDatabasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetShardedDatabasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetShardedDatabasesArgs()
        {
        }
        public static new GetShardedDatabasesArgs Empty => new GetShardedDatabasesArgs();
    }

    public sealed class GetShardedDatabasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only sharded databases that match the entire name given. The match is not case sensitive.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetShardedDatabasesFilterInputArgs>? _filters;
        public InputList<Inputs.GetShardedDatabasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetShardedDatabasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetShardedDatabasesInvokeArgs()
        {
        }
        public static new GetShardedDatabasesInvokeArgs Empty => new GetShardedDatabasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetShardedDatabasesResult
    {
        /// <summary>
        /// Identifier of the compartment in which sharded database exists.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Oracle sharded database display name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetShardedDatabasesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of sharded_database_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardedDatabasesShardedDatabaseCollectionResult> ShardedDatabaseCollections;
        /// <summary>
        /// Lifecycle states for sharded databases.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetShardedDatabasesResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetShardedDatabasesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetShardedDatabasesShardedDatabaseCollectionResult> shardedDatabaseCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ShardedDatabaseCollections = shardedDatabaseCollections;
            State = state;
        }
    }
}
