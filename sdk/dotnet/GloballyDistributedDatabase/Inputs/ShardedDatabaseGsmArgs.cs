// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GloballyDistributedDatabase.Inputs
{

    public sealed class ShardedDatabaseGsmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compute amount available to the underlying autonomous database associated with shard.
        /// </summary>
        [Input("computeCount")]
        public Input<double>? ComputeCount { get; set; }

        /// <summary>
        /// The data disk group size to be allocated in GBs.
        /// </summary>
        [Input("dataStorageSizeInGbs")]
        public Input<double>? DataStorageSizeInGbs { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Additional metadata related to shard's underlying supporting resource.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// Name of the shard.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Status of shard or catalog or gsm for the sharded database.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifier of the underlying supporting resource.
        /// </summary>
        [Input("supportingResourceId")]
        public Input<string>? SupportingResourceId { get; set; }

        /// <summary>
        /// The time the the Sharded Database was created. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the ssl certificate associated with shard expires. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeSslCertificateExpires")]
        public Input<string>? TimeSslCertificateExpires { get; set; }

        /// <summary>
        /// The time the Sharded Database was last updated. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public ShardedDatabaseGsmArgs()
        {
        }
        public static new ShardedDatabaseGsmArgs Empty => new ShardedDatabaseGsmArgs();
    }
}
