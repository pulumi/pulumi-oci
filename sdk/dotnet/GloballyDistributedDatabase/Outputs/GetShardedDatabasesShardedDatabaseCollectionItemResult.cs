// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GloballyDistributedDatabase.Outputs
{

    [OutputType]
    public sealed class GetShardedDatabasesShardedDatabaseCollectionItemResult
    {
        /// <summary>
        /// The character set for the database.
        /// </summary>
        public readonly string CharacterSet;
        /// <summary>
        /// The default number of unique chunks in a shardspace. The value of chunks must be greater than 2 times the size of the largest shardgroup in any shardspace.
        /// </summary>
        public readonly int Chunks;
        /// <summary>
        /// The certificate common name used in all cloudAutonomousVmClusters for the sharded database topology. Eg. Production. All the clusters used in one sharded database topology shall have same CABundle setup. Valid characterset for clusterCertificateCommonName include uppercase or lowercase letters, numbers, hyphens, underscores, and period.
        /// </summary>
        public readonly string ClusterCertificateCommonName;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The database deployment type.
        /// </summary>
        public readonly string DbDeploymentType;
        /// <summary>
        /// Oracle Database version number.
        /// </summary>
        public readonly string DbVersion;
        /// <summary>
        /// Possible workload types.
        /// </summary>
        public readonly string DbWorkload;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A filter to return only sharded databases that match the entire name given. The match is not case sensitive.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Sharded Database identifier
        /// </summary>
        public readonly string Id;
        public readonly string LifecycleState;
        /// <summary>
        /// Detailed message for the lifecycle state.
        /// </summary>
        public readonly string LifecycleStateDetails;
        /// <summary>
        /// The GSM listener port number.
        /// </summary>
        public readonly int ListenerPort;
        /// <summary>
        /// The TLS listener port number for sharded database.
        /// </summary>
        public readonly int ListenerPortTls;
        /// <summary>
        /// The national character set for the database.
        /// </summary>
        public readonly string NcharacterSet;
        /// <summary>
        /// Ons local port number.
        /// </summary>
        public readonly int OnsPortLocal;
        /// <summary>
        /// Ons remote port number.
        /// </summary>
        public readonly int OnsPortRemote;
        /// <summary>
        /// Unique prefix for the sharded database.
        /// </summary>
        public readonly string Prefix;
        /// <summary>
        /// The Replication factor for RAFT replication based sharded database. Currently supported values are 3, 5 and 7.
        /// </summary>
        public readonly int ReplicationFactor;
        /// <summary>
        /// The Replication method for sharded database. Use RAFT for Raft replication, and DG for DataGuard. If replicationMethod is not provided, it defaults to DG.
        /// </summary>
        public readonly string ReplicationMethod;
        /// <summary>
        /// For RAFT replication based sharded database, the value should be atleast twice the number of shards.
        /// </summary>
        public readonly int ReplicationUnit;
        /// <summary>
        /// Sharding Method.
        /// </summary>
        public readonly string ShardingMethod;
        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the the Sharded Database was created. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the Sharded Database was last updated. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeUpdated;
        public readonly double TotalCpuCount;
        public readonly double TotalDataStorageSizeInGbs;

        [OutputConstructor]
        private GetShardedDatabasesShardedDatabaseCollectionItemResult(
            string characterSet,

            int chunks,

            string clusterCertificateCommonName,

            string compartmentId,

            string dbDeploymentType,

            string dbVersion,

            string dbWorkload,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string lifecycleState,

            string lifecycleStateDetails,

            int listenerPort,

            int listenerPortTls,

            string ncharacterSet,

            int onsPortLocal,

            int onsPortRemote,

            string prefix,

            int replicationFactor,

            string replicationMethod,

            int replicationUnit,

            string shardingMethod,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            double totalCpuCount,

            double totalDataStorageSizeInGbs)
        {
            CharacterSet = characterSet;
            Chunks = chunks;
            ClusterCertificateCommonName = clusterCertificateCommonName;
            CompartmentId = compartmentId;
            DbDeploymentType = dbDeploymentType;
            DbVersion = dbVersion;
            DbWorkload = dbWorkload;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleState = lifecycleState;
            LifecycleStateDetails = lifecycleStateDetails;
            ListenerPort = listenerPort;
            ListenerPortTls = listenerPortTls;
            NcharacterSet = ncharacterSet;
            OnsPortLocal = onsPortLocal;
            OnsPortRemote = onsPortRemote;
            Prefix = prefix;
            ReplicationFactor = replicationFactor;
            ReplicationMethod = replicationMethod;
            ReplicationUnit = replicationUnit;
            ShardingMethod = shardingMethod;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TotalCpuCount = totalCpuCount;
            TotalDataStorageSizeInGbs = totalDataStorageSizeInGbs;
        }
    }
}
