// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    /// <summary>
    /// This resource provides the Connection resource in Oracle Cloud Infrastructure Golden Gate service.
    /// 
    /// Creates a new Connection.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testConnection = new Oci.GoldenGate.Connection("testConnection", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         ConnectionType = @var.Connection_connection_type,
    ///         DisplayName = @var.Connection_display_name,
    ///         TechnologyType = @var.Connection_technology_type,
    ///         AccountKey = @var.Connection_account_key,
    ///         AccountName = @var.Connection_account_name,
    ///         AdditionalAttributes = new[]
    ///         {
    ///             new Oci.GoldenGate.Inputs.ConnectionAdditionalAttributeArgs
    ///             {
    ///                 Name = @var.Connection_additional_attributes_name,
    ///                 Value = @var.Connection_additional_attributes_value,
    ///             },
    ///         },
    ///         AuthenticationType = @var.Connection_authentication_type,
    ///         AzureTenantId = oci_golden_gate_azure_tenant.Test_azure_tenant.Id,
    ///         BootstrapServers = new[]
    ///         {
    ///             new Oci.GoldenGate.Inputs.ConnectionBootstrapServerArgs
    ///             {
    ///                 Host = @var.Connection_bootstrap_servers_host,
    ///                 Port = @var.Connection_bootstrap_servers_port,
    ///                 PrivateIp = @var.Connection_bootstrap_servers_private_ip,
    ///             },
    ///         },
    ///         ClientId = oci_golden_gate_client.Test_client.Id,
    ///         ClientSecret = @var.Connection_client_secret,
    ///         ConnectionString = @var.Connection_connection_string,
    ///         ConsumerProperties = @var.Connection_consumer_properties,
    ///         DatabaseId = oci_database_database.Test_database.Id,
    ///         DatabaseName = oci_database_database.Test_database.Name,
    ///         DbSystemId = oci_database_db_system.Test_db_system.Id,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         DeploymentId = oci_golden_gate_deployment.Test_deployment.Id,
    ///         Description = @var.Connection_description,
    ///         Endpoint = @var.Connection_endpoint,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         Host = @var.Connection_host,
    ///         KeyId = oci_kms_key.Test_key.Id,
    ///         KeyStore = @var.Connection_key_store,
    ///         KeyStorePassword = @var.Connection_key_store_password,
    ///         NsgIds = @var.Connection_nsg_ids,
    ///         Password = @var.Connection_password,
    ///         Port = @var.Connection_port,
    ///         PrivateIp = @var.Connection_private_ip,
    ///         PrivateKeyFile = @var.Connection_private_key_file,
    ///         PrivateKeyPassphrase = @var.Connection_private_key_passphrase,
    ///         ProducerProperties = @var.Connection_producer_properties,
    ///         PublicKeyFingerprint = @var.Connection_public_key_fingerprint,
    ///         Region = @var.Connection_region,
    ///         SasToken = @var.Connection_sas_token,
    ///         SecurityProtocol = @var.Connection_security_protocol,
    ///         SessionMode = @var.Connection_session_mode,
    ///         SslCa = @var.Connection_ssl_ca,
    ///         SslCert = @var.Connection_ssl_cert,
    ///         SslCrl = @var.Connection_ssl_crl,
    ///         SslKey = @var.Connection_ssl_key,
    ///         SslKeyPassword = @var.Connection_ssl_key_password,
    ///         SslMode = @var.Connection_ssl_mode,
    ///         StreamPoolId = oci_streaming_stream_pool.Test_stream_pool.Id,
    ///         SubnetId = oci_core_subnet.Test_subnet.Id,
    ///         TenancyId = oci_identity_tenancy.Test_tenancy.Id,
    ///         TrustStore = @var.Connection_trust_store,
    ///         TrustStorePassword = @var.Connection_trust_store_password,
    ///         Url = @var.Connection_url,
    ///         UserId = oci_identity_user.Test_user.Id,
    ///         Username = @var.Connection_username,
    ///         VaultId = oci_kms_vault.Test_vault.Id,
    ///         Wallet = @var.Connection_wallet,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Connections can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:GoldenGate/connection:Connection test_connection "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:GoldenGate/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Azure storage account key. This property is required when 'authenticationType' is set to 'SHARED_KEY'. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
        /// </summary>
        [Output("accountKey")]
        public Output<string> AccountKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Sets the Azure storage account name.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
        /// </summary>
        [Output("additionalAttributes")]
        public Output<ImmutableArray<Outputs.ConnectionAdditionalAttribute>> AdditionalAttributes { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Used authentication mechanism to access Azure Data Lake Storage.
        /// </summary>
        [Output("authenticationType")]
        public Output<string> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        /// </summary>
        [Output("azureTenantId")]
        public Output<string> AzureTenantId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        /// </summary>
        [Output("bootstrapServers")]
        public Output<ImmutableArray<Outputs.ConnectionBootstrapServer>> BootstrapServers { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Azure client secret (aka application password) for authentication. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) JDBC connection string. e.g.: 'jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        /// </summary>
        [Output("connectionString")]
        public Output<string> ConnectionString { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The connection type.
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the consumer.properties file.
        /// </summary>
        [Output("consumerProperties")]
        public Output<string> ConsumerProperties { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the database.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        /// </summary>
        [Output("dbSystemId")]
        public Output<string> DbSystemId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Metadata about this specific object.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An object's Display Name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name or address of a host.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// List of ingress IP addresses, from where the GoldenGate deployment connects to this connection's privateIp.
        /// </summary>
        [Output("ingressIps")]
        public Output<ImmutableArray<Outputs.ConnectionIngressIp>> IngressIps { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the KeyStore file.
        /// </summary>
        [Output("keyStore")]
        public Output<string> KeyStore { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The KeyStore password.
        /// </summary>
        [Output("keyStorePassword")]
        public Output<string> KeyStorePassword { get; private set; } = null!;

        /// <summary>
        /// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        /// </summary>
        [Output("nsgIds")]
        public Output<ImmutableArray<string>> NsgIds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The port of an endpoint usually specified for a connection.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        [Output("privateKeyFile")]
        public Output<string> PrivateKeyFile { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The passphrase of the private key.
        /// </summary>
        [Output("privateKeyPassphrase")]
        public Output<string> PrivateKeyPassphrase { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the producer.properties file.
        /// </summary>
        [Output("producerProperties")]
        public Output<string> ProducerProperties { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        [Output("publicKeyFingerprint")]
        public Output<string> PublicKeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the region. e.g.: us-ashburn-1
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when 'authenticationType' is set to 'SHARED_ACCESS_SIGNATURE'. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
        /// </summary>
        [Output("sasToken")]
        public Output<string> SasToken { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Security protocol for PostgreSQL.
        /// </summary>
        [Output("securityProtocol")]
        public Output<string> SecurityProtocol { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        /// </summary>
        [Output("sessionMode")]
        public Output<string> SessionMode { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Output("sslCa")]
        public Output<string> SslCa { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Output("sslCert")]
        public Output<string> SslCert { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Output("sslCrl")]
        public Output<string> SslCrl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Output("sslKey")]
        public Output<string> SslKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
        /// </summary>
        [Output("sslKeyPassword")]
        public Output<string> SslKeyPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) SSL modes for PostgreSQL.
        /// </summary>
        [Output("sslMode")]
        public Output<string> SslMode { get; private set; } = null!;

        /// <summary>
        /// Possible lifecycle states for connection.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        /// </summary>
        [Output("streamPoolId")]
        public Output<string> StreamPoolId { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The Kafka (e.g. Confluent) Schema Registry technology type.
        /// </summary>
        [Output("technologyType")]
        public Output<string> TechnologyType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        /// </summary>
        [Output("tenancyId")]
        public Output<string> TenancyId { get; private set; } = null!;

        /// <summary>
        /// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the TrustStore file.
        /// </summary>
        [Output("trustStore")]
        public Output<string> TrustStore { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The TrustStore password.
        /// </summary>
        [Output("trustStorePassword")]
        public Output<string> TrustStorePassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Object Storage. The user must have write access to the bucket they want to connect to.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
        /// </summary>
        [Output("wallet")]
        public Output<string> Wallet { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("oci:GoldenGate/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("oci:GoldenGate/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "keyStorePassword",
                    "password",
                    "privateKeyFile",
                    "privateKeyPassphrase",
                    "sslKeyPassword",
                    "trustStorePassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Azure storage account key. This property is required when 'authenticationType' is set to 'SHARED_KEY'. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
        /// </summary>
        [Input("accountKey")]
        public Input<string>? AccountKey { get; set; }

        /// <summary>
        /// (Updatable) Sets the Azure storage account name.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("additionalAttributes")]
        private InputList<Inputs.ConnectionAdditionalAttributeArgs>? _additionalAttributes;

        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalAttributeArgs> AdditionalAttributes
        {
            get => _additionalAttributes ?? (_additionalAttributes = new InputList<Inputs.ConnectionAdditionalAttributeArgs>());
            set => _additionalAttributes = value;
        }

        /// <summary>
        /// (Updatable) Used authentication mechanism to access Azure Data Lake Storage.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        /// <summary>
        /// (Updatable) Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        /// </summary>
        [Input("azureTenantId")]
        public Input<string>? AzureTenantId { get; set; }

        [Input("bootstrapServers")]
        private InputList<Inputs.ConnectionBootstrapServerArgs>? _bootstrapServers;

        /// <summary>
        /// (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        /// </summary>
        public InputList<Inputs.ConnectionBootstrapServerArgs> BootstrapServers
        {
            get => _bootstrapServers ?? (_bootstrapServers = new InputList<Inputs.ConnectionBootstrapServerArgs>());
            set => _bootstrapServers = value;
        }

        /// <summary>
        /// (Updatable) Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// (Updatable) Azure client secret (aka application password) for authentication. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) JDBC connection string. e.g.: 'jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        /// </summary>
        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        /// <summary>
        /// (Updatable) The connection type.
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The base64 encoded content of the consumer.properties file.
        /// </summary>
        [Input("consumerProperties")]
        public Input<string>? ConsumerProperties { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// (Updatable) The name of the database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        /// <summary>
        /// (Updatable) Metadata about this specific object.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) An object's Display Name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The name or address of a host.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the KeyStore file.
        /// </summary>
        [Input("keyStore")]
        public Input<string>? KeyStore { get; set; }

        [Input("keyStorePassword")]
        private Input<string>? _keyStorePassword;

        /// <summary>
        /// (Updatable) The KeyStore password.
        /// </summary>
        public Input<string>? KeyStorePassword
        {
            get => _keyStorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyStorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The port of an endpoint usually specified for a connection.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// (Updatable) The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("privateKeyFile")]
        private Input<string>? _privateKeyFile;

        /// <summary>
        /// (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        public Input<string>? PrivateKeyFile
        {
            get => _privateKeyFile;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyFile = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyPassphrase")]
        private Input<string>? _privateKeyPassphrase;

        /// <summary>
        /// (Updatable) The passphrase of the private key.
        /// </summary>
        public Input<string>? PrivateKeyPassphrase
        {
            get => _privateKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The base64 encoded content of the producer.properties file.
        /// </summary>
        [Input("producerProperties")]
        public Input<string>? ProducerProperties { get; set; }

        /// <summary>
        /// (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        [Input("publicKeyFingerprint")]
        public Input<string>? PublicKeyFingerprint { get; set; }

        /// <summary>
        /// (Updatable) The name of the region. e.g.: us-ashburn-1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when 'authenticationType' is set to 'SHARED_ACCESS_SIGNATURE'. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
        /// </summary>
        [Input("sasToken")]
        public Input<string>? SasToken { get; set; }

        /// <summary>
        /// (Updatable) Security protocol for PostgreSQL.
        /// </summary>
        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        /// <summary>
        /// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        /// </summary>
        [Input("sessionMode")]
        public Input<string>? SessionMode { get; set; }

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Input("sslCa")]
        public Input<string>? SslCa { get; set; }

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Input("sslCert")]
        public Input<string>? SslCert { get; set; }

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Input("sslCrl")]
        public Input<string>? SslCrl { get; set; }

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Input("sslKey")]
        public Input<string>? SslKey { get; set; }

        [Input("sslKeyPassword")]
        private Input<string>? _sslKeyPassword;

        /// <summary>
        /// (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
        /// </summary>
        public Input<string>? SslKeyPassword
        {
            get => _sslKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sslKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) SSL modes for PostgreSQL.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        /// </summary>
        [Input("streamPoolId")]
        public Input<string>? StreamPoolId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The Kafka (e.g. Confluent) Schema Registry technology type.
        /// </summary>
        [Input("technologyType", required: true)]
        public Input<string> TechnologyType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        /// </summary>
        [Input("tenancyId")]
        public Input<string>? TenancyId { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the TrustStore file.
        /// </summary>
        [Input("trustStore")]
        public Input<string>? TrustStore { get; set; }

        [Input("trustStorePassword")]
        private Input<string>? _trustStorePassword;

        /// <summary>
        /// (Updatable) The TrustStore password.
        /// </summary>
        public Input<string>? TrustStorePassword
        {
            get => _trustStorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustStorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Object Storage. The user must have write access to the bucket they want to connect to.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        /// <summary>
        /// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
        /// </summary>
        [Input("wallet")]
        public Input<string>? Wallet { get; set; }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Azure storage account key. This property is required when 'authenticationType' is set to 'SHARED_KEY'. e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
        /// </summary>
        [Input("accountKey")]
        public Input<string>? AccountKey { get; set; }

        /// <summary>
        /// (Updatable) Sets the Azure storage account name.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("additionalAttributes")]
        private InputList<Inputs.ConnectionAdditionalAttributeGetArgs>? _additionalAttributes;

        /// <summary>
        /// (Updatable) An array of name-value pair attribute entries. Used as additional parameters in connection string.
        /// </summary>
        public InputList<Inputs.ConnectionAdditionalAttributeGetArgs> AdditionalAttributes
        {
            get => _additionalAttributes ?? (_additionalAttributes = new InputList<Inputs.ConnectionAdditionalAttributeGetArgs>());
            set => _additionalAttributes = value;
        }

        /// <summary>
        /// (Updatable) Used authentication mechanism to access Azure Data Lake Storage.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        /// <summary>
        /// (Updatable) Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 14593954-d337-4a61-a364-9f758c64f97f
        /// </summary>
        [Input("azureTenantId")]
        public Input<string>? AzureTenantId { get; set; }

        [Input("bootstrapServers")]
        private InputList<Inputs.ConnectionBootstrapServerGetArgs>? _bootstrapServers;

        /// <summary>
        /// (Updatable) Kafka bootstrap. Equivalent of bootstrap.servers configuration property in Kafka: list of KafkaBootstrapServer objects specified by host/port. Used for establishing the initial connection to the Kafka cluster. Example: `"server1.example.com:9092,server2.example.com:9092"`
        /// </summary>
        public InputList<Inputs.ConnectionBootstrapServerGetArgs> BootstrapServers
        {
            get => _bootstrapServers ?? (_bootstrapServers = new InputList<Inputs.ConnectionBootstrapServerGetArgs>());
            set => _bootstrapServers = value;
        }

        /// <summary>
        /// (Updatable) Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// (Updatable) Azure client secret (aka application password) for authentication. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'. e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) JDBC connection string. e.g.: 'jdbc:sqlserver://&lt;synapse-workspace&gt;.sql.azuresynapse.net:1433;database=&lt;db-name&gt;;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=300;'
        /// </summary>
        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        /// <summary>
        /// (Updatable) The connection type.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the consumer.properties file.
        /// </summary>
        [Input("consumerProperties")]
        public Input<string>? ConsumerProperties { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// (Updatable) The name of the database.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database system being referenced.
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        /// <summary>
        /// (Updatable) Metadata about this specific object.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) An object's Display Name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Updatable) Azure Storage service endpoint. e.g: https://test.blob.core.windows.net
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The name or address of a host.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("ingressIps")]
        private InputList<Inputs.ConnectionIngressIpGetArgs>? _ingressIps;

        /// <summary>
        /// List of ingress IP addresses, from where the GoldenGate deployment connects to this connection's privateIp.
        /// </summary>
        public InputList<Inputs.ConnectionIngressIpGetArgs> IngressIps
        {
            get => _ingressIps ?? (_ingressIps = new InputList<Inputs.ConnectionIngressIpGetArgs>());
            set => _ingressIps = value;
        }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the KeyStore file.
        /// </summary>
        [Input("keyStore")]
        public Input<string>? KeyStore { get; set; }

        [Input("keyStorePassword")]
        private Input<string>? _keyStorePassword;

        /// <summary>
        /// (Updatable) The KeyStore password.
        /// </summary>
        public Input<string>? KeyStorePassword
        {
            get => _keyStorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyStorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        [Input("nsgIds")]
        private InputList<string>? _nsgIds;

        /// <summary>
        /// (Updatable) An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
        /// </summary>
        public InputList<string> NsgIds
        {
            get => _nsgIds ?? (_nsgIds = new InputList<string>());
            set => _nsgIds = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The port of an endpoint usually specified for a connection.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// (Updatable) The private IP address of the connection's endpoint in the customer's VCN, typically a database endpoint or a big data endpoint (e.g. Kafka bootstrap server). In case the privateIp is provided, the subnetId must also be provided. In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible. In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        [Input("privateKeyFile")]
        private Input<string>? _privateKeyFile;

        /// <summary>
        /// (Updatable) The base64 encoded content of the private key file (PEM file) corresponding to the API key of the fingerprint. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        public Input<string>? PrivateKeyFile
        {
            get => _privateKeyFile;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyFile = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyPassphrase")]
        private Input<string>? _privateKeyPassphrase;

        /// <summary>
        /// (Updatable) The passphrase of the private key.
        /// </summary>
        public Input<string>? PrivateKeyPassphrase
        {
            get => _privateKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The base64 encoded content of the producer.properties file.
        /// </summary>
        [Input("producerProperties")]
        public Input<string>? ProducerProperties { get; set; }

        /// <summary>
        /// (Updatable) The fingerprint of the API Key of the user specified by the userId. See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
        /// </summary>
        [Input("publicKeyFingerprint")]
        public Input<string>? PublicKeyFingerprint { get; set; }

        /// <summary>
        /// (Updatable) The name of the region. e.g.: us-ashburn-1
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// (Updatable) Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is required when 'authenticationType' is set to 'SHARED_ACCESS_SIGNATURE'. e.g.: ?sv=2020-06-08&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupyx&amp;se=2020-09-10T20:27:28Z&amp;st=2022-08-05T12:27:28Z&amp;spr=https&amp;sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
        /// </summary>
        [Input("sasToken")]
        public Input<string>? SasToken { get; set; }

        /// <summary>
        /// (Updatable) Security protocol for PostgreSQL.
        /// </summary>
        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        /// <summary>
        /// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        /// </summary>
        [Input("sessionMode")]
        public Input<string>? SessionMode { get; set; }

        /// <summary>
        /// (Updatable) Database Certificate - The base64 encoded content of mysql.pem file containing the server public key (for 1 and 2-way SSL).
        /// </summary>
        [Input("sslCa")]
        public Input<string>? SslCa { get; set; }

        /// <summary>
        /// (Updatable) Client Certificate - The base64 encoded content of client-cert.pem file  containing the client public key (for 2-way SSL).
        /// </summary>
        [Input("sslCert")]
        public Input<string>? SslCert { get; set; }

        /// <summary>
        /// (Updatable) Certificates revoked by certificate authorities (CA). Server certificate must not be on this list (for 1 and 2-way SSL). Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
        /// </summary>
        [Input("sslCrl")]
        public Input<string>? SslCrl { get; set; }

        /// <summary>
        /// (Updatable) Client Key - The client-key.pem containing the client private key (for 2-way SSL).
        /// </summary>
        [Input("sslKey")]
        public Input<string>? SslKey { get; set; }

        [Input("sslKeyPassword")]
        private Input<string>? _sslKeyPassword;

        /// <summary>
        /// (Updatable) The password for the cert inside of the KeyStore. In case it differs from the KeyStore password, it should be provided.
        /// </summary>
        public Input<string>? SslKeyPassword
        {
            get => _sslKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sslKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) SSL modes for PostgreSQL.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// Possible lifecycle states for connection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream pool being referenced.
        /// </summary>
        [Input("streamPoolId")]
        public Input<string>? StreamPoolId { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The Kafka (e.g. Confluent) Schema Registry technology type.
        /// </summary>
        [Input("technologyType")]
        public Input<string>? TechnologyType { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Oracle Cloud Infrastructure tenancy.
        /// </summary>
        [Input("tenancyId")]
        public Input<string>? TenancyId { get; set; }

        /// <summary>
        /// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the TrustStore file.
        /// </summary>
        [Input("trustStore")]
        public Input<string>? TrustStore { get; set; }

        [Input("trustStorePassword")]
        private Input<string>? _trustStorePassword;

        /// <summary>
        /// (Updatable) The TrustStore password.
        /// </summary>
        public Input<string>? TrustStorePassword
        {
            get => _trustStorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustStorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) Kafka Schema Registry URL. e.g.: 'https://server1.us.oracle.com:8081'
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure user who will access the Object Storage. The user must have write access to the bucket they want to connect to.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        /// <summary>
        /// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
        /// </summary>
        [Input("wallet")]
        public Input<string>? Wallet { get; set; }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
