// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    /// <summary>
    /// This resource provides the Deployment Certificate resource in Oracle Cloud Infrastructure Golden Gate service.
    /// 
    /// Creates a new certificate to truststore.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDeploymentCertificate = new Oci.GoldenGate.DeploymentCertificate("test_deployment_certificate", new()
    ///     {
    ///         CertificateContent = deploymentCertificateCertificateContent,
    ///         DeploymentId = testDeployment.Id,
    ///         Key = deploymentCertificateKey,
    ///         IsLockOverride = deploymentCertificateIsLockOverride,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DeploymentCertificates can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:GoldenGate/deploymentCertificate:DeploymentCertificate test_deployment_certificate "deployments/{deploymentId}/certificates/{certificateKey}"
    /// ```
    /// </summary>
    [OciResourceType("oci:GoldenGate/deploymentCertificate:DeploymentCertificate")]
    public partial class DeploymentCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Certificate authority key id.
        /// </summary>
        [Output("authorityKeyId")]
        public Output<string> AuthorityKeyId { get; private set; } = null!;

        /// <summary>
        /// The base64 encoded content of the PEM file containing the SSL certificate.
        /// </summary>
        [Output("certificateContent")]
        public Output<string> CertificateContent { get; private set; } = null!;

        /// <summary>
        /// A unique Deployment identifier.
        /// </summary>
        [Output("deploymentId")]
        public Output<string> DeploymentId { get; private set; } = null!;

        /// <summary>
        /// Indicates if the certificate is ca.
        /// </summary>
        [Output("isCa")]
        public Output<bool> IsCa { get; private set; } = null!;

        /// <summary>
        /// Whether to override locks (if any exist).
        /// </summary>
        [Output("isLockOverride")]
        public Output<bool> IsLockOverride { get; private set; } = null!;

        /// <summary>
        /// Indicates if the certificate is self signed.
        /// </summary>
        [Output("isSelfSigned")]
        public Output<bool> IsSelfSigned { get; private set; } = null!;

        /// <summary>
        /// The Certificate issuer.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The Certificate md5Hash.
        /// </summary>
        [Output("md5hash")]
        public Output<string> Md5hash { get; private set; } = null!;

        /// <summary>
        /// The Certificate public key.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// The Certificate public key algorithm.
        /// </summary>
        [Output("publicKeyAlgorithm")]
        public Output<string> PublicKeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The Certificate public key size.
        /// </summary>
        [Output("publicKeySize")]
        public Output<string> PublicKeySize { get; private set; } = null!;

        /// <summary>
        /// The Certificate serial.
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// The Certificate sha1 hash.
        /// </summary>
        [Output("sha1hash")]
        public Output<string> Sha1hash { get; private set; } = null!;

        /// <summary>
        /// Possible certificate lifecycle states.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The Certificate subject.
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// The Certificate subject key id.
        /// </summary>
        [Output("subjectKeyId")]
        public Output<string> SubjectKeyId { get; private set; } = null!;

        /// <summary>
        /// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeValidFrom")]
        public Output<string> TimeValidFrom { get; private set; } = null!;

        /// <summary>
        /// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Output("timeValidTo")]
        public Output<string> TimeValidTo { get; private set; } = null!;

        /// <summary>
        /// The Certificate version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DeploymentCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeploymentCertificate(string name, DeploymentCertificateArgs args, CustomResourceOptions? options = null)
            : base("oci:GoldenGate/deploymentCertificate:DeploymentCertificate", name, args ?? new DeploymentCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeploymentCertificate(string name, Input<string> id, DeploymentCertificateState? state = null, CustomResourceOptions? options = null)
            : base("oci:GoldenGate/deploymentCertificate:DeploymentCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeploymentCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeploymentCertificate Get(string name, Input<string> id, DeploymentCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new DeploymentCertificate(name, id, state, options);
        }
    }

    public sealed class DeploymentCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The base64 encoded content of the PEM file containing the SSL certificate.
        /// </summary>
        [Input("certificateContent", required: true)]
        public Input<string> CertificateContent { get; set; } = null!;

        /// <summary>
        /// A unique Deployment identifier.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        /// <summary>
        /// Whether to override locks (if any exist).
        /// </summary>
        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        /// <summary>
        /// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public DeploymentCertificateArgs()
        {
        }
        public static new DeploymentCertificateArgs Empty => new DeploymentCertificateArgs();
    }

    public sealed class DeploymentCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Certificate authority key id.
        /// </summary>
        [Input("authorityKeyId")]
        public Input<string>? AuthorityKeyId { get; set; }

        /// <summary>
        /// The base64 encoded content of the PEM file containing the SSL certificate.
        /// </summary>
        [Input("certificateContent")]
        public Input<string>? CertificateContent { get; set; }

        /// <summary>
        /// A unique Deployment identifier.
        /// </summary>
        [Input("deploymentId")]
        public Input<string>? DeploymentId { get; set; }

        /// <summary>
        /// Indicates if the certificate is ca.
        /// </summary>
        [Input("isCa")]
        public Input<bool>? IsCa { get; set; }

        /// <summary>
        /// Whether to override locks (if any exist).
        /// </summary>
        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        /// <summary>
        /// Indicates if the certificate is self signed.
        /// </summary>
        [Input("isSelfSigned")]
        public Input<bool>? IsSelfSigned { get; set; }

        /// <summary>
        /// The Certificate issuer.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The Certificate md5Hash.
        /// </summary>
        [Input("md5hash")]
        public Input<string>? Md5hash { get; set; }

        /// <summary>
        /// The Certificate public key.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The Certificate public key algorithm.
        /// </summary>
        [Input("publicKeyAlgorithm")]
        public Input<string>? PublicKeyAlgorithm { get; set; }

        /// <summary>
        /// The Certificate public key size.
        /// </summary>
        [Input("publicKeySize")]
        public Input<string>? PublicKeySize { get; set; }

        /// <summary>
        /// The Certificate serial.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// The Certificate sha1 hash.
        /// </summary>
        [Input("sha1hash")]
        public Input<string>? Sha1hash { get; set; }

        /// <summary>
        /// Possible certificate lifecycle states.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The Certificate subject.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The Certificate subject key id.
        /// </summary>
        [Input("subjectKeyId")]
        public Input<string>? SubjectKeyId { get; set; }

        /// <summary>
        /// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeValidFrom")]
        public Input<string>? TimeValidFrom { get; set; }

        /// <summary>
        /// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        [Input("timeValidTo")]
        public Input<string>? TimeValidTo { get; set; }

        /// <summary>
        /// The Certificate version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public DeploymentCertificateState()
        {
        }
        public static new DeploymentCertificateState Empty => new DeploymentCertificateState();
    }
}
