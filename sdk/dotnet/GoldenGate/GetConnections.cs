// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetConnections
    {
        /// <summary>
        /// This data source provides the list of Connections in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Connections in the compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnections = Oci.GoldenGate.GetConnections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AssignableDeploymentId = testDeployment.Id,
        ///         AssignableDeploymentType = connectionAssignableDeploymentType,
        ///         AssignedDeploymentId = testDeployment.Id,
        ///         ConnectionTypes = connectionConnectionType,
        ///         DisplayName = connectionDisplayName,
        ///         State = connectionState,
        ///         TechnologyTypes = connectionTechnologyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionsResult> InvokeAsync(GetConnectionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionsResult>("oci:GoldenGate/getConnections:getConnections", args ?? new GetConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Connections in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Connections in the compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConnections = Oci.GoldenGate.GetConnections.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AssignableDeploymentId = testDeployment.Id,
        ///         AssignableDeploymentType = connectionAssignableDeploymentType,
        ///         AssignedDeploymentId = testDeployment.Id,
        ///         ConnectionTypes = connectionConnectionType,
        ///         DisplayName = connectionDisplayName,
        ///         State = connectionState,
        ///         TechnologyTypes = connectionTechnologyType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionsResult> Invoke(GetConnectionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionsResult>("oci:GoldenGate/getConnections:getConnections", args ?? new GetConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for compatible connections which can be, but currently not assigned to the deployment specified by its id.
        /// </summary>
        [Input("assignableDeploymentId")]
        public string? AssignableDeploymentId { get; set; }

        /// <summary>
        /// Filters for connections which can be assigned to the latest version of the specified deployment type.
        /// </summary>
        [Input("assignableDeploymentType")]
        public string? AssignableDeploymentType { get; set; }

        /// <summary>
        /// The OCID of the deployment which for the connection must be assigned.
        /// </summary>
        [Input("assignedDeploymentId")]
        public string? AssignedDeploymentId { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("connectionTypes")]
        private List<string>? _connectionTypes;

        /// <summary>
        /// The array of connection types.
        /// </summary>
        public List<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new List<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetConnectionsFilterArgs>? _filters;
        public List<Inputs.GetConnectionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetConnectionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only connections having the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("technologyTypes")]
        private List<string>? _technologyTypes;

        /// <summary>
        /// The array of technology types.
        /// </summary>
        public List<string> TechnologyTypes
        {
            get => _technologyTypes ?? (_technologyTypes = new List<string>());
            set => _technologyTypes = value;
        }

        public GetConnectionsArgs()
        {
        }
        public static new GetConnectionsArgs Empty => new GetConnectionsArgs();
    }

    public sealed class GetConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters for compatible connections which can be, but currently not assigned to the deployment specified by its id.
        /// </summary>
        [Input("assignableDeploymentId")]
        public Input<string>? AssignableDeploymentId { get; set; }

        /// <summary>
        /// Filters for connections which can be assigned to the latest version of the specified deployment type.
        /// </summary>
        [Input("assignableDeploymentType")]
        public Input<string>? AssignableDeploymentType { get; set; }

        /// <summary>
        /// The OCID of the deployment which for the connection must be assigned.
        /// </summary>
        [Input("assignedDeploymentId")]
        public Input<string>? AssignedDeploymentId { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("connectionTypes")]
        private InputList<string>? _connectionTypes;

        /// <summary>
        /// The array of connection types.
        /// </summary>
        public InputList<string> ConnectionTypes
        {
            get => _connectionTypes ?? (_connectionTypes = new InputList<string>());
            set => _connectionTypes = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetConnectionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetConnectionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetConnectionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only connections having the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("technologyTypes")]
        private InputList<string>? _technologyTypes;

        /// <summary>
        /// The array of technology types.
        /// </summary>
        public InputList<string> TechnologyTypes
        {
            get => _technologyTypes ?? (_technologyTypes = new InputList<string>());
            set => _technologyTypes = value;
        }

        public GetConnectionsInvokeArgs()
        {
        }
        public static new GetConnectionsInvokeArgs Empty => new GetConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionsResult
    {
        public readonly string? AssignableDeploymentId;
        public readonly string? AssignableDeploymentType;
        public readonly string? AssignedDeploymentId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of connection_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionsConnectionCollectionResult> ConnectionCollections;
        /// <summary>
        /// The connection type.
        /// </summary>
        public readonly ImmutableArray<string> ConnectionTypes;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetConnectionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Possible lifecycle states for connection.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The technology type.
        /// </summary>
        public readonly ImmutableArray<string> TechnologyTypes;

        [OutputConstructor]
        private GetConnectionsResult(
            string? assignableDeploymentId,

            string? assignableDeploymentType,

            string? assignedDeploymentId,

            string compartmentId,

            ImmutableArray<Outputs.GetConnectionsConnectionCollectionResult> connectionCollections,

            ImmutableArray<string> connectionTypes,

            string? displayName,

            ImmutableArray<Outputs.GetConnectionsFilterResult> filters,

            string id,

            string? state,

            ImmutableArray<string> technologyTypes)
        {
            AssignableDeploymentId = assignableDeploymentId;
            AssignableDeploymentType = assignableDeploymentType;
            AssignedDeploymentId = assignedDeploymentId;
            CompartmentId = compartmentId;
            ConnectionCollections = connectionCollections;
            ConnectionTypes = connectionTypes;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            TechnologyTypes = technologyTypes;
        }
    }
}
