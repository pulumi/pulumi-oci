// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetDatabaseRegistration
    {
        /// <summary>
        /// This data source provides details about a specific Database Registration resource in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Note: Deprecated. Use the /connections API instead.
        /// Retrieves a DatabaseRegistration.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseRegistration = Oci.GoldenGate.GetDatabaseRegistration.Invoke(new()
        ///     {
        ///         DatabaseRegistrationId = oci_golden_gate_database_registration.Test_database_registration.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseRegistrationResult> InvokeAsync(GetDatabaseRegistrationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseRegistrationResult>("oci:GoldenGate/getDatabaseRegistration:getDatabaseRegistration", args ?? new GetDatabaseRegistrationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Database Registration resource in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Note: Deprecated. Use the /connections API instead.
        /// Retrieves a DatabaseRegistration.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDatabaseRegistration = Oci.GoldenGate.GetDatabaseRegistration.Invoke(new()
        ///     {
        ///         DatabaseRegistrationId = oci_golden_gate_database_registration.Test_database_registration.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseRegistrationResult> Invoke(GetDatabaseRegistrationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseRegistrationResult>("oci:GoldenGate/getDatabaseRegistration:getDatabaseRegistration", args ?? new GetDatabaseRegistrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseRegistrationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique DatabaseRegistration identifier.
        /// </summary>
        [Input("databaseRegistrationId", required: true)]
        public string DatabaseRegistrationId { get; set; } = null!;

        public GetDatabaseRegistrationArgs()
        {
        }
        public static new GetDatabaseRegistrationArgs Empty => new GetDatabaseRegistrationArgs();
    }

    public sealed class GetDatabaseRegistrationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique DatabaseRegistration identifier.
        /// </summary>
        [Input("databaseRegistrationId", required: true)]
        public Input<string> DatabaseRegistrationId { get; set; } = null!;

        public GetDatabaseRegistrationInvokeArgs()
        {
        }
        public static new GetDatabaseRegistrationInvokeArgs Empty => new GetDatabaseRegistrationInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseRegistrationResult
    {
        /// <summary>
        /// Credential store alias.
        /// </summary>
        public readonly string AliasName;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Connect descriptor or Easy Connect Naming method used to connect to a database.
        /// </summary>
        public readonly string ConnectionString;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
        /// </summary>
        public readonly string DatabaseId;
        public readonly string DatabaseRegistrationId;
        /// <summary>
        /// Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Metadata about this specific object.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// A three-label Fully Qualified Domain Name (FQDN) for a resource.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the databaseRegistration being referenced.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        public readonly string Password;
        /// <summary>
        /// A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
        /// </summary>
        public readonly string RcePrivateIp;
        /// <summary>
        /// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
        /// </summary>
        public readonly string SecretCompartmentId;
        /// <summary>
        /// The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
        /// </summary>
        public readonly string SecretId;
        /// <summary>
        /// The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
        /// </summary>
        public readonly string SessionMode;
        /// <summary>
        /// Possible lifecycle states.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
        /// </summary>
        public readonly string VaultId;
        public readonly string Wallet;

        [OutputConstructor]
        private GetDatabaseRegistrationResult(
            string aliasName,

            string compartmentId,

            string connectionString,

            string databaseId,

            string databaseRegistrationId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            string fqdn,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string ipAddress,

            string keyId,

            string lifecycleDetails,

            string password,

            string rcePrivateIp,

            string secretCompartmentId,

            string secretId,

            string sessionMode,

            string state,

            string subnetId,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            string username,

            string vaultId,

            string wallet)
        {
            AliasName = aliasName;
            CompartmentId = compartmentId;
            ConnectionString = connectionString;
            DatabaseId = databaseId;
            DatabaseRegistrationId = databaseRegistrationId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            Fqdn = fqdn;
            FreeformTags = freeformTags;
            Id = id;
            IpAddress = ipAddress;
            KeyId = keyId;
            LifecycleDetails = lifecycleDetails;
            Password = password;
            RcePrivateIp = rcePrivateIp;
            SecretCompartmentId = secretCompartmentId;
            SecretId = secretId;
            SessionMode = sessionMode;
            State = state;
            SubnetId = subnetId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Username = username;
            VaultId = vaultId;
            Wallet = wallet;
        }
    }
}
