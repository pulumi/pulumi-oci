// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetDeploymentCertificates
    {
        /// <summary>
        /// This data source provides the list of Deployment Certificates in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Returns a list of certificates from truststore.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeploymentCertificates = Oci.GoldenGate.GetDeploymentCertificates.Invoke(new()
        ///     {
        ///         DeploymentId = testDeployment.Id,
        ///         State = deploymentCertificateState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDeploymentCertificatesResult> InvokeAsync(GetDeploymentCertificatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentCertificatesResult>("oci:GoldenGate/getDeploymentCertificates:getDeploymentCertificates", args ?? new GetDeploymentCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Deployment Certificates in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Returns a list of certificates from truststore.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeploymentCertificates = Oci.GoldenGate.GetDeploymentCertificates.Invoke(new()
        ///     {
        ///         DeploymentId = testDeployment.Id,
        ///         State = deploymentCertificateState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDeploymentCertificatesResult> Invoke(GetDeploymentCertificatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentCertificatesResult>("oci:GoldenGate/getDeploymentCertificates:getDeploymentCertificates", args ?? new GetDeploymentCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentCertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique Deployment identifier.
        /// </summary>
        [Input("deploymentId", required: true)]
        public string DeploymentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDeploymentCertificatesFilterArgs>? _filters;
        public List<Inputs.GetDeploymentCertificatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDeploymentCertificatesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only connections having the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDeploymentCertificatesArgs()
        {
        }
        public static new GetDeploymentCertificatesArgs Empty => new GetDeploymentCertificatesArgs();
    }

    public sealed class GetDeploymentCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique Deployment identifier.
        /// </summary>
        [Input("deploymentId", required: true)]
        public Input<string> DeploymentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDeploymentCertificatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetDeploymentCertificatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDeploymentCertificatesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only connections having the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetDeploymentCertificatesInvokeArgs()
        {
        }
        public static new GetDeploymentCertificatesInvokeArgs Empty => new GetDeploymentCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentCertificatesResult
    {
        /// <summary>
        /// The list of certificate_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentCertificatesCertificateCollectionResult> CertificateCollections;
        public readonly string DeploymentId;
        public readonly ImmutableArray<Outputs.GetDeploymentCertificatesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Possible certificate lifecycle states.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDeploymentCertificatesResult(
            ImmutableArray<Outputs.GetDeploymentCertificatesCertificateCollectionResult> certificateCollections,

            string deploymentId,

            ImmutableArray<Outputs.GetDeploymentCertificatesFilterResult> filters,

            string id,

            string? state)
        {
            CertificateCollections = certificateCollections;
            DeploymentId = deploymentId;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
