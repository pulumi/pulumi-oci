// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetDeployments
    {
        /// <summary>
        /// This data source provides the list of Deployments in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Deployments in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployments = Oci.GoldenGate.GetDeployments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AssignableConnectionId = testConnection.Id,
        ///         AssignedConnectionId = testConnection.Id,
        ///         DeploymentType = deploymentDeploymentType,
        ///         DisplayName = deploymentDisplayName,
        ///         Fqdn = deploymentFqdn,
        ///         LifecycleSubState = deploymentLifecycleSubState,
        ///         State = deploymentState,
        ///         SupportedConnectionType = deploymentSupportedConnectionType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeploymentsResult> InvokeAsync(GetDeploymentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentsResult>("oci:GoldenGate/getDeployments:getDeployments", args ?? new GetDeploymentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Deployments in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Deployments in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployments = Oci.GoldenGate.GetDeployments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AssignableConnectionId = testConnection.Id,
        ///         AssignedConnectionId = testConnection.Id,
        ///         DeploymentType = deploymentDeploymentType,
        ///         DisplayName = deploymentDisplayName,
        ///         Fqdn = deploymentFqdn,
        ///         LifecycleSubState = deploymentLifecycleSubState,
        ///         State = deploymentState,
        ///         SupportedConnectionType = deploymentSupportedConnectionType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeploymentsResult> Invoke(GetDeploymentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentsResult>("oci:GoldenGate/getDeployments:getDeployments", args ?? new GetDeploymentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Deployments in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Deployments in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDeployments = Oci.GoldenGate.GetDeployments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AssignableConnectionId = testConnection.Id,
        ///         AssignedConnectionId = testConnection.Id,
        ///         DeploymentType = deploymentDeploymentType,
        ///         DisplayName = deploymentDisplayName,
        ///         Fqdn = deploymentFqdn,
        ///         LifecycleSubState = deploymentLifecycleSubState,
        ///         State = deploymentState,
        ///         SupportedConnectionType = deploymentSupportedConnectionType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeploymentsResult> Invoke(GetDeploymentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentsResult>("oci:GoldenGate/getDeployments:getDeployments", args ?? new GetDeploymentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Return the deployments to which the specified connectionId may be assigned.
        /// </summary>
        [Input("assignableConnectionId")]
        public string? AssignableConnectionId { get; set; }

        /// <summary>
        /// The OCID of the connection which for the deployment must be assigned.
        /// </summary>
        [Input("assignedConnectionId")]
        public string? AssignedConnectionId { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter that returns only the resources matching the specified 'deploymentType'.
        /// </summary>
        [Input("deploymentType")]
        public string? DeploymentType { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDeploymentsFilterArgs>? _filters;
        public List<Inputs.GetDeploymentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDeploymentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the 'fqdn' given.
        /// </summary>
        [Input("fqdn")]
        public string? Fqdn { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the 'lifecycleSubState' given.
        /// </summary>
        [Input("lifecycleSubState")]
        public string? LifecycleSubState { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The connection type which the deployment must support.
        /// </summary>
        [Input("supportedConnectionType")]
        public string? SupportedConnectionType { get; set; }

        public GetDeploymentsArgs()
        {
        }
        public static new GetDeploymentsArgs Empty => new GetDeploymentsArgs();
    }

    public sealed class GetDeploymentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Return the deployments to which the specified connectionId may be assigned.
        /// </summary>
        [Input("assignableConnectionId")]
        public Input<string>? AssignableConnectionId { get; set; }

        /// <summary>
        /// The OCID of the connection which for the deployment must be assigned.
        /// </summary>
        [Input("assignedConnectionId")]
        public Input<string>? AssignedConnectionId { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter that returns only the resources matching the specified 'deploymentType'.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDeploymentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDeploymentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDeploymentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources that match the 'fqdn' given.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the 'lifecycleSubState' given.
        /// </summary>
        [Input("lifecycleSubState")]
        public Input<string>? LifecycleSubState { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the 'lifecycleState' given.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The connection type which the deployment must support.
        /// </summary>
        [Input("supportedConnectionType")]
        public Input<string>? SupportedConnectionType { get; set; }

        public GetDeploymentsInvokeArgs()
        {
        }
        public static new GetDeploymentsInvokeArgs Empty => new GetDeploymentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentsResult
    {
        public readonly string? AssignableConnectionId;
        public readonly string? AssignedConnectionId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of deployment_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentsDeploymentCollectionResult> DeploymentCollections;
        /// <summary>
        /// The type of deployment, which can be any one of the Allowed values.  NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.  Its use is discouraged in favor of 'DATABASE_ORACLE'.
        /// </summary>
        public readonly string? DeploymentType;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDeploymentsFilterResult> Filters;
        /// <summary>
        /// A three-label Fully Qualified Domain Name (FQDN) for a resource.
        /// </summary>
        public readonly string? Fqdn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Possible GGS lifecycle sub-states.
        /// </summary>
        public readonly string? LifecycleSubState;
        /// <summary>
        /// Possible lifecycle states.
        /// </summary>
        public readonly string? State;
        public readonly string? SupportedConnectionType;

        [OutputConstructor]
        private GetDeploymentsResult(
            string? assignableConnectionId,

            string? assignedConnectionId,

            string compartmentId,

            ImmutableArray<Outputs.GetDeploymentsDeploymentCollectionResult> deploymentCollections,

            string? deploymentType,

            string? displayName,

            ImmutableArray<Outputs.GetDeploymentsFilterResult> filters,

            string? fqdn,

            string id,

            string? lifecycleSubState,

            string? state,

            string? supportedConnectionType)
        {
            AssignableConnectionId = assignableConnectionId;
            AssignedConnectionId = assignedConnectionId;
            CompartmentId = compartmentId;
            DeploymentCollections = deploymentCollections;
            DeploymentType = deploymentType;
            DisplayName = displayName;
            Filters = filters;
            Fqdn = fqdn;
            Id = id;
            LifecycleSubState = lifecycleSubState;
            State = state;
            SupportedConnectionType = supportedConnectionType;
        }
    }
}
