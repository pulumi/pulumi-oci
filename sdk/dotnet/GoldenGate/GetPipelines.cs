// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetPipelines
    {
        /// <summary>
        /// This data source provides the list of Pipelines in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Pipelines in the compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPipelines = Oci.GoldenGate.GetPipelines.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = pipelineDisplayName,
        ///         LifecycleSubState = pipelineLifecycleSubState,
        ///         State = pipelineState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPipelinesResult> InvokeAsync(GetPipelinesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPipelinesResult>("oci:GoldenGate/getPipelines:getPipelines", args ?? new GetPipelinesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pipelines in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Pipelines in the compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPipelines = Oci.GoldenGate.GetPipelines.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = pipelineDisplayName,
        ///         LifecycleSubState = pipelineLifecycleSubState,
        ///         State = pipelineState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPipelinesResult> Invoke(GetPipelinesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelinesResult>("oci:GoldenGate/getPipelines:getPipelines", args ?? new GetPipelinesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Pipelines in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Lists the Pipelines in the compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPipelines = Oci.GoldenGate.GetPipelines.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = pipelineDisplayName,
        ///         LifecycleSubState = pipelineLifecycleSubState,
        ///         State = pipelineState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPipelinesResult> Invoke(GetPipelinesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelinesResult>("oci:GoldenGate/getPipelines:getPipelines", args ?? new GetPipelinesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelinesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetPipelinesFilterArgs>? _filters;
        public List<Inputs.GetPipelinesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPipelinesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filtered list of pipelines to return for a given lifecycleSubState.
        /// </summary>
        [Input("lifecycleSubState")]
        public string? LifecycleSubState { get; set; }

        /// <summary>
        /// A filtered list of pipelines to return for a given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetPipelinesArgs()
        {
        }
        public static new GetPipelinesArgs Empty => new GetPipelinesArgs();
    }

    public sealed class GetPipelinesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetPipelinesFilterInputArgs>? _filters;
        public InputList<Inputs.GetPipelinesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPipelinesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filtered list of pipelines to return for a given lifecycleSubState.
        /// </summary>
        [Input("lifecycleSubState")]
        public Input<string>? LifecycleSubState { get; set; }

        /// <summary>
        /// A filtered list of pipelines to return for a given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetPipelinesInvokeArgs()
        {
        }
        public static new GetPipelinesInvokeArgs Empty => new GetPipelinesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPipelinesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetPipelinesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Possible lifecycle substates when retrieving a pipeline.
        /// </summary>
        public readonly string? LifecycleSubState;
        /// <summary>
        /// The list of pipeline_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPipelinesPipelineCollectionResult> PipelineCollections;
        /// <summary>
        /// Lifecycle state of the pipeline.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetPipelinesResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetPipelinesFilterResult> filters,

            string id,

            string? lifecycleSubState,

            ImmutableArray<Outputs.GetPipelinesPipelineCollectionResult> pipelineCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            LifecycleSubState = lifecycleSubState;
            PipelineCollections = pipelineCollections;
            State = state;
        }
    }
}
