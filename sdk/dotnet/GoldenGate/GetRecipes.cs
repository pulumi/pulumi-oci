// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate
{
    public static class GetRecipes
    {
        /// <summary>
        /// This data source provides the list of Recipes in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Returns an array of Recipe Summary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecipes = Oci.GoldenGate.GetRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = recipeDisplayName,
        ///         RecipeType = recipeRecipeType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRecipesResult> InvokeAsync(GetRecipesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecipesResult>("oci:GoldenGate/getRecipes:getRecipes", args ?? new GetRecipesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Recipes in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Returns an array of Recipe Summary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecipes = Oci.GoldenGate.GetRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = recipeDisplayName,
        ///         RecipeType = recipeRecipeType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecipesResult> Invoke(GetRecipesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecipesResult>("oci:GoldenGate/getRecipes:getRecipes", args ?? new GetRecipesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Recipes in Oracle Cloud Infrastructure Golden Gate service.
        /// 
        /// Returns an array of Recipe Summary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecipes = Oci.GoldenGate.GetRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = recipeDisplayName,
        ///         RecipeType = recipeRecipeType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecipesResult> Invoke(GetRecipesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecipesResult>("oci:GoldenGate/getRecipes:getRecipes", args ?? new GetRecipesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecipesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetRecipesFilterArgs>? _filters;
        public List<Inputs.GetRecipesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRecipesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The pipeline's recipe type. The default value is ZERO_ETL.
        /// </summary>
        [Input("recipeType")]
        public string? RecipeType { get; set; }

        public GetRecipesArgs()
        {
        }
        public static new GetRecipesArgs Empty => new GetRecipesArgs();
    }

    public sealed class GetRecipesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the work request. Work requests should be scoped  to the same compartment as the resource the work request affects. If the work request concerns  multiple resources, and those resources are not in the same compartment, it is up to the service team  to pick the primary resource whose compartment should be used.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only the resources that match the entire 'displayName' given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetRecipesFilterInputArgs>? _filters;
        public InputList<Inputs.GetRecipesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRecipesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The pipeline's recipe type. The default value is ZERO_ETL.
        /// </summary>
        [Input("recipeType")]
        public Input<string>? RecipeType { get; set; }

        public GetRecipesInvokeArgs()
        {
        }
        public static new GetRecipesInvokeArgs Empty => new GetRecipesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecipesResult
    {
        public readonly string CompartmentId;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetRecipesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of recipe_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecipesRecipeSummaryCollectionResult> RecipeSummaryCollections;
        /// <summary>
        /// The type of the recipe
        /// </summary>
        public readonly string? RecipeType;

        [OutputConstructor]
        private GetRecipesResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetRecipesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRecipesRecipeSummaryCollectionResult> recipeSummaryCollections,

            string? recipeType)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            RecipeSummaryCollections = recipeSummaryCollections;
            RecipeType = recipeType;
        }
    }
}
