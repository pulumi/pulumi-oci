// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate.Inputs
{

    public sealed class DeploymentOggDataGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// (Updatable) The password associated with the GoldenGate deployment console username. The password must be 8 to 30 characters long and must contain at least 1 uppercase, 1 lowercase, 1 numeric, and 1 special character. Special characters such as ‘$’, ‘^’, or ‘?’ are not allowed. This field will be deprecated and replaced by "passwordSecretId".
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) The GoldenGate deployment console username.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the PEM file containing the SSL certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// (Updatable) The type of credential store for OGG.
        /// </summary>
        [Input("credentialStore")]
        public Input<string>? CredentialStore { get; set; }

        /// <summary>
        /// The name given to the GoldenGate service deployment. The name must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
        /// </summary>
        [Input("deploymentName", required: true)]
        public Input<string> DeploymentName { get; set; } = null!;

        /// <summary>
        /// (Updatable) Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments. For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used. User belonging to each group can only perform the actions according to the role the respective group is mapped to.
        /// </summary>
        [Input("groupToRolesMapping")]
        public Input<Inputs.DeploymentOggDataGroupToRolesMappingGetArgs>? GroupToRolesMapping { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Identity Domain when IAM credential store is used.
        /// </summary>
        [Input("identityDomainId")]
        public Input<string>? IdentityDomainId { get; set; }

        /// <summary>
        /// (Updatable) The base64 encoded content of the PEM file containing the private key.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Version of OGG
        /// </summary>
        [Input("oggVersion")]
        public Input<string>? OggVersion { get; set; }

        [Input("passwordSecretId")]
        private Input<string>? _passwordSecretId;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the deployment password is stored.
        /// </summary>
        public Input<string>? PasswordSecretId
        {
            get => _passwordSecretId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passwordSecretId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public DeploymentOggDataGetArgs()
        {
        }
        public static new DeploymentOggDataGetArgs Empty => new DeploymentOggDataGetArgs();
    }
}
