// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.GoldenGate.Outputs
{

    [OutputType]
    public sealed class GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult
    {
        /// <summary>
        /// The latency, in seconds, of a process running in a replication. This option applies when retrieving running processes.
        /// </summary>
        public readonly double LastRecordLagInSeconds;
        /// <summary>
        /// An object's Display Name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type of process running in a replication. For example, Extract or Replicat. This option applies when retrieving running processes.
        /// </summary>
        public readonly string ProcessType;
        /// <summary>
        /// The status of the Extract or Replicat process. This option applies when retrieving running processes.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The date and time the last record was processed by an Extract or Replicat. This option applies when retrieving running processes. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
        /// </summary>
        public readonly string TimeLastProcessed;

        [OutputConstructor]
        private GetPipelineRunningProcessesPipelineRunningProcessCollectionItemResult(
            double lastRecordLagInSeconds,

            string name,

            string processType,

            string status,

            string timeLastProcessed)
        {
            LastRecordLagInSeconds = lastRecordLagInSeconds;
            Name = name;
            ProcessType = processType;
            Status = status;
            TimeLastProcessed = timeLastProcessed;
        }
    }
}
