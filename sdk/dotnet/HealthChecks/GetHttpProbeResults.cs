// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.HealthChecks
{
    public static class GetHttpProbeResults
    {
        /// <summary>
        /// This data source provides the list of Http Probe Results in Oracle Cloud Infrastructure Health Checks service.
        /// 
        /// Gets the HTTP probe results for the specified probe or monitor, where
        /// the `probeConfigurationId` is the OCID of either a monitor or an
        /// on-demand probe.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testHttpProbeResults = Oci.HealthChecks.GetHttpProbeResults.Invoke(new()
        ///     {
        ///         ProbeConfigurationId = testProbeConfiguration.Id,
        ///         StartTimeGreaterThanOrEqualTo = httpProbeResultStartTimeGreaterThanOrEqualTo,
        ///         StartTimeLessThanOrEqualTo = httpProbeResultStartTimeLessThanOrEqualTo,
        ///         Target = httpProbeResultTarget,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHttpProbeResultsResult> InvokeAsync(GetHttpProbeResultsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHttpProbeResultsResult>("oci:HealthChecks/getHttpProbeResults:getHttpProbeResults", args ?? new GetHttpProbeResultsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Http Probe Results in Oracle Cloud Infrastructure Health Checks service.
        /// 
        /// Gets the HTTP probe results for the specified probe or monitor, where
        /// the `probeConfigurationId` is the OCID of either a monitor or an
        /// on-demand probe.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testHttpProbeResults = Oci.HealthChecks.GetHttpProbeResults.Invoke(new()
        ///     {
        ///         ProbeConfigurationId = testProbeConfiguration.Id,
        ///         StartTimeGreaterThanOrEqualTo = httpProbeResultStartTimeGreaterThanOrEqualTo,
        ///         StartTimeLessThanOrEqualTo = httpProbeResultStartTimeLessThanOrEqualTo,
        ///         Target = httpProbeResultTarget,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHttpProbeResultsResult> Invoke(GetHttpProbeResultsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHttpProbeResultsResult>("oci:HealthChecks/getHttpProbeResults:getHttpProbeResults", args ?? new GetHttpProbeResultsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHttpProbeResultsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetHttpProbeResultsFilterArgs>? _filters;
        public List<Inputs.GetHttpProbeResultsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetHttpProbeResultsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of a monitor or on-demand probe.
        /// </summary>
        [Input("probeConfigurationId", required: true)]
        public string ProbeConfigurationId { get; set; } = null!;

        /// <summary>
        /// Returns results with a `startTime` equal to or greater than the specified value.
        /// </summary>
        [Input("startTimeGreaterThanOrEqualTo")]
        public double? StartTimeGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Returns results with a `startTime` equal to or less than the specified value.
        /// </summary>
        [Input("startTimeLessThanOrEqualTo")]
        public double? StartTimeLessThanOrEqualTo { get; set; }

        /// <summary>
        /// Filters results that match the `target`.
        /// </summary>
        [Input("target")]
        public string? Target { get; set; }

        public GetHttpProbeResultsArgs()
        {
        }
        public static new GetHttpProbeResultsArgs Empty => new GetHttpProbeResultsArgs();
    }

    public sealed class GetHttpProbeResultsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetHttpProbeResultsFilterInputArgs>? _filters;
        public InputList<Inputs.GetHttpProbeResultsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetHttpProbeResultsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of a monitor or on-demand probe.
        /// </summary>
        [Input("probeConfigurationId", required: true)]
        public Input<string> ProbeConfigurationId { get; set; } = null!;

        /// <summary>
        /// Returns results with a `startTime` equal to or greater than the specified value.
        /// </summary>
        [Input("startTimeGreaterThanOrEqualTo")]
        public Input<double>? StartTimeGreaterThanOrEqualTo { get; set; }

        /// <summary>
        /// Returns results with a `startTime` equal to or less than the specified value.
        /// </summary>
        [Input("startTimeLessThanOrEqualTo")]
        public Input<double>? StartTimeLessThanOrEqualTo { get; set; }

        /// <summary>
        /// Filters results that match the `target`.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public GetHttpProbeResultsInvokeArgs()
        {
        }
        public static new GetHttpProbeResultsInvokeArgs Empty => new GetHttpProbeResultsInvokeArgs();
    }


    [OutputType]
    public sealed class GetHttpProbeResultsResult
    {
        public readonly ImmutableArray<Outputs.GetHttpProbeResultsFilterResult> Filters;
        /// <summary>
        /// The list of http_probe_results.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHttpProbeResultsHttpProbeResultResult> HttpProbeResults;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the monitor or on-demand probe responsible for creating this result.
        /// </summary>
        public readonly string ProbeConfigurationId;
        public readonly double? StartTimeGreaterThanOrEqualTo;
        public readonly double? StartTimeLessThanOrEqualTo;
        /// <summary>
        /// The target hostname or IP address of the probe.
        /// </summary>
        public readonly string? Target;

        [OutputConstructor]
        private GetHttpProbeResultsResult(
            ImmutableArray<Outputs.GetHttpProbeResultsFilterResult> filters,

            ImmutableArray<Outputs.GetHttpProbeResultsHttpProbeResultResult> httpProbeResults,

            string id,

            string probeConfigurationId,

            double? startTimeGreaterThanOrEqualTo,

            double? startTimeLessThanOrEqualTo,

            string? target)
        {
            Filters = filters;
            HttpProbeResults = httpProbeResults;
            Id = id;
            ProbeConfigurationId = probeConfigurationId;
            StartTimeGreaterThanOrEqualTo = startTimeGreaterThanOrEqualTo;
            StartTimeLessThanOrEqualTo = startTimeLessThanOrEqualTo;
            Target = target;
        }
    }
}
