// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.HealthChecks
{
    public static class GetVantagePoints
    {
        /// <summary>
        /// This data source provides the list of Vantage Points in Oracle Cloud Infrastructure Health Checks service.
        /// 
        /// Gets information about all vantage points available to the user.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVantagePoints = Oci.HealthChecks.GetVantagePoints.Invoke(new()
        ///     {
        ///         DisplayName = @var.Vantage_point_display_name,
        ///         Name = @var.Vantage_point_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVantagePointsResult> InvokeAsync(GetVantagePointsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVantagePointsResult>("oci:HealthChecks/getVantagePoints:getVantagePoints", args ?? new GetVantagePointsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vantage Points in Oracle Cloud Infrastructure Health Checks service.
        /// 
        /// Gets information about all vantage points available to the user.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVantagePoints = Oci.HealthChecks.GetVantagePoints.Invoke(new()
        ///     {
        ///         DisplayName = @var.Vantage_point_display_name,
        ///         Name = @var.Vantage_point_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVantagePointsResult> Invoke(GetVantagePointsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVantagePointsResult>("oci:HealthChecks/getVantagePoints:getVantagePoints", args ?? new GetVantagePointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVantagePointsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters results that exactly match the `displayName` field.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetVantagePointsFilterArgs>? _filters;
        public List<Inputs.GetVantagePointsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVantagePointsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filters results that exactly match the `name` field.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVantagePointsArgs()
        {
        }
        public static new GetVantagePointsArgs Empty => new GetVantagePointsArgs();
    }

    public sealed class GetVantagePointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filters results that exactly match the `displayName` field.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVantagePointsFilterInputArgs>? _filters;
        public InputList<Inputs.GetVantagePointsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVantagePointsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filters results that exactly match the `name` field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVantagePointsInvokeArgs()
        {
        }
        public static new GetVantagePointsInvokeArgs Empty => new GetVantagePointsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVantagePointsResult
    {
        /// <summary>
        /// The display name for the vantage point. Display names are determined by the best information available and may change over time.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetVantagePointsFilterResult> Filters;
        /// <summary>
        /// The list of health_checks_vantage_points.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVantagePointsHealthChecksVantagePointResult> HealthChecksVantagePoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique, permanent name for the vantage point.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetVantagePointsResult(
            string? displayName,

            ImmutableArray<Outputs.GetVantagePointsFilterResult> filters,

            ImmutableArray<Outputs.GetVantagePointsHealthChecksVantagePointResult> healthChecksVantagePoints,

            string id,

            string? name)
        {
            DisplayName = displayName;
            Filters = filters;
            HealthChecksVantagePoints = healthChecksVantagePoints;
            Id = id;
            Name = name;
        }
    }
}
