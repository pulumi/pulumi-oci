// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.HealthChecks
{
    /// <summary>
    /// This resource provides the Http Probe resource in Oracle Cloud Infrastructure Health Checks service.
    /// 
    /// Creates an on-demand HTTP probe. The location response header contains the URL for
    /// fetching the probe results.
    /// 
    /// *Note:* On-demand probe configurations are not saved.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testHttpProbe = new Oci.HealthChecks.HttpProbe("testHttpProbe", new Oci.HealthChecks.HttpProbeArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             Protocol = @var.Http_probe_protocol,
    ///             Targets = @var.Http_probe_targets,
    ///             Headers = @var.Http_probe_headers,
    ///             Method = @var.Http_probe_method,
    ///             Path = @var.Http_probe_path,
    ///             Port = @var.Http_probe_port,
    ///             TimeoutInSeconds = @var.Http_probe_timeout_in_seconds,
    ///             VantagePointNames = @var.Http_probe_vantage_point_names,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// HttpProbes can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:HealthChecks/httpProbe:HttpProbe test_http_probe "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:HealthChecks/httpProbe:HttpProbe")]
    public partial class HttpProbe : Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// A dictionary of HTTP request headers.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableDictionary<string, object>> Headers { get; private set; } = null!;

        /// <summary>
        /// The region where updates must be made and where results must be fetched from.
        /// </summary>
        [Output("homeRegion")]
        public Output<string> HomeRegion { get; private set; } = null!;

        /// <summary>
        /// The supported HTTP methods available for probes.
        /// </summary>
        [Output("method")]
        public Output<string> Method { get; private set; } = null!;

        /// <summary>
        /// The optional URL path to probe, including query parameters.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The supported protocols available for HTTP probes.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// A URL for fetching the probe results.
        /// </summary>
        [Output("resultsUrl")]
        public Output<string> ResultsUrl { get; private set; } = null!;

        /// <summary>
        /// A list of targets (hostnames or IP addresses) of the probe.
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<string>> Targets { get; private set; } = null!;

        /// <summary>
        /// The RFC 3339-formatted creation date and time of the probe.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
        /// </summary>
        [Output("timeoutInSeconds")]
        public Output<int> TimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// A list of names of vantage points from which to execute the probe.
        /// </summary>
        [Output("vantagePointNames")]
        public Output<ImmutableArray<string>> VantagePointNames { get; private set; } = null!;


        /// <summary>
        /// Create a HttpProbe resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HttpProbe(string name, HttpProbeArgs args, CustomResourceOptions? options = null)
            : base("oci:HealthChecks/httpProbe:HttpProbe", name, args ?? new HttpProbeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HttpProbe(string name, Input<string> id, HttpProbeState? state = null, CustomResourceOptions? options = null)
            : base("oci:HealthChecks/httpProbe:HttpProbe", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HttpProbe resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HttpProbe Get(string name, Input<string> id, HttpProbeState? state = null, CustomResourceOptions? options = null)
        {
            return new HttpProbe(name, id, state, options);
        }
    }

    public sealed class HttpProbeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("headers")]
        private InputMap<object>? _headers;

        /// <summary>
        /// A dictionary of HTTP request headers.
        /// </summary>
        public InputMap<object> Headers
        {
            get => _headers ?? (_headers = new InputMap<object>());
            set => _headers = value;
        }

        /// <summary>
        /// The supported HTTP methods available for probes.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The optional URL path to probe, including query parameters.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The supported protocols available for HTTP probes.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("targets", required: true)]
        private InputList<string>? _targets;

        /// <summary>
        /// A list of targets (hostnames or IP addresses) of the probe.
        /// </summary>
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        /// <summary>
        /// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("vantagePointNames")]
        private InputList<string>? _vantagePointNames;

        /// <summary>
        /// A list of names of vantage points from which to execute the probe.
        /// </summary>
        public InputList<string> VantagePointNames
        {
            get => _vantagePointNames ?? (_vantagePointNames = new InputList<string>());
            set => _vantagePointNames = value;
        }

        public HttpProbeArgs()
        {
        }
    }

    public sealed class HttpProbeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("headers")]
        private InputMap<object>? _headers;

        /// <summary>
        /// A dictionary of HTTP request headers.
        /// </summary>
        public InputMap<object> Headers
        {
            get => _headers ?? (_headers = new InputMap<object>());
            set => _headers = value;
        }

        /// <summary>
        /// The region where updates must be made and where results must be fetched from.
        /// </summary>
        [Input("homeRegion")]
        public Input<string>? HomeRegion { get; set; }

        /// <summary>
        /// The supported HTTP methods available for probes.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The optional URL path to probe, including query parameters.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The supported protocols available for HTTP probes.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// A URL for fetching the probe results.
        /// </summary>
        [Input("resultsUrl")]
        public Input<string>? ResultsUrl { get; set; }

        [Input("targets")]
        private InputList<string>? _targets;

        /// <summary>
        /// A list of targets (hostnames or IP addresses) of the probe.
        /// </summary>
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        /// <summary>
        /// The RFC 3339-formatted creation date and time of the probe.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("vantagePointNames")]
        private InputList<string>? _vantagePointNames;

        /// <summary>
        /// A list of names of vantage points from which to execute the probe.
        /// </summary>
        public InputList<string> VantagePointNames
        {
            get => _vantagePointNames ?? (_vantagePointNames = new InputList<string>());
            set => _vantagePointNames = value;
        }

        public HttpProbeState()
        {
        }
    }
}
