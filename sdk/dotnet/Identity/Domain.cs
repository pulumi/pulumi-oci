// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    /// <summary>
    /// This resource provides the Domain resource in Oracle Cloud Infrastructure Identity service.
    /// 
    /// Creates a new domain in the tenancy with domain home in {@code homeRegion}. This is an asynchronous call - where, at start,
    /// {@code lifecycleState} of this domain is set to CREATING and {@code lifecycleDetails} to UPDATING. On domain creation completion
    /// this Domain's {@code lifecycleState} will be set to ACTIVE and {@code lifecycleDetails} to null.
    /// 
    /// To track progress, HTTP GET on /iamWorkRequests/{iamWorkRequestsId} endpoint will provide
    /// the async operation's status.
    /// 
    /// After creating a `Domain`, make sure its `lifecycleState` changes from CREATING to ACTIVE
    /// before using it.
    /// If the domain's {@code displayName} already exists, returns 400 BAD REQUEST.
    /// If any one of admin related fields are provided and one of the following 3 fields
    /// - {@code adminEmail}, {@code adminLastName} and {@code adminUserName} - is not provided,
    ///   returns 400 BAD REQUEST.
    /// - If {@code isNotificationBypassed} is NOT provided when admin information is provided,
    ///   returns 400 BAD REQUEST.
    /// - If any internal error occurs, return 500 INTERNAL SERVER ERROR.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testDomain = new Oci.Identity.Domain("test_domain", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         Description = domainDescription,
    ///         DisplayName = domainDisplayName,
    ///         HomeRegion = domainHomeRegion,
    ///         LicenseType = domainLicenseType,
    ///         AdminEmail = domainAdminEmail,
    ///         AdminFirstName = domainAdminFirstName,
    ///         AdminLastName = domainAdminLastName,
    ///         AdminUserName = testUser.Name,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         IsHiddenOnLogin = domainIsHiddenOnLogin,
    ///         IsNotificationBypassed = domainIsNotificationBypassed,
    ///         IsPrimaryEmailRequired = domainIsPrimaryEmailRequired,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Domains can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Identity/domain:Domain test_domain "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Identity/domain:Domain")]
    public partial class Domain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The admin email address
        /// </summary>
        [Output("adminEmail")]
        public Output<string> AdminEmail { get; private set; } = null!;

        /// <summary>
        /// The admin first name
        /// </summary>
        [Output("adminFirstName")]
        public Output<string> AdminFirstName { get; private set; } = null!;

        /// <summary>
        /// The admin last name
        /// </summary>
        [Output("adminLastName")]
        public Output<string> AdminLastName { get; private set; } = null!;

        /// <summary>
        /// The admin user name
        /// </summary>
        [Output("adminUserName")]
        public Output<string> AdminUserName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the Compartment where domain is created
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Domain entity description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The mutable display name of the domain.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        /// </summary>
        [Output("homeRegion")]
        public Output<string> HomeRegion { get; private set; } = null!;

        /// <summary>
        /// Region specific domain URL.
        /// </summary>
        [Output("homeRegionUrl")]
        public Output<string> HomeRegionUrl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether domain is hidden on login screen or not.
        /// </summary>
        [Output("isHiddenOnLogin")]
        public Output<bool> IsHiddenOnLogin { get; private set; } = null!;

        /// <summary>
        /// Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
        /// </summary>
        [Output("isNotificationBypassed")]
        public Output<bool> IsNotificationBypassed { get; private set; } = null!;

        /// <summary>
        /// Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
        /// </summary>
        [Output("isPrimaryEmailRequired")]
        public Output<bool> IsPrimaryEmailRequired { get; private set; } = null!;

        /// <summary>
        /// The License type of Domain
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Any additional details about the current state of the Domain.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The regions domain is replication to.
        /// </summary>
        [Output("replicaRegions")]
        public Output<ImmutableArray<Outputs.DomainReplicaRegion>> ReplicaRegions { get; private set; } = null!;

        /// <summary>
        /// The current state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The type of the domain.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Region agnostic domain URL.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Domain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Domain(string name, DomainArgs args, CustomResourceOptions? options = null)
            : base("oci:Identity/domain:Domain", name, args ?? new DomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Domain(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
            : base("oci:Identity/domain:Domain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Domain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Domain Get(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
        {
            return new Domain(name, id, state, options);
        }
    }

    public sealed class DomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin email address
        /// </summary>
        [Input("adminEmail")]
        public Input<string>? AdminEmail { get; set; }

        /// <summary>
        /// The admin first name
        /// </summary>
        [Input("adminFirstName")]
        public Input<string>? AdminFirstName { get; set; }

        /// <summary>
        /// The admin last name
        /// </summary>
        [Input("adminLastName")]
        public Input<string>? AdminLastName { get; set; }

        /// <summary>
        /// The admin user name
        /// </summary>
        [Input("adminUserName")]
        public Input<string>? AdminUserName { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the Compartment where domain is created
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Domain entity description
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// (Updatable) The mutable display name of the domain.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        /// </summary>
        [Input("homeRegion", required: true)]
        public Input<string> HomeRegion { get; set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether domain is hidden on login screen or not.
        /// </summary>
        [Input("isHiddenOnLogin")]
        public Input<bool>? IsHiddenOnLogin { get; set; }

        /// <summary>
        /// Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
        /// </summary>
        [Input("isNotificationBypassed")]
        public Input<bool>? IsNotificationBypassed { get; set; }

        /// <summary>
        /// Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
        /// </summary>
        [Input("isPrimaryEmailRequired")]
        public Input<bool>? IsPrimaryEmailRequired { get; set; }

        /// <summary>
        /// The License type of Domain
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("licenseType", required: true)]
        public Input<string> LicenseType { get; set; } = null!;

        /// <summary>
        /// The current state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public DomainArgs()
        {
        }
        public static new DomainArgs Empty => new DomainArgs();
    }

    public sealed class DomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The admin email address
        /// </summary>
        [Input("adminEmail")]
        public Input<string>? AdminEmail { get; set; }

        /// <summary>
        /// The admin first name
        /// </summary>
        [Input("adminFirstName")]
        public Input<string>? AdminFirstName { get; set; }

        /// <summary>
        /// The admin last name
        /// </summary>
        [Input("adminLastName")]
        public Input<string>? AdminLastName { get; set; }

        /// <summary>
        /// The admin user name
        /// </summary>
        [Input("adminUserName")]
        public Input<string>? AdminUserName { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the Compartment where domain is created
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Domain entity description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The mutable display name of the domain.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The region's name. See [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm) for the full list of supported region names.  Example: `us-phoenix-1`
        /// </summary>
        [Input("homeRegion")]
        public Input<string>? HomeRegion { get; set; }

        /// <summary>
        /// Region specific domain URL.
        /// </summary>
        [Input("homeRegionUrl")]
        public Input<string>? HomeRegionUrl { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether domain is hidden on login screen or not.
        /// </summary>
        [Input("isHiddenOnLogin")]
        public Input<bool>? IsHiddenOnLogin { get; set; }

        /// <summary>
        /// Indicates if admin user created in IDCS stripe would like to receive notification like welcome email or not. Required field only if admin information is provided, otherwise optional.
        /// </summary>
        [Input("isNotificationBypassed")]
        public Input<bool>? IsNotificationBypassed { get; set; }

        /// <summary>
        /// Optional field to indicate whether users in the domain are required to have a primary email address or not Defaults to true
        /// </summary>
        [Input("isPrimaryEmailRequired")]
        public Input<bool>? IsPrimaryEmailRequired { get; set; }

        /// <summary>
        /// The License type of Domain
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Any additional details about the current state of the Domain.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        [Input("replicaRegions")]
        private InputList<Inputs.DomainReplicaRegionGetArgs>? _replicaRegions;

        /// <summary>
        /// The regions domain is replication to.
        /// </summary>
        public InputList<Inputs.DomainReplicaRegionGetArgs> ReplicaRegions
        {
            get => _replicaRegions ?? (_replicaRegions = new InputList<Inputs.DomainReplicaRegionGetArgs>());
            set => _replicaRegions = value;
        }

        /// <summary>
        /// The current state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Date and time the domain was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The type of the domain.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Region agnostic domain URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DomainState()
        {
        }
        public static new DomainState Empty => new DomainState();
    }
}
