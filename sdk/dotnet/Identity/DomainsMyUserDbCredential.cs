// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    /// <summary>
    /// This resource provides the My User Db Credential resource in Oracle Cloud Infrastructure Identity Domains service.
    /// 
    /// Create a user's own database (DB) credential.
    /// 
    /// ## Import
    /// 
    /// MyUserDbCredentials can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Identity/domainsMyUserDbCredential:DomainsMyUserDbCredential test_my_user_db_credential "idcsEndpoint/{idcsEndpoint}/myUserDbCredentials/{myUserDbCredentialId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Identity/domainsMyUserDbCredential:DomainsMyUserDbCredential")]
    public partial class DomainsMyUserDbCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Output("authorization")]
        public Output<string?> Authorization { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("compartmentOcid")]
        public Output<string> CompartmentOcid { get; private set; } = null!;

        /// <summary>
        /// The user's database password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: immutable
        /// * returned: default
        /// * required: true
        /// </summary>
        [Output("dbPassword")]
        public Output<string> DbPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        [Output("deleteInProgress")]
        public Output<bool> DeleteInProgress { get; private set; } = null!;

        /// <summary>
        /// Description
        /// 
        /// **Added In:** 2109020413
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * type: string
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("domainOcid")]
        public Output<string> DomainOcid { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates that the database password has expired.
        /// 
        /// **SCIM++ Properties:**
        /// * type: boolean
        /// * mutability: readOnly
        /// * returned: default
        /// </summary>
        [Output("expired")]
        public Output<bool> Expired { get; private set; } = null!;

        /// <summary>
        /// When the user credential expires.
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: dateTime
        /// * uniqueness: none
        /// </summary>
        [Output("expiresOn")]
        public Output<string> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The User or App who created the Resource
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: true
        /// * returned: default
        /// * type: complex
        /// </summary>
        [Output("idcsCreatedBies")]
        public Output<ImmutableArray<Outputs.DomainsMyUserDbCredentialIdcsCreatedBy>> IdcsCreatedBies { get; private set; } = null!;

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Output("idcsEndpoint")]
        public Output<string> IdcsEndpoint { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The User or App who modified the Resource
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// </summary>
        [Output("idcsLastModifiedBies")]
        public Output<ImmutableArray<Outputs.DomainsMyUserDbCredentialIdcsLastModifiedBy>> IdcsLastModifiedBies { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The release number when the resource was upgraded.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("idcsLastUpgradedInRelease")]
        public Output<string> IdcsLastUpgradedInRelease { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readOnly
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("idcsPreventedOperations")]
        public Output<ImmutableArray<string>> IdcsPreventedOperations { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A DateTime that specifies the date and time when the current database password was set.
        /// 
        /// **SCIM++ Properties:**
        /// * type: dateTime
        /// * mutability: readOnly
        /// * returned: default
        /// </summary>
        [Output("lastSetDate")]
        public Output<string> LastSetDate { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
        /// * type: complex
        /// </summary>
        [Output("metas")]
        public Output<ImmutableArray<Outputs.DomainsMyUserDbCredentialMeta>> Metas { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The user's database password with mixed salt.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Output("mixedDbPassword")]
        public Output<string> MixedDbPassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The mixed salt of the password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Output("mixedSalt")]
        public Output<string> MixedSalt { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * type: string
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: global
        /// </summary>
        [Output("ocid")]
        public Output<string> Ocid { get; private set; } = null!;

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Output("resourceTypeSchemaVersion")]
        public Output<string?> ResourceTypeSchemaVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The salt of the password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Output("salt")]
        public Output<string> Salt { get; private set; } = null!;

        /// <summary>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("schemas")]
        public Output<ImmutableArray<string>> Schemas { get; private set; } = null!;

        /// <summary>
        /// User credential status
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: never
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A list of tags on this resource.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsCompositeKey: [key, value]
        /// * idcsSearchable: true
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DomainsMyUserDbCredentialTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Output("tenancyOcid")]
        public Output<string> TenancyOcid { get; private set; } = null!;

        /// <summary>
        /// The user linked to the database credential.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [value]
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        [Output("user")]
        public Output<Outputs.DomainsMyUserDbCredentialUser> User { get; private set; } = null!;


        /// <summary>
        /// Create a DomainsMyUserDbCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainsMyUserDbCredential(string name, DomainsMyUserDbCredentialArgs args, CustomResourceOptions? options = null)
            : base("oci:Identity/domainsMyUserDbCredential:DomainsMyUserDbCredential", name, args ?? new DomainsMyUserDbCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainsMyUserDbCredential(string name, Input<string> id, DomainsMyUserDbCredentialState? state = null, CustomResourceOptions? options = null)
            : base("oci:Identity/domainsMyUserDbCredential:DomainsMyUserDbCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "dbPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainsMyUserDbCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainsMyUserDbCredential Get(string name, Input<string> id, DomainsMyUserDbCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainsMyUserDbCredential(name, id, state, options);
        }
    }

    public sealed class DomainsMyUserDbCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        [Input("dbPassword", required: true)]
        private Input<string>? _dbPassword;

        /// <summary>
        /// The user's database password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: immutable
        /// * returned: default
        /// * required: true
        /// </summary>
        public Input<string>? DbPassword
        {
            get => _dbPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dbPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Description
        /// 
        /// **Added In:** 2109020413
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * type: string
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When the user credential expires.
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: dateTime
        /// * uniqueness: none
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint", required: true)]
        public Input<string> IdcsEndpoint { get; set; } = null!;

        /// <summary>
        /// Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: global
        /// </summary>
        [Input("ocid")]
        public Input<string>? Ocid { get; set; }

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public Input<string>? ResourceTypeSchemaVersion { get; set; }

        [Input("schemas", required: true)]
        private InputList<string>? _schemas;

        /// <summary>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public InputList<string> Schemas
        {
            get => _schemas ?? (_schemas = new InputList<string>());
            set => _schemas = value;
        }

        /// <summary>
        /// User credential status
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: never
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.DomainsMyUserDbCredentialTagArgs>? _tags;

        /// <summary>
        /// A list of tags on this resource.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsCompositeKey: [key, value]
        /// * idcsSearchable: true
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        public InputList<Inputs.DomainsMyUserDbCredentialTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DomainsMyUserDbCredentialTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The user linked to the database credential.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [value]
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        [Input("user")]
        public Input<Inputs.DomainsMyUserDbCredentialUserArgs>? User { get; set; }

        public DomainsMyUserDbCredentialArgs()
        {
        }
        public static new DomainsMyUserDbCredentialArgs Empty => new DomainsMyUserDbCredentialArgs();
    }

    public sealed class DomainsMyUserDbCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("compartmentOcid")]
        public Input<string>? CompartmentOcid { get; set; }

        [Input("dbPassword")]
        private Input<string>? _dbPassword;

        /// <summary>
        /// The user's database password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: immutable
        /// * returned: default
        /// * required: true
        /// </summary>
        public Input<string>? DbPassword
        {
            get => _dbPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dbPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (Updatable) A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        [Input("deleteInProgress")]
        public Input<bool>? DeleteInProgress { get; set; }

        /// <summary>
        /// Description
        /// 
        /// **Added In:** 2109020413
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * type: string
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("domainOcid")]
        public Input<string>? DomainOcid { get; set; }

        /// <summary>
        /// (Updatable) Indicates that the database password has expired.
        /// 
        /// **SCIM++ Properties:**
        /// * type: boolean
        /// * mutability: readOnly
        /// * returned: default
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// When the user credential expires.
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: dateTime
        /// * uniqueness: none
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        [Input("idcsCreatedBies")]
        private InputList<Inputs.DomainsMyUserDbCredentialIdcsCreatedByGetArgs>? _idcsCreatedBies;

        /// <summary>
        /// (Updatable) The User or App who created the Resource
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: true
        /// * returned: default
        /// * type: complex
        /// </summary>
        public InputList<Inputs.DomainsMyUserDbCredentialIdcsCreatedByGetArgs> IdcsCreatedBies
        {
            get => _idcsCreatedBies ?? (_idcsCreatedBies = new InputList<Inputs.DomainsMyUserDbCredentialIdcsCreatedByGetArgs>());
            set => _idcsCreatedBies = value;
        }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint")]
        public Input<string>? IdcsEndpoint { get; set; }

        [Input("idcsLastModifiedBies")]
        private InputList<Inputs.DomainsMyUserDbCredentialIdcsLastModifiedByGetArgs>? _idcsLastModifiedBies;

        /// <summary>
        /// (Updatable) The User or App who modified the Resource
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// </summary>
        public InputList<Inputs.DomainsMyUserDbCredentialIdcsLastModifiedByGetArgs> IdcsLastModifiedBies
        {
            get => _idcsLastModifiedBies ?? (_idcsLastModifiedBies = new InputList<Inputs.DomainsMyUserDbCredentialIdcsLastModifiedByGetArgs>());
            set => _idcsLastModifiedBies = value;
        }

        /// <summary>
        /// (Updatable) The release number when the resource was upgraded.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("idcsLastUpgradedInRelease")]
        public Input<string>? IdcsLastUpgradedInRelease { get; set; }

        [Input("idcsPreventedOperations")]
        private InputList<string>? _idcsPreventedOperations;

        /// <summary>
        /// (Updatable) Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readOnly
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public InputList<string> IdcsPreventedOperations
        {
            get => _idcsPreventedOperations ?? (_idcsPreventedOperations = new InputList<string>());
            set => _idcsPreventedOperations = value;
        }

        /// <summary>
        /// (Updatable) A DateTime that specifies the date and time when the current database password was set.
        /// 
        /// **SCIM++ Properties:**
        /// * type: dateTime
        /// * mutability: readOnly
        /// * returned: default
        /// </summary>
        [Input("lastSetDate")]
        public Input<string>? LastSetDate { get; set; }

        [Input("metas")]
        private InputList<Inputs.DomainsMyUserDbCredentialMetaGetArgs>? _metas;

        /// <summary>
        /// (Updatable) A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * idcsCsvAttributeNameMappings: [[columnHeaderName:Created Date, mapsTo:meta.created]]
        /// * type: complex
        /// </summary>
        public InputList<Inputs.DomainsMyUserDbCredentialMetaGetArgs> Metas
        {
            get => _metas ?? (_metas = new InputList<Inputs.DomainsMyUserDbCredentialMetaGetArgs>());
            set => _metas = value;
        }

        /// <summary>
        /// (Updatable) The user's database password with mixed salt.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Input("mixedDbPassword")]
        public Input<string>? MixedDbPassword { get; set; }

        /// <summary>
        /// (Updatable) The mixed salt of the password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Input("mixedSalt")]
        public Input<string>? MixedSalt { get; set; }

        /// <summary>
        /// (Updatable) Name
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * type: string
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: global
        /// </summary>
        [Input("ocid")]
        public Input<string>? Ocid { get; set; }

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public Input<string>? ResourceTypeSchemaVersion { get; set; }

        /// <summary>
        /// (Updatable) The salt of the password.
        /// 
        /// **SCIM++ Properties:**
        /// * type: string
        /// * mutability: readOnly
        /// * returned: default
        /// * required: false
        /// </summary>
        [Input("salt")]
        public Input<string>? Salt { get; set; }

        [Input("schemas")]
        private InputList<string>? _schemas;

        /// <summary>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public InputList<string> Schemas
        {
            get => _schemas ?? (_schemas = new InputList<string>());
            set => _schemas = value;
        }

        /// <summary>
        /// User credential status
        /// 
        /// **Added In:** 2109090424
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: never
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.DomainsMyUserDbCredentialTagGetArgs>? _tags;

        /// <summary>
        /// A list of tags on this resource.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsCompositeKey: [key, value]
        /// * idcsSearchable: true
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        public InputList<Inputs.DomainsMyUserDbCredentialTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DomainsMyUserDbCredentialTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// (Updatable) Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("tenancyOcid")]
        public Input<string>? TenancyOcid { get; set; }

        /// <summary>
        /// The user linked to the database credential.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [value]
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: immutable
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        [Input("user")]
        public Input<Inputs.DomainsMyUserDbCredentialUserGetArgs>? User { get; set; }

        public DomainsMyUserDbCredentialState()
        {
        }
        public static new DomainsMyUserDbCredentialState Empty => new DomainsMyUserDbCredentialState();
    }
}
