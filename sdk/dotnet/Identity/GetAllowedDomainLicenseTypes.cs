// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetAllowedDomainLicenseTypes
    {
        /// <summary>
        /// This data source provides the list of Allowed Domain License Types in Oracle Cloud Infrastructure Identity service.
        /// 
        /// List the allowed domain license types supported by Oracle Cloud Infrastructure If {@code currentLicenseTypeName} provided, returns allowed license types a domain with the specified license type name can migrate to.
        /// If {@code name} is provided, it filters and returns resources that match the given license type name.
        /// Otherwise, returns all valid license types that are currently supported.
        /// 
        /// - If license type details are retrieved sucessfully, return 202 ACCEPTED.
        /// - If any internal error occurs, return 500 INTERNAL SERVER ERROR.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAllowedDomainLicenseTypes = Oci.Identity.GetAllowedDomainLicenseTypes.Invoke(new()
        ///     {
        ///         CurrentLicenseTypeName = @var.Allowed_domain_license_type_current_license_type_name,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAllowedDomainLicenseTypesResult> InvokeAsync(GetAllowedDomainLicenseTypesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAllowedDomainLicenseTypesResult>("oci:Identity/getAllowedDomainLicenseTypes:getAllowedDomainLicenseTypes", args ?? new GetAllowedDomainLicenseTypesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Allowed Domain License Types in Oracle Cloud Infrastructure Identity service.
        /// 
        /// List the allowed domain license types supported by Oracle Cloud Infrastructure If {@code currentLicenseTypeName} provided, returns allowed license types a domain with the specified license type name can migrate to.
        /// If {@code name} is provided, it filters and returns resources that match the given license type name.
        /// Otherwise, returns all valid license types that are currently supported.
        /// 
        /// - If license type details are retrieved sucessfully, return 202 ACCEPTED.
        /// - If any internal error occurs, return 500 INTERNAL SERVER ERROR.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAllowedDomainLicenseTypes = Oci.Identity.GetAllowedDomainLicenseTypes.Invoke(new()
        ///     {
        ///         CurrentLicenseTypeName = @var.Allowed_domain_license_type_current_license_type_name,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAllowedDomainLicenseTypesResult> Invoke(GetAllowedDomainLicenseTypesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAllowedDomainLicenseTypesResult>("oci:Identity/getAllowedDomainLicenseTypes:getAllowedDomainLicenseTypes", args ?? new GetAllowedDomainLicenseTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAllowedDomainLicenseTypesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain license type
        /// </summary>
        [Input("currentLicenseTypeName")]
        public string? CurrentLicenseTypeName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAllowedDomainLicenseTypesFilterArgs>? _filters;
        public List<Inputs.GetAllowedDomainLicenseTypesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAllowedDomainLicenseTypesFilterArgs>());
            set => _filters = value;
        }

        public GetAllowedDomainLicenseTypesArgs()
        {
        }
        public static new GetAllowedDomainLicenseTypesArgs Empty => new GetAllowedDomainLicenseTypesArgs();
    }

    public sealed class GetAllowedDomainLicenseTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain license type
        /// </summary>
        [Input("currentLicenseTypeName")]
        public Input<string>? CurrentLicenseTypeName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAllowedDomainLicenseTypesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAllowedDomainLicenseTypesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAllowedDomainLicenseTypesFilterInputArgs>());
            set => _filters = value;
        }

        public GetAllowedDomainLicenseTypesInvokeArgs()
        {
        }
        public static new GetAllowedDomainLicenseTypesInvokeArgs Empty => new GetAllowedDomainLicenseTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAllowedDomainLicenseTypesResult
    {
        /// <summary>
        /// The list of allowed_domain_license_types.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult> AllowedDomainLicenseTypes;
        public readonly string? CurrentLicenseTypeName;
        public readonly ImmutableArray<Outputs.GetAllowedDomainLicenseTypesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAllowedDomainLicenseTypesResult(
            ImmutableArray<Outputs.GetAllowedDomainLicenseTypesAllowedDomainLicenseTypeResult> allowedDomainLicenseTypes,

            string? currentLicenseTypeName,

            ImmutableArray<Outputs.GetAllowedDomainLicenseTypesFilterResult> filters,

            string id)
        {
            AllowedDomainLicenseTypes = allowedDomainLicenseTypes;
            CurrentLicenseTypeName = currentLicenseTypeName;
            Filters = filters;
            Id = id;
        }
    }
}
