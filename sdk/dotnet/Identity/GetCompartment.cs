// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetCompartment
    {
        /// <summary>
        /// This data source provides details about a specific Compartment resource in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Gets the specified compartment's information.
        /// 
        /// This operation does not return a list of all the resources inside the compartment. There is no single
        /// API operation that does that. Compartments can contain multiple types of resources (instances, block
        /// storage volumes, etc.). To find out what's in a compartment, you must call the "List" operation for
        /// each resource type and specify the compartment's OCID as a query parameter in the request. For example,
        /// call the [ListInstances](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Instance/ListInstances) operation in the Cloud Compute
        /// Service or the [ListVolumes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Volume/ListVolumes) operation in Cloud Block Storage.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCompartment = Oci.Identity.GetCompartment.Invoke(new()
        ///     {
        ///         Id = compartmentId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCompartmentResult> InvokeAsync(GetCompartmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCompartmentResult>("oci:Identity/getCompartment:getCompartment", args ?? new GetCompartmentArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Compartment resource in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Gets the specified compartment's information.
        /// 
        /// This operation does not return a list of all the resources inside the compartment. There is no single
        /// API operation that does that. Compartments can contain multiple types of resources (instances, block
        /// storage volumes, etc.). To find out what's in a compartment, you must call the "List" operation for
        /// each resource type and specify the compartment's OCID as a query parameter in the request. For example,
        /// call the [ListInstances](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Instance/ListInstances) operation in the Cloud Compute
        /// Service or the [ListVolumes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Volume/ListVolumes) operation in Cloud Block Storage.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCompartment = Oci.Identity.GetCompartment.Invoke(new()
        ///     {
        ///         Id = compartmentId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCompartmentResult> Invoke(GetCompartmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCompartmentResult>("oci:Identity/getCompartment:getCompartment", args ?? new GetCompartmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCompartmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCompartmentArgs()
        {
        }
        public static new GetCompartmentArgs Empty => new GetCompartmentArgs();
    }

    public sealed class GetCompartmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCompartmentInvokeArgs()
        {
        }
        public static new GetCompartmentInvokeArgs Empty => new GetCompartmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetCompartmentResult
    {
        /// <summary>
        /// The OCID of the parent compartment containing the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The description you assign to the compartment. Does not have to be unique, and it's changeable.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The detailed status of INACTIVE lifecycleState.
        /// </summary>
        public readonly string InactiveState;
        /// <summary>
        /// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
        /// </summary>
        public readonly bool IsAccessible;
        /// <summary>
        /// The name you assign to the compartment during creation. The name must be unique across all compartments in the parent. Avoid entering confidential information.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The compartment's current state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;

        [OutputConstructor]
        private GetCompartmentResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string inactiveState,

            bool isAccessible,

            string name,

            string state,

            string timeCreated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            FreeformTags = freeformTags;
            Id = id;
            InactiveState = inactiveState;
            IsAccessible = isAccessible;
            Name = name;
            State = state;
            TimeCreated = timeCreated;
        }
    }
}
