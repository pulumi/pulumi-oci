// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetCompartments
    {
        /// <summary>
        /// This data source provides the list of Compartments in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the compartments in a specified compartment. The members of the list
        /// returned depends on the values set for several parameters.
        /// 
        /// With the exception of the tenancy (root compartment), the ListCompartments operation
        /// returns only the first-level child compartments in the parent compartment specified in
        /// `compartmentId`. The list does not include any subcompartments of the child
        /// compartments (grandchildren).
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (the resource can be in a subcompartment).
        /// 
        /// The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
        /// tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
        /// 
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCompartments = Oci.Identity.GetCompartments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = compartmentAccessLevel,
        ///         CompartmentIdInSubtree = compartmentCompartmentIdInSubtree,
        ///         Name = compartmentName,
        ///         State = compartmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCompartmentsResult> InvokeAsync(GetCompartmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCompartmentsResult>("oci:Identity/getCompartments:getCompartments", args ?? new GetCompartmentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Compartments in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the compartments in a specified compartment. The members of the list
        /// returned depends on the values set for several parameters.
        /// 
        /// With the exception of the tenancy (root compartment), the ListCompartments operation
        /// returns only the first-level child compartments in the parent compartment specified in
        /// `compartmentId`. The list does not include any subcompartments of the child
        /// compartments (grandchildren).
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (the resource can be in a subcompartment).
        /// 
        /// The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
        /// tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
        /// 
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCompartments = Oci.Identity.GetCompartments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = compartmentAccessLevel,
        ///         CompartmentIdInSubtree = compartmentCompartmentIdInSubtree,
        ///         Name = compartmentName,
        ///         State = compartmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCompartmentsResult> Invoke(GetCompartmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCompartmentsResult>("oci:Identity/getCompartments:getCompartments", args ?? new GetCompartmentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Compartments in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the compartments in a specified compartment. The members of the list
        /// returned depends on the values set for several parameters.
        /// 
        /// With the exception of the tenancy (root compartment), the ListCompartments operation
        /// returns only the first-level child compartments in the parent compartment specified in
        /// `compartmentId`. The list does not include any subcompartments of the child
        /// compartments (grandchildren).
        /// 
        /// The parameter `accessLevel` specifies whether to return only those compartments for which the
        /// requestor has INSPECT permissions on at least one resource directly
        /// or indirectly (the resource can be in a subcompartment).
        /// 
        /// The parameter `compartmentIdInSubtree` applies only when you perform ListCompartments on the
        /// tenancy (root compartment). When set to true, the entire hierarchy of compartments can be returned.
        /// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
        /// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ANY.
        /// 
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCompartments = Oci.Identity.GetCompartments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AccessLevel = compartmentAccessLevel,
        ///         CompartmentIdInSubtree = compartmentCompartmentIdInSubtree,
        ///         Name = compartmentName,
        ///         State = compartmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCompartmentsResult> Invoke(GetCompartmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCompartmentsResult>("oci:Identity/getCompartments:getCompartments", args ?? new GetCompartmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCompartmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are `ANY` and `ACCESSIBLE`. Default is `ANY`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). For the compartments on which the user indirectly has INSPECT permissions, a restricted set of fields is returned.
        /// 
        /// When set to `ANY` permissions are not checked.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. Can only be set to true when performing ListCompartments on the tenancy (root compartment). When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetCompartmentsFilterArgs>? _filters;
        public List<Inputs.GetCompartmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCompartmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCompartmentsArgs()
        {
        }
        public static new GetCompartmentsArgs Empty => new GetCompartmentsArgs();
    }

    public sealed class GetCompartmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Valid values are `ANY` and `ACCESSIBLE`. Default is `ANY`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). For the compartments on which the user indirectly has INSPECT permissions, a restricted set of fields is returned.
        /// 
        /// When set to `ANY` permissions are not checked.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Default is false. Can only be set to true when performing ListCompartments on the tenancy (root compartment). When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetCompartmentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCompartmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCompartmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCompartmentsInvokeArgs()
        {
        }
        public static new GetCompartmentsInvokeArgs Empty => new GetCompartmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCompartmentsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The OCID of the parent compartment containing the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The list of compartments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCompartmentsCompartmentResult> Compartments;
        public readonly ImmutableArray<Outputs.GetCompartmentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name you assign to the compartment during creation. The name must be unique across all compartments in the parent. Avoid entering confidential information.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The compartment's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCompartmentsResult(
            string? accessLevel,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetCompartmentsCompartmentResult> compartments,

            ImmutableArray<Outputs.GetCompartmentsFilterResult> filters,

            string id,

            string? name,

            string? state)
        {
            AccessLevel = accessLevel;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Compartments = compartments;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
        }
    }
}
