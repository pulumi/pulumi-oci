// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetDomainsGroups
    {
        /// <summary>
        /// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity Domains service.
        /// 
        /// Search for groups. &lt;b&gt;Important:&lt;/b&gt; The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testGroups = Oci.Identity.GetDomainsGroups.Invoke(new()
        ///     {
        ///         IdcsEndpoint = data.Oci_identity_domain.Test_domain.Url,
        ///         GroupCount = @var.Group_group_count,
        ///         GroupFilter = @var.Group_group_filter,
        ///         AttributeSets = new() { },
        ///         Attributes = "",
        ///         Authorization = @var.Group_authorization,
        ///         ResourceTypeSchemaVersion = @var.Group_resource_type_schema_version,
        ///         StartIndex = @var.Group_start_index,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDomainsGroupsResult> InvokeAsync(GetDomainsGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainsGroupsResult>("oci:Identity/getDomainsGroups:getDomainsGroups", args ?? new GetDomainsGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity Domains service.
        /// 
        /// Search for groups. &lt;b&gt;Important:&lt;/b&gt; The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testGroups = Oci.Identity.GetDomainsGroups.Invoke(new()
        ///     {
        ///         IdcsEndpoint = data.Oci_identity_domain.Test_domain.Url,
        ///         GroupCount = @var.Group_group_count,
        ///         GroupFilter = @var.Group_group_filter,
        ///         AttributeSets = new() { },
        ///         Attributes = "",
        ///         Authorization = @var.Group_authorization,
        ///         ResourceTypeSchemaVersion = @var.Group_resource_type_schema_version,
        ///         StartIndex = @var.Group_start_index,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDomainsGroupsResult> Invoke(GetDomainsGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainsGroupsResult>("oci:Identity/getDomainsGroups:getDomainsGroups", args ?? new GetDomainsGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainsGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributeSets")]
        private List<string>? _attributeSets;

        /// <summary>
        /// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        /// </summary>
        public List<string> AttributeSets
        {
            get => _attributeSets ?? (_attributeSets = new List<string>());
            set => _attributeSets = value;
        }

        /// <summary>
        /// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        /// </summary>
        [Input("attributes")]
        public string? Attributes { get; set; }

        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public string? Authorization { get; set; }

        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4).
        /// </summary>
        [Input("groupCount")]
        public int? GroupCount { get; set; }

        /// <summary>
        /// OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
        /// </summary>
        [Input("groupFilter")]
        public string? GroupFilter { get; set; }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint", required: true)]
        public string IdcsEndpoint { get; set; } = null!;

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public string? ResourceTypeSchemaVersion { get; set; }

        [Input("sortBy")]
        public string? SortBy { get; set; }

        [Input("sortOrder")]
        public string? SortOrder { get; set; }

        /// <summary>
        /// OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on.
        /// </summary>
        [Input("startIndex")]
        public int? StartIndex { get; set; }

        public GetDomainsGroupsArgs()
        {
        }
        public static new GetDomainsGroupsArgs Empty => new GetDomainsGroupsArgs();
    }

    public sealed class GetDomainsGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributeSets")]
        private InputList<string>? _attributeSets;

        /// <summary>
        /// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        /// </summary>
        public InputList<string> AttributeSets
        {
            get => _attributeSets ?? (_attributeSets = new InputList<string>());
            set => _attributeSets = value;
        }

        /// <summary>
        /// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        /// </summary>
        [Input("attributes")]
        public Input<string>? Attributes { get; set; }

        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4).
        /// </summary>
        [Input("groupCount")]
        public Input<int>? GroupCount { get; set; }

        /// <summary>
        /// OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
        /// </summary>
        [Input("groupFilter")]
        public Input<string>? GroupFilter { get; set; }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint", required: true)]
        public Input<string> IdcsEndpoint { get; set; } = null!;

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public Input<string>? ResourceTypeSchemaVersion { get; set; }

        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        [Input("sortOrder")]
        public Input<string>? SortOrder { get; set; }

        /// <summary>
        /// OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on.
        /// </summary>
        [Input("startIndex")]
        public Input<int>? StartIndex { get; set; }

        public GetDomainsGroupsInvokeArgs()
        {
        }
        public static new GetDomainsGroupsInvokeArgs Empty => new GetDomainsGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainsGroupsResult
    {
        public readonly ImmutableArray<string> AttributeSets;
        public readonly string? Attributes;
        public readonly string? Authorization;
        public readonly string? CompartmentId;
        public readonly int? GroupCount;
        public readonly string? GroupFilter;
        /// <summary>
        /// The list of groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdcsEndpoint;
        public readonly int ItemsPerPage;
        public readonly string? ResourceTypeSchemaVersion;
        /// <summary>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// </summary>
        public readonly ImmutableArray<string> Schemas;
        public readonly string? SortBy;
        public readonly string? SortOrder;
        public readonly int? StartIndex;
        public readonly int TotalResults;

        [OutputConstructor]
        private GetDomainsGroupsResult(
            ImmutableArray<string> attributeSets,

            string? attributes,

            string? authorization,

            string? compartmentId,

            int? groupCount,

            string? groupFilter,

            ImmutableArray<Outputs.GetDomainsGroupsGroupResult> groups,

            string id,

            string idcsEndpoint,

            int itemsPerPage,

            string? resourceTypeSchemaVersion,

            ImmutableArray<string> schemas,

            string? sortBy,

            string? sortOrder,

            int? startIndex,

            int totalResults)
        {
            AttributeSets = attributeSets;
            Attributes = attributes;
            Authorization = authorization;
            CompartmentId = compartmentId;
            GroupCount = groupCount;
            GroupFilter = groupFilter;
            Groups = groups;
            Id = id;
            IdcsEndpoint = idcsEndpoint;
            ItemsPerPage = itemsPerPage;
            ResourceTypeSchemaVersion = resourceTypeSchemaVersion;
            Schemas = schemas;
            SortBy = sortBy;
            SortOrder = sortOrder;
            StartIndex = startIndex;
            TotalResults = totalResults;
        }
    }
}
