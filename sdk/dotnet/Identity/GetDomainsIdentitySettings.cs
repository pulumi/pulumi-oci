// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetDomainsIdentitySettings
    {
        /// <summary>
        /// This data source provides the list of Identity Settings in Oracle Cloud Infrastructure Identity Domains service.
        /// 
        /// Search for Identity settings.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIdentitySettings = Oci.Identity.GetDomainsIdentitySettings.Invoke(new()
        ///     {
        ///         IdcsEndpoint = data.Oci_identity_domain.Test_domain.Url,
        ///         AttributeSets = new[]
        ///         {
        ///             "all",
        ///         },
        ///         Attributes = "",
        ///         Authorization = @var.Identity_setting_authorization,
        ///         ResourceTypeSchemaVersion = @var.Identity_setting_resource_type_schema_version,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainsIdentitySettingsResult> InvokeAsync(GetDomainsIdentitySettingsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainsIdentitySettingsResult>("oci:Identity/getDomainsIdentitySettings:getDomainsIdentitySettings", args ?? new GetDomainsIdentitySettingsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Identity Settings in Oracle Cloud Infrastructure Identity Domains service.
        /// 
        /// Search for Identity settings.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIdentitySettings = Oci.Identity.GetDomainsIdentitySettings.Invoke(new()
        ///     {
        ///         IdcsEndpoint = data.Oci_identity_domain.Test_domain.Url,
        ///         AttributeSets = new[]
        ///         {
        ///             "all",
        ///         },
        ///         Attributes = "",
        ///         Authorization = @var.Identity_setting_authorization,
        ///         ResourceTypeSchemaVersion = @var.Identity_setting_resource_type_schema_version,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainsIdentitySettingsResult> Invoke(GetDomainsIdentitySettingsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainsIdentitySettingsResult>("oci:Identity/getDomainsIdentitySettings:getDomainsIdentitySettings", args ?? new GetDomainsIdentitySettingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainsIdentitySettingsArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributeSets")]
        private List<string>? _attributeSets;

        /// <summary>
        /// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        /// </summary>
        public List<string> AttributeSets
        {
            get => _attributeSets ?? (_attributeSets = new List<string>());
            set => _attributeSets = value;
        }

        /// <summary>
        /// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        /// </summary>
        [Input("attributes")]
        public string? Attributes { get; set; }

        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public string? Authorization { get; set; }

        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint", required: true)]
        public string IdcsEndpoint { get; set; } = null!;

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public string? ResourceTypeSchemaVersion { get; set; }

        public GetDomainsIdentitySettingsArgs()
        {
        }
        public static new GetDomainsIdentitySettingsArgs Empty => new GetDomainsIdentitySettingsArgs();
    }

    public sealed class GetDomainsIdentitySettingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attributeSets")]
        private InputList<string>? _attributeSets;

        /// <summary>
        /// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
        /// </summary>
        public InputList<string> AttributeSets
        {
            get => _attributeSets ?? (_attributeSets = new InputList<string>());
            set => _attributeSets = value;
        }

        /// <summary>
        /// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
        /// </summary>
        [Input("attributes")]
        public Input<string>? Attributes { get; set; }

        /// <summary>
        /// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
        /// </summary>
        [Input("authorization")]
        public Input<string>? Authorization { get; set; }

        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The basic endpoint for the identity domain
        /// </summary>
        [Input("idcsEndpoint", required: true)]
        public Input<string> IdcsEndpoint { get; set; } = null!;

        /// <summary>
        /// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
        /// </summary>
        [Input("resourceTypeSchemaVersion")]
        public Input<string>? ResourceTypeSchemaVersion { get; set; }

        public GetDomainsIdentitySettingsInvokeArgs()
        {
        }
        public static new GetDomainsIdentitySettingsInvokeArgs Empty => new GetDomainsIdentitySettingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainsIdentitySettingsResult
    {
        public readonly ImmutableArray<string> AttributeSets;
        public readonly string? Attributes;
        public readonly string? Authorization;
        public readonly string? CompartmentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdcsEndpoint;
        /// <summary>
        /// The list of identity_settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsIdentitySettingsIdentitySettingResult> IdentitySettings;
        public readonly int ItemsPerPage;
        public readonly string? ResourceTypeSchemaVersion;
        /// <summary>
        /// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
        /// </summary>
        public readonly ImmutableArray<string> Schemas;
        public readonly int StartIndex;
        public readonly int TotalResults;

        [OutputConstructor]
        private GetDomainsIdentitySettingsResult(
            ImmutableArray<string> attributeSets,

            string? attributes,

            string? authorization,

            string? compartmentId,

            string id,

            string idcsEndpoint,

            ImmutableArray<Outputs.GetDomainsIdentitySettingsIdentitySettingResult> identitySettings,

            int itemsPerPage,

            string? resourceTypeSchemaVersion,

            ImmutableArray<string> schemas,

            int startIndex,

            int totalResults)
        {
            AttributeSets = attributeSets;
            Attributes = attributes;
            Authorization = authorization;
            CompartmentId = compartmentId;
            Id = id;
            IdcsEndpoint = idcsEndpoint;
            IdentitySettings = identitySettings;
            ItemsPerPage = itemsPerPage;
            ResourceTypeSchemaVersion = resourceTypeSchemaVersion;
            Schemas = schemas;
            StartIndex = startIndex;
            TotalResults = totalResults;
        }
    }
}
