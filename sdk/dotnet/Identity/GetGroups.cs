// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetGroups
    {
        /// <summary>
        /// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
        /// the compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testGroups = Oci.Identity.GetGroups.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         Name = groupName,
        ///         State = groupState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupsResult> InvokeAsync(GetGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupsResult>("oci:Identity/getGroups:getGroups", args ?? new GetGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
        /// the compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testGroups = Oci.Identity.GetGroups.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         Name = groupName,
        ///         State = groupState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupsResult> Invoke(GetGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsResult>("oci:Identity/getGroups:getGroups", args ?? new GetGroupsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
        /// the compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testGroups = Oci.Identity.GetGroups.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         Name = groupName,
        ///         State = groupState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupsResult> Invoke(GetGroupsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupsResult>("oci:Identity/getGroups:getGroups", args ?? new GetGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetGroupsFilterArgs>? _filters;
        public List<Inputs.GetGroupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetGroupsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetGroupsArgs()
        {
        }
        public static new GetGroupsArgs Empty => new GetGroupsArgs();
    }

    public sealed class GetGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetGroupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetGroupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetGroupsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetGroupsInvokeArgs()
        {
        }
        public static new GetGroupsInvokeArgs Empty => new GetGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupsResult
    {
        /// <summary>
        /// The OCID of the tenancy containing the group.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetGroupsFilterResult> Filters;
        /// <summary>
        /// The list of groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The group's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetGroupsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetGroupsFilterResult> filters,

            ImmutableArray<Outputs.GetGroupsGroupResult> groups,

            string id,

            string? name,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Groups = groups;
            Id = id;
            Name = name;
            State = state;
        }
    }
}
