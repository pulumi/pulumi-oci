// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetTagNamespaces
    {
        /// <summary>
        /// This data source provides the list of Tag Namespaces in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the tag namespaces in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTagNamespaces = Oci.Identity.GetTagNamespaces.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         IncludeSubcompartments = @var.Tag_namespace_include_subcompartments,
        ///         State = @var.Tag_namespace_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTagNamespacesResult> InvokeAsync(GetTagNamespacesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTagNamespacesResult>("oci:Identity/getTagNamespaces:getTagNamespaces", args ?? new GetTagNamespacesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Tag Namespaces in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the tag namespaces in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTagNamespaces = Oci.Identity.GetTagNamespaces.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         IncludeSubcompartments = @var.Tag_namespace_include_subcompartments,
        ///         State = @var.Tag_namespace_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTagNamespacesResult> Invoke(GetTagNamespacesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTagNamespacesResult>("oci:Identity/getTagNamespaces:getTagNamespaces", args ?? new GetTagNamespacesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTagNamespacesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetTagNamespacesFilterArgs>? _filters;
        public List<Inputs.GetTagNamespacesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTagNamespacesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
        /// </summary>
        [Input("includeSubcompartments")]
        public bool? IncludeSubcompartments { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetTagNamespacesArgs()
        {
        }
        public static new GetTagNamespacesArgs Empty => new GetTagNamespacesArgs();
    }

    public sealed class GetTagNamespacesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetTagNamespacesFilterInputArgs>? _filters;
        public InputList<Inputs.GetTagNamespacesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTagNamespacesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// An optional boolean parameter indicating whether to retrieve all tag namespaces in subcompartments. If this parameter is not specified, only the tag namespaces defined in the specified compartment are retrieved.
        /// </summary>
        [Input("includeSubcompartments")]
        public Input<bool>? IncludeSubcompartments { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetTagNamespacesInvokeArgs()
        {
        }
        public static new GetTagNamespacesInvokeArgs Empty => new GetTagNamespacesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTagNamespacesResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the tag namespace.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetTagNamespacesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeSubcompartments;
        /// <summary>
        /// The tagnamespace's current state. After creating a tagnamespace, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tagnamespace, make sure its `lifecycleState` is INACTIVE before using it.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of tag_namespaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTagNamespacesTagNamespaceResult> TagNamespaces;

        [OutputConstructor]
        private GetTagNamespacesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetTagNamespacesFilterResult> filters,

            string id,

            bool? includeSubcompartments,

            string? state,

            ImmutableArray<Outputs.GetTagNamespacesTagNamespaceResult> tagNamespaces)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IncludeSubcompartments = includeSubcompartments;
            State = state;
            TagNamespaces = tagNamespaces;
        }
    }
}
