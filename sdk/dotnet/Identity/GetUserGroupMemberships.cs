// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetUserGroupMemberships
    {
        /// <summary>
        /// This data source provides the list of User Group Memberships in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
        /// as the value for the compartment ID
        /// (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five)).
        /// You must also then filter the list in one of these ways:
        /// 
        /// - You can limit the results to just the memberships for a given user by specifying a `userId`.
        /// - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
        /// - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
        /// If the answer is no, the response is an empty list.
        /// - Although`userId` and `groupId` are not individually required, you must set one of them.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserGroupMemberships = Oci.Identity.GetUserGroupMemberships.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         GroupId = testGroup.Id,
        ///         UserId = testUser.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserGroupMembershipsResult> InvokeAsync(GetUserGroupMembershipsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserGroupMembershipsResult>("oci:Identity/getUserGroupMemberships:getUserGroupMemberships", args ?? new GetUserGroupMembershipsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of User Group Memberships in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
        /// as the value for the compartment ID
        /// (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five)).
        /// You must also then filter the list in one of these ways:
        /// 
        /// - You can limit the results to just the memberships for a given user by specifying a `userId`.
        /// - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
        /// - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
        /// If the answer is no, the response is an empty list.
        /// - Although`userId` and `groupId` are not individually required, you must set one of them.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserGroupMemberships = Oci.Identity.GetUserGroupMemberships.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         GroupId = testGroup.Id,
        ///         UserId = testUser.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserGroupMembershipsResult> Invoke(GetUserGroupMembershipsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupMembershipsResult>("oci:Identity/getUserGroupMemberships:getUserGroupMemberships", args ?? new GetUserGroupMembershipsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of User Group Memberships in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the `UserGroupMembership` objects in your tenancy. You must specify your tenancy's OCID
        /// as the value for the compartment ID
        /// (see [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five)).
        /// You must also then filter the list in one of these ways:
        /// 
        /// - You can limit the results to just the memberships for a given user by specifying a `userId`.
        /// - Similarly, you can limit the results to just the memberships for a given group by specifying a `groupId`.
        /// - You can set both the `userId` and `groupId` to determine if the specified user is in the specified group.
        /// If the answer is no, the response is an empty list.
        /// - Although`userId` and `groupId` are not individually required, you must set one of them.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUserGroupMemberships = Oci.Identity.GetUserGroupMemberships.Invoke(new()
        ///     {
        ///         CompartmentId = tenancyOcid,
        ///         GroupId = testGroup.Id,
        ///         UserId = testUser.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserGroupMembershipsResult> Invoke(GetUserGroupMembershipsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupMembershipsResult>("oci:Identity/getUserGroupMemberships:getUserGroupMemberships", args ?? new GetUserGroupMembershipsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserGroupMembershipsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetUserGroupMembershipsFilterArgs>? _filters;
        public List<Inputs.GetUserGroupMembershipsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUserGroupMembershipsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the group.
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// The OCID of the user.
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        public GetUserGroupMembershipsArgs()
        {
        }
        public static new GetUserGroupMembershipsArgs Empty => new GetUserGroupMembershipsArgs();
    }

    public sealed class GetUserGroupMembershipsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetUserGroupMembershipsFilterInputArgs>? _filters;
        public InputList<Inputs.GetUserGroupMembershipsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUserGroupMembershipsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the group.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The OCID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetUserGroupMembershipsInvokeArgs()
        {
        }
        public static new GetUserGroupMembershipsInvokeArgs Empty => new GetUserGroupMembershipsInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserGroupMembershipsResult
    {
        /// <summary>
        /// The OCID of the tenancy containing the user, group, and membership object.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetUserGroupMembershipsFilterResult> Filters;
        /// <summary>
        /// The OCID of the group.
        /// </summary>
        public readonly string? GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of memberships.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupMembershipsMembershipResult> Memberships;
        /// <summary>
        /// The OCID of the user.
        /// </summary>
        public readonly string? UserId;

        [OutputConstructor]
        private GetUserGroupMembershipsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetUserGroupMembershipsFilterResult> filters,

            string? groupId,

            string id,

            ImmutableArray<Outputs.GetUserGroupMembershipsMembershipResult> memberships,

            string? userId)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            GroupId = groupId;
            Id = id;
            Memberships = memberships;
            UserId = userId;
        }
    }
}
