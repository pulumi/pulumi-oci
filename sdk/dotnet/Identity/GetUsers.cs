// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    public static class GetUsers
    {
        /// <summary>
        /// This data source provides the list of Users in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the users in your tenancy. You must specify your tenancy's OCID as the value for the
        /// compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsers = Oci.Identity.GetUsers.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         ExternalIdentifier = @var.User_external_identifier,
        ///         IdentityProviderId = oci_identity_identity_provider.Test_identity_provider.Id,
        ///         Name = @var.User_name,
        ///         State = @var.User_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("oci:Identity/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Users in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the users in your tenancy. You must specify your tenancy's OCID as the value for the
        /// compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsers = Oci.Identity.GetUsers.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         ExternalIdentifier = @var.User_external_identifier,
        ///         IdentityProviderId = oci_identity_identity_provider.Test_identity_provider.Id,
        ///         Name = @var.User_name,
        ///         State = @var.User_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("oci:Identity/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The id of a user in the identity provider.
        /// </summary>
        [Input("externalIdentifier")]
        public string? ExternalIdentifier { get; set; }

        [Input("filters")]
        private List<Inputs.GetUsersFilterArgs>? _filters;
        public List<Inputs.GetUsersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUsersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of the identity provider.
        /// </summary>
        [Input("identityProviderId")]
        public string? IdentityProviderId { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The id of a user in the identity provider.
        /// </summary>
        [Input("externalIdentifier")]
        public Input<string>? ExternalIdentifier { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetUsersFilterInputArgs>? _filters;
        public InputList<Inputs.GetUsersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUsersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of the identity provider.
        /// </summary>
        [Input("identityProviderId")]
        public Input<string>? IdentityProviderId { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The OCID of the tenancy containing the user.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Identifier of the user in the identity provider
        /// </summary>
        public readonly string? ExternalIdentifier;
        public readonly ImmutableArray<Outputs.GetUsersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the `IdentityProvider` this user belongs to.
        /// </summary>
        public readonly string? IdentityProviderId;
        /// <summary>
        /// The name you assign to the user during creation. This is the user's login for the Console. The name must be unique across all users in the tenancy and cannot be changed.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The user's current state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of users.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string compartmentId,

            string? externalIdentifier,

            ImmutableArray<Outputs.GetUsersFilterResult> filters,

            string id,

            string? identityProviderId,

            string? name,

            string? state,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            CompartmentId = compartmentId;
            ExternalIdentifier = externalIdentifier;
            Filters = filters;
            Id = id;
            IdentityProviderId = identityProviderId;
            Name = name;
            State = state;
            Users = users;
        }
    }
}
