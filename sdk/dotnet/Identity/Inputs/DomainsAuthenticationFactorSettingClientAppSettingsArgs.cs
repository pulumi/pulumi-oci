// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity.Inputs
{

    public sealed class DomainsAuthenticationFactorSettingClientAppSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Indicates what protection policy that the system applies on a device. By default, the value is NONE, which indicates that the system applies no protection policy. A value of APP_PIN indicates that the system requires a Personal Identification Number (PIN). A value of DEVICE_BIOMETRIC_OR_APP_PIN indicates that either a PIN or a biometric authentication factor is required.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsCanonicalValueSourceFilter: attrName eq "deviceProtectionPolicy" and attrValues.value eq "$(deviceProtectionPolicy)"
        /// * idcsCanonicalValueSourceResourceType: AllowedValue
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("deviceProtectionPolicy", required: true)]
        public Input<string> DeviceProtectionPolicy { get; set; } = null!;

        /// <summary>
        /// (Updatable) The period of time in seconds that the system will lock a user out of the service after that user exceeds the maximum number of login failures
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 86400
        /// * idcsMinValue: 30
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("initialLockoutPeriodInSecs", required: true)]
        public Input<int> InitialLockoutPeriodInSecs { get; set; } = null!;

        /// <summary>
        /// (Updatable) The size of the key that the system uses to generate the public-private key pair
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 4000
        /// * idcsMinValue: 32
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("keyPairLength", required: true)]
        public Input<int> KeyPairLength { get; set; } = null!;

        /// <summary>
        /// (Updatable) The pattern of escalation that the system follows, in locking a particular user out of the service.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsCanonicalValueSourceFilter: attrName eq "lockoutEscalationPattern" and attrValues.value eq "$(lockoutEscalationPattern)"
        /// * idcsCanonicalValueSourceResourceType: AllowedValue
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("lockoutEscalationPattern", required: true)]
        public Input<string> LockoutEscalationPattern { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of times that a particular user can fail to login before the system locks that user out of the service
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 10
        /// * idcsMinValue: 5
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("maxFailuresBeforeLockout", required: true)]
        public Input<int> MaxFailuresBeforeLockout { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of login failures that the system will allow before raising a warning and sending an alert via email
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 10
        /// * idcsMinValue: 0
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("maxFailuresBeforeWarning", required: true)]
        public Input<int> MaxFailuresBeforeWarning { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum period of time that the system will lock a particular user out of the service regardless of what the configured pattern of escalation would otherwise dictate
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 86400
        /// * idcsMinValue: 30
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("maxLockoutIntervalInSecs", required: true)]
        public Input<int> MaxLockoutIntervalInSecs { get; set; } = null!;

        /// <summary>
        /// (Updatable) Minimum length of the Personal Identification Number (PIN)
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 10
        /// * idcsMinValue: 6
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("minPinLength", required: true)]
        public Input<int> MinPinLength { get; set; } = null!;

        /// <summary>
        /// (Updatable) The period of time in days after which a client should refresh its policy by re-reading that policy from the server
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 999
        /// * idcsMinValue: 1
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("policyUpdateFreqInDays", required: true)]
        public Input<int> PolicyUpdateFreqInDays { get; set; } = null!;

        /// <summary>
        /// (Updatable) Indicates which algorithm the system will use to sign requests
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("requestSigningAlgo", required: true)]
        public Input<string> RequestSigningAlgo { get; set; } = null!;

        /// <summary>
        /// (Updatable) Indicates the type of encoding that the system should use to generate a shared secret
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        [Input("sharedSecretEncoding", required: true)]
        public Input<string> SharedSecretEncoding { get; set; } = null!;

        /// <summary>
        /// (Updatable) If true, indicates that the system should require the user to unlock the client app for each request. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        [Input("unlockAppForEachRequestEnabled", required: true)]
        public Input<bool> UnlockAppForEachRequestEnabled { get; set; } = null!;

        /// <summary>
        /// (Updatable) Specifies the period of time in seconds after which the client App should require the user to unlock the App. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor. A value of zero means that it is disabled.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsMaxValue: 9999999
        /// * idcsMinValue: 0
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        [Input("unlockAppIntervalInSecs", required: true)]
        public Input<int> UnlockAppIntervalInSecs { get; set; } = null!;

        /// <summary>
        /// (Updatable) If true, indicates that the system should require the user to unlock the client App, when the client App comes to the foreground in the display of the device. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        [Input("unlockOnAppForegroundEnabled", required: true)]
        public Input<bool> UnlockOnAppForegroundEnabled { get; set; } = null!;

        /// <summary>
        /// (Updatable) If true, indicates that the system should require the user to unlock the client App whenever the App is started. In order to unlock the App, the user must supply a Personal Identification Number (PIN) or a biometric authentication-factor.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: true
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        [Input("unlockOnAppStartEnabled", required: true)]
        public Input<bool> UnlockOnAppStartEnabled { get; set; } = null!;

        public DomainsAuthenticationFactorSettingClientAppSettingsArgs()
        {
        }
        public static new DomainsAuthenticationFactorSettingClientAppSettingsArgs Empty => new DomainsAuthenticationFactorSettingClientAppSettingsArgs();
    }
}
