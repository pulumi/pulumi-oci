// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity.Inputs
{

    public sealed class DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs : global::Pulumi.ResourceArgs
    {
        [Input("bypassCodes")]
        private InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>? _bypassCodes;

        /// <summary>
        /// (Updatable) A list of bypass codes belongs to user
        /// </summary>
        public InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs> BypassCodes
        {
            get => _bypassCodes ?? (_bypassCodes = new InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserBypassCodeArgs>());
            set => _bypassCodes = value;
        }

        [Input("devices")]
        private InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>? _devices;

        /// <summary>
        /// (Updatable) A list of devices enrolled by the user.
        /// </summary>
        public InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserDeviceArgs>());
            set => _devices = value;
        }

        /// <summary>
        /// (Updatable) The number of failed login attempts. The value is reset to 0 after a successful login.
        /// </summary>
        [Input("loginAttempts")]
        public Input<int>? LoginAttempts { get; set; }

        /// <summary>
        /// (Updatable) This represents the date when the user enrolled for multi factor authentication. This will be set to null, when the user resets his factors.
        /// </summary>
        [Input("mfaEnabledOn")]
        public Input<string>? MfaEnabledOn { get; set; }

        [Input("mfaIgnoredApps")]
        private InputList<string>? _mfaIgnoredApps;

        /// <summary>
        /// (Updatable) User MFA Ignored Apps Identifiers
        /// </summary>
        public InputList<string> MfaIgnoredApps
        {
            get => _mfaIgnoredApps ?? (_mfaIgnoredApps = new InputList<string>());
            set => _mfaIgnoredApps = value;
        }

        /// <summary>
        /// (Updatable) User Opted for MFA
        /// </summary>
        [Input("mfaStatus")]
        public Input<string>? MfaStatus { get; set; }

        /// <summary>
        /// (Updatable) Preferred Authentication Factor Type
        /// </summary>
        [Input("preferredAuthenticationFactor")]
        public Input<string>? PreferredAuthenticationFactor { get; set; }

        /// <summary>
        /// (Updatable) Preferred Authentication method
        /// </summary>
        [Input("preferredAuthenticationMethod")]
        public Input<string>? PreferredAuthenticationMethod { get; set; }

        /// <summary>
        /// (Updatable) User preferred device
        /// </summary>
        [Input("preferredDevice")]
        public Input<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserPreferredDeviceArgs>? PreferredDevice { get; set; }

        /// <summary>
        /// (Updatable) Preferred Third party vendor name
        /// </summary>
        [Input("preferredThirdPartyVendor")]
        public Input<string>? PreferredThirdPartyVendor { get; set; }

        [Input("trustedUserAgents")]
        private InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>? _trustedUserAgents;

        /// <summary>
        /// (Updatable) A list of trusted User Agents owned by this user. Multi-Factored Authentication uses Trusted User Agents to authenticate users.  A User Agent is software application that a user uses to issue requests. For example, a User Agent could be a particular browser (possibly one of several executing on a desktop or laptop) or a particular mobile application (again, oneof several executing on a particular mobile device). A User Agent is trusted once the Multi-Factor Authentication has verified it in some way.
        /// </summary>
        public InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs> TrustedUserAgents
        {
            get => _trustedUserAgents ?? (_trustedUserAgents = new InputList<Inputs.DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserTrustedUserAgentArgs>());
            set => _trustedUserAgents = value;
        }

        public DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs()
        {
        }
        public static new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs Empty => new DomainsUserUrnietfparamsscimschemasoracleidcsextensionmfaUserArgs();
    }
}
