// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity.Outputs
{

    [OutputType]
    public sealed class DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp
    {
        /// <summary>
        /// (Updatable) The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? DefaultEncryptionSaltType;
        /// <summary>
        /// (Updatable) The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * idcsSensitive: none
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? MasterKey;
        /// <summary>
        /// (Updatable) Max Renewable Age in seconds
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        public readonly int? MaxRenewableAge;
        /// <summary>
        /// (Updatable) Max Ticket Life in seconds
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        public readonly int? MaxTicketLife;
        /// <summary>
        /// (Updatable) The name of the Kerberos Realm that this App uses for authentication.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? RealmName;
        /// <summary>
        /// (Updatable) The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly ImmutableArray<string> SupportedEncryptionSaltTypes;
        /// <summary>
        /// (Updatable) Ticket Flags
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: integer
        /// * uniqueness: none
        /// </summary>
        public readonly int? TicketFlags;

        [OutputConstructor]
        private DomainsAppUrnietfparamsscimschemasoracleidcsextensionkerberosRealmApp(
            string? defaultEncryptionSaltType,

            string? masterKey,

            int? maxRenewableAge,

            int? maxTicketLife,

            string? realmName,

            ImmutableArray<string> supportedEncryptionSaltTypes,

            int? ticketFlags)
        {
            DefaultEncryptionSaltType = defaultEncryptionSaltType;
            MasterKey = masterKey;
            MaxRenewableAge = maxRenewableAge;
            MaxTicketLife = maxTicketLife;
            RealmName = realmName;
            SupportedEncryptionSaltTypes = supportedEncryptionSaltTypes;
            TicketFlags = ticketFlags;
        }
    }
}
