// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity.Outputs
{

    [OutputType]
    public sealed class DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp
    {
        /// <summary>
        /// (Updatable) The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? AssertionConsumerUrl;
        /// <summary>
        /// (Updatable) If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        public readonly bool? EncryptAssertion;
        /// <summary>
        /// (Updatable) This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? EncryptionAlgorithm;
        /// <summary>
        /// (Updatable) This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? EncryptionCertificate;
        /// <summary>
        /// (Updatable) Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
        /// 
        /// **Added In:** 18.2.6
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsDefaultValue: SAML2.0
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? FederationProtocol;
        /// <summary>
        /// (Updatable) Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// 
        /// **Deprecated Since: 18.2.2**
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [name]
        /// * idcsSearchable: false
        /// * idcsValuePersistedInOtherAttribute: true
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> GroupAssertionAttributes;
        /// <summary>
        /// (Updatable) Hok Assertion Consumer Service Url
        /// 
        /// **Added In:** 2101262133
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? HokAcsUrl;
        /// <summary>
        /// (Updatable) If enabled, then the SAML Service supports Hok for this App.
        /// 
        /// **Added In:** 2101262133
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        public readonly bool? HokRequired;
        /// <summary>
        /// (Updatable) If true, then the signing certificate is included in the signature.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        public readonly bool? IncludeSigningCertInSignature;
        /// <summary>
        /// (Updatable) This attribute indicates the key encryption algorithm.
        /// 
        /// **Added In:** 18.4.2
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? KeyEncryptionAlgorithm;
        /// <summary>
        /// (Updatable) Records the notification timestamp for the SP whose signing certificate is about to expire.
        /// 
        /// **Added In:** 2302092332
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: dateTime
        /// * uniqueness: none
        /// </summary>
        public readonly string? LastNotificationSentTime;
        /// <summary>
        /// (Updatable) This attribute represents the HTTP binding that would be used while logout.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? LogoutBinding;
        /// <summary>
        /// (Updatable) If true, then the SAML Service supports logout for this App.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: boolean
        /// * uniqueness: none
        /// </summary>
        public readonly bool? LogoutEnabled;
        /// <summary>
        /// (Updatable) The URL to which the partner sends the logout request.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? LogoutRequestUrl;
        /// <summary>
        /// (Updatable) The URL to which the partner sends the logout response.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? LogoutResponseUrl;
        /// <summary>
        /// (Updatable) This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? Metadata;
        /// <summary>
        /// (Updatable) This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? NameIdFormat;
        /// <summary>
        /// (Updatable) **Deprecated Since: 18.2.2**
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * idcsValuePersistedInOtherAttribute: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none This property specifies which user attribute is used as the NameID value in the SAML assertion. This attribute can be constructed by using attributes from the Oracle Identity Cloud Service Core Users schema.
        /// </summary>
        public readonly string? NameIdUserstoreAttribute;
        /// <summary>
        /// (Updatable) Use to construct the outgoing SAML attributes
        /// 
        /// **Added In:** 18.2.6
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [value]
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> OutboundAssertionAttributes;
        /// <summary>
        /// (Updatable) The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? PartnerProviderId;
        /// <summary>
        /// (Updatable) The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// 
        /// **Added In:** 2202230830
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: request
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? PartnerProviderPattern;
        /// <summary>
        /// (Updatable) Indicates which part of the response should be signed.  A value of \"Assertion\" indicates that the Assertion should be signed.  A value of \"Response\" indicates that the SSO Response should be signed. A value of \"AssertionAndResponse\" indicates that both the Assertion and the SSO Response should be signed.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? SignResponseOrAssertion;
        /// <summary>
        /// (Updatable) This attribute represents the algorithm used to hash the signature.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? SignatureHashAlgorithm;
        /// <summary>
        /// (Updatable) This attribute represents the signing certificate that an App uses to verify the signed authentication request.
        /// 
        /// **SCIM++ Properties:**
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? SigningCertificate;
        /// <summary>
        /// (Updatable) This attribute represents the Succinct ID.
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: true
        /// * multiValued: false
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: server
        /// </summary>
        public readonly string? SuccinctId;
        /// <summary>
        /// (Updatable) The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
        /// 
        /// **Added In:** 19.2.1
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: true
        /// * idcsSearchable: false
        /// * multiValued: false
        /// * mutability: readOnly
        /// * required: false
        /// * returned: default
        /// * type: string
        /// * uniqueness: none
        /// </summary>
        public readonly string? TenantProviderId;
        /// <summary>
        /// (Updatable) Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// 
        /// **Deprecated Since: 18.2.2**
        /// 
        /// **SCIM++ Properties:**
        /// * caseExact: false
        /// * idcsCompositeKey: [name]
        /// * idcsSearchable: false
        /// * idcsValuePersistedInOtherAttribute: true
        /// * multiValued: true
        /// * mutability: readWrite
        /// * required: false
        /// * returned: default
        /// * type: complex
        /// * uniqueness: none
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> UserAssertionAttributes;

        [OutputConstructor]
        private DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderApp(
            string? assertionConsumerUrl,

            bool? encryptAssertion,

            string? encryptionAlgorithm,

            string? encryptionCertificate,

            string? federationProtocol,

            ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttribute> groupAssertionAttributes,

            string? hokAcsUrl,

            bool? hokRequired,

            bool? includeSigningCertInSignature,

            string? keyEncryptionAlgorithm,

            string? lastNotificationSentTime,

            string? logoutBinding,

            bool? logoutEnabled,

            string? logoutRequestUrl,

            string? logoutResponseUrl,

            string? metadata,

            string? nameIdFormat,

            string? nameIdUserstoreAttribute,

            ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttribute> outboundAssertionAttributes,

            string? partnerProviderId,

            string? partnerProviderPattern,

            string? signResponseOrAssertion,

            string? signatureHashAlgorithm,

            string? signingCertificate,

            string? succinctId,

            string? tenantProviderId,

            ImmutableArray<Outputs.DomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttribute> userAssertionAttributes)
        {
            AssertionConsumerUrl = assertionConsumerUrl;
            EncryptAssertion = encryptAssertion;
            EncryptionAlgorithm = encryptionAlgorithm;
            EncryptionCertificate = encryptionCertificate;
            FederationProtocol = federationProtocol;
            GroupAssertionAttributes = groupAssertionAttributes;
            HokAcsUrl = hokAcsUrl;
            HokRequired = hokRequired;
            IncludeSigningCertInSignature = includeSigningCertInSignature;
            KeyEncryptionAlgorithm = keyEncryptionAlgorithm;
            LastNotificationSentTime = lastNotificationSentTime;
            LogoutBinding = logoutBinding;
            LogoutEnabled = logoutEnabled;
            LogoutRequestUrl = logoutRequestUrl;
            LogoutResponseUrl = logoutResponseUrl;
            Metadata = metadata;
            NameIdFormat = nameIdFormat;
            NameIdUserstoreAttribute = nameIdUserstoreAttribute;
            OutboundAssertionAttributes = outboundAssertionAttributes;
            PartnerProviderId = partnerProviderId;
            PartnerProviderPattern = partnerProviderPattern;
            SignResponseOrAssertion = signResponseOrAssertion;
            SignatureHashAlgorithm = signatureHashAlgorithm;
            SigningCertificate = signingCertificate;
            SuccinctId = succinctId;
            TenantProviderId = tenantProviderId;
            UserAssertionAttributes = userAssertionAttributes;
        }
    }
}
