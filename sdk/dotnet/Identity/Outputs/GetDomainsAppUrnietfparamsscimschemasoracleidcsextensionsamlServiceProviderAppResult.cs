// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity.Outputs
{

    [OutputType]
    public sealed class GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult
    {
        /// <summary>
        /// The attribute represents the URL to which the SAML Assertions will be sent by the SAML IdP.
        /// </summary>
        public readonly string AssertionConsumerUrl;
        /// <summary>
        /// If true, indicates that the system must encrypt the Security Assertion Markup Language (SAML) assertion.
        /// </summary>
        public readonly bool EncryptAssertion;
        /// <summary>
        /// This attribute indicates the encryption algorithm used to encrypt the SAML assertion.
        /// </summary>
        public readonly string EncryptionAlgorithm;
        /// <summary>
        /// This attribute represents the encryption certificate that an App uses to encrypt the Security Assertion Markup Language (SAML) assertion.
        /// </summary>
        public readonly string EncryptionCertificate;
        /// <summary>
        /// Specifies the preferred federation protocol (SAML2.0 or WS-Fed1.1).
        /// </summary>
        public readonly string FederationProtocol;
        /// <summary>
        /// Each value of this attribute describes an attribute of Group that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult> GroupAssertionAttributes;
        /// <summary>
        /// Hok Assertion Consumer Service Url
        /// </summary>
        public readonly string HokAcsUrl;
        /// <summary>
        /// If enabled, then the SAML Service supports Hok for this App.
        /// </summary>
        public readonly bool HokRequired;
        /// <summary>
        /// If true, then the signing certificate is included in the signature.
        /// </summary>
        public readonly bool IncludeSigningCertInSignature;
        /// <summary>
        /// This attribute indicates the key encryption algorithm.
        /// </summary>
        public readonly string KeyEncryptionAlgorithm;
        /// <summary>
        /// Records the notification timestamp for the SP whose signing certificate is about to expire.
        /// </summary>
        public readonly string LastNotificationSentTime;
        /// <summary>
        /// This attribute represents the HTTP binding that would be used while logout.
        /// </summary>
        public readonly string LogoutBinding;
        /// <summary>
        /// If true, then the SAML Service supports logout for this App.
        /// </summary>
        public readonly bool LogoutEnabled;
        /// <summary>
        /// The URL to which the partner sends the logout request.
        /// </summary>
        public readonly string LogoutRequestUrl;
        /// <summary>
        /// The URL to which the partner sends the logout response.
        /// </summary>
        public readonly string LogoutResponseUrl;
        /// <summary>
        /// This attribute represents the metadata of a Security Provider in the Security Assertion Markup Language protocol.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// This can be any string, but there are a set of standard nameIdFormats. If a nameIdFormat other than the standard list is chosen, it will be considered a custom nameidformat. The standard nameidformats include: saml-x509, saml-emailaddress, saml-windowsnamequalifier, saml-kerberos, saml-persistent, saml-transient, saml-unspecified, saml-none, and saml-persistent-opaque.
        /// </summary>
        public readonly string NameIdFormat;
        /// <summary>
        /// **Deprecated Since: 18.2.2**
        /// </summary>
        public readonly string NameIdUserstoreAttribute;
        /// <summary>
        /// Use to construct the outgoing SAML attributes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult> OutboundAssertionAttributes;
        /// <summary>
        /// The ID of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// </summary>
        public readonly string PartnerProviderId;
        /// <summary>
        /// The pattern of the Provider. This value corresponds to the entityID from the Service Provider metadata.
        /// </summary>
        public readonly string PartnerProviderPattern;
        /// <summary>
        /// Indicates which part of the response should be signed.  A value of \"Assertion\" indicates that the Assertion should be signed.  A value of \"Response\" indicates that the SSO Response should be signed. A value of \"AssertionAndResponse\" indicates that both the Assertion and the SSO Response should be signed.
        /// </summary>
        public readonly string SignResponseOrAssertion;
        /// <summary>
        /// This attribute represents the algorithm used to hash the signature.
        /// </summary>
        public readonly string SignatureHashAlgorithm;
        /// <summary>
        /// This attribute represents the signing certificate that an App uses to verify the signed authentication request.
        /// </summary>
        public readonly string SigningCertificate;
        /// <summary>
        /// This attribute represents the Succinct ID.
        /// </summary>
        public readonly string SuccinctId;
        /// <summary>
        /// The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this SP.
        /// </summary>
        public readonly string TenantProviderId;
        /// <summary>
        /// Each value of this attribute describes an attribute of User that will be sent in a Security Assertion Markup Language (SAML) assertion.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult> UserAssertionAttributes;

        [OutputConstructor]
        private GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppResult(
            string assertionConsumerUrl,

            bool encryptAssertion,

            string encryptionAlgorithm,

            string encryptionCertificate,

            string federationProtocol,

            ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppGroupAssertionAttributeResult> groupAssertionAttributes,

            string hokAcsUrl,

            bool hokRequired,

            bool includeSigningCertInSignature,

            string keyEncryptionAlgorithm,

            string lastNotificationSentTime,

            string logoutBinding,

            bool logoutEnabled,

            string logoutRequestUrl,

            string logoutResponseUrl,

            string metadata,

            string nameIdFormat,

            string nameIdUserstoreAttribute,

            ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppOutboundAssertionAttributeResult> outboundAssertionAttributes,

            string partnerProviderId,

            string partnerProviderPattern,

            string signResponseOrAssertion,

            string signatureHashAlgorithm,

            string signingCertificate,

            string succinctId,

            string tenantProviderId,

            ImmutableArray<Outputs.GetDomainsAppUrnietfparamsscimschemasoracleidcsextensionsamlServiceProviderAppUserAssertionAttributeResult> userAssertionAttributes)
        {
            AssertionConsumerUrl = assertionConsumerUrl;
            EncryptAssertion = encryptAssertion;
            EncryptionAlgorithm = encryptionAlgorithm;
            EncryptionCertificate = encryptionCertificate;
            FederationProtocol = federationProtocol;
            GroupAssertionAttributes = groupAssertionAttributes;
            HokAcsUrl = hokAcsUrl;
            HokRequired = hokRequired;
            IncludeSigningCertInSignature = includeSigningCertInSignature;
            KeyEncryptionAlgorithm = keyEncryptionAlgorithm;
            LastNotificationSentTime = lastNotificationSentTime;
            LogoutBinding = logoutBinding;
            LogoutEnabled = logoutEnabled;
            LogoutRequestUrl = logoutRequestUrl;
            LogoutResponseUrl = logoutResponseUrl;
            Metadata = metadata;
            NameIdFormat = nameIdFormat;
            NameIdUserstoreAttribute = nameIdUserstoreAttribute;
            OutboundAssertionAttributes = outboundAssertionAttributes;
            PartnerProviderId = partnerProviderId;
            PartnerProviderPattern = partnerProviderPattern;
            SignResponseOrAssertion = signResponseOrAssertion;
            SignatureHashAlgorithm = signatureHashAlgorithm;
            SigningCertificate = signingCertificate;
            SuccinctId = succinctId;
            TenantProviderId = tenantProviderId;
            UserAssertionAttributes = userAssertionAttributes;
        }
    }
}
