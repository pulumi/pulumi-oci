// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Identity
{
    /// <summary>
    /// This resource provides the User Capabilities Management resource in Oracle Cloud Infrastructure Identity service.
    /// 
    /// Manages the capabilities of the specified user.
    /// 
    /// **Important:** Deleting the User Capabilities Management leaves the User resource in its existing state (rather than returning to its defaults)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testUserCapabilitiesManagement = new Oci.Identity.UserCapabilitiesManagement("testUserCapabilitiesManagement", new()
    ///     {
    ///         UserId = oci_identity_user.User1.Id,
    ///         CanUseApiKeys = true,
    ///         CanUseAuthTokens = true,
    ///         CanUseConsolePassword = false,
    ///         CanUseCustomerSecretKeys = true,
    ///         CanUseSmtpCredentials = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Users can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement test_user_capabilities_management "capabilities/{userId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement")]
    public partial class UserCapabilitiesManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Indicates if the user can use API keys.
        /// </summary>
        [Output("canUseApiKeys")]
        public Output<bool> CanUseApiKeys { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
        /// </summary>
        [Output("canUseAuthTokens")]
        public Output<bool> CanUseAuthTokens { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if the user can log in to the console.
        /// </summary>
        [Output("canUseConsolePassword")]
        public Output<bool> CanUseConsolePassword { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if the user can use SigV4 symmetric keys.
        /// </summary>
        [Output("canUseCustomerSecretKeys")]
        public Output<bool> CanUseCustomerSecretKeys { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates if the user can use SMTP passwords.
        /// </summary>
        [Output("canUseSmtpCredentials")]
        public Output<bool> CanUseSmtpCredentials { get; private set; } = null!;

        /// <summary>
        /// The OCID of the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserCapabilitiesManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserCapabilitiesManagement(string name, UserCapabilitiesManagementArgs args, CustomResourceOptions? options = null)
            : base("oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement", name, args ?? new UserCapabilitiesManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserCapabilitiesManagement(string name, Input<string> id, UserCapabilitiesManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:Identity/userCapabilitiesManagement:UserCapabilitiesManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserCapabilitiesManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserCapabilitiesManagement Get(string name, Input<string> id, UserCapabilitiesManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new UserCapabilitiesManagement(name, id, state, options);
        }
    }

    public sealed class UserCapabilitiesManagementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Indicates if the user can use API keys.
        /// </summary>
        [Input("canUseApiKeys")]
        public Input<bool>? CanUseApiKeys { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
        /// </summary>
        [Input("canUseAuthTokens")]
        public Input<bool>? CanUseAuthTokens { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can log in to the console.
        /// </summary>
        [Input("canUseConsolePassword")]
        public Input<bool>? CanUseConsolePassword { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SigV4 symmetric keys.
        /// </summary>
        [Input("canUseCustomerSecretKeys")]
        public Input<bool>? CanUseCustomerSecretKeys { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SMTP passwords.
        /// </summary>
        [Input("canUseSmtpCredentials")]
        public Input<bool>? CanUseSmtpCredentials { get; set; }

        /// <summary>
        /// The OCID of the user.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public UserCapabilitiesManagementArgs()
        {
        }
        public static new UserCapabilitiesManagementArgs Empty => new UserCapabilitiesManagementArgs();
    }

    public sealed class UserCapabilitiesManagementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Indicates if the user can use API keys.
        /// </summary>
        [Input("canUseApiKeys")]
        public Input<bool>? CanUseApiKeys { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
        /// </summary>
        [Input("canUseAuthTokens")]
        public Input<bool>? CanUseAuthTokens { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can log in to the console.
        /// </summary>
        [Input("canUseConsolePassword")]
        public Input<bool>? CanUseConsolePassword { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SigV4 symmetric keys.
        /// </summary>
        [Input("canUseCustomerSecretKeys")]
        public Input<bool>? CanUseCustomerSecretKeys { get; set; }

        /// <summary>
        /// (Updatable) Indicates if the user can use SMTP passwords.
        /// </summary>
        [Input("canUseSmtpCredentials")]
        public Input<bool>? CanUseSmtpCredentials { get; set; }

        /// <summary>
        /// The OCID of the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserCapabilitiesManagementState()
        {
        }
        public static new UserCapabilitiesManagementState Empty => new UserCapabilitiesManagementState();
    }
}
