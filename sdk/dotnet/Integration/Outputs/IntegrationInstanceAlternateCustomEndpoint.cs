// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Integration.Outputs
{

    [OutputType]
    public sealed class IntegrationInstanceAlternateCustomEndpoint
    {
        /// <summary>
        /// When creating the DNS CNAME record for the custom hostname, this value must be specified in the rdata.
        /// </summary>
        public readonly string? Alias;
        /// <summary>
        /// (Updatable) Optional OCID of a vault/secret containing a private SSL certificate bundle to be used for the custom hostname. All certificates should be stored in a single base64 encoded secret Note the update will fail if this is not a valid certificate.
        /// </summary>
        public readonly string? CertificateSecretId;
        /// <summary>
        /// The secret version used for the certificate-secret-id (if certificate-secret-id is specified).
        /// </summary>
        public readonly int? CertificateSecretVersion;
        /// <summary>
        /// Type of DNS.
        /// </summary>
        public readonly string? DnsType;
        /// <summary>
        /// DNS Zone name
        /// </summary>
        public readonly string? DnsZoneName;
        /// <summary>
        /// (Updatable) A custom hostname to be used for the integration instance URL, in FQDN format.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// Indicates if custom endpoint is managed by oracle or customer.
        /// </summary>
        public readonly string? ManagedType;

        [OutputConstructor]
        private IntegrationInstanceAlternateCustomEndpoint(
            string? alias,

            string? certificateSecretId,

            int? certificateSecretVersion,

            string? dnsType,

            string? dnsZoneName,

            string hostname,

            string? managedType)
        {
            Alias = alias;
            CertificateSecretId = certificateSecretId;
            CertificateSecretVersion = certificateSecretVersion;
            DnsType = dnsType;
            DnsZoneName = dnsZoneName;
            Hostname = hostname;
            ManagedType = managedType;
        }
    }
}
