// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Jms
{
    public static class GetFleetCryptoAnalysisResult
    {
        /// <summary>
        /// This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
        /// 
        /// Retrieve the metadata for the result of a Crypto event analysis.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCryptoAnalysisResult = Oci.Jms.GetFleetCryptoAnalysisResult.Invoke(new()
        ///     {
        ///         CryptoAnalysisResultId = fleetCryptoAnalysisResultId,
        ///         FleetId = testFleet.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFleetCryptoAnalysisResultResult> InvokeAsync(GetFleetCryptoAnalysisResultArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFleetCryptoAnalysisResultResult>("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", args ?? new GetFleetCryptoAnalysisResultArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
        /// 
        /// Retrieve the metadata for the result of a Crypto event analysis.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCryptoAnalysisResult = Oci.Jms.GetFleetCryptoAnalysisResult.Invoke(new()
        ///     {
        ///         CryptoAnalysisResultId = fleetCryptoAnalysisResultId,
        ///         FleetId = testFleet.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetCryptoAnalysisResultResult> Invoke(GetFleetCryptoAnalysisResultInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetCryptoAnalysisResultResult>("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", args ?? new GetFleetCryptoAnalysisResultInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
        /// 
        /// Retrieve the metadata for the result of a Crypto event analysis.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testFleetCryptoAnalysisResult = Oci.Jms.GetFleetCryptoAnalysisResult.Invoke(new()
        ///     {
        ///         CryptoAnalysisResultId = fleetCryptoAnalysisResultId,
        ///         FleetId = testFleet.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFleetCryptoAnalysisResultResult> Invoke(GetFleetCryptoAnalysisResultInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFleetCryptoAnalysisResultResult>("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", args ?? new GetFleetCryptoAnalysisResultInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFleetCryptoAnalysisResultArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the analysis result.
        /// </summary>
        [Input("cryptoAnalysisResultId", required: true)]
        public string CryptoAnalysisResultId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        /// </summary>
        [Input("fleetId", required: true)]
        public string FleetId { get; set; } = null!;

        public GetFleetCryptoAnalysisResultArgs()
        {
        }
        public static new GetFleetCryptoAnalysisResultArgs Empty => new GetFleetCryptoAnalysisResultArgs();
    }

    public sealed class GetFleetCryptoAnalysisResultInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the analysis result.
        /// </summary>
        [Input("cryptoAnalysisResultId", required: true)]
        public Input<string> CryptoAnalysisResultId { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
        /// </summary>
        [Input("fleetId", required: true)]
        public Input<string> FleetId { get; set; } = null!;

        public GetFleetCryptoAnalysisResultInvokeArgs()
        {
        }
        public static new GetFleetCryptoAnalysisResultInvokeArgs Empty => new GetFleetCryptoAnalysisResultInvokeArgs();
    }


    [OutputType]
    public sealed class GetFleetCryptoAnalysisResultResult
    {
        /// <summary>
        /// The result aggregation mode
        /// </summary>
        public readonly string AggregationMode;
        /// <summary>
        /// The Object Storage bucket name of this analysis result.
        /// </summary>
        public readonly string Bucket;
        public readonly string CryptoAnalysisResultId;
        /// <summary>
        /// The Crypto Roadmap version used to perform the analysis.
        /// </summary>
        public readonly string CryptoRoadmapVersion;
        /// <summary>
        /// Total number of findings with the analysis.
        /// </summary>
        public readonly int FindingCount;
        /// <summary>
        /// The fleet OCID.
        /// </summary>
        public readonly string FleetId;
        /// <summary>
        /// The hostname of the managed instance.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed instance OCID.
        /// </summary>
        public readonly string ManagedInstanceId;
        /// <summary>
        /// The Object Storage namespace of this analysis result.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
        /// </summary>
        public readonly int NonCompliantFindingCount;
        /// <summary>
        /// The Object Storage object name of this analysis result.
        /// </summary>
        public readonly string Object;
        /// <summary>
        /// Total number of summarized events. Summarized events are deduplicated events of interest.
        /// </summary>
        public readonly int SummarizedEventCount;
        /// <summary>
        /// The time the result is compiled.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the JFR recording has finished.
        /// </summary>
        public readonly string TimeFinished;
        /// <summary>
        /// Time of the first event in the analysis.
        /// </summary>
        public readonly string TimeFirstEvent;
        /// <summary>
        /// Time of the last event in the analysis.
        /// </summary>
        public readonly string TimeLastEvent;
        /// <summary>
        /// The time the JFR recording has started.
        /// </summary>
        public readonly string TimeStarted;
        /// <summary>
        /// Total number of events in the analysis.
        /// </summary>
        public readonly int TotalEventCount;
        /// <summary>
        /// The OCID of the work request to start the analysis.
        /// </summary>
        public readonly string WorkRequestId;

        [OutputConstructor]
        private GetFleetCryptoAnalysisResultResult(
            string aggregationMode,

            string bucket,

            string cryptoAnalysisResultId,

            string cryptoRoadmapVersion,

            int findingCount,

            string fleetId,

            string hostName,

            string id,

            string managedInstanceId,

            string @namespace,

            int nonCompliantFindingCount,

            string @object,

            int summarizedEventCount,

            string timeCreated,

            string timeFinished,

            string timeFirstEvent,

            string timeLastEvent,

            string timeStarted,

            int totalEventCount,

            string workRequestId)
        {
            AggregationMode = aggregationMode;
            Bucket = bucket;
            CryptoAnalysisResultId = cryptoAnalysisResultId;
            CryptoRoadmapVersion = cryptoRoadmapVersion;
            FindingCount = findingCount;
            FleetId = fleetId;
            HostName = hostName;
            Id = id;
            ManagedInstanceId = managedInstanceId;
            Namespace = @namespace;
            NonCompliantFindingCount = nonCompliantFindingCount;
            Object = @object;
            SummarizedEventCount = summarizedEventCount;
            TimeCreated = timeCreated;
            TimeFinished = timeFinished;
            TimeFirstEvent = timeFirstEvent;
            TimeLastEvent = timeLastEvent;
            TimeStarted = timeStarted;
            TotalEventCount = totalEventCount;
            WorkRequestId = workRequestId;
        }
    }
}
