// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    /// <summary>
    /// This resource provides the Ekms Private Endpoint resource in Oracle Cloud Infrastructure Kms service.
    /// 
    /// Create a new EKMS private endpoint used to connect to external key manager system
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testEkmsPrivateEndpoint = new Oci.Kms.EkmsPrivateEndpoint("testEkmsPrivateEndpoint", new()
    ///     {
    ///         CaBundle = @var.Ekms_private_endpoint_ca_bundle,
    ///         CompartmentId = @var.Compartment_id,
    ///         DisplayName = @var.Ekms_private_endpoint_display_name,
    ///         ExternalKeyManagerIp = @var.Ekms_private_endpoint_external_key_manager_ip,
    ///         SubnetId = oci_core_subnet.Test_subnet.Id,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         Port = @var.Ekms_private_endpoint_port,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EkmsPrivateEndpoints can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint test_ekms_private_endpoint "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint")]
    public partial class EkmsPrivateEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// CABundle to validate TLS certificate of the external key manager system in PEM format
        /// </summary>
        [Output("caBundle")]
        public Output<string> CaBundle { get; private set; } = null!;

        /// <summary>
        /// Compartment identifier.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Display name of the EKMS private endpoint resource being created.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// External private IP to connect to from this EKMS private endpoint
        /// </summary>
        [Output("externalKeyManagerIp")]
        public Output<string> ExternalKeyManagerIp { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The port of the external key manager system
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
        /// </summary>
        [Output("privateEndpointIp")]
        public Output<string> PrivateEndpointIp { get; private set; } = null!;

        /// <summary>
        /// The current state of the EKMS private endpoint resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The OCID of subnet in which the EKMS private endpoint is to be created 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a EkmsPrivateEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EkmsPrivateEndpoint(string name, EkmsPrivateEndpointArgs args, CustomResourceOptions? options = null)
            : base("oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint", name, args ?? new EkmsPrivateEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EkmsPrivateEndpoint(string name, Input<string> id, EkmsPrivateEndpointState? state = null, CustomResourceOptions? options = null)
            : base("oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EkmsPrivateEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EkmsPrivateEndpoint Get(string name, Input<string> id, EkmsPrivateEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new EkmsPrivateEndpoint(name, id, state, options);
        }
    }

    public sealed class EkmsPrivateEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// CABundle to validate TLS certificate of the external key manager system in PEM format
        /// </summary>
        [Input("caBundle", required: true)]
        public Input<string> CaBundle { get; set; } = null!;

        /// <summary>
        /// Compartment identifier.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name of the EKMS private endpoint resource being created.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// External private IP to connect to from this EKMS private endpoint
        /// </summary>
        [Input("externalKeyManagerIp", required: true)]
        public Input<string> ExternalKeyManagerIp { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The port of the external key manager system
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The OCID of subnet in which the EKMS private endpoint is to be created 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public EkmsPrivateEndpointArgs()
        {
        }
        public static new EkmsPrivateEndpointArgs Empty => new EkmsPrivateEndpointArgs();
    }

    public sealed class EkmsPrivateEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// CABundle to validate TLS certificate of the external key manager system in PEM format
        /// </summary>
        [Input("caBundle")]
        public Input<string>? CaBundle { get; set; }

        /// <summary>
        /// Compartment identifier.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name of the EKMS private endpoint resource being created.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// External private IP to connect to from this EKMS private endpoint
        /// </summary>
        [Input("externalKeyManagerIp")]
        public Input<string>? ExternalKeyManagerIp { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The port of the external key manager system
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
        /// </summary>
        [Input("privateEndpointIp")]
        public Input<string>? PrivateEndpointIp { get; set; }

        /// <summary>
        /// The current state of the EKMS private endpoint resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of subnet in which the EKMS private endpoint is to be created 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public EkmsPrivateEndpointState()
        {
        }
        public static new EkmsPrivateEndpointState Empty => new EkmsPrivateEndpointState();
    }
}
