// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    public static class GetKeyVersion
    {
        /// <summary>
        /// This data source provides details about a specific Key Version resource in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Gets information about the specified key version.
        /// 
        /// As a management operation, this call is subject to a Key Management limit that applies to the total number
        /// of requests across all management read operations. Key Management might throttle this call to reject an
        /// otherwise valid request when the total rate of management read operations exceeds 10 requests per second
        /// for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testKeyVersion = Oci.Kms.GetKeyVersion.Invoke(new()
        ///     {
        ///         KeyId = oci_kms_key.Test_key.Id,
        ///         KeyVersionId = oci_kms_key_version.Test_key_version.Id,
        ///         ManagementEndpoint = @var.Key_version_management_endpoint,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKeyVersionResult> InvokeAsync(GetKeyVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeyVersionResult>("oci:Kms/getKeyVersion:getKeyVersion", args ?? new GetKeyVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Key Version resource in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Gets information about the specified key version.
        /// 
        /// As a management operation, this call is subject to a Key Management limit that applies to the total number
        /// of requests across all management read operations. Key Management might throttle this call to reject an
        /// otherwise valid request when the total rate of management read operations exceeds 10 requests per second
        /// for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testKeyVersion = Oci.Kms.GetKeyVersion.Invoke(new()
        ///     {
        ///         KeyId = oci_kms_key.Test_key.Id,
        ///         KeyVersionId = oci_kms_key_version.Test_key_version.Id,
        ///         ManagementEndpoint = @var.Key_version_management_endpoint,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKeyVersionResult> Invoke(GetKeyVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyVersionResult>("oci:Kms/getKeyVersion:getKeyVersion", args ?? new GetKeyVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeyVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the key.
        /// </summary>
        [Input("keyId", required: true)]
        public string KeyId { get; set; } = null!;

        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        [Input("keyVersionId", required: true)]
        public string KeyVersionId { get; set; } = null!;

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public string ManagementEndpoint { get; set; } = null!;

        public GetKeyVersionArgs()
        {
        }
        public static new GetKeyVersionArgs Empty => new GetKeyVersionArgs();
    }

    public sealed class GetKeyVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the key.
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        [Input("keyVersionId", required: true)]
        public Input<string> KeyVersionId { get; set; } = null!;

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public Input<string> ManagementEndpoint { get; set; } = null!;

        public GetKeyVersionInvokeArgs()
        {
        }
        public static new GetKeyVersionInvokeArgs Empty => new GetKeyVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeyVersionResult
    {
        /// <summary>
        /// The OCID of the compartment that contains this key version.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A boolean that will be true when key version is primary, and will be false when key version is a replica from a primary key version.
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// The OCID of the master encryption key associated with this key version.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        public readonly string KeyVersionId;
        public readonly string ManagementEndpoint;
        /// <summary>
        /// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// KeyVersion replica details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeyVersionReplicaDetailResult> ReplicaDetails;
        public readonly string RestoredFromKeyId;
        /// <summary>
        /// The OCID of the key version from which this key version was restored.
        /// </summary>
        public readonly string RestoredFromKeyVersionId;
        /// <summary>
        /// The key version's current lifecycle state.  Example: `ENABLED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property to indicate when to delete the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The OCID of the vault that contains this key version.
        /// </summary>
        public readonly string VaultId;

        [OutputConstructor]
        private GetKeyVersionResult(
            string compartmentId,

            string id,

            bool isPrimary,

            string keyId,

            string keyVersionId,

            string managementEndpoint,

            string publicKey,

            ImmutableArray<Outputs.GetKeyVersionReplicaDetailResult> replicaDetails,

            string restoredFromKeyId,

            string restoredFromKeyVersionId,

            string state,

            string timeCreated,

            string timeOfDeletion,

            string vaultId)
        {
            CompartmentId = compartmentId;
            Id = id;
            IsPrimary = isPrimary;
            KeyId = keyId;
            KeyVersionId = keyVersionId;
            ManagementEndpoint = managementEndpoint;
            PublicKey = publicKey;
            ReplicaDetails = replicaDetails;
            RestoredFromKeyId = restoredFromKeyId;
            RestoredFromKeyVersionId = restoredFromKeyVersionId;
            State = state;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
            VaultId = vaultId;
        }
    }
}
