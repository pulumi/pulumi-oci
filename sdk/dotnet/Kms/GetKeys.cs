// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    public static class GetKeys
    {
        /// <summary>
        /// This data source provides the list of Keys in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Lists the master encryption keys in the specified vault and compartment.
        /// 
        /// As a management operation, this call is subject to a Key Management limit that applies to the total number
        /// of requests across all management read operations. Key Management might throttle this call to reject an
        /// otherwise valid request when the total rate of management read operations exceeds 10 requests per second
        /// for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testKeys = Oci.Kms.GetKeys.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ManagementEndpoint = @var.Key_management_endpoint,
        ///         Algorithm = @var.Key_algorithm,
        ///         Length = @var.Key_length,
        ///         CurveId = oci_kms_curve.Test_curve.Id,
        ///         ProtectionMode = @var.Key_protection_mode,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKeysResult> InvokeAsync(GetKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeysResult>("oci:Kms/getKeys:getKeys", args ?? new GetKeysArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Keys in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Lists the master encryption keys in the specified vault and compartment.
        /// 
        /// As a management operation, this call is subject to a Key Management limit that applies to the total number
        /// of requests across all management read operations. Key Management might throttle this call to reject an
        /// otherwise valid request when the total rate of management read operations exceeds 10 requests per second
        /// for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testKeys = Oci.Kms.GetKeys.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ManagementEndpoint = @var.Key_management_endpoint,
        ///         Algorithm = @var.Key_algorithm,
        ///         Length = @var.Key_length,
        ///         CurveId = oci_kms_curve.Test_curve.Id,
        ///         ProtectionMode = @var.Key_protection_mode,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKeysResult> Invoke(GetKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeysResult>("oci:Kms/getKeys:getKeys", args ?? new GetKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The algorithm used by a key's key versions to encrypt or decrypt data. Currently, support includes AES, RSA, and ECDSA algorithms.
        /// </summary>
        [Input("algorithm")]
        public string? Algorithm { get; set; }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The curve ID of the keys. (This pertains only to ECDSA keys.)
        /// </summary>
        [Input("curveId")]
        public string? CurveId { get; set; }

        [Input("filters")]
        private List<Inputs.GetKeysFilterArgs>? _filters;
        public List<Inputs.GetKeysFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetKeysFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The length of the key in bytes, expressed as an integer. Supported values include 16, 24, or 32.
        /// </summary>
        [Input("length")]
        public int? Length { get; set; }

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public string ManagementEndpoint { get; set; } = null!;

        /// <summary>
        /// A key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. A protection mode of `EXTERNAL` mean that the key persists on the customer's external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key. All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
        /// </summary>
        [Input("protectionMode")]
        public string? ProtectionMode { get; set; }

        public GetKeysArgs()
        {
        }
        public static new GetKeysArgs Empty => new GetKeysArgs();
    }

    public sealed class GetKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The algorithm used by a key's key versions to encrypt or decrypt data. Currently, support includes AES, RSA, and ECDSA algorithms.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The curve ID of the keys. (This pertains only to ECDSA keys.)
        /// </summary>
        [Input("curveId")]
        public Input<string>? CurveId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetKeysFilterInputArgs>? _filters;
        public InputList<Inputs.GetKeysFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetKeysFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The length of the key in bytes, expressed as an integer. Supported values include 16, 24, or 32.
        /// </summary>
        [Input("length")]
        public Input<int>? Length { get; set; }

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public Input<string> ManagementEndpoint { get; set; } = null!;

        /// <summary>
        /// A key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. A protection mode of `EXTERNAL` mean that the key persists on the customer's external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key. All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
        /// </summary>
        [Input("protectionMode")]
        public Input<string>? ProtectionMode { get; set; }

        public GetKeysInvokeArgs()
        {
        }
        public static new GetKeysInvokeArgs Empty => new GetKeysInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeysResult
    {
        /// <summary>
        /// The algorithm used by a key's key versions to encrypt or decrypt. Only AES algorithm is supported for `External` keys.
        /// </summary>
        public readonly string? Algorithm;
        /// <summary>
        /// The OCID of the compartment that contains this master encryption key.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Supported curve IDs for ECDSA keys.
        /// </summary>
        public readonly string? CurveId;
        public readonly ImmutableArray<Outputs.GetKeysFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of keys.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyResult> Keys;
        /// <summary>
        /// The length of the key in bytes, expressed as an integer. Supported values include the following:
        /// * AES: 16, 24, or 32
        /// * RSA: 256, 384, or 512
        /// * ECDSA: 32, 48, or 66
        /// </summary>
        public readonly int? Length;
        public readonly string ManagementEndpoint;
        /// <summary>
        /// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default, a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported. A protection mode of `EXTERNAL` mean that the key persists on the customer's external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key.  All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
        /// </summary>
        public readonly string? ProtectionMode;

        [OutputConstructor]
        private GetKeysResult(
            string? algorithm,

            string compartmentId,

            string? curveId,

            ImmutableArray<Outputs.GetKeysFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetKeysKeyResult> keys,

            int? length,

            string managementEndpoint,

            string? protectionMode)
        {
            Algorithm = algorithm;
            CompartmentId = compartmentId;
            CurveId = curveId;
            Filters = filters;
            Id = id;
            Keys = keys;
            Length = length;
            ManagementEndpoint = managementEndpoint;
            ProtectionMode = protectionMode;
        }
    }
}
