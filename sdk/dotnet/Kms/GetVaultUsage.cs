// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    public static class GetVaultUsage
    {
        /// <summary>
        /// This data source provides details about a specific Vault Usage resource in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Gets the count of keys and key versions in the specified vault to calculate usage against service limits.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVaultUsage = Oci.Kms.GetVaultUsage.Invoke(new()
        ///     {
        ///         VaultId = oci_kms_vault.Test_vault.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVaultUsageResult> InvokeAsync(GetVaultUsageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVaultUsageResult>("oci:Kms/getVaultUsage:getVaultUsage", args ?? new GetVaultUsageArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Vault Usage resource in Oracle Cloud Infrastructure Kms service.
        /// 
        /// Gets the count of keys and key versions in the specified vault to calculate usage against service limits.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVaultUsage = Oci.Kms.GetVaultUsage.Invoke(new()
        ///     {
        ///         VaultId = oci_kms_vault.Test_vault.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVaultUsageResult> Invoke(GetVaultUsageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVaultUsageResult>("oci:Kms/getVaultUsage:getVaultUsage", args ?? new GetVaultUsageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVaultUsageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the vault.
        /// </summary>
        [Input("vaultId", required: true)]
        public string VaultId { get; set; } = null!;

        public GetVaultUsageArgs()
        {
        }
        public static new GetVaultUsageArgs Empty => new GetVaultUsageArgs();
    }

    public sealed class GetVaultUsageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the vault.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        public GetVaultUsageInvokeArgs()
        {
        }
        public static new GetVaultUsageInvokeArgs Empty => new GetVaultUsageInvokeArgs();
    }


    [OutputType]
    public sealed class GetVaultUsageResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of keys in this vault, across all compartments, excluding keys in a `DELETED` state.
        /// </summary>
        public readonly int KeyCount;
        /// <summary>
        /// The number of key versions in this vault, across all compartments, excluding key versions in a `DELETED` state.
        /// </summary>
        public readonly int KeyVersionCount;
        /// <summary>
        /// The number of keys in this vault that persist on the server, across all compartments, excluding keys in a `DELETED` state.
        /// </summary>
        public readonly int SoftwareKeyCount;
        /// <summary>
        /// The number of key versions in this vault that persist on the server, across all compartments, excluding key versions in a `DELETED` state.
        /// </summary>
        public readonly int SoftwareKeyVersionCount;
        public readonly string VaultId;

        [OutputConstructor]
        private GetVaultUsageResult(
            string id,

            int keyCount,

            int keyVersionCount,

            int softwareKeyCount,

            int softwareKeyVersionCount,

            string vaultId)
        {
            Id = id;
            KeyCount = keyCount;
            KeyVersionCount = keyVersionCount;
            SoftwareKeyCount = softwareKeyCount;
            SoftwareKeyVersionCount = softwareKeyVersionCount;
            VaultId = vaultId;
        }
    }
}
