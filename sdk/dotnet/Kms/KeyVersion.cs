// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    /// <summary>
    /// This resource provides the Key Version resource in Oracle Cloud Infrastructure Kms service.
    /// 
    /// Generates a new [KeyVersion](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/KeyVersion/) resource that provides new cryptographic
    /// material for a master encryption key. The key must be in an `ENABLED` state to be rotated.
    /// 
    /// As a management operation, this call is subject to a Key Management limit that applies to the total number
    /// of requests across all  management write operations. Key Management might throttle this call to reject an
    /// otherwise valid request when the total rate of management write operations exceeds 10 requests per second
    /// for a given tenancy.
    /// 
    /// ## Import
    /// 
    /// KeyVersions can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Kms/keyVersion:KeyVersion test_key_version "managementEndpoint/{managementEndpoint}/keys/{keyId}/keyVersions/{keyVersionId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Kms/keyVersion:KeyVersion")]
    public partial class KeyVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment that contains this key version.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Key reference data to be returned to the customer as a response.
        /// </summary>
        [Output("externalKeyReferenceDetails")]
        public Output<ImmutableArray<Outputs.KeyVersionExternalKeyReferenceDetail>> ExternalKeyReferenceDetails { get; private set; } = null!;

        /// <summary>
        /// Key version ID associated with the external key.
        /// </summary>
        [Output("externalKeyVersionId")]
        public Output<string> ExternalKeyVersionId { get; private set; } = null!;

        /// <summary>
        /// An optional property indicating whether this keyversion is generated from auto rotatation.
        /// </summary>
        [Output("isAutoRotated")]
        public Output<bool> IsAutoRotated { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
        /// </summary>
        [Output("isPrimary")]
        public Output<bool> IsPrimary { get; private set; } = null!;

        /// <summary>
        /// The OCID of the key.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        [Output("keyVersionId")]
        public Output<string> KeyVersionId { get; private set; } = null!;

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Output("managementEndpoint")]
        public Output<string> ManagementEndpoint { get; private set; } = null!;

        /// <summary>
        /// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// KeyVersion replica details
        /// </summary>
        [Output("replicaDetails")]
        public Output<ImmutableArray<Outputs.KeyVersionReplicaDetail>> ReplicaDetails { get; private set; } = null!;

        [Output("restoredFromKeyId")]
        public Output<string> RestoredFromKeyId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the key version from which this key version was restored.
        /// </summary>
        [Output("restoredFromKeyVersionId")]
        public Output<string> RestoredFromKeyVersionId { get; private set; } = null!;

        /// <summary>
        /// The key version's current lifecycle state.  Example: `ENABLED`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("timeOfDeletion")]
        public Output<string> TimeOfDeletion { get; private set; } = null!;

        /// <summary>
        /// The OCID of the vault that contains this key version.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a KeyVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyVersion(string name, KeyVersionArgs args, CustomResourceOptions? options = null)
            : base("oci:Kms/keyVersion:KeyVersion", name, args ?? new KeyVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyVersion(string name, Input<string> id, KeyVersionState? state = null, CustomResourceOptions? options = null)
            : base("oci:Kms/keyVersion:KeyVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyVersion Get(string name, Input<string> id, KeyVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyVersion(name, id, state, options);
        }
    }

    public sealed class KeyVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key version ID associated with the external key.
        /// </summary>
        [Input("externalKeyVersionId")]
        public Input<string>? ExternalKeyVersionId { get; set; }

        /// <summary>
        /// The OCID of the key.
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint", required: true)]
        public Input<string> ManagementEndpoint { get; set; } = null!;

        /// <summary>
        /// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timeOfDeletion")]
        public Input<string>? TimeOfDeletion { get; set; }

        public KeyVersionArgs()
        {
        }
        public static new KeyVersionArgs Empty => new KeyVersionArgs();
    }

    public sealed class KeyVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains this key version.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("externalKeyReferenceDetails")]
        private InputList<Inputs.KeyVersionExternalKeyReferenceDetailGetArgs>? _externalKeyReferenceDetails;

        /// <summary>
        /// Key reference data to be returned to the customer as a response.
        /// </summary>
        public InputList<Inputs.KeyVersionExternalKeyReferenceDetailGetArgs> ExternalKeyReferenceDetails
        {
            get => _externalKeyReferenceDetails ?? (_externalKeyReferenceDetails = new InputList<Inputs.KeyVersionExternalKeyReferenceDetailGetArgs>());
            set => _externalKeyReferenceDetails = value;
        }

        /// <summary>
        /// Key version ID associated with the external key.
        /// </summary>
        [Input("externalKeyVersionId")]
        public Input<string>? ExternalKeyVersionId { get; set; }

        /// <summary>
        /// An optional property indicating whether this keyversion is generated from auto rotatation.
        /// </summary>
        [Input("isAutoRotated")]
        public Input<bool>? IsAutoRotated { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
        /// </summary>
        [Input("isPrimary")]
        public Input<bool>? IsPrimary { get; set; }

        /// <summary>
        /// The OCID of the key.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        [Input("keyVersionId")]
        public Input<string>? KeyVersionId { get; set; }

        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        [Input("managementEndpoint")]
        public Input<string>? ManagementEndpoint { get; set; }

        /// <summary>
        /// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("replicaDetails")]
        private InputList<Inputs.KeyVersionReplicaDetailGetArgs>? _replicaDetails;

        /// <summary>
        /// KeyVersion replica details
        /// </summary>
        public InputList<Inputs.KeyVersionReplicaDetailGetArgs> ReplicaDetails
        {
            get => _replicaDetails ?? (_replicaDetails = new InputList<Inputs.KeyVersionReplicaDetailGetArgs>());
            set => _replicaDetails = value;
        }

        [Input("restoredFromKeyId")]
        public Input<string>? RestoredFromKeyId { get; set; }

        /// <summary>
        /// The OCID of the key version from which this key version was restored.
        /// </summary>
        [Input("restoredFromKeyVersionId")]
        public Input<string>? RestoredFromKeyVersionId { get; set; }

        /// <summary>
        /// The key version's current lifecycle state.  Example: `ENABLED`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timeOfDeletion")]
        public Input<string>? TimeOfDeletion { get; set; }

        /// <summary>
        /// The OCID of the vault that contains this key version.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public KeyVersionState()
        {
        }
        public static new KeyVersionState Empty => new KeyVersionState();
    }
}
