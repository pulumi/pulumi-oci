// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms.Outputs
{

    [OutputType]
    public sealed class GetKeyVersionsKeyVersionResult
    {
        /// <summary>
        /// The OCID of the compartment that contains this key version.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Key reference data to be returned to the customer as a response.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult> ExternalKeyReferenceDetails;
        /// <summary>
        /// Key version ID associated with the external key.
        /// </summary>
        public readonly string ExternalKeyVersionId;
        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An optional property indicating whether this keyversion is generated from auto rotatation.
        /// </summary>
        public readonly bool IsAutoRotated;
        /// <summary>
        /// A Boolean value that indicates whether the KeyVersion belongs to primary Vault or replica Vault.
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// The OCID of the key.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// The OCID of the key version.
        /// </summary>
        public readonly string KeyVersionId;
        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        public readonly string ManagementEndpoint;
        /// <summary>
        /// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// KeyVersion replica details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeyVersionsKeyVersionReplicaDetailResult> ReplicaDetails;
        public readonly string RestoredFromKeyId;
        /// <summary>
        /// The OCID of the key version from which this key version was restored.
        /// </summary>
        public readonly string RestoredFromKeyVersionId;
        /// <summary>
        /// The key version's current lifecycle state.  Example: `ENABLED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property to indicate when to delete the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The OCID of the vault that contains this key version.
        /// </summary>
        public readonly string VaultId;

        [OutputConstructor]
        private GetKeyVersionsKeyVersionResult(
            string compartmentId,

            ImmutableArray<Outputs.GetKeyVersionsKeyVersionExternalKeyReferenceDetailResult> externalKeyReferenceDetails,

            string externalKeyVersionId,

            string id,

            bool isAutoRotated,

            bool isPrimary,

            string keyId,

            string keyVersionId,

            string managementEndpoint,

            string publicKey,

            ImmutableArray<Outputs.GetKeyVersionsKeyVersionReplicaDetailResult> replicaDetails,

            string restoredFromKeyId,

            string restoredFromKeyVersionId,

            string state,

            string timeCreated,

            string timeOfDeletion,

            string vaultId)
        {
            CompartmentId = compartmentId;
            ExternalKeyReferenceDetails = externalKeyReferenceDetails;
            ExternalKeyVersionId = externalKeyVersionId;
            Id = id;
            IsAutoRotated = isAutoRotated;
            IsPrimary = isPrimary;
            KeyId = keyId;
            KeyVersionId = keyVersionId;
            ManagementEndpoint = managementEndpoint;
            PublicKey = publicKey;
            ReplicaDetails = replicaDetails;
            RestoredFromKeyId = restoredFromKeyId;
            RestoredFromKeyVersionId = restoredFromKeyVersionId;
            State = state;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
            VaultId = vaultId;
        }
    }
}
