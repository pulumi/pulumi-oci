// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms.Outputs
{

    [OutputType]
    public sealed class GetKeysKeyResult
    {
        /// <summary>
        /// The details of auto rotation schedule for the Key being create updated or imported.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyAutoKeyRotationDetailResult> AutoKeyRotationDetails;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
        /// </summary>
        public readonly string CurrentKeyVersion;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        public readonly string DesiredState;
        /// <summary>
        /// A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Key reference data to be returned to the customer as a response.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyExternalKeyReferenceDetailResult> ExternalKeyReferenceDetails;
        public readonly ImmutableArray<Outputs.GetKeysKeyExternalKeyReferenceResult> ExternalKeyReferences;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the key.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A parameter specifying whether the auto key rotation is enabled or not.
        /// </summary>
        public readonly bool IsAutoRotationEnabled;
        /// <summary>
        /// A Boolean value that indicates whether the Key belongs to primary Vault or replica vault.
        /// </summary>
        public readonly bool IsPrimary;
        /// <summary>
        /// The cryptographic properties of a key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyKeyShapeResult> KeyShapes;
        /// <summary>
        /// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
        /// </summary>
        public readonly string ManagementEndpoint;
        /// <summary>
        /// A key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. A protection mode of `EXTERNAL` mean that the key persists on the customer's external key manager which is hosted externally outside of oracle. Oracle only hold a reference to that key. All cryptographic operations that use a key with a protection mode of `EXTERNAL` are performed by external key manager.
        /// </summary>
        public readonly string ProtectionMode;
        /// <summary>
        /// Key replica details
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeysKeyReplicaDetailResult> ReplicaDetails;
        public readonly ImmutableArray<Outputs.GetKeysKeyRestoreFromFileResult> RestoreFromFiles;
        public readonly ImmutableArray<Outputs.GetKeysKeyRestoreFromObjectStoreResult> RestoreFromObjectStores;
        public readonly bool RestoreTrigger;
        public readonly string RestoredFromKeyId;
        /// <summary>
        /// The key's current lifecycle state.  Example: `ENABLED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when to delete the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The OCID of the vault that contains this key.
        /// </summary>
        public readonly string VaultId;

        [OutputConstructor]
        private GetKeysKeyResult(
            ImmutableArray<Outputs.GetKeysKeyAutoKeyRotationDetailResult> autoKeyRotationDetails,

            string compartmentId,

            string currentKeyVersion,

            ImmutableDictionary<string, object> definedTags,

            string desiredState,

            string displayName,

            ImmutableArray<Outputs.GetKeysKeyExternalKeyReferenceDetailResult> externalKeyReferenceDetails,

            ImmutableArray<Outputs.GetKeysKeyExternalKeyReferenceResult> externalKeyReferences,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isAutoRotationEnabled,

            bool isPrimary,

            ImmutableArray<Outputs.GetKeysKeyKeyShapeResult> keyShapes,

            string managementEndpoint,

            string protectionMode,

            ImmutableArray<Outputs.GetKeysKeyReplicaDetailResult> replicaDetails,

            ImmutableArray<Outputs.GetKeysKeyRestoreFromFileResult> restoreFromFiles,

            ImmutableArray<Outputs.GetKeysKeyRestoreFromObjectStoreResult> restoreFromObjectStores,

            bool restoreTrigger,

            string restoredFromKeyId,

            string state,

            string timeCreated,

            string timeOfDeletion,

            string vaultId)
        {
            AutoKeyRotationDetails = autoKeyRotationDetails;
            CompartmentId = compartmentId;
            CurrentKeyVersion = currentKeyVersion;
            DefinedTags = definedTags;
            DesiredState = desiredState;
            DisplayName = displayName;
            ExternalKeyReferenceDetails = externalKeyReferenceDetails;
            ExternalKeyReferences = externalKeyReferences;
            FreeformTags = freeformTags;
            Id = id;
            IsAutoRotationEnabled = isAutoRotationEnabled;
            IsPrimary = isPrimary;
            KeyShapes = keyShapes;
            ManagementEndpoint = managementEndpoint;
            ProtectionMode = protectionMode;
            ReplicaDetails = replicaDetails;
            RestoreFromFiles = restoreFromFiles;
            RestoreFromObjectStores = restoreFromObjectStores;
            RestoreTrigger = restoreTrigger;
            RestoredFromKeyId = restoredFromKeyId;
            State = state;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
            VaultId = vaultId;
        }
    }
}
