// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Kms
{
    /// <summary>
    /// This source triggers action to create, update and delete replica for a vault in Oracle Cloud Infrastructure Kms service.
    /// 
    /// A vault replica is a mirror of that vault in a different region in the same realm.
    /// The vault replica and all the resources have same OCID with corresponding original ones.
    /// 
    /// This only supports virtual private vault for now.
    /// This supports only one replica in a region for a vault. Multiple replica will be supported in the future.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testReplication = new Oci.Kms.VaultVerification("test_replication", new()
    ///     {
    ///         VaultId = testVault.Id,
    ///         ReplicaRegion = replicaRegion,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OciResourceType("oci:Kms/vaultVerification:VaultVerification")]
    public partial class VaultVerification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The region to be created replica to. When updated,
        /// replica will be deleted from old region, and created to updated region.
        /// </summary>
        [Output("replicaRegion")]
        public Output<string> ReplicaRegion { get; private set; } = null!;

        /// <summary>
        /// The OCID of the primary vault to create replica from.
        /// </summary>
        [Output("vaultId")]
        public Output<string> VaultId { get; private set; } = null!;


        /// <summary>
        /// Create a VaultVerification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VaultVerification(string name, VaultVerificationArgs args, CustomResourceOptions? options = null)
            : base("oci:Kms/vaultVerification:VaultVerification", name, args ?? new VaultVerificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VaultVerification(string name, Input<string> id, VaultVerificationState? state = null, CustomResourceOptions? options = null)
            : base("oci:Kms/vaultVerification:VaultVerification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VaultVerification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VaultVerification Get(string name, Input<string> id, VaultVerificationState? state = null, CustomResourceOptions? options = null)
        {
            return new VaultVerification(name, id, state, options);
        }
    }

    public sealed class VaultVerificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The region to be created replica to. When updated,
        /// replica will be deleted from old region, and created to updated region.
        /// </summary>
        [Input("replicaRegion", required: true)]
        public Input<string> ReplicaRegion { get; set; } = null!;

        /// <summary>
        /// The OCID of the primary vault to create replica from.
        /// </summary>
        [Input("vaultId", required: true)]
        public Input<string> VaultId { get; set; } = null!;

        public VaultVerificationArgs()
        {
        }
        public static new VaultVerificationArgs Empty => new VaultVerificationArgs();
    }

    public sealed class VaultVerificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The region to be created replica to. When updated,
        /// replica will be deleted from old region, and created to updated region.
        /// </summary>
        [Input("replicaRegion")]
        public Input<string>? ReplicaRegion { get; set; }

        /// <summary>
        /// The OCID of the primary vault to create replica from.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public VaultVerificationState()
        {
        }
        public static new VaultVerificationState Empty => new VaultVerificationState();
    }
}
