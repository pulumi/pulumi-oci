// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LicenseManager
{
    public static class GetLicenseRecord
    {
        /// <summary>
        /// This data source provides details about a specific License Record resource in Oracle Cloud Infrastructure License Manager service.
        /// 
        /// Retrieves license record details by the license record ID in a given compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLicenseRecord = Oci.LicenseManager.GetLicenseRecord.Invoke(new()
        ///     {
        ///         LicenseRecordId = testLicenseRecordOciLicenseManagerLicenseRecord.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLicenseRecordResult> InvokeAsync(GetLicenseRecordArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicenseRecordResult>("oci:LicenseManager/getLicenseRecord:getLicenseRecord", args ?? new GetLicenseRecordArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific License Record resource in Oracle Cloud Infrastructure License Manager service.
        /// 
        /// Retrieves license record details by the license record ID in a given compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLicenseRecord = Oci.LicenseManager.GetLicenseRecord.Invoke(new()
        ///     {
        ///         LicenseRecordId = testLicenseRecordOciLicenseManagerLicenseRecord.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLicenseRecordResult> Invoke(GetLicenseRecordInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicenseRecordResult>("oci:LicenseManager/getLicenseRecord:getLicenseRecord", args ?? new GetLicenseRecordInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific License Record resource in Oracle Cloud Infrastructure License Manager service.
        /// 
        /// Retrieves license record details by the license record ID in a given compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLicenseRecord = Oci.LicenseManager.GetLicenseRecord.Invoke(new()
        ///     {
        ///         LicenseRecordId = testLicenseRecordOciLicenseManagerLicenseRecord.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLicenseRecordResult> Invoke(GetLicenseRecordInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicenseRecordResult>("oci:LicenseManager/getLicenseRecord:getLicenseRecord", args ?? new GetLicenseRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicenseRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique license record identifier.
        /// </summary>
        [Input("licenseRecordId", required: true)]
        public string LicenseRecordId { get; set; } = null!;

        public GetLicenseRecordArgs()
        {
        }
        public static new GetLicenseRecordArgs Empty => new GetLicenseRecordArgs();
    }

    public sealed class GetLicenseRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique license record identifier.
        /// </summary>
        [Input("licenseRecordId", required: true)]
        public Input<string> LicenseRecordId { get; set; } = null!;

        public GetLicenseRecordInvokeArgs()
        {
        }
        public static new GetLicenseRecordInvokeArgs Empty => new GetLicenseRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicenseRecordResult
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// The license record display name. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies if the license record term is perpertual.
        /// </summary>
        public readonly bool IsPerpetual;
        /// <summary>
        /// Specifies if the license count is unlimited.
        /// </summary>
        public readonly bool IsUnlimited;
        /// <summary>
        /// The number of license units added by the user for the given license record. Default 1
        /// </summary>
        public readonly int LicenseCount;
        public readonly string LicenseRecordId;
        /// <summary>
        /// The product license unit.
        /// </summary>
        public readonly string LicenseUnit;
        /// <summary>
        /// The license record product ID.
        /// </summary>
        public readonly string ProductId;
        /// <summary>
        /// The product license name with which the license record is associated.
        /// </summary>
        public readonly string ProductLicense;
        /// <summary>
        /// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) with which the license record is associated.
        /// </summary>
        public readonly string ProductLicenseId;
        /// <summary>
        /// The current license record state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        public readonly string SupportEndDate;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetLicenseRecordResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            string expirationDate,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isPerpetual,

            bool isUnlimited,

            int licenseCount,

            string licenseRecordId,

            string licenseUnit,

            string productId,

            string productLicense,

            string productLicenseId,

            string state,

            string supportEndDate,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            ExpirationDate = expirationDate;
            FreeformTags = freeformTags;
            Id = id;
            IsPerpetual = isPerpetual;
            IsUnlimited = isUnlimited;
            LicenseCount = licenseCount;
            LicenseRecordId = licenseRecordId;
            LicenseUnit = licenseUnit;
            ProductId = productId;
            ProductLicense = productLicense;
            ProductLicenseId = productLicenseId;
            State = state;
            SupportEndDate = supportEndDate;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
