// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LicenseManager
{
    /// <summary>
    /// This resource provides the License Record resource in Oracle Cloud Infrastructure License Manager service.
    /// 
    /// Creates a new license record for the given product license ID.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testLicenseRecord = new Oci.LicenseManager.LicenseRecord("testLicenseRecord", new()
    ///     {
    ///         DisplayName = @var.License_record_display_name,
    ///         IsPerpetual = @var.License_record_is_perpetual,
    ///         IsUnlimited = @var.License_record_is_unlimited,
    ///         ProductLicenseId = oci_license_manager_product_license.Test_product_license.Id,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         ExpirationDate = @var.License_record_expiration_date,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         LicenseCount = @var.License_record_license_count,
    ///         ProductId = oci_license_manager_product.Test_product.Id,
    ///         SupportEndDate = @var.License_record_support_end_date,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LicenseRecords can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:LicenseManager/licenseRecord:LicenseRecord test_license_record "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:LicenseManager/licenseRecord:LicenseRecord")]
    public partial class LicenseRecord : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) License record name.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies if the license record term is perpertual.
        /// </summary>
        [Output("isPerpetual")]
        public Output<bool> IsPerpetual { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies if the license count is unlimited.
        /// </summary>
        [Output("isUnlimited")]
        public Output<bool> IsUnlimited { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The number of license units added by a user in a license record. Default 1
        /// </summary>
        [Output("licenseCount")]
        public Output<int> LicenseCount { get; private set; } = null!;

        /// <summary>
        /// The product license unit.
        /// </summary>
        [Output("licenseUnit")]
        public Output<string> LicenseUnit { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The license record product ID.
        /// </summary>
        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;

        /// <summary>
        /// The product license name with which the license record is associated.
        /// </summary>
        [Output("productLicense")]
        public Output<string> ProductLicense { get; private set; } = null!;

        /// <summary>
        /// Unique product license identifier.
        /// </summary>
        [Output("productLicenseId")]
        public Output<string> ProductLicenseId { get; private set; } = null!;

        /// <summary>
        /// The current license record state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Output("supportEndDate")]
        public Output<string> SupportEndDate { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseRecord(string name, LicenseRecordArgs args, CustomResourceOptions? options = null)
            : base("oci:LicenseManager/licenseRecord:LicenseRecord", name, args ?? new LicenseRecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseRecord(string name, Input<string> id, LicenseRecordState? state = null, CustomResourceOptions? options = null)
            : base("oci:LicenseManager/licenseRecord:LicenseRecord", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseRecord Get(string name, Input<string> id, LicenseRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new LicenseRecord(name, id, state, options);
        }
    }

    public sealed class LicenseRecordArgs : global::Pulumi.ResourceArgs
    {
        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) License record name.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Specifies if the license record term is perpertual.
        /// </summary>
        [Input("isPerpetual", required: true)]
        public Input<bool> IsPerpetual { get; set; } = null!;

        /// <summary>
        /// (Updatable) Specifies if the license count is unlimited.
        /// </summary>
        [Input("isUnlimited", required: true)]
        public Input<bool> IsUnlimited { get; set; } = null!;

        /// <summary>
        /// (Updatable) The number of license units added by a user in a license record. Default 1
        /// </summary>
        [Input("licenseCount")]
        public Input<int>? LicenseCount { get; set; }

        /// <summary>
        /// (Updatable) The license record product ID.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// Unique product license identifier.
        /// </summary>
        [Input("productLicenseId", required: true)]
        public Input<string> ProductLicenseId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Input("supportEndDate")]
        public Input<string>? SupportEndDate { get; set; }

        public LicenseRecordArgs()
        {
        }
        public static new LicenseRecordArgs Empty => new LicenseRecordArgs();
    }

    public sealed class LicenseRecordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) License record name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Specifies if the license record term is perpertual.
        /// </summary>
        [Input("isPerpetual")]
        public Input<bool>? IsPerpetual { get; set; }

        /// <summary>
        /// (Updatable) Specifies if the license count is unlimited.
        /// </summary>
        [Input("isUnlimited")]
        public Input<bool>? IsUnlimited { get; set; }

        /// <summary>
        /// (Updatable) The number of license units added by a user in a license record. Default 1
        /// </summary>
        [Input("licenseCount")]
        public Input<int>? LicenseCount { get; set; }

        /// <summary>
        /// The product license unit.
        /// </summary>
        [Input("licenseUnit")]
        public Input<string>? LicenseUnit { get; set; }

        /// <summary>
        /// (Updatable) The license record product ID.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// The product license name with which the license record is associated.
        /// </summary>
        [Input("productLicense")]
        public Input<string>? ProductLicense { get; set; }

        /// <summary>
        /// Unique product license identifier.
        /// </summary>
        [Input("productLicenseId")]
        public Input<string>? ProductLicenseId { get; set; }

        /// <summary>
        /// The current license record state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
        /// </summary>
        [Input("supportEndDate")]
        public Input<string>? SupportEndDate { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public LicenseRecordState()
        {
        }
        public static new LicenseRecordState Empty => new LicenseRecordState();
    }
}
