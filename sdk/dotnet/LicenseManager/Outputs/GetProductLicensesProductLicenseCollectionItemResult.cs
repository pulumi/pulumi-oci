// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LicenseManager.Outputs
{

    [OutputType]
    public sealed class GetProductLicensesProductLicenseCollectionItemResult
    {
        /// <summary>
        /// The number of active license records associated with the product license.
        /// </summary>
        public readonly int ActiveLicenseRecordCount;
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// License record name
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The image ID associated with the product license.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The images associated with the product license.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProductLicensesProductLicenseCollectionItemImageResult> Images;
        /// <summary>
        /// Specifies whether or not the product license is oversubscribed.
        /// </summary>
        public readonly bool IsOverSubscribed;
        /// <summary>
        /// Specifies if the license unit count is unlimited.
        /// </summary>
        public readonly bool IsUnlimited;
        /// <summary>
        /// Specifies whether the vendor is Oracle or a third party.
        /// </summary>
        public readonly bool IsVendorOracle;
        /// <summary>
        /// The product license unit.
        /// </summary>
        public readonly string LicenseUnit;
        /// <summary>
        /// The current product license state.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The current product license status.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Status description for the current product license status.
        /// </summary>
        public readonly string StatusDescription;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
        /// </summary>
        public readonly int TotalActiveLicenseUnitCount;
        /// <summary>
        /// The number of license records associated with the product license.
        /// </summary>
        public readonly int TotalLicenseRecordCount;
        /// <summary>
        /// The number of license units consumed. Updated after each allocation run.
        /// </summary>
        public readonly double TotalLicenseUnitsConsumed;
        /// <summary>
        /// The vendor of the ProductLicense
        /// </summary>
        public readonly string VendorName;

        [OutputConstructor]
        private GetProductLicensesProductLicenseCollectionItemResult(
            int activeLicenseRecordCount,

            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            ImmutableArray<Outputs.GetProductLicensesProductLicenseCollectionItemImageResult> images,

            bool isOverSubscribed,

            bool isUnlimited,

            bool isVendorOracle,

            string licenseUnit,

            string state,

            string status,

            string statusDescription,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            int totalActiveLicenseUnitCount,

            int totalLicenseRecordCount,

            double totalLicenseUnitsConsumed,

            string vendorName)
        {
            ActiveLicenseRecordCount = activeLicenseRecordCount;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            Images = images;
            IsOverSubscribed = isOverSubscribed;
            IsUnlimited = isUnlimited;
            IsVendorOracle = isVendorOracle;
            LicenseUnit = licenseUnit;
            State = state;
            Status = status;
            StatusDescription = statusDescription;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TotalActiveLicenseUnitCount = totalActiveLicenseUnitCount;
            TotalLicenseRecordCount = totalLicenseRecordCount;
            TotalLicenseUnitsConsumed = totalLicenseUnitsConsumed;
            VendorName = vendorName;
        }
    }
}
