// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LicenseManager
{
    /// <summary>
    /// This resource provides the Product License resource in Oracle Cloud Infrastructure License Manager service.
    /// 
    /// Creates a new product license.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testProductLicense = new Oci.LicenseManager.ProductLicense("testProductLicense", new Oci.LicenseManager.ProductLicenseArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             DisplayName = @var.Product_license_display_name,
    ///             IsVendorOracle = @var.Product_license_is_vendor_oracle,
    ///             LicenseUnit = @var.Product_license_license_unit,
    ///             DefinedTags = 
    ///             {
    ///                 { "foo-namespace.bar-key", "value" },
    ///             },
    ///             FreeformTags = 
    ///             {
    ///                 { "bar-key", "value" },
    ///             },
    ///             Images = 
    ///             {
    ///                 new Oci.LicenseManager.Inputs.ProductLicenseImageArgs
    ///                 {
    ///                     ListingId = oci_marketplace_listing.Test_listing.Id,
    ///                     PackageVersion = @var.Product_license_images_package_version,
    ///                 },
    ///             },
    ///             VendorName = @var.Product_license_vendor_name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ProductLicenses can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:LicenseManager/productLicense:ProductLicense test_product_license "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:LicenseManager/productLicense:ProductLicense")]
    public partial class ProductLicense : Pulumi.CustomResource
    {
        /// <summary>
        /// The number of active license records associated with the product license.
        /// </summary>
        [Output("activeLicenseRecordCount")]
        public Output<int> ActiveLicenseRecordCount { get; private set; } = null!;

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// Name of the product license.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The image details associated with the product license.
        /// </summary>
        [Output("images")]
        public Output<ImmutableArray<Outputs.ProductLicenseImage>> Images { get; private set; } = null!;

        /// <summary>
        /// Specifies whether or not the product license is oversubscribed.
        /// </summary>
        [Output("isOverSubscribed")]
        public Output<bool> IsOverSubscribed { get; private set; } = null!;

        /// <summary>
        /// Specifies if the license unit count is unlimited.
        /// </summary>
        [Output("isUnlimited")]
        public Output<bool> IsUnlimited { get; private set; } = null!;

        /// <summary>
        /// Specifies if the product license vendor is Oracle or a third party.
        /// </summary>
        [Output("isVendorOracle")]
        public Output<bool> IsVendorOracle { get; private set; } = null!;

        /// <summary>
        /// The product license unit.
        /// </summary>
        [Output("licenseUnit")]
        public Output<string> LicenseUnit { get; private set; } = null!;

        /// <summary>
        /// The current product license state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The current product license status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Status description for the current product license status.
        /// </summary>
        [Output("statusDescription")]
        public Output<string> StatusDescription { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
        /// </summary>
        [Output("totalActiveLicenseUnitCount")]
        public Output<int> TotalActiveLicenseUnitCount { get; private set; } = null!;

        /// <summary>
        /// The number of license records associated with the product license.
        /// </summary>
        [Output("totalLicenseRecordCount")]
        public Output<int> TotalLicenseRecordCount { get; private set; } = null!;

        /// <summary>
        /// The number of license units consumed. Updated after each allocation run.
        /// </summary>
        [Output("totalLicenseUnitsConsumed")]
        public Output<double> TotalLicenseUnitsConsumed { get; private set; } = null!;

        /// <summary>
        /// The product license vendor name, for example: Microsoft, RHEL, and so on.
        /// </summary>
        [Output("vendorName")]
        public Output<string> VendorName { get; private set; } = null!;


        /// <summary>
        /// Create a ProductLicense resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProductLicense(string name, ProductLicenseArgs args, CustomResourceOptions? options = null)
            : base("oci:LicenseManager/productLicense:ProductLicense", name, args ?? new ProductLicenseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProductLicense(string name, Input<string> id, ProductLicenseState? state = null, CustomResourceOptions? options = null)
            : base("oci:LicenseManager/productLicense:ProductLicense", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProductLicense resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProductLicense Get(string name, Input<string> id, ProductLicenseState? state = null, CustomResourceOptions? options = null)
        {
            return new ProductLicense(name, id, state, options);
        }
    }

    public sealed class ProductLicenseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// Name of the product license.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("images")]
        private InputList<Inputs.ProductLicenseImageArgs>? _images;

        /// <summary>
        /// (Updatable) The image details associated with the product license.
        /// </summary>
        public InputList<Inputs.ProductLicenseImageArgs> Images
        {
            get => _images ?? (_images = new InputList<Inputs.ProductLicenseImageArgs>());
            set => _images = value;
        }

        /// <summary>
        /// Specifies if the product license vendor is Oracle or a third party.
        /// </summary>
        [Input("isVendorOracle", required: true)]
        public Input<bool> IsVendorOracle { get; set; } = null!;

        /// <summary>
        /// The product license unit.
        /// </summary>
        [Input("licenseUnit", required: true)]
        public Input<string> LicenseUnit { get; set; } = null!;

        /// <summary>
        /// The product license vendor name, for example: Microsoft, RHEL, and so on.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public ProductLicenseArgs()
        {
        }
    }

    public sealed class ProductLicenseState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of active license records associated with the product license.
        /// </summary>
        [Input("activeLicenseRecordCount")]
        public Input<int>? ActiveLicenseRecordCount { get; set; }

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// Name of the product license.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("images")]
        private InputList<Inputs.ProductLicenseImageGetArgs>? _images;

        /// <summary>
        /// (Updatable) The image details associated with the product license.
        /// </summary>
        public InputList<Inputs.ProductLicenseImageGetArgs> Images
        {
            get => _images ?? (_images = new InputList<Inputs.ProductLicenseImageGetArgs>());
            set => _images = value;
        }

        /// <summary>
        /// Specifies whether or not the product license is oversubscribed.
        /// </summary>
        [Input("isOverSubscribed")]
        public Input<bool>? IsOverSubscribed { get; set; }

        /// <summary>
        /// Specifies if the license unit count is unlimited.
        /// </summary>
        [Input("isUnlimited")]
        public Input<bool>? IsUnlimited { get; set; }

        /// <summary>
        /// Specifies if the product license vendor is Oracle or a third party.
        /// </summary>
        [Input("isVendorOracle")]
        public Input<bool>? IsVendorOracle { get; set; }

        /// <summary>
        /// The product license unit.
        /// </summary>
        [Input("licenseUnit")]
        public Input<string>? LicenseUnit { get; set; }

        /// <summary>
        /// The current product license state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The current product license status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Status description for the current product license status.
        /// </summary>
        [Input("statusDescription")]
        public Input<string>? StatusDescription { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
        /// </summary>
        [Input("totalActiveLicenseUnitCount")]
        public Input<int>? TotalActiveLicenseUnitCount { get; set; }

        /// <summary>
        /// The number of license records associated with the product license.
        /// </summary>
        [Input("totalLicenseRecordCount")]
        public Input<int>? TotalLicenseRecordCount { get; set; }

        /// <summary>
        /// The number of license units consumed. Updated after each allocation run.
        /// </summary>
        [Input("totalLicenseUnitsConsumed")]
        public Input<double>? TotalLicenseUnitsConsumed { get; set; }

        /// <summary>
        /// The product license vendor name, for example: Microsoft, RHEL, and so on.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public ProductLicenseState()
        {
        }
    }
}
