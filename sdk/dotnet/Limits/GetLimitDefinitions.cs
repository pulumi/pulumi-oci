// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Limits
{
    public static class GetLimitDefinitions
    {
        /// <summary>
        /// This data source provides the list of Limit Definitions in Oracle Cloud Infrastructure Limits service.
        /// 
        /// Includes a list of resource limits that are currently supported.
        /// If the 'areQuotasSupported' property is true, you can create quota policies on top of this limit at the
        /// compartment level.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLimitDefinitions = Oci.Limits.GetLimitDefinitions.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         Name = @var.Limit_definition_name,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLimitDefinitionsResult> InvokeAsync(GetLimitDefinitionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLimitDefinitionsResult>("oci:Limits/getLimitDefinitions:getLimitDefinitions", args ?? new GetLimitDefinitionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Limit Definitions in Oracle Cloud Infrastructure Limits service.
        /// 
        /// Includes a list of resource limits that are currently supported.
        /// If the 'areQuotasSupported' property is true, you can create quota policies on top of this limit at the
        /// compartment level.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLimitDefinitions = Oci.Limits.GetLimitDefinitions.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         Name = @var.Limit_definition_name,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLimitDefinitionsResult> Invoke(GetLimitDefinitionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLimitDefinitionsResult>("oci:Limits/getLimitDefinitions:getLimitDefinitions", args ?? new GetLimitDefinitionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLimitDefinitionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetLimitDefinitionsFilterArgs>? _filters;
        public List<Inputs.GetLimitDefinitionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLimitDefinitionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional field, filter for a specific resource limit.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The target service name.
        /// </summary>
        [Input("serviceName")]
        public string? ServiceName { get; set; }

        public GetLimitDefinitionsArgs()
        {
        }
        public static new GetLimitDefinitionsArgs Empty => new GetLimitDefinitionsArgs();
    }

    public sealed class GetLimitDefinitionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetLimitDefinitionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetLimitDefinitionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLimitDefinitionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional field, filter for a specific resource limit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The target service name.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public GetLimitDefinitionsInvokeArgs()
        {
        }
        public static new GetLimitDefinitionsInvokeArgs Empty => new GetLimitDefinitionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLimitDefinitionsResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetLimitDefinitionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of limit_definitions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLimitDefinitionsLimitDefinitionResult> LimitDefinitions;
        /// <summary>
        /// The resource limit name. To be used for writing policies (in case of quotas) or other programmatic calls.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The service name of the limit.
        /// </summary>
        public readonly string? ServiceName;

        [OutputConstructor]
        private GetLimitDefinitionsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetLimitDefinitionsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetLimitDefinitionsLimitDefinitionResult> limitDefinitions,

            string? name,

            string? serviceName)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            LimitDefinitions = limitDefinitions;
            Name = name;
            ServiceName = serviceName;
        }
    }
}
