// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Limits
{
    public static class GetLimitValues
    {
        /// <summary>
        /// This data source provides the list of Limit Values in Oracle Cloud Infrastructure Limits service.
        /// 
        /// Includes a full list of resource limits belonging to a given service.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLimitValues = Oci.Limits.GetLimitValues.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///         AvailabilityDomain = @var.Limit_value_availability_domain,
        ///         Name = @var.Limit_value_name,
        ///         ScopeType = @var.Limit_value_scope_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLimitValuesResult> InvokeAsync(GetLimitValuesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLimitValuesResult>("oci:Limits/getLimitValues:getLimitValues", args ?? new GetLimitValuesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Limit Values in Oracle Cloud Infrastructure Limits service.
        /// 
        /// Includes a full list of resource limits belonging to a given service.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLimitValues = Oci.Limits.GetLimitValues.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///         AvailabilityDomain = @var.Limit_value_availability_domain,
        ///         Name = @var.Limit_value_name,
        ///         ScopeType = @var.Limit_value_scope_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLimitValuesResult> Invoke(GetLimitValuesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLimitValuesResult>("oci:Limits/getLimitValues:getLimitValues", args ?? new GetLimitValuesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLimitValuesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter entries by availability domain. This implies that only AD-specific values are returned.
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetLimitValuesFilterArgs>? _filters;
        public List<Inputs.GetLimitValuesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLimitValuesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional field, can be used to see a specific resource limit value.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter entries by scope type.
        /// </summary>
        [Input("scopeType")]
        public string? ScopeType { get; set; }

        /// <summary>
        /// The target service name.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetLimitValuesArgs()
        {
        }
        public static new GetLimitValuesArgs Empty => new GetLimitValuesArgs();
    }

    public sealed class GetLimitValuesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter entries by availability domain. This implies that only AD-specific values are returned.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the parent compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetLimitValuesFilterInputArgs>? _filters;
        public InputList<Inputs.GetLimitValuesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLimitValuesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional field, can be used to see a specific resource limit value.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter entries by scope type.
        /// </summary>
        [Input("scopeType")]
        public Input<string>? ScopeType { get; set; }

        /// <summary>
        /// The target service name.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetLimitValuesInvokeArgs()
        {
        }
        public static new GetLimitValuesInvokeArgs Empty => new GetLimitValuesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLimitValuesResult
    {
        /// <summary>
        /// If present, the returned value is only specific to this availability domain.
        /// </summary>
        public readonly string? AvailabilityDomain;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetLimitValuesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of limit_values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLimitValuesLimitValueResult> LimitValues;
        /// <summary>
        /// The resource limit name. To be used for writing policies (in case of quotas) or other programmatic calls.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The scope type of the limit.
        /// </summary>
        public readonly string? ScopeType;
        public readonly string ServiceName;

        [OutputConstructor]
        private GetLimitValuesResult(
            string? availabilityDomain,

            string compartmentId,

            ImmutableArray<Outputs.GetLimitValuesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetLimitValuesLimitValueResult> limitValues,

            string? name,

            string? scopeType,

            string serviceName)
        {
            AvailabilityDomain = availabilityDomain;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            LimitValues = limitValues;
            Name = name;
            ScopeType = scopeType;
            ServiceName = serviceName;
        }
    }
}
