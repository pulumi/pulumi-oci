// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Limits
{
    public static class GetResourceAvailability
    {
        /// <summary>
        /// This data source provides details about a specific Resource Availability resource in Oracle Cloud Infrastructure Limits service.
        /// 
        /// For a given compartmentId, resource limit name, and scope, returns the following:
        ///   * The number of available resources associated with the given limit.
        ///   * The usage in the selected compartment for the given limit.
        ///   Note that not all resource limits support this API. If the value is not available, the API returns a 404 response.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testResourceAvailability = Oci.Limits.GetResourceAvailability.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         LimitName = @var.Resource_availability_limit_name,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///         AvailabilityDomain = @var.Resource_availability_availability_domain,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResourceAvailabilityResult> InvokeAsync(GetResourceAvailabilityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourceAvailabilityResult>("oci:Limits/getResourceAvailability:getResourceAvailability", args ?? new GetResourceAvailabilityArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Resource Availability resource in Oracle Cloud Infrastructure Limits service.
        /// 
        /// For a given compartmentId, resource limit name, and scope, returns the following:
        ///   * The number of available resources associated with the given limit.
        ///   * The usage in the selected compartment for the given limit.
        ///   Note that not all resource limits support this API. If the value is not available, the API returns a 404 response.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testResourceAvailability = Oci.Limits.GetResourceAvailability.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Tenancy_ocid,
        ///         LimitName = @var.Resource_availability_limit_name,
        ///         ServiceName = oci_limits_service.Test_service.Name,
        ///         AvailabilityDomain = @var.Resource_availability_availability_domain,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetResourceAvailabilityResult> Invoke(GetResourceAvailabilityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceAvailabilityResult>("oci:Limits/getResourceAvailability:getResourceAvailability", args ?? new GetResourceAvailabilityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourceAvailabilityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field is mandatory if the scopeType of the target resource limit is AD. Otherwise, this field should be omitted. If the above requirements are not met, the API returns a 400 - InvalidParameter response.
        /// </summary>
        [Input("availabilityDomain")]
        public string? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment for which data is being fetched.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The limit name for which to fetch the data.
        /// </summary>
        [Input("limitName", required: true)]
        public string LimitName { get; set; } = null!;

        /// <summary>
        /// The service name of the target quota.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetResourceAvailabilityArgs()
        {
        }
        public static new GetResourceAvailabilityArgs Empty => new GetResourceAvailabilityArgs();
    }

    public sealed class GetResourceAvailabilityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field is mandatory if the scopeType of the target resource limit is AD. Otherwise, this field should be omitted. If the above requirements are not met, the API returns a 400 - InvalidParameter response.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// The OCID of the compartment for which data is being fetched.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The limit name for which to fetch the data.
        /// </summary>
        [Input("limitName", required: true)]
        public Input<string> LimitName { get; set; } = null!;

        /// <summary>
        /// The service name of the target quota.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetResourceAvailabilityInvokeArgs()
        {
        }
        public static new GetResourceAvailabilityInvokeArgs Empty => new GetResourceAvailabilityInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourceAvailabilityResult
    {
        public readonly string? AvailabilityDomain;
        /// <summary>
        /// The count of available resources. To support resources with fractional counts, the field rounds down to the nearest integer.
        /// </summary>
        public readonly string Available;
        public readonly string CompartmentId;
        /// <summary>
        /// The effective quota value for the given compartment. This field is only present if there is a current quota policy affecting the current resource in the target region or availability domain.
        /// </summary>
        public readonly double EffectiveQuotaValue;
        /// <summary>
        /// The most accurate count of available resources.
        /// </summary>
        public readonly double FractionalAvailability;
        /// <summary>
        /// The current most accurate usage in the given compartment.
        /// </summary>
        public readonly double FractionalUsage;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LimitName;
        public readonly string ServiceName;
        /// <summary>
        /// The current usage in the given compartment. To support resources with fractional counts, the field rounds up to the nearest integer.
        /// </summary>
        public readonly string Used;

        [OutputConstructor]
        private GetResourceAvailabilityResult(
            string? availabilityDomain,

            string available,

            string compartmentId,

            double effectiveQuotaValue,

            double fractionalAvailability,

            double fractionalUsage,

            string id,

            string limitName,

            string serviceName,

            string used)
        {
            AvailabilityDomain = availabilityDomain;
            Available = available;
            CompartmentId = compartmentId;
            EffectiveQuotaValue = effectiveQuotaValue;
            FractionalAvailability = fractionalAvailability;
            FractionalUsage = fractionalUsage;
            Id = id;
            LimitName = limitName;
            ServiceName = serviceName;
            Used = used;
        }
    }
}
