// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LoadBalancer.Inputs
{

    public sealed class RuleSetItemArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("allowedMethods")]
        private InputList<string>? _allowedMethods;

        /// <summary>
        /// (Updatable) The list of HTTP methods allowed for this listener.
        /// </summary>
        public InputList<string> AllowedMethods
        {
            get => _allowedMethods ?? (_allowedMethods = new InputList<string>());
            set => _allowedMethods = value;
        }

        /// <summary>
        /// (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If "true", invalid characters are allowed in the HTTP header. If "false", invalid characters are not allowed in the HTTP header
        /// </summary>
        [Input("areInvalidCharactersAllowed")]
        public Input<bool>? AreInvalidCharactersAllowed { get; set; }

        [Input("conditions")]
        private InputList<Inputs.RuleSetItemConditionArgs>? _conditions;

        /// <summary>
        /// (Updatable)
        /// </summary>
        public InputList<Inputs.RuleSetItemConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.RuleSetItemConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// (Updatable) A brief description of the access control rule. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A header name that conforms to RFC 7230.  Example: `example_header_name`
        /// </summary>
        [Input("header")]
        public Input<string>? Header { get; set; }

        /// <summary>
        /// (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
        /// </summary>
        [Input("httpLargeHeaderSizeInKb")]
        public Input<int>? HttpLargeHeaderSizeInKb { get; set; }

        /// <summary>
        /// (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
        /// </summary>
        [Input("redirectUri")]
        public Input<Inputs.RuleSetItemRedirectUriArgs>? RedirectUri { get; set; }

        /// <summary>
        /// (Updatable) The HTTP status code to return when the incoming request is redirected.
        /// </summary>
        [Input("responseCode")]
        public Input<int>? ResponseCode { get; set; }

        /// <summary>
        /// (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
        /// </summary>
        [Input("statusCode")]
        public Input<int>? StatusCode { get; set; }

        /// <summary>
        /// (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// </summary>
        [Input("suffix")]
        public Input<string>? Suffix { get; set; }

        /// <summary>
        /// (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public RuleSetItemArgs()
        {
        }
    }
}
