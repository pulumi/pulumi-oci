// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LoadBalancer.Inputs
{

    public sealed class RuleSetItemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The action can be one of these values: `ADD_HTTP_REQUEST_HEADER`, `ADD_HTTP_RESPONSE_HEADER`, `ALLOW`, `CONTROL_ACCESS_USING_HTTP_METHODS`, `EXTEND_HTTP_REQUEST_HEADER_VALUE`, `EXTEND_HTTP_RESPONSE_HEADER_VALUE`, `HTTP_HEADER`, `IP_BASED_MAX_CONNECTIONS`, `REDIRECT`, `REMOVE_HTTP_REQUEST_HEADER`, `REMOVE_HTTP_RESPONSE_HEADER`
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("allowedMethods")]
        private InputList<string>? _allowedMethods;

        /// <summary>
        /// (Updatable) The list of HTTP methods allowed for this listener.
        /// 
        /// By default, you can specify only the standard HTTP methods defined in the [HTTP Method Registry](http://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also see a list of supported standard HTTP methods in the Load Balancing service documentation at [Managing Rule Sets](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrulesets.htm).
        /// 
        /// Your backend application must be able to handle the methods specified in this list.
        /// 
        /// The list of HTTP methods is extensible. If you need to configure custom HTTP methods, contact [My Oracle Support](http://support.oracle.com/) to remove the restriction for your tenancy.
        /// 
        /// Example: ["GET", "PUT", "POST", "PROPFIND"]
        /// </summary>
        public InputList<string> AllowedMethods
        {
            get => _allowedMethods ?? (_allowedMethods = new InputList<string>());
            set => _allowedMethods = value;
        }

        /// <summary>
        /// (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If "true", invalid characters are allowed in the HTTP header. If "false", invalid characters are not allowed in the HTTP header
        /// </summary>
        [Input("areInvalidCharactersAllowed")]
        public Input<bool>? AreInvalidCharactersAllowed { get; set; }

        [Input("conditions")]
        private InputList<Inputs.RuleSetItemConditionArgs>? _conditions;

        /// <summary>
        /// (Updatable)
        /// </summary>
        public InputList<Inputs.RuleSetItemConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.RuleSetItemConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// (Updatable) The maximum number of connections that the any IP can make to a listener unless the IP is mentioned in maxConnections. If no defaultMaxConnections is specified the default is unlimited.
        /// </summary>
        [Input("defaultMaxConnections")]
        public Input<int>? DefaultMaxConnections { get; set; }

        /// <summary>
        /// (Updatable) A brief description of the access control rule. Avoid entering confidential information.
        /// 
        /// example: `192.168.0.0/16 and 2001:db8::/32 are trusted clients. Whitelist them.`
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) A header name that conforms to RFC 7230.  Example: `ExampleHeaderName`
        /// </summary>
        [Input("header")]
        public Input<string>? Header { get; set; }

        /// <summary>
        /// (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
        /// </summary>
        [Input("httpLargeHeaderSizeInKb")]
        public Input<int>? HttpLargeHeaderSizeInKb { get; set; }

        [Input("ipMaxConnections")]
        private InputList<Inputs.RuleSetItemIpMaxConnectionArgs>? _ipMaxConnections;

        /// <summary>
        /// (Updatable) An array of IPs that have a maxConnection setting different than the default and what that maxConnection setting is
        /// </summary>
        public InputList<Inputs.RuleSetItemIpMaxConnectionArgs> IpMaxConnections
        {
            get => _ipMaxConnections ?? (_ipMaxConnections = new InputList<Inputs.RuleSetItemIpMaxConnectionArgs>());
            set => _ipMaxConnections = value;
        }

        /// <summary>
        /// (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// 
        /// Example: `ExamplePrefixValue`
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
        /// 
        /// **NOTE:** The Load Balancing service cannot automatically detect or avoid infinite redirects. Be sure to provide meaningful, complete, and correct field values. If any component field of this object has no value, the system retains the value from the incoming HTTP request URI.
        /// 
        /// For example, if you specify only the protocol field `Https`, and the incoming request URI is `http://example.com:8080`, the resulting runtime redirect URI is `https://example.com:8080`. The system retains the host and port from the incoming URI and does not automatically change the port setting from `8080` to `443`.
        /// 
        /// Be sure to configure valid percent-encoding (URL encoding) when needed.
        /// 
        /// In addition to static string values, you can use the following tokens to construct the redirect URI. These tokens extract values from the incoming HTTP request URI.
        /// *  {protocol} : The protocol from the incoming HTTP request URI.
        /// *  {host}     : The domain name from the incoming HTTP request URI.
        /// *  {port}     : The port from the incoming HTTP request URI.
        /// *  {path}     : The path from the incoming HTTP request URI.
        /// *  {query}    : The query string from the incoming HTTP request URI.
        /// 
        /// The tokens are case sensitive. For example, `{host}` is a valid token, but `{HOST}` is not.
        /// 
        /// You can retain the literal characters of a token when you specify values for the path and query properties of the redirect URI. Use a backslash (\\) as the escape character for the \\, {, and } characters. For example, if the incoming HTTP request URI is `/video`, the path property value:
        /// 
        /// `/example{path}123\{path\}`
        /// 
        /// appears in the constructed redirect URI as:
        /// 
        /// `/example/video123{path}`
        /// </summary>
        [Input("redirectUri")]
        public Input<Inputs.RuleSetItemRedirectUriArgs>? RedirectUri { get; set; }

        /// <summary>
        /// (Updatable) The HTTP status code to return when the incoming request is redirected.
        /// 
        /// The status line returned with the code is mapped from the standard HTTP specification. Valid response codes for redirection are:
        /// *  301
        /// *  302
        /// *  303
        /// *  307
        /// *  308
        /// 
        /// The default value is `302` (Found).
        /// 
        /// Example: `301`
        /// </summary>
        [Input("responseCode")]
        public Input<int>? ResponseCode { get; set; }

        /// <summary>
        /// (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is `405 (Method Not Allowed)`.  Example: 403
        /// </summary>
        [Input("statusCode")]
        public Input<int>? StatusCode { get; set; }

        /// <summary>
        /// (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// 
        /// Example: `ExampleSuffixValue`
        /// </summary>
        [Input("suffix")]
        public Input<string>? Suffix { get; set; }

        /// <summary>
        /// (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
        /// *  value cannot contain `$`
        /// *  value cannot contain patterns like `{variable_name}`. They are reserved for future extensions. Currently, such values are invalid.
        /// 
        /// Example: `ExampleValue`
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public RuleSetItemArgs()
        {
        }
        public static new RuleSetItemArgs Empty => new RuleSetItemArgs();
    }
}
