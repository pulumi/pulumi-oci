// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    public static class GetLogAnalyticsEntity
    {
        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity with the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntity = Oci.LogAnalytics.GetLogAnalyticsEntity.Invoke(new()
        ///     {
        ///         LogAnalyticsEntityId = testLogAnalyticsEntityOciLogAnalyticsLogAnalyticsEntity.Id,
        ///         Namespace = logAnalyticsEntityNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLogAnalyticsEntityResult> InvokeAsync(GetLogAnalyticsEntityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogAnalyticsEntityResult>("oci:LogAnalytics/getLogAnalyticsEntity:getLogAnalyticsEntity", args ?? new GetLogAnalyticsEntityArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity with the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntity = Oci.LogAnalytics.GetLogAnalyticsEntity.Invoke(new()
        ///     {
        ///         LogAnalyticsEntityId = testLogAnalyticsEntityOciLogAnalyticsLogAnalyticsEntity.Id,
        ///         Namespace = logAnalyticsEntityNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogAnalyticsEntityResult> Invoke(GetLogAnalyticsEntityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogAnalyticsEntityResult>("oci:LogAnalytics/getLogAnalyticsEntity:getLogAnalyticsEntity", args ?? new GetLogAnalyticsEntityInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity with the given id.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntity = Oci.LogAnalytics.GetLogAnalyticsEntity.Invoke(new()
        ///     {
        ///         LogAnalyticsEntityId = testLogAnalyticsEntityOciLogAnalyticsLogAnalyticsEntity.Id,
        ///         Namespace = logAnalyticsEntityNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogAnalyticsEntityResult> Invoke(GetLogAnalyticsEntityInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogAnalyticsEntityResult>("oci:LogAnalytics/getLogAnalyticsEntity:getLogAnalyticsEntity", args ?? new GetLogAnalyticsEntityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogAnalyticsEntityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The log analytics entity OCID.
        /// </summary>
        [Input("logAnalyticsEntityId", required: true)]
        public string LogAnalyticsEntityId { get; set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        public GetLogAnalyticsEntityArgs()
        {
        }
        public static new GetLogAnalyticsEntityArgs Empty => new GetLogAnalyticsEntityArgs();
    }

    public sealed class GetLogAnalyticsEntityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The log analytics entity OCID.
        /// </summary>
        [Input("logAnalyticsEntityId", required: true)]
        public Input<string> LogAnalyticsEntityId { get; set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        public GetLogAnalyticsEntityInvokeArgs()
        {
        }
        public static new GetLogAnalyticsEntityInvokeArgs Empty => new GetLogAnalyticsEntityInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogAnalyticsEntityResult
    {
        /// <summary>
        /// The Boolean flag to indicate if logs are collected for an entity for log analytics usage.
        /// </summary>
        public readonly bool AreLogsCollected;
        /// <summary>
        /// The OCID of the Cloud resource which this entity is a representation of. This may be blank when the entity represents a non-cloud resource that the customer may have on their premises.
        /// </summary>
        public readonly string CloudResourceId;
        /// <summary>
        /// Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Internal name for the log analytics entity type.
        /// </summary>
        public readonly string EntityTypeInternalName;
        /// <summary>
        /// Log analytics entity type name.
        /// </summary>
        public readonly string EntityTypeName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The hostname where the entity represented here is actually present. This would be the output one would get if they run `echo $HOSTNAME` on Linux or an equivalent OS command. This may be different from management agents host since logs may be collected remotely.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The log analytics entity OCID. This ID is a reference used by log analytics features and it represents a resource that is provisioned and managed by the customer on their premises or on the cloud.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// lifecycleDetails has additional information regarding substeps such as management agent plugin deployment.
        /// </summary>
        public readonly string LifecycleDetails;
        public readonly string LogAnalyticsEntityId;
        /// <summary>
        /// Management agent (management-agents resource kind) compartment OCID
        /// </summary>
        public readonly string ManagementAgentCompartmentId;
        /// <summary>
        /// Management agent (management-agents resource kind) display name
        /// </summary>
        public readonly string ManagementAgentDisplayName;
        /// <summary>
        /// The OCID of the Management Agent.
        /// </summary>
        public readonly string ManagementAgentId;
        /// <summary>
        /// Details of entity metadata information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLogAnalyticsEntityMetadataResult> Metadatas;
        /// <summary>
        /// Log analytics entity name.
        /// </summary>
        public readonly string Name;
        public readonly string Namespace;
        /// <summary>
        /// The name/value pairs for parameter values to be used in file patterns specified in log sources.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Properties;
        /// <summary>
        /// This indicates the type of source. It is primarily for Enterprise Manager Repository ID.
        /// </summary>
        public readonly string SourceId;
        /// <summary>
        /// The current state of the log analytics entity.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the resource was created, in the format defined by RFC3339.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the resource was last discovered, in the format defined by RFC3339.
        /// </summary>
        public readonly string TimeLastDiscovered;
        /// <summary>
        /// The date and time the resource was last updated, in the format defined by RFC3339.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The timezone region of the log analytics entity.
        /// </summary>
        public readonly string TimezoneRegion;

        [OutputConstructor]
        private GetLogAnalyticsEntityResult(
            bool areLogsCollected,

            string cloudResourceId,

            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string entityTypeInternalName,

            string entityTypeName,

            ImmutableDictionary<string, string> freeformTags,

            string hostname,

            string id,

            string lifecycleDetails,

            string logAnalyticsEntityId,

            string managementAgentCompartmentId,

            string managementAgentDisplayName,

            string managementAgentId,

            ImmutableArray<Outputs.GetLogAnalyticsEntityMetadataResult> metadatas,

            string name,

            string @namespace,

            ImmutableDictionary<string, string> properties,

            string sourceId,

            string state,

            string timeCreated,

            string timeLastDiscovered,

            string timeUpdated,

            string timezoneRegion)
        {
            AreLogsCollected = areLogsCollected;
            CloudResourceId = cloudResourceId;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            EntityTypeInternalName = entityTypeInternalName;
            EntityTypeName = entityTypeName;
            FreeformTags = freeformTags;
            Hostname = hostname;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            LogAnalyticsEntityId = logAnalyticsEntityId;
            ManagementAgentCompartmentId = managementAgentCompartmentId;
            ManagementAgentDisplayName = managementAgentDisplayName;
            ManagementAgentId = managementAgentId;
            Metadatas = metadatas;
            Name = name;
            Namespace = @namespace;
            Properties = properties;
            SourceId = sourceId;
            State = state;
            TimeCreated = timeCreated;
            TimeLastDiscovered = timeLastDiscovered;
            TimeUpdated = timeUpdated;
            TimezoneRegion = timezoneRegion;
        }
    }
}
