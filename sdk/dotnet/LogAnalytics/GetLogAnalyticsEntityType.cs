// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    public static class GetLogAnalyticsEntityType
    {
        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity Type resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity type with the given name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntityType = Oci.LogAnalytics.GetLogAnalyticsEntityType.Invoke(new()
        ///     {
        ///         EntityTypeName = logAnalyticsEntityTypeName,
        ///         Namespace = logAnalyticsEntityTypeNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLogAnalyticsEntityTypeResult> InvokeAsync(GetLogAnalyticsEntityTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogAnalyticsEntityTypeResult>("oci:LogAnalytics/getLogAnalyticsEntityType:getLogAnalyticsEntityType", args ?? new GetLogAnalyticsEntityTypeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity Type resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity type with the given name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntityType = Oci.LogAnalytics.GetLogAnalyticsEntityType.Invoke(new()
        ///     {
        ///         EntityTypeName = logAnalyticsEntityTypeName,
        ///         Namespace = logAnalyticsEntityTypeNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogAnalyticsEntityTypeResult> Invoke(GetLogAnalyticsEntityTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogAnalyticsEntityTypeResult>("oci:LogAnalytics/getLogAnalyticsEntityType:getLogAnalyticsEntityType", args ?? new GetLogAnalyticsEntityTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Log Analytics Entity Type resource in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Retrieve the log analytics entity type with the given name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testLogAnalyticsEntityType = Oci.LogAnalytics.GetLogAnalyticsEntityType.Invoke(new()
        ///     {
        ///         EntityTypeName = logAnalyticsEntityTypeName,
        ///         Namespace = logAnalyticsEntityTypeNamespace,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLogAnalyticsEntityTypeResult> Invoke(GetLogAnalyticsEntityTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogAnalyticsEntityTypeResult>("oci:LogAnalytics/getLogAnalyticsEntityType:getLogAnalyticsEntityType", args ?? new GetLogAnalyticsEntityTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogAnalyticsEntityTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Log analytics entity type name.
        /// </summary>
        [Input("entityTypeName", required: true)]
        public string EntityTypeName { get; set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        public GetLogAnalyticsEntityTypeArgs()
        {
        }
        public static new GetLogAnalyticsEntityTypeArgs Empty => new GetLogAnalyticsEntityTypeArgs();
    }

    public sealed class GetLogAnalyticsEntityTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Log analytics entity type name.
        /// </summary>
        [Input("entityTypeName", required: true)]
        public Input<string> EntityTypeName { get; set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        public GetLogAnalyticsEntityTypeInvokeArgs()
        {
        }
        public static new GetLogAnalyticsEntityTypeInvokeArgs Empty => new GetLogAnalyticsEntityTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogAnalyticsEntityTypeResult
    {
        /// <summary>
        /// Log analytics entity type category. Category will be used for grouping and filtering.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// Log analytics entity type group. That can be CLOUD (OCI) or NON_CLOUD otherwise.
        /// </summary>
        public readonly string CloudType;
        public readonly string EntityTypeName;
        public readonly string Id;
        /// <summary>
        /// Internal name for the log analytics entity type.
        /// </summary>
        public readonly string InternalName;
        public readonly string ManagementAgentEligibilityStatus;
        /// <summary>
        /// Log analytics entity type property name.
        /// </summary>
        public readonly string Name;
        public readonly string Namespace;
        /// <summary>
        /// The parameters used in file patterns specified in log sources for this log analytics entity type.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLogAnalyticsEntityTypePropertyResult> Properties;
        /// <summary>
        /// The current lifecycle state of the log analytics entity type.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Time the log analytics entity type was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetLogAnalyticsEntityTypeResult(
            string category,

            string cloudType,

            string entityTypeName,

            string id,

            string internalName,

            string managementAgentEligibilityStatus,

            string name,

            string @namespace,

            ImmutableArray<Outputs.GetLogAnalyticsEntityTypePropertyResult> properties,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            Category = category;
            CloudType = cloudType;
            EntityTypeName = entityTypeName;
            Id = id;
            InternalName = internalName;
            ManagementAgentEligibilityStatus = managementAgentEligibilityStatus;
            Name = name;
            Namespace = @namespace;
            Properties = properties;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
