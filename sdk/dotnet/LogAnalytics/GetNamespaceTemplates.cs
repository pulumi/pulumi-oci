// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    public static class GetNamespaceTemplates
    {
        /// <summary>
        /// This data source provides the list of Namespace Templates in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Returns a list of templates, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as template name, type, display name and description.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamespaceTemplates = Oci.LogAnalytics.GetNamespaceTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Namespace = namespaceTemplateNamespace,
        ///         Name = namespaceTemplateName,
        ///         NamespaceTemplateFilter = namespaceTemplateNamespaceTemplateFilter,
        ///         State = namespaceTemplateState,
        ///         TemplateDisplayText = namespaceTemplateTemplateDisplayText,
        ///         Type = namespaceTemplateType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNamespaceTemplatesResult> InvokeAsync(GetNamespaceTemplatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceTemplatesResult>("oci:LogAnalytics/getNamespaceTemplates:getNamespaceTemplates", args ?? new GetNamespaceTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Namespace Templates in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Returns a list of templates, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as template name, type, display name and description.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamespaceTemplates = Oci.LogAnalytics.GetNamespaceTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Namespace = namespaceTemplateNamespace,
        ///         Name = namespaceTemplateName,
        ///         NamespaceTemplateFilter = namespaceTemplateNamespaceTemplateFilter,
        ///         State = namespaceTemplateState,
        ///         TemplateDisplayText = namespaceTemplateTemplateDisplayText,
        ///         Type = namespaceTemplateType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNamespaceTemplatesResult> Invoke(GetNamespaceTemplatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceTemplatesResult>("oci:LogAnalytics/getNamespaceTemplates:getNamespaceTemplates", args ?? new GetNamespaceTemplatesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Namespace Templates in Oracle Cloud Infrastructure Log Analytics service.
        /// 
        /// Returns a list of templates, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as template name, type, display name and description.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamespaceTemplates = Oci.LogAnalytics.GetNamespaceTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Namespace = namespaceTemplateNamespace,
        ///         Name = namespaceTemplateName,
        ///         NamespaceTemplateFilter = namespaceTemplateNamespaceTemplateFilter,
        ///         State = namespaceTemplateState,
        ///         TemplateDisplayText = namespaceTemplateTemplateDisplayText,
        ///         Type = namespaceTemplateType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNamespaceTemplatesResult> Invoke(GetNamespaceTemplatesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceTemplatesResult>("oci:LogAnalytics/getNamespaceTemplates:getNamespaceTemplates", args ?? new GetNamespaceTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetNamespaceTemplatesFilterArgs>? _filters;
        public List<Inputs.GetNamespaceTemplatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNamespaceTemplatesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The template name used for filtering.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        /// <summary>
        /// filter
        /// </summary>
        [Input("namespaceTemplateFilter")]
        public string? NamespaceTemplateFilter { get; set; }

        /// <summary>
        /// The template lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The template display text used for filtering. Only templates with the specified name or description will be returned.
        /// </summary>
        [Input("templateDisplayText")]
        public string? TemplateDisplayText { get; set; }

        /// <summary>
        /// The template type used for filtering. Only templates of the specified type will be returned.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetNamespaceTemplatesArgs()
        {
        }
        public static new GetNamespaceTemplatesArgs Empty => new GetNamespaceTemplatesArgs();
    }

    public sealed class GetNamespaceTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetNamespaceTemplatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetNamespaceTemplatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNamespaceTemplatesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The template name used for filtering.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// filter
        /// </summary>
        [Input("namespaceTemplateFilter")]
        public Input<string>? NamespaceTemplateFilter { get; set; }

        /// <summary>
        /// The template lifecycle state used for filtering. Currently supported values are ACTIVE and DELETED.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The template display text used for filtering. Only templates with the specified name or description will be returned.
        /// </summary>
        [Input("templateDisplayText")]
        public Input<string>? TemplateDisplayText { get; set; }

        /// <summary>
        /// The template type used for filtering. Only templates of the specified type will be returned.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetNamespaceTemplatesInvokeArgs()
        {
        }
        public static new GetNamespaceTemplatesInvokeArgs Empty => new GetNamespaceTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceTemplatesResult
    {
        /// <summary>
        /// Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetNamespaceTemplatesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of log_analytics_template_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNamespaceTemplatesLogAnalyticsTemplateCollectionResult> LogAnalyticsTemplateCollections;
        /// <summary>
        /// The template name.
        /// </summary>
        public readonly string? Name;
        public readonly string Namespace;
        public readonly string? NamespaceTemplateFilter;
        /// <summary>
        /// The current state of the template.
        /// </summary>
        public readonly string? State;
        public readonly string? TemplateDisplayText;
        /// <summary>
        /// The template type.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetNamespaceTemplatesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetNamespaceTemplatesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetNamespaceTemplatesLogAnalyticsTemplateCollectionResult> logAnalyticsTemplateCollections,

            string? name,

            string @namespace,

            string? namespaceTemplateFilter,

            string? state,

            string? templateDisplayText,

            string? type)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            LogAnalyticsTemplateCollections = logAnalyticsTemplateCollections;
            Name = name;
            Namespace = @namespace;
            NamespaceTemplateFilter = namespaceTemplateFilter;
            State = state;
            TemplateDisplayText = templateDisplayText;
            Type = type;
        }
    }
}
