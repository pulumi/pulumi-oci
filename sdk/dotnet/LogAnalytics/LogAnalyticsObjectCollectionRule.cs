// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    /// <summary>
    /// This resource provides the Log Analytics Object Collection Rule resource in Oracle Cloud Infrastructure Log Analytics service.
    /// 
    /// Create a configuration to collect logs from object storage bucket.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testLogAnalyticsObjectCollectionRule = new Oci.LogAnalytics.LogAnalyticsObjectCollectionRule("test_log_analytics_object_collection_rule", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         LogGroupId = testLogAnalyticsLogGroup.Id,
    ///         Name = logAnalyticsObjectCollectionRuleName,
    ///         Namespace = logAnalyticsObjectCollectionRuleNamespace,
    ///         OsBucketName = testBucket.Name,
    ///         OsNamespace = logAnalyticsObjectCollectionRuleOsNamespace,
    ///         CharEncoding = logAnalyticsObjectCollectionRuleCharEncoding,
    ///         CollectionType = logAnalyticsObjectCollectionRuleCollectionType,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         Description = logAnalyticsObjectCollectionRuleDescription,
    ///         EntityId = testEntity.Id,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         IsEnabled = logAnalyticsObjectCollectionRuleIsEnabled,
    ///         IsForceHistoricCollection = logAnalyticsObjectCollectionRuleIsForceHistoricCollection,
    ///         LogSet = logAnalyticsObjectCollectionRuleLogSet,
    ///         LogSetExtRegex = logAnalyticsObjectCollectionRuleLogSetExtRegex,
    ///         LogSetKey = logAnalyticsObjectCollectionRuleLogSetKey,
    ///         LogSourceName = logAnalyticsObjectCollectionRuleLogSourceName,
    ///         LogType = logAnalyticsObjectCollectionRuleLogType,
    ///         ObjectNameFilters = logAnalyticsObjectCollectionRuleObjectNameFilters,
    ///         Overrides = logAnalyticsObjectCollectionRuleOverrides,
    ///         PollSince = logAnalyticsObjectCollectionRulePollSince,
    ///         PollTill = logAnalyticsObjectCollectionRulePollTill,
    ///         StreamCursorTime = logAnalyticsObjectCollectionRuleStreamCursorTime,
    ///         StreamCursorType = logAnalyticsObjectCollectionRuleStreamCursorType,
    ///         StreamId = testStream.Id,
    ///         Timezone = logAnalyticsObjectCollectionRuleTimezone,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LogAnalyticsObjectCollectionRules can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:LogAnalytics/logAnalyticsObjectCollectionRule:LogAnalyticsObjectCollectionRule test_log_analytics_object_collection_rule "namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:LogAnalytics/logAnalyticsObjectCollectionRule:LogAnalyticsObjectCollectionRule")]
    public partial class LogAnalyticsObjectCollectionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
        /// </summary>
        [Output("charEncoding")]
        public Output<string> CharEncoding { get; private set; } = null!;

        /// <summary>
        /// The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
        /// </summary>
        [Output("collectionType")]
        public Output<string> CollectionType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Logging Analytics entity OCID. Associates the processed logs with the given entity (optional).
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether or not this rule is currently enabled.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// Flag to allow historic collection if poll period overlaps with existing ACTIVE collection rule
        /// </summary>
        [Output("isForceHistoricCollection")]
        public Output<bool> IsForceHistoricCollection { get; private set; } = null!;

        /// <summary>
        /// Last Collected Object for the rule
        /// </summary>
        [Output("lastCollectedObject")]
        public Output<string> LastCollectedObject { get; private set; } = null!;

        /// <summary>
        /// A detailed status of the life cycle state.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Logging Analytics Log group OCID to associate the processed logs with.
        /// </summary>
        [Output("logGroupId")]
        public Output<string> LogGroupId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
        /// </summary>
        [Output("logSet")]
        public Output<string> LogSet { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The regex to be applied against given logSetKey. Regex has to be in string escaped format.
        /// </summary>
        [Output("logSetExtRegex")]
        public Output<string> LogSetExtRegex { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
        /// </summary>
        [Output("logSetKey")]
        public Output<string> LogSetKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name of the Logging Analytics Source to use for the processing.
        /// </summary>
        [Output("logSourceName")]
        public Output<string> LogSourceName { get; private set; } = null!;

        /// <summary>
        /// Type of files/objects in this object collection rule.
        /// </summary>
        [Output("logType")]
        public Output<string> LogType { get; private set; } = null!;

        /// <summary>
        /// A unique name given to the rule. The name must be unique within the tenancy, and cannot be modified.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// (Updatable) When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard "*". For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
        /// </summary>
        [Output("objectNameFilters")]
        public Output<ImmutableArray<string>> ObjectNameFilters { get; private set; } = null!;

        /// <summary>
        /// Name of the Object Storage bucket.
        /// </summary>
        [Output("osBucketName")]
        public Output<string> OsBucketName { get; private set; } = null!;

        /// <summary>
        /// Object Storage namespace.
        /// </summary>
        [Output("osNamespace")]
        public Output<string> OsNamespace { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The override is used to modify some important configuration properties for objects matching a specific pattern inside the bucket. Supported propeties for override are: logSourceName, charEncoding, entityId. Supported matchType for override are "contains".
        /// </summary>
        [Output("overrides")]
        public Output<ImmutableArray<Outputs.LogAnalyticsObjectCollectionRuleOverride>> Overrides { get; private set; } = null!;

        /// <summary>
        /// The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC or HISTORIC_LIVE collection types. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
        /// </summary>
        [Output("pollSince")]
        public Output<string> PollSince { get; private set; } = null!;

        /// <summary>
        /// The newest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC collection type. When collectionType is LIVE or HISTORIC_LIVE, specifying pollTill will result in error.
        /// </summary>
        [Output("pollTill")]
        public Output<string> PollTill { get; private set; } = null!;

        /// <summary>
        /// The current state of the rule.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The time from which to consume the objects, if streamCursorType is AT_TIME.
        /// </summary>
        [Output("streamCursorTime")]
        public Output<string> StreamCursorTime { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Cursor type used to fetch messages from stream. When the streamCursorType is set to DEFAULT, the existing cursor position will be used if already set by any previous objection collection rule(s) using the same stream.  Otherwise, the behaviour is to consume from the oldest available message in the stream.  When the streamCursorType is set to TRIM_HORIZON, the behaviour is to start consuming from the oldest available message in the stream.  When the streamCursorType is set to LATEST, the behavior is to start consuming messages that were published after the creation of this rule.  When the streamCursorType is set to AT_TIME, the behavior is to start consuming from a given time.  For more information on cursor types, see [Stream Consumer Groups](https://docs.oracle.com/en-us/iaas/Content/Streaming/Tasks/using_consumer_groups.htm).
        /// </summary>
        [Output("streamCursorType")]
        public Output<string> StreamCursorType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A Stream OCID is required for Object Collection rules of type LIVE or HISTORIC_LIVE, which will be used by Logging Analytics while creating Event Rule and consume the event notifications created by the Object Storage.
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;

        /// <summary>
        /// The time when this rule was created. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time when this rule was last updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a LogAnalyticsObjectCollectionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogAnalyticsObjectCollectionRule(string name, LogAnalyticsObjectCollectionRuleArgs args, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/logAnalyticsObjectCollectionRule:LogAnalyticsObjectCollectionRule", name, args ?? new LogAnalyticsObjectCollectionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogAnalyticsObjectCollectionRule(string name, Input<string> id, LogAnalyticsObjectCollectionRuleState? state = null, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/logAnalyticsObjectCollectionRule:LogAnalyticsObjectCollectionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogAnalyticsObjectCollectionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogAnalyticsObjectCollectionRule Get(string name, Input<string> id, LogAnalyticsObjectCollectionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new LogAnalyticsObjectCollectionRule(name, id, state, options);
        }
    }

    public sealed class LogAnalyticsObjectCollectionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
        /// </summary>
        [Input("charEncoding")]
        public Input<string>? CharEncoding { get; set; }

        /// <summary>
        /// The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
        /// </summary>
        [Input("collectionType")]
        public Input<string>? CollectionType { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Logging Analytics entity OCID. Associates the processed logs with the given entity (optional).
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Whether or not this rule is currently enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Flag to allow historic collection if poll period overlaps with existing ACTIVE collection rule
        /// </summary>
        [Input("isForceHistoricCollection")]
        public Input<bool>? IsForceHistoricCollection { get; set; }

        /// <summary>
        /// (Updatable) Logging Analytics Log group OCID to associate the processed logs with.
        /// </summary>
        [Input("logGroupId", required: true)]
        public Input<string> LogGroupId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
        /// </summary>
        [Input("logSet")]
        public Input<string>? LogSet { get; set; }

        /// <summary>
        /// (Updatable) The regex to be applied against given logSetKey. Regex has to be in string escaped format.
        /// </summary>
        [Input("logSetExtRegex")]
        public Input<string>? LogSetExtRegex { get; set; }

        /// <summary>
        /// (Updatable) An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
        /// </summary>
        [Input("logSetKey")]
        public Input<string>? LogSetKey { get; set; }

        /// <summary>
        /// (Updatable) Name of the Logging Analytics Source to use for the processing.
        /// </summary>
        [Input("logSourceName")]
        public Input<string>? LogSourceName { get; set; }

        /// <summary>
        /// Type of files/objects in this object collection rule.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// A unique name given to the rule. The name must be unique within the tenancy, and cannot be modified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("objectNameFilters")]
        private InputList<string>? _objectNameFilters;

        /// <summary>
        /// (Updatable) When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard "*". For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
        /// </summary>
        public InputList<string> ObjectNameFilters
        {
            get => _objectNameFilters ?? (_objectNameFilters = new InputList<string>());
            set => _objectNameFilters = value;
        }

        /// <summary>
        /// Name of the Object Storage bucket.
        /// </summary>
        [Input("osBucketName", required: true)]
        public Input<string> OsBucketName { get; set; } = null!;

        /// <summary>
        /// Object Storage namespace.
        /// </summary>
        [Input("osNamespace", required: true)]
        public Input<string> OsNamespace { get; set; } = null!;

        [Input("overrides")]
        private InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideArgs>? _overrides;

        /// <summary>
        /// (Updatable) The override is used to modify some important configuration properties for objects matching a specific pattern inside the bucket. Supported propeties for override are: logSourceName, charEncoding, entityId. Supported matchType for override are "contains".
        /// </summary>
        public InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideArgs>());
            set => _overrides = value;
        }

        /// <summary>
        /// The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC or HISTORIC_LIVE collection types. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
        /// </summary>
        [Input("pollSince")]
        public Input<string>? PollSince { get; set; }

        /// <summary>
        /// The newest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC collection type. When collectionType is LIVE or HISTORIC_LIVE, specifying pollTill will result in error.
        /// </summary>
        [Input("pollTill")]
        public Input<string>? PollTill { get; set; }

        /// <summary>
        /// (Updatable) The time from which to consume the objects, if streamCursorType is AT_TIME.
        /// </summary>
        [Input("streamCursorTime")]
        public Input<string>? StreamCursorTime { get; set; }

        /// <summary>
        /// (Updatable) Cursor type used to fetch messages from stream. When the streamCursorType is set to DEFAULT, the existing cursor position will be used if already set by any previous objection collection rule(s) using the same stream.  Otherwise, the behaviour is to consume from the oldest available message in the stream.  When the streamCursorType is set to TRIM_HORIZON, the behaviour is to start consuming from the oldest available message in the stream.  When the streamCursorType is set to LATEST, the behavior is to start consuming messages that were published after the creation of this rule.  When the streamCursorType is set to AT_TIME, the behavior is to start consuming from a given time.  For more information on cursor types, see [Stream Consumer Groups](https://docs.oracle.com/en-us/iaas/Content/Streaming/Tasks/using_consumer_groups.htm).
        /// </summary>
        [Input("streamCursorType")]
        public Input<string>? StreamCursorType { get; set; }

        /// <summary>
        /// (Updatable) A Stream OCID is required for Object Collection rules of type LIVE or HISTORIC_LIVE, which will be used by Logging Analytics while creating Event Rule and consume the event notifications created by the Object Storage.
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        /// <summary>
        /// (Updatable) Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public LogAnalyticsObjectCollectionRuleArgs()
        {
        }
        public static new LogAnalyticsObjectCollectionRuleArgs Empty => new LogAnalyticsObjectCollectionRuleArgs();
    }

    public sealed class LogAnalyticsObjectCollectionRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) An optional character encoding to aid in detecting the character encoding of the contents of the objects while processing. It is recommended to set this value as ISO_8589_1 when configuring content of the objects having more numeric characters, and very few alphabets. For e.g. this applies when configuring VCN Flow Logs.
        /// </summary>
        [Input("charEncoding")]
        public Input<string>? CharEncoding { get; set; }

        /// <summary>
        /// The type of collection. Supported collection types: LIVE, HISTORIC, HISTORIC_LIVE
        /// </summary>
        [Input("collectionType")]
        public Input<string>? CollectionType { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to which this rule belongs.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) A string that describes the details of the rule. It does not have to be unique, and can be changed. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) Logging Analytics entity OCID. Associates the processed logs with the given entity (optional).
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Whether or not this rule is currently enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Flag to allow historic collection if poll period overlaps with existing ACTIVE collection rule
        /// </summary>
        [Input("isForceHistoricCollection")]
        public Input<bool>? IsForceHistoricCollection { get; set; }

        /// <summary>
        /// Last Collected Object for the rule
        /// </summary>
        [Input("lastCollectedObject")]
        public Input<string>? LastCollectedObject { get; set; }

        /// <summary>
        /// A detailed status of the life cycle state.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// (Updatable) Logging Analytics Log group OCID to associate the processed logs with.
        /// </summary>
        [Input("logGroupId")]
        public Input<string>? LogGroupId { get; set; }

        /// <summary>
        /// (Updatable) The logSet to be associated with the processed logs. The logSet feature can be used by customers with high volume of data  and this feature has to be enabled for a given tenancy prior to its usage. When logSetExtRegex value is provided, it will take precedence over this logSet value and logSet will be computed dynamically  using logSetKey and logSetExtRegex.
        /// </summary>
        [Input("logSet")]
        public Input<string>? LogSet { get; set; }

        /// <summary>
        /// (Updatable) The regex to be applied against given logSetKey. Regex has to be in string escaped format.
        /// </summary>
        [Input("logSetExtRegex")]
        public Input<string>? LogSetExtRegex { get; set; }

        /// <summary>
        /// (Updatable) An optional parameter to indicate from where the logSet to be extracted using logSetExtRegex. Default value is OBJECT_PATH (e.g. /n/&lt;namespace&gt;/b/&lt;bucketname&gt;/o/&lt;objectname&gt;).
        /// </summary>
        [Input("logSetKey")]
        public Input<string>? LogSetKey { get; set; }

        /// <summary>
        /// (Updatable) Name of the Logging Analytics Source to use for the processing.
        /// </summary>
        [Input("logSourceName")]
        public Input<string>? LogSourceName { get; set; }

        /// <summary>
        /// Type of files/objects in this object collection rule.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// A unique name given to the rule. The name must be unique within the tenancy, and cannot be modified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("objectNameFilters")]
        private InputList<string>? _objectNameFilters;

        /// <summary>
        /// (Updatable) When the filters are provided, only the objects matching the filters are picked up for processing. The matchType supported is exact match and accommodates wildcard "*". For more information on filters, see [Event Filters](https://docs.oracle.com/en-us/iaas/Content/Events/Concepts/filterevents.htm).
        /// </summary>
        public InputList<string> ObjectNameFilters
        {
            get => _objectNameFilters ?? (_objectNameFilters = new InputList<string>());
            set => _objectNameFilters = value;
        }

        /// <summary>
        /// Name of the Object Storage bucket.
        /// </summary>
        [Input("osBucketName")]
        public Input<string>? OsBucketName { get; set; }

        /// <summary>
        /// Object Storage namespace.
        /// </summary>
        [Input("osNamespace")]
        public Input<string>? OsNamespace { get; set; }

        [Input("overrides")]
        private InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideGetArgs>? _overrides;

        /// <summary>
        /// (Updatable) The override is used to modify some important configuration properties for objects matching a specific pattern inside the bucket. Supported propeties for override are: logSourceName, charEncoding, entityId. Supported matchType for override are "contains".
        /// </summary>
        public InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideGetArgs> Overrides
        {
            get => _overrides ?? (_overrides = new InputList<Inputs.LogAnalyticsObjectCollectionRuleOverrideGetArgs>());
            set => _overrides = value;
        }

        /// <summary>
        /// The oldest time of the file in the bucket to consider for collection. Accepted values are: BEGINNING or CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC or HISTORIC_LIVE collection types. When collectionType is LIVE, specifying pollSince value other than CURRENT_TIME will result in error.
        /// </summary>
        [Input("pollSince")]
        public Input<string>? PollSince { get; set; }

        /// <summary>
        /// The newest time of the file in the bucket to consider for collection. Accepted values are: CURRENT_TIME or RFC3339 formatted datetime string. Use this for HISTORIC collection type. When collectionType is LIVE or HISTORIC_LIVE, specifying pollTill will result in error.
        /// </summary>
        [Input("pollTill")]
        public Input<string>? PollTill { get; set; }

        /// <summary>
        /// The current state of the rule.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The time from which to consume the objects, if streamCursorType is AT_TIME.
        /// </summary>
        [Input("streamCursorTime")]
        public Input<string>? StreamCursorTime { get; set; }

        /// <summary>
        /// (Updatable) Cursor type used to fetch messages from stream. When the streamCursorType is set to DEFAULT, the existing cursor position will be used if already set by any previous objection collection rule(s) using the same stream.  Otherwise, the behaviour is to consume from the oldest available message in the stream.  When the streamCursorType is set to TRIM_HORIZON, the behaviour is to start consuming from the oldest available message in the stream.  When the streamCursorType is set to LATEST, the behavior is to start consuming messages that were published after the creation of this rule.  When the streamCursorType is set to AT_TIME, the behavior is to start consuming from a given time.  For more information on cursor types, see [Stream Consumer Groups](https://docs.oracle.com/en-us/iaas/Content/Streaming/Tasks/using_consumer_groups.htm).
        /// </summary>
        [Input("streamCursorType")]
        public Input<string>? StreamCursorType { get; set; }

        /// <summary>
        /// (Updatable) A Stream OCID is required for Object Collection rules of type LIVE or HISTORIC_LIVE, which will be used by Logging Analytics while creating Event Rule and consume the event notifications created by the Object Storage.
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        /// <summary>
        /// The time when this rule was created. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time when this rule was last updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) Timezone to be used when processing log entries whose timestamps do not include an explicit timezone.  When this property is not specified, the timezone of the entity specified is used.  If the entity is also not specified or do not have a valid timezone then UTC is used. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public LogAnalyticsObjectCollectionRuleState()
        {
        }
        public static new LogAnalyticsObjectCollectionRuleState Empty => new LogAnalyticsObjectCollectionRuleState();
    }
}
