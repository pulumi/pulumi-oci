// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    /// <summary>
    /// This resource provides the Namespace resource in Oracle Cloud Infrastructure Log Analytics service.
    /// 
    /// Onboards a tenancy with Log Analytics or Offboards a tenancy from Log Analytics functionality.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNamespace = new Oci.LogAnalytics.Namespace("testNamespace", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         IsOnboarded = @var.Is_onboarded,
    ///         NamespaceName = @var.Namespace_namespace,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Namespace can be imported using the `namespace`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:LogAnalytics/namespace:Namespace test_namespace "namespace"
    /// ```
    /// </summary>
    [OciResourceType("oci:LogAnalytics/namespace:Namespace")]
    public partial class Namespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the root compartment i.e. OCID of the tenancy.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
        /// </summary>
        [Output("isOnboarded")]
        public Output<bool> IsOnboarded { get; private set; } = null!;

        /// <summary>
        /// The Log Analytics namespace used for the request.
        /// </summary>
        [Output("namespace")]
        public Output<string> NamespaceName { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs args, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/namespace:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/namespace:Namespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, state, options);
        }
    }

    public sealed class NamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the root compartment i.e. OCID of the tenancy.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
        /// </summary>
        [Input("isOnboarded", required: true)]
        public Input<bool> IsOnboarded { get; set; } = null!;

        /// <summary>
        /// The Log Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        public NamespaceArgs()
        {
        }
        public static new NamespaceArgs Empty => new NamespaceArgs();
    }

    public sealed class NamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the root compartment i.e. OCID of the tenancy.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Use `true` if tenancy is to be onboarded to logging analytics and `false` if tenancy is to be offboarded
        /// </summary>
        [Input("isOnboarded")]
        public Input<bool>? IsOnboarded { get; set; }

        /// <summary>
        /// The Log Analytics namespace used for the request.
        /// </summary>
        [Input("namespace")]
        public Input<string>? NamespaceName { get; set; }

        public NamespaceState()
        {
        }
        public static new NamespaceState Empty => new NamespaceState();
    }
}
