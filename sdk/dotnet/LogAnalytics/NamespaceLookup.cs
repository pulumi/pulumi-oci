// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.LogAnalytics
{
    /// <summary>
    /// This resource provides the Namespace Lookup resource in Oracle Cloud Infrastructure Log Analytics service.
    /// 
    /// Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNamespaceLookup = new Oci.LogAnalytics.NamespaceLookup("test_namespace_lookup", new()
    ///     {
    ///         LookupName = namespaceLookupLookupName,
    ///         Namespace = namespaceLookupNamespace,
    ///         RegisterLookupFile = namespaceLookupRegisterLookupFile,
    ///         Type = namespaceLookupType,
    ///         Categories = new[]
    ///         {
    ///             new Oci.LogAnalytics.Inputs.NamespaceLookupCategoryArgs
    ///             {
    ///                 Description = namespaceLookupCategoriesDescription,
    ///                 DisplayName = namespaceLookupCategoriesDisplayName,
    ///                 IsSystem = namespaceLookupCategoriesIsSystem,
    ///                 Name = namespaceLookupCategoriesName,
    ///                 Type = namespaceLookupCategoriesType,
    ///             },
    ///         },
    ///         CharEncoding = namespaceLookupCharEncoding,
    ///         CompartmentId = namespaceLookupCompartmentId,
    ///         DefaultMatchValue = namespaceLookupDefaultMatchValue,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         Description = namespaceLookupDescription,
    ///         Fields = new[]
    ///         {
    ///             new Oci.LogAnalytics.Inputs.NamespaceLookupFieldArgs
    ///             {
    ///                 CommonFieldName = namespaceLookupFieldsCommonFieldName,
    ///                 DefaultMatchValue = namespaceLookupFieldsDefaultMatchValue,
    ///                 DisplayName = namespaceLookupFieldsDisplayName,
    ///                 IsCommonField = namespaceLookupFieldsIsCommonField,
    ///                 MatchOperator = namespaceLookupFieldsMatchOperator,
    ///                 Name = namespaceLookupFieldsName,
    ///                 Position = namespaceLookupFieldsPosition,
    ///             },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         IsHidden = namespaceLookupIsHidden,
    ///         MaxMatches = namespaceLookupMaxMatches,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NamespaceLookups can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:LogAnalytics/namespaceLookup:NamespaceLookup test_namespace_lookup "namespaces/{namespaceName}/lookups/{lookupName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:LogAnalytics/namespaceLookup:NamespaceLookup")]
    public partial class NamespaceLookup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The active edit version.
        /// </summary>
        [Output("activeEditVersion")]
        public Output<string> ActiveEditVersion { get; private set; } = null!;

        /// <summary>
        /// The canonical link.
        /// </summary>
        [Output("canonicalLink")]
        public Output<string> CanonicalLink { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
        /// </summary>
        [Output("categories")]
        public Output<ImmutableArray<Outputs.NamespaceLookupCategory>> Categories { get; private set; } = null!;

        /// <summary>
        /// The character encoding of the uploaded file.
        /// </summary>
        [Output("charEncoding")]
        public Output<string?> CharEncoding { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The default match value.
        /// </summary>
        [Output("defaultMatchValue")]
        public Output<string?> DefaultMatchValue { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The lookup description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The edit version.
        /// </summary>
        [Output("editVersion")]
        public Output<string> EditVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The lookup fields.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.NamespaceLookupField>> Fields { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A flag indicating if the lookup is custom (user-defined) or built in.
        /// </summary>
        [Output("isBuiltIn")]
        public Output<string> IsBuiltIn { get; private set; } = null!;

        /// <summary>
        /// A flag indicating whether or not the new lookup should be hidden.
        /// </summary>
        [Output("isHidden")]
        public Output<bool> IsHidden { get; private set; } = null!;

        /// <summary>
        /// The lookup display name.
        /// </summary>
        [Output("lookupDisplayName")]
        public Output<string> LookupDisplayName { get; private set; } = null!;

        /// <summary>
        /// The lookup OCID.
        /// </summary>
        [Output("lookupId")]
        public Output<string> LookupId { get; private set; } = null!;

        /// <summary>
        /// The name of the lookup to operate on.
        /// </summary>
        [Output("lookupName")]
        public Output<string> LookupName { get; private set; } = null!;

        /// <summary>
        /// The lookup reference as an integer.
        /// </summary>
        [Output("lookupReference")]
        public Output<string> LookupReference { get; private set; } = null!;

        /// <summary>
        /// The lookup reference as a string.
        /// </summary>
        [Output("lookupReferenceString")]
        public Output<string> LookupReferenceString { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of matches.
        /// </summary>
        [Output("maxMatches")]
        public Output<string?> MaxMatches { get; private set; } = null!;

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// AutoLookups
        /// </summary>
        [Output("referringSources")]
        public Output<ImmutableArray<Outputs.NamespaceLookupReferringSource>> ReferringSources { get; private set; } = null!;

        /// <summary>
        /// Path to the file containing data for lookup creation.
        /// </summary>
        [Output("registerLookupFile")]
        public Output<string> RegisterLookupFile { get; private set; } = null!;

        /// <summary>
        /// StatusSummary
        /// </summary>
        [Output("statusSummaries")]
        public Output<ImmutableArray<Outputs.NamespaceLookupStatusSummary>> StatusSummaries { get; private set; } = null!;

        /// <summary>
        /// The last updated date.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The lookup type. Valid values are Lookup, Dictionary or Module.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NamespaceLookup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamespaceLookup(string name, NamespaceLookupArgs args, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, args ?? new NamespaceLookupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamespaceLookup(string name, Input<string> id, NamespaceLookupState? state = null, CustomResourceOptions? options = null)
            : base("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamespaceLookup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamespaceLookup Get(string name, Input<string> id, NamespaceLookupState? state = null, CustomResourceOptions? options = null)
        {
            return new NamespaceLookup(name, id, state, options);
        }
    }

    public sealed class NamespaceLookupArgs : global::Pulumi.ResourceArgs
    {
        [Input("categories")]
        private InputList<Inputs.NamespaceLookupCategoryArgs>? _categories;

        /// <summary>
        /// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
        /// </summary>
        public InputList<Inputs.NamespaceLookupCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.NamespaceLookupCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// The character encoding of the uploaded file.
        /// </summary>
        [Input("charEncoding")]
        public Input<string>? CharEncoding { get; set; }

        /// <summary>
        /// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The default match value.
        /// </summary>
        [Input("defaultMatchValue")]
        public Input<string>? DefaultMatchValue { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The lookup description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputList<Inputs.NamespaceLookupFieldArgs>? _fields;

        /// <summary>
        /// (Updatable) The lookup fields.
        /// </summary>
        public InputList<Inputs.NamespaceLookupFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.NamespaceLookupFieldArgs>());
            set => _fields = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A flag indicating whether or not the new lookup should be hidden.
        /// </summary>
        [Input("isHidden")]
        public Input<bool>? IsHidden { get; set; }

        /// <summary>
        /// The name of the lookup to operate on.
        /// </summary>
        [Input("lookupName", required: true)]
        public Input<string> LookupName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The maximum number of matches.
        /// </summary>
        [Input("maxMatches")]
        public Input<string>? MaxMatches { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// Path to the file containing data for lookup creation.
        /// </summary>
        [Input("registerLookupFile", required: true)]
        public Input<string> RegisterLookupFile { get; set; } = null!;

        /// <summary>
        /// The lookup type. Valid values are Lookup, Dictionary or Module.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NamespaceLookupArgs()
        {
        }
        public static new NamespaceLookupArgs Empty => new NamespaceLookupArgs();
    }

    public sealed class NamespaceLookupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The active edit version.
        /// </summary>
        [Input("activeEditVersion")]
        public Input<string>? ActiveEditVersion { get; set; }

        /// <summary>
        /// The canonical link.
        /// </summary>
        [Input("canonicalLink")]
        public Input<string>? CanonicalLink { get; set; }

        [Input("categories")]
        private InputList<Inputs.NamespaceLookupCategoryGetArgs>? _categories;

        /// <summary>
        /// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
        /// </summary>
        public InputList<Inputs.NamespaceLookupCategoryGetArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.NamespaceLookupCategoryGetArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// The character encoding of the uploaded file.
        /// </summary>
        [Input("charEncoding")]
        public Input<string>? CharEncoding { get; set; }

        /// <summary>
        /// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The default match value.
        /// </summary>
        [Input("defaultMatchValue")]
        public Input<string>? DefaultMatchValue { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The lookup description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The edit version.
        /// </summary>
        [Input("editVersion")]
        public Input<string>? EditVersion { get; set; }

        [Input("fields")]
        private InputList<Inputs.NamespaceLookupFieldGetArgs>? _fields;

        /// <summary>
        /// (Updatable) The lookup fields.
        /// </summary>
        public InputList<Inputs.NamespaceLookupFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.NamespaceLookupFieldGetArgs>());
            set => _fields = value;
        }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// A flag indicating if the lookup is custom (user-defined) or built in.
        /// </summary>
        [Input("isBuiltIn")]
        public Input<string>? IsBuiltIn { get; set; }

        /// <summary>
        /// A flag indicating whether or not the new lookup should be hidden.
        /// </summary>
        [Input("isHidden")]
        public Input<bool>? IsHidden { get; set; }

        /// <summary>
        /// The lookup display name.
        /// </summary>
        [Input("lookupDisplayName")]
        public Input<string>? LookupDisplayName { get; set; }

        /// <summary>
        /// The lookup OCID.
        /// </summary>
        [Input("lookupId")]
        public Input<string>? LookupId { get; set; }

        /// <summary>
        /// The name of the lookup to operate on.
        /// </summary>
        [Input("lookupName")]
        public Input<string>? LookupName { get; set; }

        /// <summary>
        /// The lookup reference as an integer.
        /// </summary>
        [Input("lookupReference")]
        public Input<string>? LookupReference { get; set; }

        /// <summary>
        /// The lookup reference as a string.
        /// </summary>
        [Input("lookupReferenceString")]
        public Input<string>? LookupReferenceString { get; set; }

        /// <summary>
        /// (Updatable) The maximum number of matches.
        /// </summary>
        [Input("maxMatches")]
        public Input<string>? MaxMatches { get; set; }

        /// <summary>
        /// The Logging Analytics namespace used for the request.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("referringSources")]
        private InputList<Inputs.NamespaceLookupReferringSourceGetArgs>? _referringSources;

        /// <summary>
        /// AutoLookups
        /// </summary>
        public InputList<Inputs.NamespaceLookupReferringSourceGetArgs> ReferringSources
        {
            get => _referringSources ?? (_referringSources = new InputList<Inputs.NamespaceLookupReferringSourceGetArgs>());
            set => _referringSources = value;
        }

        /// <summary>
        /// Path to the file containing data for lookup creation.
        /// </summary>
        [Input("registerLookupFile")]
        public Input<string>? RegisterLookupFile { get; set; }

        [Input("statusSummaries")]
        private InputList<Inputs.NamespaceLookupStatusSummaryGetArgs>? _statusSummaries;

        /// <summary>
        /// StatusSummary
        /// </summary>
        public InputList<Inputs.NamespaceLookupStatusSummaryGetArgs> StatusSummaries
        {
            get => _statusSummaries ?? (_statusSummaries = new InputList<Inputs.NamespaceLookupStatusSummaryGetArgs>());
            set => _statusSummaries = value;
        }

        /// <summary>
        /// The last updated date.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The lookup type. Valid values are Lookup, Dictionary or Module.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NamespaceLookupState()
        {
        }
        public static new NamespaceLookupState Empty => new NamespaceLookupState();
    }
}
