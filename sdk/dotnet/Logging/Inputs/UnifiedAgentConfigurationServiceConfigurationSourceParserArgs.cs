// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Logging.Inputs
{

    public sealed class UnifiedAgentConfigurationServiceConfigurationSourceParserArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// (Updatable) Specify the time field for the event time. If the event doesn't have this field, the current time is used.
        /// </summary>
        [Input("fieldTimeKey")]
        public Input<string>? FieldTimeKey { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("formatFirstline")]
        public Input<string>? FormatFirstline { get; set; }

        [Input("formats")]
        private InputList<string>? _formats;

        /// <summary>
        /// (Updatable)
        /// </summary>
        public InputList<string> Formats
        {
            get => _formats ?? (_formats = new InputList<string>());
            set => _formats = value;
        }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("grokFailureKey")]
        public Input<string>? GrokFailureKey { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("grokNameKey")]
        public Input<string>? GrokNameKey { get; set; }

        /// <summary>
        /// (Updatable) If true, use Fluent::EventTime.now(current time) as a timestamp when time_key is specified.
        /// </summary>
        [Input("isEstimateCurrentEvent")]
        public Input<bool>? IsEstimateCurrentEvent { get; set; }

        /// <summary>
        /// (Updatable) If true, keep time field in the record.
        /// </summary>
        [Input("isKeepTimeKey")]
        public Input<bool>? IsKeepTimeKey { get; set; }

        /// <summary>
        /// (Updatable) If true, an empty string field is replaced with nil.
        /// </summary>
        [Input("isNullEmptyString")]
        public Input<bool>? IsNullEmptyString { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("isSupportColonlessIdent")]
        public Input<bool>? IsSupportColonlessIdent { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("isWithPriority")]
        public Input<bool>? IsWithPriority { get; set; }

        [Input("keys")]
        private InputList<string>? _keys;

        /// <summary>
        /// (Updatable)
        /// </summary>
        public InputList<string> Keys
        {
            get => _keys ?? (_keys = new InputList<string>());
            set => _keys = value;
        }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("messageFormat")]
        public Input<string>? MessageFormat { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("messageKey")]
        public Input<string>? MessageKey { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("multiLineStartRegexp")]
        public Input<string>? MultiLineStartRegexp { get; set; }

        /// <summary>
        /// (Updatable) Specify the null value pattern.
        /// </summary>
        [Input("nullValuePattern")]
        public Input<string>? NullValuePattern { get; set; }

        /// <summary>
        /// (Updatable) Type of fluent parser.
        /// </summary>
        [Input("parserType", required: true)]
        public Input<string> ParserType { get; set; } = null!;

        [Input("patterns")]
        private InputList<Inputs.UnifiedAgentConfigurationServiceConfigurationSourceParserPatternArgs>? _patterns;

        /// <summary>
        /// (Updatable)
        /// </summary>
        public InputList<Inputs.UnifiedAgentConfigurationServiceConfigurationSourceParserPatternArgs> Patterns
        {
            get => _patterns ?? (_patterns = new InputList<Inputs.UnifiedAgentConfigurationServiceConfigurationSourceParserPatternArgs>());
            set => _patterns = value;
        }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("rfc5424timeFormat")]
        public Input<string>? Rfc5424timeFormat { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("syslogParserType")]
        public Input<string>? SyslogParserType { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("timeFormat")]
        public Input<string>? TimeFormat { get; set; }

        /// <summary>
        /// (Updatable)
        /// </summary>
        [Input("timeType")]
        public Input<string>? TimeType { get; set; }

        /// <summary>
        /// (Updatable) Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern.
        /// </summary>
        [Input("timeoutInMilliseconds")]
        public Input<int>? TimeoutInMilliseconds { get; set; }

        [Input("types")]
        private InputMap<object>? _types;

        /// <summary>
        /// (Updatable) Specify types for converting a field into another type.
        /// </summary>
        public InputMap<object> Types
        {
            get => _types ?? (_types = new InputMap<object>());
            set => _types = value;
        }

        public UnifiedAgentConfigurationServiceConfigurationSourceParserArgs()
        {
        }
    }
}
