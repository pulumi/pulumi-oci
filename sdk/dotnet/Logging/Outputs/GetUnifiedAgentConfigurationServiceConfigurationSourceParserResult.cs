// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Logging.Outputs
{

    [OutputType]
    public sealed class GetUnifiedAgentConfigurationServiceConfigurationSourceParserResult
    {
        /// <summary>
        /// CSV delimiter.
        /// </summary>
        public readonly string Delimiter;
        /// <summary>
        /// Regex pattern.
        /// </summary>
        public readonly string Expression;
        /// <summary>
        /// Specify the time field for the event time. If the event doesn't have this field, the current time is used.
        /// </summary>
        public readonly string FieldTimeKey;
        /// <summary>
        /// First line pattern format.
        /// </summary>
        public readonly string FormatFirstline;
        /// <summary>
        /// Mutiline pattern format.
        /// </summary>
        public readonly ImmutableArray<string> Formats;
        /// <summary>
        /// Grok failure key.
        /// </summary>
        public readonly string GrokFailureKey;
        /// <summary>
        /// Grok name key.
        /// </summary>
        public readonly string GrokNameKey;
        /// <summary>
        /// If true, use Fluent::EventTime.now(current time) as a timestamp when the time_key is specified.
        /// </summary>
        public readonly bool IsEstimateCurrentEvent;
        /// <summary>
        /// If true, keep the time field in the record.
        /// </summary>
        public readonly bool IsKeepTimeKey;
        /// <summary>
        /// If you don't need stream or logtag fields, set this to false.
        /// </summary>
        public readonly bool IsMergeCriFields;
        /// <summary>
        /// If true, an empty string field is replaced with a null value.
        /// </summary>
        public readonly bool IsNullEmptyString;
        /// <summary>
        /// Specifies whether or not to support colonless ident. Corresponds to the Fluentd support_colonless_ident parameter.
        /// </summary>
        public readonly bool IsSupportColonlessIdent;
        /// <summary>
        /// Specifies with priority or not. Corresponds to the Fluentd with_priority parameter.
        /// </summary>
        public readonly bool IsWithPriority;
        /// <summary>
        /// CSV keys.
        /// </summary>
        public readonly ImmutableArray<string> Keys;
        /// <summary>
        /// Syslog message format.
        /// </summary>
        public readonly string MessageFormat;
        /// <summary>
        /// Specifies the field name to contain logs.
        /// </summary>
        public readonly string MessageKey;
        /// <summary>
        /// Multiline start regexp pattern.
        /// </summary>
        public readonly string MultiLineStartRegexp;
        /// <summary>
        /// Optional nested JSON Parser for CRI. Supported fields are fieldTimeKey, timeFormat, and isKeepTimeKey.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParserResult> NestedParsers;
        /// <summary>
        /// Specify the null value pattern.
        /// </summary>
        public readonly string NullValuePattern;
        /// <summary>
        /// Type of fluent parser.
        /// </summary>
        public readonly string ParserType;
        /// <summary>
        /// Grok pattern object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserPatternResult> Patterns;
        /// <summary>
        /// RFC 5424 time format.
        /// </summary>
        public readonly string Rfc5424timeFormat;
        /// <summary>
        /// Syslog parser type.
        /// </summary>
        public readonly string SyslogParserType;
        /// <summary>
        /// Process time value using the specified format.
        /// </summary>
        public readonly string TimeFormat;
        /// <summary>
        /// JSON parser time type.
        /// </summary>
        public readonly string TimeType;
        /// <summary>
        /// Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern.
        /// </summary>
        public readonly int TimeoutInMilliseconds;
        /// <summary>
        /// Specify types for converting a field into another type. For example, With this configuration: &lt;parse&gt; @type csv keys time,host,req_id,user time_key time &lt;/parse&gt;
        /// </summary>
        public readonly ImmutableDictionary<string, object> Types;

        [OutputConstructor]
        private GetUnifiedAgentConfigurationServiceConfigurationSourceParserResult(
            string delimiter,

            string expression,

            string fieldTimeKey,

            string formatFirstline,

            ImmutableArray<string> formats,

            string grokFailureKey,

            string grokNameKey,

            bool isEstimateCurrentEvent,

            bool isKeepTimeKey,

            bool isMergeCriFields,

            bool isNullEmptyString,

            bool isSupportColonlessIdent,

            bool isWithPriority,

            ImmutableArray<string> keys,

            string messageFormat,

            string messageKey,

            string multiLineStartRegexp,

            ImmutableArray<Outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserNestedParserResult> nestedParsers,

            string nullValuePattern,

            string parserType,

            ImmutableArray<Outputs.GetUnifiedAgentConfigurationServiceConfigurationSourceParserPatternResult> patterns,

            string rfc5424timeFormat,

            string syslogParserType,

            string timeFormat,

            string timeType,

            int timeoutInMilliseconds,

            ImmutableDictionary<string, object> types)
        {
            Delimiter = delimiter;
            Expression = expression;
            FieldTimeKey = fieldTimeKey;
            FormatFirstline = formatFirstline;
            Formats = formats;
            GrokFailureKey = grokFailureKey;
            GrokNameKey = grokNameKey;
            IsEstimateCurrentEvent = isEstimateCurrentEvent;
            IsKeepTimeKey = isKeepTimeKey;
            IsMergeCriFields = isMergeCriFields;
            IsNullEmptyString = isNullEmptyString;
            IsSupportColonlessIdent = isSupportColonlessIdent;
            IsWithPriority = isWithPriority;
            Keys = keys;
            MessageFormat = messageFormat;
            MessageKey = messageKey;
            MultiLineStartRegexp = multiLineStartRegexp;
            NestedParsers = nestedParsers;
            NullValuePattern = nullValuePattern;
            ParserType = parserType;
            Patterns = patterns;
            Rfc5424timeFormat = rfc5424timeFormat;
            SyslogParserType = syslogParserType;
            TimeFormat = timeFormat;
            TimeType = timeType;
            TimeoutInMilliseconds = timeoutInMilliseconds;
            Types = types;
        }
    }
}
