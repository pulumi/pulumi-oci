// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Logging.Outputs
{

    [OutputType]
    public sealed class UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter
    {
        /// <summary>
        /// (Updatable) A list of filtering rules to include logs
        /// </summary>
        public readonly ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> AllowLists;
        /// <summary>
        /// (Updatable) Type of the custom filter
        /// </summary>
        public readonly string? CustomFilterType;
        /// <summary>
        /// (Updatable) List of custom sections in custom filter
        /// </summary>
        public readonly ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> CustomSections;
        /// <summary>
        /// (Updatable) A list of filtering rules to reject logs
        /// </summary>
        public readonly ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> DenyLists;
        /// <summary>
        /// (Updatable) If true, emit invalid record to @ERROR label. Invalid cases are: 1) key does not exist; 2) the format does not match; or 3) an unexpected error. You can rescue unexpected format logs in the @ERROR lable. If you want to ignore these errors, set this to false.
        /// </summary>
        public readonly bool? EmitInvalidRecordToError;
        /// <summary>
        /// (Updatable) Unified schema logging filter type.
        /// </summary>
        public readonly string FilterType;
        /// <summary>
        /// (Updatable) Store the parsed values as a hash value in a field.
        /// </summary>
        public readonly string? HashValueField;
        /// <summary>
        /// (Updatable) Store the parsed values with the specified key name prefix.
        /// </summary>
        public readonly string? InjectKeyPrefix;
        /// <summary>
        /// (Updatable) If true, automatically casts the field types.
        /// </summary>
        public readonly bool? IsAutoTypecastEnabled;
        /// <summary>
        /// (Updatable) If true, it modifies a new empty hash
        /// </summary>
        public readonly bool? IsRenewRecordEnabled;
        /// <summary>
        /// (Updatable) When set to true, the full Ruby syntax is enabled in the ${} expression.
        /// </summary>
        public readonly bool? IsRubyEnabled;
        /// <summary>
        /// (Updatable) A list of keys to keep. Only relevant if isRenewRecordEnabled is set to true
        /// </summary>
        public readonly ImmutableArray<string> KeepKeys;
        /// <summary>
        /// (Updatable) The field name in the record to parse.
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// (Updatable) Unique name for the filter.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Updatable) Parameters of the custom filter
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Params;
        /// <summary>
        /// (Updatable) Source parser object.
        /// </summary>
        public readonly Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser? Parser;
        /// <summary>
        /// (Updatable) Add new key-value pairs in logs
        /// </summary>
        public readonly ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> RecordLists;
        /// <summary>
        /// (Updatable) If true, remove the keyName field when parsing is succeeded.
        /// </summary>
        public readonly bool? RemoveKeyNameField;
        /// <summary>
        /// (Updatable) A list of keys to delete
        /// </summary>
        public readonly ImmutableArray<string> RemoveKeys;
        /// <summary>
        /// (Updatable) Overwrites the time of logs with this value, this value must be a Unix timestamp.
        /// </summary>
        public readonly string? RenewTimeKey;
        /// <summary>
        /// (Updatable) If true, the invalid string is replaced with safe characters and is re-parsed.
        /// </summary>
        public readonly bool? ReplaceInvalidSequence;
        /// <summary>
        /// (Updatable) If true, keep the original key-value pair in the parsed result.
        /// </summary>
        public readonly bool? ReserveData;
        /// <summary>
        /// (Updatable) If true, keep the original event time in the parsed result.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        public readonly bool? ReserveTime;

        [OutputConstructor]
        private UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilter(
            ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterAllowList> allowLists,

            string? customFilterType,

            ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterCustomSection> customSections,

            ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterDenyList> denyLists,

            bool? emitInvalidRecordToError,

            string filterType,

            string? hashValueField,

            string? injectKeyPrefix,

            bool? isAutoTypecastEnabled,

            bool? isRenewRecordEnabled,

            bool? isRubyEnabled,

            ImmutableArray<string> keepKeys,

            string? keyName,

            string name,

            ImmutableDictionary<string, string>? @params,

            Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterParser? parser,

            ImmutableArray<Outputs.UnifiedAgentConfigurationServiceConfigurationUnifiedAgentConfigurationFilterRecordList> recordLists,

            bool? removeKeyNameField,

            ImmutableArray<string> removeKeys,

            string? renewTimeKey,

            bool? replaceInvalidSequence,

            bool? reserveData,

            bool? reserveTime)
        {
            AllowLists = allowLists;
            CustomFilterType = customFilterType;
            CustomSections = customSections;
            DenyLists = denyLists;
            EmitInvalidRecordToError = emitInvalidRecordToError;
            FilterType = filterType;
            HashValueField = hashValueField;
            InjectKeyPrefix = injectKeyPrefix;
            IsAutoTypecastEnabled = isAutoTypecastEnabled;
            IsRenewRecordEnabled = isRenewRecordEnabled;
            IsRubyEnabled = isRubyEnabled;
            KeepKeys = keepKeys;
            KeyName = keyName;
            Name = name;
            Params = @params;
            Parser = parser;
            RecordLists = recordLists;
            RemoveKeyNameField = removeKeyNameField;
            RemoveKeys = removeKeys;
            RenewTimeKey = renewTimeKey;
            ReplaceInvalidSequence = replaceInvalidSequence;
            ReserveData = reserveData;
            ReserveTime = reserveTime;
        }
    }
}
