// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ManagementAgent
{
    public static class GetManagementAgentCount
    {
        /// <summary>
        /// This data source provides details about a specific Management Agent Count resource in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Gets count of the inventory of agents for a given compartment id, group by, and isPluginDeployed parameters.
        /// Supported groupBy parameters: availabilityStatus, platformType, version
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementAgentCount = Oci.ManagementAgent.GetManagementAgentCount.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         GroupBies = managementAgentCountGroupBy,
        ///         HasPlugins = managementAgentCountHasPlugins,
        ///         InstallType = managementAgentCountInstallType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagementAgentCountResult> InvokeAsync(GetManagementAgentCountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementAgentCountResult>("oci:ManagementAgent/getManagementAgentCount:getManagementAgentCount", args ?? new GetManagementAgentCountArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Management Agent Count resource in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Gets count of the inventory of agents for a given compartment id, group by, and isPluginDeployed parameters.
        /// Supported groupBy parameters: availabilityStatus, platformType, version
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementAgentCount = Oci.ManagementAgent.GetManagementAgentCount.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         GroupBies = managementAgentCountGroupBy,
        ///         HasPlugins = managementAgentCountHasPlugins,
        ///         InstallType = managementAgentCountInstallType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagementAgentCountResult> Invoke(GetManagementAgentCountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementAgentCountResult>("oci:ManagementAgent/getManagementAgentCount:getManagementAgentCount", args ?? new GetManagementAgentCountInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Management Agent Count resource in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Gets count of the inventory of agents for a given compartment id, group by, and isPluginDeployed parameters.
        /// Supported groupBy parameters: availabilityStatus, platformType, version
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementAgentCount = Oci.ManagementAgent.GetManagementAgentCount.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         GroupBies = managementAgentCountGroupBy,
        ///         HasPlugins = managementAgentCountHasPlugins,
        ///         InstallType = managementAgentCountInstallType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagementAgentCountResult> Invoke(GetManagementAgentCountInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementAgentCountResult>("oci:ManagementAgent/getManagementAgentCount:getManagementAgentCount", args ?? new GetManagementAgentCountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementAgentCountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment to which a request will be scoped.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("groupBies", required: true)]
        private List<string>? _groupBies;

        /// <summary>
        /// The field by which to group Management Agents. Currently, only one groupBy dimension is supported at a time.
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// When set to true then agents that have at least one plugin deployed will be returned. When set to false only agents that have no plugins deployed will be returned.
        /// </summary>
        [Input("hasPlugins")]
        public bool? HasPlugins { get; set; }

        /// <summary>
        /// A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
        /// </summary>
        [Input("installType")]
        public string? InstallType { get; set; }

        public GetManagementAgentCountArgs()
        {
        }
        public static new GetManagementAgentCountArgs Empty => new GetManagementAgentCountArgs();
    }

    public sealed class GetManagementAgentCountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment to which a request will be scoped.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("groupBies", required: true)]
        private InputList<string>? _groupBies;

        /// <summary>
        /// The field by which to group Management Agents. Currently, only one groupBy dimension is supported at a time.
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// When set to true then agents that have at least one plugin deployed will be returned. When set to false only agents that have no plugins deployed will be returned.
        /// </summary>
        [Input("hasPlugins")]
        public Input<bool>? HasPlugins { get; set; }

        /// <summary>
        /// A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
        /// </summary>
        [Input("installType")]
        public Input<string>? InstallType { get; set; }

        public GetManagementAgentCountInvokeArgs()
        {
        }
        public static new GetManagementAgentCountInvokeArgs Empty => new GetManagementAgentCountInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementAgentCountResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// Whether or not a managementAgent has at least one plugin
        /// </summary>
        public readonly bool? HasPlugins;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The install type, either AGENT or GATEWAY
        /// </summary>
        public readonly string? InstallType;
        /// <summary>
        /// List in which each item describes an aggregation of Managment Agents
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagementAgentCountItemResult> Items;

        [OutputConstructor]
        private GetManagementAgentCountResult(
            string compartmentId,

            ImmutableArray<string> groupBies,

            bool? hasPlugins,

            string id,

            string? installType,

            ImmutableArray<Outputs.GetManagementAgentCountItemResult> items)
        {
            CompartmentId = compartmentId;
            GroupBies = groupBies;
            HasPlugins = hasPlugins;
            Id = id;
            InstallType = installType;
            Items = items;
        }
    }
}
