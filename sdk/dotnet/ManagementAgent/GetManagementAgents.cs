// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ManagementAgent
{
    public static class GetManagementAgents
    {
        /// <summary>
        /// This data source provides the list of Management Agents in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Returns a list of Management Agents.
        /// If no explicit page size limit is specified, it will default to 1000 when compartmentIdInSubtree is true and 5000 otherwise.
        /// The response is limited to maximum 1000 records when compartmentIdInSubtree is true.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementAgents = Oci.ManagementAgent.GetManagementAgents.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Management_agent_access_level,
        ///         AvailabilityStatus = @var.Management_agent_availability_status,
        ///         CompartmentIdInSubtree = @var.Management_agent_compartment_id_in_subtree,
        ///         DataSourceNames = oci_management_agent_management_agent_data_source.Test_management_agent_data_source.Name,
        ///         DataSourceType = @var.Management_agent_data_source_type,
        ///         DisplayName = @var.Management_agent_display_name,
        ///         GatewayIds = oci_apigateway_gateway.Test_gateway.Id,
        ///         HostId = oci_management_agent_host.Test_host.Id,
        ///         WaitForHostId = 10,
        ///         InstallType = @var.Management_agent_install_type,
        ///         IsCustomerDeployed = @var.Management_agent_is_customer_deployed,
        ///         PlatformTypes = @var.Management_agent_platform_type,
        ///         PluginNames = @var.Management_agent_plugin_name,
        ///         State = @var.Management_agent_state,
        ///         Versions = @var.Management_agent_version,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetManagementAgentsResult> InvokeAsync(GetManagementAgentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementAgentsResult>("oci:ManagementAgent/getManagementAgents:getManagementAgents", args ?? new GetManagementAgentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Management Agents in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// Returns a list of Management Agents.
        /// If no explicit page size limit is specified, it will default to 1000 when compartmentIdInSubtree is true and 5000 otherwise.
        /// The response is limited to maximum 1000 records when compartmentIdInSubtree is true.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementAgents = Oci.ManagementAgent.GetManagementAgents.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         AccessLevel = @var.Management_agent_access_level,
        ///         AvailabilityStatus = @var.Management_agent_availability_status,
        ///         CompartmentIdInSubtree = @var.Management_agent_compartment_id_in_subtree,
        ///         DataSourceNames = oci_management_agent_management_agent_data_source.Test_management_agent_data_source.Name,
        ///         DataSourceType = @var.Management_agent_data_source_type,
        ///         DisplayName = @var.Management_agent_display_name,
        ///         GatewayIds = oci_apigateway_gateway.Test_gateway.Id,
        ///         HostId = oci_management_agent_host.Test_host.Id,
        ///         WaitForHostId = 10,
        ///         InstallType = @var.Management_agent_install_type,
        ///         IsCustomerDeployed = @var.Management_agent_is_customer_deployed,
        ///         PlatformTypes = @var.Management_agent_platform_type,
        ///         PluginNames = @var.Management_agent_plugin_name,
        ///         State = @var.Management_agent_state,
        ///         Versions = @var.Management_agent_version,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetManagementAgentsResult> Invoke(GetManagementAgentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementAgentsResult>("oci:ManagementAgent/getManagementAgents:getManagementAgents", args ?? new GetManagementAgentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementAgentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// When the value is "ACCESSIBLE", insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
        /// </summary>
        [Input("accessLevel")]
        public string? AccessLevel { get; set; }

        /// <summary>
        /// Filter to return only Management Agents in the particular availability status.
        /// </summary>
        [Input("availabilityStatus")]
        public string? AvailabilityStatus { get; set; }

        /// <summary>
        /// The OCID of the compartment to which a request will be scoped.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("dataSourceNames")]
        private List<string>? _dataSourceNames;

        /// <summary>
        /// Unique name of the dataSource.
        /// </summary>
        public List<string> DataSourceNames
        {
            get => _dataSourceNames ?? (_dataSourceNames = new List<string>());
            set => _dataSourceNames = value;
        }

        /// <summary>
        /// The type of the dataSource.
        /// </summary>
        [Input("dataSourceType")]
        public string? DataSourceType { get; set; }

        /// <summary>
        /// Filter to return only Management Agents having the particular display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetManagementAgentsFilterArgs>? _filters;
        public List<Inputs.GetManagementAgentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagementAgentsFilterArgs>());
            set => _filters = value;
        }

        [Input("gatewayIds")]
        private List<string>? _gatewayIds;

        /// <summary>
        /// Filter to return only results having the particular gatewayId.
        /// </summary>
        public List<string> GatewayIds
        {
            get => _gatewayIds ?? (_gatewayIds = new List<string>());
            set => _gatewayIds = value;
        }

        /// <summary>
        /// Filter to return only Management Agents having the particular agent host id.
        /// </summary>
        [Input("hostId")]
        public string? HostId { get; set; }

        /// <summary>
        /// A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
        /// </summary>
        [Input("installType")]
        public string? InstallType { get; set; }

        /// <summary>
        /// true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
        /// </summary>
        [Input("isCustomerDeployed")]
        public bool? IsCustomerDeployed { get; set; }

        [Input("platformTypes")]
        private List<string>? _platformTypes;

        /// <summary>
        /// Array of PlatformTypes to return only results having the particular platform types. Example: ["LINUX"]
        /// </summary>
        public List<string> PlatformTypes
        {
            get => _platformTypes ?? (_platformTypes = new List<string>());
            set => _platformTypes = value;
        }

        [Input("pluginNames")]
        private List<string>? _pluginNames;

        /// <summary>
        /// Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of 'None' can be provided and this will return only Management Agents having no plugin installed. Example: ["PluginA"]
        /// </summary>
        public List<string> PluginNames
        {
            get => _pluginNames ?? (_pluginNames = new List<string>());
            set => _pluginNames = value;
        }

        /// <summary>
        /// Filter to return only Management Agents in the particular lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("versions")]
        private List<string>? _versions;

        /// <summary>
        /// Array of versions to return only Management Agents having the particular agent versions. Example: ["202020.0101","210201.0513"]
        /// </summary>
        public List<string> Versions
        {
            get => _versions ?? (_versions = new List<string>());
            set => _versions = value;
        }

        /// <summary>
        /// When host_id argument is set, the data source will wait for the given period of time (in minutes) for this host_id to become available. This can be used when compute instance with Management Agent has been recently created.
        /// </summary>
        [Input("waitForHostId")]
        public int? WaitForHostId { get; set; }

        public GetManagementAgentsArgs()
        {
        }
        public static new GetManagementAgentsArgs Empty => new GetManagementAgentsArgs();
    }

    public sealed class GetManagementAgentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// When the value is "ACCESSIBLE", insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// Filter to return only Management Agents in the particular availability status.
        /// </summary>
        [Input("availabilityStatus")]
        public Input<string>? AvailabilityStatus { get; set; }

        /// <summary>
        /// The OCID of the compartment to which a request will be scoped.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("dataSourceNames")]
        private InputList<string>? _dataSourceNames;

        /// <summary>
        /// Unique name of the dataSource.
        /// </summary>
        public InputList<string> DataSourceNames
        {
            get => _dataSourceNames ?? (_dataSourceNames = new InputList<string>());
            set => _dataSourceNames = value;
        }

        /// <summary>
        /// The type of the dataSource.
        /// </summary>
        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        /// <summary>
        /// Filter to return only Management Agents having the particular display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetManagementAgentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagementAgentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagementAgentsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("gatewayIds")]
        private InputList<string>? _gatewayIds;

        /// <summary>
        /// Filter to return only results having the particular gatewayId.
        /// </summary>
        public InputList<string> GatewayIds
        {
            get => _gatewayIds ?? (_gatewayIds = new InputList<string>());
            set => _gatewayIds = value;
        }

        /// <summary>
        /// Filter to return only Management Agents having the particular agent host id.
        /// </summary>
        [Input("hostId")]
        public Input<string>? HostId { get; set; }

        /// <summary>
        /// A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
        /// </summary>
        [Input("installType")]
        public Input<string>? InstallType { get; set; }

        /// <summary>
        /// true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
        /// </summary>
        [Input("isCustomerDeployed")]
        public Input<bool>? IsCustomerDeployed { get; set; }

        [Input("platformTypes")]
        private InputList<string>? _platformTypes;

        /// <summary>
        /// Array of PlatformTypes to return only results having the particular platform types. Example: ["LINUX"]
        /// </summary>
        public InputList<string> PlatformTypes
        {
            get => _platformTypes ?? (_platformTypes = new InputList<string>());
            set => _platformTypes = value;
        }

        [Input("pluginNames")]
        private InputList<string>? _pluginNames;

        /// <summary>
        /// Array of pluginName to return only Management Agents having the particular Plugins installed. A special pluginName of 'None' can be provided and this will return only Management Agents having no plugin installed. Example: ["PluginA"]
        /// </summary>
        public InputList<string> PluginNames
        {
            get => _pluginNames ?? (_pluginNames = new InputList<string>());
            set => _pluginNames = value;
        }

        /// <summary>
        /// Filter to return only Management Agents in the particular lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// Array of versions to return only Management Agents having the particular agent versions. Example: ["202020.0101","210201.0513"]
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        /// <summary>
        /// When host_id argument is set, the data source will wait for the given period of time (in minutes) for this host_id to become available. This can be used when compute instance with Management Agent has been recently created.
        /// </summary>
        [Input("waitForHostId")]
        public Input<int>? WaitForHostId { get; set; }

        public GetManagementAgentsInvokeArgs()
        {
        }
        public static new GetManagementAgentsInvokeArgs Empty => new GetManagementAgentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementAgentsResult
    {
        public readonly string? AccessLevel;
        /// <summary>
        /// The current availability status of managementAgent
        /// </summary>
        public readonly string? AvailabilityStatus;
        /// <summary>
        /// Compartment Identifier
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<string> DataSourceNames;
        public readonly string? DataSourceType;
        /// <summary>
        /// Management Agent Name
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetManagementAgentsFilterResult> Filters;
        public readonly ImmutableArray<string> GatewayIds;
        /// <summary>
        /// Host resource ocid
        /// </summary>
        public readonly string? HostId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The install type, either AGENT or GATEWAY
        /// </summary>
        public readonly string? InstallType;
        /// <summary>
        /// true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
        /// </summary>
        public readonly bool? IsCustomerDeployed;
        /// <summary>
        /// The list of management_agents.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagementAgentsManagementAgentResult> ManagementAgents;
        /// <summary>
        /// Platform Type
        /// </summary>
        public readonly ImmutableArray<string> PlatformTypes;
        /// <summary>
        /// Management Agent Plugin Name
        /// </summary>
        public readonly ImmutableArray<string> PluginNames;
        /// <summary>
        /// The current state of managementAgent
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Management Agent Version
        /// </summary>
        public readonly ImmutableArray<string> Versions;
        public readonly int? WaitForHostId;

        [OutputConstructor]
        private GetManagementAgentsResult(
            string? accessLevel,

            string? availabilityStatus,

            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<string> dataSourceNames,

            string? dataSourceType,

            string? displayName,

            ImmutableArray<Outputs.GetManagementAgentsFilterResult> filters,

            ImmutableArray<string> gatewayIds,

            string? hostId,

            string id,

            string? installType,

            bool? isCustomerDeployed,

            ImmutableArray<Outputs.GetManagementAgentsManagementAgentResult> managementAgents,

            ImmutableArray<string> platformTypes,

            ImmutableArray<string> pluginNames,

            string? state,

            ImmutableArray<string> versions,

            int? waitForHostId)
        {
            AccessLevel = accessLevel;
            AvailabilityStatus = availabilityStatus;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DataSourceNames = dataSourceNames;
            DataSourceType = dataSourceType;
            DisplayName = displayName;
            Filters = filters;
            GatewayIds = gatewayIds;
            HostId = hostId;
            Id = id;
            InstallType = installType;
            IsCustomerDeployed = isCustomerDeployed;
            ManagementAgents = managementAgents;
            PlatformTypes = platformTypes;
            PluginNames = pluginNames;
            State = state;
            Versions = versions;
            WaitForHostId = waitForHostId;
        }
    }
}
