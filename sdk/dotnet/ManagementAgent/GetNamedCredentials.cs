// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ManagementAgent
{
    public static class GetNamedCredentials
    {
        /// <summary>
        /// This data source provides the list of Named Credentials in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// A list of Management Agent Data Sources for the given Management Agent Id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamedCredentials = Oci.ManagementAgent.GetNamedCredentials.Invoke(new()
        ///     {
        ///         ManagementAgentId = testManagementAgent.Id,
        ///         Ids = new[]
        ///         {
        ///             namedCredentialId,
        ///         },
        ///         Names = new[]
        ///         {
        ///             namedCredentialName,
        ///         },
        ///         States = new[]
        ///         {
        ///             namedCredentialState,
        ///         },
        ///         Types = new[]
        ///         {
        ///             namedCredentialType,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNamedCredentialsResult> InvokeAsync(GetNamedCredentialsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamedCredentialsResult>("oci:ManagementAgent/getNamedCredentials:getNamedCredentials", args ?? new GetNamedCredentialsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Named Credentials in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// A list of Management Agent Data Sources for the given Management Agent Id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamedCredentials = Oci.ManagementAgent.GetNamedCredentials.Invoke(new()
        ///     {
        ///         ManagementAgentId = testManagementAgent.Id,
        ///         Ids = new[]
        ///         {
        ///             namedCredentialId,
        ///         },
        ///         Names = new[]
        ///         {
        ///             namedCredentialName,
        ///         },
        ///         States = new[]
        ///         {
        ///             namedCredentialState,
        ///         },
        ///         Types = new[]
        ///         {
        ///             namedCredentialType,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNamedCredentialsResult> Invoke(GetNamedCredentialsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamedCredentialsResult>("oci:ManagementAgent/getNamedCredentials:getNamedCredentials", args ?? new GetNamedCredentialsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Named Credentials in Oracle Cloud Infrastructure Management Agent service.
        /// 
        /// A list of Management Agent Data Sources for the given Management Agent Id.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testNamedCredentials = Oci.ManagementAgent.GetNamedCredentials.Invoke(new()
        ///     {
        ///         ManagementAgentId = testManagementAgent.Id,
        ///         Ids = new[]
        ///         {
        ///             namedCredentialId,
        ///         },
        ///         Names = new[]
        ///         {
        ///             namedCredentialName,
        ///         },
        ///         States = new[]
        ///         {
        ///             namedCredentialState,
        ///         },
        ///         Types = new[]
        ///         {
        ///             namedCredentialType,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNamedCredentialsResult> Invoke(GetNamedCredentialsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamedCredentialsResult>("oci:ManagementAgent/getNamedCredentials:getNamedCredentials", args ?? new GetNamedCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamedCredentialsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNamedCredentialsFilterArgs>? _filters;
        public List<Inputs.GetNamedCredentialsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNamedCredentialsFilterArgs>());
            set => _filters = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// Filter list for these Named credentials identifiers (ocid) values.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ManagementAgentID of the agent from which the named credentials are associated.
        /// </summary>
        [Input("managementAgentId", required: true)]
        public string ManagementAgentId { get; set; } = null!;

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// Filter list for these name items.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("states")]
        private List<string>? _states;

        /// <summary>
        /// Filter list to return only Management Agents in the particular lifecycle state.
        /// </summary>
        public List<string> States
        {
            get => _states ?? (_states = new List<string>());
            set => _states = value;
        }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// Filter list for these type values.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public GetNamedCredentialsArgs()
        {
        }
        public static new GetNamedCredentialsArgs Empty => new GetNamedCredentialsArgs();
    }

    public sealed class GetNamedCredentialsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNamedCredentialsFilterInputArgs>? _filters;
        public InputList<Inputs.GetNamedCredentialsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNamedCredentialsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// Filter list for these Named credentials identifiers (ocid) values.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ManagementAgentID of the agent from which the named credentials are associated.
        /// </summary>
        [Input("managementAgentId", required: true)]
        public Input<string> ManagementAgentId { get; set; } = null!;

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// Filter list for these name items.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        [Input("states")]
        private InputList<string>? _states;

        /// <summary>
        /// Filter list to return only Management Agents in the particular lifecycle state.
        /// </summary>
        public InputList<string> States
        {
            get => _states ?? (_states = new InputList<string>());
            set => _states = value;
        }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// Filter list for these type values.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public GetNamedCredentialsInvokeArgs()
        {
        }
        public static new GetNamedCredentialsInvokeArgs Empty => new GetNamedCredentialsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamedCredentialsResult
    {
        public readonly ImmutableArray<Outputs.GetNamedCredentialsFilterResult> Filters;
        /// <summary>
        /// Identifier for Named Credential.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The Management Agent parent resource to associated with this named credential. This is the ManagementAgent resource OCID.
        /// </summary>
        public readonly string ManagementAgentId;
        /// <summary>
        /// The list of named_credential_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNamedCredentialsNamedCredentialCollectionResult> NamedCredentialCollections;
        /// <summary>
        /// Name of the property
        /// </summary>
        public readonly ImmutableArray<string> Names;
        /// <summary>
        /// The current state of the named credential
        /// </summary>
        public readonly ImmutableArray<string> States;
        /// <summary>
        /// The type of the Named Credential.
        /// </summary>
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private GetNamedCredentialsResult(
            ImmutableArray<Outputs.GetNamedCredentialsFilterResult> filters,

            ImmutableArray<string> ids,

            string managementAgentId,

            ImmutableArray<Outputs.GetNamedCredentialsNamedCredentialCollectionResult> namedCredentialCollections,

            ImmutableArray<string> names,

            ImmutableArray<string> states,

            ImmutableArray<string> types)
        {
            Filters = filters;
            Ids = ids;
            ManagementAgentId = managementAgentId;
            NamedCredentialCollections = namedCredentialCollections;
            Names = names;
            States = states;
            Types = types;
        }
    }
}
