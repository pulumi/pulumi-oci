// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace
{
    public static class GetAcceptedAgreements
    {
        /// <summary>
        /// This data source provides the list of Accepted Agreements in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Lists the terms of use agreements that have been accepted in the specified compartment.
        /// You can filter results by specifying query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAcceptedAgreements = Oci.Marketplace.GetAcceptedAgreements.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AcceptedAgreementId = testAcceptedAgreement.Id,
        ///         DisplayName = acceptedAgreementDisplayName,
        ///         ListingId = testListing.Id,
        ///         PackageVersion = acceptedAgreementPackageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAcceptedAgreementsResult> InvokeAsync(GetAcceptedAgreementsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAcceptedAgreementsResult>("oci:Marketplace/getAcceptedAgreements:getAcceptedAgreements", args ?? new GetAcceptedAgreementsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Accepted Agreements in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Lists the terms of use agreements that have been accepted in the specified compartment.
        /// You can filter results by specifying query parameters.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAcceptedAgreements = Oci.Marketplace.GetAcceptedAgreements.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AcceptedAgreementId = testAcceptedAgreement.Id,
        ///         DisplayName = acceptedAgreementDisplayName,
        ///         ListingId = testListing.Id,
        ///         PackageVersion = acceptedAgreementPackageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAcceptedAgreementsResult> Invoke(GetAcceptedAgreementsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAcceptedAgreementsResult>("oci:Marketplace/getAcceptedAgreements:getAcceptedAgreements", args ?? new GetAcceptedAgreementsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAcceptedAgreementsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the accepted terms of use agreement.
        /// </summary>
        [Input("acceptedAgreementId")]
        public string? AcceptedAgreementId { get; set; }

        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The display name of the resource.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAcceptedAgreementsFilterArgs>? _filters;
        public List<Inputs.GetAcceptedAgreementsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAcceptedAgreementsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId")]
        public string? ListingId { get; set; }

        /// <summary>
        /// The version of the package. Package versions are unique within a listing.
        /// </summary>
        [Input("packageVersion")]
        public string? PackageVersion { get; set; }

        public GetAcceptedAgreementsArgs()
        {
        }
        public static new GetAcceptedAgreementsArgs Empty => new GetAcceptedAgreementsArgs();
    }

    public sealed class GetAcceptedAgreementsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the accepted terms of use agreement.
        /// </summary>
        [Input("acceptedAgreementId")]
        public Input<string>? AcceptedAgreementId { get; set; }

        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The display name of the resource.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAcceptedAgreementsFilterInputArgs>? _filters;
        public InputList<Inputs.GetAcceptedAgreementsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAcceptedAgreementsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId")]
        public Input<string>? ListingId { get; set; }

        /// <summary>
        /// The version of the package. Package versions are unique within a listing.
        /// </summary>
        [Input("packageVersion")]
        public Input<string>? PackageVersion { get; set; }

        public GetAcceptedAgreementsInvokeArgs()
        {
        }
        public static new GetAcceptedAgreementsInvokeArgs Empty => new GetAcceptedAgreementsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAcceptedAgreementsResult
    {
        public readonly string? AcceptedAgreementId;
        /// <summary>
        /// The list of accepted_agreements.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAcceptedAgreementsAcceptedAgreementResult> AcceptedAgreements;
        /// <summary>
        /// The unique identifier for the compartment where the agreement was accepted.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A display name for the accepted agreement.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAcceptedAgreementsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique identifier for the listing associated with the agreement.
        /// </summary>
        public readonly string? ListingId;
        /// <summary>
        /// The package version associated with the agreement.
        /// </summary>
        public readonly string? PackageVersion;

        [OutputConstructor]
        private GetAcceptedAgreementsResult(
            string? acceptedAgreementId,

            ImmutableArray<Outputs.GetAcceptedAgreementsAcceptedAgreementResult> acceptedAgreements,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetAcceptedAgreementsFilterResult> filters,

            string id,

            string? listingId,

            string? packageVersion)
        {
            AcceptedAgreementId = acceptedAgreementId;
            AcceptedAgreements = acceptedAgreements;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ListingId = listingId;
            PackageVersion = packageVersion;
        }
    }
}
