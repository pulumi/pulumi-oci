// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace
{
    public static class GetListing
    {
        /// <summary>
        /// This data source provides details about a specific Listing resource in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Gets detailed information about a listing, including the listing's name, version, description, and
        /// resources.
        /// 
        /// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
        /// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
        /// 
        /// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
        /// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
        /// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
        /// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
        /// listing resource version, create a subscription by issuing a
        /// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
        /// 
        /// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
        /// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testListing = Oci.Marketplace.GetListing.Invoke(new()
        ///     {
        ///         ListingId = oci_marketplace_listing.Test_listing.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetListingResult> InvokeAsync(GetListingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetListingResult>("oci:Marketplace/getListing:getListing", args ?? new GetListingArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Listing resource in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Gets detailed information about a listing, including the listing's name, version, description, and
        /// resources.
        /// 
        /// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
        /// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
        /// 
        /// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
        /// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
        /// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
        /// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
        /// listing resource version, create a subscription by issuing a
        /// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
        /// 
        /// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
        /// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testListing = Oci.Marketplace.GetListing.Invoke(new()
        ///     {
        ///         ListingId = oci_marketplace_listing.Test_listing.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetListingResult> Invoke(GetListingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetListingResult>("oci:Marketplace/getListing:getListing", args ?? new GetListingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetListingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment. It is mandatory when used in non-commercial realms.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId", required: true)]
        public string ListingId { get; set; } = null!;

        public GetListingArgs()
        {
        }
        public static new GetListingArgs Empty => new GetListingArgs();
    }

    public sealed class GetListingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment. It is mandatory when used in non-commercial realms.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId", required: true)]
        public Input<string> ListingId { get; set; } = null!;

        public GetListingInvokeArgs()
        {
        }
        public static new GetListingInvokeArgs Empty => new GetListingInvokeArgs();
    }


    [OutputType]
    public sealed class GetListingResult
    {
        /// <summary>
        /// The model for upload data for images and icons.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingBannerResult> Banners;
        /// <summary>
        /// Product categories that the listing belongs to.
        /// </summary>
        public readonly ImmutableArray<string> Categories;
        public readonly string? CompartmentId;
        /// <summary>
        /// The list of compatible architectures supported by the listing
        /// </summary>
        public readonly ImmutableArray<string> CompatibleArchitectures;
        /// <summary>
        /// The default package version.
        /// </summary>
        public readonly string? DefaultPackageVersion;
        /// <summary>
        /// Links to additional documentation provided by the publisher specifically for the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingDocumentationLinkResult> DocumentationLinks;
        /// <summary>
        /// The model for upload data for images and icons.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingIconResult> Icons;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Indicates whether the listing is included in Featured Listings.
        /// </summary>
        public readonly bool? IsFeatured;
        /// <summary>
        /// Keywords associated with the listing.
        /// </summary>
        public readonly string? Keywords;
        /// <summary>
        /// Languages supported by the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingLanguageResult> Languages;
        /// <summary>
        /// A description of the publisher's licensing model for the listing.
        /// </summary>
        public readonly string? LicenseModelDescription;
        /// <summary>
        /// Reference links.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingLinkResult> Links;
        public readonly string ListingId;
        /// <summary>
        /// The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
        /// </summary>
        public readonly string? ListingType;
        /// <summary>
        /// A long description of the listing.
        /// </summary>
        public readonly string? LongDescription;
        /// <summary>
        /// Text that describes the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The listing's package type.
        /// </summary>
        public readonly string? PackageType;
        /// <summary>
        /// Summary details about the publisher of the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingPublisherResult> Publishers;
        /// <summary>
        /// The regions where the listing is eligible to be deployed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingRegionResult> Regions;
        /// <summary>
        /// Release notes for the listing.
        /// </summary>
        public readonly string? ReleaseNotes;
        /// <summary>
        /// Screenshots of the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingScreenshotResult> Screenshots;
        /// <summary>
        /// A short description of the listing.
        /// </summary>
        public readonly string? ShortDescription;
        /// <summary>
        /// Contact information to use to get support from the publisher for the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingSupportContactResult> SupportContacts;
        /// <summary>
        /// Links to support resources for the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingSupportLinkResult> SupportLinks;
        /// <summary>
        /// The list of operating systems supported by the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingSupportedOperatingSystemResult> SupportedOperatingSystems;
        /// <summary>
        /// System requirements for the listing.
        /// </summary>
        public readonly string? SystemRequirements;
        /// <summary>
        /// The tagline of the listing.
        /// </summary>
        public readonly string? Tagline;
        /// <summary>
        /// The release date of the listing.
        /// </summary>
        public readonly string? TimeReleased;
        /// <summary>
        /// Usage information for the listing.
        /// </summary>
        public readonly string? UsageInformation;
        /// <summary>
        /// The version of the listing.
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// Videos of the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListingVideoResult> Videos;

        [OutputConstructor]
        private GetListingResult(
            ImmutableArray<Outputs.GetListingBannerResult> banners,

            ImmutableArray<string> categories,

            string? compartmentId,

            ImmutableArray<string> compatibleArchitectures,

            string? defaultPackageVersion,

            ImmutableArray<Outputs.GetListingDocumentationLinkResult> documentationLinks,

            ImmutableArray<Outputs.GetListingIconResult> icons,

            string? id,

            bool? isFeatured,

            string? keywords,

            ImmutableArray<Outputs.GetListingLanguageResult> languages,

            string? licenseModelDescription,

            ImmutableArray<Outputs.GetListingLinkResult> links,

            string listingId,

            string? listingType,

            string? longDescription,

            string? name,

            string? packageType,

            ImmutableArray<Outputs.GetListingPublisherResult> publishers,

            ImmutableArray<Outputs.GetListingRegionResult> regions,

            string? releaseNotes,

            ImmutableArray<Outputs.GetListingScreenshotResult> screenshots,

            string? shortDescription,

            ImmutableArray<Outputs.GetListingSupportContactResult> supportContacts,

            ImmutableArray<Outputs.GetListingSupportLinkResult> supportLinks,

            ImmutableArray<Outputs.GetListingSupportedOperatingSystemResult> supportedOperatingSystems,

            string? systemRequirements,

            string? tagline,

            string? timeReleased,

            string? usageInformation,

            string? version,

            ImmutableArray<Outputs.GetListingVideoResult> videos)
        {
            Banners = banners;
            Categories = categories;
            CompartmentId = compartmentId;
            CompatibleArchitectures = compatibleArchitectures;
            DefaultPackageVersion = defaultPackageVersion;
            DocumentationLinks = documentationLinks;
            Icons = icons;
            Id = id;
            IsFeatured = isFeatured;
            Keywords = keywords;
            Languages = languages;
            LicenseModelDescription = licenseModelDescription;
            Links = links;
            ListingId = listingId;
            ListingType = listingType;
            LongDescription = longDescription;
            Name = name;
            PackageType = packageType;
            Publishers = publishers;
            Regions = regions;
            ReleaseNotes = releaseNotes;
            Screenshots = screenshots;
            ShortDescription = shortDescription;
            SupportContacts = supportContacts;
            SupportLinks = supportLinks;
            SupportedOperatingSystems = supportedOperatingSystems;
            SystemRequirements = systemRequirements;
            Tagline = tagline;
            TimeReleased = timeReleased;
            UsageInformation = usageInformation;
            Version = version;
            Videos = videos;
        }
    }
}
