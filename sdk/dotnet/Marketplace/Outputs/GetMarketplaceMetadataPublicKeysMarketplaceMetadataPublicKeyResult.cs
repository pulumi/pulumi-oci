// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace.Outputs
{

    [OutputType]
    public sealed class GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKeyResult
    {
        /// <summary>
        /// chain of certificates used to sign JWT
        /// </summary>
        public readonly ImmutableArray<string> CertificateChains;
        /// <summary>
        /// unique identifier of associated X509 certificate
        /// </summary>
        public readonly string CertificateThumbprint;
        /// <summary>
        /// base64 encoded exponent for public key
        /// </summary>
        public readonly string Exponent;
        /// <summary>
        /// algorithm for public key (i.e. RS256)
        /// </summary>
        public readonly string KeyAlgorithm;
        /// <summary>
        /// unique id that maps to public certificate, directs user which certificate to use to verfiy
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// key type (i.e. RSA)
        /// </summary>
        public readonly string KeyType;
        /// <summary>
        /// how key is to be used
        /// </summary>
        public readonly string KeyUse;
        /// <summary>
        /// RSA public modulus
        /// </summary>
        public readonly string Modulus;

        [OutputConstructor]
        private GetMarketplaceMetadataPublicKeysMarketplaceMetadataPublicKeyResult(
            ImmutableArray<string> certificateChains,

            string certificateThumbprint,

            string exponent,

            string keyAlgorithm,

            string keyId,

            string keyType,

            string keyUse,

            string modulus)
        {
            CertificateChains = certificateChains;
            CertificateThumbprint = certificateThumbprint;
            Exponent = exponent;
            KeyAlgorithm = keyAlgorithm;
            KeyId = keyId;
            KeyType = keyType;
            KeyUse = keyUse;
            Modulus = modulus;
        }
    }
}
