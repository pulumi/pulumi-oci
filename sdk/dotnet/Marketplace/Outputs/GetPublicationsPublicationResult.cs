// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Marketplace.Outputs
{

    [OutputType]
    public sealed class GetPublicationsPublicationResult
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// The model for upload data for images and icons.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicationsPublicationIconResult> Icons;
        /// <summary>
        /// The unique identifier for the publication in Marketplace.
        /// </summary>
        public readonly string? Id;
        public readonly bool? IsAgreementAcknowledged;
        /// <summary>
        /// The type of the listing.
        /// </summary>
        public readonly string? ListingType;
        /// <summary>
        /// A long description of the publication to use in the listing.
        /// </summary>
        public readonly string? LongDescription;
        /// <summary>
        /// The name of the publication.
        /// </summary>
        public readonly string? Name;
        public readonly ImmutableArray<Outputs.GetPublicationsPublicationPackageDetailResult> PackageDetails;
        /// <summary>
        /// The listing's package type.
        /// </summary>
        public readonly string? PackageType;
        /// <summary>
        /// A short description of the publication to use in the listing.
        /// </summary>
        public readonly string? ShortDescription;
        /// <summary>
        /// The lifecycle state of the publication.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Contact information for getting support from the publisher for the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicationsPublicationSupportContactResult> SupportContacts;
        /// <summary>
        /// The list of operating systems supported by the listing.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicationsPublicationSupportedOperatingSystemResult> SupportedOperatingSystems;
        /// <summary>
        /// The date and time the publication was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        public readonly string? TimeCreated;

        [OutputConstructor]
        private GetPublicationsPublicationResult(
            string? compartmentId,

            ImmutableDictionary<string, object>? definedTags,

            ImmutableDictionary<string, object>? freeformTags,

            ImmutableArray<Outputs.GetPublicationsPublicationIconResult> icons,

            string? id,

            bool? isAgreementAcknowledged,

            string? listingType,

            string? longDescription,

            string? name,

            ImmutableArray<Outputs.GetPublicationsPublicationPackageDetailResult> packageDetails,

            string? packageType,

            string? shortDescription,

            string? state,

            ImmutableArray<Outputs.GetPublicationsPublicationSupportContactResult> supportContacts,

            ImmutableArray<Outputs.GetPublicationsPublicationSupportedOperatingSystemResult> supportedOperatingSystems,

            string? timeCreated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            FreeformTags = freeformTags;
            Icons = icons;
            Id = id;
            IsAgreementAcknowledged = isAgreementAcknowledged;
            ListingType = listingType;
            LongDescription = longDescription;
            Name = name;
            PackageDetails = packageDetails;
            PackageType = packageType;
            ShortDescription = shortDescription;
            State = state;
            SupportContacts = supportContacts;
            SupportedOperatingSystems = supportedOperatingSystems;
            TimeCreated = timeCreated;
        }
    }
}
