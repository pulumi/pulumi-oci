// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetMediaAssets
    {
        /// <summary>
        /// This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Returns a list of MediaAssetSummary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaAssets = Oci.MediaServices.GetMediaAssets.Invoke(new()
        ///     {
        ///         Bucket = mediaAssetBucket,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = mediaAssetDisplayName,
        ///         DistributionChannelId = testChannel.Id,
        ///         MasterMediaAssetId = testMediaAsset.Id,
        ///         MediaWorkflowJobId = testMediaWorkflowJob.Id,
        ///         Object = mediaAssetObject,
        ///         ParentMediaAssetId = testMediaAsset.Id,
        ///         SourceMediaWorkflowId = testMediaWorkflow.Id,
        ///         SourceMediaWorkflowVersion = mediaAssetSourceMediaWorkflowVersion,
        ///         State = mediaAssetState,
        ///         Type = mediaAssetType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMediaAssetsResult> InvokeAsync(GetMediaAssetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMediaAssetsResult>("oci:MediaServices/getMediaAssets:getMediaAssets", args ?? new GetMediaAssetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Returns a list of MediaAssetSummary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaAssets = Oci.MediaServices.GetMediaAssets.Invoke(new()
        ///     {
        ///         Bucket = mediaAssetBucket,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = mediaAssetDisplayName,
        ///         DistributionChannelId = testChannel.Id,
        ///         MasterMediaAssetId = testMediaAsset.Id,
        ///         MediaWorkflowJobId = testMediaWorkflowJob.Id,
        ///         Object = mediaAssetObject,
        ///         ParentMediaAssetId = testMediaAsset.Id,
        ///         SourceMediaWorkflowId = testMediaWorkflow.Id,
        ///         SourceMediaWorkflowVersion = mediaAssetSourceMediaWorkflowVersion,
        ///         State = mediaAssetState,
        ///         Type = mediaAssetType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMediaAssetsResult> Invoke(GetMediaAssetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaAssetsResult>("oci:MediaServices/getMediaAssets:getMediaAssets", args ?? new GetMediaAssetsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Returns a list of MediaAssetSummary.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaAssets = Oci.MediaServices.GetMediaAssets.Invoke(new()
        ///     {
        ///         Bucket = mediaAssetBucket,
        ///         CompartmentId = compartmentId,
        ///         DisplayName = mediaAssetDisplayName,
        ///         DistributionChannelId = testChannel.Id,
        ///         MasterMediaAssetId = testMediaAsset.Id,
        ///         MediaWorkflowJobId = testMediaWorkflowJob.Id,
        ///         Object = mediaAssetObject,
        ///         ParentMediaAssetId = testMediaAsset.Id,
        ///         SourceMediaWorkflowId = testMediaWorkflow.Id,
        ///         SourceMediaWorkflowVersion = mediaAssetSourceMediaWorkflowVersion,
        ///         State = mediaAssetState,
        ///         Type = mediaAssetType,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMediaAssetsResult> Invoke(GetMediaAssetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaAssetsResult>("oci:MediaServices/getMediaAssets:getMediaAssets", args ?? new GetMediaAssetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMediaAssetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter MediaAsset by the bucket where the object is stored.
        /// </summary>
        [Input("bucket")]
        public string? Bucket { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Unique DistributionChannel identifier.
        /// </summary>
        [Input("distributionChannelId")]
        public string? DistributionChannelId { get; set; }

        [Input("filters")]
        private List<Inputs.GetMediaAssetsFilterArgs>? _filters;
        public List<Inputs.GetMediaAssetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMediaAssetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique MediaAsset identifier of the first asset upload.
        /// </summary>
        [Input("masterMediaAssetId")]
        public string? MasterMediaAssetId { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
        /// </summary>
        [Input("mediaWorkflowJobId")]
        public string? MediaWorkflowJobId { get; set; }

        /// <summary>
        /// Filter MediaAsset by the name of the object in object storage.
        /// </summary>
        [Input("object")]
        public string? Object { get; set; }

        /// <summary>
        /// Unique MediaAsset identifier of the asset from which this asset is derived.
        /// </summary>
        [Input("parentMediaAssetId")]
        public string? ParentMediaAssetId { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowId")]
        public string? SourceMediaWorkflowId { get; set; }

        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowVersion")]
        public string? SourceMediaWorkflowVersion { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Filter MediaAsset by the asset type.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetMediaAssetsArgs()
        {
        }
        public static new GetMediaAssetsArgs Empty => new GetMediaAssetsArgs();
    }

    public sealed class GetMediaAssetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter MediaAsset by the bucket where the object is stored.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Unique DistributionChannel identifier.
        /// </summary>
        [Input("distributionChannelId")]
        public Input<string>? DistributionChannelId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMediaAssetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMediaAssetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMediaAssetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique MediaAsset identifier of the first asset upload.
        /// </summary>
        [Input("masterMediaAssetId")]
        public Input<string>? MasterMediaAssetId { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
        /// </summary>
        [Input("mediaWorkflowJobId")]
        public Input<string>? MediaWorkflowJobId { get; set; }

        /// <summary>
        /// Filter MediaAsset by the name of the object in object storage.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// Unique MediaAsset identifier of the asset from which this asset is derived.
        /// </summary>
        [Input("parentMediaAssetId")]
        public Input<string>? ParentMediaAssetId { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowId")]
        public Input<string>? SourceMediaWorkflowId { get; set; }

        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowVersion")]
        public Input<string>? SourceMediaWorkflowVersion { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Filter MediaAsset by the asset type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetMediaAssetsInvokeArgs()
        {
        }
        public static new GetMediaAssetsInvokeArgs Empty => new GetMediaAssetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMediaAssetsResult
    {
        /// <summary>
        /// The name of the object storage bucket where this represented asset is located.
        /// </summary>
        public readonly string? Bucket;
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DistributionChannelId;
        public readonly ImmutableArray<Outputs.GetMediaAssetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the senior most asset from which this asset is derived.
        /// </summary>
        public readonly string? MasterMediaAssetId;
        /// <summary>
        /// The list of media_asset_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionResult> MediaAssetCollections;
        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset.
        /// </summary>
        public readonly string? MediaWorkflowJobId;
        /// <summary>
        /// The object storage object name that identifies this asset.
        /// </summary>
        public readonly string? Object;
        /// <summary>
        /// The ID of the parent asset from which this asset is derived.
        /// </summary>
        public readonly string? ParentMediaAssetId;
        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        public readonly string? SourceMediaWorkflowId;
        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        public readonly string? SourceMediaWorkflowVersion;
        /// <summary>
        /// The current state of the MediaAsset.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The type of the media asset.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetMediaAssetsResult(
            string? bucket,

            string? compartmentId,

            string? displayName,

            string? distributionChannelId,

            ImmutableArray<Outputs.GetMediaAssetsFilterResult> filters,

            string id,

            string? masterMediaAssetId,

            ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionResult> mediaAssetCollections,

            string? mediaWorkflowJobId,

            string? @object,

            string? parentMediaAssetId,

            string? sourceMediaWorkflowId,

            string? sourceMediaWorkflowVersion,

            string? state,

            string? type)
        {
            Bucket = bucket;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            DistributionChannelId = distributionChannelId;
            Filters = filters;
            Id = id;
            MasterMediaAssetId = masterMediaAssetId;
            MediaAssetCollections = mediaAssetCollections;
            MediaWorkflowJobId = mediaWorkflowJobId;
            Object = @object;
            ParentMediaAssetId = parentMediaAssetId;
            SourceMediaWorkflowId = sourceMediaWorkflowId;
            SourceMediaWorkflowVersion = sourceMediaWorkflowVersion;
            State = state;
            Type = type;
        }
    }
}
