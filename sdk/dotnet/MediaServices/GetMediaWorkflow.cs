// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetMediaWorkflow
    {
        /// <summary>
        /// This data source provides details about a specific Media Workflow resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a MediaWorkflow by identifier.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflow = Oci.MediaServices.GetMediaWorkflow.Invoke(new()
        ///     {
        ///         MediaWorkflowId = testMediaWorkflowOciMediaServicesMediaWorkflow.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMediaWorkflowResult> InvokeAsync(GetMediaWorkflowArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMediaWorkflowResult>("oci:MediaServices/getMediaWorkflow:getMediaWorkflow", args ?? new GetMediaWorkflowArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Media Workflow resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a MediaWorkflow by identifier.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflow = Oci.MediaServices.GetMediaWorkflow.Invoke(new()
        ///     {
        ///         MediaWorkflowId = testMediaWorkflowOciMediaServicesMediaWorkflow.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMediaWorkflowResult> Invoke(GetMediaWorkflowInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaWorkflowResult>("oci:MediaServices/getMediaWorkflow:getMediaWorkflow", args ?? new GetMediaWorkflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMediaWorkflowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique MediaWorkflow identifier.
        /// </summary>
        [Input("mediaWorkflowId", required: true)]
        public string MediaWorkflowId { get; set; } = null!;

        public GetMediaWorkflowArgs()
        {
        }
        public static new GetMediaWorkflowArgs Empty => new GetMediaWorkflowArgs();
    }

    public sealed class GetMediaWorkflowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique MediaWorkflow identifier.
        /// </summary>
        [Input("mediaWorkflowId", required: true)]
        public Input<string> MediaWorkflowId { get; set; } = null!;

        public GetMediaWorkflowInvokeArgs()
        {
        }
        public static new GetMediaWorkflowInvokeArgs Empty => new GetMediaWorkflowInvokeArgs();
    }


    [OutputType]
    public sealed class GetMediaWorkflowResult
    {
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Name of the Media Workflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        public readonly bool IsLockOverride;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecyleDetails;
        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowLockResult> Locks;
        /// <summary>
        /// Configurations to be applied to all the runs of this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob. If the same parameter appears in multiple configurations, the values that appear in the configuration at the highest index will be used.
        /// </summary>
        public readonly ImmutableArray<string> MediaWorkflowConfigurationIds;
        public readonly string MediaWorkflowId;
        /// <summary>
        /// Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// The current state of the MediaWorkflow.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array is unique within the array.  The order of the items is preserved from the order of the tasks array in CreateMediaWorkflowDetails or UpdateMediaWorkflowDetails.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowTaskResult> Tasks;
        /// <summary>
        /// The time when the MediaWorkflow was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The version of the MediaWorkflow.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetMediaWorkflowResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isLockOverride,

            string lifecyleDetails,

            ImmutableArray<Outputs.GetMediaWorkflowLockResult> locks,

            ImmutableArray<string> mediaWorkflowConfigurationIds,

            string mediaWorkflowId,

            string parameters,

            string state,

            ImmutableDictionary<string, object> systemTags,

            ImmutableArray<Outputs.GetMediaWorkflowTaskResult> tasks,

            string timeCreated,

            string timeUpdated,

            string version)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsLockOverride = isLockOverride;
            LifecyleDetails = lifecyleDetails;
            Locks = locks;
            MediaWorkflowConfigurationIds = mediaWorkflowConfigurationIds;
            MediaWorkflowId = mediaWorkflowId;
            Parameters = parameters;
            State = state;
            SystemTags = systemTags;
            Tasks = tasks;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Version = version;
        }
    }
}
