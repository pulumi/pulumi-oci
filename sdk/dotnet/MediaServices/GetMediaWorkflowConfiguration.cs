// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetMediaWorkflowConfiguration
    {
        /// <summary>
        /// This data source provides details about a specific Media Workflow Configuration resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a MediaWorkflowConfiguration by identifier
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowConfiguration = Oci.MediaServices.GetMediaWorkflowConfiguration.Invoke(new()
        ///     {
        ///         MediaWorkflowConfigurationId = testMediaWorkflowConfigurationOciMediaServicesMediaWorkflowConfiguration.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMediaWorkflowConfigurationResult> InvokeAsync(GetMediaWorkflowConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMediaWorkflowConfigurationResult>("oci:MediaServices/getMediaWorkflowConfiguration:getMediaWorkflowConfiguration", args ?? new GetMediaWorkflowConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Media Workflow Configuration resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a MediaWorkflowConfiguration by identifier
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowConfiguration = Oci.MediaServices.GetMediaWorkflowConfiguration.Invoke(new()
        ///     {
        ///         MediaWorkflowConfigurationId = testMediaWorkflowConfigurationOciMediaServicesMediaWorkflowConfiguration.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMediaWorkflowConfigurationResult> Invoke(GetMediaWorkflowConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaWorkflowConfigurationResult>("oci:MediaServices/getMediaWorkflowConfiguration:getMediaWorkflowConfiguration", args ?? new GetMediaWorkflowConfigurationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Media Workflow Configuration resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a MediaWorkflowConfiguration by identifier
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowConfiguration = Oci.MediaServices.GetMediaWorkflowConfiguration.Invoke(new()
        ///     {
        ///         MediaWorkflowConfigurationId = testMediaWorkflowConfigurationOciMediaServicesMediaWorkflowConfiguration.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMediaWorkflowConfigurationResult> Invoke(GetMediaWorkflowConfigurationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaWorkflowConfigurationResult>("oci:MediaServices/getMediaWorkflowConfiguration:getMediaWorkflowConfiguration", args ?? new GetMediaWorkflowConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMediaWorkflowConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique MediaWorkflowConfiguration identifier.
        /// </summary>
        [Input("mediaWorkflowConfigurationId", required: true)]
        public string MediaWorkflowConfigurationId { get; set; } = null!;

        public GetMediaWorkflowConfigurationArgs()
        {
        }
        public static new GetMediaWorkflowConfigurationArgs Empty => new GetMediaWorkflowConfigurationArgs();
    }

    public sealed class GetMediaWorkflowConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique MediaWorkflowConfiguration identifier.
        /// </summary>
        [Input("mediaWorkflowConfigurationId", required: true)]
        public Input<string> MediaWorkflowConfigurationId { get; set; } = null!;

        public GetMediaWorkflowConfigurationInvokeArgs()
        {
        }
        public static new GetMediaWorkflowConfigurationInvokeArgs Empty => new GetMediaWorkflowConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMediaWorkflowConfigurationResult
    {
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Display name for the MediaWorkflowConfiguration. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        public readonly bool IsLockOverride;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecyleDetails;
        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowConfigurationLockResult> Locks;
        public readonly string MediaWorkflowConfigurationId;
        /// <summary>
        /// Reuseable parameter values encoded as a JSON; the top and second level JSON elements are objects. Each key of the top level object refer to a task key that is unqiue to the workflow, each of the second level objects' keys refer to the name of a parameter that is unique to the task. taskKey &gt; parameterName &gt; parameterValue
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// The current state of the MediaWorkflowConfiguration.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time when the the MediaWorkflowConfiguration was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the MediaWorkflowConfiguration was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetMediaWorkflowConfigurationResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isLockOverride,

            string lifecyleDetails,

            ImmutableArray<Outputs.GetMediaWorkflowConfigurationLockResult> locks,

            string mediaWorkflowConfigurationId,

            string parameters,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsLockOverride = isLockOverride;
            LifecyleDetails = lifecyleDetails;
            Locks = locks;
            MediaWorkflowConfigurationId = mediaWorkflowConfigurationId;
            Parameters = parameters;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
