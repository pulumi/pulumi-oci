// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetMediaWorkflowConfigurations
    {
        /// <summary>
        /// This data source provides the list of Media Workflow Configurations in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Returns a list of MediaWorkflowConfigurations.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowConfigurations = Oci.MediaServices.GetMediaWorkflowConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = mediaWorkflowConfigurationDisplayName,
        ///         Id = mediaWorkflowConfigurationId,
        ///         State = mediaWorkflowConfigurationState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMediaWorkflowConfigurationsResult> InvokeAsync(GetMediaWorkflowConfigurationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMediaWorkflowConfigurationsResult>("oci:MediaServices/getMediaWorkflowConfigurations:getMediaWorkflowConfigurations", args ?? new GetMediaWorkflowConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Media Workflow Configurations in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Returns a list of MediaWorkflowConfigurations.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowConfigurations = Oci.MediaServices.GetMediaWorkflowConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = mediaWorkflowConfigurationDisplayName,
        ///         Id = mediaWorkflowConfigurationId,
        ///         State = mediaWorkflowConfigurationState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMediaWorkflowConfigurationsResult> Invoke(GetMediaWorkflowConfigurationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaWorkflowConfigurationsResult>("oci:MediaServices/getMediaWorkflowConfigurations:getMediaWorkflowConfigurations", args ?? new GetMediaWorkflowConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMediaWorkflowConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMediaWorkflowConfigurationsFilterArgs>? _filters;
        public List<Inputs.GetMediaWorkflowConfigurationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMediaWorkflowConfigurationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique MediaWorkflowConfiguration identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetMediaWorkflowConfigurationsArgs()
        {
        }
        public static new GetMediaWorkflowConfigurationsArgs Empty => new GetMediaWorkflowConfigurationsArgs();
    }

    public sealed class GetMediaWorkflowConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMediaWorkflowConfigurationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMediaWorkflowConfigurationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMediaWorkflowConfigurationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique MediaWorkflowConfiguration identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetMediaWorkflowConfigurationsInvokeArgs()
        {
        }
        public static new GetMediaWorkflowConfigurationsInvokeArgs Empty => new GetMediaWorkflowConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMediaWorkflowConfigurationsResult
    {
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Display name for the MediaWorkflowConfiguration. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMediaWorkflowConfigurationsFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of media_workflow_configuration_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionResult> MediaWorkflowConfigurationCollections;
        /// <summary>
        /// The current state of the MediaWorkflowConfiguration.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetMediaWorkflowConfigurationsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetMediaWorkflowConfigurationsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetMediaWorkflowConfigurationsMediaWorkflowConfigurationCollectionResult> mediaWorkflowConfigurationCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MediaWorkflowConfigurationCollections = mediaWorkflowConfigurationCollections;
            State = state;
        }
    }
}
