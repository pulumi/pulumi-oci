// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetMediaWorkflowJobs
    {
        /// <summary>
        /// This data source provides the list of Media Workflow Jobs in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Lists the MediaWorkflowJobs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowJobs = Oci.MediaServices.GetMediaWorkflowJobs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Media_workflow_job_display_name,
        ///         Id = @var.Media_workflow_job_id,
        ///         MediaWorkflowId = oci_media_services_media_workflow.Test_media_workflow.Id,
        ///         State = @var.Media_workflow_job_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMediaWorkflowJobsResult> InvokeAsync(GetMediaWorkflowJobsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMediaWorkflowJobsResult>("oci:MediaServices/getMediaWorkflowJobs:getMediaWorkflowJobs", args ?? new GetMediaWorkflowJobsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Media Workflow Jobs in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Lists the MediaWorkflowJobs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMediaWorkflowJobs = Oci.MediaServices.GetMediaWorkflowJobs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Media_workflow_job_display_name,
        ///         Id = @var.Media_workflow_job_id,
        ///         MediaWorkflowId = oci_media_services_media_workflow.Test_media_workflow.Id,
        ///         State = @var.Media_workflow_job_state,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMediaWorkflowJobsResult> Invoke(GetMediaWorkflowJobsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMediaWorkflowJobsResult>("oci:MediaServices/getMediaWorkflowJobs:getMediaWorkflowJobs", args ?? new GetMediaWorkflowJobsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMediaWorkflowJobsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMediaWorkflowJobsFilterArgs>? _filters;
        public List<Inputs.GetMediaWorkflowJobsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMediaWorkflowJobsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique MediaWorkflowJob identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Unique MediaWorkflow identifier.
        /// </summary>
        [Input("mediaWorkflowId")]
        public string? MediaWorkflowId { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetMediaWorkflowJobsArgs()
        {
        }
        public static new GetMediaWorkflowJobsArgs Empty => new GetMediaWorkflowJobsArgs();
    }

    public sealed class GetMediaWorkflowJobsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMediaWorkflowJobsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMediaWorkflowJobsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMediaWorkflowJobsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique MediaWorkflowJob identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Unique MediaWorkflow identifier.
        /// </summary>
        [Input("mediaWorkflowId")]
        public Input<string>? MediaWorkflowId { get; set; }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetMediaWorkflowJobsInvokeArgs()
        {
        }
        public static new GetMediaWorkflowJobsInvokeArgs Empty => new GetMediaWorkflowJobsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMediaWorkflowJobsResult
    {
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMediaWorkflowJobsFilterResult> Filters;
        /// <summary>
        /// The ID associated with the job output.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The workflow to execute.
        /// </summary>
        public readonly string? MediaWorkflowId;
        /// <summary>
        /// The list of media_workflow_job_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionResult> MediaWorkflowJobCollections;
        /// <summary>
        /// The current state of the MediaWorkflowJob task.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetMediaWorkflowJobsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetMediaWorkflowJobsFilterResult> filters,

            string? id,

            string? mediaWorkflowId,

            ImmutableArray<Outputs.GetMediaWorkflowJobsMediaWorkflowJobCollectionResult> mediaWorkflowJobCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MediaWorkflowId = mediaWorkflowId;
            MediaWorkflowJobCollections = mediaWorkflowJobCollections;
            State = state;
        }
    }
}
