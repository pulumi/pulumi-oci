// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetStreamCdnConfig
    {
        /// <summary>
        /// This data source provides details about a specific Stream Cdn Config resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a StreamCdnConfig by identifier.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamCdnConfig = Oci.MediaServices.GetStreamCdnConfig.Invoke(new()
        ///     {
        ///         StreamCdnConfigId = testStreamCdnConfigOciMediaServicesStreamCdnConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetStreamCdnConfigResult> InvokeAsync(GetStreamCdnConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamCdnConfigResult>("oci:MediaServices/getStreamCdnConfig:getStreamCdnConfig", args ?? new GetStreamCdnConfigArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Stream Cdn Config resource in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Gets a StreamCdnConfig by identifier.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamCdnConfig = Oci.MediaServices.GetStreamCdnConfig.Invoke(new()
        ///     {
        ///         StreamCdnConfigId = testStreamCdnConfigOciMediaServicesStreamCdnConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetStreamCdnConfigResult> Invoke(GetStreamCdnConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamCdnConfigResult>("oci:MediaServices/getStreamCdnConfig:getStreamCdnConfig", args ?? new GetStreamCdnConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamCdnConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique StreamCdnConfig identifier.
        /// </summary>
        [Input("streamCdnConfigId", required: true)]
        public string StreamCdnConfigId { get; set; } = null!;

        public GetStreamCdnConfigArgs()
        {
        }
        public static new GetStreamCdnConfigArgs Empty => new GetStreamCdnConfigArgs();
    }

    public sealed class GetStreamCdnConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique StreamCdnConfig identifier.
        /// </summary>
        [Input("streamCdnConfigId", required: true)]
        public Input<string> StreamCdnConfigId { get; set; } = null!;

        public GetStreamCdnConfigInvokeArgs()
        {
        }
        public static new GetStreamCdnConfigInvokeArgs Empty => new GetStreamCdnConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamCdnConfigResult
    {
        /// <summary>
        /// The compartment ID of the lock.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Base fields of the StreamCdnConfig configuration object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamCdnConfigConfigResult> Configs;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The CDN Configuration identifier or display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Distribution Channel Identifier.
        /// </summary>
        public readonly string DistributionChannelId;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether publishing to CDN is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        public readonly bool IsLockOverride;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecyleDetails;
        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamCdnConfigLockResult> Locks;
        /// <summary>
        /// The current state of the CDN Configuration.
        /// </summary>
        public readonly string State;
        public readonly string StreamCdnConfigId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time when the CDN Config was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the CDN Config was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetStreamCdnConfigResult(
            string compartmentId,

            ImmutableArray<Outputs.GetStreamCdnConfigConfigResult> configs,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            string distributionChannelId,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isEnabled,

            bool isLockOverride,

            string lifecyleDetails,

            ImmutableArray<Outputs.GetStreamCdnConfigLockResult> locks,

            string state,

            string streamCdnConfigId,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            Configs = configs;
            DefinedTags = definedTags;
            DisplayName = displayName;
            DistributionChannelId = distributionChannelId;
            FreeformTags = freeformTags;
            Id = id;
            IsEnabled = isEnabled;
            IsLockOverride = isLockOverride;
            LifecyleDetails = lifecyleDetails;
            Locks = locks;
            State = state;
            StreamCdnConfigId = streamCdnConfigId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
