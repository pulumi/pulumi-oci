// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    public static class GetStreamPackagingConfigs
    {
        /// <summary>
        /// This data source provides the list of Stream Packaging Configs in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Lists the Stream Packaging Configurations.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamPackagingConfigs = Oci.MediaServices.GetStreamPackagingConfigs.Invoke(new()
        ///     {
        ///         DistributionChannelId = testChannel.Id,
        ///         DisplayName = streamPackagingConfigDisplayName,
        ///         State = streamPackagingConfigState,
        ///         StreamPackagingConfigId = testStreamPackagingConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetStreamPackagingConfigsResult> InvokeAsync(GetStreamPackagingConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamPackagingConfigsResult>("oci:MediaServices/getStreamPackagingConfigs:getStreamPackagingConfigs", args ?? new GetStreamPackagingConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Stream Packaging Configs in Oracle Cloud Infrastructure Media Services service.
        /// 
        /// Lists the Stream Packaging Configurations.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStreamPackagingConfigs = Oci.MediaServices.GetStreamPackagingConfigs.Invoke(new()
        ///     {
        ///         DistributionChannelId = testChannel.Id,
        ///         DisplayName = streamPackagingConfigDisplayName,
        ///         State = streamPackagingConfigState,
        ///         StreamPackagingConfigId = testStreamPackagingConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetStreamPackagingConfigsResult> Invoke(GetStreamPackagingConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamPackagingConfigsResult>("oci:MediaServices/getStreamPackagingConfigs:getStreamPackagingConfigs", args ?? new GetStreamPackagingConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamPackagingConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Unique Stream Distribution Channel identifier.
        /// </summary>
        [Input("distributionChannelId", required: true)]
        public string DistributionChannelId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetStreamPackagingConfigsFilterArgs>? _filters;
        public List<Inputs.GetStreamPackagingConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetStreamPackagingConfigsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Unique Stream Packaging Configuration identifier.
        /// </summary>
        [Input("streamPackagingConfigId")]
        public string? StreamPackagingConfigId { get; set; }

        public GetStreamPackagingConfigsArgs()
        {
        }
        public static new GetStreamPackagingConfigsArgs Empty => new GetStreamPackagingConfigsArgs();
    }

    public sealed class GetStreamPackagingConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Unique Stream Distribution Channel identifier.
        /// </summary>
        [Input("distributionChannelId", required: true)]
        public Input<string> DistributionChannelId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetStreamPackagingConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetStreamPackagingConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetStreamPackagingConfigsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Unique Stream Packaging Configuration identifier.
        /// </summary>
        [Input("streamPackagingConfigId")]
        public Input<string>? StreamPackagingConfigId { get; set; }

        public GetStreamPackagingConfigsInvokeArgs()
        {
        }
        public static new GetStreamPackagingConfigsInvokeArgs Empty => new GetStreamPackagingConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamPackagingConfigsResult
    {
        /// <summary>
        /// The name of the stream packaging configuration. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
        /// </summary>
        public readonly string DistributionChannelId;
        public readonly ImmutableArray<Outputs.GetStreamPackagingConfigsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the Packaging Configuration.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of stream_packaging_config_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionResult> StreamPackagingConfigCollections;
        public readonly string? StreamPackagingConfigId;

        [OutputConstructor]
        private GetStreamPackagingConfigsResult(
            string? displayName,

            string distributionChannelId,

            ImmutableArray<Outputs.GetStreamPackagingConfigsFilterResult> filters,

            string id,

            string? state,

            ImmutableArray<Outputs.GetStreamPackagingConfigsStreamPackagingConfigCollectionResult> streamPackagingConfigCollections,

            string? streamPackagingConfigId)
        {
            DisplayName = displayName;
            DistributionChannelId = distributionChannelId;
            Filters = filters;
            Id = id;
            State = state;
            StreamPackagingConfigCollections = streamPackagingConfigCollections;
            StreamPackagingConfigId = streamPackagingConfigId;
        }
    }
}
