// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices.Inputs
{

    public sealed class StreamCdnConfigConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The hostname of the CDN edge server to use when building CDN URLs.
        /// </summary>
        [Input("edgeHostname")]
        public Input<string>? EdgeHostname { get; set; }

        /// <summary>
        /// (Updatable) The path to prepend when building CDN URLs.
        /// </summary>
        [Input("edgePathPrefix")]
        public Input<string>? EdgePathPrefix { get; set; }

        /// <summary>
        /// (Updatable) The encryption key to use for edge token authentication.
        /// </summary>
        [Input("edgeTokenKey")]
        public Input<string>? EdgeTokenKey { get; set; }

        /// <summary>
        /// (Updatable) Salt to use when encrypting authentication token.
        /// </summary>
        [Input("edgeTokenSalt")]
        public Input<string>? EdgeTokenSalt { get; set; }

        /// <summary>
        /// (Updatable) Whether token authentication should be used at the CDN edge.
        /// </summary>
        [Input("isEdgeTokenAuth")]
        public Input<bool>? IsEdgeTokenAuth { get; set; }

        /// <summary>
        /// (Updatable) The shared secret key A, two for errorless key rotation.
        /// </summary>
        [Input("originAuthSecretKeyA")]
        public Input<string>? OriginAuthSecretKeyA { get; set; }

        /// <summary>
        /// (Updatable) The shared secret key B, two for errorless key rotation.
        /// </summary>
        [Input("originAuthSecretKeyB")]
        public Input<string>? OriginAuthSecretKeyB { get; set; }

        /// <summary>
        /// (Updatable) Nonce identifier for originAuthSecretKeyA (used to determine key used to sign).
        /// </summary>
        [Input("originAuthSecretKeyNonceA")]
        public Input<string>? OriginAuthSecretKeyNonceA { get; set; }

        /// <summary>
        /// (Updatable) Nonce identifier for originAuthSecretKeyB (used to determine key used to sign).
        /// </summary>
        [Input("originAuthSecretKeyNonceB")]
        public Input<string>? OriginAuthSecretKeyNonceB { get; set; }

        /// <summary>
        /// (Updatable) The type of encryption used to compute the signature.
        /// </summary>
        [Input("originAuthSignEncryption")]
        public Input<string>? OriginAuthSignEncryption { get; set; }

        /// <summary>
        /// (Updatable) The type of data used to compute the signature.
        /// </summary>
        [Input("originAuthSignType")]
        public Input<string>? OriginAuthSignType { get; set; }

        /// <summary>
        /// (Updatable) The name of the CDN configuration type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public StreamCdnConfigConfigArgs()
        {
        }
        public static new StreamCdnConfigConfigArgs Empty => new StreamCdnConfigConfigArgs();
    }
}
