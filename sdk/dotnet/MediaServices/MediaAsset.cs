// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    /// <summary>
    /// This resource provides the Media Asset resource in Oracle Cloud Infrastructure Media Services service.
    /// 
    /// Creates a new MediaAsset.
    /// 
    /// ## Import
    /// 
    /// MediaAssets can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:MediaServices/mediaAsset:MediaAsset test_media_asset "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:MediaServices/mediaAsset:MediaAsset")]
    public partial class MediaAsset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the object storage bucket where this asset is located.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Compartment Identifier.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Display name for the Media Asset. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        [Output("isLockOverride")]
        public Output<bool> IsLockOverride { get; private set; } = null!;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        [Output("locks")]
        public Output<ImmutableArray<Outputs.MediaAssetLock>> Locks { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The ID of the senior most asset from which this asset is derived.
        /// </summary>
        [Output("masterMediaAssetId")]
        public Output<string> MasterMediaAssetId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) list of tags for the MediaAsset.
        /// </summary>
        [Output("mediaAssetTags")]
        public Output<ImmutableArray<Outputs.MediaAssetMediaAssetTag>> MediaAssetTags { get; private set; } = null!;

        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset.
        /// </summary>
        [Output("mediaWorkflowJobId")]
        public Output<string> MediaWorkflowJobId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of Metadata.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.MediaAssetMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The object storage namespace where this asset is located.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// The object storage object name that identifies this asset.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// eTag of the underlying object storage object.
        /// </summary>
        [Output("objectEtag")]
        public Output<string> ObjectEtag { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The ID of the parent asset from which this asset is derived.
        /// </summary>
        [Output("parentMediaAssetId")]
        public Output<string> ParentMediaAssetId { get; private set; } = null!;

        /// <summary>
        /// The end index for video segment files.
        /// </summary>
        [Output("segmentRangeEndIndex")]
        public Output<string> SegmentRangeEndIndex { get; private set; } = null!;

        /// <summary>
        /// The start index for video segment files.
        /// </summary>
        [Output("segmentRangeStartIndex")]
        public Output<string> SegmentRangeStartIndex { get; private set; } = null!;

        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Output("sourceMediaWorkflowId")]
        public Output<string> SourceMediaWorkflowId { get; private set; } = null!;

        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Output("sourceMediaWorkflowVersion")]
        public Output<string> SourceMediaWorkflowVersion { get; private set; } = null!;

        /// <summary>
        /// The current state of the MediaAsset.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time when the MediaAsset was created. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time when the MediaAsset was updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The type of the media asset.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MediaAsset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MediaAsset(string name, MediaAssetArgs args, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaAsset:MediaAsset", name, args ?? new MediaAssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MediaAsset(string name, Input<string> id, MediaAssetState? state = null, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaAsset:MediaAsset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MediaAsset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MediaAsset Get(string name, Input<string> id, MediaAssetState? state = null, CustomResourceOptions? options = null)
        {
            return new MediaAsset(name, id, state, options);
        }
    }

    public sealed class MediaAssetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the object storage bucket where this asset is located.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// (Updatable) Compartment Identifier.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name for the Media Asset. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaAssetLockArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaAssetLockArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaAssetLockArgs>());
            set => _locks = value;
        }

        /// <summary>
        /// (Updatable) The ID of the senior most asset from which this asset is derived.
        /// </summary>
        [Input("masterMediaAssetId")]
        public Input<string>? MasterMediaAssetId { get; set; }

        [Input("mediaAssetTags")]
        private InputList<Inputs.MediaAssetMediaAssetTagArgs>? _mediaAssetTags;

        /// <summary>
        /// (Updatable) list of tags for the MediaAsset.
        /// </summary>
        public InputList<Inputs.MediaAssetMediaAssetTagArgs> MediaAssetTags
        {
            get => _mediaAssetTags ?? (_mediaAssetTags = new InputList<Inputs.MediaAssetMediaAssetTagArgs>());
            set => _mediaAssetTags = value;
        }

        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset.
        /// </summary>
        [Input("mediaWorkflowJobId")]
        public Input<string>? MediaWorkflowJobId { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.MediaAssetMetadataArgs>? _metadatas;

        /// <summary>
        /// (Updatable) List of Metadata.
        /// </summary>
        public InputList<Inputs.MediaAssetMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.MediaAssetMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The object storage namespace where this asset is located.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The object storage object name that identifies this asset.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// eTag of the underlying object storage object.
        /// </summary>
        [Input("objectEtag")]
        public Input<string>? ObjectEtag { get; set; }

        /// <summary>
        /// (Updatable) The ID of the parent asset from which this asset is derived.
        /// </summary>
        [Input("parentMediaAssetId")]
        public Input<string>? ParentMediaAssetId { get; set; }

        /// <summary>
        /// The end index for video segment files.
        /// </summary>
        [Input("segmentRangeEndIndex")]
        public Input<string>? SegmentRangeEndIndex { get; set; }

        /// <summary>
        /// The start index for video segment files.
        /// </summary>
        [Input("segmentRangeStartIndex")]
        public Input<string>? SegmentRangeStartIndex { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowId")]
        public Input<string>? SourceMediaWorkflowId { get; set; }

        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowVersion")]
        public Input<string>? SourceMediaWorkflowVersion { get; set; }

        /// <summary>
        /// (Updatable) The type of the media asset.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public MediaAssetArgs()
        {
        }
        public static new MediaAssetArgs Empty => new MediaAssetArgs();
    }

    public sealed class MediaAssetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the object storage bucket where this asset is located.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// (Updatable) Compartment Identifier.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display name for the Media Asset. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaAssetLockGetArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaAssetLockGetArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaAssetLockGetArgs>());
            set => _locks = value;
        }

        /// <summary>
        /// (Updatable) The ID of the senior most asset from which this asset is derived.
        /// </summary>
        [Input("masterMediaAssetId")]
        public Input<string>? MasterMediaAssetId { get; set; }

        [Input("mediaAssetTags")]
        private InputList<Inputs.MediaAssetMediaAssetTagGetArgs>? _mediaAssetTags;

        /// <summary>
        /// (Updatable) list of tags for the MediaAsset.
        /// </summary>
        public InputList<Inputs.MediaAssetMediaAssetTagGetArgs> MediaAssetTags
        {
            get => _mediaAssetTags ?? (_mediaAssetTags = new InputList<Inputs.MediaAssetMediaAssetTagGetArgs>());
            set => _mediaAssetTags = value;
        }

        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset.
        /// </summary>
        [Input("mediaWorkflowJobId")]
        public Input<string>? MediaWorkflowJobId { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.MediaAssetMetadataGetArgs>? _metadatas;

        /// <summary>
        /// (Updatable) List of Metadata.
        /// </summary>
        public InputList<Inputs.MediaAssetMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.MediaAssetMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The object storage namespace where this asset is located.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The object storage object name that identifies this asset.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// eTag of the underlying object storage object.
        /// </summary>
        [Input("objectEtag")]
        public Input<string>? ObjectEtag { get; set; }

        /// <summary>
        /// (Updatable) The ID of the parent asset from which this asset is derived.
        /// </summary>
        [Input("parentMediaAssetId")]
        public Input<string>? ParentMediaAssetId { get; set; }

        /// <summary>
        /// The end index for video segment files.
        /// </summary>
        [Input("segmentRangeEndIndex")]
        public Input<string>? SegmentRangeEndIndex { get; set; }

        /// <summary>
        /// The start index for video segment files.
        /// </summary>
        [Input("segmentRangeStartIndex")]
        public Input<string>? SegmentRangeStartIndex { get; set; }

        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowId")]
        public Input<string>? SourceMediaWorkflowId { get; set; }

        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        [Input("sourceMediaWorkflowVersion")]
        public Input<string>? SourceMediaWorkflowVersion { get; set; }

        /// <summary>
        /// The current state of the MediaAsset.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time when the MediaAsset was created. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time when the MediaAsset was updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The type of the media asset.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public MediaAssetState()
        {
        }
        public static new MediaAssetState Empty => new MediaAssetState();
    }
}
