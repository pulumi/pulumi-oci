// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    /// <summary>
    /// This resource provides the Media Workflow resource in Oracle Cloud Infrastructure Media Services service.
    /// 
    /// Creates a new MediaWorkflow.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testMediaWorkflow = new Oci.MediaServices.MediaWorkflow("test_media_workflow", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         DisplayName = mediaWorkflowDisplayName,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         Locks = new[]
    ///         {
    ///             new Oci.MediaServices.Inputs.MediaWorkflowLockArgs
    ///             {
    ///                 CompartmentId = compartmentId,
    ///                 Type = mediaWorkflowLocksType,
    ///                 Message = mediaWorkflowLocksMessage,
    ///                 RelatedResourceId = testResource.Id,
    ///                 TimeCreated = mediaWorkflowLocksTimeCreated,
    ///             },
    ///         },
    ///         MediaWorkflowConfigurationIds = mediaWorkflowMediaWorkflowConfigurationIds,
    ///         Parameters = mediaWorkflowParameters,
    ///         Tasks = new[]
    ///         {
    ///             new Oci.MediaServices.Inputs.MediaWorkflowTaskArgs
    ///             {
    ///                 Key = mediaWorkflowTasksKey,
    ///                 Parameters = mediaWorkflowTasksParameters,
    ///                 Type = mediaWorkflowTasksType,
    ///                 Version = mediaWorkflowTasksVersion,
    ///                 EnableParameterReference = mediaWorkflowTasksEnableParameterReference,
    ///                 EnableWhenReferencedParameterEquals = mediaWorkflowTasksEnableWhenReferencedParameterEquals,
    ///                 Prerequisites = mediaWorkflowTasksPrerequisites,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// MediaWorkflows can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:MediaServices/mediaWorkflow:MediaWorkflow test_media_workflow "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:MediaServices/mediaWorkflow:MediaWorkflow")]
    public partial class MediaWorkflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name for the MediaWorkflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        [Output("isLockOverride")]
        public Output<bool> IsLockOverride { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Output("lifecyleDetails")]
        public Output<string> LifecyleDetails { get; private set; } = null!;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        [Output("locks")]
        public Output<ImmutableArray<Outputs.MediaWorkflowLock>> Locks { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Configurations to be applied to all the jobs for this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob.
        /// </summary>
        [Output("mediaWorkflowConfigurationIds")]
        public Output<ImmutableArray<string>> MediaWorkflowConfigurationIds { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
        /// </summary>
        [Output("parameters")]
        public Output<string> Parameters { get; private set; } = null!;

        /// <summary>
        /// The current state of the MediaWorkflow.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array must be unique within the array. The order of tasks given here will be preserved.
        /// </summary>
        [Output("tasks")]
        public Output<ImmutableArray<Outputs.MediaWorkflowTask>> Tasks { get; private set; } = null!;

        /// <summary>
        /// When the lock was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of the MediaWorkflowTaskDeclaration.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a MediaWorkflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MediaWorkflow(string name, MediaWorkflowArgs args, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaWorkflow:MediaWorkflow", name, args ?? new MediaWorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MediaWorkflow(string name, Input<string> id, MediaWorkflowState? state = null, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaWorkflow:MediaWorkflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MediaWorkflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MediaWorkflow Get(string name, Input<string> id, MediaWorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new MediaWorkflow(name, id, state, options);
        }
    }

    public sealed class MediaWorkflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Name for the MediaWorkflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaWorkflowLockArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaWorkflowLockArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaWorkflowLockArgs>());
            set => _locks = value;
        }

        [Input("mediaWorkflowConfigurationIds")]
        private InputList<string>? _mediaWorkflowConfigurationIds;

        /// <summary>
        /// (Updatable) Configurations to be applied to all the jobs for this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob.
        /// </summary>
        public InputList<string> MediaWorkflowConfigurationIds
        {
            get => _mediaWorkflowConfigurationIds ?? (_mediaWorkflowConfigurationIds = new InputList<string>());
            set => _mediaWorkflowConfigurationIds = value;
        }

        /// <summary>
        /// (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        [Input("tasks")]
        private InputList<Inputs.MediaWorkflowTaskArgs>? _tasks;

        /// <summary>
        /// (Updatable) The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array must be unique within the array. The order of tasks given here will be preserved.
        /// </summary>
        public InputList<Inputs.MediaWorkflowTaskArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<Inputs.MediaWorkflowTaskArgs>());
            set => _tasks = value;
        }

        public MediaWorkflowArgs()
        {
        }
        public static new MediaWorkflowArgs Empty => new MediaWorkflowArgs();
    }

    public sealed class MediaWorkflowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Name for the MediaWorkflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Input("lifecyleDetails")]
        public Input<string>? LifecyleDetails { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaWorkflowLockGetArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaWorkflowLockGetArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaWorkflowLockGetArgs>());
            set => _locks = value;
        }

        [Input("mediaWorkflowConfigurationIds")]
        private InputList<string>? _mediaWorkflowConfigurationIds;

        /// <summary>
        /// (Updatable) Configurations to be applied to all the jobs for this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob.
        /// </summary>
        public InputList<string> MediaWorkflowConfigurationIds
        {
            get => _mediaWorkflowConfigurationIds ?? (_mediaWorkflowConfigurationIds = new InputList<string>());
            set => _mediaWorkflowConfigurationIds = value;
        }

        /// <summary>
        /// (Updatable) Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// The current state of the MediaWorkflow.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        [Input("tasks")]
        private InputList<Inputs.MediaWorkflowTaskGetArgs>? _tasks;

        /// <summary>
        /// (Updatable) The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array must be unique within the array. The order of tasks given here will be preserved.
        /// </summary>
        public InputList<Inputs.MediaWorkflowTaskGetArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<Inputs.MediaWorkflowTaskGetArgs>());
            set => _tasks = value;
        }

        /// <summary>
        /// When the lock was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The version of the MediaWorkflowTaskDeclaration.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public MediaWorkflowState()
        {
        }
        public static new MediaWorkflowState Empty => new MediaWorkflowState();
    }
}
