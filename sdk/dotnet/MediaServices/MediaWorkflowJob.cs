// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices
{
    /// <summary>
    /// This resource provides the Media Workflow Job resource in Oracle Cloud Infrastructure Media Services service.
    /// 
    /// Run the MediaWorkflow according to the given mediaWorkflow definition and configuration.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testMediaWorkflowJob = new Oci.MediaServices.MediaWorkflowJob("testMediaWorkflowJob", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         WorkflowIdentifierType = @var.Media_workflow_job_workflow_identifier_type,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         DisplayName = @var.Media_workflow_job_display_name,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         Locks = new[]
    ///         {
    ///             new Oci.MediaServices.Inputs.MediaWorkflowJobLockArgs
    ///             {
    ///                 CompartmentId = @var.Compartment_id,
    ///                 Type = @var.Media_workflow_job_locks_type,
    ///                 Message = @var.Media_workflow_job_locks_message,
    ///                 RelatedResourceId = oci_usage_proxy_resource.Test_resource.Id,
    ///                 TimeCreated = @var.Media_workflow_job_locks_time_created,
    ///             },
    ///         },
    ///         MediaWorkflowConfigurationIds = @var.Media_workflow_job_media_workflow_configuration_ids,
    ///         MediaWorkflowId = oci_media_services_media_workflow.Test_media_workflow.Id,
    ///         MediaWorkflowName = oci_media_services_media_workflow.Test_media_workflow.Name,
    ///         Parameters = @var.Media_workflow_job_parameters,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// MediaWorkflowJobs can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:MediaServices/mediaWorkflowJob:MediaWorkflowJob test_media_workflow_job "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:MediaServices/mediaWorkflowJob:MediaWorkflowJob")]
    public partial class MediaWorkflowJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        [Output("isLockOverride")]
        public Output<bool> IsLockOverride { get; private set; } = null!;

        /// <summary>
        /// The lifecycle details of MediaWorkflowJob task.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        [Output("locks")]
        public Output<ImmutableArray<Outputs.MediaWorkflowJobLock>> Locks { get; private set; } = null!;

        /// <summary>
        /// Configurations to be applied to this run of the workflow.
        /// </summary>
        [Output("mediaWorkflowConfigurationIds")]
        public Output<ImmutableArray<string>> MediaWorkflowConfigurationIds { get; private set; } = null!;

        /// <summary>
        /// OCID of the MediaWorkflow that should be run.
        /// </summary>
        [Output("mediaWorkflowId")]
        public Output<string> MediaWorkflowId { get; private set; } = null!;

        /// <summary>
        /// Name of the system MediaWorkflow that should be run.
        /// </summary>
        [Output("mediaWorkflowName")]
        public Output<string> MediaWorkflowName { get; private set; } = null!;

        /// <summary>
        /// A list of JobOutput for the workflowJob.
        /// </summary>
        [Output("outputs")]
        public Output<ImmutableArray<Outputs.MediaWorkflowJobOutput>> Outputs { get; private set; } = null!;

        /// <summary>
        /// Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow's MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON. The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task's key and the 2nd level keys refer to a parameter's name.
        /// </summary>
        [Output("parameters")]
        public Output<string> Parameters { get; private set; } = null!;

        /// <summary>
        /// A JSON representation of the job as it will be run by the system. All the task declarations, configurations and parameters are merged. Parameter values are all fully resolved.
        /// </summary>
        [Output("runnable")]
        public Output<string> Runnable { get; private set; } = null!;

        /// <summary>
        /// The current state of the MediaWorkflowJob task.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// Status of each task.
        /// </summary>
        [Output("taskLifecycleStates")]
        public Output<ImmutableArray<Outputs.MediaWorkflowJobTaskLifecycleState>> TaskLifecycleStates { get; private set; } = null!;

        /// <summary>
        /// When the lock was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// Time when the job finished. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeEnded")]
        public Output<string> TimeEnded { get; private set; } = null!;

        /// <summary>
        /// Time when the job started to execute. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeStarted")]
        public Output<string> TimeStarted { get; private set; } = null!;

        /// <summary>
        /// Updated time of the job. An RFC3339 formatted datetime string.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// Discriminate identification of a workflow by name versus a workflow by ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("workflowIdentifierType")]
        public Output<string> WorkflowIdentifierType { get; private set; } = null!;


        /// <summary>
        /// Create a MediaWorkflowJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MediaWorkflowJob(string name, MediaWorkflowJobArgs args, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaWorkflowJob:MediaWorkflowJob", name, args ?? new MediaWorkflowJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MediaWorkflowJob(string name, Input<string> id, MediaWorkflowJobState? state = null, CustomResourceOptions? options = null)
            : base("oci:MediaServices/mediaWorkflowJob:MediaWorkflowJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MediaWorkflowJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MediaWorkflowJob Get(string name, Input<string> id, MediaWorkflowJobState? state = null, CustomResourceOptions? options = null)
        {
            return new MediaWorkflowJob(name, id, state, options);
        }
    }

    public sealed class MediaWorkflowJobArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaWorkflowJobLockArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaWorkflowJobLockArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaWorkflowJobLockArgs>());
            set => _locks = value;
        }

        [Input("mediaWorkflowConfigurationIds")]
        private InputList<string>? _mediaWorkflowConfigurationIds;

        /// <summary>
        /// Configurations to be applied to this run of the workflow.
        /// </summary>
        public InputList<string> MediaWorkflowConfigurationIds
        {
            get => _mediaWorkflowConfigurationIds ?? (_mediaWorkflowConfigurationIds = new InputList<string>());
            set => _mediaWorkflowConfigurationIds = value;
        }

        /// <summary>
        /// OCID of the MediaWorkflow that should be run.
        /// </summary>
        [Input("mediaWorkflowId")]
        public Input<string>? MediaWorkflowId { get; set; }

        /// <summary>
        /// Name of the system MediaWorkflow that should be run.
        /// </summary>
        [Input("mediaWorkflowName")]
        public Input<string>? MediaWorkflowName { get; set; }

        /// <summary>
        /// Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow's MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON. The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task's key and the 2nd level keys refer to a parameter's name.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// Discriminate identification of a workflow by name versus a workflow by ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("workflowIdentifierType", required: true)]
        public Input<string> WorkflowIdentifierType { get; set; } = null!;

        public MediaWorkflowJobArgs()
        {
        }
        public static new MediaWorkflowJobArgs Empty => new MediaWorkflowJobArgs();
    }

    public sealed class MediaWorkflowJobState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The compartment ID of the lock.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Name of the Media Workflow Job. Does not have to be unique. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("isLockOverride")]
        public Input<bool>? IsLockOverride { get; set; }

        /// <summary>
        /// The lifecycle details of MediaWorkflowJob task.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        [Input("locks")]
        private InputList<Inputs.MediaWorkflowJobLockGetArgs>? _locks;

        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public InputList<Inputs.MediaWorkflowJobLockGetArgs> Locks
        {
            get => _locks ?? (_locks = new InputList<Inputs.MediaWorkflowJobLockGetArgs>());
            set => _locks = value;
        }

        [Input("mediaWorkflowConfigurationIds")]
        private InputList<string>? _mediaWorkflowConfigurationIds;

        /// <summary>
        /// Configurations to be applied to this run of the workflow.
        /// </summary>
        public InputList<string> MediaWorkflowConfigurationIds
        {
            get => _mediaWorkflowConfigurationIds ?? (_mediaWorkflowConfigurationIds = new InputList<string>());
            set => _mediaWorkflowConfigurationIds = value;
        }

        /// <summary>
        /// OCID of the MediaWorkflow that should be run.
        /// </summary>
        [Input("mediaWorkflowId")]
        public Input<string>? MediaWorkflowId { get; set; }

        /// <summary>
        /// Name of the system MediaWorkflow that should be run.
        /// </summary>
        [Input("mediaWorkflowName")]
        public Input<string>? MediaWorkflowName { get; set; }

        [Input("outputs")]
        private InputList<Inputs.MediaWorkflowJobOutputGetArgs>? _outputs;

        /// <summary>
        /// A list of JobOutput for the workflowJob.
        /// </summary>
        public InputList<Inputs.MediaWorkflowJobOutputGetArgs> Outputs
        {
            get => _outputs ?? (_outputs = new InputList<Inputs.MediaWorkflowJobOutputGetArgs>());
            set => _outputs = value;
        }

        /// <summary>
        /// Parameters that override parameters specified in MediaWorkflowTaskDeclarations, the MediaWorkflow, the MediaWorkflow's MediaWorkflowConfigurations and the MediaWorkflowConfigurations of this MediaWorkflowJob. The parameters are given as JSON. The top level and 2nd level elements must be JSON objects (vs arrays, scalars, etc). The top level keys refer to a task's key and the 2nd level keys refer to a parameter's name.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// A JSON representation of the job as it will be run by the system. All the task declarations, configurations and parameters are merged. Parameter values are all fully resolved.
        /// </summary>
        [Input("runnable")]
        public Input<string>? Runnable { get; set; }

        /// <summary>
        /// The current state of the MediaWorkflowJob task.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        [Input("taskLifecycleStates")]
        private InputList<Inputs.MediaWorkflowJobTaskLifecycleStateGetArgs>? _taskLifecycleStates;

        /// <summary>
        /// Status of each task.
        /// </summary>
        public InputList<Inputs.MediaWorkflowJobTaskLifecycleStateGetArgs> TaskLifecycleStates
        {
            get => _taskLifecycleStates ?? (_taskLifecycleStates = new InputList<Inputs.MediaWorkflowJobTaskLifecycleStateGetArgs>());
            set => _taskLifecycleStates = value;
        }

        /// <summary>
        /// When the lock was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// Time when the job finished. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeEnded")]
        public Input<string>? TimeEnded { get; set; }

        /// <summary>
        /// Time when the job started to execute. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeStarted")]
        public Input<string>? TimeStarted { get; set; }

        /// <summary>
        /// Updated time of the job. An RFC3339 formatted datetime string.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// Discriminate identification of a workflow by name versus a workflow by ID.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("workflowIdentifierType")]
        public Input<string>? WorkflowIdentifierType { get; set; }

        public MediaWorkflowJobState()
        {
        }
        public static new MediaWorkflowJobState Empty => new MediaWorkflowJobState();
    }
}
