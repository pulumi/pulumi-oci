// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices.Outputs
{

    [OutputType]
    public sealed class GetMediaAssetsMediaAssetCollectionItemResult
    {
        /// <summary>
        /// Filter MediaAsset by the bucket where the object is stored.
        /// </summary>
        public readonly string Bucket;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        public readonly bool IsLockOverride;
        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemLockResult> Locks;
        /// <summary>
        /// Unique MediaAsset identifier of the first asset upload.
        /// </summary>
        public readonly string MasterMediaAssetId;
        /// <summary>
        /// List of tags for the MediaAsset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult> MediaAssetTags;
        /// <summary>
        /// The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
        /// </summary>
        public readonly string MediaWorkflowJobId;
        /// <summary>
        /// JSON string containing the technial metadata for the media asset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemMetadataResult> Metadatas;
        /// <summary>
        /// The object storage namespace where this asset is located.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Filter MediaAsset by the name of the object in object storage.
        /// </summary>
        public readonly string Object;
        /// <summary>
        /// eTag of the underlying object storage object.
        /// </summary>
        public readonly string ObjectEtag;
        /// <summary>
        /// Unique MediaAsset identifier of the asset from which this asset is derived.
        /// </summary>
        public readonly string ParentMediaAssetId;
        /// <summary>
        /// The end index of video segment files.
        /// </summary>
        public readonly string SegmentRangeEndIndex;
        /// <summary>
        /// The start index for video segment files.
        /// </summary>
        public readonly string SegmentRangeStartIndex;
        /// <summary>
        /// The ID of the MediaWorkflow used to produce this asset.
        /// </summary>
        public readonly string SourceMediaWorkflowId;
        /// <summary>
        /// The version of the MediaWorkflow used to produce this asset.
        /// </summary>
        public readonly string SourceMediaWorkflowVersion;
        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time when the MediaAsset was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the MediaAsset was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// Filter MediaAsset by the asset type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetMediaAssetsMediaAssetCollectionItemResult(
            string bucket,

            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isLockOverride,

            ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemLockResult> locks,

            string masterMediaAssetId,

            ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemMediaAssetTagResult> mediaAssetTags,

            string mediaWorkflowJobId,

            ImmutableArray<Outputs.GetMediaAssetsMediaAssetCollectionItemMetadataResult> metadatas,

            string @namespace,

            string @object,

            string objectEtag,

            string parentMediaAssetId,

            string segmentRangeEndIndex,

            string segmentRangeStartIndex,

            string sourceMediaWorkflowId,

            string sourceMediaWorkflowVersion,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            string type)
        {
            Bucket = bucket;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsLockOverride = isLockOverride;
            Locks = locks;
            MasterMediaAssetId = masterMediaAssetId;
            MediaAssetTags = mediaAssetTags;
            MediaWorkflowJobId = mediaWorkflowJobId;
            Metadatas = metadatas;
            Namespace = @namespace;
            Object = @object;
            ObjectEtag = objectEtag;
            ParentMediaAssetId = parentMediaAssetId;
            SegmentRangeEndIndex = segmentRangeEndIndex;
            SegmentRangeStartIndex = segmentRangeStartIndex;
            SourceMediaWorkflowId = sourceMediaWorkflowId;
            SourceMediaWorkflowVersion = sourceMediaWorkflowVersion;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Type = type;
        }
    }
}
