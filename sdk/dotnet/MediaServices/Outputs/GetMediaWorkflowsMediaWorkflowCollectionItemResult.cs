// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MediaServices.Outputs
{

    [OutputType]
    public sealed class GetMediaWorkflowsMediaWorkflowCollectionItemResult
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A filter to return only the resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Unique MediaWorkflow identifier.
        /// </summary>
        public readonly string Id;
        public readonly bool IsLockOverride;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecyleDetails;
        /// <summary>
        /// Locks associated with this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowsMediaWorkflowCollectionItemLockResult> Locks;
        /// <summary>
        /// Configurations to be applied to all the runs of this workflow. Parameters in these configurations are overridden by parameters in the MediaWorkflowConfigurations of the MediaWorkflowJob and the parameters of the MediaWorkflowJob. If the same parameter appears in multiple configurations, the values that appear in the configuration at the highest index will be used.
        /// </summary>
        public readonly ImmutableArray<string> MediaWorkflowConfigurationIds;
        /// <summary>
        /// Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may contain values or references to other parameters.
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// A filter to return only the resources with lifecycleState matching the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The processing to be done in this workflow. Each key of the MediaWorkflowTasks in this array is unique within the array.  The order of the items is preserved from the order of the tasks array in CreateMediaWorkflowDetails or UpdateMediaWorkflowDetails.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult> Tasks;
        /// <summary>
        /// The time when the MediaWorkflow was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when the MediaWorkflow was updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The version of the MediaWorkflow.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetMediaWorkflowsMediaWorkflowCollectionItemResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isLockOverride,

            string lifecyleDetails,

            ImmutableArray<Outputs.GetMediaWorkflowsMediaWorkflowCollectionItemLockResult> locks,

            ImmutableArray<string> mediaWorkflowConfigurationIds,

            string parameters,

            string state,

            ImmutableDictionary<string, string> systemTags,

            ImmutableArray<Outputs.GetMediaWorkflowsMediaWorkflowCollectionItemTaskResult> tasks,

            string timeCreated,

            string timeUpdated,

            string version)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsLockOverride = isLockOverride;
            LifecyleDetails = lifecyleDetails;
            Locks = locks;
            MediaWorkflowConfigurationIds = mediaWorkflowConfigurationIds;
            Parameters = parameters;
            State = state;
            SystemTags = systemTags;
            Tasks = tasks;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Version = version;
        }
    }
}
