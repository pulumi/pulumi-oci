// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation
{
    public static class GetQueries
    {
        /// <summary>
        /// This data source provides the list of Queries in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Returns the saved query list.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testQueries = Oci.MeteringComputation.GetQueries.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetQueriesResult> InvokeAsync(GetQueriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQueriesResult>("oci:MeteringComputation/getQueries:getQueries", args ?? new GetQueriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Queries in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Returns the saved query list.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testQueries = Oci.MeteringComputation.GetQueries.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetQueriesResult> Invoke(GetQueriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQueriesResult>("oci:MeteringComputation/getQueries:getQueries", args ?? new GetQueriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment ID in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetQueriesFilterArgs>? _filters;

        /// <summary>
        /// The filter object for query usage.
        /// </summary>
        public List<Inputs.GetQueriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetQueriesFilterArgs>());
            set => _filters = value;
        }

        public GetQueriesArgs()
        {
        }
        public static new GetQueriesArgs Empty => new GetQueriesArgs();
    }

    public sealed class GetQueriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment ID in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetQueriesFilterInputArgs>? _filters;

        /// <summary>
        /// The filter object for query usage.
        /// </summary>
        public InputList<Inputs.GetQueriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetQueriesFilterInputArgs>());
            set => _filters = value;
        }

        public GetQueriesInvokeArgs()
        {
        }
        public static new GetQueriesInvokeArgs Empty => new GetQueriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetQueriesResult
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The filter object for query usage.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetQueriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of query_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetQueriesQueryCollectionResult> QueryCollections;

        [OutputConstructor]
        private GetQueriesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetQueriesFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetQueriesQueryCollectionResult> queryCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            QueryCollections = queryCollections;
        }
    }
}
