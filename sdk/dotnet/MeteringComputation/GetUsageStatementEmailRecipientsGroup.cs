// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation
{
    public static class GetUsageStatementEmailRecipientsGroup
    {
        /// <summary>
        /// This data source provides details about a specific Usage Statement Email Recipients Group resource in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Return the saved usage statement email recipient group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsageStatementEmailRecipientsGroup = Oci.MeteringComputation.GetUsageStatementEmailRecipientsGroup.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         EmailRecipientsGroupId = testGroup.Id,
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsageStatementEmailRecipientsGroupResult> InvokeAsync(GetUsageStatementEmailRecipientsGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsageStatementEmailRecipientsGroupResult>("oci:MeteringComputation/getUsageStatementEmailRecipientsGroup:getUsageStatementEmailRecipientsGroup", args ?? new GetUsageStatementEmailRecipientsGroupArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Usage Statement Email Recipients Group resource in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Return the saved usage statement email recipient group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsageStatementEmailRecipientsGroup = Oci.MeteringComputation.GetUsageStatementEmailRecipientsGroup.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         EmailRecipientsGroupId = testGroup.Id,
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsageStatementEmailRecipientsGroupResult> Invoke(GetUsageStatementEmailRecipientsGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsageStatementEmailRecipientsGroupResult>("oci:MeteringComputation/getUsageStatementEmailRecipientsGroup:getUsageStatementEmailRecipientsGroup", args ?? new GetUsageStatementEmailRecipientsGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Usage Statement Email Recipients Group resource in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Return the saved usage statement email recipient group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsageStatementEmailRecipientsGroup = Oci.MeteringComputation.GetUsageStatementEmailRecipientsGroup.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         EmailRecipientsGroupId = testGroup.Id,
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsageStatementEmailRecipientsGroupResult> Invoke(GetUsageStatementEmailRecipientsGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsageStatementEmailRecipientsGroupResult>("oci:MeteringComputation/getUsageStatementEmailRecipientsGroup:getUsageStatementEmailRecipientsGroup", args ?? new GetUsageStatementEmailRecipientsGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsageStatementEmailRecipientsGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment ID in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The email recipient group OCID.
        /// </summary>
        [Input("emailRecipientsGroupId", required: true)]
        public string EmailRecipientsGroupId { get; set; } = null!;

        /// <summary>
        /// The UsageStatement Subscription unique OCID.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetUsageStatementEmailRecipientsGroupArgs()
        {
        }
        public static new GetUsageStatementEmailRecipientsGroupArgs Empty => new GetUsageStatementEmailRecipientsGroupArgs();
    }

    public sealed class GetUsageStatementEmailRecipientsGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment ID in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The email recipient group OCID.
        /// </summary>
        [Input("emailRecipientsGroupId", required: true)]
        public Input<string> EmailRecipientsGroupId { get; set; } = null!;

        /// <summary>
        /// The UsageStatement Subscription unique OCID.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetUsageStatementEmailRecipientsGroupInvokeArgs()
        {
        }
        public static new GetUsageStatementEmailRecipientsGroupInvokeArgs Empty => new GetUsageStatementEmailRecipientsGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsageStatementEmailRecipientsGroupResult
    {
        /// <summary>
        /// The customer tenancy OCID.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string EmailRecipientsGroupId;
        /// <summary>
        /// The usage statement email recipients group OCID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of recipient will receive the usage statement email.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsageStatementEmailRecipientsGroupRecipientsListResult> RecipientsLists;
        /// <summary>
        /// The email recipient group lifecycle state.
        /// </summary>
        public readonly string State;
        public readonly string SubscriptionId;

        [OutputConstructor]
        private GetUsageStatementEmailRecipientsGroupResult(
            string compartmentId,

            string emailRecipientsGroupId,

            string id,

            ImmutableArray<Outputs.GetUsageStatementEmailRecipientsGroupRecipientsListResult> recipientsLists,

            string state,

            string subscriptionId)
        {
            CompartmentId = compartmentId;
            EmailRecipientsGroupId = emailRecipientsGroupId;
            Id = id;
            RecipientsLists = recipientsLists;
            State = state;
            SubscriptionId = subscriptionId;
        }
    }
}
