// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation.Inputs
{

    public sealed class ScheduleQueryPropertiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The depth level of the compartment.
        /// </summary>
        [Input("compartmentDepth")]
        public Input<double>? CompartmentDepth { get; set; }

        /// <summary>
        /// Static or dynamic date range `dateRangeType`, which corresponds with type-specific characteristics.
        /// </summary>
        [Input("dateRange", required: true)]
        public Input<Inputs.ScheduleQueryPropertiesDateRangeGetArgs> DateRange { get; set; } = null!;

        /// <summary>
        /// The filter object for query usage.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The usage granularity. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation.   Allowed values are: DAILY MONTHLY
        /// </summary>
        [Input("granularity", required: true)]
        public Input<string> Granularity { get; set; } = null!;

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Aggregate the result by. For example: [ "tagNamespace", "tagKey", "tagValue", "service", "skuName", "skuPartNumber", "unit", "compartmentName", "compartmentPath", "compartmentId", "platform", "region", "logicalAd", "resourceId", "tenantId", "tenantName" ]
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("groupByTags")]
        private InputList<Inputs.ScheduleQueryPropertiesGroupByTagGetArgs>? _groupByTags;

        /// <summary>
        /// GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: [ { "namespace": "oracle", "key": "createdBy" ]
        /// </summary>
        public InputList<Inputs.ScheduleQueryPropertiesGroupByTagGetArgs> GroupByTags
        {
            get => _groupByTags ?? (_groupByTags = new InputList<Inputs.ScheduleQueryPropertiesGroupByTagGetArgs>());
            set => _groupByTags = value;
        }

        /// <summary>
        /// Specifies whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
        /// </summary>
        [Input("isAggregateByTime")]
        public Input<bool>? IsAggregateByTime { get; set; }

        /// <summary>
        /// The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data.  Allowed values are: USAGE COST USAGE_AND_COST
        /// </summary>
        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        public ScheduleQueryPropertiesGetArgs()
        {
        }
    }
}
