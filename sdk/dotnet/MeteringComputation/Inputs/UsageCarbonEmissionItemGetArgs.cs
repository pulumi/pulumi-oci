// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation.Inputs
{

    public sealed class UsageCarbonEmissionItemGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The availability domain of the usage.
        /// </summary>
        [Input("ad")]
        public Input<string>? Ad { get; set; }

        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The compartment name.
        /// </summary>
        [Input("compartmentName")]
        public Input<string>? CompartmentName { get; set; }

        /// <summary>
        /// The compartment path, starting from root.
        /// </summary>
        [Input("compartmentPath")]
        public Input<string>? CompartmentPath { get; set; }

        /// <summary>
        /// The carbon emission usage in MTCO2 units.
        /// </summary>
        [Input("computedCarbonEmission")]
        public Input<double>? ComputedCarbonEmission { get; set; }

        /// <summary>
        /// Specifies the method used for emission calculation, such as POWER_BASED or SPEND_BASED
        /// </summary>
        [Input("emissionCalculationMethod")]
        public Input<string>? EmissionCalculationMethod { get; set; }

        /// <summary>
        /// Specifies the type of emission, such as MARKET_BASED or LOCATION_BASED.
        /// </summary>
        [Input("emissionType")]
        public Input<string>? EmissionType { get; set; }

        /// <summary>
        /// Platform for the cost.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// The region of the usage.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The resource OCID that is incurring the cost.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The resource name that is incurring the cost.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// The service name that is incurring the cost.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The SKU friendly name.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// The SKU part number.
        /// </summary>
        [Input("skuPartNumber")]
        public Input<string>? SkuPartNumber { get; set; }

        /// <summary>
        /// The subscription ID.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        [Input("tags")]
        private InputList<Inputs.UsageCarbonEmissionItemTagGetArgs>? _tags;

        /// <summary>
        /// For grouping, a tag definition. For filtering, a definition and key.
        /// </summary>
        public InputList<Inputs.UsageCarbonEmissionItemTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.UsageCarbonEmissionItemTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Tenant ID.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The tenancy name.
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// The usage end time.
        /// </summary>
        [Input("timeUsageEnded")]
        public Input<string>? TimeUsageEnded { get; set; }

        /// <summary>
        /// The usage start time.
        /// </summary>
        [Input("timeUsageStarted")]
        public Input<string>? TimeUsageStarted { get; set; }

        public UsageCarbonEmissionItemGetArgs()
        {
        }
        public static new UsageCarbonEmissionItemGetArgs Empty => new UsageCarbonEmissionItemGetArgs();
    }
}
