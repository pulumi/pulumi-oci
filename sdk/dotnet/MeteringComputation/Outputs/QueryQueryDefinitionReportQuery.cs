// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation.Outputs
{

    [OutputType]
    public sealed class QueryQueryDefinitionReportQuery
    {
        /// <summary>
        /// (Updatable) The compartment depth level.
        /// </summary>
        public readonly double? CompartmentDepth;
        /// <summary>
        /// (Updatable) The UI date range, for example, LAST_THREE_MONTHS. Conflicts with timeUsageStarted and timeUsageEnded.
        /// </summary>
        public readonly string? DateRangeName;
        /// <summary>
        /// (Updatable)
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// (Updatable) Forecast configuration of usage/cost.
        /// </summary>
        public readonly Outputs.QueryQueryDefinitionReportQueryForecast? Forecast;
        /// <summary>
        /// (Updatable) The usage granularity. HOURLY - Hourly data aggregation. DAILY - Daily data aggregation. MONTHLY - Monthly data aggregation. TOTAL - Not yet supported.
        /// </summary>
        public readonly string Granularity;
        /// <summary>
        /// (Updatable) Aggregate the result by. example: `["tagNamespace", "tagKey", "tagValue", "service", "skuName", "skuPartNumber", "unit", "compartmentName", "compartmentPath", "compartmentId", "platform", "region", "logicalAd", "resourceId", "tenantId", "tenantName"]`
        /// </summary>
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// (Updatable) GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{"namespace":"oracle", "key":"createdBy"]`
        /// </summary>
        public readonly ImmutableArray<Outputs.QueryQueryDefinitionReportQueryGroupByTag> GroupByTags;
        /// <summary>
        /// (Updatable) Whether aggregated by time. If isAggregateByTime is true, all usage/cost over the query time period will be added up.
        /// </summary>
        public readonly bool? IsAggregateByTime;
        /// <summary>
        /// (Updatable) The query usage type. COST by default if it is missing. Usage - Query the usage data. Cost - Query the cost/billing data. Credit - Query the credit adjustments data. ExpiredCredit - Query the expired credits data AllCredit - Query the credit adjustments and expired credit
        /// </summary>
        public readonly string? QueryType;
        /// <summary>
        /// (Updatable) Tenant ID.
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// (Updatable) The usage end time.
        /// </summary>
        public readonly string? TimeUsageEnded;
        /// <summary>
        /// (Updatable) The usage start time.
        /// </summary>
        public readonly string? TimeUsageStarted;

        [OutputConstructor]
        private QueryQueryDefinitionReportQuery(
            double? compartmentDepth,

            string? dateRangeName,

            string? filter,

            Outputs.QueryQueryDefinitionReportQueryForecast? forecast,

            string granularity,

            ImmutableArray<string> groupBies,

            ImmutableArray<Outputs.QueryQueryDefinitionReportQueryGroupByTag> groupByTags,

            bool? isAggregateByTime,

            string? queryType,

            string tenantId,

            string? timeUsageEnded,

            string? timeUsageStarted)
        {
            CompartmentDepth = compartmentDepth;
            DateRangeName = dateRangeName;
            Filter = filter;
            Forecast = forecast;
            Granularity = granularity;
            GroupBies = groupBies;
            GroupByTags = groupByTags;
            IsAggregateByTime = isAggregateByTime;
            QueryType = queryType;
            TenantId = tenantId;
            TimeUsageEnded = timeUsageEnded;
            TimeUsageStarted = timeUsageStarted;
        }
    }
}
