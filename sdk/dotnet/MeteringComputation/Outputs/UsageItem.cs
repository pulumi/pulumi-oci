// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation.Outputs
{

    [OutputType]
    public sealed class UsageItem
    {
        /// <summary>
        /// The availability domain of the usage.
        /// </summary>
        public readonly string? Ad;
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The compartment name.
        /// </summary>
        public readonly string? CompartmentName;
        /// <summary>
        /// The compartment path, starting from root.
        /// </summary>
        public readonly string? CompartmentPath;
        /// <summary>
        /// The computed cost.
        /// </summary>
        public readonly double? ComputedAmount;
        /// <summary>
        /// The usage number.
        /// </summary>
        public readonly double? ComputedQuantity;
        /// <summary>
        /// The price currency.
        /// </summary>
        public readonly string? Currency;
        /// <summary>
        /// The discretionary discount applied to the SKU.
        /// </summary>
        public readonly double? Discount;
        /// <summary>
        /// The forecasted data.
        /// </summary>
        public readonly bool? IsForecast;
        /// <summary>
        /// The SKU list rate (not discount).
        /// </summary>
        public readonly double? ListRate;
        /// <summary>
        /// The overage usage.
        /// </summary>
        public readonly string? Overage;
        /// <summary>
        /// The SPM OverageFlag.
        /// </summary>
        public readonly string? OveragesFlag;
        /// <summary>
        /// Platform for the cost.
        /// </summary>
        public readonly string? Platform;
        /// <summary>
        /// The region of the usage.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The resource OCID that is incurring the cost.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The resource name that is incurring the cost.
        /// </summary>
        public readonly string? ResourceName;
        /// <summary>
        /// The service name that is incurring the cost.
        /// </summary>
        public readonly string? Service;
        /// <summary>
        /// The resource shape.
        /// </summary>
        public readonly string? Shape;
        /// <summary>
        /// The SKU friendly name.
        /// </summary>
        public readonly string? SkuName;
        /// <summary>
        /// The SKU part number.
        /// </summary>
        public readonly string? SkuPartNumber;
        /// <summary>
        /// The subscription ID.
        /// </summary>
        public readonly string? SubscriptionId;
        /// <summary>
        /// For grouping, a tag definition. For filtering, a definition and key.
        /// </summary>
        public readonly ImmutableArray<Outputs.UsageItemTag> Tags;
        /// <summary>
        /// Tenant ID.
        /// </summary>
        public readonly string? TenantId;
        /// <summary>
        /// The tenancy name.
        /// </summary>
        public readonly string? TenantName;
        /// <summary>
        /// The usage end time.
        /// </summary>
        public readonly string? TimeUsageEnded;
        /// <summary>
        /// The usage start time.
        /// </summary>
        public readonly string? TimeUsageStarted;
        /// <summary>
        /// The usage unit.
        /// </summary>
        public readonly string? Unit;
        /// <summary>
        /// The price per unit.
        /// </summary>
        public readonly double? UnitPrice;
        /// <summary>
        /// The resource size being metered.
        /// </summary>
        public readonly double? Weight;

        [OutputConstructor]
        private UsageItem(
            string? ad,

            string? compartmentId,

            string? compartmentName,

            string? compartmentPath,

            double? computedAmount,

            double? computedQuantity,

            string? currency,

            double? discount,

            bool? isForecast,

            double? listRate,

            string? overage,

            string? overagesFlag,

            string? platform,

            string? region,

            string? resourceId,

            string? resourceName,

            string? service,

            string? shape,

            string? skuName,

            string? skuPartNumber,

            string? subscriptionId,

            ImmutableArray<Outputs.UsageItemTag> tags,

            string? tenantId,

            string? tenantName,

            string? timeUsageEnded,

            string? timeUsageStarted,

            string? unit,

            double? unitPrice,

            double? weight)
        {
            Ad = ad;
            CompartmentId = compartmentId;
            CompartmentName = compartmentName;
            CompartmentPath = compartmentPath;
            ComputedAmount = computedAmount;
            ComputedQuantity = computedQuantity;
            Currency = currency;
            Discount = discount;
            IsForecast = isForecast;
            ListRate = listRate;
            Overage = overage;
            OveragesFlag = overagesFlag;
            Platform = platform;
            Region = region;
            ResourceId = resourceId;
            ResourceName = resourceName;
            Service = service;
            Shape = shape;
            SkuName = skuName;
            SkuPartNumber = skuPartNumber;
            SubscriptionId = subscriptionId;
            Tags = tags;
            TenantId = tenantId;
            TenantName = tenantName;
            TimeUsageEnded = timeUsageEnded;
            TimeUsageStarted = timeUsageStarted;
            Unit = unit;
            UnitPrice = unitPrice;
            Weight = weight;
        }
    }
}
