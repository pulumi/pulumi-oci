// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation
{
    /// <summary>
    /// This resource provides the Query resource in Oracle Cloud Infrastructure Metering Computation service.
    /// 
    /// Returns the created query.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testQuery = new Oci.MeteringComputation.Query("testQuery", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         QueryDefinition = new Oci.MeteringComputation.Inputs.QueryQueryDefinitionArgs
    ///         {
    ///             CostAnalysisUi = new Oci.MeteringComputation.Inputs.QueryQueryDefinitionCostAnalysisUiArgs
    ///             {
    ///                 Graph = @var.Query_query_definition_cost_analysis_ui_graph,
    ///                 IsCumulativeGraph = @var.Query_query_definition_cost_analysis_ui_is_cumulative_graph,
    ///             },
    ///             DisplayName = @var.Query_query_definition_display_name,
    ///             ReportQuery = new Oci.MeteringComputation.Inputs.QueryQueryDefinitionReportQueryArgs
    ///             {
    ///                 Granularity = @var.Query_query_definition_report_query_granularity,
    ///                 TenantId = oci_metering_computation_tenant.Test_tenant.Id,
    ///                 CompartmentDepth = @var.Query_query_definition_report_query_compartment_depth,
    ///                 DateRangeName = @var.Query_query_definition_report_query_date_range_name,
    ///                 Filter = @var.Query_query_definition_report_query_filter,
    ///                 Forecast = new Oci.MeteringComputation.Inputs.QueryQueryDefinitionReportQueryForecastArgs
    ///                 {
    ///                     TimeForecastEnded = @var.Query_query_definition_report_query_forecast_time_forecast_ended,
    ///                     ForecastType = @var.Query_query_definition_report_query_forecast_forecast_type,
    ///                     TimeForecastStarted = @var.Query_query_definition_report_query_forecast_time_forecast_started,
    ///                 },
    ///                 GroupBies = @var.Query_query_definition_report_query_group_by,
    ///                 GroupByTags = new[]
    ///                 {
    ///                     new Oci.MeteringComputation.Inputs.QueryQueryDefinitionReportQueryGroupByTagArgs
    ///                     {
    ///                         Key = @var.Query_query_definition_report_query_group_by_tag_key,
    ///                         Namespace = @var.Query_query_definition_report_query_group_by_tag_namespace,
    ///                         Value = @var.Query_query_definition_report_query_group_by_tag_value,
    ///                     },
    ///                 },
    ///                 IsAggregateByTime = @var.Query_query_definition_report_query_is_aggregate_by_time,
    ///                 QueryType = @var.Query_query_definition_report_query_query_type,
    ///                 TimeUsageEnded = @var.Query_query_definition_report_query_time_usage_ended,
    ///                 TimeUsageStarted = @var.Query_query_definition_report_query_time_usage_started,
    ///             },
    ///             Version = @var.Query_query_definition_version,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Queries can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:MeteringComputation/query:Query test_query "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:MeteringComputation/query:Query")]
    public partial class Query : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Output("queryDefinition")]
        public Output<Outputs.QueryQueryDefinition> QueryDefinition { get; private set; } = null!;


        /// <summary>
        /// Create a Query resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Query(string name, QueryArgs args, CustomResourceOptions? options = null)
            : base("oci:MeteringComputation/query:Query", name, args ?? new QueryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Query(string name, Input<string> id, QueryState? state = null, CustomResourceOptions? options = null)
            : base("oci:MeteringComputation/query:Query", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Query resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Query Get(string name, Input<string> id, QueryState? state = null, CustomResourceOptions? options = null)
        {
            return new Query(name, id, state, options);
        }
    }

    public sealed class QueryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Input("queryDefinition", required: true)]
        public Input<Inputs.QueryQueryDefinitionArgs> QueryDefinition { get; set; } = null!;

        public QueryArgs()
        {
        }
        public static new QueryArgs Empty => new QueryArgs();
    }

    public sealed class QueryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Input("queryDefinition")]
        public Input<Inputs.QueryQueryDefinitionGetArgs>? QueryDefinition { get; set; }

        public QueryState()
        {
        }
        public static new QueryState Empty => new QueryState();
    }
}
