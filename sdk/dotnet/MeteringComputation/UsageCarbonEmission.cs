// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.MeteringComputation
{
    /// <summary>
    /// This resource provides the Usage Carbon Emission resource in Oracle Cloud Infrastructure Metering Computation service.
    /// 
    /// Returns usage carbon emission for the given account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testUsageCarbonEmission = new Oci.MeteringComputation.UsageCarbonEmission("testUsageCarbonEmission", new()
    ///     {
    ///         TenantId = oci_metering_computation_tenant.Test_tenant.Id,
    ///         TimeUsageEnded = @var.Usage_carbon_emission_time_usage_ended,
    ///         TimeUsageStarted = @var.Usage_carbon_emission_time_usage_started,
    ///         CompartmentDepth = @var.Usage_carbon_emission_compartment_depth,
    ///         GroupBies = @var.Usage_carbon_emission_group_by,
    ///         GroupByTags = new[]
    ///         {
    ///             new Oci.MeteringComputation.Inputs.UsageCarbonEmissionGroupByTagArgs
    ///             {
    ///                 Key = @var.Usage_carbon_emission_group_by_tag_key,
    ///                 Namespace = @var.Usage_carbon_emission_group_by_tag_namespace,
    ///                 Value = @var.Usage_carbon_emission_group_by_tag_value,
    ///             },
    ///         },
    ///         IsAggregateByTime = @var.Usage_carbon_emission_is_aggregate_by_time,
    ///         UsageCarbonEmissionFilter = @var.Usage_carbon_emission_usage_carbon_emission_filter,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// UsageCarbonEmissions can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission test_usage_carbon_emission "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission")]
    public partial class UsageCarbonEmission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The compartment depth level.
        /// </summary>
        [Output("compartmentDepth")]
        public Output<int> CompartmentDepth { get; private set; } = null!;

        /// <summary>
        /// Aggregate the result by. For example: `["tagNamespace", "tagKey", "tagValue", "service", "skuName", "skuPartNumber", "unit", "compartmentName", "compartmentPath", "compartmentId", "platform", "region", "logicalAd", "resourceId", "resourceName", "tenantId", "tenantName", "subscriptionId"]`
        /// </summary>
        [Output("groupBies")]
        public Output<ImmutableArray<string>> GroupBies { get; private set; } = null!;

        /// <summary>
        /// GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{"namespace":"oracle", "key":"createdBy"]`
        /// </summary>
        [Output("groupByTags")]
        public Output<ImmutableArray<Outputs.UsageCarbonEmissionGroupByTag>> GroupByTags { get; private set; } = null!;

        /// <summary>
        /// Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
        /// </summary>
        [Output("isAggregateByTime")]
        public Output<bool> IsAggregateByTime { get; private set; } = null!;

        /// <summary>
        /// A list of usage carbon emission items.
        /// </summary>
        [Output("items")]
        public Output<ImmutableArray<Outputs.UsageCarbonEmissionItem>> Items { get; private set; } = null!;

        /// <summary>
        /// Tenant ID.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// The usage end time.
        /// </summary>
        [Output("timeUsageEnded")]
        public Output<string> TimeUsageEnded { get; private set; } = null!;

        /// <summary>
        /// The usage start time.
        /// </summary>
        [Output("timeUsageStarted")]
        public Output<string> TimeUsageStarted { get; private set; } = null!;

        /// <summary>
        /// The filter object for query usage.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("usageCarbonEmissionFilter")]
        public Output<string> UsageCarbonEmissionFilter { get; private set; } = null!;


        /// <summary>
        /// Create a UsageCarbonEmission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UsageCarbonEmission(string name, UsageCarbonEmissionArgs args, CustomResourceOptions? options = null)
            : base("oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission", name, args ?? new UsageCarbonEmissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UsageCarbonEmission(string name, Input<string> id, UsageCarbonEmissionState? state = null, CustomResourceOptions? options = null)
            : base("oci:MeteringComputation/usageCarbonEmission:UsageCarbonEmission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UsageCarbonEmission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UsageCarbonEmission Get(string name, Input<string> id, UsageCarbonEmissionState? state = null, CustomResourceOptions? options = null)
        {
            return new UsageCarbonEmission(name, id, state, options);
        }
    }

    public sealed class UsageCarbonEmissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment depth level.
        /// </summary>
        [Input("compartmentDepth")]
        public Input<int>? CompartmentDepth { get; set; }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Aggregate the result by. For example: `["tagNamespace", "tagKey", "tagValue", "service", "skuName", "skuPartNumber", "unit", "compartmentName", "compartmentPath", "compartmentId", "platform", "region", "logicalAd", "resourceId", "resourceName", "tenantId", "tenantName", "subscriptionId"]`
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("groupByTags")]
        private InputList<Inputs.UsageCarbonEmissionGroupByTagArgs>? _groupByTags;

        /// <summary>
        /// GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{"namespace":"oracle", "key":"createdBy"]`
        /// </summary>
        public InputList<Inputs.UsageCarbonEmissionGroupByTagArgs> GroupByTags
        {
            get => _groupByTags ?? (_groupByTags = new InputList<Inputs.UsageCarbonEmissionGroupByTagArgs>());
            set => _groupByTags = value;
        }

        /// <summary>
        /// Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
        /// </summary>
        [Input("isAggregateByTime")]
        public Input<bool>? IsAggregateByTime { get; set; }

        /// <summary>
        /// Tenant ID.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// The usage end time.
        /// </summary>
        [Input("timeUsageEnded", required: true)]
        public Input<string> TimeUsageEnded { get; set; } = null!;

        /// <summary>
        /// The usage start time.
        /// </summary>
        [Input("timeUsageStarted", required: true)]
        public Input<string> TimeUsageStarted { get; set; } = null!;

        /// <summary>
        /// The filter object for query usage.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("usageCarbonEmissionFilter")]
        public Input<string>? UsageCarbonEmissionFilter { get; set; }

        public UsageCarbonEmissionArgs()
        {
        }
        public static new UsageCarbonEmissionArgs Empty => new UsageCarbonEmissionArgs();
    }

    public sealed class UsageCarbonEmissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment depth level.
        /// </summary>
        [Input("compartmentDepth")]
        public Input<int>? CompartmentDepth { get; set; }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Aggregate the result by. For example: `["tagNamespace", "tagKey", "tagValue", "service", "skuName", "skuPartNumber", "unit", "compartmentName", "compartmentPath", "compartmentId", "platform", "region", "logicalAd", "resourceId", "resourceName", "tenantId", "tenantName", "subscriptionId"]`
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("groupByTags")]
        private InputList<Inputs.UsageCarbonEmissionGroupByTagGetArgs>? _groupByTags;

        /// <summary>
        /// GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list. For example: `[{"namespace":"oracle", "key":"createdBy"]`
        /// </summary>
        public InputList<Inputs.UsageCarbonEmissionGroupByTagGetArgs> GroupByTags
        {
            get => _groupByTags ?? (_groupByTags = new InputList<Inputs.UsageCarbonEmissionGroupByTagGetArgs>());
            set => _groupByTags = value;
        }

        /// <summary>
        /// Specifies whether aggregated by time. If isAggregateByTime is true, all usage carbon emissions over the query time period will be added up.
        /// </summary>
        [Input("isAggregateByTime")]
        public Input<bool>? IsAggregateByTime { get; set; }

        [Input("items")]
        private InputList<Inputs.UsageCarbonEmissionItemGetArgs>? _items;

        /// <summary>
        /// A list of usage carbon emission items.
        /// </summary>
        public InputList<Inputs.UsageCarbonEmissionItemGetArgs> Items
        {
            get => _items ?? (_items = new InputList<Inputs.UsageCarbonEmissionItemGetArgs>());
            set => _items = value;
        }

        /// <summary>
        /// Tenant ID.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The usage end time.
        /// </summary>
        [Input("timeUsageEnded")]
        public Input<string>? TimeUsageEnded { get; set; }

        /// <summary>
        /// The usage start time.
        /// </summary>
        [Input("timeUsageStarted")]
        public Input<string>? TimeUsageStarted { get; set; }

        /// <summary>
        /// The filter object for query usage.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("usageCarbonEmissionFilter")]
        public Input<string>? UsageCarbonEmissionFilter { get; set; }

        public UsageCarbonEmissionState()
        {
        }
        public static new UsageCarbonEmissionState Empty => new UsageCarbonEmissionState();
    }
}
