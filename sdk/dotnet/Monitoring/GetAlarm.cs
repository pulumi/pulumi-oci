// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Monitoring
{
    public static class GetAlarm
    {
        /// <summary>
        /// This data source provides details about a specific Alarm resource in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Gets the specified alarm.
        /// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlarm = Oci.Monitoring.GetAlarm.Invoke(new()
        ///     {
        ///         AlarmId = oci_monitoring_alarm.Test_alarm.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAlarmResult> InvokeAsync(GetAlarmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAlarmResult>("oci:Monitoring/getAlarm:getAlarm", args ?? new GetAlarmArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Alarm resource in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Gets the specified alarm.
        /// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlarm = Oci.Monitoring.GetAlarm.Invoke(new()
        ///     {
        ///         AlarmId = oci_monitoring_alarm.Test_alarm.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAlarmResult> Invoke(GetAlarmInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAlarmResult>("oci:Monitoring/getAlarm:getAlarm", args ?? new GetAlarmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of an alarm.
        /// </summary>
        [Input("alarmId", required: true)]
        public string AlarmId { get; set; } = null!;

        public GetAlarmArgs()
        {
        }
        public static new GetAlarmArgs Empty => new GetAlarmArgs();
    }

    public sealed class GetAlarmInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of an alarm.
        /// </summary>
        [Input("alarmId", required: true)]
        public Input<string> AlarmId { get; set; } = null!;

        public GetAlarmInvokeArgs()
        {
        }
        public static new GetAlarmInvokeArgs Empty => new GetAlarmInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlarmResult
    {
        public readonly string AlarmId;
        /// <summary>
        /// The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A list of destinations to which the notifications for this alarm will be delivered. Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID. Supported destination services: Notifications Service. Limit: One destination per supported destination service.
        /// </summary>
        public readonly ImmutableArray<string> Destinations;
        /// <summary>
        /// A user-friendly name for the alarm. It does not have to be unique, and it's changeable.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the alarm is enabled.  Example: `true`
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// The format to use for notification messages sent from this alarm. The formats are:
        /// </summary>
        public readonly string MessageFormat;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
        /// </summary>
        public readonly string MetricCompartmentId;
        /// <summary>
        /// When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
        /// </summary>
        public readonly bool MetricCompartmentIdInSubtree;
        /// <summary>
        /// The source service or application emitting the metric that is evaluated by the alarm.  Example: `oci_computeagent`
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING". For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING".
        /// </summary>
        public readonly string PendingDuration;
        /// <summary>
        /// The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
        /// </summary>
        public readonly string RepeatNotificationDuration;
        /// <summary>
        /// The time between calculated aggregation windows for the alarm. Supported value: `1m`
        /// </summary>
        public readonly string Resolution;
        /// <summary>
        /// Resource group to match for metric data retrieved by the alarm. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// The current lifecycle state of the alarm.  Example: `DELETED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The configuration details for suppressing an alarm.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmSuppressionResult> Suppressions;
        /// <summary>
        /// The date and time the alarm was created. Format defined by RFC3339.  Example: `2019-02-01T01:02:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2019-02-03T01:02:29.600Z`
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetAlarmResult(
            string alarmId,

            string body,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            ImmutableArray<string> destinations,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isEnabled,

            string messageFormat,

            string metricCompartmentId,

            bool metricCompartmentIdInSubtree,

            string @namespace,

            string pendingDuration,

            string query,

            string repeatNotificationDuration,

            string resolution,

            string resourceGroup,

            string severity,

            string state,

            ImmutableArray<Outputs.GetAlarmSuppressionResult> suppressions,

            string timeCreated,

            string timeUpdated)
        {
            AlarmId = alarmId;
            Body = body;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Destinations = destinations;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsEnabled = isEnabled;
            MessageFormat = messageFormat;
            MetricCompartmentId = metricCompartmentId;
            MetricCompartmentIdInSubtree = metricCompartmentIdInSubtree;
            Namespace = @namespace;
            PendingDuration = pendingDuration;
            Query = query;
            RepeatNotificationDuration = repeatNotificationDuration;
            Resolution = resolution;
            ResourceGroup = resourceGroup;
            Severity = severity;
            State = state;
            Suppressions = suppressions;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
