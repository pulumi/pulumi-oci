// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Monitoring
{
    public static class GetAlarmStatuses
    {
        /// <summary>
        /// This data source provides the list of Alarm Statuses in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// List the status of each alarm in the specified compartment.
        /// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testAlarmStatuses = Output.Create(Oci.Monitoring.GetAlarmStatuses.InvokeAsync(new Oci.Monitoring.GetAlarmStatusesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             CompartmentIdInSubtree = @var.Alarm_status_compartment_id_in_subtree,
        ///             DisplayName = @var.Alarm_status_display_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAlarmStatusesResult> InvokeAsync(GetAlarmStatusesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAlarmStatusesResult>("oci:Monitoring/getAlarmStatuses:getAlarmStatuses", args ?? new GetAlarmStatusesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Alarm Statuses in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// List the status of each alarm in the specified compartment.
        /// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testAlarmStatuses = Output.Create(Oci.Monitoring.GetAlarmStatuses.InvokeAsync(new Oci.Monitoring.GetAlarmStatusesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             CompartmentIdInSubtree = @var.Alarm_status_compartment_id_in_subtree,
        ///             DisplayName = @var.Alarm_status_display_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAlarmStatusesResult> Invoke(GetAlarmStatusesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAlarmStatusesResult>("oci:Monitoring/getAlarmStatuses:getAlarmStatuses", args ?? new GetAlarmStatusesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmStatusesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetAlarmStatusesFilterArgs>? _filters;
        public List<Inputs.GetAlarmStatusesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAlarmStatusesFilterArgs>());
            set => _filters = value;
        }

        public GetAlarmStatusesArgs()
        {
        }
    }

    public sealed class GetAlarmStatusesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given display name exactly. Use this filter to list an alarm by name. Alternatively, when you know the alarm OCID, use the GetAlarm operation.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAlarmStatusesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAlarmStatusesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAlarmStatusesFilterInputArgs>());
            set => _filters = value;
        }

        public GetAlarmStatusesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAlarmStatusesResult
    {
        /// <summary>
        /// The list of alarm_statuses.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmStatusesAlarmStatusResult> AlarmStatuses;
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        /// <summary>
        /// The configured name of the alarm.  Example: `High CPU Utilization`
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetAlarmStatusesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAlarmStatusesResult(
            ImmutableArray<Outputs.GetAlarmStatusesAlarmStatusResult> alarmStatuses,

            string compartmentId,

            bool? compartmentIdInSubtree,

            string? displayName,

            ImmutableArray<Outputs.GetAlarmStatusesFilterResult> filters,

            string id)
        {
            AlarmStatuses = alarmStatuses;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
        }
    }
}
