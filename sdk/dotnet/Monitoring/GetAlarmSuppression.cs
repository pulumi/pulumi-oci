// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Monitoring
{
    public static class GetAlarmSuppression
    {
        /// <summary>
        /// This data source provides details about a specific Alarm Suppression resource in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Gets the specified alarm suppression. For more information, see
        /// [Getting an Alarm-wide Suppression](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
        /// 
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlarmSuppression = Oci.Monitoring.GetAlarmSuppression.Invoke(new()
        ///     {
        ///         AlarmSuppressionId = testAlarmSuppressionOciMonitoringAlarmSuppression.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlarmSuppressionResult> InvokeAsync(GetAlarmSuppressionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlarmSuppressionResult>("oci:Monitoring/getAlarmSuppression:getAlarmSuppression", args ?? new GetAlarmSuppressionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Alarm Suppression resource in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Gets the specified alarm suppression. For more information, see
        /// [Getting an Alarm-wide Suppression](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
        /// 
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlarmSuppression = Oci.Monitoring.GetAlarmSuppression.Invoke(new()
        ///     {
        ///         AlarmSuppressionId = testAlarmSuppressionOciMonitoringAlarmSuppression.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlarmSuppressionResult> Invoke(GetAlarmSuppressionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlarmSuppressionResult>("oci:Monitoring/getAlarmSuppression:getAlarmSuppression", args ?? new GetAlarmSuppressionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Alarm Suppression resource in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Gets the specified alarm suppression. For more information, see
        /// [Getting an Alarm-wide Suppression](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
        /// 
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
        /// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
        /// or transactions, per second (TPS) for a given tenancy.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testAlarmSuppression = Oci.Monitoring.GetAlarmSuppression.Invoke(new()
        ///     {
        ///         AlarmSuppressionId = testAlarmSuppressionOciMonitoringAlarmSuppression.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlarmSuppressionResult> Invoke(GetAlarmSuppressionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlarmSuppressionResult>("oci:Monitoring/getAlarmSuppression:getAlarmSuppression", args ?? new GetAlarmSuppressionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmSuppressionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
        /// </summary>
        [Input("alarmSuppressionId", required: true)]
        public string AlarmSuppressionId { get; set; } = null!;

        public GetAlarmSuppressionArgs()
        {
        }
        public static new GetAlarmSuppressionArgs Empty => new GetAlarmSuppressionArgs();
    }

    public sealed class GetAlarmSuppressionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
        /// </summary>
        [Input("alarmSuppressionId", required: true)]
        public Input<string> AlarmSuppressionId { get; set; } = null!;

        public GetAlarmSuppressionInvokeArgs()
        {
        }
        public static new GetAlarmSuppressionInvokeArgs Empty => new GetAlarmSuppressionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlarmSuppressionResult
    {
        public readonly string AlarmSuppressionId;
        /// <summary>
        /// The target of the alarm suppression.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmSuppressionAlarmSuppressionTargetResult> AlarmSuppressionTargets;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm suppression.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Human-readable reason for this alarm suppression. It does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Configured dimension filter for suppressing alarm state entries that include the set of specified dimension key-value pairs.  Example: `{"resourceId": "instance.region1.phx.exampleuniqueID"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> Dimensions;
        /// <summary>
        /// A user-friendly name for the alarm suppression. It does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm suppression.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The level of this alarm suppression. `ALARM` indicates a suppression of the entire alarm, regardless of dimension. `DIMENSION` indicates a suppression configured for specified dimensions.
        /// </summary>
        public readonly string Level;
        /// <summary>
        /// The current lifecycle state of the alarm suppression.  Example: `DELETED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Array of all preconditions for alarm suppression. Example: `[{ conditionType: "RECURRENCE", suppressionRecurrence: "FRQ=DAILY;BYHOUR=10", suppressionDuration: "PT1H" }]`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmSuppressionSuppressionConditionResult> SuppressionConditions;
        /// <summary>
        /// The date and time the alarm suppression was created. Format defined by RFC3339.  Example: `2018-02-01T01:02:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The start date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: `2018-02-01T01:02:29.600Z`
        /// </summary>
        public readonly string TimeSuppressFrom;
        /// <summary>
        /// The end date and time for the suppression to take place, inclusive. Format defined by RFC3339.  Example: `2018-02-01T02:02:29.600Z`
        /// </summary>
        public readonly string TimeSuppressUntil;
        /// <summary>
        /// The date and time the alarm suppression was last updated (deleted). Format defined by RFC3339.  Example: `2018-02-03T01:02:29.600Z`
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetAlarmSuppressionResult(
            string alarmSuppressionId,

            ImmutableArray<Outputs.GetAlarmSuppressionAlarmSuppressionTargetResult> alarmSuppressionTargets,

            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string description,

            ImmutableDictionary<string, string> dimensions,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string level,

            string state,

            ImmutableArray<Outputs.GetAlarmSuppressionSuppressionConditionResult> suppressionConditions,

            string timeCreated,

            string timeSuppressFrom,

            string timeSuppressUntil,

            string timeUpdated)
        {
            AlarmSuppressionId = alarmSuppressionId;
            AlarmSuppressionTargets = alarmSuppressionTargets;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            Dimensions = dimensions;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            Level = level;
            State = state;
            SuppressionConditions = suppressionConditions;
            TimeCreated = timeCreated;
            TimeSuppressFrom = timeSuppressFrom;
            TimeSuppressUntil = timeSuppressUntil;
            TimeUpdated = timeUpdated;
        }
    }
}
