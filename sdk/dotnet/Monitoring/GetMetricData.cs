// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Monitoring
{
    public static class GetMetricData
    {
        /// <summary>
        /// This data source provides the list of Metric Data in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
        /// For more information, see
        /// [Querying Metric Data](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-landing.htm)
        /// and
        /// [Creating a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric.htm).
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricData = Oci.Monitoring.GetMetricData.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Namespace = metricDataNamespace,
        ///         Query = metricDataQuery,
        ///         CompartmentIdInSubtree = metricDataCompartmentIdInSubtree,
        ///         EndTime = metricDataEndTime,
        ///         Resolution = metricDataResolution,
        ///         ResourceGroup = metricDataResourceGroup,
        ///         StartTime = metricDataStartTime,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMetricDataResult> InvokeAsync(GetMetricDataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricDataResult>("oci:Monitoring/getMetricData:getMetricData", args ?? new GetMetricDataArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Metric Data in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
        /// For more information, see
        /// [Querying Metric Data](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-landing.htm)
        /// and
        /// [Creating a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric.htm).
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricData = Oci.Monitoring.GetMetricData.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Namespace = metricDataNamespace,
        ///         Query = metricDataQuery,
        ///         CompartmentIdInSubtree = metricDataCompartmentIdInSubtree,
        ///         EndTime = metricDataEndTime,
        ///         Resolution = metricDataResolution,
        ///         ResourceGroup = metricDataResourceGroup,
        ///         StartTime = metricDataStartTime,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMetricDataResult> Invoke(GetMetricDataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricDataResult>("oci:Monitoring/getMetricData:getMetricData", args ?? new GetMetricDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricDataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// The end of the time range to use when searching for metric data points. Format is defined by RFC3339. The response excludes metric data points for the endTime. Default value: the timestamp representing when the call was sent.  Example: `2023-02-01T02:02:29.600Z`
        /// </summary>
        [Input("endTime")]
        public string? EndTime { get; set; }

        [Input("filters")]
        private List<Inputs.GetMetricDataFilterArgs>? _filters;
        public List<Inputs.GetMetricDataFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMetricDataFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The source service or application to use when searching for metric data points to aggregate.  Example: `oci_computeagent`
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        /// <summary>
        /// The Monitoring Query Language (MQL) expression to use when searching for metric data points to aggregate. The query must specify a metric, statistic, and interval. Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. When specifying a dimension value, surround it with double quotes, and escape each double quote with a backslash (`\`) character. Supported grouping functions: `grouping()`, `groupBy()`.
        /// 
        /// Construct your query to avoid exceeding limits on returned data. See [MetricData Reference](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData).
        /// 
        /// For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
        /// 
        /// Example 1: `CpuUtilization[1m].sum()`
        /// 
        /// Example 2 (escaped double quotes for value string): `CpuUtilization[1m]{resourceId = \"&lt;var&gt;&amp;lt;instance_OCID&amp;gt;&lt;/var&gt;\"}.max()`
        /// </summary>
        [Input("query", required: true)]
        public string Query { get; set; } = null!;

        /// <summary>
        /// The time between calculated aggregation windows. Use with the query interval to vary the frequency for returning aggregated data points. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m`, `1h`-`24h`, `1d`.  Example: `5m`
        /// </summary>
        [Input("resolution")]
        public string? Resolution { get; set; }

        /// <summary>
        /// Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        [Input("resourceGroup")]
        public string? ResourceGroup { get; set; }

        /// <summary>
        /// The beginning of the time range to use when searching for metric data points. Format is defined by RFC3339. The response includes metric data points for the startTime. Default value: the timestamp 3 hours before the call was sent.  Example: `2023-02-01T01:02:29.600Z`
        /// </summary>
        [Input("startTime")]
        public string? StartTime { get; set; }

        public GetMetricDataArgs()
        {
        }
        public static new GetMetricDataArgs Empty => new GetMetricDataArgs();
    }

    public sealed class GetMetricDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        /// <summary>
        /// The end of the time range to use when searching for metric data points. Format is defined by RFC3339. The response excludes metric data points for the endTime. Default value: the timestamp representing when the call was sent.  Example: `2023-02-01T02:02:29.600Z`
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMetricDataFilterInputArgs>? _filters;
        public InputList<Inputs.GetMetricDataFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMetricDataFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The source service or application to use when searching for metric data points to aggregate.  Example: `oci_computeagent`
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The Monitoring Query Language (MQL) expression to use when searching for metric data points to aggregate. The query must specify a metric, statistic, and interval. Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. When specifying a dimension value, surround it with double quotes, and escape each double quote with a backslash (`\`) character. Supported grouping functions: `grouping()`, `groupBy()`.
        /// 
        /// Construct your query to avoid exceeding limits on returned data. See [MetricData Reference](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData).
        /// 
        /// For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
        /// 
        /// Example 1: `CpuUtilization[1m].sum()`
        /// 
        /// Example 2 (escaped double quotes for value string): `CpuUtilization[1m]{resourceId = \"&lt;var&gt;&amp;lt;instance_OCID&amp;gt;&lt;/var&gt;\"}.max()`
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// The time between calculated aggregation windows. Use with the query interval to vary the frequency for returning aggregated data points. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m`, `1h`-`24h`, `1d`.  Example: `5m`
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// The beginning of the time range to use when searching for metric data points. Format is defined by RFC3339. The response includes metric data points for the startTime. Default value: the timestamp 3 hours before the call was sent.  Example: `2023-02-01T01:02:29.600Z`
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        public GetMetricDataInvokeArgs()
        {
        }
        public static new GetMetricDataInvokeArgs Empty => new GetMetricDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricDataResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources that the aggregated data was returned from.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly string? EndTime;
        public readonly ImmutableArray<Outputs.GetMetricDataFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of metric_data.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricDataMetricDataResult> MetricDatas;
        /// <summary>
        /// The reference provided in a metric definition to indicate the source service or application that emitted the metric.  Example: `oci_computeagent`
        /// </summary>
        public readonly string Namespace;
        public readonly string Query;
        /// <summary>
        /// The time between calculated aggregation windows. Use with the query interval to vary the frequency for returning aggregated data points. For example, use a query interval of 5 minutes with a resolution of 1 minute to retrieve five-minute aggregations at a one-minute frequency. The resolution must be equal or less than the interval in the query. The default resolution is 1m (one minute). Supported values: `1m`-`60m`, `1h`-`24h`, `1d`.  Example: `5m`
        /// </summary>
        public readonly string? Resolution;
        /// <summary>
        /// Resource group provided with the posted metric. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        public readonly string? ResourceGroup;
        public readonly string? StartTime;

        [OutputConstructor]
        private GetMetricDataResult(
            string compartmentId,

            bool? compartmentIdInSubtree,

            string? endTime,

            ImmutableArray<Outputs.GetMetricDataFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetMetricDataMetricDataResult> metricDatas,

            string @namespace,

            string query,

            string? resolution,

            string? resourceGroup,

            string? startTime)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            EndTime = endTime;
            Filters = filters;
            Id = id;
            MetricDatas = metricDatas;
            Namespace = @namespace;
            Query = query;
            Resolution = resolution;
            ResourceGroup = resourceGroup;
            StartTime = startTime;
        }
    }
}
