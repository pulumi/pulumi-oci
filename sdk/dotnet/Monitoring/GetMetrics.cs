// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Monitoring
{
    public static class GetMetrics
    {
        /// <summary>
        /// This data source provides the list of Metrics in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
        /// For more information, see
        /// [Listing Metric Definitions](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/list-metric.htm).
        /// For information about metrics, see
        /// [Metrics Overview](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetrics = Oci.Monitoring.GetMetrics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Metric_compartment_id_in_subtree,
        ///         DimensionFilters = @var.Metric_dimension_filters,
        ///         GroupBies = @var.Metric_group_by,
        ///         Name = @var.Metric_name,
        ///         Namespace = @var.Metric_namespace,
        ///         ResourceGroup = @var.Metric_resource_group,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMetricsResult> InvokeAsync(GetMetricsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricsResult>("oci:Monitoring/getMetrics:getMetrics", args ?? new GetMetricsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Metrics in Oracle Cloud Infrastructure Monitoring service.
        /// 
        /// Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
        /// For more information, see
        /// [Listing Metric Definitions](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/list-metric.htm).
        /// For information about metrics, see
        /// [Metrics Overview](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
        /// For important limits information, see
        /// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
        /// 
        /// Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetrics = Oci.Monitoring.GetMetrics.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Metric_compartment_id_in_subtree,
        ///         DimensionFilters = @var.Metric_dimension_filters,
        ///         GroupBies = @var.Metric_group_by,
        ///         Name = @var.Metric_name,
        ///         Namespace = @var.Metric_namespace,
        ///         ResourceGroup = @var.Metric_resource_group,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMetricsResult> Invoke(GetMetricsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricsResult>("oci:Monitoring/getMetrics:getMetrics", args ?? new GetMetricsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("dimensionFilters")]
        private Dictionary<string, object>? _dimensionFilters;

        /// <summary>
        /// Qualifiers that you want to use when searching for metric definitions. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{"resourceId": "instance.region1.phx.exampleuniqueID"}`
        /// </summary>
        public Dictionary<string, object> DimensionFilters
        {
            get => _dimensionFilters ?? (_dimensionFilters = new Dictionary<string, object>());
            set => _dimensionFilters = value;
        }

        [Input("filters")]
        private List<Inputs.GetMetricsFilterArgs>? _filters;
        public List<Inputs.GetMetricsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMetricsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private List<string>? _groupBies;

        /// <summary>
        /// Group metrics by these fields in the response. For example, to list all metric namespaces available in a compartment, groupBy the "namespace" field. Supported fields: namespace, name, resourceGroup. If `groupBy` is used, then `dimensionFilters` is ignored.
        /// 
        /// Example - group by namespace: `[ "namespace" ]`
        /// </summary>
        public List<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new List<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The metric name to use when searching for metric definitions.  Example: `CpuUtilization`
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The source service or application to use when searching for metric definitions.  Example: `oci_computeagent`
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        /// <summary>
        /// Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        [Input("resourceGroup")]
        public string? ResourceGroup { get; set; }

        public GetMetricsArgs()
        {
        }
        public static new GetMetricsArgs Empty => new GetMetricsArgs();
    }

    public sealed class GetMetricsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric that you are searching for. Use tenancyId to search in the root compartment.  Example: `ocid1.compartment.oc1..exampleuniqueID`
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When true, returns resources from all compartments and subcompartments. The parameter can only be set to true when compartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, returns resources from only the compartment specified in compartmentId. Default is false.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("dimensionFilters")]
        private InputMap<object>? _dimensionFilters;

        /// <summary>
        /// Qualifiers that you want to use when searching for metric definitions. Available dimensions vary by metric namespace. Each dimension takes the form of a key-value pair.  Example: `{"resourceId": "instance.region1.phx.exampleuniqueID"}`
        /// </summary>
        public InputMap<object> DimensionFilters
        {
            get => _dimensionFilters ?? (_dimensionFilters = new InputMap<object>());
            set => _dimensionFilters = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetMetricsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMetricsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMetricsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupBies")]
        private InputList<string>? _groupBies;

        /// <summary>
        /// Group metrics by these fields in the response. For example, to list all metric namespaces available in a compartment, groupBy the "namespace" field. Supported fields: namespace, name, resourceGroup. If `groupBy` is used, then `dimensionFilters` is ignored.
        /// 
        /// Example - group by namespace: `[ "namespace" ]`
        /// </summary>
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        /// <summary>
        /// The metric name to use when searching for metric definitions.  Example: `CpuUtilization`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The source service or application to use when searching for metric definitions.  Example: `oci_computeagent`
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Resource group that you want to match. A null value returns only metric data that has no resource groups. The specified resource group must exist in the definition of the posted metric. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        public GetMetricsInvokeArgs()
        {
        }
        public static new GetMetricsInvokeArgs Empty => new GetMetricsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the resources monitored by the metric.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableDictionary<string, object>? DimensionFilters;
        public readonly ImmutableArray<Outputs.GetMetricsFilterResult> Filters;
        public readonly ImmutableArray<string> GroupBies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of metrics.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricsMetricResult> Metrics;
        /// <summary>
        /// The name of the metric.  Example: `CpuUtilization`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The source service or application emitting the metric.  Example: `oci_computeagent`
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Resource group provided with the posted metric. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
        /// </summary>
        public readonly string? ResourceGroup;

        [OutputConstructor]
        private GetMetricsResult(
            string compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableDictionary<string, object>? dimensionFilters,

            ImmutableArray<Outputs.GetMetricsFilterResult> filters,

            ImmutableArray<string> groupBies,

            string id,

            ImmutableArray<Outputs.GetMetricsMetricResult> metrics,

            string? name,

            string? @namespace,

            string? resourceGroup)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            DimensionFilters = dimensionFilters;
            Filters = filters;
            GroupBies = groupBies;
            Id = id;
            Metrics = metrics;
            Name = name;
            Namespace = @namespace;
            ResourceGroup = resourceGroup;
        }
    }
}
