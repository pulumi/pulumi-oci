// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetChannels
    {
        /// <summary>
        /// This data source provides the list of Channels in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Lists all the Channels that match the specified filters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testChannels = Oci.Mysql.GetChannels.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ChannelId = oci_mysql_channel.Test_channel.Id,
        ///         DbSystemId = oci_database_db_system.Test_db_system.Id,
        ///         DisplayName = @var.Channel_display_name,
        ///         IsEnabled = @var.Channel_is_enabled,
        ///         State = @var.Channel_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetChannelsResult> InvokeAsync(GetChannelsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetChannelsResult>("oci:Mysql/getChannels:getChannels", args ?? new GetChannelsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Channels in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Lists all the Channels that match the specified filters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testChannels = Oci.Mysql.GetChannels.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ChannelId = oci_mysql_channel.Test_channel.Id,
        ///         DbSystemId = oci_database_db_system.Test_db_system.Id,
        ///         DisplayName = @var.Channel_display_name,
        ///         IsEnabled = @var.Channel_is_enabled,
        ///         State = @var.Channel_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetChannelsResult> Invoke(GetChannelsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetChannelsResult>("oci:Mysql/getChannels:getChannels", args ?? new GetChannelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChannelsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Channel.
        /// </summary>
        [Input("channelId")]
        public string? ChannelId { get; set; }

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId")]
        public string? DbSystemId { get; set; }

        /// <summary>
        /// A filter to return only the resource matching the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetChannelsFilterArgs>? _filters;
        public List<Inputs.GetChannelsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetChannelsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
        /// </summary>
        [Input("isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// The LifecycleState of the Channel.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetChannelsArgs()
        {
        }
        public static new GetChannelsArgs Empty => new GetChannelsArgs();
    }

    public sealed class GetChannelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Channel.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId")]
        public Input<string>? DbSystemId { get; set; }

        /// <summary>
        /// A filter to return only the resource matching the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetChannelsFilterInputArgs>? _filters;
        public InputList<Inputs.GetChannelsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetChannelsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The LifecycleState of the Channel.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetChannelsInvokeArgs()
        {
        }
        public static new GetChannelsInvokeArgs Empty => new GetChannelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetChannelsResult
    {
        public readonly string? ChannelId;
        /// <summary>
        /// The list of channels.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetChannelsChannelResult> Channels;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the source DB System.
        /// </summary>
        public readonly string? DbSystemId;
        /// <summary>
        /// The user-friendly name for the Channel. It does not have to be unique.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetChannelsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the Channel has been enabled by the user.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// The state of the Channel.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetChannelsResult(
            string? channelId,

            ImmutableArray<Outputs.GetChannelsChannelResult> channels,

            string compartmentId,

            string? dbSystemId,

            string? displayName,

            ImmutableArray<Outputs.GetChannelsFilterResult> filters,

            string id,

            bool? isEnabled,

            string? state)
        {
            ChannelId = channelId;
            Channels = channels;
            CompartmentId = compartmentId;
            DbSystemId = dbSystemId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            IsEnabled = isEnabled;
            State = state;
        }
    }
}
