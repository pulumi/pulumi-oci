// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetHeatWaveCluster
    {
        /// <summary>
        /// This data source provides details about a specific HeatWave cluster resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Gets information about the HeatWave cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testHeatWaveCluster = Oci.Mysql.GetHeatWaveCluster.Invoke(new()
        ///     {
        ///         DbSystemId = oci_database_db_system.Test_db_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHeatWaveClusterResult> InvokeAsync(GetHeatWaveClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHeatWaveClusterResult>("oci:Mysql/getHeatWaveCluster:getHeatWaveCluster", args ?? new GetHeatWaveClusterArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific HeatWave cluster resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Gets information about the HeatWave cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testHeatWaveCluster = Oci.Mysql.GetHeatWaveCluster.Invoke(new()
        ///     {
        ///         DbSystemId = oci_database_db_system.Test_db_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHeatWaveClusterResult> Invoke(GetHeatWaveClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHeatWaveClusterResult>("oci:Mysql/getHeatWaveCluster:getHeatWaveCluster", args ?? new GetHeatWaveClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHeatWaveClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId", required: true)]
        public string DbSystemId { get; set; } = null!;

        public GetHeatWaveClusterArgs()
        {
        }
        public static new GetHeatWaveClusterArgs Empty => new GetHeatWaveClusterArgs();
    }

    public sealed class GetHeatWaveClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId", required: true)]
        public Input<string> DbSystemId { get; set; } = null!;

        public GetHeatWaveClusterInvokeArgs()
        {
        }
        public static new GetHeatWaveClusterInvokeArgs Empty => new GetHeatWaveClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetHeatWaveClusterResult
    {
        /// <summary>
        /// A HeatWave node is a compute host that is part of a HeatWave cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHeatWaveClusterClusterNodeResult> ClusterNodes;
        /// <summary>
        /// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
        /// </summary>
        public readonly int ClusterSize;
        /// <summary>
        /// The OCID of the parent DB System this HeatWave cluster is attached to.
        /// </summary>
        public readonly string DbSystemId;
        public readonly string Id;
        /// <summary>
        /// Additional information about the current lifecycleState.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The shape determines resources to allocate to the HeatWave nodes - CPU cores, memory.
        /// </summary>
        public readonly string ShapeName;
        /// <summary>
        /// The current state of the HeatWave cluster.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetHeatWaveClusterResult(
            ImmutableArray<Outputs.GetHeatWaveClusterClusterNodeResult> clusterNodes,

            int clusterSize,

            string dbSystemId,

            string id,

            string lifecycleDetails,

            string shapeName,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            ClusterNodes = clusterNodes;
            ClusterSize = clusterSize;
            DbSystemId = dbSystemId;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            ShapeName = shapeName;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
