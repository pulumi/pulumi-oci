// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetMysqlBackup
    {
        /// <summary>
        /// This data source provides details about a specific Mysql Backup resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get information about the specified Backup
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlBackup = Oci.Mysql.GetMysqlBackup.Invoke(new()
        ///     {
        ///         BackupId = testBackup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMysqlBackupResult> InvokeAsync(GetMysqlBackupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMysqlBackupResult>("oci:Mysql/getMysqlBackup:getMysqlBackup", args ?? new GetMysqlBackupArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Mysql Backup resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get information about the specified Backup
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlBackup = Oci.Mysql.GetMysqlBackup.Invoke(new()
        ///     {
        ///         BackupId = testBackup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMysqlBackupResult> Invoke(GetMysqlBackupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlBackupResult>("oci:Mysql/getMysqlBackup:getMysqlBackup", args ?? new GetMysqlBackupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Mysql Backup resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get information about the specified Backup
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlBackup = Oci.Mysql.GetMysqlBackup.Invoke(new()
        ///     {
        ///         BackupId = testBackup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMysqlBackupResult> Invoke(GetMysqlBackupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlBackupResult>("oci:Mysql/getMysqlBackup:getMysqlBackup", args ?? new GetMysqlBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMysqlBackupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Backup
        /// </summary>
        [Input("backupId", required: true)]
        public string BackupId { get; set; } = null!;

        public GetMysqlBackupArgs()
        {
        }
        public static new GetMysqlBackupArgs Empty => new GetMysqlBackupArgs();
    }

    public sealed class GetMysqlBackupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Backup
        /// </summary>
        [Input("backupId", required: true)]
        public Input<string> BackupId { get; set; } = null!;

        public GetMysqlBackupInvokeArgs()
        {
        }
        public static new GetMysqlBackupInvokeArgs Empty => new GetMysqlBackupInvokeArgs();
    }


    [OutputType]
    public sealed class GetMysqlBackupResult
    {
        public readonly string BackupId;
        /// <summary>
        /// The size of the backup in base-2 (IEC) gibibytes. (GiB).
        /// </summary>
        public readonly int BackupSizeInGbs;
        /// <summary>
        /// The type of backup.
        /// </summary>
        public readonly string BackupType;
        /// <summary>
        /// Backup validation details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlBackupBackupValidationDetailResult> BackupValidationDetails;
        /// <summary>
        /// The OCID of the compartment the DB System belongs in.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Indicates how the backup was created: manually, automatic, or by an Operator.
        /// </summary>
        public readonly string CreationType;
        /// <summary>
        /// DEPRECATED: User specified size of the data volume. May be less than current allocatedStorageSizeInGBs. Replaced by dataStorage.dataStorageSizeInGBs.
        /// </summary>
        public readonly int DataStorageSizeInGb;
        /// <summary>
        /// The OCID of the DB System the backup is associated with.
        /// </summary>
        public readonly string DbSystemId;
        public readonly ImmutableArray<Outputs.GetMysqlBackupDbSystemSnapshotSummaryResult> DbSystemSnapshotSummaries;
        /// <summary>
        /// Snapshot of the DbSystem details at the time of the backup
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlBackupDbSystemSnapshotResult> DbSystemSnapshots;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A user-supplied description for the backup.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A user-supplied display name for the backup.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Encrypt data details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlBackupEncryptDataResult> EncryptDatas;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// OCID of the backup itself
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the immediate source DB system backup from which this DB system backup was copied.
        /// </summary>
        public readonly string ImmediateSourceBackupId;
        /// <summary>
        /// Additional information about the current lifecycleState.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The MySQL server version of the DB System used for backup.
        /// </summary>
        public readonly string MysqlVersion;
        /// <summary>
        /// The OCID of the original source DB system backup from which this DB system backup was copied.
        /// </summary>
        public readonly string OriginalSourceBackupId;
        /// <summary>
        /// Number of days to retain this backup.
        /// </summary>
        public readonly int RetentionInDays;
        /// <summary>
        /// The shape of the DB System instance used for backup.
        /// </summary>
        public readonly string ShapeName;
        /// <summary>
        /// Retains the backup to be deleted due to the retention policy in DELETE SCHEDULED state for 7 days before permanently deleting it.
        /// </summary>
        public readonly string SoftDelete;
        public readonly ImmutableArray<Outputs.GetMysqlBackupSourceDetailResult> SourceDetails;
        /// <summary>
        /// The state of the backup.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The date and time the DB system backup copy was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeCopyCreated;
        /// <summary>
        /// The time the backup record was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time at which the backup was updated.
        /// </summary>
        public readonly string TimeUpdated;
        public readonly ImmutableArray<Outputs.GetMysqlBackupValidateBackupDetailResult> ValidateBackupDetails;
        public readonly int ValidateTrigger;

        [OutputConstructor]
        private GetMysqlBackupResult(
            string backupId,

            int backupSizeInGbs,

            string backupType,

            ImmutableArray<Outputs.GetMysqlBackupBackupValidationDetailResult> backupValidationDetails,

            string compartmentId,

            string creationType,

            int dataStorageSizeInGb,

            string dbSystemId,

            ImmutableArray<Outputs.GetMysqlBackupDbSystemSnapshotSummaryResult> dbSystemSnapshotSummaries,

            ImmutableArray<Outputs.GetMysqlBackupDbSystemSnapshotResult> dbSystemSnapshots,

            ImmutableDictionary<string, string> definedTags,

            string description,

            string displayName,

            ImmutableArray<Outputs.GetMysqlBackupEncryptDataResult> encryptDatas,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string immediateSourceBackupId,

            string lifecycleDetails,

            string mysqlVersion,

            string originalSourceBackupId,

            int retentionInDays,

            string shapeName,

            string softDelete,

            ImmutableArray<Outputs.GetMysqlBackupSourceDetailResult> sourceDetails,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCopyCreated,

            string timeCreated,

            string timeUpdated,

            ImmutableArray<Outputs.GetMysqlBackupValidateBackupDetailResult> validateBackupDetails,

            int validateTrigger)
        {
            BackupId = backupId;
            BackupSizeInGbs = backupSizeInGbs;
            BackupType = backupType;
            BackupValidationDetails = backupValidationDetails;
            CompartmentId = compartmentId;
            CreationType = creationType;
            DataStorageSizeInGb = dataStorageSizeInGb;
            DbSystemId = dbSystemId;
            DbSystemSnapshotSummaries = dbSystemSnapshotSummaries;
            DbSystemSnapshots = dbSystemSnapshots;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            EncryptDatas = encryptDatas;
            FreeformTags = freeformTags;
            Id = id;
            ImmediateSourceBackupId = immediateSourceBackupId;
            LifecycleDetails = lifecycleDetails;
            MysqlVersion = mysqlVersion;
            OriginalSourceBackupId = originalSourceBackupId;
            RetentionInDays = retentionInDays;
            ShapeName = shapeName;
            SoftDelete = softDelete;
            SourceDetails = sourceDetails;
            State = state;
            SystemTags = systemTags;
            TimeCopyCreated = timeCopyCreated;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            ValidateBackupDetails = validateBackupDetails;
            ValidateTrigger = validateTrigger;
        }
    }
}
