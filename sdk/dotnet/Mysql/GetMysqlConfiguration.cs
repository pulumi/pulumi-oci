// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetMysqlConfiguration
    {
        /// <summary>
        /// This data source provides details about a specific Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get the full details of the specified Configuration, including the list of MySQL Variables and their values.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlConfiguration = Oci.Mysql.GetMysqlConfiguration.Invoke(new()
        ///     {
        ///         ConfigurationId = @var.Mysql_configuration_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMysqlConfigurationResult> InvokeAsync(GetMysqlConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMysqlConfigurationResult>("oci:Mysql/getMysqlConfiguration:getMysqlConfiguration", args ?? new GetMysqlConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get the full details of the specified Configuration, including the list of MySQL Variables and their values.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlConfiguration = Oci.Mysql.GetMysqlConfiguration.Invoke(new()
        ///     {
        ///         ConfigurationId = @var.Mysql_configuration_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMysqlConfigurationResult> Invoke(GetMysqlConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlConfigurationResult>("oci:Mysql/getMysqlConfiguration:getMysqlConfiguration", args ?? new GetMysqlConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMysqlConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Configuration.
        /// </summary>
        [Input("configurationId", required: true)]
        public string ConfigurationId { get; set; } = null!;

        public GetMysqlConfigurationArgs()
        {
        }
        public static new GetMysqlConfigurationArgs Empty => new GetMysqlConfigurationArgs();
    }

    public sealed class GetMysqlConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the Configuration.
        /// </summary>
        [Input("configurationId", required: true)]
        public Input<string> ConfigurationId { get; set; } = null!;

        public GetMysqlConfigurationInvokeArgs()
        {
        }
        public static new GetMysqlConfigurationInvokeArgs Empty => new GetMysqlConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMysqlConfigurationResult
    {
        /// <summary>
        /// OCID of the Compartment the Configuration exists in.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string ConfigurationId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// User-provided data about the Configuration.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of the Configuration.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the Configuration.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlConfigurationInitVariableResult> InitVariables;
        /// <summary>
        /// The OCID of the Configuration from which this Configuration is "derived". This is entirely a metadata relationship. There is no relation between the values in this Configuration and its parent.
        /// </summary>
        public readonly string ParentConfigurationId;
        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        public readonly string ShapeName;
        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// User-defined service variables.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlConfigurationVariableResult> Variables;

        [OutputConstructor]
        private GetMysqlConfigurationResult(
            string compartmentId,

            string configurationId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            ImmutableArray<Outputs.GetMysqlConfigurationInitVariableResult> initVariables,

            string parentConfigurationId,

            string shapeName,

            string state,

            string timeCreated,

            string timeUpdated,

            string type,

            ImmutableArray<Outputs.GetMysqlConfigurationVariableResult> variables)
        {
            CompartmentId = compartmentId;
            ConfigurationId = configurationId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            InitVariables = initVariables;
            ParentConfigurationId = parentConfigurationId;
            ShapeName = shapeName;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            Type = type;
            Variables = variables;
        }
    }
}
