// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetMysqlConfigurations
    {
        /// <summary>
        /// This data source provides the list of Mysql Configurations in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Lists the Configurations available when creating a DB System.
        /// 
        /// This may include DEFAULT configurations per Shape and CUSTOM configurations.
        /// 
        /// The default sort order is a multi-part sort by:
        ///   - shapeName, ascending
        ///   - DEFAULT-before-CUSTOM
        ///   - displayName ascending
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlConfigurations = Oci.Mysql.GetMysqlConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ConfigurationId = @var.Mysql_configuration_id,
        ///         DisplayName = @var.Mysql_configuration_display_name,
        ///         ShapeName = @var.Mysql_shape_name,
        ///         State = @var.Mysql_configuration_state,
        ///         Types = @var.Mysql_configuration_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMysqlConfigurationsResult> InvokeAsync(GetMysqlConfigurationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMysqlConfigurationsResult>("oci:Mysql/getMysqlConfigurations:getMysqlConfigurations", args ?? new GetMysqlConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Mysql Configurations in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Lists the Configurations available when creating a DB System.
        /// 
        /// This may include DEFAULT configurations per Shape and CUSTOM configurations.
        /// 
        /// The default sort order is a multi-part sort by:
        ///   - shapeName, ascending
        ///   - DEFAULT-before-CUSTOM
        ///   - displayName ascending
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlConfigurations = Oci.Mysql.GetMysqlConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ConfigurationId = @var.Mysql_configuration_id,
        ///         DisplayName = @var.Mysql_configuration_display_name,
        ///         ShapeName = @var.Mysql_shape_name,
        ///         State = @var.Mysql_configuration_state,
        ///         Types = @var.Mysql_configuration_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMysqlConfigurationsResult> Invoke(GetMysqlConfigurationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlConfigurationsResult>("oci:Mysql/getMysqlConfigurations:getMysqlConfigurations", args ?? new GetMysqlConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMysqlConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The requested Configuration instance.
        /// </summary>
        [Input("configurationId")]
        public string? ConfigurationId { get; set; }

        /// <summary>
        /// A filter to return only the resource matching the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMysqlConfigurationsFilterArgs>? _filters;
        public List<Inputs.GetMysqlConfigurationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMysqlConfigurationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The requested Shape name.
        /// </summary>
        [Input("shapeName")]
        public string? ShapeName { get; set; }

        /// <summary>
        /// Configuration Lifecycle State
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// The requested Configuration types.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public GetMysqlConfigurationsArgs()
        {
        }
        public static new GetMysqlConfigurationsArgs Empty => new GetMysqlConfigurationsArgs();
    }

    public sealed class GetMysqlConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The requested Configuration instance.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// A filter to return only the resource matching the given display name exactly.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMysqlConfigurationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMysqlConfigurationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMysqlConfigurationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The requested Shape name.
        /// </summary>
        [Input("shapeName")]
        public Input<string>? ShapeName { get; set; }

        /// <summary>
        /// Configuration Lifecycle State
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// The requested Configuration types.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public GetMysqlConfigurationsInvokeArgs()
        {
        }
        public static new GetMysqlConfigurationsInvokeArgs Empty => new GetMysqlConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMysqlConfigurationsResult
    {
        /// <summary>
        /// OCID of the Compartment the Configuration exists in.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string? ConfigurationId;
        /// <summary>
        /// The list of configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlConfigurationsConfigurationResult> Configurations;
        /// <summary>
        /// The display name of the Configuration.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMysqlConfigurationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        public readonly string? ShapeName;
        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private GetMysqlConfigurationsResult(
            string compartmentId,

            string? configurationId,

            ImmutableArray<Outputs.GetMysqlConfigurationsConfigurationResult> configurations,

            string? displayName,

            ImmutableArray<Outputs.GetMysqlConfigurationsFilterResult> filters,

            string id,

            string? shapeName,

            string? state,

            ImmutableArray<string> types)
        {
            CompartmentId = compartmentId;
            ConfigurationId = configurationId;
            Configurations = configurations;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ShapeName = shapeName;
            State = state;
            Types = types;
        }
    }
}
