// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetMysqlDbSystem
    {
        /// <summary>
        /// This data source provides details about a specific Mysql Db System resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get information about the specified DB System.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlDbSystem = Oci.Mysql.GetMysqlDbSystem.Invoke(new()
        ///     {
        ///         DbSystemId = oci_mysql_mysql_db_system.Test_db_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMysqlDbSystemResult> InvokeAsync(GetMysqlDbSystemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMysqlDbSystemResult>("oci:Mysql/getMysqlDbSystem:getMysqlDbSystem", args ?? new GetMysqlDbSystemArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Mysql Db System resource in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get information about the specified DB System.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlDbSystem = Oci.Mysql.GetMysqlDbSystem.Invoke(new()
        ///     {
        ///         DbSystemId = oci_mysql_mysql_db_system.Test_db_system.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMysqlDbSystemResult> Invoke(GetMysqlDbSystemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlDbSystemResult>("oci:Mysql/getMysqlDbSystem:getMysqlDbSystem", args ?? new GetMysqlDbSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMysqlDbSystemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId", required: true)]
        public string DbSystemId { get; set; } = null!;

        public GetMysqlDbSystemArgs()
        {
        }
        public static new GetMysqlDbSystemArgs Empty => new GetMysqlDbSystemArgs();
    }

    public sealed class GetMysqlDbSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("dbSystemId", required: true)]
        public Input<string> DbSystemId { get; set; } = null!;

        public GetMysqlDbSystemInvokeArgs()
        {
        }
        public static new GetMysqlDbSystemInvokeArgs Empty => new GetMysqlDbSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetMysqlDbSystemResult
    {
        public readonly string AdminPassword;
        public readonly string AdminUsername;
        /// <summary>
        /// The availability domain in which the DB System is placed.
        /// </summary>
        public readonly string AvailabilityDomain;
        /// <summary>
        /// The Backup policy for the DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemBackupPolicyResult> BackupPolicies;
        /// <summary>
        /// A list with a summary of all the Channels attached to the DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemChannelResult> Channels;
        /// <summary>
        /// The OCID of the compartment the DB System belongs in.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the Configuration to be used for Instances in this DB System.
        /// </summary>
        public readonly string ConfigurationId;
        /// <summary>
        /// Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
        /// </summary>
        public readonly string CrashRecovery;
        /// <summary>
        /// The availability domain and fault domain a DB System is placed in.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemCurrentPlacementResult> CurrentPlacements;
        /// <summary>
        /// Initial size of the data volume in GiBs that will be created and attached.
        /// </summary>
        public readonly int DataStorageSizeInGb;
        /// <summary>
        /// Whether to enable monitoring via the Database Management service.
        /// </summary>
        public readonly string DatabaseManagement;
        /// <summary>
        /// The OCID of the DB System from which a backup shall be selected to be restored when creating the new DB System. Use this together with recovery point to perform a point in time recovery operation.
        /// </summary>
        public readonly string DbSystemId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The Deletion policy for the DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemDeletionPolicyResult> DeletionPolicies;
        /// <summary>
        /// User-provided data about the DB System.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The user-friendly name for the DB System. It does not have to be unique.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The network endpoints available for this DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemEndpointResult> Endpoints;
        /// <summary>
        /// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// </summary>
        public readonly string FaultDomain;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// A summary of a HeatWave cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemHeatWaveClusterResult> HeatWaveClusters;
        /// <summary>
        /// The hostname for the primary endpoint of the DB System. Used for DNS. The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com"). Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
        /// </summary>
        public readonly string HostnameLabel;
        /// <summary>
        /// The OCID of the DB System.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The IP address the DB System is configured to listen on. A private IP address of the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. This will be a "dotted-quad" style IPv4 address.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// If the DB System has a HeatWave Cluster attached.
        /// </summary>
        public readonly bool IsHeatWaveClusterAttached;
        /// <summary>
        /// Specifies if the DB System is highly available.
        /// </summary>
        public readonly bool IsHighlyAvailable;
        /// <summary>
        /// Additional information about the current lifecycleState.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The Maintenance Policy for the DB System or Read Replica that this model is included in.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemMaintenanceResult> Maintenances;
        /// <summary>
        /// Name of the MySQL Version in use for the DB System.
        /// </summary>
        public readonly string MysqlVersion;
        /// <summary>
        /// Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemPointInTimeRecoveryDetailResult> PointInTimeRecoveryDetails;
        /// <summary>
        /// The port for primary endpoint of the DB System to listen on.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The network port on which X Plugin listens for TCP/IP connections. This is the X Plugin equivalent of port.
        /// </summary>
        public readonly int PortX;
        /// <summary>
        /// Secure connection configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemSecureConnectionResult> SecureConnections;
        /// <summary>
        /// The shape of the primary instances of the DB System. The shape determines resources allocated to a DB System - CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use (the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20181021/ShapeSummary/ListShapes) operation.
        /// </summary>
        public readonly string ShapeName;
        public readonly string ShutdownType;
        /// <summary>
        /// Parameters detailing how to provision the initial data of the DB System.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlDbSystemSourceResult> Sources;
        /// <summary>
        /// The current state of the DB System.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The OCID of the subnet the DB System is associated with.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// The date and time the DB System was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the DB System was last updated.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetMysqlDbSystemResult(
            string adminPassword,

            string adminUsername,

            string availabilityDomain,

            ImmutableArray<Outputs.GetMysqlDbSystemBackupPolicyResult> backupPolicies,

            ImmutableArray<Outputs.GetMysqlDbSystemChannelResult> channels,

            string compartmentId,

            string configurationId,

            string crashRecovery,

            ImmutableArray<Outputs.GetMysqlDbSystemCurrentPlacementResult> currentPlacements,

            int dataStorageSizeInGb,

            string databaseManagement,

            string dbSystemId,

            ImmutableDictionary<string, object> definedTags,

            ImmutableArray<Outputs.GetMysqlDbSystemDeletionPolicyResult> deletionPolicies,

            string description,

            string displayName,

            ImmutableArray<Outputs.GetMysqlDbSystemEndpointResult> endpoints,

            string faultDomain,

            ImmutableDictionary<string, object> freeformTags,

            ImmutableArray<Outputs.GetMysqlDbSystemHeatWaveClusterResult> heatWaveClusters,

            string hostnameLabel,

            string id,

            string ipAddress,

            bool isHeatWaveClusterAttached,

            bool isHighlyAvailable,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetMysqlDbSystemMaintenanceResult> maintenances,

            string mysqlVersion,

            ImmutableArray<Outputs.GetMysqlDbSystemPointInTimeRecoveryDetailResult> pointInTimeRecoveryDetails,

            int port,

            int portX,

            ImmutableArray<Outputs.GetMysqlDbSystemSecureConnectionResult> secureConnections,

            string shapeName,

            string shutdownType,

            ImmutableArray<Outputs.GetMysqlDbSystemSourceResult> sources,

            string state,

            string subnetId,

            string timeCreated,

            string timeUpdated)
        {
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            AvailabilityDomain = availabilityDomain;
            BackupPolicies = backupPolicies;
            Channels = channels;
            CompartmentId = compartmentId;
            ConfigurationId = configurationId;
            CrashRecovery = crashRecovery;
            CurrentPlacements = currentPlacements;
            DataStorageSizeInGb = dataStorageSizeInGb;
            DatabaseManagement = databaseManagement;
            DbSystemId = dbSystemId;
            DefinedTags = definedTags;
            DeletionPolicies = deletionPolicies;
            Description = description;
            DisplayName = displayName;
            Endpoints = endpoints;
            FaultDomain = faultDomain;
            FreeformTags = freeformTags;
            HeatWaveClusters = heatWaveClusters;
            HostnameLabel = hostnameLabel;
            Id = id;
            IpAddress = ipAddress;
            IsHeatWaveClusterAttached = isHeatWaveClusterAttached;
            IsHighlyAvailable = isHighlyAvailable;
            LifecycleDetails = lifecycleDetails;
            Maintenances = maintenances;
            MysqlVersion = mysqlVersion;
            PointInTimeRecoveryDetails = pointInTimeRecoveryDetails;
            Port = port;
            PortX = portX;
            SecureConnections = secureConnections;
            ShapeName = shapeName;
            ShutdownType = shutdownType;
            Sources = sources;
            State = state;
            SubnetId = subnetId;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
