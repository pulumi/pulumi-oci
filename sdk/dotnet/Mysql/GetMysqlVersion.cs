// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    public static class GetMysqlVersion
    {
        /// <summary>
        /// This data source provides the list of Mysql Versions in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get a list of supported and available MySQL database major versions.
        /// 
        /// The list is sorted by version family.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlVersions = Oci.Mysql.GetMysqlVersion.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMysqlVersionResult> InvokeAsync(GetMysqlVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMysqlVersionResult>("oci:Mysql/getMysqlVersion:getMysqlVersion", args ?? new GetMysqlVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Mysql Versions in Oracle Cloud Infrastructure MySQL Database service.
        /// 
        /// Get a list of supported and available MySQL database major versions.
        /// 
        /// The list is sorted by version family.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMysqlVersions = Oci.Mysql.GetMysqlVersion.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMysqlVersionResult> Invoke(GetMysqlVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMysqlVersionResult>("oci:Mysql/getMysqlVersion:getMysqlVersion", args ?? new GetMysqlVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMysqlVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetMysqlVersionFilterArgs>? _filters;
        public List<Inputs.GetMysqlVersionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMysqlVersionFilterArgs>());
            set => _filters = value;
        }

        public GetMysqlVersionArgs()
        {
        }
        public static new GetMysqlVersionArgs Empty => new GetMysqlVersionArgs();
    }

    public sealed class GetMysqlVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetMysqlVersionFilterInputArgs>? _filters;
        public InputList<Inputs.GetMysqlVersionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMysqlVersionFilterInputArgs>());
            set => _filters = value;
        }

        public GetMysqlVersionInvokeArgs()
        {
        }
        public static new GetMysqlVersionInvokeArgs Empty => new GetMysqlVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMysqlVersionResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetMysqlVersionFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of supported MySQL Versions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMysqlVersionVersionResult> Versions;

        [OutputConstructor]
        private GetMysqlVersionResult(
            string compartmentId,

            ImmutableArray<Outputs.GetMysqlVersionFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetMysqlVersionVersionResult> versions)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Versions = versions;
        }
    }
}
