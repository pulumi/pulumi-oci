// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    /// <summary>
    /// This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
    /// 
    /// Creates a new Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testMysqlConfiguration = new Oci.Mysql.MysqlConfiguration("test_mysql_configuration", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         ShapeName = testShape.Name,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         Description = mysqlConfigurationDescription,
    ///         DisplayName = mysqlConfigurationDisplayName,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         InitVariables = new Oci.Mysql.Inputs.MysqlConfigurationInitVariablesArgs
    ///         {
    ///             LowerCaseTableNames = mysqlConfigurationInitVariablesLowerCaseTableNames,
    ///         },
    ///         ParentConfigurationId = testConfiguration.Id,
    ///         Variables = new Oci.Mysql.Inputs.MysqlConfigurationVariablesArgs
    ///         {
    ///             AutoIncrementIncrement = mysqlConfigurationVariablesAutoIncrementIncrement,
    ///             AutoIncrementOffset = mysqlConfigurationVariablesAutoIncrementOffset,
    ///             Autocommit = mysqlConfigurationVariablesAutocommit,
    ///             BigTables = mysqlConfigurationVariablesBigTables,
    ///             BinlogExpireLogsSeconds = mysqlConfigurationVariablesBinlogExpireLogsSeconds,
    ///             BinlogGroupCommitSyncDelay = mysqlConfigurationVariablesBinlogGroupCommitSyncDelay,
    ///             BinlogGroupCommitSyncNoDelayCount = mysqlConfigurationVariablesBinlogGroupCommitSyncNoDelayCount,
    ///             BinlogRowMetadata = mysqlConfigurationVariablesBinlogRowMetadata,
    ///             BinlogRowValueOptions = mysqlConfigurationVariablesBinlogRowValueOptions,
    ///             BinlogTransactionCompression = mysqlConfigurationVariablesBinlogTransactionCompression,
    ///             BlockEncryptionMode = mysqlConfigurationVariablesBlockEncryptionMode,
    ///             CharacterSetServer = mysqlConfigurationVariablesCharacterSetServer,
    ///             CollationServer = mysqlConfigurationVariablesCollationServer,
    ///             CompletionType = mysqlConfigurationVariablesCompletionType,
    ///             ConnectTimeout = mysqlConfigurationVariablesConnectTimeout,
    ///             ConnectionMemoryChunkSize = mysqlConfigurationVariablesConnectionMemoryChunkSize,
    ///             ConnectionMemoryLimit = mysqlConfigurationVariablesConnectionMemoryLimit,
    ///             CteMaxRecursionDepth = mysqlConfigurationVariablesCteMaxRecursionDepth,
    ///             DefaultAuthenticationPlugin = mysqlConfigurationVariablesDefaultAuthenticationPlugin,
    ///             ExplainFormat = mysqlConfigurationVariablesExplainFormat,
    ///             ExplicitDefaultsForTimestamp = mysqlConfigurationVariablesExplicitDefaultsForTimestamp,
    ///             ForeignKeyChecks = mysqlConfigurationVariablesForeignKeyChecks,
    ///             GeneratedRandomPasswordLength = mysqlConfigurationVariablesGeneratedRandomPasswordLength,
    ///             GlobalConnectionMemoryLimit = mysqlConfigurationVariablesGlobalConnectionMemoryLimit,
    ///             GlobalConnectionMemoryTracking = mysqlConfigurationVariablesGlobalConnectionMemoryTracking,
    ///             GroupConcatMaxLen = mysqlConfigurationVariablesGroupConcatMaxLen,
    ///             GroupReplicationConsistency = mysqlConfigurationVariablesGroupReplicationConsistency,
    ///             InformationSchemaStatsExpiry = mysqlConfigurationVariablesInformationSchemaStatsExpiry,
    ///             InnodbAdaptiveHashIndex = mysqlConfigurationVariablesInnodbAdaptiveHashIndex,
    ///             InnodbAutoincLockMode = mysqlConfigurationVariablesInnodbAutoincLockMode,
    ///             InnodbBufferPoolDumpPct = mysqlConfigurationVariablesInnodbBufferPoolDumpPct,
    ///             InnodbBufferPoolInstances = mysqlConfigurationVariablesInnodbBufferPoolInstances,
    ///             InnodbBufferPoolSize = mysqlConfigurationVariablesInnodbBufferPoolSize,
    ///             InnodbChangeBuffering = mysqlConfigurationVariablesInnodbChangeBuffering,
    ///             InnodbDdlBufferSize = mysqlConfigurationVariablesInnodbDdlBufferSize,
    ///             InnodbDdlThreads = mysqlConfigurationVariablesInnodbDdlThreads,
    ///             InnodbFtEnableStopword = mysqlConfigurationVariablesInnodbFtEnableStopword,
    ///             InnodbFtMaxTokenSize = mysqlConfigurationVariablesInnodbFtMaxTokenSize,
    ///             InnodbFtMinTokenSize = mysqlConfigurationVariablesInnodbFtMinTokenSize,
    ///             InnodbFtNumWordOptimize = mysqlConfigurationVariablesInnodbFtNumWordOptimize,
    ///             InnodbFtResultCacheLimit = mysqlConfigurationVariablesInnodbFtResultCacheLimit,
    ///             InnodbFtServerStopwordTable = mysqlConfigurationVariablesInnodbFtServerStopwordTable,
    ///             InnodbLockWaitTimeout = mysqlConfigurationVariablesInnodbLockWaitTimeout,
    ///             InnodbLogWriterThreads = mysqlConfigurationVariablesInnodbLogWriterThreads,
    ///             InnodbMaxPurgeLag = mysqlConfigurationVariablesInnodbMaxPurgeLag,
    ///             InnodbMaxPurgeLagDelay = mysqlConfigurationVariablesInnodbMaxPurgeLagDelay,
    ///             InnodbNumaInterleave = mysqlConfigurationVariablesInnodbNumaInterleave,
    ///             InnodbOnlineAlterLogMaxSize = mysqlConfigurationVariablesInnodbOnlineAlterLogMaxSize,
    ///             InnodbRedoLogCapacity = mysqlConfigurationVariablesInnodbRedoLogCapacity,
    ///             InnodbRollbackOnTimeout = mysqlConfigurationVariablesInnodbRollbackOnTimeout,
    ///             InnodbSortBufferSize = mysqlConfigurationVariablesInnodbSortBufferSize,
    ///             InnodbStatsPersistentSamplePages = mysqlConfigurationVariablesInnodbStatsPersistentSamplePages,
    ///             InnodbStatsTransientSamplePages = mysqlConfigurationVariablesInnodbStatsTransientSamplePages,
    ///             InnodbStrictMode = mysqlConfigurationVariablesInnodbStrictMode,
    ///             InnodbUndoLogTruncate = mysqlConfigurationVariablesInnodbUndoLogTruncate,
    ///             InteractiveTimeout = mysqlConfigurationVariablesInteractiveTimeout,
    ///             JoinBufferSize = mysqlConfigurationVariablesJoinBufferSize,
    ///             LocalInfile = mysqlConfigurationVariablesLocalInfile,
    ///             LongQueryTime = mysqlConfigurationVariablesLongQueryTime,
    ///             MandatoryRoles = mysqlConfigurationVariablesMandatoryRoles,
    ///             MaxAllowedPacket = mysqlConfigurationVariablesMaxAllowedPacket,
    ///             MaxBinlogCacheSize = mysqlConfigurationVariablesMaxBinlogCacheSize,
    ///             MaxConnectErrors = mysqlConfigurationVariablesMaxConnectErrors,
    ///             MaxConnections = mysqlConfigurationVariablesMaxConnections,
    ///             MaxExecutionTime = mysqlConfigurationVariablesMaxExecutionTime,
    ///             MaxHeapTableSize = mysqlConfigurationVariablesMaxHeapTableSize,
    ///             MaxPreparedStmtCount = mysqlConfigurationVariablesMaxPreparedStmtCount,
    ///             MaxSeeksForKey = mysqlConfigurationVariablesMaxSeeksForKey,
    ///             MaxUserConnections = mysqlConfigurationVariablesMaxUserConnections,
    ///             MysqlFirewallMode = mysqlConfigurationVariablesMysqlFirewallMode,
    ///             MysqlZstdDefaultCompressionLevel = mysqlConfigurationVariablesMysqlZstdDefaultCompressionLevel,
    ///             MysqlxConnectTimeout = mysqlConfigurationVariablesMysqlxConnectTimeout,
    ///             MysqlxDeflateDefaultCompressionLevel = mysqlConfigurationVariablesMysqlxDeflateDefaultCompressionLevel,
    ///             MysqlxDeflateMaxClientCompressionLevel = mysqlConfigurationVariablesMysqlxDeflateMaxClientCompressionLevel,
    ///             MysqlxDocumentIdUniquePrefix = mysqlConfigurationVariablesMysqlxDocumentIdUniquePrefix,
    ///             MysqlxEnableHelloNotice = mysqlConfigurationVariablesMysqlxEnableHelloNotice,
    ///             MysqlxIdleWorkerThreadTimeout = mysqlConfigurationVariablesMysqlxIdleWorkerThreadTimeout,
    ///             MysqlxInteractiveTimeout = mysqlConfigurationVariablesMysqlxInteractiveTimeout,
    ///             MysqlxLz4defaultCompressionLevel = mysqlConfigurationVariablesMysqlxLz4defaultCompressionLevel,
    ///             MysqlxLz4maxClientCompressionLevel = mysqlConfigurationVariablesMysqlxLz4maxClientCompressionLevel,
    ///             MysqlxMaxAllowedPacket = mysqlConfigurationVariablesMysqlxMaxAllowedPacket,
    ///             MysqlxMinWorkerThreads = mysqlConfigurationVariablesMysqlxMinWorkerThreads,
    ///             MysqlxReadTimeout = mysqlConfigurationVariablesMysqlxReadTimeout,
    ///             MysqlxWaitTimeout = mysqlConfigurationVariablesMysqlxWaitTimeout,
    ///             MysqlxWriteTimeout = mysqlConfigurationVariablesMysqlxWriteTimeout,
    ///             MysqlxZstdDefaultCompressionLevel = mysqlConfigurationVariablesMysqlxZstdDefaultCompressionLevel,
    ///             MysqlxZstdMaxClientCompressionLevel = mysqlConfigurationVariablesMysqlxZstdMaxClientCompressionLevel,
    ///             NetReadTimeout = mysqlConfigurationVariablesNetReadTimeout,
    ///             NetWriteTimeout = mysqlConfigurationVariablesNetWriteTimeout,
    ///             OptimizerSwitch = mysqlConfigurationVariablesOptimizerSwitch,
    ///             ParserMaxMemSize = mysqlConfigurationVariablesParserMaxMemSize,
    ///             QueryAllocBlockSize = mysqlConfigurationVariablesQueryAllocBlockSize,
    ///             QueryPreallocSize = mysqlConfigurationVariablesQueryPreallocSize,
    ///             RangeOptimizerMaxMemSize = mysqlConfigurationVariablesRangeOptimizerMaxMemSize,
    ///             RegexpTimeLimit = mysqlConfigurationVariablesRegexpTimeLimit,
    ///             RelayLogSpaceLimit = mysqlConfigurationVariablesRelayLogSpaceLimit,
    ///             ReplicaNetTimeout = mysqlConfigurationVariablesReplicaNetTimeout,
    ///             ReplicaParallelWorkers = mysqlConfigurationVariablesReplicaParallelWorkers,
    ///             ReplicaTypeConversions = mysqlConfigurationVariablesReplicaTypeConversions,
    ///             RequireSecureTransport = mysqlConfigurationVariablesRequireSecureTransport,
    ///             SkipNameResolve = mysqlConfigurationVariablesSkipNameResolve,
    ///             SortBufferSize = mysqlConfigurationVariablesSortBufferSize,
    ///             SqlGenerateInvisiblePrimaryKey = mysqlConfigurationVariablesSqlGenerateInvisiblePrimaryKey,
    ///             SqlMode = mysqlConfigurationVariablesSqlMode,
    ///             SqlRequirePrimaryKey = mysqlConfigurationVariablesSqlRequirePrimaryKey,
    ///             SqlWarnings = mysqlConfigurationVariablesSqlWarnings,
    ///             TableDefinitionCache = mysqlConfigurationVariablesTableDefinitionCache,
    ///             TableOpenCache = mysqlConfigurationVariablesTableOpenCache,
    ///             TemptableMaxRam = mysqlConfigurationVariablesTemptableMaxRam,
    ///             ThreadPoolDedicatedListeners = mysqlConfigurationVariablesThreadPoolDedicatedListeners,
    ///             ThreadPoolMaxTransactionsLimit = mysqlConfigurationVariablesThreadPoolMaxTransactionsLimit,
    ///             ThreadPoolQueryThreadsPerGroup = mysqlConfigurationVariablesThreadPoolQueryThreadsPerGroup,
    ///             ThreadPoolSize = mysqlConfigurationVariablesThreadPoolSize,
    ///             ThreadPoolTransactionDelay = mysqlConfigurationVariablesThreadPoolTransactionDelay,
    ///             TimeZone = mysqlConfigurationVariablesTimeZone,
    ///             TmpTableSize = mysqlConfigurationVariablesTmpTableSize,
    ///             TransactionIsolation = mysqlConfigurationVariablesTransactionIsolation,
    ///             WaitTimeout = mysqlConfigurationVariablesWaitTimeout,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MysqlConfigurations can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration "configurations/{configurationId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Mysql/mysqlConfiguration:MysqlConfiguration")]
    public partial class MysqlConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Output("initVariables")]
        public Output<Outputs.MysqlConfigurationInitVariables> InitVariables { get; private set; } = null!;

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Output("parentConfigurationId")]
        public Output<string> ParentConfigurationId { get; private set; } = null!;

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Output("shapeName")]
        public Output<string> ShapeName { get; private set; } = null!;

        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Output("variables")]
        public Output<Outputs.MysqlConfigurationVariables> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a MysqlConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MysqlConfiguration(string name, MysqlConfigurationArgs args, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, args ?? new MysqlConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MysqlConfiguration(string name, Input<string> id, MysqlConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MysqlConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MysqlConfiguration Get(string name, Input<string> id, MysqlConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new MysqlConfiguration(name, id, state, options);
        }
    }

    public sealed class MysqlConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Input("initVariables")]
        public Input<Inputs.MysqlConfigurationInitVariablesArgs>? InitVariables { get; set; }

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Input("parentConfigurationId")]
        public Input<string>? ParentConfigurationId { get; set; }

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Input("shapeName", required: true)]
        public Input<string> ShapeName { get; set; } = null!;

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Input("variables")]
        public Input<Inputs.MysqlConfigurationVariablesArgs>? Variables { get; set; }

        public MysqlConfigurationArgs()
        {
        }
        public static new MysqlConfigurationArgs Empty => new MysqlConfigurationArgs();
    }

    public sealed class MysqlConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Input("initVariables")]
        public Input<Inputs.MysqlConfigurationInitVariablesGetArgs>? InitVariables { get; set; }

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Input("parentConfigurationId")]
        public Input<string>? ParentConfigurationId { get; set; }

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Input("shapeName")]
        public Input<string>? ShapeName { get; set; }

        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Input("variables")]
        public Input<Inputs.MysqlConfigurationVariablesGetArgs>? Variables { get; set; }

        public MysqlConfigurationState()
        {
        }
        public static new MysqlConfigurationState Empty => new MysqlConfigurationState();
    }
}
