// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    /// <summary>
    /// This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
    /// 
    /// Creates a new Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testMysqlConfiguration = new Oci.Mysql.MysqlConfiguration("testMysqlConfiguration", new()
    ///     {
    ///         CompartmentId = @var.Compartment_id,
    ///         ShapeName = oci_mysql_shape.Test_shape.Name,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         Description = @var.Mysql_configuration_description,
    ///         DisplayName = @var.Mysql_configuration_display_name,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         InitVariables = new Oci.Mysql.Inputs.MysqlConfigurationInitVariablesArgs
    ///         {
    ///             LowerCaseTableNames = @var.Mysql_configuration_init_variables_lower_case_table_names,
    ///         },
    ///         ParentConfigurationId = oci_audit_configuration.Test_configuration.Id,
    ///         Variables = new Oci.Mysql.Inputs.MysqlConfigurationVariablesArgs
    ///         {
    ///             Autocommit = @var.Mysql_configuration_variables_autocommit,
    ///             BigTables = @var.Mysql_configuration_variables_big_tables,
    ///             BinlogExpireLogsSeconds = @var.Mysql_configuration_variables_binlog_expire_logs_seconds,
    ///             BinlogRowMetadata = @var.Mysql_configuration_variables_binlog_row_metadata,
    ///             BinlogRowValueOptions = @var.Mysql_configuration_variables_binlog_row_value_options,
    ///             BinlogTransactionCompression = @var.Mysql_configuration_variables_binlog_transaction_compression,
    ///             CompletionType = @var.Mysql_configuration_variables_completion_type,
    ///             ConnectTimeout = @var.Mysql_configuration_variables_connect_timeout,
    ///             ConnectionMemoryChunkSize = @var.Mysql_configuration_variables_connection_memory_chunk_size,
    ///             ConnectionMemoryLimit = @var.Mysql_configuration_variables_connection_memory_limit,
    ///             CteMaxRecursionDepth = @var.Mysql_configuration_variables_cte_max_recursion_depth,
    ///             DefaultAuthenticationPlugin = @var.Mysql_configuration_variables_default_authentication_plugin,
    ///             ForeignKeyChecks = @var.Mysql_configuration_variables_foreign_key_checks,
    ///             GeneratedRandomPasswordLength = @var.Mysql_configuration_variables_generated_random_password_length,
    ///             GlobalConnectionMemoryLimit = @var.Mysql_configuration_variables_global_connection_memory_limit,
    ///             GlobalConnectionMemoryTracking = @var.Mysql_configuration_variables_global_connection_memory_tracking,
    ///             GroupReplicationConsistency = @var.Mysql_configuration_variables_group_replication_consistency,
    ///             InformationSchemaStatsExpiry = @var.Mysql_configuration_variables_information_schema_stats_expiry,
    ///             InnodbBufferPoolDumpPct = @var.Mysql_configuration_variables_innodb_buffer_pool_dump_pct,
    ///             InnodbBufferPoolInstances = @var.Mysql_configuration_variables_innodb_buffer_pool_instances,
    ///             InnodbBufferPoolSize = @var.Mysql_configuration_variables_innodb_buffer_pool_size,
    ///             InnodbDdlBufferSize = @var.Mysql_configuration_variables_innodb_ddl_buffer_size,
    ///             InnodbDdlThreads = @var.Mysql_configuration_variables_innodb_ddl_threads,
    ///             InnodbFtEnableStopword = @var.Mysql_configuration_variables_innodb_ft_enable_stopword,
    ///             InnodbFtMaxTokenSize = @var.Mysql_configuration_variables_innodb_ft_max_token_size,
    ///             InnodbFtMinTokenSize = @var.Mysql_configuration_variables_innodb_ft_min_token_size,
    ///             InnodbFtNumWordOptimize = @var.Mysql_configuration_variables_innodb_ft_num_word_optimize,
    ///             InnodbFtResultCacheLimit = @var.Mysql_configuration_variables_innodb_ft_result_cache_limit,
    ///             InnodbFtServerStopwordTable = @var.Mysql_configuration_variables_innodb_ft_server_stopword_table,
    ///             InnodbLockWaitTimeout = @var.Mysql_configuration_variables_innodb_lock_wait_timeout,
    ///             InnodbLogWriterThreads = @var.Mysql_configuration_variables_innodb_log_writer_threads,
    ///             InnodbMaxPurgeLag = @var.Mysql_configuration_variables_innodb_max_purge_lag,
    ///             InnodbMaxPurgeLagDelay = @var.Mysql_configuration_variables_innodb_max_purge_lag_delay,
    ///             InnodbStatsPersistentSamplePages = @var.Mysql_configuration_variables_innodb_stats_persistent_sample_pages,
    ///             InnodbStatsTransientSamplePages = @var.Mysql_configuration_variables_innodb_stats_transient_sample_pages,
    ///             InteractiveTimeout = @var.Mysql_configuration_variables_interactive_timeout,
    ///             LocalInfile = @var.Mysql_configuration_variables_local_infile,
    ///             MandatoryRoles = @var.Mysql_configuration_variables_mandatory_roles,
    ///             MaxAllowedPacket = @var.Mysql_configuration_variables_max_allowed_packet,
    ///             MaxBinlogCacheSize = @var.Mysql_configuration_variables_max_binlog_cache_size,
    ///             MaxConnectErrors = @var.Mysql_configuration_variables_max_connect_errors,
    ///             MaxConnections = @var.Mysql_configuration_variables_max_connections,
    ///             MaxExecutionTime = @var.Mysql_configuration_variables_max_execution_time,
    ///             MaxHeapTableSize = @var.Mysql_configuration_variables_max_heap_table_size,
    ///             MaxPreparedStmtCount = @var.Mysql_configuration_variables_max_prepared_stmt_count,
    ///             MysqlFirewallMode = @var.Mysql_configuration_variables_mysql_firewall_mode,
    ///             MysqlZstdDefaultCompressionLevel = @var.Mysql_configuration_variables_mysql_zstd_default_compression_level,
    ///             MysqlxConnectTimeout = @var.Mysql_configuration_variables_mysqlx_connect_timeout,
    ///             MysqlxDeflateDefaultCompressionLevel = @var.Mysql_configuration_variables_mysqlx_deflate_default_compression_level,
    ///             MysqlxDeflateMaxClientCompressionLevel = @var.Mysql_configuration_variables_mysqlx_deflate_max_client_compression_level,
    ///             MysqlxDocumentIdUniquePrefix = @var.Mysql_configuration_variables_mysqlx_document_id_unique_prefix,
    ///             MysqlxEnableHelloNotice = @var.Mysql_configuration_variables_mysqlx_enable_hello_notice,
    ///             MysqlxIdleWorkerThreadTimeout = @var.Mysql_configuration_variables_mysqlx_idle_worker_thread_timeout,
    ///             MysqlxInteractiveTimeout = @var.Mysql_configuration_variables_mysqlx_interactive_timeout,
    ///             MysqlxLz4defaultCompressionLevel = @var.Mysql_configuration_variables_mysqlx_lz4default_compression_level,
    ///             MysqlxLz4maxClientCompressionLevel = @var.Mysql_configuration_variables_mysqlx_lz4max_client_compression_level,
    ///             MysqlxMaxAllowedPacket = @var.Mysql_configuration_variables_mysqlx_max_allowed_packet,
    ///             MysqlxMinWorkerThreads = @var.Mysql_configuration_variables_mysqlx_min_worker_threads,
    ///             MysqlxReadTimeout = @var.Mysql_configuration_variables_mysqlx_read_timeout,
    ///             MysqlxWaitTimeout = @var.Mysql_configuration_variables_mysqlx_wait_timeout,
    ///             MysqlxWriteTimeout = @var.Mysql_configuration_variables_mysqlx_write_timeout,
    ///             MysqlxZstdDefaultCompressionLevel = @var.Mysql_configuration_variables_mysqlx_zstd_default_compression_level,
    ///             MysqlxZstdMaxClientCompressionLevel = @var.Mysql_configuration_variables_mysqlx_zstd_max_client_compression_level,
    ///             NetReadTimeout = @var.Mysql_configuration_variables_net_read_timeout,
    ///             NetWriteTimeout = @var.Mysql_configuration_variables_net_write_timeout,
    ///             ParserMaxMemSize = @var.Mysql_configuration_variables_parser_max_mem_size,
    ///             QueryAllocBlockSize = @var.Mysql_configuration_variables_query_alloc_block_size,
    ///             QueryPreallocSize = @var.Mysql_configuration_variables_query_prealloc_size,
    ///             RegexpTimeLimit = @var.Mysql_configuration_variables_regexp_time_limit,
    ///             SortBufferSize = @var.Mysql_configuration_variables_sort_buffer_size,
    ///             SqlMode = @var.Mysql_configuration_variables_sql_mode,
    ///             SqlRequirePrimaryKey = @var.Mysql_configuration_variables_sql_require_primary_key,
    ///             SqlWarnings = @var.Mysql_configuration_variables_sql_warnings,
    ///             ThreadPoolDedicatedListeners = @var.Mysql_configuration_variables_thread_pool_dedicated_listeners,
    ///             ThreadPoolMaxTransactionsLimit = @var.Mysql_configuration_variables_thread_pool_max_transactions_limit,
    ///             TimeZone = @var.Mysql_configuration_variables_time_zone,
    ///             TmpTableSize = @var.Mysql_configuration_variables_tmp_table_size,
    ///             TransactionIsolation = @var.Mysql_configuration_variables_transaction_isolation,
    ///             WaitTimeout = @var.Mysql_configuration_variables_wait_timeout,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MysqlConfigurations can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration "configurations/{configurationId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Mysql/mysqlConfiguration:MysqlConfiguration")]
    public partial class MysqlConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Output("initVariables")]
        public Output<Outputs.MysqlConfigurationInitVariables> InitVariables { get; private set; } = null!;

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Output("parentConfigurationId")]
        public Output<string> ParentConfigurationId { get; private set; } = null!;

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Output("shapeName")]
        public Output<string> ShapeName { get; private set; } = null!;

        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Output("variables")]
        public Output<Outputs.MysqlConfigurationVariables> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a MysqlConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MysqlConfiguration(string name, MysqlConfigurationArgs args, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, args ?? new MysqlConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MysqlConfiguration(string name, Input<string> id, MysqlConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MysqlConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MysqlConfiguration Get(string name, Input<string> id, MysqlConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new MysqlConfiguration(name, id, state, options);
        }
    }

    public sealed class MysqlConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Input("initVariables")]
        public Input<Inputs.MysqlConfigurationInitVariablesArgs>? InitVariables { get; set; }

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Input("parentConfigurationId")]
        public Input<string>? ParentConfigurationId { get; set; }

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Input("shapeName", required: true)]
        public Input<string> ShapeName { get; set; } = null!;

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Input("variables")]
        public Input<Inputs.MysqlConfigurationVariablesArgs>? Variables { get; set; }

        public MysqlConfigurationArgs()
        {
        }
        public static new MysqlConfigurationArgs Empty => new MysqlConfigurationArgs();
    }

    public sealed class MysqlConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the Configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The display name of the Configuration.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
        /// </summary>
        [Input("initVariables")]
        public Input<Inputs.MysqlConfigurationInitVariablesGetArgs>? InitVariables { get; set; }

        /// <summary>
        /// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
        /// </summary>
        [Input("parentConfigurationId")]
        public Input<string>? ParentConfigurationId { get; set; }

        /// <summary>
        /// The name of the associated Shape.
        /// </summary>
        [Input("shapeName")]
        public Input<string>? ShapeName { get; set; }

        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The Configuration type, DEFAULT or CUSTOM.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// User-defined service variables.
        /// </summary>
        [Input("variables")]
        public Input<Inputs.MysqlConfigurationVariablesGetArgs>? Variables { get; set; }

        public MysqlConfigurationState()
        {
        }
        public static new MysqlConfigurationState Empty => new MysqlConfigurationState();
    }
}
