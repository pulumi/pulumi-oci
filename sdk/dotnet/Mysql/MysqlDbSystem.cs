// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Mysql
{
    /// <summary>
    /// This resource provides the Mysql Db System resource in Oracle Cloud Infrastructure MySQL Database service.
    /// 
    /// Creates and launches a DB System.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testMysqlDbSystem = new Oci.Mysql.MysqlDbSystem("testMysqlDbSystem", new()
    ///     {
    ///         AvailabilityDomain = @var.Mysql_db_system_availability_domain,
    ///         CompartmentId = @var.Compartment_id,
    ///         ShapeName = @var.Mysql_shape_name,
    ///         SubnetId = oci_core_subnet.Test_subnet.Id,
    ///         AdminPassword = @var.Mysql_db_system_admin_password,
    ///         AdminUsername = @var.Mysql_db_system_admin_username,
    ///         BackupPolicy = new Oci.Mysql.Inputs.MysqlDbSystemBackupPolicyArgs
    ///         {
    ///             DefinedTags = 
    ///             {
    ///                 { "foo-namespace.bar-key", "value" },
    ///             },
    ///             FreeformTags = 
    ///             {
    ///                 { "bar-key", "value" },
    ///             },
    ///             IsEnabled = @var.Mysql_db_system_backup_policy_is_enabled,
    ///             PitrPolicy = new Oci.Mysql.Inputs.MysqlDbSystemBackupPolicyPitrPolicyArgs
    ///             {
    ///                 IsEnabled = @var.Mysql_db_system_backup_policy_pitr_policy_is_enabled,
    ///             },
    ///             RetentionInDays = @var.Mysql_db_system_backup_policy_retention_in_days,
    ///             WindowStartTime = @var.Mysql_db_system_backup_policy_window_start_time,
    ///         },
    ///         ConfigurationId = oci_audit_configuration.Test_configuration.Id,
    ///         CrashRecovery = @var.Mysql_db_system_crash_recovery,
    ///         DataStorageSizeInGb = @var.Mysql_db_system_data_storage_size_in_gb,
    ///         DatabaseManagement = @var.Mysql_db_system_database_management,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         DeletionPolicies = new[]
    ///         {
    ///             new Oci.Mysql.Inputs.MysqlDbSystemDeletionPolicyArgs
    ///             {
    ///                 AutomaticBackupRetention = @var.Mysql_db_system_deletion_policy_automatic_backup_retention,
    ///                 FinalBackup = @var.Mysql_db_system_deletion_policy_final_backup,
    ///                 IsDeleteProtected = @var.Mysql_db_system_deletion_policy_is_delete_protected,
    ///             },
    ///         },
    ///         Description = @var.Mysql_db_system_description,
    ///         DisplayName = @var.Mysql_db_system_display_name,
    ///         FaultDomain = @var.Mysql_db_system_fault_domain,
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         HostnameLabel = @var.Mysql_db_system_hostname_label,
    ///         IpAddress = @var.Mysql_db_system_ip_address,
    ///         IsHighlyAvailable = @var.Mysql_db_system_is_highly_available,
    ///         Maintenance = new Oci.Mysql.Inputs.MysqlDbSystemMaintenanceArgs
    ///         {
    ///             WindowStartTime = @var.Mysql_db_system_maintenance_window_start_time,
    ///         },
    ///         Port = @var.Mysql_db_system_port,
    ///         PortX = @var.Mysql_db_system_port_x,
    ///         SecureConnections = new Oci.Mysql.Inputs.MysqlDbSystemSecureConnectionsArgs
    ///         {
    ///             CertificateGenerationType = @var.Mysql_db_system_secure_connections_certificate_generation_type,
    ///             CertificateId = oci_apigateway_certificate.Test_certificate.Id,
    ///         },
    ///         Source = new Oci.Mysql.Inputs.MysqlDbSystemSourceArgs
    ///         {
    ///             SourceType = @var.Mysql_db_system_source_source_type,
    ///             BackupId = oci_mysql_mysql_backup.Test_backup.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// MysqlDbSystems can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Mysql/mysqlDbSystem:MysqlDbSystem test_mysql_db_system "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Mysql/mysqlDbSystem:MysqlDbSystem")]
    public partial class MysqlDbSystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The username for the administrative user.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the availability domain in which the DB System is placed.
        /// </summary>
        [Output("availabilityDomain")]
        public Output<string> AvailabilityDomain { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Backup policy as optionally used for DB System Creation.
        /// </summary>
        [Output("backupPolicy")]
        public Output<Outputs.MysqlDbSystemBackupPolicy> BackupPolicy { get; private set; } = null!;

        /// <summary>
        /// A list with a summary of all the Channels attached to the DB System.
        /// </summary>
        [Output("channels")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemChannel>> Channels { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the Configuration to be used for this DB System.
        /// </summary>
        [Output("configurationId")]
        public Output<string> ConfigurationId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
        /// </summary>
        [Output("crashRecovery")]
        public Output<string> CrashRecovery { get; private set; } = null!;

        /// <summary>
        /// The availability domain and fault domain a DB System is placed in.
        /// </summary>
        [Output("currentPlacements")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemCurrentPlacement>> CurrentPlacements { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
        /// </summary>
        [Output("dataStorageSizeInGb")]
        public Output<int> DataStorageSizeInGb { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether to enable monitoring via the Database Management service.
        /// </summary>
        [Output("databaseManagement")]
        public Output<string> DatabaseManagement { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
        /// </summary>
        [Output("deletionPolicies")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemDeletionPolicy>> DeletionPolicies { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-provided data about the DB System.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The network endpoints available for this DB System.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the fault domain in which the DB System is placed.
        /// </summary>
        [Output("faultDomain")]
        public Output<string> FaultDomain { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// A summary of a HeatWave cluster.
        /// </summary>
        [Output("heatWaveClusters")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemHeatWaveCluster>> HeatWaveClusters { get; private set; } = null!;

        /// <summary>
        /// The hostname for the primary endpoint of the DB System. Used for DNS.
        /// 
        /// The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com").
        /// 
        /// Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
        /// </summary>
        [Output("hostnameLabel")]
        public Output<string> HostnameLabel { get; private set; } = null!;

        /// <summary>
        /// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// If the DB System has a HeatWave Cluster attached.
        /// </summary>
        [Output("isHeatWaveClusterAttached")]
        public Output<bool> IsHeatWaveClusterAttached { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specifies if the DB System is highly available.
        /// 
        /// When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
        /// </summary>
        [Output("isHighlyAvailable")]
        public Output<bool> IsHighlyAvailable { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current lifecycleState.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
        /// </summary>
        [Output("maintenance")]
        public Output<Outputs.MysqlDbSystemMaintenance> Maintenance { get; private set; } = null!;

        /// <summary>
        /// The specific MySQL version identifier.
        /// </summary>
        [Output("mysqlVersion")]
        public Output<string> MysqlVersion { get; private set; } = null!;

        /// <summary>
        /// Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
        /// </summary>
        [Output("pointInTimeRecoveryDetails")]
        public Output<ImmutableArray<Outputs.MysqlDbSystemPointInTimeRecoveryDetail>> PointInTimeRecoveryDetails { get; private set; } = null!;

        /// <summary>
        /// The port for primary endpoint of the DB System to listen on.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
        /// </summary>
        [Output("portX")]
        public Output<int> PortX { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Secure connection configuration details.
        /// </summary>
        [Output("secureConnections")]
        public Output<Outputs.MysqlDbSystemSecureConnections> SecureConnections { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the shape. The shape determines the resources allocated
        /// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
        /// </summary>
        [Output("shapeName")]
        public Output<string> ShapeName { get; private set; } = null!;

        /// <summary>
        /// It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("shutdownType")]
        public Output<string?> ShutdownType { get; private set; } = null!;

        /// <summary>
        /// Parameters detailing how to provision the initial data of the system.
        /// </summary>
        [Output("source")]
        public Output<Outputs.MysqlDbSystemSource> Source { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The OCID of the subnet the DB System is associated with.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The date and time the DB System was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the DB System was last updated.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a MysqlDbSystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MysqlDbSystem(string name, MysqlDbSystemArgs args, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, args ?? new MysqlDbSystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MysqlDbSystem(string name, Input<string> id, MysqlDbSystemState? state = null, CustomResourceOptions? options = null)
            : base("oci:Mysql/mysqlDbSystem:MysqlDbSystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MysqlDbSystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MysqlDbSystem Get(string name, Input<string> id, MysqlDbSystemState? state = null, CustomResourceOptions? options = null)
        {
            return new MysqlDbSystem(name, id, state, options);
        }
    }

    public sealed class MysqlDbSystemArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the administrative user.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the availability domain in which the DB System is placed.
        /// </summary>
        [Input("availabilityDomain", required: true)]
        public Input<string> AvailabilityDomain { get; set; } = null!;

        /// <summary>
        /// (Updatable) Backup policy as optionally used for DB System Creation.
        /// </summary>
        [Input("backupPolicy")]
        public Input<Inputs.MysqlDbSystemBackupPolicyArgs>? BackupPolicy { get; set; }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the Configuration to be used for this DB System.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
        /// </summary>
        [Input("crashRecovery")]
        public Input<string>? CrashRecovery { get; set; }

        /// <summary>
        /// (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
        /// </summary>
        [Input("dataStorageSizeInGb")]
        public Input<int>? DataStorageSizeInGb { get; set; }

        /// <summary>
        /// (Updatable) Whether to enable monitoring via the Database Management service.
        /// </summary>
        [Input("databaseManagement")]
        public Input<string>? DatabaseManagement { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        [Input("deletionPolicies")]
        private InputList<Inputs.MysqlDbSystemDeletionPolicyArgs>? _deletionPolicies;

        /// <summary>
        /// (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemDeletionPolicyArgs> DeletionPolicies
        {
            get => _deletionPolicies ?? (_deletionPolicies = new InputList<Inputs.MysqlDbSystemDeletionPolicyArgs>());
            set => _deletionPolicies = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the DB System.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the fault domain in which the DB System is placed.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The hostname for the primary endpoint of the DB System. Used for DNS.
        /// 
        /// The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com").
        /// 
        /// Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
        /// </summary>
        [Input("hostnameLabel")]
        public Input<string>? HostnameLabel { get; set; }

        /// <summary>
        /// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// (Updatable) Specifies if the DB System is highly available.
        /// 
        /// When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
        /// </summary>
        [Input("isHighlyAvailable")]
        public Input<bool>? IsHighlyAvailable { get; set; }

        /// <summary>
        /// (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
        /// </summary>
        [Input("maintenance")]
        public Input<Inputs.MysqlDbSystemMaintenanceArgs>? Maintenance { get; set; }

        /// <summary>
        /// The specific MySQL version identifier.
        /// </summary>
        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        /// <summary>
        /// The port for primary endpoint of the DB System to listen on.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
        /// </summary>
        [Input("portX")]
        public Input<int>? PortX { get; set; }

        /// <summary>
        /// (Updatable) Secure connection configuration details.
        /// </summary>
        [Input("secureConnections")]
        public Input<Inputs.MysqlDbSystemSecureConnectionsArgs>? SecureConnections { get; set; }

        /// <summary>
        /// (Updatable) The name of the shape. The shape determines the resources allocated
        /// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
        /// </summary>
        [Input("shapeName", required: true)]
        public Input<string> ShapeName { get; set; } = null!;

        /// <summary>
        /// It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shutdownType")]
        public Input<string>? ShutdownType { get; set; }

        /// <summary>
        /// Parameters detailing how to provision the initial data of the system.
        /// </summary>
        [Input("source")]
        public Input<Inputs.MysqlDbSystemSourceArgs>? Source { get; set; }

        /// <summary>
        /// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the subnet the DB System is associated with.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public MysqlDbSystemArgs()
        {
        }
        public static new MysqlDbSystemArgs Empty => new MysqlDbSystemArgs();
    }

    public sealed class MysqlDbSystemState : global::Pulumi.ResourceArgs
    {
        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The password for the administrative user. The password must be between 8 and 32 characters long, and must contain at least 1 numeric character, 1 lowercase character, 1 uppercase character, and 1 special (nonalphanumeric) character.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username for the administrative user.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// The availability domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other availability domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the availability domain in which the DB System is placed.
        /// </summary>
        [Input("availabilityDomain")]
        public Input<string>? AvailabilityDomain { get; set; }

        /// <summary>
        /// (Updatable) Backup policy as optionally used for DB System Creation.
        /// </summary>
        [Input("backupPolicy")]
        public Input<Inputs.MysqlDbSystemBackupPolicyGetArgs>? BackupPolicy { get; set; }

        [Input("channels")]
        private InputList<Inputs.MysqlDbSystemChannelGetArgs>? _channels;

        /// <summary>
        /// A list with a summary of all the Channels attached to the DB System.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemChannelGetArgs> Channels
        {
            get => _channels ?? (_channels = new InputList<Inputs.MysqlDbSystemChannelGetArgs>());
            set => _channels = value;
        }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the Configuration to be used for this DB System.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// (Updatable) Whether to run the DB System with InnoDB Redo Logs and the Double Write Buffer enabled or disabled, and whether to enable or disable syncing of the Binary Logs.
        /// </summary>
        [Input("crashRecovery")]
        public Input<string>? CrashRecovery { get; set; }

        [Input("currentPlacements")]
        private InputList<Inputs.MysqlDbSystemCurrentPlacementGetArgs>? _currentPlacements;

        /// <summary>
        /// The availability domain and fault domain a DB System is placed in.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemCurrentPlacementGetArgs> CurrentPlacements
        {
            get => _currentPlacements ?? (_currentPlacements = new InputList<Inputs.MysqlDbSystemCurrentPlacementGetArgs>());
            set => _currentPlacements = value;
        }

        /// <summary>
        /// (Updatable) Initial size of the data volume in GBs that will be created and attached. Keep in mind that this only specifies the size of the database data volume, the log volume for the database will be scaled appropriately with its shape. It is required if you are creating a new database. It cannot be set if you are creating a database from a backup.
        /// </summary>
        [Input("dataStorageSizeInGb")]
        public Input<int>? DataStorageSizeInGb { get; set; }

        /// <summary>
        /// (Updatable) Whether to enable monitoring via the Database Management service.
        /// </summary>
        [Input("databaseManagement")]
        public Input<string>? DatabaseManagement { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        [Input("deletionPolicies")]
        private InputList<Inputs.MysqlDbSystemDeletionPolicyGetArgs>? _deletionPolicies;

        /// <summary>
        /// (Updatable) Policy for how the DB System and related resources should be handled at the time of its deletion.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemDeletionPolicyGetArgs> DeletionPolicies
        {
            get => _deletionPolicies ?? (_deletionPolicies = new InputList<Inputs.MysqlDbSystemDeletionPolicyGetArgs>());
            set => _deletionPolicies = value;
        }

        /// <summary>
        /// (Updatable) User-provided data about the DB System.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) The user-friendly name for the DB System. It does not have to be unique.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.MysqlDbSystemEndpointGetArgs>? _endpoints;

        /// <summary>
        /// The network endpoints available for this DB System.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.MysqlDbSystemEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// The fault domain on which to deploy the Read/Write endpoint. This defines the preferred primary instance.
        /// 
        /// In a failover scenario, the Read/Write endpoint is redirected to one of the other fault domains and the MySQL instance in that domain is promoted to the primary instance. This redirection does not affect the IP address of the DB System in any way.
        /// 
        /// For a standalone DB System, this defines the fault domain in which the DB System is placed.
        /// </summary>
        [Input("faultDomain")]
        public Input<string>? FaultDomain { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        [Input("heatWaveClusters")]
        private InputList<Inputs.MysqlDbSystemHeatWaveClusterGetArgs>? _heatWaveClusters;

        /// <summary>
        /// A summary of a HeatWave cluster.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemHeatWaveClusterGetArgs> HeatWaveClusters
        {
            get => _heatWaveClusters ?? (_heatWaveClusters = new InputList<Inputs.MysqlDbSystemHeatWaveClusterGetArgs>());
            set => _heatWaveClusters = value;
        }

        /// <summary>
        /// The hostname for the primary endpoint of the DB System. Used for DNS.
        /// 
        /// The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN) (for example, "dbsystem-1" in FQDN "dbsystem-1.subnet123.vcn1.oraclevcn.com").
        /// 
        /// Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
        /// </summary>
        [Input("hostnameLabel")]
        public Input<string>? HostnameLabel { get; set; }

        /// <summary>
        /// The IP address the DB System is configured to listen on. A private IP address of your choice to assign to the primary endpoint of the DB System. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns a private IP address from the subnet. This should be a "dotted-quad" style IPv4 address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// If the DB System has a HeatWave Cluster attached.
        /// </summary>
        [Input("isHeatWaveClusterAttached")]
        public Input<bool>? IsHeatWaveClusterAttached { get; set; }

        /// <summary>
        /// (Updatable) Specifies if the DB System is highly available.
        /// 
        /// When creating a DB System with High Availability, three instances are created and placed according to your region- and subnet-type. The secondaries are placed automatically in the other two availability or fault domains.  You can choose the preferred location of your primary instance, only.
        /// </summary>
        [Input("isHighlyAvailable")]
        public Input<bool>? IsHighlyAvailable { get; set; }

        /// <summary>
        /// Additional information about the current lifecycleState.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// (Updatable) The Maintenance Policy for the DB System or Read Replica that this model is included in. `maintenance` and `backup_policy` cannot be updated in the same request.
        /// </summary>
        [Input("maintenance")]
        public Input<Inputs.MysqlDbSystemMaintenanceGetArgs>? Maintenance { get; set; }

        /// <summary>
        /// The specific MySQL version identifier.
        /// </summary>
        [Input("mysqlVersion")]
        public Input<string>? MysqlVersion { get; set; }

        [Input("pointInTimeRecoveryDetails")]
        private InputList<Inputs.MysqlDbSystemPointInTimeRecoveryDetailGetArgs>? _pointInTimeRecoveryDetails;

        /// <summary>
        /// Point-in-time Recovery details like earliest and latest recovery time point for the DB System.
        /// </summary>
        public InputList<Inputs.MysqlDbSystemPointInTimeRecoveryDetailGetArgs> PointInTimeRecoveryDetails
        {
            get => _pointInTimeRecoveryDetails ?? (_pointInTimeRecoveryDetails = new InputList<Inputs.MysqlDbSystemPointInTimeRecoveryDetailGetArgs>());
            set => _pointInTimeRecoveryDetails = value;
        }

        /// <summary>
        /// The port for primary endpoint of the DB System to listen on.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
        /// </summary>
        [Input("portX")]
        public Input<int>? PortX { get; set; }

        /// <summary>
        /// (Updatable) Secure connection configuration details.
        /// </summary>
        [Input("secureConnections")]
        public Input<Inputs.MysqlDbSystemSecureConnectionsGetArgs>? SecureConnections { get; set; }

        /// <summary>
        /// (Updatable) The name of the shape. The shape determines the resources allocated
        /// * CPU cores and memory for VM shapes; CPU cores, memory and storage for non-VM (or bare metal) shapes. To get a list of shapes, use the [ListShapes](https://docs.cloud.oracle.com/iaas/api/#/en/mysql/20190415/ShapeSummary/ListShapes) operation.
        /// </summary>
        [Input("shapeName")]
        public Input<string>? ShapeName { get; set; }

        /// <summary>
        /// It is applicable only for stopping a DB System. Could be set to `FAST`, `SLOW` or `IMMEDIATE`. Default value is `FAST`.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("shutdownType")]
        public Input<string>? ShutdownType { get; set; }

        /// <summary>
        /// Parameters detailing how to provision the initial data of the system.
        /// </summary>
        [Input("source")]
        public Input<Inputs.MysqlDbSystemSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// (Updatable) The target state for the DB System. Could be set to `ACTIVE` or `INACTIVE`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the subnet the DB System is associated with.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The date and time the DB System was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the DB System was last updated.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public MysqlDbSystemState()
        {
        }
        public static new MysqlDbSystemState Empty => new MysqlDbSystemState();
    }
}
