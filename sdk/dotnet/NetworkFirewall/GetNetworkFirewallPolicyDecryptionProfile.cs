// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkFirewall
{
    public static class GetNetworkFirewallPolicyDecryptionProfile
    {
        /// <summary>
        /// This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
        /// 
        /// Get Decryption Profile by the given name in the context of network firewall policy.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetNetworkFirewallPolicyDecryptionProfileResult> InvokeAsync(GetNetworkFirewallPolicyDecryptionProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkFirewallPolicyDecryptionProfileResult>("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", args ?? new GetNetworkFirewallPolicyDecryptionProfileArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
        /// 
        /// Get Decryption Profile by the given name in the context of network firewall policy.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetNetworkFirewallPolicyDecryptionProfileResult> Invoke(GetNetworkFirewallPolicyDecryptionProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkFirewallPolicyDecryptionProfileResult>("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", args ?? new GetNetworkFirewallPolicyDecryptionProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
        /// 
        /// Get Decryption Profile by the given name in the context of network firewall policy.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetNetworkFirewallPolicyDecryptionProfileResult> Invoke(GetNetworkFirewallPolicyDecryptionProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkFirewallPolicyDecryptionProfileResult>("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", args ?? new GetNetworkFirewallPolicyDecryptionProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkFirewallPolicyDecryptionProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Name of the decryption profile.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public string NetworkFirewallPolicyId { get; set; } = null!;

        public GetNetworkFirewallPolicyDecryptionProfileArgs()
        {
        }
        public static new GetNetworkFirewallPolicyDecryptionProfileArgs Empty => new GetNetworkFirewallPolicyDecryptionProfileArgs();
    }

    public sealed class GetNetworkFirewallPolicyDecryptionProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Name of the decryption profile.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public Input<string> NetworkFirewallPolicyId { get; set; } = null!;

        public GetNetworkFirewallPolicyDecryptionProfileInvokeArgs()
        {
        }
        public static new GetNetworkFirewallPolicyDecryptionProfileInvokeArgs Empty => new GetNetworkFirewallPolicyDecryptionProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkFirewallPolicyDecryptionProfileResult
    {
        /// <summary>
        /// Whether to block sessions if the server's certificate uses extensions other than key usage and/or extended key usage.
        /// </summary>
        public readonly bool AreCertificateExtensionsRestricted;
        public readonly string Id;
        /// <summary>
        /// Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
        /// </summary>
        public readonly bool IsAutoIncludeAltName;
        /// <summary>
        /// Whether to block sessions if server's certificate is expired.
        /// </summary>
        public readonly bool IsExpiredCertificateBlocked;
        /// <summary>
        /// Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
        /// </summary>
        public readonly bool IsOutOfCapacityBlocked;
        /// <summary>
        /// Whether to block sessions if the revocation status check for server's certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
        /// </summary>
        public readonly bool IsRevocationStatusTimeoutBlocked;
        /// <summary>
        /// Whether to block sessions if the revocation status check for server's certificate results in "unknown".
        /// </summary>
        public readonly bool IsUnknownRevocationStatusBlocked;
        /// <summary>
        /// Whether to block sessions if SSL cipher suite is not supported.
        /// </summary>
        public readonly bool IsUnsupportedCipherBlocked;
        /// <summary>
        /// Whether to block sessions if SSL version is not supported.
        /// </summary>
        public readonly bool IsUnsupportedVersionBlocked;
        /// <summary>
        /// Whether to block sessions if server's certificate is issued by an untrusted certificate authority (CA).
        /// </summary>
        public readonly bool IsUntrustedIssuerBlocked;
        /// <summary>
        /// Unique Name of the decryption profile.
        /// </summary>
        public readonly string Name;
        public readonly string NetworkFirewallPolicyId;
        /// <summary>
        /// OCID of the Network Firewall Policy this decryption profile belongs to.
        /// </summary>
        public readonly string ParentResourceId;
        /// <summary>
        /// Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetNetworkFirewallPolicyDecryptionProfileResult(
            bool areCertificateExtensionsRestricted,

            string id,

            bool isAutoIncludeAltName,

            bool isExpiredCertificateBlocked,

            bool isOutOfCapacityBlocked,

            bool isRevocationStatusTimeoutBlocked,

            bool isUnknownRevocationStatusBlocked,

            bool isUnsupportedCipherBlocked,

            bool isUnsupportedVersionBlocked,

            bool isUntrustedIssuerBlocked,

            string name,

            string networkFirewallPolicyId,

            string parentResourceId,

            string type)
        {
            AreCertificateExtensionsRestricted = areCertificateExtensionsRestricted;
            Id = id;
            IsAutoIncludeAltName = isAutoIncludeAltName;
            IsExpiredCertificateBlocked = isExpiredCertificateBlocked;
            IsOutOfCapacityBlocked = isOutOfCapacityBlocked;
            IsRevocationStatusTimeoutBlocked = isRevocationStatusTimeoutBlocked;
            IsUnknownRevocationStatusBlocked = isUnknownRevocationStatusBlocked;
            IsUnsupportedCipherBlocked = isUnsupportedCipherBlocked;
            IsUnsupportedVersionBlocked = isUnsupportedVersionBlocked;
            IsUntrustedIssuerBlocked = isUntrustedIssuerBlocked;
            Name = name;
            NetworkFirewallPolicyId = networkFirewallPolicyId;
            ParentResourceId = parentResourceId;
            Type = type;
        }
    }
}
