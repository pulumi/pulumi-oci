// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkFirewall
{
    public static class GetNetworkFirewallPolicyDecryptionRule
    {
        /// <summary>
        /// This data source provides details about a specific Network Firewall Policy Decryption Rule resource in Oracle Cloud Infrastructure Network Firewall service.
        /// 
        /// Get Decryption Rule by the given name in the context of network firewall policy.
        /// </summary>
        public static Task<GetNetworkFirewallPolicyDecryptionRuleResult> InvokeAsync(GetNetworkFirewallPolicyDecryptionRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkFirewallPolicyDecryptionRuleResult>("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionRule:getNetworkFirewallPolicyDecryptionRule", args ?? new GetNetworkFirewallPolicyDecryptionRuleArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Network Firewall Policy Decryption Rule resource in Oracle Cloud Infrastructure Network Firewall service.
        /// 
        /// Get Decryption Rule by the given name in the context of network firewall policy.
        /// </summary>
        public static Output<GetNetworkFirewallPolicyDecryptionRuleResult> Invoke(GetNetworkFirewallPolicyDecryptionRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkFirewallPolicyDecryptionRuleResult>("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionRule:getNetworkFirewallPolicyDecryptionRule", args ?? new GetNetworkFirewallPolicyDecryptionRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkFirewallPolicyDecryptionRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the decryption rule, must be unique within the policy.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public string NetworkFirewallPolicyId { get; set; } = null!;

        public GetNetworkFirewallPolicyDecryptionRuleArgs()
        {
        }
        public static new GetNetworkFirewallPolicyDecryptionRuleArgs Empty => new GetNetworkFirewallPolicyDecryptionRuleArgs();
    }

    public sealed class GetNetworkFirewallPolicyDecryptionRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the decryption rule, must be unique within the policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public Input<string> NetworkFirewallPolicyId { get; set; } = null!;

        public GetNetworkFirewallPolicyDecryptionRuleInvokeArgs()
        {
        }
        public static new GetNetworkFirewallPolicyDecryptionRuleInvokeArgs Empty => new GetNetworkFirewallPolicyDecryptionRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkFirewallPolicyDecryptionRuleResult
    {
        /// <summary>
        /// Action:
        /// * NO_DECRYPT - Matching traffic is not decrypted.
        /// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Match criteria used in Decryption Rule used on the firewall policy rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkFirewallPolicyDecryptionRuleConditionResult> Conditions;
        /// <summary>
        /// The name of the decryption profile to use.
        /// </summary>
        public readonly string DecryptionProfile;
        public readonly string Id;
        /// <summary>
        /// Name for the decryption rule, must be unique within the policy.
        /// </summary>
        public readonly string Name;
        public readonly string NetworkFirewallPolicyId;
        /// <summary>
        /// OCID of the Network Firewall Policy this decryption rule belongs to.
        /// </summary>
        public readonly string ParentResourceId;
        /// <summary>
        /// An object which defines the position of the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkFirewallPolicyDecryptionRulePositionResult> Positions;
        public readonly string PriorityOrder;
        /// <summary>
        /// The name of a mapped secret. Its `type` must match that of the specified decryption profile.
        /// </summary>
        public readonly string Secret;

        [OutputConstructor]
        private GetNetworkFirewallPolicyDecryptionRuleResult(
            string action,

            ImmutableArray<Outputs.GetNetworkFirewallPolicyDecryptionRuleConditionResult> conditions,

            string decryptionProfile,

            string id,

            string name,

            string networkFirewallPolicyId,

            string parentResourceId,

            ImmutableArray<Outputs.GetNetworkFirewallPolicyDecryptionRulePositionResult> positions,

            string priorityOrder,

            string secret)
        {
            Action = action;
            Conditions = conditions;
            DecryptionProfile = decryptionProfile;
            Id = id;
            Name = name;
            NetworkFirewallPolicyId = networkFirewallPolicyId;
            ParentResourceId = parentResourceId;
            Positions = positions;
            PriorityOrder = priorityOrder;
            Secret = secret;
        }
    }
}
