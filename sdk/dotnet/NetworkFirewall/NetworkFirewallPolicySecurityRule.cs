// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkFirewall
{
    /// <summary>
    /// This resource provides the Network Firewall Policy Security Rule resource in Oracle Cloud Infrastructure Network Firewall service.
    /// 
    /// Creates a new Security Rule for the Network Firewall Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNetworkFirewallPolicySecurityRule = new Oci.NetworkFirewall.NetworkFirewallPolicySecurityRule("test_network_firewall_policy_security_rule", new()
    ///     {
    ///         Action = networkFirewallPolicySecurityRuleAction,
    ///         Name = networkFirewallPolicySecurityRuleName,
    ///         Condition = new Oci.NetworkFirewall.Inputs.NetworkFirewallPolicySecurityRuleConditionArgs
    ///         {
    ///             Applications = networkFirewallPolicySecurityRuleConditionApplication,
    ///             DestinationAddresses = networkFirewallPolicySecurityRuleConditionDestinationAddress,
    ///             Services = networkFirewallPolicySecurityRuleConditionService,
    ///             SourceAddresses = networkFirewallPolicySecurityRuleConditionSourceAddress,
    ///             Urls = networkFirewallPolicySecurityRuleConditionUrl,
    ///         },
    ///         NetworkFirewallPolicyId = testNetworkFirewallPolicy.Id,
    ///         Inspection = networkFirewallPolicySecurityRuleInspection,
    ///         Positions = new[]
    ///         {
    ///             new Oci.NetworkFirewall.Inputs.NetworkFirewallPolicySecurityRulePositionArgs
    ///             {
    ///                 AfterRule = networkFirewallPolicySecurityRulePositionAfterRule,
    ///                 BeforeRule = networkFirewallPolicySecurityRulePositionBeforeRule,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetworkFirewallPolicySecurityRules can be imported using the `name`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:NetworkFirewall/networkFirewallPolicySecurityRule:NetworkFirewallPolicySecurityRule test_network_firewall_policy_security_rule "networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:NetworkFirewall/networkFirewallPolicySecurityRule:NetworkFirewallPolicySecurityRule")]
    public partial class NetworkFirewallPolicySecurityRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Types of Action on the Traffic flow.
        /// * ALLOW - Allows the traffic.
        /// * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
        /// * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
        /// * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.NetworkFirewallPolicySecurityRuleCondition> Condition { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
        /// * INTRUSION_DETECTION - Intrusion Detection.
        /// * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
        /// </summary>
        [Output("inspection")]
        public Output<string?> Inspection { get; private set; } = null!;

        /// <summary>
        /// Name for the Security rule, must be unique within the policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Output("networkFirewallPolicyId")]
        public Output<string> NetworkFirewallPolicyId { get; private set; } = null!;

        /// <summary>
        /// OCID of the Network Firewall Policy this security rule belongs to.
        /// </summary>
        [Output("parentResourceId")]
        public Output<string> ParentResourceId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
        /// </summary>
        [Output("positions")]
        public Output<ImmutableArray<Outputs.NetworkFirewallPolicySecurityRulePosition>> Positions { get; private set; } = null!;

        [Output("priorityOrder")]
        public Output<string?> PriorityOrder { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkFirewallPolicySecurityRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkFirewallPolicySecurityRule(string name, NetworkFirewallPolicySecurityRuleArgs args, CustomResourceOptions? options = null)
            : base("oci:NetworkFirewall/networkFirewallPolicySecurityRule:NetworkFirewallPolicySecurityRule", name, args ?? new NetworkFirewallPolicySecurityRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkFirewallPolicySecurityRule(string name, Input<string> id, NetworkFirewallPolicySecurityRuleState? state = null, CustomResourceOptions? options = null)
            : base("oci:NetworkFirewall/networkFirewallPolicySecurityRule:NetworkFirewallPolicySecurityRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkFirewallPolicySecurityRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkFirewallPolicySecurityRule Get(string name, Input<string> id, NetworkFirewallPolicySecurityRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkFirewallPolicySecurityRule(name, id, state, options);
        }
    }

    public sealed class NetworkFirewallPolicySecurityRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Types of Action on the Traffic flow.
        /// * ALLOW - Allows the traffic.
        /// * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
        /// * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
        /// * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
        /// </summary>
        [Input("condition", required: true)]
        public Input<Inputs.NetworkFirewallPolicySecurityRuleConditionArgs> Condition { get; set; } = null!;

        /// <summary>
        /// (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
        /// * INTRUSION_DETECTION - Intrusion Detection.
        /// * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
        /// </summary>
        [Input("inspection")]
        public Input<string>? Inspection { get; set; }

        /// <summary>
        /// Name for the Security rule, must be unique within the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public Input<string> NetworkFirewallPolicyId { get; set; } = null!;

        [Input("positions")]
        private InputList<Inputs.NetworkFirewallPolicySecurityRulePositionArgs>? _positions;

        /// <summary>
        /// (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicySecurityRulePositionArgs> Positions
        {
            get => _positions ?? (_positions = new InputList<Inputs.NetworkFirewallPolicySecurityRulePositionArgs>());
            set => _positions = value;
        }

        [Input("priorityOrder")]
        public Input<string>? PriorityOrder { get; set; }

        public NetworkFirewallPolicySecurityRuleArgs()
        {
        }
        public static new NetworkFirewallPolicySecurityRuleArgs Empty => new NetworkFirewallPolicySecurityRuleArgs();
    }

    public sealed class NetworkFirewallPolicySecurityRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Types of Action on the Traffic flow.
        /// * ALLOW - Allows the traffic.
        /// * DROP - Silently drops the traffic, e.g. without sending a TCP reset.
        /// * REJECT - Rejects the traffic, sending a TCP reset to client and/or server as applicable.
        /// * INSPECT - Inspects traffic for vulnerability as specified in `inspection`, which may result in rejection.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// (Updatable) Criteria to evaluate against network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic. The resources mentioned must already be present in the policy before being referenced in the rule.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.NetworkFirewallPolicySecurityRuleConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// (Updatable) Type of inspection to affect the traffic flow. This is only applicable if action is INSPECT.
        /// * INTRUSION_DETECTION - Intrusion Detection.
        /// * INTRUSION_PREVENTION - Intrusion Detection and Prevention. Traffic classified as potentially malicious will be rejected as described in `type`.
        /// </summary>
        [Input("inspection")]
        public Input<string>? Inspection { get; set; }

        /// <summary>
        /// Name for the Security rule, must be unique within the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId")]
        public Input<string>? NetworkFirewallPolicyId { get; set; }

        /// <summary>
        /// OCID of the Network Firewall Policy this security rule belongs to.
        /// </summary>
        [Input("parentResourceId")]
        public Input<string>? ParentResourceId { get; set; }

        [Input("positions")]
        private InputList<Inputs.NetworkFirewallPolicySecurityRulePositionGetArgs>? _positions;

        /// <summary>
        /// (Updatable) An object which defines the position of the rule. Only one of the following position references should be provided.
        /// </summary>
        public InputList<Inputs.NetworkFirewallPolicySecurityRulePositionGetArgs> Positions
        {
            get => _positions ?? (_positions = new InputList<Inputs.NetworkFirewallPolicySecurityRulePositionGetArgs>());
            set => _positions = value;
        }

        [Input("priorityOrder")]
        public Input<string>? PriorityOrder { get; set; }

        public NetworkFirewallPolicySecurityRuleState()
        {
        }
        public static new NetworkFirewallPolicySecurityRuleState Empty => new NetworkFirewallPolicySecurityRuleState();
    }
}
