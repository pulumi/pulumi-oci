// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkFirewall
{
    /// <summary>
    /// This resource provides the Network Firewall Policy Tunnel Inspection Rule resource in Oracle Cloud Infrastructure Network Firewall service.
    /// 
    /// Creates a new tunnel inspection rule for the network firewall policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNetworkFirewallPolicyTunnelInspectionRule = new Oci.NetworkFirewall.NetworkFirewallPolicyTunnelInspectionRule("test_network_firewall_policy_tunnel_inspection_rule", new()
    ///     {
    ///         Condition = new Oci.NetworkFirewall.Inputs.NetworkFirewallPolicyTunnelInspectionRuleConditionArgs
    ///         {
    ///             DestinationAddresses = networkFirewallPolicyTunnelInspectionRuleConditionDestinationAddress,
    ///             SourceAddresses = networkFirewallPolicyTunnelInspectionRuleConditionSourceAddress,
    ///         },
    ///         Name = networkFirewallPolicyTunnelInspectionRuleName,
    ///         NetworkFirewallPolicyId = testNetworkFirewallPolicy.Id,
    ///         Protocol = networkFirewallPolicyTunnelInspectionRuleProtocol,
    ///         Action = networkFirewallPolicyTunnelInspectionRuleAction,
    ///         Position = new Oci.NetworkFirewall.Inputs.NetworkFirewallPolicyTunnelInspectionRulePositionArgs
    ///         {
    ///             AfterRule = networkFirewallPolicyTunnelInspectionRulePositionAfterRule,
    ///             BeforeRule = networkFirewallPolicyTunnelInspectionRulePositionBeforeRule,
    ///         },
    ///         Profile = new Oci.NetworkFirewall.Inputs.NetworkFirewallPolicyTunnelInspectionRuleProfileArgs
    ///         {
    ///             MustReturnTrafficToSource = networkFirewallPolicyTunnelInspectionRuleProfileMustReturnTrafficToSource,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetworkFirewallPolicyTunnelInspectionRules can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule test_network_firewall_policy_tunnel_inspection_rule "networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule")]
    public partial class NetworkFirewallPolicyTunnelInspectionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Types of Inspect Action on the traffic flow.
        /// * INSPECT - Inspect the traffic.
        /// * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
        /// </summary>
        [Output("condition")]
        public Output<Outputs.NetworkFirewallPolicyTunnelInspectionRuleCondition> Condition { get; private set; } = null!;

        /// <summary>
        /// Name for the Tunnel Inspection Rule, must be unique within the policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Output("networkFirewallPolicyId")]
        public Output<string> NetworkFirewallPolicyId { get; private set; } = null!;

        /// <summary>
        /// OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
        /// </summary>
        [Output("parentResourceId")]
        public Output<string> ParentResourceId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) An object which defines the position of the rule.
        /// </summary>
        [Output("position")]
        public Output<Outputs.NetworkFirewallPolicyTunnelInspectionRulePosition> Position { get; private set; } = null!;

        /// <summary>
        /// The priority order in which this rule should be evaluated
        /// </summary>
        [Output("priorityOrder")]
        public Output<string> PriorityOrder { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
        /// </summary>
        [Output("profile")]
        public Output<Outputs.NetworkFirewallPolicyTunnelInspectionRuleProfile> Profile { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
        /// * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkFirewallPolicyTunnelInspectionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkFirewallPolicyTunnelInspectionRule(string name, NetworkFirewallPolicyTunnelInspectionRuleArgs args, CustomResourceOptions? options = null)
            : base("oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule", name, args ?? new NetworkFirewallPolicyTunnelInspectionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkFirewallPolicyTunnelInspectionRule(string name, Input<string> id, NetworkFirewallPolicyTunnelInspectionRuleState? state = null, CustomResourceOptions? options = null)
            : base("oci:NetworkFirewall/networkFirewallPolicyTunnelInspectionRule:NetworkFirewallPolicyTunnelInspectionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkFirewallPolicyTunnelInspectionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkFirewallPolicyTunnelInspectionRule Get(string name, Input<string> id, NetworkFirewallPolicyTunnelInspectionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkFirewallPolicyTunnelInspectionRule(name, id, state, options);
        }
    }

    public sealed class NetworkFirewallPolicyTunnelInspectionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Types of Inspect Action on the traffic flow.
        /// * INSPECT - Inspect the traffic.
        /// * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
        /// </summary>
        [Input("condition", required: true)]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRuleConditionArgs> Condition { get; set; } = null!;

        /// <summary>
        /// Name for the Tunnel Inspection Rule, must be unique within the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId", required: true)]
        public Input<string> NetworkFirewallPolicyId { get; set; } = null!;

        /// <summary>
        /// (Updatable) An object which defines the position of the rule.
        /// </summary>
        [Input("position")]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRulePositionArgs>? Position { get; set; }

        /// <summary>
        /// (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
        /// </summary>
        [Input("profile")]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRuleProfileArgs>? Profile { get; set; }

        /// <summary>
        /// (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
        /// * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public NetworkFirewallPolicyTunnelInspectionRuleArgs()
        {
        }
        public static new NetworkFirewallPolicyTunnelInspectionRuleArgs Empty => new NetworkFirewallPolicyTunnelInspectionRuleArgs();
    }

    public sealed class NetworkFirewallPolicyTunnelInspectionRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Types of Inspect Action on the traffic flow.
        /// * INSPECT - Inspect the traffic.
        /// * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// (Updatable) Criteria to evaluate against incoming network traffic. A match occurs when at least one item in the array associated with each specified property corresponds with the relevant aspect of the traffic.
        /// </summary>
        [Input("condition")]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRuleConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// Name for the Tunnel Inspection Rule, must be unique within the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique Network Firewall Policy identifier
        /// </summary>
        [Input("networkFirewallPolicyId")]
        public Input<string>? NetworkFirewallPolicyId { get; set; }

        /// <summary>
        /// OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
        /// </summary>
        [Input("parentResourceId")]
        public Input<string>? ParentResourceId { get; set; }

        /// <summary>
        /// (Updatable) An object which defines the position of the rule.
        /// </summary>
        [Input("position")]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRulePositionGetArgs>? Position { get; set; }

        /// <summary>
        /// The priority order in which this rule should be evaluated
        /// </summary>
        [Input("priorityOrder")]
        public Input<string>? PriorityOrder { get; set; }

        /// <summary>
        /// (Updatable) Vxlan Inspect profile used in Vxlan Tunnel Inspection Rules.
        /// </summary>
        [Input("profile")]
        public Input<Inputs.NetworkFirewallPolicyTunnelInspectionRuleProfileGetArgs>? Profile { get; set; }

        /// <summary>
        /// (Updatable) Types of Tunnel Inspection Protocol to be applied on the traffic.
        /// * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        public NetworkFirewallPolicyTunnelInspectionRuleState()
        {
        }
        public static new NetworkFirewallPolicyTunnelInspectionRuleState Empty => new NetworkFirewallPolicyTunnelInspectionRuleState();
    }
}
