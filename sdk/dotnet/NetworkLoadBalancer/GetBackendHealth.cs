// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkLoadBalancer
{
    public static class GetBackendHealth
    {
        /// <summary>
        /// This data source provides details about a specific Backend Health resource in Oracle Cloud Infrastructure Network Load Balancer service.
        /// 
        /// Retrieves the current health status of the specified backend server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBackendHealth = Oci.NetworkLoadBalancer.GetBackendHealth.Invoke(new()
        ///     {
        ///         BackendName = testBackend.Name,
        ///         BackendSetName = testBackendSet.Name,
        ///         NetworkLoadBalancerId = testNetworkLoadBalancer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackendHealthResult> InvokeAsync(GetBackendHealthArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendHealthResult>("oci:NetworkLoadBalancer/getBackendHealth:getBackendHealth", args ?? new GetBackendHealthArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Backend Health resource in Oracle Cloud Infrastructure Network Load Balancer service.
        /// 
        /// Retrieves the current health status of the specified backend server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBackendHealth = Oci.NetworkLoadBalancer.GetBackendHealth.Invoke(new()
        ///     {
        ///         BackendName = testBackend.Name,
        ///         BackendSetName = testBackendSet.Name,
        ///         NetworkLoadBalancerId = testNetworkLoadBalancer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendHealthResult> Invoke(GetBackendHealthInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendHealthResult>("oci:NetworkLoadBalancer/getBackendHealth:getBackendHealth", args ?? new GetBackendHealthInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Backend Health resource in Oracle Cloud Infrastructure Network Load Balancer service.
        /// 
        /// Retrieves the current health status of the specified backend server.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testBackendHealth = Oci.NetworkLoadBalancer.GetBackendHealth.Invoke(new()
        ///     {
        ///         BackendName = testBackend.Name,
        ///         BackendSetName = testBackendSet.Name,
        ///         NetworkLoadBalancerId = testNetworkLoadBalancer.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackendHealthResult> Invoke(GetBackendHealthInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendHealthResult>("oci:NetworkLoadBalancer/getBackendHealth:getBackendHealth", args ?? new GetBackendHealthInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendHealthArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the backend server to retrieve health status for. If the backend was created with an explicitly specified name, that name should be used here. If the backend was created without explicitly specifying the name, but was created using ipAddress, this is specified as &lt;ipAddress&gt;:&lt;port&gt;. If the backend was created without explicitly specifying the name, but was created using targetId, this is specified as &lt;targetId&gt;:&lt;port&gt;.  Example: `10.0.0.3:8080` or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:8080`
        /// </summary>
        [Input("backendName", required: true)]
        public string BackendName { get; set; } = null!;

        /// <summary>
        /// The name of the backend set associated with the backend server for which to retrieve the health status.  Example: `example_backend_set`
        /// </summary>
        [Input("backendSetName", required: true)]
        public string BackendSetName { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        [Input("networkLoadBalancerId", required: true)]
        public string NetworkLoadBalancerId { get; set; } = null!;

        public GetBackendHealthArgs()
        {
        }
        public static new GetBackendHealthArgs Empty => new GetBackendHealthArgs();
    }

    public sealed class GetBackendHealthInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the backend server to retrieve health status for. If the backend was created with an explicitly specified name, that name should be used here. If the backend was created without explicitly specifying the name, but was created using ipAddress, this is specified as &lt;ipAddress&gt;:&lt;port&gt;. If the backend was created without explicitly specifying the name, but was created using targetId, this is specified as &lt;targetId&gt;:&lt;port&gt;.  Example: `10.0.0.3:8080` or `ocid1.privateip..oc1.&lt;var&gt;&amp;lt;unique_ID&amp;gt;&lt;/var&gt;:8080`
        /// </summary>
        [Input("backendName", required: true)]
        public Input<string> BackendName { get; set; } = null!;

        /// <summary>
        /// The name of the backend set associated with the backend server for which to retrieve the health status.  Example: `example_backend_set`
        /// </summary>
        [Input("backendSetName", required: true)]
        public Input<string> BackendSetName { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        [Input("networkLoadBalancerId", required: true)]
        public Input<string> NetworkLoadBalancerId { get; set; } = null!;

        public GetBackendHealthInvokeArgs()
        {
        }
        public static new GetBackendHealthInvokeArgs Empty => new GetBackendHealthInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendHealthResult
    {
        public readonly string BackendName;
        public readonly string BackendSetName;
        /// <summary>
        /// A list of the most recent health check results returned for the specified backend server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendHealthHealthCheckResultResult> HealthCheckResults;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NetworkLoadBalancerId;
        /// <summary>
        /// The general health status of the specified backend server.
        /// *   **OK:**  All health check probes return `OK`
        /// *   **WARNING:** At least one of the health check probes does not return `OK`
        /// *   **CRITICAL:** None of the health check probes return `OK`. *
        /// *   **UNKNOWN:** One of the health checks probes return `UNKNOWN`,
        /// *   or the system is unable to retrieve metrics at this time.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetBackendHealthResult(
            string backendName,

            string backendSetName,

            ImmutableArray<Outputs.GetBackendHealthHealthCheckResultResult> healthCheckResults,

            string id,

            string networkLoadBalancerId,

            string status)
        {
            BackendName = backendName;
            BackendSetName = backendSetName;
            HealthCheckResults = healthCheckResults;
            Id = id;
            NetworkLoadBalancerId = networkLoadBalancerId;
            Status = status;
        }
    }
}
