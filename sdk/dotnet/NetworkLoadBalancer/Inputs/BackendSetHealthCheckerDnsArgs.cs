// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkLoadBalancer.Inputs
{

    public sealed class BackendSetHealthCheckerDnsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The absolute fully-qualified domain name to perform periodic DNS queries. If not provided, an extra dot will be added at the end of a domain name during the query.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// (Updatable) The class the dns health check query to use; either IN or CH.  Example: `IN`
        /// </summary>
        [Input("queryClass")]
        public Input<string>? QueryClass { get; set; }

        /// <summary>
        /// (Updatable) The type the dns health check query to use; A, AAAA, TXT.  Example: `A`
        /// </summary>
        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        [Input("rcodes")]
        private InputList<string>? _rcodes;

        /// <summary>
        /// (Updatable) An array that represents accepetable RCODE values for DNS query response. Example: ["NOERROR", "NXDOMAIN"]
        /// </summary>
        public InputList<string> Rcodes
        {
            get => _rcodes ?? (_rcodes = new InputList<string>());
            set => _rcodes = value;
        }

        /// <summary>
        /// (Updatable) DNS transport protocol; either UDP or TCP.  Example: `UDP`
        /// </summary>
        [Input("transportProtocol")]
        public Input<string>? TransportProtocol { get; set; }

        public BackendSetHealthCheckerDnsArgs()
        {
        }
        public static new BackendSetHealthCheckerDnsArgs Empty => new BackendSetHealthCheckerDnsArgs();
    }
}
