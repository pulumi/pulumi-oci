// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkLoadBalancer
{
    /// <summary>
    /// This resource provides the Network Load Balancers Backend Sets Unified resource in Oracle Cloud Infrastructure Network Load Balancer service.
    /// 
    /// Adds a backend set to a network load balancer.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testNetworkLoadBalancersBackendSetsUnified = new Oci.NetworkLoadBalancer.NetworkLoadBalancersBackendSetsUnified("test_network_load_balancers_backend_sets_unified", new()
    ///     {
    ///         HealthChecker = new Oci.NetworkLoadBalancer.Inputs.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerArgs
    ///         {
    ///             Protocol = networkLoadBalancersBackendSetsUnifiedHealthCheckerProtocol,
    ///             Dns = new Oci.NetworkLoadBalancer.Inputs.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs
    ///             {
    ///                 DomainName = testDomain.Name,
    ///                 QueryClass = networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsQueryClass,
    ///                 QueryType = networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsQueryType,
    ///                 Rcodes = networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsRcodes,
    ///                 TransportProtocol = networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsTransportProtocol,
    ///             },
    ///             IntervalInMillis = networkLoadBalancersBackendSetsUnifiedHealthCheckerIntervalInMillis,
    ///             Port = networkLoadBalancersBackendSetsUnifiedHealthCheckerPort,
    ///             RequestData = networkLoadBalancersBackendSetsUnifiedHealthCheckerRequestData,
    ///             ResponseBodyRegex = networkLoadBalancersBackendSetsUnifiedHealthCheckerResponseBodyRegex,
    ///             ResponseData = networkLoadBalancersBackendSetsUnifiedHealthCheckerResponseData,
    ///             Retries = networkLoadBalancersBackendSetsUnifiedHealthCheckerRetries,
    ///             ReturnCode = networkLoadBalancersBackendSetsUnifiedHealthCheckerReturnCode,
    ///             TimeoutInMillis = networkLoadBalancersBackendSetsUnifiedHealthCheckerTimeoutInMillis,
    ///             UrlPath = networkLoadBalancersBackendSetsUnifiedHealthCheckerUrlPath,
    ///         },
    ///         Name = networkLoadBalancersBackendSetsUnifiedName,
    ///         NetworkLoadBalancerId = testNetworkLoadBalancer.Id,
    ///         Policy = networkLoadBalancersBackendSetsUnifiedPolicy,
    ///         Backends = new[]
    ///         {
    ///             new Oci.NetworkLoadBalancer.Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendArgs
    ///             {
    ///                 Port = networkLoadBalancersBackendSetsUnifiedBackendsPort,
    ///                 IpAddress = networkLoadBalancersBackendSetsUnifiedBackendsIpAddress,
    ///                 IsBackup = networkLoadBalancersBackendSetsUnifiedBackendsIsBackup,
    ///                 IsDrain = networkLoadBalancersBackendSetsUnifiedBackendsIsDrain,
    ///                 IsOffline = networkLoadBalancersBackendSetsUnifiedBackendsIsOffline,
    ///                 Name = networkLoadBalancersBackendSetsUnifiedBackendsName,
    ///                 TargetId = testTarget.Id,
    ///                 Weight = networkLoadBalancersBackendSetsUnifiedBackendsWeight,
    ///             },
    ///         },
    ///         IpVersion = networkLoadBalancersBackendSetsUnifiedIpVersion,
    ///         IsFailOpen = networkLoadBalancersBackendSetsUnifiedIsFailOpen,
    ///         IsInstantFailoverEnabled = networkLoadBalancersBackendSetsUnifiedIsInstantFailoverEnabled,
    ///         IsPreserveSource = networkLoadBalancersBackendSetsUnifiedIsPreserveSource,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetworkLoadBalancersBackendSetsUnified can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified test_network_load_balancers_backend_sets_unified "networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified")]
    public partial class NetworkLoadBalancersBackendSetsUnified : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) An array of backends to be associated with the backend set.
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.NetworkLoadBalancersBackendSetsUnifiedBackend>> Backends { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
        /// </summary>
        [Output("healthChecker")]
        public Output<Outputs.NetworkLoadBalancersBackendSetsUnifiedHealthChecker> HealthChecker { get; private set; } = null!;

        /// <summary>
        /// (Updatable) IP version associated with the backend set.
        /// </summary>
        [Output("ipVersion")]
        public Output<string> IpVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
        /// </summary>
        [Output("isFailOpen")]
        public Output<bool> IsFailOpen { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
        /// </summary>
        [Output("isInstantFailoverEnabled")]
        public Output<bool> IsInstantFailoverEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
        /// </summary>
        [Output("isPreserveSource")]
        public Output<bool> IsPreserveSource { get; private set; } = null!;

        /// <summary>
        /// A user-friendly name for the backend set that must be unique and cannot be changed.
        /// 
        /// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
        /// 
        /// Example: `example_backend_set`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        [Output("networkLoadBalancerId")]
        public Output<string> NetworkLoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkLoadBalancersBackendSetsUnified resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkLoadBalancersBackendSetsUnified(string name, NetworkLoadBalancersBackendSetsUnifiedArgs args, CustomResourceOptions? options = null)
            : base("oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified", name, args ?? new NetworkLoadBalancersBackendSetsUnifiedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkLoadBalancersBackendSetsUnified(string name, Input<string> id, NetworkLoadBalancersBackendSetsUnifiedState? state = null, CustomResourceOptions? options = null)
            : base("oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkLoadBalancersBackendSetsUnified resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkLoadBalancersBackendSetsUnified Get(string name, Input<string> id, NetworkLoadBalancersBackendSetsUnifiedState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkLoadBalancersBackendSetsUnified(name, id, state, options);
        }
    }

    public sealed class NetworkLoadBalancersBackendSetsUnifiedArgs : global::Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendArgs>? _backends;

        /// <summary>
        /// (Updatable) An array of backends to be associated with the backend set.
        /// </summary>
        public InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
        /// </summary>
        [Input("healthChecker", required: true)]
        public Input<Inputs.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerArgs> HealthChecker { get; set; } = null!;

        /// <summary>
        /// (Updatable) IP version associated with the backend set.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
        /// </summary>
        [Input("isFailOpen")]
        public Input<bool>? IsFailOpen { get; set; }

        /// <summary>
        /// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
        /// </summary>
        [Input("isInstantFailoverEnabled")]
        public Input<bool>? IsInstantFailoverEnabled { get; set; }

        /// <summary>
        /// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
        /// </summary>
        [Input("isPreserveSource")]
        public Input<bool>? IsPreserveSource { get; set; }

        /// <summary>
        /// A user-friendly name for the backend set that must be unique and cannot be changed.
        /// 
        /// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
        /// 
        /// Example: `example_backend_set`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        [Input("networkLoadBalancerId", required: true)]
        public Input<string> NetworkLoadBalancerId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        public NetworkLoadBalancersBackendSetsUnifiedArgs()
        {
        }
        public static new NetworkLoadBalancersBackendSetsUnifiedArgs Empty => new NetworkLoadBalancersBackendSetsUnifiedArgs();
    }

    public sealed class NetworkLoadBalancersBackendSetsUnifiedState : global::Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendGetArgs>? _backends;

        /// <summary>
        /// (Updatable) An array of backends to be associated with the backend set.
        /// </summary>
        public InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.NetworkLoadBalancersBackendSetsUnifiedBackendGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
        /// </summary>
        [Input("healthChecker")]
        public Input<Inputs.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerGetArgs>? HealthChecker { get; set; }

        /// <summary>
        /// (Updatable) IP version associated with the backend set.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
        /// </summary>
        [Input("isFailOpen")]
        public Input<bool>? IsFailOpen { get; set; }

        /// <summary>
        /// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
        /// </summary>
        [Input("isInstantFailoverEnabled")]
        public Input<bool>? IsInstantFailoverEnabled { get; set; }

        /// <summary>
        /// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
        /// </summary>
        [Input("isPreserveSource")]
        public Input<bool>? IsPreserveSource { get; set; }

        /// <summary>
        /// A user-friendly name for the backend set that must be unique and cannot be changed.
        /// 
        /// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
        /// 
        /// Example: `example_backend_set`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        [Input("networkLoadBalancerId")]
        public Input<string>? NetworkLoadBalancerId { get; set; }

        /// <summary>
        /// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public NetworkLoadBalancersBackendSetsUnifiedState()
        {
        }
        public static new NetworkLoadBalancersBackendSetsUnifiedState Empty => new NetworkLoadBalancersBackendSetsUnifiedState();
    }
}
