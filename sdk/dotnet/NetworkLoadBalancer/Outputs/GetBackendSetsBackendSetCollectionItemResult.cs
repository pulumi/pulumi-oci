// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.NetworkLoadBalancer.Outputs
{

    [OutputType]
    public sealed class GetBackendSetsBackendSetCollectionItemResult
    {
        /// <summary>
        /// If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
        /// </summary>
        public readonly bool AreOperationallyActiveBackendsPreferred;
        /// <summary>
        /// An array of backends.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendSetsBackendSetCollectionItemBackendResult> Backends;
        /// <summary>
        /// The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-management.htm).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendSetsBackendSetCollectionItemHealthCheckerResult> HealthCheckers;
        public readonly string Id;
        /// <summary>
        /// IP version associated with the backend set.
        /// </summary>
        public readonly string IpVersion;
        /// <summary>
        /// If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
        /// </summary>
        public readonly bool IsFailOpen;
        /// <summary>
        /// If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
        /// </summary>
        public readonly bool IsInstantFailoverEnabled;
        /// <summary>
        /// If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
        /// </summary>
        public readonly bool IsInstantFailoverTcpResetEnabled;
        /// <summary>
        /// If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
        /// </summary>
        public readonly bool IsPreserveSource;
        /// <summary>
        /// A user-friendly name for the backend set that must be unique and cannot be changed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
        /// </summary>
        public readonly string NetworkLoadBalancerId;
        /// <summary>
        /// The network load balancer policy for the backend set.  Example: `FIVE_TUPLE`
        /// </summary>
        public readonly string Policy;

        [OutputConstructor]
        private GetBackendSetsBackendSetCollectionItemResult(
            bool areOperationallyActiveBackendsPreferred,

            ImmutableArray<Outputs.GetBackendSetsBackendSetCollectionItemBackendResult> backends,

            ImmutableArray<Outputs.GetBackendSetsBackendSetCollectionItemHealthCheckerResult> healthCheckers,

            string id,

            string ipVersion,

            bool isFailOpen,

            bool isInstantFailoverEnabled,

            bool isInstantFailoverTcpResetEnabled,

            bool isPreserveSource,

            string name,

            string networkLoadBalancerId,

            string policy)
        {
            AreOperationallyActiveBackendsPreferred = areOperationallyActiveBackendsPreferred;
            Backends = backends;
            HealthCheckers = healthCheckers;
            Id = id;
            IpVersion = ipVersion;
            IsFailOpen = isFailOpen;
            IsInstantFailoverEnabled = isInstantFailoverEnabled;
            IsInstantFailoverTcpResetEnabled = isInstantFailoverTcpResetEnabled;
            IsPreserveSource = isPreserveSource;
            Name = name;
            NetworkLoadBalancerId = networkLoadBalancerId;
            Policy = policy;
        }
    }
}
