// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Nosql
{
    public static class GetIndex
    {
        /// <summary>
        /// This data source provides details about a specific Index resource in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get information about a single index.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIndex = Oci.Nosql.GetIndex.Invoke(new()
        ///     {
        ///         IndexName = oci_nosql_index.Test_index.Name,
        ///         TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIndexResult> InvokeAsync(GetIndexArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIndexResult>("oci:Nosql/getIndex:getIndex", args ?? new GetIndexArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Index resource in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get information about a single index.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIndex = Oci.Nosql.GetIndex.Invoke(new()
        ///     {
        ///         IndexName = oci_nosql_index.Test_index.Name,
        ///         TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIndexResult> Invoke(GetIndexInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIndexResult>("oci:Nosql/getIndex:getIndex", args ?? new GetIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndexArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The name of a table's index.
        /// </summary>
        [Input("indexName", required: true)]
        public string IndexName { get; set; } = null!;

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public string TableNameOrId { get; set; } = null!;

        public GetIndexArgs()
        {
        }
        public static new GetIndexArgs Empty => new GetIndexArgs();
    }

    public sealed class GetIndexInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The name of a table's index.
        /// </summary>
        [Input("indexName", required: true)]
        public Input<string> IndexName { get; set; } = null!;

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public Input<string> TableNameOrId { get; set; } = null!;

        public GetIndexInvokeArgs()
        {
        }
        public static new GetIndexInvokeArgs Empty => new GetIndexInvokeArgs();
    }


    [OutputType]
    public sealed class GetIndexResult
    {
        /// <summary>
        /// Compartment Identifier.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string Id;
        public readonly string IndexName;
        public readonly bool IsIfNotExists;
        /// <summary>
        /// A set of keys for a secondary index.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIndexKeyResult> Keys;
        /// <summary>
        /// A message describing the current state in more detail.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Index name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The state of an index.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// the OCID of the table to which this index belongs.
        /// </summary>
        public readonly string TableId;
        /// <summary>
        /// The name of the table to which this index belongs.
        /// </summary>
        public readonly string TableName;
        public readonly string TableNameOrId;

        [OutputConstructor]
        private GetIndexResult(
            string compartmentId,

            string id,

            string indexName,

            bool isIfNotExists,

            ImmutableArray<Outputs.GetIndexKeyResult> keys,

            string lifecycleDetails,

            string name,

            string state,

            string tableId,

            string tableName,

            string tableNameOrId)
        {
            CompartmentId = compartmentId;
            Id = id;
            IndexName = indexName;
            IsIfNotExists = isIfNotExists;
            Keys = keys;
            LifecycleDetails = lifecycleDetails;
            Name = name;
            State = state;
            TableId = tableId;
            TableName = tableName;
            TableNameOrId = tableNameOrId;
        }
    }
}
