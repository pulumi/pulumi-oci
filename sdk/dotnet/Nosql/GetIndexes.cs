// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Nosql
{
    public static class GetIndexes
    {
        /// <summary>
        /// This data source provides the list of Indexes in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get a list of indexes on a table.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testIndexes = Output.Create(Oci.Nosql.GetIndexes.InvokeAsync(new Oci.Nosql.GetIndexesArgs
        ///         {
        ///             TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Index_name,
        ///             State = @var.Index_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIndexesResult> InvokeAsync(GetIndexesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIndexesResult>("oci:Nosql/getIndexes:getIndexes", args ?? new GetIndexesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Indexes in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get a list of indexes on a table.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testIndexes = Output.Create(Oci.Nosql.GetIndexes.InvokeAsync(new Oci.Nosql.GetIndexesArgs
        ///         {
        ///             TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Index_name,
        ///             State = @var.Index_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIndexesResult> Invoke(GetIndexesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIndexesResult>("oci:Nosql/getIndexes:getIndexes", args ?? new GetIndexesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndexesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetIndexesFilterArgs>? _filters;
        public List<Inputs.GetIndexesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIndexesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A shell-globbing-style (*?[]) filter for names.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter list by the lifecycle state of the item.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public string TableNameOrId { get; set; } = null!;

        public GetIndexesArgs()
        {
        }
    }

    public sealed class GetIndexesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetIndexesFilterInputArgs>? _filters;
        public InputList<Inputs.GetIndexesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetIndexesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A shell-globbing-style (*?[]) filter for names.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter list by the lifecycle state of the item.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public Input<string> TableNameOrId { get; set; } = null!;

        public GetIndexesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIndexesResult
    {
        /// <summary>
        /// Compartment Identifier.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetIndexesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of index_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIndexesIndexCollectionResult> IndexCollections;
        /// <summary>
        /// Index name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The state of an index.
        /// </summary>
        public readonly string? State;
        public readonly string TableNameOrId;

        [OutputConstructor]
        private GetIndexesResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetIndexesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetIndexesIndexCollectionResult> indexCollections,

            string? name,

            string? state,

            string tableNameOrId)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IndexCollections = indexCollections;
            Name = name;
            State = state;
            TableNameOrId = tableNameOrId;
        }
    }
}
