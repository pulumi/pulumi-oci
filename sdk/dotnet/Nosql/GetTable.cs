// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Nosql
{
    public static class GetTable
    {
        /// <summary>
        /// This data source provides details about a specific Table resource in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get table info by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTable = Oci.Nosql.GetTable.Invoke(new()
        ///     {
        ///         TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("oci:Nosql/getTable:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Table resource in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get table info by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTable = Oci.Nosql.GetTable.Invoke(new()
        ///     {
        ///         TableNameOrId = oci_nosql_table_name_or.Test_table_name_or.Id,
        ///         CompartmentId = @var.Compartment_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTableResult>("oci:Nosql/getTable:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public string TableNameOrId { get; set; } = null!;

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public Input<string> TableNameOrId { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        /// <summary>
        /// Compartment Identifier.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// A DDL statement representing the schema.
        /// </summary>
        public readonly string DdlStatement;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// True if this table can be reclaimed after an idle period.
        /// </summary>
        public readonly bool IsAutoReclaimable;
        /// <summary>
        /// A message describing the current state in more detail.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The column name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The table schema information as a JSON object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableSchemaResult> Schemas;
        /// <summary>
        /// The state of a table.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// Throughput and storage limits configuration of a table.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTableTableLimitResult> TableLimits;
        public readonly string TableNameOrId;
        /// <summary>
        /// The time the the table was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeOfExpiration;
        /// <summary>
        /// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetTableResult(
            string compartmentId,

            string ddlStatement,

            ImmutableDictionary<string, object> definedTags,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isAutoReclaimable,

            string lifecycleDetails,

            string name,

            ImmutableArray<Outputs.GetTableSchemaResult> schemas,

            string state,

            ImmutableDictionary<string, object> systemTags,

            ImmutableArray<Outputs.GetTableTableLimitResult> tableLimits,

            string tableNameOrId,

            string timeCreated,

            string timeOfExpiration,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DdlStatement = ddlStatement;
            DefinedTags = definedTags;
            FreeformTags = freeformTags;
            Id = id;
            IsAutoReclaimable = isAutoReclaimable;
            LifecycleDetails = lifecycleDetails;
            Name = name;
            Schemas = schemas;
            State = state;
            SystemTags = systemTags;
            TableLimits = tableLimits;
            TableNameOrId = tableNameOrId;
            TimeCreated = timeCreated;
            TimeOfExpiration = timeOfExpiration;
            TimeUpdated = timeUpdated;
        }
    }
}
