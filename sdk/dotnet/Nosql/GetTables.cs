// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Nosql
{
    public static class GetTables
    {
        /// <summary>
        /// This data source provides the list of Tables in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get a list of tables in a compartment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testTables = Output.Create(Oci.Nosql.GetTables.InvokeAsync(new Oci.Nosql.GetTablesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Table_name,
        ///             State = @var.Table_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTablesResult> InvokeAsync(GetTablesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTablesResult>("oci:Nosql/getTables:getTables", args ?? new GetTablesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Tables in Oracle Cloud Infrastructure NoSQL Database service.
        /// 
        /// Get a list of tables in a compartment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testTables = Output.Create(Oci.Nosql.GetTables.InvokeAsync(new Oci.Nosql.GetTablesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Table_name,
        ///             State = @var.Table_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTablesResult> Invoke(GetTablesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTablesResult>("oci:Nosql/getTables:getTables", args ?? new GetTablesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTablesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetTablesFilterArgs>? _filters;
        public List<Inputs.GetTablesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTablesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A shell-globbing-style (*?[]) filter for names.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter list by the lifecycle state of the item.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetTablesArgs()
        {
        }
    }

    public sealed class GetTablesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of a table's compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetTablesFilterInputArgs>? _filters;
        public InputList<Inputs.GetTablesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTablesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A shell-globbing-style (*?[]) filter for names.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter list by the lifecycle state of the item.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetTablesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTablesResult
    {
        /// <summary>
        /// Compartment Identifier.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetTablesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The column name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The state of a table.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of table_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTablesTableCollectionResult> TableCollections;

        [OutputConstructor]
        private GetTablesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetTablesFilterResult> filters,

            string id,

            string? name,

            string? state,

            ImmutableArray<Outputs.GetTablesTableCollectionResult> tableCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
            TableCollections = tableCollections;
        }
    }
}
