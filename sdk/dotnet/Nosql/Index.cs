// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Nosql
{
    /// <summary>
    /// This resource provides the Index resource in Oracle Cloud Infrastructure NoSQL Database service.
    /// 
    /// Create a new index on the table identified by tableNameOrId.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testIndex = new Oci.Nosql.Index("test_index", new()
    ///     {
    ///         Keys = new[]
    ///         {
    ///             new Oci.Nosql.Inputs.IndexKeyArgs
    ///             {
    ///                 ColumnName = indexKeysColumnName,
    ///                 JsonFieldType = indexKeysJsonFieldType,
    ///                 JsonPath = indexKeysJsonPath,
    ///             },
    ///         },
    ///         Name = indexName,
    ///         TableNameOrId = testTableNameOr.Id,
    ///         CompartmentId = compartmentId,
    ///         IsIfNotExists = indexIsIfNotExists,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Indexes can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Nosql/index:Index test_index "tables/{tableNameOrId}/indexes/{indexName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:Nosql/index:Index")]
    public partial class Index : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
        /// </summary>
        [Output("isIfNotExists")]
        public Output<bool> IsIfNotExists { get; private set; } = null!;

        /// <summary>
        /// A set of keys for a secondary index.
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.IndexKey>> Keys { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// Index name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The state of an index.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// the OCID of the table to which this index belongs.
        /// </summary>
        [Output("tableId")]
        public Output<string> TableId { get; private set; } = null!;

        /// <summary>
        /// The name of the table to which this index belongs.
        /// </summary>
        [Output("tableName")]
        public Output<string> TableName { get; private set; } = null!;

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("tableNameOrId")]
        public Output<string> TableNameOrId { get; private set; } = null!;


        /// <summary>
        /// Create a Index resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Index(string name, IndexArgs args, CustomResourceOptions? options = null)
            : base("oci:Nosql/index:Index", name, args ?? new IndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Index(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
            : base("oci:Nosql/index:Index", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Index resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Index Get(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
        {
            return new Index(name, id, state, options);
        }
    }

    public sealed class IndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
        /// </summary>
        [Input("isIfNotExists")]
        public Input<bool>? IsIfNotExists { get; set; }

        [Input("keys", required: true)]
        private InputList<Inputs.IndexKeyArgs>? _keys;

        /// <summary>
        /// A set of keys for a secondary index.
        /// </summary>
        public InputList<Inputs.IndexKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.IndexKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// Index name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("tableNameOrId", required: true)]
        public Input<string> TableNameOrId { get; set; } = null!;

        public IndexArgs()
        {
        }
        public static new IndexArgs Empty => new IndexArgs();
    }

    public sealed class IndexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
        /// </summary>
        [Input("isIfNotExists")]
        public Input<bool>? IsIfNotExists { get; set; }

        [Input("keys")]
        private InputList<Inputs.IndexKeyGetArgs>? _keys;

        /// <summary>
        /// A set of keys for a secondary index.
        /// </summary>
        public InputList<Inputs.IndexKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.IndexKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// A message describing the current state in more detail.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// Index name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The state of an index.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// the OCID of the table to which this index belongs.
        /// </summary>
        [Input("tableId")]
        public Input<string>? TableId { get; set; }

        /// <summary>
        /// The name of the table to which this index belongs.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        /// <summary>
        /// A table name within the compartment, or a table OCID.
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("tableNameOrId")]
        public Input<string>? TableNameOrId { get; set; }

        public IndexState()
        {
        }
        public static new IndexState Empty => new IndexState();
    }
}
