// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ObjectStorage
{
    public static class GetObjects
    {
        /// <summary>
        /// This data source provides the list of Objects in Oracle Cloud Infrastructure Object Storage service.
        /// 
        /// Lists the objects in a bucket. By default, ListObjects returns object names only. See the `Fields`
        /// parameter for other fields that you can optionally include in ListObjects response.
        /// 
        /// ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
        /// value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
        /// parameters.
        /// 
        /// To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
        /// talk to an administrator. If you are an administrator who needs to write policies to give users access, see
        /// [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetObjectsResult> InvokeAsync(GetObjectsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetObjectsResult>("oci:ObjectStorage/getObjects:getObjects", args ?? new GetObjectsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Objects in Oracle Cloud Infrastructure Object Storage service.
        /// 
        /// Lists the objects in a bucket. By default, ListObjects returns object names only. See the `Fields`
        /// parameter for other fields that you can optionally include in ListObjects response.
        /// 
        /// ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
        /// value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
        /// parameters.
        /// 
        /// To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
        /// talk to an administrator. If you are an administrator who needs to write policies to give users access, see
        /// [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetObjectsResult> Invoke(GetObjectsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetObjectsResult>("oci:ObjectStorage/getObjects:getObjects", args ?? new GetObjectsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Objects in Oracle Cloud Infrastructure Object Storage service.
        /// 
        /// Lists the objects in a bucket. By default, ListObjects returns object names only. See the `Fields`
        /// parameter for other fields that you can optionally include in ListObjects response.
        /// 
        /// ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
        /// value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
        /// parameters.
        /// 
        /// To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
        /// talk to an administrator. If you are an administrator who needs to write policies to give users access, see
        /// [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
        /// 
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetObjectsResult> Invoke(GetObjectsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetObjectsResult>("oci:ObjectStorage/getObjects:getObjects", args ?? new GetObjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObjectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
        /// </summary>
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        /// <summary>
        /// When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only '/' is a supported delimiter character at this time.
        /// </summary>
        [Input("delimiter")]
        public string? Delimiter { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically strictly less than this parameter.
        /// </summary>
        [Input("end")]
        public string? End { get; set; }

        [Input("filters")]
        private List<Inputs.GetObjectsFilterArgs>? _filters;
        public List<Inputs.GetObjectsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetObjectsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The Object Storage namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        /// <summary>
        /// The string to use for matching against the start of object names in a list query.
        /// </summary>
        [Input("prefix")]
        public string? Prefix { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically greater than or equal to this parameter.
        /// </summary>
        [Input("start")]
        public string? Start { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically strictly greater than this parameter.
        /// </summary>
        [Input("startAfter")]
        public string? StartAfter { get; set; }

        public GetObjectsArgs()
        {
        }
        public static new GetObjectsArgs Empty => new GetObjectsArgs();
    }

    public sealed class GetObjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the bucket. Avoid entering confidential information. Example: `my-new-bucket1`
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// When this parameter is set, only objects whose names do not contain the delimiter character (after an optionally specified prefix) are returned in the objects key of the response body. Scanned objects whose names contain the delimiter have the part of their name up to the first occurrence of the delimiter (including the optional prefix) returned as a set of prefixes. Note that only '/' is a supported delimiter character at this time.
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically strictly less than this parameter.
        /// </summary>
        [Input("end")]
        public Input<string>? End { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetObjectsFilterInputArgs>? _filters;
        public InputList<Inputs.GetObjectsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetObjectsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The Object Storage namespace used for the request.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The string to use for matching against the start of object names in a list query.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically greater than or equal to this parameter.
        /// </summary>
        [Input("start")]
        public Input<string>? Start { get; set; }

        /// <summary>
        /// Returns object names which are lexicographically strictly greater than this parameter.
        /// </summary>
        [Input("startAfter")]
        public Input<string>? StartAfter { get; set; }

        public GetObjectsInvokeArgs()
        {
        }
        public static new GetObjectsInvokeArgs Empty => new GetObjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetObjectsResult
    {
        public readonly string Bucket;
        public readonly string? Delimiter;
        public readonly string? End;
        public readonly ImmutableArray<Outputs.GetObjectsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Namespace;
        /// <summary>
        /// The list of list_objects.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetObjectsObjectResult> Objects;
        public readonly string? Prefix;
        public readonly ImmutableArray<string> Prefixes;
        public readonly string? Start;
        public readonly string? StartAfter;

        [OutputConstructor]
        private GetObjectsResult(
            string bucket,

            string? delimiter,

            string? end,

            ImmutableArray<Outputs.GetObjectsFilterResult> filters,

            string id,

            string @namespace,

            ImmutableArray<Outputs.GetObjectsObjectResult> objects,

            string? prefix,

            ImmutableArray<string> prefixes,

            string? start,

            string? startAfter)
        {
            Bucket = bucket;
            Delimiter = delimiter;
            End = end;
            Filters = filters;
            Id = id;
            Namespace = @namespace;
            Objects = objects;
            Prefix = prefix;
            Prefixes = prefixes;
            Start = start;
            StartAfter = startAfter;
        }
    }
}
