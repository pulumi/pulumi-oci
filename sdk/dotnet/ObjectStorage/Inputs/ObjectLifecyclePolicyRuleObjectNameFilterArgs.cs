// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ObjectStorage.Inputs
{

    public sealed class ObjectLifecyclePolicyRuleObjectNameFilterArgs : global::Pulumi.ResourceArgs
    {
        [Input("exclusionPatterns")]
        private InputList<string>? _exclusionPatterns;

        /// <summary>
        /// (Updatable) An array of glob patterns to match the object names to exclude. An empty array is ignored. Exclusion patterns take precedence over inclusion patterns. A Glob pattern is a sequence of characters to match text. Any character that appears in the pattern, other than the special pattern characters described below, matches itself. Glob patterns must be between 1 and 1024 characters.
        /// 
        /// The special pattern characters have the following meanings:
        /// 
        /// \           Escapes the following character
        /// *           Matches any string of characters. ?           Matches any single character . [...]       Matches a group of characters. A group of characters can be: A set of characters, for example: [Zafg9@]. This matches any character in the brackets. A range of characters, for example: [a-z]. This matches any character in the range. [a-f] is equivalent to [abcdef]. For character ranges only the CHARACTER-CHARACTER pattern is supported. [ab-yz] is not valid [a-mn-z] is not valid Character ranges can not start with ^ or : To include a '-' in the range, make it the first or last character.
        /// </summary>
        public InputList<string> ExclusionPatterns
        {
            get => _exclusionPatterns ?? (_exclusionPatterns = new InputList<string>());
            set => _exclusionPatterns = value;
        }

        [Input("inclusionPatterns")]
        private InputList<string>? _inclusionPatterns;

        /// <summary>
        /// (Updatable) An array of glob patterns to match the object names to include. An empty array includes all objects in the bucket. Exclusion patterns take precedence over inclusion patterns. A Glob pattern is a sequence of characters to match text. Any character that appears in the pattern, other than the special pattern characters described below, matches itself. Glob patterns must be between 1 and 1024 characters.
        /// 
        /// The special pattern characters have the following meanings:
        /// 
        /// \           Escapes the following character
        /// *           Matches any string of characters. ?           Matches any single character . [...]       Matches a group of characters. A group of characters can be: A set of characters, for example: [Zafg9@]. This matches any character in the brackets. A range of characters, for example: [a-z]. This matches any character in the range. [a-f] is equivalent to [abcdef]. For character ranges only the CHARACTER-CHARACTER pattern is supported. [ab-yz] is not valid [a-mn-z] is not valid Character ranges can not start with ^ or : To include a '-' in the range, make it the first or last character.
        /// </summary>
        public InputList<string> InclusionPatterns
        {
            get => _inclusionPatterns ?? (_inclusionPatterns = new InputList<string>());
            set => _inclusionPatterns = value;
        }

        [Input("inclusionPrefixes")]
        private InputList<string>? _inclusionPrefixes;

        /// <summary>
        /// (Updatable) An array of object name prefixes that the rule will apply to. An empty array means to include all objects.
        /// </summary>
        public InputList<string> InclusionPrefixes
        {
            get => _inclusionPrefixes ?? (_inclusionPrefixes = new InputList<string>());
            set => _inclusionPrefixes = value;
        }

        public ObjectLifecyclePolicyRuleObjectNameFilterArgs()
        {
        }
        public static new ObjectLifecyclePolicyRuleObjectNameFilterArgs Empty => new ObjectLifecyclePolicyRuleObjectNameFilterArgs();
    }
}
