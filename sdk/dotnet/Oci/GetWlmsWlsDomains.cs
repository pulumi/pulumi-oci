// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Oci
{
    public static class GetWlmsWlsDomains
    {
        /// <summary>
        /// This data source provides the list of Wls Domains in Oracle Cloud Infrastructure Wlms service.
        /// 
        /// Gets all WebLogic domains in a given compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testWlsDomains = Oci.Oci.GetWlmsWlsDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = wlsDomainDisplayName,
        ///         Id = wlsDomainId,
        ///         MiddlewareType = wlsDomainMiddlewareType,
        ///         PatchReadinessStatus = wlsDomainPatchReadinessStatus,
        ///         State = wlsDomainState,
        ///         WeblogicVersion = wlsDomainWeblogicVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWlmsWlsDomainsResult> InvokeAsync(GetWlmsWlsDomainsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWlmsWlsDomainsResult>("oci:oci/getWlmsWlsDomains:getWlmsWlsDomains", args ?? new GetWlmsWlsDomainsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Wls Domains in Oracle Cloud Infrastructure Wlms service.
        /// 
        /// Gets all WebLogic domains in a given compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testWlsDomains = Oci.Oci.GetWlmsWlsDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = wlsDomainDisplayName,
        ///         Id = wlsDomainId,
        ///         MiddlewareType = wlsDomainMiddlewareType,
        ///         PatchReadinessStatus = wlsDomainPatchReadinessStatus,
        ///         State = wlsDomainState,
        ///         WeblogicVersion = wlsDomainWeblogicVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWlmsWlsDomainsResult> Invoke(GetWlmsWlsDomainsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWlmsWlsDomainsResult>("oci:oci/getWlmsWlsDomains:getWlmsWlsDomains", args ?? new GetWlmsWlsDomainsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Wls Domains in Oracle Cloud Infrastructure Wlms service.
        /// 
        /// Gets all WebLogic domains in a given compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testWlsDomains = Oci.Oci.GetWlmsWlsDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = wlsDomainDisplayName,
        ///         Id = wlsDomainId,
        ///         MiddlewareType = wlsDomainMiddlewareType,
        ///         PatchReadinessStatus = wlsDomainPatchReadinessStatus,
        ///         State = wlsDomainState,
        ///         WeblogicVersion = wlsDomainWeblogicVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWlmsWlsDomainsResult> Invoke(GetWlmsWlsDomainsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWlmsWlsDomainsResult>("oci:oci/getWlmsWlsDomains:getWlmsWlsDomains", args ?? new GetWlmsWlsDomainsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWlmsWlsDomainsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// The display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetWlmsWlsDomainsFilterArgs>? _filters;
        public List<Inputs.GetWlmsWlsDomainsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetWlmsWlsDomainsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
        /// </summary>
        [Input("middlewareType")]
        public string? MiddlewareType { get; set; }

        /// <summary>
        /// A filter to return domains based on the patch readiness status.
        /// </summary>
        [Input("patchReadinessStatus")]
        public string? PatchReadinessStatus { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return WebLogic domains based on the WebLogic version.
        /// </summary>
        [Input("weblogicVersion")]
        public string? WeblogicVersion { get; set; }

        public GetWlmsWlsDomainsArgs()
        {
        }
        public static new GetWlmsWlsDomainsArgs Empty => new GetWlmsWlsDomainsArgs();
    }

    public sealed class GetWlmsWlsDomainsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns  only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetWlmsWlsDomainsFilterInputArgs>? _filters;
        public InputList<Inputs.GetWlmsWlsDomainsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetWlmsWlsDomainsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
        /// </summary>
        [Input("middlewareType")]
        public Input<string>? MiddlewareType { get; set; }

        /// <summary>
        /// A filter to return domains based on the patch readiness status.
        /// </summary>
        [Input("patchReadinessStatus")]
        public Input<string>? PatchReadinessStatus { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return WebLogic domains based on the WebLogic version.
        /// </summary>
        [Input("weblogicVersion")]
        public Input<string>? WeblogicVersion { get; set; }

        public GetWlmsWlsDomainsInvokeArgs()
        {
        }
        public static new GetWlmsWlsDomainsInvokeArgs Empty => new GetWlmsWlsDomainsInvokeArgs();
    }


    [OutputType]
    public sealed class GetWlmsWlsDomainsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name that does not have to be unique and is changeable.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetWlmsWlsDomainsFilterResult> Filters;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The middleware type on the administration server of the WebLogic domain.
        /// </summary>
        public readonly string? MiddlewareType;
        /// <summary>
        /// The patch readiness status of the WebLogic domain.
        /// </summary>
        public readonly string? PatchReadinessStatus;
        /// <summary>
        /// The current state of the WebLogic service domain.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The version of the WebLogic domain.
        /// </summary>
        public readonly string? WeblogicVersion;
        /// <summary>
        /// The list of wls_domain_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWlmsWlsDomainsWlsDomainCollectionResult> WlsDomainCollections;

        [OutputConstructor]
        private GetWlmsWlsDomainsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetWlmsWlsDomainsFilterResult> filters,

            string? id,

            string? middlewareType,

            string? patchReadinessStatus,

            string? state,

            string? weblogicVersion,

            ImmutableArray<Outputs.GetWlmsWlsDomainsWlsDomainCollectionResult> wlsDomainCollections)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MiddlewareType = middlewareType;
            PatchReadinessStatus = patchReadinessStatus;
            State = state;
            WeblogicVersion = weblogicVersion;
            WlsDomainCollections = wlsDomainCollections;
        }
    }
}
