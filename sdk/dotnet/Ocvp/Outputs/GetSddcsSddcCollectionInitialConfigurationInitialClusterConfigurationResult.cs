// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Ocvp.Outputs
{

    [OutputType]
    public sealed class GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationResult
    {
        /// <summary>
        /// (**Deprecated**) The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
        /// </summary>
        public readonly int ActualEsxiHostsCount;
        public readonly string CapacityReservationId;
        /// <summary>
        /// The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
        /// </summary>
        public readonly string ComputeAvailabilityDomain;
        public readonly ImmutableArray<Outputs.GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationDatastoreResult> Datastores;
        /// <summary>
        /// A filter to return only resources that match the given display name exactly.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// (**Deprecated**) The number of ESXi hosts in the SDDC.
        /// </summary>
        public readonly int EsxiHostsCount;
        public readonly string InitialCommitment;
        /// <summary>
        /// (**Deprecated**) The initial OCPU count of the SDDC's ESXi hosts.
        /// </summary>
        public readonly double InitialHostOcpuCount;
        /// <summary>
        /// (**Deprecated**) The initial compute shape of the SDDC's ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
        /// </summary>
        public readonly string InitialHostShapeName;
        public readonly string InstanceDisplayNamePrefix;
        /// <summary>
        /// (**Deprecated**) Indicates whether shielded instance is enabled at the SDDC level.
        /// </summary>
        public readonly bool IsShieldedInstanceEnabled;
        public readonly ImmutableArray<Outputs.GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationNetworkConfigurationResult> NetworkConfigurations;
        public readonly string VsphereType;
        public readonly string WorkloadNetworkCidr;

        [OutputConstructor]
        private GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationResult(
            int actualEsxiHostsCount,

            string capacityReservationId,

            string computeAvailabilityDomain,

            ImmutableArray<Outputs.GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationDatastoreResult> datastores,

            string displayName,

            int esxiHostsCount,

            string initialCommitment,

            double initialHostOcpuCount,

            string initialHostShapeName,

            string instanceDisplayNamePrefix,

            bool isShieldedInstanceEnabled,

            ImmutableArray<Outputs.GetSddcsSddcCollectionInitialConfigurationInitialClusterConfigurationNetworkConfigurationResult> networkConfigurations,

            string vsphereType,

            string workloadNetworkCidr)
        {
            ActualEsxiHostsCount = actualEsxiHostsCount;
            CapacityReservationId = capacityReservationId;
            ComputeAvailabilityDomain = computeAvailabilityDomain;
            Datastores = datastores;
            DisplayName = displayName;
            EsxiHostsCount = esxiHostsCount;
            InitialCommitment = initialCommitment;
            InitialHostOcpuCount = initialHostOcpuCount;
            InitialHostShapeName = initialHostShapeName;
            InstanceDisplayNamePrefix = instanceDisplayNamePrefix;
            IsShieldedInstanceEnabled = isShieldedInstanceEnabled;
            NetworkConfigurations = networkConfigurations;
            VsphereType = vsphereType;
            WorkloadNetworkCidr = workloadNetworkCidr;
        }
    }
}
