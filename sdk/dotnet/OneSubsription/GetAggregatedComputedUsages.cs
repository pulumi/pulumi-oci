// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OneSubsription
{
    public static class GetAggregatedComputedUsages
    {
        /// <summary>
        /// This data source provides the list of Aggregated Computed Usages in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This is a collection API which returns a list of aggregated computed usage details (there can be multiple Parent Products under a given SubID each of which is represented under Subscription Service Line # in SPM).
        /// </summary>
        public static Task<GetAggregatedComputedUsagesResult> InvokeAsync(GetAggregatedComputedUsagesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAggregatedComputedUsagesResult>("oci:OneSubsription/getAggregatedComputedUsages:getAggregatedComputedUsages", args ?? new GetAggregatedComputedUsagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Aggregated Computed Usages in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This is a collection API which returns a list of aggregated computed usage details (there can be multiple Parent Products under a given SubID each of which is represented under Subscription Service Line # in SPM).
        /// </summary>
        public static Output<GetAggregatedComputedUsagesResult> Invoke(GetAggregatedComputedUsagesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAggregatedComputedUsagesResult>("oci:OneSubsription/getAggregatedComputedUsages:getAggregatedComputedUsages", args ?? new GetAggregatedComputedUsagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAggregatedComputedUsagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetAggregatedComputedUsagesFilterArgs>? _filters;
        public List<Inputs.GetAggregatedComputedUsagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAggregatedComputedUsagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Grouping criteria to use for aggregate the computed Usage, either hourly (`HOURLY`), daily (`DAILY`), monthly(`MONTHLY`) or none (`NONE`) to not follow a grouping criteria by date.
        /// </summary>
        [Input("grouping")]
        public string? Grouping { get; set; }

        /// <summary>
        /// Product part number for subscribed service line, called parent product.
        /// </summary>
        [Input("parentProduct")]
        public string? ParentProduct { get; set; }

        /// <summary>
        /// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        /// <summary>
        /// Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timeFrom", required: true)]
        public string TimeFrom { get; set; } = null!;

        /// <summary>
        /// Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timeTo", required: true)]
        public string TimeTo { get; set; } = null!;

        public GetAggregatedComputedUsagesArgs()
        {
        }
        public static new GetAggregatedComputedUsagesArgs Empty => new GetAggregatedComputedUsagesArgs();
    }

    public sealed class GetAggregatedComputedUsagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetAggregatedComputedUsagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetAggregatedComputedUsagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAggregatedComputedUsagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Grouping criteria to use for aggregate the computed Usage, either hourly (`HOURLY`), daily (`DAILY`), monthly(`MONTHLY`) or none (`NONE`) to not follow a grouping criteria by date.
        /// </summary>
        [Input("grouping")]
        public Input<string>? Grouping { get; set; }

        /// <summary>
        /// Product part number for subscribed service line, called parent product.
        /// </summary>
        [Input("parentProduct")]
        public Input<string>? ParentProduct { get; set; }

        /// <summary>
        /// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timeFrom", required: true)]
        public Input<string> TimeFrom { get; set; } = null!;

        /// <summary>
        /// Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
        /// </summary>
        [Input("timeTo", required: true)]
        public Input<string> TimeTo { get; set; } = null!;

        public GetAggregatedComputedUsagesInvokeArgs()
        {
        }
        public static new GetAggregatedComputedUsagesInvokeArgs Empty => new GetAggregatedComputedUsagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAggregatedComputedUsagesResult
    {
        /// <summary>
        /// Aggregation of computed usages for the subscribed service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAggregatedComputedUsagesAggregatedComputedUsageResult> AggregatedComputedUsages;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetAggregatedComputedUsagesFilterResult> Filters;
        public readonly string? Grouping;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly string? ParentProduct;
        /// <summary>
        /// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM
        /// </summary>
        public readonly string SubscriptionId;
        public readonly string TimeFrom;
        public readonly string TimeTo;

        [OutputConstructor]
        private GetAggregatedComputedUsagesResult(
            ImmutableArray<Outputs.GetAggregatedComputedUsagesAggregatedComputedUsageResult> aggregatedComputedUsages,

            string compartmentId,

            ImmutableArray<Outputs.GetAggregatedComputedUsagesFilterResult> filters,

            string? grouping,

            string id,

            string? parentProduct,

            string subscriptionId,

            string timeFrom,

            string timeTo)
        {
            AggregatedComputedUsages = aggregatedComputedUsages;
            CompartmentId = compartmentId;
            Filters = filters;
            Grouping = grouping;
            Id = id;
            ParentProduct = parentProduct;
            SubscriptionId = subscriptionId;
            TimeFrom = timeFrom;
            TimeTo = timeTo;
        }
    }
}
