// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OneSubsription
{
    public static class GetCommitment
    {
        /// <summary>
        /// This data source provides details about a specific Commitment resource in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This API returns the commitment details corresponding to the id provided
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCommitment = Oci.OneSubsription.GetCommitment.Invoke(new()
        ///     {
        ///         CommitmentId = testCommitmentOciOnesubscriptionCommitment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCommitmentResult> InvokeAsync(GetCommitmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCommitmentResult>("oci:OneSubsription/getCommitment:getCommitment", args ?? new GetCommitmentArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Commitment resource in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This API returns the commitment details corresponding to the id provided
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCommitment = Oci.OneSubsription.GetCommitment.Invoke(new()
        ///     {
        ///         CommitmentId = testCommitmentOciOnesubscriptionCommitment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCommitmentResult> Invoke(GetCommitmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommitmentResult>("oci:OneSubsription/getCommitment:getCommitment", args ?? new GetCommitmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Commitment resource in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This API returns the commitment details corresponding to the id provided
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCommitment = Oci.OneSubsription.GetCommitment.Invoke(new()
        ///     {
        ///         CommitmentId = testCommitmentOciOnesubscriptionCommitment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCommitmentResult> Invoke(GetCommitmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommitmentResult>("oci:OneSubsription/getCommitment:getCommitment", args ?? new GetCommitmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCommitmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Commitment Id
        /// </summary>
        [Input("commitmentId", required: true)]
        public string CommitmentId { get; set; } = null!;

        public GetCommitmentArgs()
        {
        }
        public static new GetCommitmentArgs Empty => new GetCommitmentArgs();
    }

    public sealed class GetCommitmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Commitment Id
        /// </summary>
        [Input("commitmentId", required: true)]
        public Input<string> CommitmentId { get; set; } = null!;

        public GetCommitmentInvokeArgs()
        {
        }
        public static new GetCommitmentInvokeArgs Empty => new GetCommitmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetCommitmentResult
    {
        /// <summary>
        /// Commitment available amount
        /// </summary>
        public readonly string AvailableAmount;
        public readonly string CommitmentId;
        /// <summary>
        /// Funded Allocation line value example: 12000.00
        /// </summary>
        public readonly string FundedAllocationValue;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Commitment quantity
        /// </summary>
        public readonly string Quantity;
        /// <summary>
        /// SPM internal Subscribed Service ID
        /// </summary>
        public readonly string SubscribedServiceId;
        /// <summary>
        /// Commitment end date
        /// </summary>
        public readonly string TimeEnd;
        /// <summary>
        /// Commitment start date
        /// </summary>
        public readonly string TimeStart;
        /// <summary>
        /// Commitment used amount
        /// </summary>
        public readonly string UsedAmount;

        [OutputConstructor]
        private GetCommitmentResult(
            string availableAmount,

            string commitmentId,

            string fundedAllocationValue,

            string id,

            string quantity,

            string subscribedServiceId,

            string timeEnd,

            string timeStart,

            string usedAmount)
        {
            AvailableAmount = availableAmount;
            CommitmentId = commitmentId;
            FundedAllocationValue = fundedAllocationValue;
            Id = id;
            Quantity = quantity;
            SubscribedServiceId = subscribedServiceId;
            TimeEnd = timeEnd;
            TimeStart = timeStart;
            UsedAmount = usedAmount;
        }
    }
}
