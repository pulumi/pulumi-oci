// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OneSubsription
{
    public static class GetCommitments
    {
        /// <summary>
        /// This data source provides the list of Commitments in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This list API returns all commitments for a particular Subscribed Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCommitments = Oci.OneSubsription.GetCommitments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         SubscribedServiceId = testSubscribedService.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCommitmentsResult> InvokeAsync(GetCommitmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCommitmentsResult>("oci:OneSubsription/getCommitments:getCommitments", args ?? new GetCommitmentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Commitments in Oracle Cloud Infrastructure Onesubscription service.
        /// 
        /// This list API returns all commitments for a particular Subscribed Service
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCommitments = Oci.OneSubsription.GetCommitments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         SubscribedServiceId = testSubscribedService.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCommitmentsResult> Invoke(GetCommitmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommitmentsResult>("oci:OneSubsription/getCommitments:getCommitments", args ?? new GetCommitmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCommitmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetCommitmentsFilterArgs>? _filters;
        public List<Inputs.GetCommitmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCommitmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// This param is used to get the commitments for a particular subscribed service
        /// </summary>
        [Input("subscribedServiceId", required: true)]
        public string SubscribedServiceId { get; set; } = null!;

        public GetCommitmentsArgs()
        {
        }
        public static new GetCommitmentsArgs Empty => new GetCommitmentsArgs();
    }

    public sealed class GetCommitmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetCommitmentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetCommitmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCommitmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// This param is used to get the commitments for a particular subscribed service
        /// </summary>
        [Input("subscribedServiceId", required: true)]
        public Input<string> SubscribedServiceId { get; set; } = null!;

        public GetCommitmentsInvokeArgs()
        {
        }
        public static new GetCommitmentsInvokeArgs Empty => new GetCommitmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCommitmentsResult
    {
        /// <summary>
        /// The list of commitments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommitmentsCommitmentResult> Commitments;
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetCommitmentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// SPM internal Subscribed Service ID
        /// </summary>
        public readonly string SubscribedServiceId;

        [OutputConstructor]
        private GetCommitmentsResult(
            ImmutableArray<Outputs.GetCommitmentsCommitmentResult> commitments,

            string compartmentId,

            ImmutableArray<Outputs.GetCommitmentsFilterResult> filters,

            string id,

            string subscribedServiceId)
        {
            Commitments = commitments;
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            SubscribedServiceId = subscribedServiceId;
        }
    }
}
