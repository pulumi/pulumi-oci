// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OneSubsription.Outputs
{

    [OutputType]
    public sealed class GetInvoiceLineComputedUsagesInvoicelineComputedUsageResult
    {
        /// <summary>
        /// Sum of Usage/Service Billing Line net Amount
        /// </summary>
        public readonly double Cost;
        /// <summary>
        /// Computed Line Amount rounded.
        /// </summary>
        public readonly double CostRounded;
        /// <summary>
        /// Net Unit Price for the product in consideration, price actual.
        /// </summary>
        public readonly double NetUnitPrice;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult> ParentProducts;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult> Products;
        /// <summary>
        /// Total Quantity that was used for computation
        /// </summary>
        public readonly double Quantity;
        /// <summary>
        /// Metered Service date.
        /// </summary>
        public readonly string TimeMeteredOn;
        /// <summary>
        /// Usage compute type in SPM.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetInvoiceLineComputedUsagesInvoicelineComputedUsageResult(
            double cost,

            double costRounded,

            double netUnitPrice,

            ImmutableArray<Outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageParentProductResult> parentProducts,

            ImmutableArray<Outputs.GetInvoiceLineComputedUsagesInvoicelineComputedUsageProductResult> products,

            double quantity,

            string timeMeteredOn,

            string type)
        {
            Cost = cost;
            CostRounded = costRounded;
            NetUnitPrice = netUnitPrice;
            ParentProducts = parentProducts;
            Products = products;
            Quantity = quantity;
            TimeMeteredOn = timeMeteredOn;
            Type = type;
        }
    }
}
