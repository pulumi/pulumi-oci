// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opensearch
{
    /// <summary>
    /// This resource provides the Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
    /// 
    /// Creates a new OpensearchCluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testOpensearchCluster = new Oci.Opensearch.Cluster("testOpensearchCluster", new Oci.Opensearch.ClusterArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             DataNodeCount = @var.Opensearch_cluster_data_node_count,
    ///             DataNodeHostMemoryGb = @var.Opensearch_cluster_data_node_host_memory_gb,
    ///             DataNodeHostOcpuCount = @var.Opensearch_cluster_data_node_host_ocpu_count,
    ///             DataNodeHostType = @var.Opensearch_cluster_data_node_host_type,
    ///             DataNodeStorageGb = @var.Opensearch_cluster_data_node_storage_gb,
    ///             DisplayName = @var.Opensearch_cluster_display_name,
    ///             MasterNodeCount = @var.Opensearch_cluster_master_node_count,
    ///             MasterNodeHostMemoryGb = @var.Opensearch_cluster_master_node_host_memory_gb,
    ///             MasterNodeHostOcpuCount = @var.Opensearch_cluster_master_node_host_ocpu_count,
    ///             MasterNodeHostType = @var.Opensearch_cluster_master_node_host_type,
    ///             OpendashboardNodeCount = @var.Opensearch_cluster_opendashboard_node_count,
    ///             OpendashboardNodeHostMemoryGb = @var.Opensearch_cluster_opendashboard_node_host_memory_gb,
    ///             OpendashboardNodeHostOcpuCount = @var.Opensearch_cluster_opendashboard_node_host_ocpu_count,
    ///             SoftwareVersion = @var.Opensearch_cluster_software_version,
    ///             SubnetCompartmentId = oci_identity_compartment.Test_compartment.Id,
    ///             SubnetId = oci_core_subnet.Test_subnet.Id,
    ///             VcnCompartmentId = oci_identity_compartment.Test_compartment.Id,
    ///             VcnId = oci_core_vcn.Test_vcn.Id,
    ///             DataNodeHostBareMetalShape = @var.Opensearch_cluster_data_node_host_bare_metal_shape,
    ///             DefinedTags = 
    ///             {
    ///                 { "foo-namespace.bar-key", "value" },
    ///             },
    ///             FreeformTags = 
    ///             {
    ///                 { "bar-key", "value" },
    ///             },
    ///             MasterNodeHostBareMetalShape = @var.Opensearch_cluster_master_node_host_bare_metal_shape,
    ///             SystemTags = @var.Opensearch_cluster_system_tags,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// OpensearchClusters can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:Opensearch/cluster:Cluster test_opensearch_cluster "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Opensearch/cluster:Cluster")]
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// The availability domains to distribute the cluser nodes across.
        /// </summary>
        [Output("availabilityDomains")]
        public Output<ImmutableArray<string>> AvailabilityDomains { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment to create the cluster in.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The number of data nodes to configure for the cluster.
        /// </summary>
        [Output("dataNodeCount")]
        public Output<int> DataNodeCount { get; private set; } = null!;

        /// <summary>
        /// The bare metal shape for the cluster's data nodes.
        /// </summary>
        [Output("dataNodeHostBareMetalShape")]
        public Output<string> DataNodeHostBareMetalShape { get; private set; } = null!;

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Output("dataNodeHostMemoryGb")]
        public Output<int> DataNodeHostMemoryGb { get; private set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluster's data nodes.
        /// </summary>
        [Output("dataNodeHostOcpuCount")]
        public Output<int> DataNodeHostOcpuCount { get; private set; } = null!;

        /// <summary>
        /// TThe instance type for the cluster's data nodes.
        /// </summary>
        [Output("dataNodeHostType")]
        public Output<string> DataNodeHostType { get; private set; } = null!;

        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Output("dataNodeStorageGb")]
        public Output<int> DataNodeStorageGb { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Additional information about the current lifecycle state of the cluster.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The number of master nodes to configure for the cluster.
        /// </summary>
        [Output("masterNodeCount")]
        public Output<int> MasterNodeCount { get; private set; } = null!;

        /// <summary>
        /// The bare metal shape for the cluster's master nodes.
        /// </summary>
        [Output("masterNodeHostBareMetalShape")]
        public Output<string> MasterNodeHostBareMetalShape { get; private set; } = null!;

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's master nodes.
        /// </summary>
        [Output("masterNodeHostMemoryGb")]
        public Output<int> MasterNodeHostMemoryGb { get; private set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluser's master nodes.
        /// </summary>
        [Output("masterNodeHostOcpuCount")]
        public Output<int> MasterNodeHostOcpuCount { get; private set; } = null!;

        /// <summary>
        /// The instance type for the cluster's master nodes.
        /// </summary>
        [Output("masterNodeHostType")]
        public Output<string> MasterNodeHostType { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
        /// </summary>
        [Output("opendashboardFqdn")]
        public Output<string> OpendashboardFqdn { get; private set; } = null!;

        /// <summary>
        /// The number of OpenSearch Dashboard nodes to configure for the cluster.
        /// </summary>
        [Output("opendashboardNodeCount")]
        public Output<int> OpendashboardNodeCount { get; private set; } = null!;

        /// <summary>
        /// The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Output("opendashboardNodeHostMemoryGb")]
        public Output<int> OpendashboardNodeHostMemoryGb { get; private set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Output("opendashboardNodeHostOcpuCount")]
        public Output<int> OpendashboardNodeHostOcpuCount { get; private set; } = null!;

        /// <summary>
        /// The private IP address for the cluster's OpenSearch Dashboard.
        /// </summary>
        [Output("opendashboardPrivateIp")]
        public Output<string> OpendashboardPrivateIp { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Output("opensearchFqdn")]
        public Output<string> OpensearchFqdn { get; private set; } = null!;

        /// <summary>
        /// The cluster's private IP address.
        /// </summary>
        [Output("opensearchPrivateIp")]
        public Output<string> OpensearchPrivateIp { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of the software the cluster is running.
        /// </summary>
        [Output("softwareVersion")]
        public Output<string> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// The current state of the cluster.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </summary>
        [Output("subnetCompartmentId")]
        public Output<string> SubnetCompartmentId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the cluster's subnet.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The amount of time in milliseconds since the cluster was created.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        [Output("timeDeleted")]
        public Output<string> TimeDeleted { get; private set; } = null!;

        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// The size in GB of the cluster's total storage.
        /// </summary>
        [Output("totalStorageGb")]
        public Output<int> TotalStorageGb { get; private set; } = null!;

        /// <summary>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </summary>
        [Output("vcnCompartmentId")]
        public Output<string> VcnCompartmentId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the cluster's VCN.
        /// </summary>
        [Output("vcnId")]
        public Output<string> VcnId { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("oci:Opensearch/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("oci:Opensearch/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment to create the cluster in.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The number of data nodes to configure for the cluster.
        /// </summary>
        [Input("dataNodeCount", required: true)]
        public Input<int> DataNodeCount { get; set; } = null!;

        /// <summary>
        /// The bare metal shape for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostBareMetalShape")]
        public Input<string>? DataNodeHostBareMetalShape { get; set; }

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostMemoryGb", required: true)]
        public Input<int> DataNodeHostMemoryGb { get; set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostOcpuCount", required: true)]
        public Input<int> DataNodeHostOcpuCount { get; set; } = null!;

        /// <summary>
        /// TThe instance type for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostType", required: true)]
        public Input<string> DataNodeHostType { get; set; } = null!;

        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeStorageGb", required: true)]
        public Input<int> DataNodeStorageGb { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// The number of master nodes to configure for the cluster.
        /// </summary>
        [Input("masterNodeCount", required: true)]
        public Input<int> MasterNodeCount { get; set; } = null!;

        /// <summary>
        /// The bare metal shape for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostBareMetalShape")]
        public Input<string>? MasterNodeHostBareMetalShape { get; set; }

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostMemoryGb", required: true)]
        public Input<int> MasterNodeHostMemoryGb { get; set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluser's master nodes.
        /// </summary>
        [Input("masterNodeHostOcpuCount", required: true)]
        public Input<int> MasterNodeHostOcpuCount { get; set; } = null!;

        /// <summary>
        /// The instance type for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostType", required: true)]
        public Input<string> MasterNodeHostType { get; set; } = null!;

        /// <summary>
        /// The number of OpenSearch Dashboard nodes to configure for the cluster.
        /// </summary>
        [Input("opendashboardNodeCount", required: true)]
        public Input<int> OpendashboardNodeCount { get; set; } = null!;

        /// <summary>
        /// The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Input("opendashboardNodeHostMemoryGb", required: true)]
        public Input<int> OpendashboardNodeHostMemoryGb { get; set; } = null!;

        /// <summary>
        /// The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Input("opendashboardNodeHostOcpuCount", required: true)]
        public Input<int> OpendashboardNodeHostOcpuCount { get; set; } = null!;

        /// <summary>
        /// (Updatable) The version of the software the cluster is running.
        /// </summary>
        [Input("softwareVersion", required: true)]
        public Input<string> SoftwareVersion { get; set; } = null!;

        /// <summary>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </summary>
        [Input("subnetCompartmentId", required: true)]
        public Input<string> SubnetCompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the cluster's subnet.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </summary>
        [Input("vcnCompartmentId", required: true)]
        public Input<string> VcnCompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the cluster's VCN.
        /// </summary>
        [Input("vcnId", required: true)]
        public Input<string> VcnId { get; set; } = null!;

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        [Input("availabilityDomains")]
        private InputList<string>? _availabilityDomains;

        /// <summary>
        /// The availability domains to distribute the cluser nodes across.
        /// </summary>
        public InputList<string> AvailabilityDomains
        {
            get => _availabilityDomains ?? (_availabilityDomains = new InputList<string>());
            set => _availabilityDomains = value;
        }

        /// <summary>
        /// The OCID of the compartment to create the cluster in.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The number of data nodes to configure for the cluster.
        /// </summary>
        [Input("dataNodeCount")]
        public Input<int>? DataNodeCount { get; set; }

        /// <summary>
        /// The bare metal shape for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostBareMetalShape")]
        public Input<string>? DataNodeHostBareMetalShape { get; set; }

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostMemoryGb")]
        public Input<int>? DataNodeHostMemoryGb { get; set; }

        /// <summary>
        /// The number of OCPUs to configure for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostOcpuCount")]
        public Input<int>? DataNodeHostOcpuCount { get; set; }

        /// <summary>
        /// TThe instance type for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeHostType")]
        public Input<string>? DataNodeHostType { get; set; }

        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        [Input("dataNodeStorageGb")]
        public Input<int>? DataNodeStorageGb { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The name of the cluster. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Additional information about the current lifecycle state of the cluster.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The number of master nodes to configure for the cluster.
        /// </summary>
        [Input("masterNodeCount")]
        public Input<int>? MasterNodeCount { get; set; }

        /// <summary>
        /// The bare metal shape for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostBareMetalShape")]
        public Input<string>? MasterNodeHostBareMetalShape { get; set; }

        /// <summary>
        /// The amount of memory in GB, to configure per node for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostMemoryGb")]
        public Input<int>? MasterNodeHostMemoryGb { get; set; }

        /// <summary>
        /// The number of OCPUs to configure for the cluser's master nodes.
        /// </summary>
        [Input("masterNodeHostOcpuCount")]
        public Input<int>? MasterNodeHostOcpuCount { get; set; }

        /// <summary>
        /// The instance type for the cluster's master nodes.
        /// </summary>
        [Input("masterNodeHostType")]
        public Input<string>? MasterNodeHostType { get; set; }

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
        /// </summary>
        [Input("opendashboardFqdn")]
        public Input<string>? OpendashboardFqdn { get; set; }

        /// <summary>
        /// The number of OpenSearch Dashboard nodes to configure for the cluster.
        /// </summary>
        [Input("opendashboardNodeCount")]
        public Input<int>? OpendashboardNodeCount { get; set; }

        /// <summary>
        /// The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Input("opendashboardNodeHostMemoryGb")]
        public Input<int>? OpendashboardNodeHostMemoryGb { get; set; }

        /// <summary>
        /// The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        [Input("opendashboardNodeHostOcpuCount")]
        public Input<int>? OpendashboardNodeHostOcpuCount { get; set; }

        /// <summary>
        /// The private IP address for the cluster's OpenSearch Dashboard.
        /// </summary>
        [Input("opendashboardPrivateIp")]
        public Input<string>? OpendashboardPrivateIp { get; set; }

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Input("opensearchFqdn")]
        public Input<string>? OpensearchFqdn { get; set; }

        /// <summary>
        /// The cluster's private IP address.
        /// </summary>
        [Input("opensearchPrivateIp")]
        public Input<string>? OpensearchPrivateIp { get; set; }

        /// <summary>
        /// (Updatable) The version of the software the cluster is running.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// The current state of the cluster.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </summary>
        [Input("subnetCompartmentId")]
        public Input<string>? SubnetCompartmentId { get; set; }

        /// <summary>
        /// The OCID of the cluster's subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The amount of time in milliseconds since the cluster was created.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        [Input("timeDeleted")]
        public Input<string>? TimeDeleted { get; set; }

        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// The size in GB of the cluster's total storage.
        /// </summary>
        [Input("totalStorageGb")]
        public Input<int>? TotalStorageGb { get; set; }

        /// <summary>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </summary>
        [Input("vcnCompartmentId")]
        public Input<string>? VcnCompartmentId { get; set; }

        /// <summary>
        /// The OCID of the cluster's VCN.
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public ClusterState()
        {
        }
    }
}
