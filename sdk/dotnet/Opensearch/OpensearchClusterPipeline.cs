// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opensearch
{
    /// <summary>
    /// This resource provides the Opensearch Cluster Pipeline resource in Oracle Cloud Infrastructure Opensearch service.
    /// 
    /// Creates a new OpensearchCluster Pipeline.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testOpensearchClusterPipeline = new Oci.Opensearch.OpensearchClusterPipeline("test_opensearch_cluster_pipeline", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         DataPrepperConfigurationBody = opensearchClusterPipelineDataPrepperConfigurationBody,
    ///         DisplayName = opensearchClusterPipelineDisplayName,
    ///         MemoryGb = opensearchClusterPipelineMemoryGb,
    ///         NodeCount = opensearchClusterPipelineNodeCount,
    ///         OcpuCount = opensearchClusterPipelineOcpuCount,
    ///         PipelineConfigurationBody = opensearchClusterPipelinePipelineConfigurationBody,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         NsgId = testNsg.Id,
    ///         OpcDryRun = opensearchClusterPipelineOpcDryRun,
    ///         ReverseConnectionEndpoints = new[]
    ///         {
    ///             new Oci.Opensearch.Inputs.OpensearchClusterPipelineReverseConnectionEndpointArgs
    ///             {
    ///                 CustomerFqdn = opensearchClusterPipelineReverseConnectionEndpointsCustomerFqdn,
    ///                 CustomerIp = opensearchClusterPipelineReverseConnectionEndpointsCustomerIp,
    ///             },
    ///         },
    ///         SubnetCompartmentId = testCompartment.Id,
    ///         SubnetId = testSubnet.Id,
    ///         VcnCompartmentId = testCompartment.Id,
    ///         VcnId = testVcn.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OpensearchClusterPipelines can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline test_opensearch_cluster_pipeline "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline")]
    public partial class OpensearchClusterPipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment to create the pipeline in.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Output("dataPrepperConfigurationBody")]
        public Output<string> DataPrepperConfigurationBody { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The amount of memory in GB, for each pipeline node.
        /// </summary>
        [Output("memoryGb")]
        public Output<int> MemoryGb { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The number of nodes configured for the pipeline.
        /// </summary>
        [Output("nodeCount")]
        public Output<int> NodeCount { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
        /// </summary>
        [Output("nsgId")]
        public Output<string> NsgId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The number of OCPUs configured for each pipeline node.
        /// </summary>
        [Output("ocpuCount")]
        public Output<int> OcpuCount { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
        /// </summary>
        [Output("opcDryRun")]
        public Output<bool> OpcDryRun { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Output("opensearchPipelineFqdn")]
        public Output<string> OpensearchPipelineFqdn { get; private set; } = null!;

        /// <summary>
        /// The pipeline's private IP address.
        /// </summary>
        [Output("opensearchPipelinePrivateIp")]
        public Output<string> OpensearchPipelinePrivateIp { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Output("pipelineConfigurationBody")]
        public Output<string> PipelineConfigurationBody { get; private set; } = null!;

        /// <summary>
        /// The current state of the pipeline.
        /// </summary>
        [Output("pipelineMode")]
        public Output<string> PipelineMode { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
        /// </summary>
        [Output("reverseConnectionEndpoints")]
        public Output<ImmutableArray<Outputs.OpensearchClusterPipelineReverseConnectionEndpoint>> ReverseConnectionEndpoints { get; private set; } = null!;

        /// <summary>
        /// The current state of the cluster backup.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
        /// </summary>
        [Output("subnetCompartmentId")]
        public Output<string> SubnetCompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the pipeline's subnet.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The amount of time in milliseconds since the pipeline was updated.
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
        /// </summary>
        [Output("vcnCompartmentId")]
        public Output<string> VcnCompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the pipeline's VCN.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("vcnId")]
        public Output<string> VcnId { get; private set; } = null!;


        /// <summary>
        /// Create a OpensearchClusterPipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OpensearchClusterPipeline(string name, OpensearchClusterPipelineArgs args, CustomResourceOptions? options = null)
            : base("oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline", name, args ?? new OpensearchClusterPipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OpensearchClusterPipeline(string name, Input<string> id, OpensearchClusterPipelineState? state = null, CustomResourceOptions? options = null)
            : base("oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OpensearchClusterPipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OpensearchClusterPipeline Get(string name, Input<string> id, OpensearchClusterPipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new OpensearchClusterPipeline(name, id, state, options);
        }
    }

    public sealed class OpensearchClusterPipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment to create the pipeline in.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Input("dataPrepperConfigurationBody", required: true)]
        public Input<string> DataPrepperConfigurationBody { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The amount of memory in GB, for each pipeline node.
        /// </summary>
        [Input("memoryGb", required: true)]
        public Input<int> MemoryGb { get; set; } = null!;

        /// <summary>
        /// (Updatable) The number of nodes configured for the pipeline.
        /// </summary>
        [Input("nodeCount", required: true)]
        public Input<int> NodeCount { get; set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
        /// </summary>
        [Input("nsgId")]
        public Input<string>? NsgId { get; set; }

        /// <summary>
        /// (Updatable) The number of OCPUs configured for each pipeline node.
        /// </summary>
        [Input("ocpuCount", required: true)]
        public Input<int> OcpuCount { get; set; } = null!;

        /// <summary>
        /// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
        /// </summary>
        [Input("opcDryRun")]
        public Input<bool>? OpcDryRun { get; set; }

        /// <summary>
        /// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Input("pipelineConfigurationBody", required: true)]
        public Input<string> PipelineConfigurationBody { get; set; } = null!;

        [Input("reverseConnectionEndpoints")]
        private InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointArgs>? _reverseConnectionEndpoints;

        /// <summary>
        /// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
        /// </summary>
        public InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointArgs> ReverseConnectionEndpoints
        {
            get => _reverseConnectionEndpoints ?? (_reverseConnectionEndpoints = new InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointArgs>());
            set => _reverseConnectionEndpoints = value;
        }

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
        /// </summary>
        [Input("subnetCompartmentId")]
        public Input<string>? SubnetCompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the pipeline's subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
        /// </summary>
        [Input("vcnCompartmentId")]
        public Input<string>? VcnCompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the pipeline's VCN.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public OpensearchClusterPipelineArgs()
        {
        }
        public static new OpensearchClusterPipelineArgs Empty => new OpensearchClusterPipelineArgs();
    }

    public sealed class OpensearchClusterPipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment to create the pipeline in.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Input("dataPrepperConfigurationBody")]
        public Input<string>? DataPrepperConfigurationBody { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The amount of memory in GB, for each pipeline node.
        /// </summary>
        [Input("memoryGb")]
        public Input<int>? MemoryGb { get; set; }

        /// <summary>
        /// (Updatable) The number of nodes configured for the pipeline.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
        /// </summary>
        [Input("nsgId")]
        public Input<string>? NsgId { get; set; }

        /// <summary>
        /// (Updatable) The number of OCPUs configured for each pipeline node.
        /// </summary>
        [Input("ocpuCount")]
        public Input<int>? OcpuCount { get; set; }

        /// <summary>
        /// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
        /// </summary>
        [Input("opcDryRun")]
        public Input<bool>? OpcDryRun { get; set; }

        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        [Input("opensearchPipelineFqdn")]
        public Input<string>? OpensearchPipelineFqdn { get; set; }

        /// <summary>
        /// The pipeline's private IP address.
        /// </summary>
        [Input("opensearchPipelinePrivateIp")]
        public Input<string>? OpensearchPipelinePrivateIp { get; set; }

        /// <summary>
        /// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
        /// </summary>
        [Input("pipelineConfigurationBody")]
        public Input<string>? PipelineConfigurationBody { get; set; }

        /// <summary>
        /// The current state of the pipeline.
        /// </summary>
        [Input("pipelineMode")]
        public Input<string>? PipelineMode { get; set; }

        [Input("reverseConnectionEndpoints")]
        private InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointGetArgs>? _reverseConnectionEndpoints;

        /// <summary>
        /// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
        /// </summary>
        public InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointGetArgs> ReverseConnectionEndpoints
        {
            get => _reverseConnectionEndpoints ?? (_reverseConnectionEndpoints = new InputList<Inputs.OpensearchClusterPipelineReverseConnectionEndpointGetArgs>());
            set => _reverseConnectionEndpoints = value;
        }

        /// <summary>
        /// The current state of the cluster backup.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
        /// </summary>
        [Input("subnetCompartmentId")]
        public Input<string>? SubnetCompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the pipeline's subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The amount of time in milliseconds since the pipeline was updated.
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
        /// </summary>
        [Input("vcnCompartmentId")]
        public Input<string>? VcnCompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the pipeline's VCN.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("vcnId")]
        public Input<string>? VcnId { get; set; }

        public OpensearchClusterPipelineState()
        {
        }
        public static new OpensearchClusterPipelineState Empty => new OpensearchClusterPipelineState();
    }
}
