// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opensearch.Outputs
{

    [OutputType]
    public sealed class GetOpensearchClustersOpensearchClusterCollectionItemResult
    {
        /// <summary>
        /// The availability domains to distribute the cluser nodes across.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityDomains;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        public readonly int ConfigureOutboundClusterTrigger;
        /// <summary>
        /// The number of data nodes configured for the cluster.
        /// </summary>
        public readonly int DataNodeCount;
        /// <summary>
        /// The bare metal shape for the cluster's data nodes.
        /// </summary>
        public readonly string DataNodeHostBareMetalShape;
        /// <summary>
        /// The amount of memory in GB, for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeHostMemoryGb;
        /// <summary>
        /// The number of OCPUs configured for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeHostOcpuCount;
        /// <summary>
        /// The node shape for the cluster's data nodes.
        /// </summary>
        public readonly string DataNodeHostShape;
        /// <summary>
        /// The instance type for the cluster's data nodes.
        /// </summary>
        public readonly string DataNodeHostType;
        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeStorageGb;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// unique OpensearchCluster identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of inbound clusters for which this cluster is an outbound cluster
        /// </summary>
        public readonly ImmutableArray<string> InboundClusterIds;
        /// <summary>
        /// Additional information about the current lifecycle state of the cluster.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Details for the maintenance activity.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemMaintenanceDetailResult> MaintenanceDetails;
        /// <summary>
        /// The number of master nodes configured for the cluster.
        /// </summary>
        public readonly int MasterNodeCount;
        /// <summary>
        /// The bare metal shape for the cluster's master nodes.
        /// </summary>
        public readonly string MasterNodeHostBareMetalShape;
        /// <summary>
        /// The amount of memory in GB, for the cluster's master nodes.
        /// </summary>
        public readonly int MasterNodeHostMemoryGb;
        /// <summary>
        /// The number of OCPUs configured for cluster's master nodes.
        /// </summary>
        public readonly int MasterNodeHostOcpuCount;
        /// <summary>
        /// The node shape for the cluster's master nodes.
        /// </summary>
        public readonly string MasterNodeHostShape;
        /// <summary>
        /// The instance type for the cluster's master nodes.
        /// </summary>
        public readonly string MasterNodeHostType;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
        /// </summary>
        public readonly string OpendashboardFqdn;
        /// <summary>
        /// The number of OpenSearch Dashboard nodes configured for the cluster.
        /// </summary>
        public readonly int OpendashboardNodeCount;
        /// <summary>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        public readonly int OpendashboardNodeHostMemoryGb;
        /// <summary>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        public readonly int OpendashboardNodeHostOcpuCount;
        /// <summary>
        /// The node shape for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        public readonly string OpendashboardNodeHostShape;
        /// <summary>
        /// The private IP address for the cluster's OpenSearch Dashboard.
        /// </summary>
        public readonly string OpendashboardPrivateIp;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        public readonly string OpensearchFqdn;
        /// <summary>
        /// The cluster's private IP address.
        /// </summary>
        public readonly string OpensearchPrivateIp;
        /// <summary>
        /// This configuration is used for passing request details to connect outbound cluster(s) to the inbound cluster (coordinating cluster)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemOutboundClusterConfigResult> OutboundClusterConfigs;
        /// <summary>
        /// The customer IP addresses of the endpoint in customer VCN
        /// </summary>
        public readonly ImmutableArray<string> ReverseConnectionEndpointCustomerIps;
        /// <summary>
        /// The list of reverse connection endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemReverseConnectionEndpointResult> ReverseConnectionEndpoints;
        /// <summary>
        /// The number of search nodes configured for the cluster.
        /// </summary>
        public readonly int SearchNodeCount;
        /// <summary>
        /// The amount of memory in GB, for the cluster's search nodes.
        /// </summary>
        public readonly int SearchNodeHostMemoryGb;
        /// <summary>
        /// The number of OCPUs configured for the cluster's search nodes.
        /// </summary>
        public readonly int SearchNodeHostOcpuCount;
        /// <summary>
        /// The node shape for the cluster's search nodes.
        /// </summary>
        public readonly string SearchNodeHostShape;
        /// <summary>
        /// The instance type for the cluster's search nodes.
        /// </summary>
        public readonly string SearchNodeHostType;
        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's search nodes.
        /// </summary>
        public readonly int SearchNodeStorageGb;
        /// <summary>
        /// The name of the master user that are used to manage security config
        /// </summary>
        public readonly string SecurityMasterUserName;
        /// <summary>
        /// The password hash of the master user that are used to manage security config
        /// </summary>
        public readonly string SecurityMasterUserPasswordHash;
        /// <summary>
        /// The security mode of the cluster.
        /// </summary>
        public readonly string SecurityMode;
        public readonly ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemSecuritySamlConfigResult> SecuritySamlConfigs;
        /// <summary>
        /// The software version the cluster is running.
        /// </summary>
        public readonly string SoftwareVersion;
        /// <summary>
        /// A filter to return only OpensearchClusters their lifecycleState matches the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </summary>
        public readonly string SubnetCompartmentId;
        /// <summary>
        /// The OCID of the cluster's subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        public readonly string TimeDeleted;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The size in GB of the cluster's total storage.
        /// </summary>
        public readonly int TotalStorageGb;
        public readonly int UpgradeMajorVersionTrigger;
        /// <summary>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </summary>
        public readonly string VcnCompartmentId;
        /// <summary>
        /// The OCID of the cluster's VCN.
        /// </summary>
        public readonly string VcnId;

        [OutputConstructor]
        private GetOpensearchClustersOpensearchClusterCollectionItemResult(
            ImmutableArray<string> availabilityDomains,

            string compartmentId,

            int configureOutboundClusterTrigger,

            int dataNodeCount,

            string dataNodeHostBareMetalShape,

            int dataNodeHostMemoryGb,

            int dataNodeHostOcpuCount,

            string dataNodeHostShape,

            string dataNodeHostType,

            int dataNodeStorageGb,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            string fqdn,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            ImmutableArray<string> inboundClusterIds,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemMaintenanceDetailResult> maintenanceDetails,

            int masterNodeCount,

            string masterNodeHostBareMetalShape,

            int masterNodeHostMemoryGb,

            int masterNodeHostOcpuCount,

            string masterNodeHostShape,

            string masterNodeHostType,

            string opendashboardFqdn,

            int opendashboardNodeCount,

            int opendashboardNodeHostMemoryGb,

            int opendashboardNodeHostOcpuCount,

            string opendashboardNodeHostShape,

            string opendashboardPrivateIp,

            string opensearchFqdn,

            string opensearchPrivateIp,

            ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemOutboundClusterConfigResult> outboundClusterConfigs,

            ImmutableArray<string> reverseConnectionEndpointCustomerIps,

            ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemReverseConnectionEndpointResult> reverseConnectionEndpoints,

            int searchNodeCount,

            int searchNodeHostMemoryGb,

            int searchNodeHostOcpuCount,

            string searchNodeHostShape,

            string searchNodeHostType,

            int searchNodeStorageGb,

            string securityMasterUserName,

            string securityMasterUserPasswordHash,

            string securityMode,

            ImmutableArray<Outputs.GetOpensearchClustersOpensearchClusterCollectionItemSecuritySamlConfigResult> securitySamlConfigs,

            string softwareVersion,

            string state,

            string subnetCompartmentId,

            string subnetId,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeDeleted,

            string timeUpdated,

            int totalStorageGb,

            int upgradeMajorVersionTrigger,

            string vcnCompartmentId,

            string vcnId)
        {
            AvailabilityDomains = availabilityDomains;
            CompartmentId = compartmentId;
            ConfigureOutboundClusterTrigger = configureOutboundClusterTrigger;
            DataNodeCount = dataNodeCount;
            DataNodeHostBareMetalShape = dataNodeHostBareMetalShape;
            DataNodeHostMemoryGb = dataNodeHostMemoryGb;
            DataNodeHostOcpuCount = dataNodeHostOcpuCount;
            DataNodeHostShape = dataNodeHostShape;
            DataNodeHostType = dataNodeHostType;
            DataNodeStorageGb = dataNodeStorageGb;
            DefinedTags = definedTags;
            DisplayName = displayName;
            Fqdn = fqdn;
            FreeformTags = freeformTags;
            Id = id;
            InboundClusterIds = inboundClusterIds;
            LifecycleDetails = lifecycleDetails;
            MaintenanceDetails = maintenanceDetails;
            MasterNodeCount = masterNodeCount;
            MasterNodeHostBareMetalShape = masterNodeHostBareMetalShape;
            MasterNodeHostMemoryGb = masterNodeHostMemoryGb;
            MasterNodeHostOcpuCount = masterNodeHostOcpuCount;
            MasterNodeHostShape = masterNodeHostShape;
            MasterNodeHostType = masterNodeHostType;
            OpendashboardFqdn = opendashboardFqdn;
            OpendashboardNodeCount = opendashboardNodeCount;
            OpendashboardNodeHostMemoryGb = opendashboardNodeHostMemoryGb;
            OpendashboardNodeHostOcpuCount = opendashboardNodeHostOcpuCount;
            OpendashboardNodeHostShape = opendashboardNodeHostShape;
            OpendashboardPrivateIp = opendashboardPrivateIp;
            OpensearchFqdn = opensearchFqdn;
            OpensearchPrivateIp = opensearchPrivateIp;
            OutboundClusterConfigs = outboundClusterConfigs;
            ReverseConnectionEndpointCustomerIps = reverseConnectionEndpointCustomerIps;
            ReverseConnectionEndpoints = reverseConnectionEndpoints;
            SearchNodeCount = searchNodeCount;
            SearchNodeHostMemoryGb = searchNodeHostMemoryGb;
            SearchNodeHostOcpuCount = searchNodeHostOcpuCount;
            SearchNodeHostShape = searchNodeHostShape;
            SearchNodeHostType = searchNodeHostType;
            SearchNodeStorageGb = searchNodeStorageGb;
            SecurityMasterUserName = securityMasterUserName;
            SecurityMasterUserPasswordHash = securityMasterUserPasswordHash;
            SecurityMode = securityMode;
            SecuritySamlConfigs = securitySamlConfigs;
            SoftwareVersion = softwareVersion;
            State = state;
            SubnetCompartmentId = subnetCompartmentId;
            SubnetId = subnetId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeDeleted = timeDeleted;
            TimeUpdated = timeUpdated;
            TotalStorageGb = totalStorageGb;
            UpgradeMajorVersionTrigger = upgradeMajorVersionTrigger;
            VcnCompartmentId = vcnCompartmentId;
            VcnId = vcnId;
        }
    }
}
