// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opensearch.Outputs
{

    [OutputType]
    public sealed class GetOpensearchClustersOpensearchClusterCollectionItemResult
    {
        /// <summary>
        /// The availability domains to distribute the cluser nodes across.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityDomains;
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The number of data nodes configured for the cluster.
        /// </summary>
        public readonly int DataNodeCount;
        /// <summary>
        /// The bare metal shape for the cluster's data nodes.
        /// </summary>
        public readonly string DataNodeHostBareMetalShape;
        /// <summary>
        /// The amount of memory in GB, for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeHostMemoryGb;
        /// <summary>
        /// The number of OCPUs configured for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeHostOcpuCount;
        /// <summary>
        /// The instance type for the cluster's data nodes.
        /// </summary>
        public readonly string DataNodeHostType;
        /// <summary>
        /// The amount of storage in GB, to configure per node for the cluster's data nodes.
        /// </summary>
        public readonly int DataNodeStorageGb;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// unique OpensearchCluster identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Additional information about the current lifecycle state of the cluster.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The number of master nodes configured for the cluster.
        /// </summary>
        public readonly int MasterNodeCount;
        /// <summary>
        /// The bare metal shape for the cluster's master nodes.
        /// </summary>
        public readonly string MasterNodeHostBareMetalShape;
        /// <summary>
        /// The amount of memory in GB, for the cluster's master nodes.
        /// </summary>
        public readonly int MasterNodeHostMemoryGb;
        /// <summary>
        /// The number of OCPUs configured for cluster's master nodes.
        /// </summary>
        public readonly int MasterNodeHostOcpuCount;
        /// <summary>
        /// The instance type for the cluster's master nodes.
        /// </summary>
        public readonly string MasterNodeHostType;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
        /// </summary>
        public readonly string OpendashboardFqdn;
        /// <summary>
        /// The number of OpenSearch Dashboard nodes configured for the cluster.
        /// </summary>
        public readonly int OpendashboardNodeCount;
        /// <summary>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        public readonly int OpendashboardNodeHostMemoryGb;
        /// <summary>
        /// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
        /// </summary>
        public readonly int OpendashboardNodeHostOcpuCount;
        /// <summary>
        /// The private IP address for the cluster's OpenSearch Dashboard.
        /// </summary>
        public readonly string OpendashboardPrivateIp;
        /// <summary>
        /// The fully qualified domain name (FQDN) for the cluster's API endpoint.
        /// </summary>
        public readonly string OpensearchFqdn;
        /// <summary>
        /// The cluster's private IP address.
        /// </summary>
        public readonly string OpensearchPrivateIp;
        /// <summary>
        /// The software version the cluster is running.
        /// </summary>
        public readonly string SoftwareVersion;
        /// <summary>
        /// A filter to return only OpensearchClusters their lifecycleState matches the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The OCID for the compartment where the cluster's subnet is located.
        /// </summary>
        public readonly string SubnetCompartmentId;
        /// <summary>
        /// The OCID of the cluster's subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        public readonly string TimeDeleted;
        /// <summary>
        /// The amount of time in milliseconds since the cluster was updated.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The size in GB of the cluster's total storage.
        /// </summary>
        public readonly int TotalStorageGb;
        /// <summary>
        /// The OCID for the compartment where the cluster's VCN is located.
        /// </summary>
        public readonly string VcnCompartmentId;
        /// <summary>
        /// The OCID of the cluster's VCN.
        /// </summary>
        public readonly string VcnId;

        [OutputConstructor]
        private GetOpensearchClustersOpensearchClusterCollectionItemResult(
            ImmutableArray<string> availabilityDomains,

            string compartmentId,

            int dataNodeCount,

            string dataNodeHostBareMetalShape,

            int dataNodeHostMemoryGb,

            int dataNodeHostOcpuCount,

            string dataNodeHostType,

            int dataNodeStorageGb,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            string fqdn,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string lifecycleDetails,

            int masterNodeCount,

            string masterNodeHostBareMetalShape,

            int masterNodeHostMemoryGb,

            int masterNodeHostOcpuCount,

            string masterNodeHostType,

            string opendashboardFqdn,

            int opendashboardNodeCount,

            int opendashboardNodeHostMemoryGb,

            int opendashboardNodeHostOcpuCount,

            string opendashboardPrivateIp,

            string opensearchFqdn,

            string opensearchPrivateIp,

            string softwareVersion,

            string state,

            string subnetCompartmentId,

            string subnetId,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeDeleted,

            string timeUpdated,

            int totalStorageGb,

            string vcnCompartmentId,

            string vcnId)
        {
            AvailabilityDomains = availabilityDomains;
            CompartmentId = compartmentId;
            DataNodeCount = dataNodeCount;
            DataNodeHostBareMetalShape = dataNodeHostBareMetalShape;
            DataNodeHostMemoryGb = dataNodeHostMemoryGb;
            DataNodeHostOcpuCount = dataNodeHostOcpuCount;
            DataNodeHostType = dataNodeHostType;
            DataNodeStorageGb = dataNodeStorageGb;
            DefinedTags = definedTags;
            DisplayName = displayName;
            Fqdn = fqdn;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            MasterNodeCount = masterNodeCount;
            MasterNodeHostBareMetalShape = masterNodeHostBareMetalShape;
            MasterNodeHostMemoryGb = masterNodeHostMemoryGb;
            MasterNodeHostOcpuCount = masterNodeHostOcpuCount;
            MasterNodeHostType = masterNodeHostType;
            OpendashboardFqdn = opendashboardFqdn;
            OpendashboardNodeCount = opendashboardNodeCount;
            OpendashboardNodeHostMemoryGb = opendashboardNodeHostMemoryGb;
            OpendashboardNodeHostOcpuCount = opendashboardNodeHostOcpuCount;
            OpendashboardPrivateIp = opendashboardPrivateIp;
            OpensearchFqdn = opensearchFqdn;
            OpensearchPrivateIp = opensearchPrivateIp;
            SoftwareVersion = softwareVersion;
            State = state;
            SubnetCompartmentId = subnetCompartmentId;
            SubnetId = subnetId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeDeleted = timeDeleted;
            TimeUpdated = timeUpdated;
            TotalStorageGb = totalStorageGb;
            VcnCompartmentId = vcnCompartmentId;
            VcnId = vcnId;
        }
    }
}
