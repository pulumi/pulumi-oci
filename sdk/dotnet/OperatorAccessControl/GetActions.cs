// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OperatorAccessControl
{
    public static class GetActions
    {
        /// <summary>
        /// This data source provides the list of Operator Actions in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all the OperatorActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorActions = Oci.OperatorAccessControl.GetActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = operatorActionName,
        ///         ResourceType = operatorActionResourceType,
        ///         State = operatorActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetActionsResult> InvokeAsync(GetActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetActionsResult>("oci:OperatorAccessControl/getActions:getActions", args ?? new GetActionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Operator Actions in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all the OperatorActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorActions = Oci.OperatorAccessControl.GetActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = operatorActionName,
        ///         ResourceType = operatorActionResourceType,
        ///         State = operatorActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetActionsResult> Invoke(GetActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetActionsResult>("oci:OperatorAccessControl/getActions:getActions", args ?? new GetActionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Operator Actions in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all the OperatorActions available in the system.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorActions = Oci.OperatorAccessControl.GetActions.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = operatorActionName,
        ///         ResourceType = operatorActionResourceType,
        ///         State = operatorActionState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetActionsResult> Invoke(GetActionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetActionsResult>("oci:OperatorAccessControl/getActions:getActions", args ?? new GetActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetActionsFilterArgs>? _filters;
        public List<Inputs.GetActionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetActionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only lists of resources that match the entire given service type.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given OperatorAction lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetActionsArgs()
        {
        }
        public static new GetActionsArgs Empty => new GetActionsArgs();
    }

    public sealed class GetActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetActionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetActionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetActionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only lists of resources that match the entire given service type.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given OperatorAction lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetActionsInvokeArgs()
        {
        }
        public static new GetActionsInvokeArgs Empty => new GetActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetActionsResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetActionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the property
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of operator_action_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetActionsOperatorActionCollectionResult> OperatorActionCollections;
        /// <summary>
        /// resourceType for which the OperatorAction is applicable
        /// </summary>
        public readonly string? ResourceType;
        public readonly string? State;

        [OutputConstructor]
        private GetActionsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetActionsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetActionsOperatorActionCollectionResult> operatorActionCollections,

            string? resourceType,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            OperatorActionCollections = operatorActionCollections;
            ResourceType = resourceType;
            State = state;
        }
    }
}
