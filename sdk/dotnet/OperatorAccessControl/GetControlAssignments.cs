// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OperatorAccessControl
{
    public static class GetControlAssignments
    {
        /// <summary>
        /// This data source provides the list of Operator Control Assignments in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all Operator Control Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorControlAssignments = Oci.OperatorAccessControl.GetControlAssignments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         OperatorControlName = testOperatorControl.Name,
        ///         ResourceName = operatorControlAssignmentResourceName,
        ///         ResourceType = operatorControlAssignmentResourceType,
        ///         State = operatorControlAssignmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetControlAssignmentsResult> InvokeAsync(GetControlAssignmentsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetControlAssignmentsResult>("oci:OperatorAccessControl/getControlAssignments:getControlAssignments", args ?? new GetControlAssignmentsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Operator Control Assignments in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all Operator Control Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorControlAssignments = Oci.OperatorAccessControl.GetControlAssignments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         OperatorControlName = testOperatorControl.Name,
        ///         ResourceName = operatorControlAssignmentResourceName,
        ///         ResourceType = operatorControlAssignmentResourceType,
        ///         State = operatorControlAssignmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetControlAssignmentsResult> Invoke(GetControlAssignmentsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetControlAssignmentsResult>("oci:OperatorAccessControl/getControlAssignments:getControlAssignments", args ?? new GetControlAssignmentsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Operator Control Assignments in Oracle Cloud Infrastructure Operator Access Control service.
        /// 
        /// Lists all Operator Control Assignments.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOperatorControlAssignments = Oci.OperatorAccessControl.GetControlAssignments.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         OperatorControlName = testOperatorControl.Name,
        ///         ResourceName = operatorControlAssignmentResourceName,
        ///         ResourceType = operatorControlAssignmentResourceType,
        ///         State = operatorControlAssignmentState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetControlAssignmentsResult> Invoke(GetControlAssignmentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetControlAssignmentsResult>("oci:OperatorAccessControl/getControlAssignments:getControlAssignments", args ?? new GetControlAssignmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetControlAssignmentsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetControlAssignmentsFilterArgs>? _filters;
        public List<Inputs.GetControlAssignmentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetControlAssignmentsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return OperatorControl that match the given operatorControlName.
        /// </summary>
        [Input("operatorControlName")]
        public string? OperatorControlName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given ResourceName.
        /// </summary>
        [Input("resourceName")]
        public string? ResourceName { get; set; }

        /// <summary>
        /// A filter to return only lists of resources that match the entire given service type.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetControlAssignmentsArgs()
        {
        }
        public static new GetControlAssignmentsArgs Empty => new GetControlAssignmentsArgs();
    }

    public sealed class GetControlAssignmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetControlAssignmentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetControlAssignmentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetControlAssignmentsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return OperatorControl that match the given operatorControlName.
        /// </summary>
        [Input("operatorControlName")]
        public Input<string>? OperatorControlName { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given ResourceName.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// A filter to return only lists of resources that match the entire given service type.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetControlAssignmentsInvokeArgs()
        {
        }
        public static new GetControlAssignmentsInvokeArgs Empty => new GetControlAssignmentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetControlAssignmentsResult
    {
        /// <summary>
        /// The OCID of the comparment that contains the operator control assignment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetControlAssignmentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of operator_control_assignment_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetControlAssignmentsOperatorControlAssignmentCollectionResult> OperatorControlAssignmentCollections;
        public readonly string? OperatorControlName;
        /// <summary>
        /// Name of the target resource.
        /// </summary>
        public readonly string? ResourceName;
        /// <summary>
        /// resourceType for which the OperatorControlAssignment is applicable
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The current lifcycle state of the OperatorControl.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetControlAssignmentsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetControlAssignmentsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetControlAssignmentsOperatorControlAssignmentCollectionResult> operatorControlAssignmentCollections,

            string? operatorControlName,

            string? resourceName,

            string? resourceType,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            OperatorControlAssignmentCollections = operatorControlAssignmentCollections;
            OperatorControlName = operatorControlName;
            ResourceName = resourceName;
            ResourceType = resourceType;
            State = state;
        }
    }
}
