// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OperatorAccessControl
{
    /// <summary>
    /// This resource provides the Operator Control resource in Oracle Cloud Infrastructure Operator Access Control service.
    /// 
    /// Creates an Operator Control.
    /// 
    /// ## Import
    /// 
    /// OperatorControls can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:OperatorAccessControl/operatorControl:OperatorControl test_operator_control "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:OperatorAccessControl/operatorControl:OperatorControl")]
    public partial class OperatorControl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
        /// </summary>
        [Output("approvalRequiredOpActionLists")]
        public Output<ImmutableArray<string>> ApprovalRequiredOpActionLists { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of user groups who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        [Output("approverGroupsLists")]
        public Output<ImmutableArray<string>> ApproverGroupsLists { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of users who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        [Output("approversLists")]
        public Output<ImmutableArray<string>> ApproversLists { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains this operator control.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>?> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Description of the operator control.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of emailId.
        /// </summary>
        [Output("emailIdLists")]
        public Output<ImmutableArray<string>> EmailIdLists { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>?> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Whether the operator control is a default Operator Control.
        /// </summary>
        [Output("isDefaultOperatorControl")]
        public Output<bool?> IsDefaultOperatorControl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
        /// </summary>
        [Output("isFullyPreApproved")]
        public Output<bool> IsFullyPreApproved { get; private set; } = null!;

        /// <summary>
        /// Description associated with the latest modification of the operator control.
        /// </summary>
        [Output("lastModifiedInfo")]
        public Output<string?> LastModifiedInfo { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name of the operator control.
        /// </summary>
        [Output("operatorControlName")]
        public Output<string> OperatorControlName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be auto-approved if the access request only contain operator actions in the pre-approved list.
        /// </summary>
        [Output("preApprovedOpActionLists")]
        public Output<ImmutableArray<string>> PreApprovedOpActionLists { get; private set; } = null!;

        /// <summary>
        /// resourceType for which the OperatorControl is applicable
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// The current lifecycle state of the operator control.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the message that will be displayed to the operator users while accessing the system.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("systemMessage")]
        public Output<string?> SystemMessage { get; private set; } = null!;

        /// <summary>
        /// Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeOfCreation")]
        public Output<string?> TimeOfCreation { get; private set; } = null!;

        /// <summary>
        /// Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
        /// </summary>
        [Output("timeOfDeletion")]
        public Output<string?> TimeOfDeletion { get; private set; } = null!;

        /// <summary>
        /// Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeOfModification")]
        public Output<string?> TimeOfModification { get; private set; } = null!;


        /// <summary>
        /// Create a OperatorControl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OperatorControl(string name, OperatorControlArgs args, CustomResourceOptions? options = null)
            : base("oci:OperatorAccessControl/operatorControl:OperatorControl", name, args ?? new OperatorControlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OperatorControl(string name, Input<string> id, OperatorControlState? state = null, CustomResourceOptions? options = null)
            : base("oci:OperatorAccessControl/operatorControl:OperatorControl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OperatorControl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OperatorControl Get(string name, Input<string> id, OperatorControlState? state = null, CustomResourceOptions? options = null)
        {
            return new OperatorControl(name, id, state, options);
        }
    }

    public sealed class OperatorControlArgs : global::Pulumi.ResourceArgs
    {
        [Input("approverGroupsLists", required: true)]
        private InputList<string>? _approverGroupsLists;

        /// <summary>
        /// (Updatable) List of user groups who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        public InputList<string> ApproverGroupsLists
        {
            get => _approverGroupsLists ?? (_approverGroupsLists = new InputList<string>());
            set => _approverGroupsLists = value;
        }

        [Input("approversLists")]
        private InputList<string>? _approversLists;

        /// <summary>
        /// (Updatable) List of users who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        public InputList<string> ApproversLists
        {
            get => _approversLists ?? (_approversLists = new InputList<string>());
            set => _approversLists = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains this operator control.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Description of the operator control.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIdLists")]
        private InputList<string>? _emailIdLists;

        /// <summary>
        /// (Updatable) List of emailId.
        /// </summary>
        public InputList<string> EmailIdLists
        {
            get => _emailIdLists ?? (_emailIdLists = new InputList<string>());
            set => _emailIdLists = value;
        }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
        /// </summary>
        [Input("isFullyPreApproved", required: true)]
        public Input<bool> IsFullyPreApproved { get; set; } = null!;

        /// <summary>
        /// (Updatable) Name of the operator control.
        /// </summary>
        [Input("operatorControlName", required: true)]
        public Input<string> OperatorControlName { get; set; } = null!;

        [Input("preApprovedOpActionLists")]
        private InputList<string>? _preApprovedOpActionLists;

        /// <summary>
        /// (Updatable) List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be auto-approved if the access request only contain operator actions in the pre-approved list.
        /// </summary>
        public InputList<string> PreApprovedOpActionLists
        {
            get => _preApprovedOpActionLists ?? (_preApprovedOpActionLists = new InputList<string>());
            set => _preApprovedOpActionLists = value;
        }

        /// <summary>
        /// resourceType for which the OperatorControl is applicable
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// (Updatable) This is the message that will be displayed to the operator users while accessing the system.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("systemMessage")]
        public Input<string>? SystemMessage { get; set; }

        public OperatorControlArgs()
        {
        }
        public static new OperatorControlArgs Empty => new OperatorControlArgs();
    }

    public sealed class OperatorControlState : global::Pulumi.ResourceArgs
    {
        [Input("approvalRequiredOpActionLists")]
        private InputList<string>? _approvalRequiredOpActionLists;

        /// <summary>
        /// List of operator actions that need explicit approval. Any operator action not in the pre-approved list will require explicit approval. Access requests associated with a resource governed by this operator control will be require explicit approval if the access request contains any operator action in this list.
        /// </summary>
        public InputList<string> ApprovalRequiredOpActionLists
        {
            get => _approvalRequiredOpActionLists ?? (_approvalRequiredOpActionLists = new InputList<string>());
            set => _approvalRequiredOpActionLists = value;
        }

        [Input("approverGroupsLists")]
        private InputList<string>? _approverGroupsLists;

        /// <summary>
        /// (Updatable) List of user groups who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        public InputList<string> ApproverGroupsLists
        {
            get => _approverGroupsLists ?? (_approverGroupsLists = new InputList<string>());
            set => _approverGroupsLists = value;
        }

        [Input("approversLists")]
        private InputList<string>? _approversLists;

        /// <summary>
        /// (Updatable) List of users who can approve an access request associated with a resource governed by this operator control.
        /// </summary>
        public InputList<string> ApproversLists
        {
            get => _approversLists ?? (_approversLists = new InputList<string>());
            set => _approversLists = value;
        }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains this operator control.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Description of the operator control.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIdLists")]
        private InputList<string>? _emailIdLists;

        /// <summary>
        /// (Updatable) List of emailId.
        /// </summary>
        public InputList<string> EmailIdLists
        {
            get => _emailIdLists ?? (_emailIdLists = new InputList<string>());
            set => _emailIdLists = value;
        }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Whether the operator control is a default Operator Control.
        /// </summary>
        [Input("isDefaultOperatorControl")]
        public Input<bool>? IsDefaultOperatorControl { get; set; }

        /// <summary>
        /// (Updatable) Whether all the operator actions have been pre-approved. If yes, all access requests associated with a resource governed by this operator control  will be auto-approved.
        /// </summary>
        [Input("isFullyPreApproved")]
        public Input<bool>? IsFullyPreApproved { get; set; }

        /// <summary>
        /// Description associated with the latest modification of the operator control.
        /// </summary>
        [Input("lastModifiedInfo")]
        public Input<string>? LastModifiedInfo { get; set; }

        /// <summary>
        /// (Updatable) Name of the operator control.
        /// </summary>
        [Input("operatorControlName")]
        public Input<string>? OperatorControlName { get; set; }

        [Input("preApprovedOpActionLists")]
        private InputList<string>? _preApprovedOpActionLists;

        /// <summary>
        /// (Updatable) List of pre-approved operator actions. Access requests associated with a resource governed by this operator control will be auto-approved if the access request only contain operator actions in the pre-approved list.
        /// </summary>
        public InputList<string> PreApprovedOpActionLists
        {
            get => _preApprovedOpActionLists ?? (_preApprovedOpActionLists = new InputList<string>());
            set => _preApprovedOpActionLists = value;
        }

        /// <summary>
        /// resourceType for which the OperatorControl is applicable
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The current lifecycle state of the operator control.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) This is the message that will be displayed to the operator users while accessing the system.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("systemMessage")]
        public Input<string>? SystemMessage { get; set; }

        /// <summary>
        /// Time when the operator control was created expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeOfCreation")]
        public Input<string>? TimeOfCreation { get; set; }

        /// <summary>
        /// Time when deleted expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'. Note a deleted operator control still stays in the system, so that you can still audit operator actions associated with access requests raised on target resources governed by the deleted operator control.
        /// </summary>
        [Input("timeOfDeletion")]
        public Input<string>? TimeOfDeletion { get; set; }

        /// <summary>
        /// Time when the operator control was last modified expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeOfModification")]
        public Input<string>? TimeOfModification { get; set; }

        public OperatorControlState()
        {
        }
        public static new OperatorControlState Empty => new OperatorControlState();
    }
}
