// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OperatorAccessControl
{
    /// <summary>
    /// This resource provides the Operator Control Assignment resource in Oracle Cloud Infrastructure Operator Access Control service.
    /// 
    /// Creates an Operator Control Assignment resource. In effect, this brings the target resource under the governance of the Operator Control for specified time duration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testOperatorControlAssignment = new Oci.OperatorAccessControl.OperatorControlAssignment("testOperatorControlAssignment", new Oci.OperatorAccessControl.OperatorControlAssignmentArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             IsEnforcedAlways = @var.Operator_control_assignment_is_enforced_always,
    ///             OperatorControlId = oci_operator_access_control_operator_control.Test_operator_control.Id,
    ///             ResourceCompartmentId = oci_identity_compartment.Test_compartment.Id,
    ///             ResourceId = oci_operator_access_control_resource.Test_resource.Id,
    ///             ResourceName = @var.Operator_control_assignment_resource_name,
    ///             ResourceType = @var.Operator_control_assignment_resource_type,
    ///             Comment = @var.Operator_control_assignment_comment,
    ///             DefinedTags = @var.Operator_control_assignment_defined_tags,
    ///             FreeformTags = @var.Operator_control_assignment_freeform_tags,
    ///             IsAutoApproveDuringMaintenance = @var.Operator_control_assignment_is_auto_approve_during_maintenance,
    ///             IsLogForwarded = @var.Operator_control_assignment_is_log_forwarded,
    ///             RemoteSyslogServerAddress = @var.Operator_control_assignment_remote_syslog_server_address,
    ///             RemoteSyslogServerCaCert = @var.Operator_control_assignment_remote_syslog_server_ca_cert,
    ///             RemoteSyslogServerPort = @var.Operator_control_assignment_remote_syslog_server_port,
    ///             TimeAssignmentFrom = @var.Operator_control_assignment_time_assignment_from,
    ///             TimeAssignmentTo = @var.Operator_control_assignment_time_assignment_to,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// OperatorControlAssignments can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:OperatorAccessControl/operatorControlAssignment:OperatorControlAssignment test_operator_control_assignment "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:OperatorAccessControl/operatorControlAssignment:OperatorControlAssignment")]
    public partial class OperatorControlAssignment : Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the user who created this operator control assignment.
        /// </summary>
        [Output("assignerId")]
        public Output<string> AssignerId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Comment about the assignment of the operator control to this target resource.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains the operator control assignment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// description containing reason for releasing of OperatorControl.
        /// </summary>
        [Output("detachmentDescription")]
        public Output<string> DetachmentDescription { get; private set; } = null!;

        /// <summary>
        /// The code identifying the error occurred during Assignment operation.
        /// </summary>
        [Output("errorCode")]
        public Output<int> ErrorCode { get; private set; } = null!;

        /// <summary>
        /// The message describing the error occurred during Assignment operation.
        /// </summary>
        [Output("errorMessage")]
        public Output<string> ErrorMessage { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The boolean if true would autoApprove during maintenance.
        /// </summary>
        [Output("isAutoApproveDuringMaintenance")]
        public Output<bool> IsAutoApproveDuringMaintenance { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If set, then the target resource is always governed by the operator control.
        /// </summary>
        [Output("isEnforcedAlways")]
        public Output<bool> IsEnforcedAlways { get; private set; } = null!;

        /// <summary>
        /// (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
        /// </summary>
        [Output("isLogForwarded")]
        public Output<bool> IsLogForwarded { get; private set; } = null!;

        /// <summary>
        /// More in detail about the lifeCycleState.
        /// </summary>
        [Output("lifecycleDetails")]
        public Output<string> LifecycleDetails { get; private set; } = null!;

        /// <summary>
        /// The OCID of the operator control that is being assigned to a target resource.
        /// </summary>
        [Output("operatorControlId")]
        public Output<string> OperatorControlId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
        /// </summary>
        [Output("remoteSyslogServerAddress")]
        public Output<string> RemoteSyslogServerAddress { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
        /// </summary>
        [Output("remoteSyslogServerCaCert")]
        public Output<string> RemoteSyslogServerCaCert { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
        /// </summary>
        [Output("remoteSyslogServerPort")]
        public Output<int> RemoteSyslogServerPort { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment that contains the target resource.
        /// </summary>
        [Output("resourceCompartmentId")]
        public Output<string> ResourceCompartmentId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the target resource being brought under the governance of the operator control.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// Name of the target resource.
        /// </summary>
        [Output("resourceName")]
        public Output<string> ResourceName { get; private set; } = null!;

        /// <summary>
        /// Type of the target resource.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// The current lifcycle state of the OperatorControl.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeAssignmentFrom")]
        public Output<string> TimeAssignmentFrom { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeAssignmentTo")]
        public Output<string> TimeAssignmentTo { get; private set; } = null!;

        /// <summary>
        /// Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeOfAssignment")]
        public Output<string> TimeOfAssignment { get; private set; } = null!;

        /// <summary>
        /// Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Output("timeOfDeletion")]
        public Output<string> TimeOfDeletion { get; private set; } = null!;

        /// <summary>
        /// User id who released the operatorControl.
        /// </summary>
        [Output("unassignerId")]
        public Output<string> UnassignerId { get; private set; } = null!;


        /// <summary>
        /// Create a OperatorControlAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OperatorControlAssignment(string name, OperatorControlAssignmentArgs args, CustomResourceOptions? options = null)
            : base("oci:OperatorAccessControl/operatorControlAssignment:OperatorControlAssignment", name, args ?? new OperatorControlAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OperatorControlAssignment(string name, Input<string> id, OperatorControlAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("oci:OperatorAccessControl/operatorControlAssignment:OperatorControlAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OperatorControlAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OperatorControlAssignment Get(string name, Input<string> id, OperatorControlAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new OperatorControlAssignment(name, id, state, options);
        }
    }

    public sealed class OperatorControlAssignmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Comment about the assignment of the operator control to this target resource.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains the operator control assignment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The boolean if true would autoApprove during maintenance.
        /// </summary>
        [Input("isAutoApproveDuringMaintenance")]
        public Input<bool>? IsAutoApproveDuringMaintenance { get; set; }

        /// <summary>
        /// (Updatable) If set, then the target resource is always governed by the operator control.
        /// </summary>
        [Input("isEnforcedAlways", required: true)]
        public Input<bool> IsEnforcedAlways { get; set; } = null!;

        /// <summary>
        /// (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
        /// </summary>
        [Input("isLogForwarded")]
        public Input<bool>? IsLogForwarded { get; set; }

        /// <summary>
        /// The OCID of the operator control that is being assigned to a target resource.
        /// </summary>
        [Input("operatorControlId", required: true)]
        public Input<string> OperatorControlId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
        /// </summary>
        [Input("remoteSyslogServerAddress")]
        public Input<string>? RemoteSyslogServerAddress { get; set; }

        /// <summary>
        /// (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
        /// </summary>
        [Input("remoteSyslogServerCaCert")]
        public Input<string>? RemoteSyslogServerCaCert { get; set; }

        /// <summary>
        /// (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
        /// </summary>
        [Input("remoteSyslogServerPort")]
        public Input<int>? RemoteSyslogServerPort { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the target resource.
        /// </summary>
        [Input("resourceCompartmentId", required: true)]
        public Input<string> ResourceCompartmentId { get; set; } = null!;

        /// <summary>
        /// The OCID of the target resource being brought under the governance of the operator control.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// Name of the target resource.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        /// <summary>
        /// Type of the target resource.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeAssignmentFrom")]
        public Input<string>? TimeAssignmentFrom { get; set; }

        /// <summary>
        /// (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeAssignmentTo")]
        public Input<string>? TimeAssignmentTo { get; set; }

        public OperatorControlAssignmentArgs()
        {
        }
    }

    public sealed class OperatorControlAssignmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the user who created this operator control assignment.
        /// </summary>
        [Input("assignerId")]
        public Input<string>? AssignerId { get; set; }

        /// <summary>
        /// (Updatable) Comment about the assignment of the operator control to this target resource.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains the operator control assignment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// description containing reason for releasing of OperatorControl.
        /// </summary>
        [Input("detachmentDescription")]
        public Input<string>? DetachmentDescription { get; set; }

        /// <summary>
        /// The code identifying the error occurred during Assignment operation.
        /// </summary>
        [Input("errorCode")]
        public Input<int>? ErrorCode { get; set; }

        /// <summary>
        /// The message describing the error occurred during Assignment operation.
        /// </summary>
        [Input("errorMessage")]
        public Input<string>? ErrorMessage { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The boolean if true would autoApprove during maintenance.
        /// </summary>
        [Input("isAutoApproveDuringMaintenance")]
        public Input<bool>? IsAutoApproveDuringMaintenance { get; set; }

        /// <summary>
        /// (Updatable) If set, then the target resource is always governed by the operator control.
        /// </summary>
        [Input("isEnforcedAlways")]
        public Input<bool>? IsEnforcedAlways { get; set; }

        /// <summary>
        /// (Updatable) If set, then the audit logs will be forwarded to the relevant remote logging server
        /// </summary>
        [Input("isLogForwarded")]
        public Input<bool>? IsLogForwarded { get; set; }

        /// <summary>
        /// More in detail about the lifeCycleState.
        /// </summary>
        [Input("lifecycleDetails")]
        public Input<string>? LifecycleDetails { get; set; }

        /// <summary>
        /// The OCID of the operator control that is being assigned to a target resource.
        /// </summary>
        [Input("operatorControlId")]
        public Input<string>? OperatorControlId { get; set; }

        /// <summary>
        /// (Updatable) The address of the remote syslog server where the audit logs will be forwarded to. Address in host or IP format.
        /// </summary>
        [Input("remoteSyslogServerAddress")]
        public Input<string>? RemoteSyslogServerAddress { get; set; }

        /// <summary>
        /// (Updatable) The CA certificate of the remote syslog server. Identity of the remote syslog server will be asserted based on this certificate.
        /// </summary>
        [Input("remoteSyslogServerCaCert")]
        public Input<string>? RemoteSyslogServerCaCert { get; set; }

        /// <summary>
        /// (Updatable) The listening port of the remote syslog server. The port range is 0 - 65535. Only TCP supported.
        /// </summary>
        [Input("remoteSyslogServerPort")]
        public Input<int>? RemoteSyslogServerPort { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the target resource.
        /// </summary>
        [Input("resourceCompartmentId")]
        public Input<string>? ResourceCompartmentId { get; set; }

        /// <summary>
        /// The OCID of the target resource being brought under the governance of the operator control.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// Name of the target resource.
        /// </summary>
        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        /// <summary>
        /// Type of the target resource.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The current lifcycle state of the OperatorControl.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) The time at which the target resource will be brought under the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeAssignmentFrom")]
        public Input<string>? TimeAssignmentFrom { get; set; }

        /// <summary>
        /// (Updatable) The time at which the target resource will leave the governance of the operator control in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeAssignmentTo")]
        public Input<string>? TimeAssignmentTo { get; set; }

        /// <summary>
        /// Time when the operator control assignment is created in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeOfAssignment")]
        public Input<string>? TimeOfAssignment { get; set; }

        /// <summary>
        /// Time on which the operator control assignment was deleted in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format.Example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        [Input("timeOfDeletion")]
        public Input<string>? TimeOfDeletion { get; set; }

        /// <summary>
        /// User id who released the operatorControl.
        /// </summary>
        [Input("unassignerId")]
        public Input<string>? UnassignerId { get; set; }

        public OperatorControlAssignmentState()
        {
        }
    }
}
