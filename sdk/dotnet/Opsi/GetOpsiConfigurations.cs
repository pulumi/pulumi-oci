// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Opsi
{
    public static class GetOpsiConfigurations
    {
        /// <summary>
        /// This data source provides the list of Opsi Configurations in Oracle Cloud Infrastructure Opsi service.
        /// 
        /// Gets a list of OPSI configuration resources based on the query parameters specified.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOpsiConfigurations = Oci.Opsi.GetOpsiConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Opsi_configuration_display_name,
        ///         OpsiConfigTypes = @var.Opsi_configuration_opsi_config_type,
        ///         States = @var.Opsi_configuration_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOpsiConfigurationsResult> InvokeAsync(GetOpsiConfigurationsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOpsiConfigurationsResult>("oci:Opsi/getOpsiConfigurations:getOpsiConfigurations", args ?? new GetOpsiConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Opsi Configurations in Oracle Cloud Infrastructure Opsi service.
        /// 
        /// Gets a list of OPSI configuration resources based on the query parameters specified.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOpsiConfigurations = Oci.Opsi.GetOpsiConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Opsi_configuration_display_name,
        ///         OpsiConfigTypes = @var.Opsi_configuration_opsi_config_type,
        ///         States = @var.Opsi_configuration_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOpsiConfigurationsResult> Invoke(GetOpsiConfigurationsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOpsiConfigurationsResult>("oci:Opsi/getOpsiConfigurations:getOpsiConfigurations", args ?? new GetOpsiConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOpsiConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Filter to return based on resources that match the entire display name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetOpsiConfigurationsFilterArgs>? _filters;
        public List<Inputs.GetOpsiConfigurationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOpsiConfigurationsFilterArgs>());
            set => _filters = value;
        }

        [Input("opsiConfigTypes")]
        private List<string>? _opsiConfigTypes;

        /// <summary>
        /// Filter to return based on configuration type of OPSI configuration.
        /// </summary>
        public List<string> OpsiConfigTypes
        {
            get => _opsiConfigTypes ?? (_opsiConfigTypes = new List<string>());
            set => _opsiConfigTypes = value;
        }

        [Input("states")]
        private List<string>? _states;

        /// <summary>
        /// Filter to return based on Lifecycle state of OPSI configuration.
        /// </summary>
        public List<string> States
        {
            get => _states ?? (_states = new List<string>());
            set => _states = value;
        }

        public GetOpsiConfigurationsArgs()
        {
        }
        public static new GetOpsiConfigurationsArgs Empty => new GetOpsiConfigurationsArgs();
    }

    public sealed class GetOpsiConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Filter to return based on resources that match the entire display name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetOpsiConfigurationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetOpsiConfigurationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOpsiConfigurationsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("opsiConfigTypes")]
        private InputList<string>? _opsiConfigTypes;

        /// <summary>
        /// Filter to return based on configuration type of OPSI configuration.
        /// </summary>
        public InputList<string> OpsiConfigTypes
        {
            get => _opsiConfigTypes ?? (_opsiConfigTypes = new InputList<string>());
            set => _opsiConfigTypes = value;
        }

        [Input("states")]
        private InputList<string>? _states;

        /// <summary>
        /// Filter to return based on Lifecycle state of OPSI configuration.
        /// </summary>
        public InputList<string> States
        {
            get => _states ?? (_states = new InputList<string>());
            set => _states = value;
        }

        public GetOpsiConfigurationsInvokeArgs()
        {
        }
        public static new GetOpsiConfigurationsInvokeArgs Empty => new GetOpsiConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetOpsiConfigurationsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// User-friendly display name for the OPSI configuration. The name does not have to be unique.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetOpsiConfigurationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// OPSI configuration type.
        /// </summary>
        public readonly ImmutableArray<string> OpsiConfigTypes;
        /// <summary>
        /// The list of opsi_configurations_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionResult> OpsiConfigurationsCollections;
        /// <summary>
        /// OPSI configuration resource lifecycle state.
        /// </summary>
        public readonly ImmutableArray<string> States;

        [OutputConstructor]
        private GetOpsiConfigurationsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetOpsiConfigurationsFilterResult> filters,

            string id,

            ImmutableArray<string> opsiConfigTypes,

            ImmutableArray<Outputs.GetOpsiConfigurationsOpsiConfigurationsCollectionResult> opsiConfigurationsCollections,

            ImmutableArray<string> states)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            OpsiConfigTypes = opsiConfigTypes;
            OpsiConfigurationsCollections = opsiConfigurationsCollections;
            States = states;
        }
    }
}
