// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetCategories
    {
        /// <summary>
        /// This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the supported Cloud Advisor categories.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCategories = Oci.Optimizer.GetCategories.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Category_compartment_id_in_subtree,
        ///         Name = @var.Category_name,
        ///         State = @var.Category_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCategoriesResult> InvokeAsync(GetCategoriesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCategoriesResult>("oci:Optimizer/getCategories:getCategories", args ?? new GetCategoriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the supported Cloud Advisor categories.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCategories = Oci.Optimizer.GetCategories.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         CompartmentIdInSubtree = @var.Category_compartment_id_in_subtree,
        ///         Name = @var.Category_name,
        ///         State = @var.Category_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCategoriesResult> Invoke(GetCategoriesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCategoriesResult>("oci:Optimizer/getCategories:getCategories", args ?? new GetCategoriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCategoriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public bool CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetCategoriesFilterArgs>? _filters;
        public List<Inputs.GetCategoriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCategoriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCategoriesArgs()
        {
        }
        public static new GetCategoriesArgs Empty => new GetCategoriesArgs();
    }

    public sealed class GetCategoriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public Input<bool> CompartmentIdInSubtree { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetCategoriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetCategoriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCategoriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCategoriesInvokeArgs()
        {
        }
        public static new GetCategoriesInvokeArgs Empty => new GetCategoriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCategoriesResult
    {
        /// <summary>
        /// The list of category_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCategoriesCategoryCollectionResult> CategoryCollections;
        /// <summary>
        /// The OCID of the tenancy. The tenancy is the root compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetCategoriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name assigned to the category.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The category's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCategoriesResult(
            ImmutableArray<Outputs.GetCategoriesCategoryCollectionResult> categoryCollections,

            string compartmentId,

            bool compartmentIdInSubtree,

            ImmutableArray<Outputs.GetCategoriesFilterResult> filters,

            string id,

            string? name,

            string? state)
        {
            CategoryCollections = categoryCollections;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
        }
    }
}
