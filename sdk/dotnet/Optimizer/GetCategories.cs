// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetCategories
    {
        /// <summary>
        /// This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the supported Cloud Advisor categories.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCategories = Oci.Optimizer.GetCategories.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = categoryCompartmentIdInSubtree,
        ///         ChildTenancyIds = categoryChildTenancyIds,
        ///         IncludeOrganization = categoryIncludeOrganization,
        ///         Name = categoryName,
        ///         State = categoryState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCategoriesResult> InvokeAsync(GetCategoriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCategoriesResult>("oci:Optimizer/getCategories:getCategories", args ?? new GetCategoriesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Categories in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the supported Cloud Advisor categories.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCategories = Oci.Optimizer.GetCategories.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = categoryCompartmentIdInSubtree,
        ///         ChildTenancyIds = categoryChildTenancyIds,
        ///         IncludeOrganization = categoryIncludeOrganization,
        ///         Name = categoryName,
        ///         State = categoryState,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCategoriesResult> Invoke(GetCategoriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCategoriesResult>("oci:Optimizer/getCategories:getCategories", args ?? new GetCategoriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCategoriesArgs : global::Pulumi.InvokeArgs
    {
        [Input("childTenancyIds")]
        private List<string>? _childTenancyIds;

        /// <summary>
        /// A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
        /// 
        /// If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
        /// 
        /// It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
        /// 
        /// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
        /// </summary>
        public List<string> ChildTenancyIds
        {
            get => _childTenancyIds ?? (_childTenancyIds = new List<string>());
            set => _childTenancyIds = value;
        }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// 
        /// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public bool CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetCategoriesFilterArgs>? _filters;
        public List<Inputs.GetCategoriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCategoriesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
        /// 
        /// Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
        /// 
        /// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
        /// </summary>
        [Input("includeOrganization")]
        public bool? IncludeOrganization { get; set; }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetCategoriesArgs()
        {
        }
        public static new GetCategoriesArgs Empty => new GetCategoriesArgs();
    }

    public sealed class GetCategoriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("childTenancyIds")]
        private InputList<string>? _childTenancyIds;

        /// <summary>
        /// A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A. 
        /// 
        /// If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
        /// 
        /// It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
        /// 
        /// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
        /// </summary>
        public InputList<string> ChildTenancyIds
        {
            get => _childTenancyIds ?? (_childTenancyIds = new InputList<string>());
            set => _childTenancyIds = value;
        }

        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// 
        /// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public Input<bool> CompartmentIdInSubtree { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetCategoriesFilterInputArgs>? _filters;
        public InputList<Inputs.GetCategoriesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCategoriesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
        /// 
        /// Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
        /// 
        /// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
        /// </summary>
        [Input("includeOrganization")]
        public Input<bool>? IncludeOrganization { get; set; }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetCategoriesInvokeArgs()
        {
        }
        public static new GetCategoriesInvokeArgs Empty => new GetCategoriesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCategoriesResult
    {
        /// <summary>
        /// The list of category_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCategoriesCategoryCollectionResult> CategoryCollections;
        public readonly ImmutableArray<string> ChildTenancyIds;
        /// <summary>
        /// The OCID of the tenancy. The tenancy is the root compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly bool CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetCategoriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeOrganization;
        /// <summary>
        /// The name assigned to the category.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The category's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetCategoriesResult(
            ImmutableArray<Outputs.GetCategoriesCategoryCollectionResult> categoryCollections,

            ImmutableArray<string> childTenancyIds,

            string compartmentId,

            bool compartmentIdInSubtree,

            ImmutableArray<Outputs.GetCategoriesFilterResult> filters,

            string id,

            bool? includeOrganization,

            string? name,

            string? state)
        {
            CategoryCollections = categoryCollections;
            ChildTenancyIds = childTenancyIds;
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            IncludeOrganization = includeOrganization;
            Name = name;
            State = state;
        }
    }
}
