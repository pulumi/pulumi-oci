// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetProfileLevels
    {
        /// <summary>
        /// This data source provides the list of Profile Levels in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the existing profile levels.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfileLevels = Oci.Optimizer.GetProfileLevels.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = profileLevelCompartmentIdInSubtree,
        ///         Name = profileLevelName,
        ///         RecommendationName = testRecommendation.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProfileLevelsResult> InvokeAsync(GetProfileLevelsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfileLevelsResult>("oci:Optimizer/getProfileLevels:getProfileLevels", args ?? new GetProfileLevelsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profile Levels in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the existing profile levels.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfileLevels = Oci.Optimizer.GetProfileLevels.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = profileLevelCompartmentIdInSubtree,
        ///         Name = profileLevelName,
        ///         RecommendationName = testRecommendation.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProfileLevelsResult> Invoke(GetProfileLevelsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfileLevelsResult>("oci:Optimizer/getProfileLevels:getProfileLevels", args ?? new GetProfileLevelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfileLevelsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// 
        /// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public bool CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetProfileLevelsFilterArgs>? _filters;
        public List<Inputs.GetProfileLevelsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProfileLevelsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Optional. A filter that returns results that match the recommendation name specified.
        /// </summary>
        [Input("recommendationName")]
        public string? RecommendationName { get; set; }

        public GetProfileLevelsArgs()
        {
        }
        public static new GetProfileLevelsArgs Empty => new GetProfileLevelsArgs();
    }

    public sealed class GetProfileLevelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
        /// 
        /// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
        /// </summary>
        [Input("compartmentIdInSubtree", required: true)]
        public Input<bool> CompartmentIdInSubtree { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetProfileLevelsFilterInputArgs>? _filters;
        public InputList<Inputs.GetProfileLevelsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProfileLevelsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional. A filter that returns results that match the recommendation name specified.
        /// </summary>
        [Input("recommendationName")]
        public Input<string>? RecommendationName { get; set; }

        public GetProfileLevelsInvokeArgs()
        {
        }
        public static new GetProfileLevelsInvokeArgs Empty => new GetProfileLevelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfileLevelsResult
    {
        public readonly string CompartmentId;
        public readonly bool CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetProfileLevelsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique name for the profile level.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of profile_level_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileLevelsProfileLevelCollectionResult> ProfileLevelCollections;
        /// <summary>
        /// The name of the recommendation this profile level applies to.
        /// </summary>
        public readonly string? RecommendationName;

        [OutputConstructor]
        private GetProfileLevelsResult(
            string compartmentId,

            bool compartmentIdInSubtree,

            ImmutableArray<Outputs.GetProfileLevelsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetProfileLevelsProfileLevelCollectionResult> profileLevelCollections,

            string? recommendationName)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            Name = name;
            ProfileLevelCollections = profileLevelCollections;
            RecommendationName = recommendationName;
        }
    }
}
