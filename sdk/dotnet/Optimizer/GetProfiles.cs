// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetProfiles
    {
        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the existing profiles.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.Optimizer.GetProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Name = @var.Profile_name,
        ///         State = @var.Profile_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProfilesResult> InvokeAsync(GetProfilesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfilesResult>("oci:Optimizer/getProfiles:getProfiles", args ?? new GetProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Lists the existing profiles.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.Optimizer.GetProfiles.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Name = @var.Profile_name,
        ///         State = @var.Profile_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProfilesResult> Invoke(GetProfilesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfilesResult>("oci:Optimizer/getProfiles:getProfiles", args ?? new GetProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetProfilesFilterArgs>? _filters;
        public List<Inputs.GetProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetProfilesArgs()
        {
        }
        public static new GetProfilesArgs Empty => new GetProfilesArgs();
    }

    public sealed class GetProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Optional. A filter that returns results that match the name specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns results that match the lifecycle state specified.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetProfilesInvokeArgs()
        {
        }
        public static new GetProfilesInvokeArgs Empty => new GetProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfilesResult
    {
        /// <summary>
        /// The OCID of the tenancy. The tenancy is the root compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name assigned to the profile. Avoid entering confidential information.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of profile_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfilesProfileCollectionResult> ProfileCollections;
        /// <summary>
        /// The profile's current state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetProfilesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetProfilesFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetProfilesProfileCollectionResult> profileCollections,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            ProfileCollections = profileCollections;
            State = state;
        }
    }
}
