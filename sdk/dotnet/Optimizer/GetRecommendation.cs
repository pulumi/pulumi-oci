// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Optimizer
{
    public static class GetRecommendation
    {
        /// <summary>
        /// This data source provides details about a specific Recommendation resource in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Gets the recommendation for the specified OCID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecommendation = Oci.Optimizer.GetRecommendation.Invoke(new()
        ///     {
        ///         RecommendationId = oci_optimizer_recommendation.Test_recommendation.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRecommendationResult> InvokeAsync(GetRecommendationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecommendationResult>("oci:Optimizer/getRecommendation:getRecommendation", args ?? new GetRecommendationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Recommendation resource in Oracle Cloud Infrastructure Optimizer service.
        /// 
        /// Gets the recommendation for the specified OCID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testRecommendation = Oci.Optimizer.GetRecommendation.Invoke(new()
        ///     {
        ///         RecommendationId = oci_optimizer_recommendation.Test_recommendation.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRecommendationResult> Invoke(GetRecommendationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecommendationResult>("oci:Optimizer/getRecommendation:getRecommendation", args ?? new GetRecommendationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecommendationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique OCID associated with the recommendation.
        /// </summary>
        [Input("recommendationId", required: true)]
        public string RecommendationId { get; set; } = null!;

        public GetRecommendationArgs()
        {
        }
        public static new GetRecommendationArgs Empty => new GetRecommendationArgs();
    }

    public sealed class GetRecommendationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique OCID associated with the recommendation.
        /// </summary>
        [Input("recommendationId", required: true)]
        public Input<string> RecommendationId { get; set; } = null!;

        public GetRecommendationInvokeArgs()
        {
        }
        public static new GetRecommendationInvokeArgs Empty => new GetRecommendationInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecommendationResult
    {
        /// <summary>
        /// The unique OCID associated with the category.
        /// </summary>
        public readonly string? CategoryId;
        /// <summary>
        /// The OCID of the tenancy. The tenancy is the root compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Text describing the recommendation.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The estimated cost savings, in dollars, for the recommendation.
        /// </summary>
        public readonly double? EstimatedCostSaving;
        /// <summary>
        /// Additional metadata key/value pairs for the recommendation.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ExtendedMetadata;
        /// <summary>
        /// The unique OCID associated with the recommendation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The level of importance assigned to the recommendation.
        /// </summary>
        public readonly string? Importance;
        /// <summary>
        /// The name of the profile level.
        /// </summary>
        public readonly string? Name;
        public readonly string RecommendationId;
        /// <summary>
        /// An array of `ResourceCount` objects grouped by the status of the resource actions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecommendationResourceCountResult> ResourceCounts;
        /// <summary>
        /// The recommendation's current state.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The current status of the recommendation.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecommendationSupportedLevelResult> SupportedLevels;
        /// <summary>
        /// The date and time the recommendation details were created, in the format defined by RFC3339.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
        /// </summary>
        public readonly string? TimeStatusBegin;
        /// <summary>
        /// The date and time the current status will change. The format is defined by RFC3339.
        /// </summary>
        public readonly string? TimeStatusEnd;
        /// <summary>
        /// The date and time the recommendation details were last updated, in the format defined by RFC3339.
        /// </summary>
        public readonly string? TimeUpdated;

        [OutputConstructor]
        private GetRecommendationResult(
            string? categoryId,

            string? compartmentId,

            string? description,

            double? estimatedCostSaving,

            ImmutableDictionary<string, object>? extendedMetadata,

            string? id,

            string? importance,

            string? name,

            string recommendationId,

            ImmutableArray<Outputs.GetRecommendationResourceCountResult> resourceCounts,

            string? state,

            string? status,

            ImmutableArray<Outputs.GetRecommendationSupportedLevelResult> supportedLevels,

            string? timeCreated,

            string? timeStatusBegin,

            string? timeStatusEnd,

            string? timeUpdated)
        {
            CategoryId = categoryId;
            CompartmentId = compartmentId;
            Description = description;
            EstimatedCostSaving = estimatedCostSaving;
            ExtendedMetadata = extendedMetadata;
            Id = id;
            Importance = importance;
            Name = name;
            RecommendationId = recommendationId;
            ResourceCounts = resourceCounts;
            State = state;
            Status = status;
            SupportedLevels = supportedLevels;
            TimeCreated = timeCreated;
            TimeStatusBegin = timeStatusBegin;
            TimeStatusEnd = timeStatusEnd;
            TimeUpdated = timeUpdated;
        }
    }
}
