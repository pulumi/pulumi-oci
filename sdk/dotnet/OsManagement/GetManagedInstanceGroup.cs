// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagement
{
    public static class GetManagedInstanceGroup
    {
        /// <summary>
        /// This data source provides details about a specific Managed Instance Group resource in Oracle Cloud Infrastructure OS Management service.
        /// 
        /// Returns a specific Managed Instance Group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstanceGroup = Oci.OsManagement.GetManagedInstanceGroup.Invoke(new()
        ///     {
        ///         ManagedInstanceGroupId = testManagedInstanceGroupOciOsmanagementManagedInstanceGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedInstanceGroupResult> InvokeAsync(GetManagedInstanceGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstanceGroupResult>("oci:OsManagement/getManagedInstanceGroup:getManagedInstanceGroup", args ?? new GetManagedInstanceGroupArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Managed Instance Group resource in Oracle Cloud Infrastructure OS Management service.
        /// 
        /// Returns a specific Managed Instance Group.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstanceGroup = Oci.OsManagement.GetManagedInstanceGroup.Invoke(new()
        ///     {
        ///         ManagedInstanceGroupId = testManagedInstanceGroupOciOsmanagementManagedInstanceGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedInstanceGroupResult> Invoke(GetManagedInstanceGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceGroupResult>("oci:OsManagement/getManagedInstanceGroup:getManagedInstanceGroup", args ?? new GetManagedInstanceGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstanceGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCID for the managed instance group
        /// </summary>
        [Input("managedInstanceGroupId", required: true)]
        public string ManagedInstanceGroupId { get; set; } = null!;

        public GetManagedInstanceGroupArgs()
        {
        }
        public static new GetManagedInstanceGroupArgs Empty => new GetManagedInstanceGroupArgs();
    }

    public sealed class GetManagedInstanceGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// OCID for the managed instance group
        /// </summary>
        [Input("managedInstanceGroupId", required: true)]
        public Input<string> ManagedInstanceGroupId { get; set; } = null!;

        public GetManagedInstanceGroupInvokeArgs()
        {
        }
        public static new GetManagedInstanceGroupInvokeArgs Empty => new GetManagedInstanceGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstanceGroupResult
    {
        /// <summary>
        /// OCID for the Compartment
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Information specified by the user about the managed instance group
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User friendly name
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// unique identifier that is immutable on creation
        /// </summary>
        public readonly string Id;
        public readonly int ManagedInstanceCount;
        public readonly string ManagedInstanceGroupId;
        public readonly ImmutableArray<string> ManagedInstanceIds;
        /// <summary>
        /// list of Managed Instances in the group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedInstanceGroupManagedInstanceResult> ManagedInstances;
        /// <summary>
        /// The Operating System type of the managed instance.
        /// </summary>
        public readonly string OsFamily;
        /// <summary>
        /// The current state of the Software Source.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetManagedInstanceGroupResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            int managedInstanceCount,

            string managedInstanceGroupId,

            ImmutableArray<string> managedInstanceIds,

            ImmutableArray<Outputs.GetManagedInstanceGroupManagedInstanceResult> managedInstances,

            string osFamily,

            string state)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            ManagedInstanceCount = managedInstanceCount;
            ManagedInstanceGroupId = managedInstanceGroupId;
            ManagedInstanceIds = managedInstanceIds;
            ManagedInstances = managedInstances;
            OsFamily = osFamily;
            State = state;
        }
    }
}
