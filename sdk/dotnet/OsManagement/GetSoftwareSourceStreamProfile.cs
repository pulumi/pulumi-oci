// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagement
{
    public static class GetSoftwareSourceStreamProfile
    {
        /// <summary>
        /// This data source provides the list of Software Source Stream Profiles in Oracle Cloud Infrastructure OS Management service.
        /// 
        /// Retrieve a list of module stream profiles from a software source.
        /// Filters may be applied to select a subset of module stream profiles
        /// based on the filter criteria.
        /// 
        /// The "moduleName", "streamName", and "profileName" attributes combine
        /// to form a set of filters on the list of module stream profiles.  If
        /// a "moduleName" is provided, only profiles that belong to that module
        /// are returned.  If both a "moduleName" and "streamName" are given,
        /// only profiles belonging to that module stream are returned.  Finally,
        /// if all three are given then only the particular profile indicated
        /// by the triple is returned.  It is not valid to supply a "streamName"
        /// without a "moduleName".  It is also not valid to supply a "profileName"
        /// without a "streamName".
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSoftwareSourceStreamProfiles = Output.Create(Oci.OsManagement.GetSoftwareSourceStreamProfile.InvokeAsync(new Oci.OsManagement.GetSoftwareSourceStreamProfileArgs
        ///         {
        ///             SoftwareSourceId = @var.Software_source.Id,
        ///             CompartmentId = @var.Compartment_id,
        ///             ModuleName = @var.Software_source_module_name,
        ///             ProfileName = @var.Software_source_module_stream_profile_name,
        ///             StreamName = @var.Software_source_module_stream_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSoftwareSourceStreamProfileResult> InvokeAsync(GetSoftwareSourceStreamProfileArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceStreamProfileResult>("oci:OsManagement/getSoftwareSourceStreamProfile:getSoftwareSourceStreamProfile", args ?? new GetSoftwareSourceStreamProfileArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Stream Profiles in Oracle Cloud Infrastructure OS Management service.
        /// 
        /// Retrieve a list of module stream profiles from a software source.
        /// Filters may be applied to select a subset of module stream profiles
        /// based on the filter criteria.
        /// 
        /// The "moduleName", "streamName", and "profileName" attributes combine
        /// to form a set of filters on the list of module stream profiles.  If
        /// a "moduleName" is provided, only profiles that belong to that module
        /// are returned.  If both a "moduleName" and "streamName" are given,
        /// only profiles belonging to that module stream are returned.  Finally,
        /// if all three are given then only the particular profile indicated
        /// by the triple is returned.  It is not valid to supply a "streamName"
        /// without a "moduleName".  It is also not valid to supply a "profileName"
        /// without a "streamName".
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSoftwareSourceStreamProfiles = Output.Create(Oci.OsManagement.GetSoftwareSourceStreamProfile.InvokeAsync(new Oci.OsManagement.GetSoftwareSourceStreamProfileArgs
        ///         {
        ///             SoftwareSourceId = @var.Software_source.Id,
        ///             CompartmentId = @var.Compartment_id,
        ///             ModuleName = @var.Software_source_module_name,
        ///             ProfileName = @var.Software_source_module_stream_profile_name,
        ///             StreamName = @var.Software_source_module_stream_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSoftwareSourceStreamProfileResult> Invoke(GetSoftwareSourceStreamProfileInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceStreamProfileResult>("oci:OsManagement/getSoftwareSourceStreamProfile:getSoftwareSourceStreamProfile", args ?? new GetSoftwareSourceStreamProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceStreamProfileArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetSoftwareSourceStreamProfileFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourceStreamProfileFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourceStreamProfileFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of a module.  This parameter is required if a streamName is specified.
        /// </summary>
        [Input("moduleName")]
        public string? ModuleName { get; set; }

        /// <summary>
        /// The name of the profile of the containing module stream
        /// </summary>
        [Input("profileName")]
        public string? ProfileName { get; set; }

        /// <summary>
        /// The OCID of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        /// <summary>
        /// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
        /// </summary>
        [Input("streamName")]
        public string? StreamName { get; set; }

        public GetSoftwareSourceStreamProfileArgs()
        {
        }
    }

    public sealed class GetSoftwareSourceStreamProfileInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourceStreamProfileFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourceStreamProfileFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourceStreamProfileFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of a module.  This parameter is required if a streamName is specified.
        /// </summary>
        [Input("moduleName")]
        public Input<string>? ModuleName { get; set; }

        /// <summary>
        /// The name of the profile of the containing module stream
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// The OCID of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        /// <summary>
        /// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        public GetSoftwareSourceStreamProfileInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSoftwareSourceStreamProfileResult
    {
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetSoftwareSourceStreamProfileFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the module that contains the stream profile
        /// </summary>
        public readonly string? ModuleName;
        /// <summary>
        /// The list of module_stream_profiles.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceStreamProfileModuleStreamProfileResult> ModuleStreamProfiles;
        /// <summary>
        /// The name of the profile
        /// </summary>
        public readonly string? ProfileName;
        public readonly string SoftwareSourceId;
        /// <summary>
        /// The name of the stream that contains the profile
        /// </summary>
        public readonly string? StreamName;

        [OutputConstructor]
        private GetSoftwareSourceStreamProfileResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetSoftwareSourceStreamProfileFilterResult> filters,

            string id,

            string? moduleName,

            ImmutableArray<Outputs.GetSoftwareSourceStreamProfileModuleStreamProfileResult> moduleStreamProfiles,

            string? profileName,

            string softwareSourceId,

            string? streamName)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            ModuleName = moduleName;
            ModuleStreamProfiles = moduleStreamProfiles;
            ProfileName = profileName;
            SoftwareSourceId = softwareSourceId;
            StreamName = streamName;
        }
    }
}
