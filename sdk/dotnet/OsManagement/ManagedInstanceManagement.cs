// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagement
{
    /// <summary>
    /// This resource provides the Managed Instance Management in Oracle Cloud Infrastructure OS Management service.
    /// The resource can be used to attach/detach parent software source, child software sources and managed instance groups from managed instances.
    /// 
    /// Adds a parent software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance. Software sources that have this software source as a parent will be able to be added to this managed instance.
    /// Removes a software source from a managed instance. All child software sources will also be removed from the managed instance. Packages will no longer be able to be installed from these software sources.
    /// 
    /// Adds a child software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance.\
    /// Removes a child software source from a managed instance. Packages will no longer be able to be installed from these software sources.
    /// 
    /// Adds a Managed Instance to a Managed Instance Group. After the Managed Instance has been added, then operations can be performed on the Managed Instance Group which will then apply to all Managed Instances in the group.
    /// Removes a Managed Instance from a Managed Instance Group.
    /// 
    /// **NOTE** The resource on CREATE will detach any already attached parent software source, child software sources, managed instance groups to the managed instance.
    /// Destroying this resource will not delete any associations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testManagedInstanceManagement = new Oci.OsManagement.ManagedInstanceManagement("testManagedInstanceManagement", new()
    ///     {
    ///         ManagedInstanceId = oci_osmanagement_managed_instance.Test_managed_instance.Id,
    ///         ParentSoftwareSource = new Oci.OsManagement.Inputs.ManagedInstanceManagementParentSoftwareSourceArgs
    ///         {
    ///             Id = oci_osmanagement_software_source.Test_parent_software_source.Id,
    ///             Name = oci_osmanagement_software_source.Test_parent_software_source.Display_name,
    ///         },
    ///         ManagedInstanceGroups = new[]
    ///         {
    ///             new Oci.OsManagement.Inputs.ManagedInstanceManagementManagedInstanceGroupArgs
    ///             {
    ///                 Id = oci_osmanagement_managed_instance_group.Test_managed_instance_group.Id,
    ///                 DisplayName = @var.Managed_instance_group_display_name,
    ///             },
    ///         },
    ///         ChildSoftwareSources = new[]
    ///         {
    ///             new Oci.OsManagement.Inputs.ManagedInstanceManagementChildSoftwareSourceArgs
    ///             {
    ///                 Id = oci_osmanagement_software_source.Test_software_source_child.Id,
    ///                 Name = oci_osmanagement_software_source.Test_software_source_child.Display_name,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [OciResourceType("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement")]
    public partial class ManagedInstanceManagement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) list of child Software Sources attached to the Managed Instance
        /// </summary>
        [Output("childSoftwareSources")]
        public Output<ImmutableArray<Outputs.ManagedInstanceManagementChildSoftwareSource>> ChildSoftwareSources { get; private set; } = null!;

        /// <summary>
        /// OCID for the Compartment
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Information specified by the user about the managed instance
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// User friendly name
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Time at which the instance last booted
        /// </summary>
        [Output("lastBoot")]
        public Output<string> LastBoot { get; private set; } = null!;

        /// <summary>
        /// Time at which the instance last checked in
        /// </summary>
        [Output("lastCheckin")]
        public Output<string> LastCheckin { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The ids of the managed instance groups of which this instance is a member.
        /// </summary>
        [Output("managedInstanceGroups")]
        public Output<ImmutableArray<Outputs.ManagedInstanceManagementManagedInstanceGroup>> ManagedInstanceGroups { get; private set; } = null!;

        /// <summary>
        /// OCID for the managed instance
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// Operating System Kernel Version
        /// </summary>
        [Output("osKernelVersion")]
        public Output<string> OsKernelVersion { get; private set; } = null!;

        /// <summary>
        /// Operating System Name
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// Operating System Version
        /// </summary>
        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) the parent (base) Software Source attached to the Managed Instance
        /// </summary>
        [Output("parentSoftwareSource")]
        public Output<Outputs.ManagedInstanceManagementParentSoftwareSource> ParentSoftwareSource { get; private set; } = null!;

        /// <summary>
        /// status of the managed instance.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Number of updates available to be installed
        /// </summary>
        [Output("updatesAvailable")]
        public Output<int> UpdatesAvailable { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceManagement(string name, ManagedInstanceManagementArgs args, CustomResourceOptions? options = null)
            : base("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, args ?? new ManagedInstanceManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceManagement(string name, Input<string> id, ManagedInstanceManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceManagement Get(string name, Input<string> id, ManagedInstanceManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceManagement(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceManagementArgs : global::Pulumi.ResourceArgs
    {
        [Input("childSoftwareSources")]
        private InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceArgs>? _childSoftwareSources;

        /// <summary>
        /// (Updatable) list of child Software Sources attached to the Managed Instance
        /// </summary>
        public InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceArgs> ChildSoftwareSources
        {
            get => _childSoftwareSources ?? (_childSoftwareSources = new InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceArgs>());
            set => _childSoftwareSources = value;
        }

        [Input("managedInstanceGroups")]
        private InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupArgs>? _managedInstanceGroups;

        /// <summary>
        /// (Updatable) The ids of the managed instance groups of which this instance is a member.
        /// </summary>
        public InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupArgs> ManagedInstanceGroups
        {
            get => _managedInstanceGroups ?? (_managedInstanceGroups = new InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupArgs>());
            set => _managedInstanceGroups = value;
        }

        /// <summary>
        /// OCID for the managed instance
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// (Updatable) the parent (base) Software Source attached to the Managed Instance
        /// </summary>
        [Input("parentSoftwareSource")]
        public Input<Inputs.ManagedInstanceManagementParentSoftwareSourceArgs>? ParentSoftwareSource { get; set; }

        public ManagedInstanceManagementArgs()
        {
        }
        public static new ManagedInstanceManagementArgs Empty => new ManagedInstanceManagementArgs();
    }

    public sealed class ManagedInstanceManagementState : global::Pulumi.ResourceArgs
    {
        [Input("childSoftwareSources")]
        private InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceGetArgs>? _childSoftwareSources;

        /// <summary>
        /// (Updatable) list of child Software Sources attached to the Managed Instance
        /// </summary>
        public InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceGetArgs> ChildSoftwareSources
        {
            get => _childSoftwareSources ?? (_childSoftwareSources = new InputList<Inputs.ManagedInstanceManagementChildSoftwareSourceGetArgs>());
            set => _childSoftwareSources = value;
        }

        /// <summary>
        /// OCID for the Compartment
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Information specified by the user about the managed instance
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User friendly name
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Time at which the instance last booted
        /// </summary>
        [Input("lastBoot")]
        public Input<string>? LastBoot { get; set; }

        /// <summary>
        /// Time at which the instance last checked in
        /// </summary>
        [Input("lastCheckin")]
        public Input<string>? LastCheckin { get; set; }

        [Input("managedInstanceGroups")]
        private InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupGetArgs>? _managedInstanceGroups;

        /// <summary>
        /// (Updatable) The ids of the managed instance groups of which this instance is a member.
        /// </summary>
        public InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupGetArgs> ManagedInstanceGroups
        {
            get => _managedInstanceGroups ?? (_managedInstanceGroups = new InputList<Inputs.ManagedInstanceManagementManagedInstanceGroupGetArgs>());
            set => _managedInstanceGroups = value;
        }

        /// <summary>
        /// OCID for the managed instance
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        /// <summary>
        /// Operating System Kernel Version
        /// </summary>
        [Input("osKernelVersion")]
        public Input<string>? OsKernelVersion { get; set; }

        /// <summary>
        /// Operating System Name
        /// </summary>
        [Input("osName")]
        public Input<string>? OsName { get; set; }

        /// <summary>
        /// Operating System Version
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// (Updatable) the parent (base) Software Source attached to the Managed Instance
        /// </summary>
        [Input("parentSoftwareSource")]
        public Input<Inputs.ManagedInstanceManagementParentSoftwareSourceGetArgs>? ParentSoftwareSource { get; set; }

        /// <summary>
        /// status of the managed instance.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Number of updates available to be installed
        /// </summary>
        [Input("updatesAvailable")]
        public Input<int>? UpdatesAvailable { get; set; }

        public ManagedInstanceManagementState()
        {
        }
        public static new ManagedInstanceManagementState Empty => new ManagedInstanceManagementState();
    }
}
