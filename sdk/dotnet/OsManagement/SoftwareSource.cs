// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagement
{
    /// <summary>
    /// This resource provides the Software Source resource in Oracle Cloud Infrastructure OS Management service.
    /// 
    /// Creates a new custom Software Source on the management system.
    /// This will not contain any packages after it is first created,
    /// and they must be added later.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testSoftwareSource = new Oci.OsManagement.SoftwareSource("testSoftwareSource", new Oci.OsManagement.SoftwareSourceArgs
    ///         {
    ///             ArchType = @var.Software_source_arch_type,
    ///             CompartmentId = @var.Compartment_id,
    ///             DisplayName = @var.Software_source_display_name,
    ///             ChecksumType = @var.Software_source_checksum_type,
    ///             DefinedTags = 
    ///             {
    ///                 { "foo-namespace.bar-key", "value" },
    ///             },
    ///             Description = @var.Software_source_description,
    ///             FreeformTags = 
    ///             {
    ///                 { "bar-key", "value" },
    ///             },
    ///             MaintainerEmail = @var.Software_source_maintainer_email,
    ///             MaintainerName = @var.Software_source_maintainer_name,
    ///             MaintainerPhone = @var.Software_source_maintainer_phone,
    ///             ParentId = oci_osmanagement_parent.Test_parent.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// SoftwareSources can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:OsManagement/softwareSource:SoftwareSource test_software_source "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:OsManagement/softwareSource:SoftwareSource")]
    public partial class SoftwareSource : Pulumi.CustomResource
    {
        /// <summary>
        /// The architecture type supported by the Software Source
        /// </summary>
        [Output("archType")]
        public Output<string> ArchType { get; private set; } = null!;

        /// <summary>
        /// list of the Managed Instances associated with this Software Sources
        /// </summary>
        [Output("associatedManagedInstances")]
        public Output<ImmutableArray<Outputs.SoftwareSourceAssociatedManagedInstance>> AssociatedManagedInstances { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The yum repository checksum type used by this software source
        /// </summary>
        [Output("checksumType")]
        public Output<string> ChecksumType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) OCID for the Compartment
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information specified by the user about the software source
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User friendly name for the software source
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of the GPG key for this software source
        /// </summary>
        [Output("gpgKeyFingerprint")]
        public Output<string> GpgKeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// ID of the GPG key for this software source
        /// </summary>
        [Output("gpgKeyId")]
        public Output<string> GpgKeyId { get; private set; } = null!;

        /// <summary>
        /// URL of the GPG key for this software source
        /// </summary>
        [Output("gpgKeyUrl")]
        public Output<string> GpgKeyUrl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Email address of the person maintaining this software source
        /// </summary>
        [Output("maintainerEmail")]
        public Output<string> MaintainerEmail { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Name of the person maintaining this software source
        /// </summary>
        [Output("maintainerName")]
        public Output<string> MaintainerName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Phone number of the person maintaining this software source
        /// </summary>
        [Output("maintainerPhone")]
        public Output<string> MaintainerPhone { get; private set; } = null!;

        /// <summary>
        /// Number of packages
        /// </summary>
        [Output("packages")]
        public Output<int> Packages { get; private set; } = null!;

        /// <summary>
        /// OCID for the parent software source, if there is one
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// Display name the parent software source, if there is one
        /// </summary>
        [Output("parentName")]
        public Output<string> ParentName { get; private set; } = null!;

        /// <summary>
        /// Type of the Software Source
        /// </summary>
        [Output("repoType")]
        public Output<string> RepoType { get; private set; } = null!;

        /// <summary>
        /// The current state of the Software Source.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// status of the software source.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// URL for the repostiory
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a SoftwareSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SoftwareSource(string name, SoftwareSourceArgs args, CustomResourceOptions? options = null)
            : base("oci:OsManagement/softwareSource:SoftwareSource", name, args ?? new SoftwareSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SoftwareSource(string name, Input<string> id, SoftwareSourceState? state = null, CustomResourceOptions? options = null)
            : base("oci:OsManagement/softwareSource:SoftwareSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SoftwareSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SoftwareSource Get(string name, Input<string> id, SoftwareSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new SoftwareSource(name, id, state, options);
        }
    }

    public sealed class SoftwareSourceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture type supported by the Software Source
        /// </summary>
        [Input("archType", required: true)]
        public Input<string> ArchType { get; set; } = null!;

        /// <summary>
        /// (Updatable) The yum repository checksum type used by this software source
        /// </summary>
        [Input("checksumType")]
        public Input<string>? ChecksumType { get; set; }

        /// <summary>
        /// (Updatable) OCID for the Compartment
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Information specified by the user about the software source
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) User friendly name for the software source
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) Email address of the person maintaining this software source
        /// </summary>
        [Input("maintainerEmail")]
        public Input<string>? MaintainerEmail { get; set; }

        /// <summary>
        /// (Updatable) Name of the person maintaining this software source
        /// </summary>
        [Input("maintainerName")]
        public Input<string>? MaintainerName { get; set; }

        /// <summary>
        /// (Updatable) Phone number of the person maintaining this software source
        /// </summary>
        [Input("maintainerPhone")]
        public Input<string>? MaintainerPhone { get; set; }

        /// <summary>
        /// OCID for the parent software source, if there is one
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        public SoftwareSourceArgs()
        {
        }
    }

    public sealed class SoftwareSourceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture type supported by the Software Source
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        [Input("associatedManagedInstances")]
        private InputList<Inputs.SoftwareSourceAssociatedManagedInstanceGetArgs>? _associatedManagedInstances;

        /// <summary>
        /// list of the Managed Instances associated with this Software Sources
        /// </summary>
        public InputList<Inputs.SoftwareSourceAssociatedManagedInstanceGetArgs> AssociatedManagedInstances
        {
            get => _associatedManagedInstances ?? (_associatedManagedInstances = new InputList<Inputs.SoftwareSourceAssociatedManagedInstanceGetArgs>());
            set => _associatedManagedInstances = value;
        }

        /// <summary>
        /// (Updatable) The yum repository checksum type used by this software source
        /// </summary>
        [Input("checksumType")]
        public Input<string>? ChecksumType { get; set; }

        /// <summary>
        /// (Updatable) OCID for the Compartment
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Information specified by the user about the software source
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) User friendly name for the software source
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Fingerprint of the GPG key for this software source
        /// </summary>
        [Input("gpgKeyFingerprint")]
        public Input<string>? GpgKeyFingerprint { get; set; }

        /// <summary>
        /// ID of the GPG key for this software source
        /// </summary>
        [Input("gpgKeyId")]
        public Input<string>? GpgKeyId { get; set; }

        /// <summary>
        /// URL of the GPG key for this software source
        /// </summary>
        [Input("gpgKeyUrl")]
        public Input<string>? GpgKeyUrl { get; set; }

        /// <summary>
        /// (Updatable) Email address of the person maintaining this software source
        /// </summary>
        [Input("maintainerEmail")]
        public Input<string>? MaintainerEmail { get; set; }

        /// <summary>
        /// (Updatable) Name of the person maintaining this software source
        /// </summary>
        [Input("maintainerName")]
        public Input<string>? MaintainerName { get; set; }

        /// <summary>
        /// (Updatable) Phone number of the person maintaining this software source
        /// </summary>
        [Input("maintainerPhone")]
        public Input<string>? MaintainerPhone { get; set; }

        /// <summary>
        /// Number of packages
        /// </summary>
        [Input("packages")]
        public Input<int>? Packages { get; set; }

        /// <summary>
        /// OCID for the parent software source, if there is one
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Display name the parent software source, if there is one
        /// </summary>
        [Input("parentName")]
        public Input<string>? ParentName { get; set; }

        /// <summary>
        /// Type of the Software Source
        /// </summary>
        [Input("repoType")]
        public Input<string>? RepoType { get; set; }

        /// <summary>
        /// The current state of the Software Source.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// status of the software source.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// URL for the repostiory
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public SoftwareSourceState()
        {
        }
    }
}
