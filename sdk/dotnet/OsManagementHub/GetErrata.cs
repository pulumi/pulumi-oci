// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetErrata
    {
        /// <summary>
        /// This data source provides the list of Errata in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists all of the currently available errata. Filter the list against a variety of criteria including but not
        /// limited to its name, classification type, advisory severity, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testErrata = Oci.OsManagementHub.GetErrata.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AdvisorySeverities = erratumAdvisorySeverity,
        ///         AdvisoryTypes = erratumAdvisoryType,
        ///         ClassificationTypes = erratumClassificationType,
        ///         Names = erratumName,
        ///         NameContains = erratumNameContains,
        ///         OsFamily = erratumOsFamily,
        ///         TimeIssueDateEnd = erratumTimeIssueDateEnd,
        ///         TimeIssueDateStart = erratumTimeIssueDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetErrataResult> InvokeAsync(GetErrataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetErrataResult>("oci:OsManagementHub/getErrata:getErrata", args ?? new GetErrataArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Errata in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists all of the currently available errata. Filter the list against a variety of criteria including but not
        /// limited to its name, classification type, advisory severity, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testErrata = Oci.OsManagementHub.GetErrata.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AdvisorySeverities = erratumAdvisorySeverity,
        ///         AdvisoryTypes = erratumAdvisoryType,
        ///         ClassificationTypes = erratumClassificationType,
        ///         Names = erratumName,
        ///         NameContains = erratumNameContains,
        ///         OsFamily = erratumOsFamily,
        ///         TimeIssueDateEnd = erratumTimeIssueDateEnd,
        ///         TimeIssueDateStart = erratumTimeIssueDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetErrataResult> Invoke(GetErrataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetErrataResult>("oci:OsManagementHub/getErrata:getErrata", args ?? new GetErrataInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Errata in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists all of the currently available errata. Filter the list against a variety of criteria including but not
        /// limited to its name, classification type, advisory severity, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testErrata = Oci.OsManagementHub.GetErrata.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         AdvisorySeverities = erratumAdvisorySeverity,
        ///         AdvisoryTypes = erratumAdvisoryType,
        ///         ClassificationTypes = erratumClassificationType,
        ///         Names = erratumName,
        ///         NameContains = erratumNameContains,
        ///         OsFamily = erratumOsFamily,
        ///         TimeIssueDateEnd = erratumTimeIssueDateEnd,
        ///         TimeIssueDateStart = erratumTimeIssueDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetErrataResult> Invoke(GetErrataInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetErrataResult>("oci:OsManagementHub/getErrata:getErrata", args ?? new GetErrataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetErrataArgs : global::Pulumi.InvokeArgs
    {
        [Input("advisorySeverities")]
        private List<string>? _advisorySeverities;

        /// <summary>
        /// The advisory severity.
        /// </summary>
        public List<string> AdvisorySeverities
        {
            get => _advisorySeverities ?? (_advisorySeverities = new List<string>());
            set => _advisorySeverities = value;
        }

        [Input("advisoryTypes")]
        private List<string>? _advisoryTypes;

        /// <summary>
        /// A filter to return only errata that match the given advisory types.
        /// </summary>
        public List<string> AdvisoryTypes
        {
            get => _advisoryTypes ?? (_advisoryTypes = new List<string>());
            set => _advisoryTypes = value;
        }

        [Input("classificationTypes")]
        private List<string>? _classificationTypes;

        /// <summary>
        /// A filter to return only packages that match the given update classification type.
        /// </summary>
        public List<string> ClassificationTypes
        {
            get => _classificationTypes ?? (_classificationTypes = new List<string>());
            set => _classificationTypes = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetErrataFilterArgs>? _filters;
        public List<Inputs.GetErrataFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetErrataFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return resources that may partially match the erratum name given.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public string? OsFamily { get; set; }

        /// <summary>
        /// The issue date before which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeIssueDateEnd")]
        public string? TimeIssueDateEnd { get; set; }

        /// <summary>
        /// The issue date after which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeIssueDateStart")]
        public string? TimeIssueDateStart { get; set; }

        public GetErrataArgs()
        {
        }
        public static new GetErrataArgs Empty => new GetErrataArgs();
    }

    public sealed class GetErrataInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("advisorySeverities")]
        private InputList<string>? _advisorySeverities;

        /// <summary>
        /// The advisory severity.
        /// </summary>
        public InputList<string> AdvisorySeverities
        {
            get => _advisorySeverities ?? (_advisorySeverities = new InputList<string>());
            set => _advisorySeverities = value;
        }

        [Input("advisoryTypes")]
        private InputList<string>? _advisoryTypes;

        /// <summary>
        /// A filter to return only errata that match the given advisory types.
        /// </summary>
        public InputList<string> AdvisoryTypes
        {
            get => _advisoryTypes ?? (_advisoryTypes = new InputList<string>());
            set => _advisoryTypes = value;
        }

        [Input("classificationTypes")]
        private InputList<string>? _classificationTypes;

        /// <summary>
        /// A filter to return only packages that match the given update classification type.
        /// </summary>
        public InputList<string> ClassificationTypes
        {
            get => _classificationTypes ?? (_classificationTypes = new InputList<string>());
            set => _classificationTypes = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetErrataFilterInputArgs>? _filters;
        public InputList<Inputs.GetErrataFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetErrataFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return resources that may partially match the erratum name given.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The issue date before which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeIssueDateEnd")]
        public Input<string>? TimeIssueDateEnd { get; set; }

        /// <summary>
        /// The issue date after which to list all errata, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeIssueDateStart")]
        public Input<string>? TimeIssueDateStart { get; set; }

        public GetErrataInvokeArgs()
        {
        }
        public static new GetErrataInvokeArgs Empty => new GetErrataInvokeArgs();
    }


    [OutputType]
    public sealed class GetErrataResult
    {
        /// <summary>
        /// The severity for a security advisory, otherwise, null.
        /// </summary>
        public readonly ImmutableArray<string> AdvisorySeverities;
        /// <summary>
        /// The advisory type of the erratum.
        /// </summary>
        public readonly ImmutableArray<string> AdvisoryTypes;
        /// <summary>
        /// Type of the erratum. This property is deprecated and it will be removed in a future API release. Please refer to the advisoryType property instead.
        /// </summary>
        public readonly ImmutableArray<string> ClassificationTypes;
        public readonly string CompartmentId;
        /// <summary>
        /// The list of erratum_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetErrataErratumCollectionResult> ErratumCollections;
        public readonly ImmutableArray<Outputs.GetErrataFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameContains;
        /// <summary>
        /// Unique identifier for the package. Note that this is not an OCID.
        /// </summary>
        public readonly ImmutableArray<string> Names;
        public readonly string? OsFamily;
        public readonly string? TimeIssueDateEnd;
        public readonly string? TimeIssueDateStart;

        [OutputConstructor]
        private GetErrataResult(
            ImmutableArray<string> advisorySeverities,

            ImmutableArray<string> advisoryTypes,

            ImmutableArray<string> classificationTypes,

            string compartmentId,

            ImmutableArray<Outputs.GetErrataErratumCollectionResult> erratumCollections,

            ImmutableArray<Outputs.GetErrataFilterResult> filters,

            string id,

            string? nameContains,

            ImmutableArray<string> names,

            string? osFamily,

            string? timeIssueDateEnd,

            string? timeIssueDateStart)
        {
            AdvisorySeverities = advisorySeverities;
            AdvisoryTypes = advisoryTypes;
            ClassificationTypes = classificationTypes;
            CompartmentId = compartmentId;
            ErratumCollections = erratumCollections;
            Filters = filters;
            Id = id;
            NameContains = nameContains;
            Names = names;
            OsFamily = osFamily;
            TimeIssueDateEnd = timeIssueDateEnd;
            TimeIssueDateStart = timeIssueDateStart;
        }
    }
}
