// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetErratum
    {
        /// <summary>
        /// This data source provides details about a specific Erratum resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Returns information about the specified erratum based on its advisory name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testErratum = Oci.OsManagementHub.GetErratum.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = erratumName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetErratumResult> InvokeAsync(GetErratumArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetErratumResult>("oci:OsManagementHub/getErratum:getErratum", args ?? new GetErratumArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Erratum resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Returns information about the specified erratum based on its advisory name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testErratum = Oci.OsManagementHub.GetErratum.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Name = erratumName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetErratumResult> Invoke(GetErratumInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetErratumResult>("oci:OsManagementHub/getErratum:getErratum", args ?? new GetErratumInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetErratumArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The erratum name (such as ELSA-2023-34678).
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetErratumArgs()
        {
        }
        public static new GetErratumArgs Empty => new GetErratumArgs();
    }

    public sealed class GetErratumInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The erratum name (such as ELSA-2023-34678).
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetErratumInvokeArgs()
        {
        }
        public static new GetErratumInvokeArgs Empty => new GetErratumInvokeArgs();
    }


    [OutputType]
    public sealed class GetErratumResult
    {
        /// <summary>
        /// The severity for a security advisory, otherwise, null.
        /// </summary>
        public readonly string AdvisorySeverity;
        /// <summary>
        /// The advisory type of the erratum.
        /// </summary>
        public readonly string AdvisoryType;
        /// <summary>
        /// Type of the erratum. This property is deprecated and it will be removed in a future API release. Please refer to the advisoryType property instead.
        /// </summary>
        public readonly string ClassificationType;
        public readonly string CompartmentId;
        /// <summary>
        /// Software source description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Information specifying from where the erratum was release.
        /// </summary>
        public readonly string From;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier for the package. Note that this is not an OCID.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The OS families the package belongs to.
        /// </summary>
        public readonly ImmutableArray<string> OsFamilies;
        /// <summary>
        /// List of packages affected by this erratum.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetErratumPackageResult> Packages;
        /// <summary>
        /// Information describing how to find more information about. the erratum.
        /// </summary>
        public readonly string References;
        /// <summary>
        /// List of CVEs applicable to this erratum.
        /// </summary>
        public readonly ImmutableArray<string> RelatedCves;
        /// <summary>
        /// List of repository identifiers.
        /// </summary>
        public readonly ImmutableArray<string> Repositories;
        /// <summary>
        /// Information describing how the erratum can be resolved.
        /// </summary>
        public readonly string Solution;
        /// <summary>
        /// Summary description of the erratum.
        /// </summary>
        public readonly string Synopsis;
        /// <summary>
        /// The date and time the erratum was issued (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        public readonly string TimeIssued;
        /// <summary>
        /// The date and time the erratum was updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetErratumResult(
            string advisorySeverity,

            string advisoryType,

            string classificationType,

            string compartmentId,

            string description,

            string from,

            string id,

            string name,

            ImmutableArray<string> osFamilies,

            ImmutableArray<Outputs.GetErratumPackageResult> packages,

            string references,

            ImmutableArray<string> relatedCves,

            ImmutableArray<string> repositories,

            string solution,

            string synopsis,

            string timeIssued,

            string timeUpdated)
        {
            AdvisorySeverity = advisorySeverity;
            AdvisoryType = advisoryType;
            ClassificationType = classificationType;
            CompartmentId = compartmentId;
            Description = description;
            From = from;
            Id = id;
            Name = name;
            OsFamilies = osFamilies;
            Packages = packages;
            References = references;
            RelatedCves = relatedCves;
            Repositories = repositories;
            Solution = solution;
            Synopsis = synopsis;
            TimeIssued = timeIssued;
            TimeUpdated = timeUpdated;
        }
    }
}
