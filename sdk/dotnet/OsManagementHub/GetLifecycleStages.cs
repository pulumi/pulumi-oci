// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetLifecycleStages
    {
        /// <summary>
        /// This data source provides the list of Lifecycle Stages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists lifecycle stages that match the specified compartment or lifecycle stage OCID. Filter the list against 
        /// a variety of criteria including but not limited to its name, status, architecture, and OS family.
        /// </summary>
        public static Task<GetLifecycleStagesResult> InvokeAsync(GetLifecycleStagesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLifecycleStagesResult>("oci:OsManagementHub/getLifecycleStages:getLifecycleStages", args ?? new GetLifecycleStagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Lifecycle Stages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists lifecycle stages that match the specified compartment or lifecycle stage OCID. Filter the list against 
        /// a variety of criteria including but not limited to its name, status, architecture, and OS family.
        /// </summary>
        public static Output<GetLifecycleStagesResult> Invoke(GetLifecycleStagesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLifecycleStagesResult>("oci:OsManagementHub/getLifecycleStages:getLifecycleStages", args ?? new GetLifecycleStagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLifecycleStagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public string? ArchType { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetLifecycleStagesFilterArgs>? _filters;
        public List<Inputs.GetLifecycleStagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLifecycleStagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the lifecycle stage.
        /// </summary>
        [Input("lifecycleStageId")]
        public string? LifecycleStageId { get; set; }

        /// <summary>
        /// A filter to return only profiles that match the given osFamily.
        /// </summary>
        [Input("osFamily")]
        public string? OsFamily { get; set; }

        /// <summary>
        /// The OCID for the software source.
        /// </summary>
        [Input("softwareSourceId")]
        public string? SoftwareSourceId { get; set; }

        /// <summary>
        /// A filter to return only lifecycle stage whose lifecycle state matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetLifecycleStagesArgs()
        {
        }
        public static new GetLifecycleStagesArgs Empty => new GetLifecycleStagesArgs();
    }

    public sealed class GetLifecycleStagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetLifecycleStagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetLifecycleStagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLifecycleStagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the lifecycle stage.
        /// </summary>
        [Input("lifecycleStageId")]
        public Input<string>? LifecycleStageId { get; set; }

        /// <summary>
        /// A filter to return only profiles that match the given osFamily.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The OCID for the software source.
        /// </summary>
        [Input("softwareSourceId")]
        public Input<string>? SoftwareSourceId { get; set; }

        /// <summary>
        /// A filter to return only lifecycle stage whose lifecycle state matches the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetLifecycleStagesInvokeArgs()
        {
        }
        public static new GetLifecycleStagesInvokeArgs Empty => new GetLifecycleStagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLifecycleStagesResult
    {
        /// <summary>
        /// The CPU architecture of the target instances.
        /// </summary>
        public readonly string? ArchType;
        /// <summary>
        /// The OCID of the tenancy containing the lifecycle stage.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetLifecycleStagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of lifecycle_stage_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLifecycleStagesLifecycleStageCollectionResult> LifecycleStageCollections;
        public readonly string? LifecycleStageId;
        /// <summary>
        /// The operating system type of the target instances.
        /// </summary>
        public readonly string? OsFamily;
        /// <summary>
        /// Identifying information for the specified software source.
        /// </summary>
        public readonly string? SoftwareSourceId;
        /// <summary>
        /// The current state of the lifecycle stage.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetLifecycleStagesResult(
            string? archType,

            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetLifecycleStagesFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetLifecycleStagesLifecycleStageCollectionResult> lifecycleStageCollections,

            string? lifecycleStageId,

            string? osFamily,

            string? softwareSourceId,

            string? state)
        {
            ArchType = archType;
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Id = id;
            LifecycleStageCollections = lifecycleStageCollections;
            LifecycleStageId = lifecycleStageId;
            OsFamily = osFamily;
            SoftwareSourceId = softwareSourceId;
            State = state;
        }
    }
}
