// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetManagedInstanceInstalledPackages
    {
        /// <summary>
        /// This data source provides the list of Managed Instance Installed Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the packages that are installed on the managed instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstanceInstalledPackages = Oci.OsManagementHub.GetManagedInstanceInstalledPackages.Invoke(new()
        ///     {
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceInstalledPackageDisplayName,
        ///         DisplayNameContains = managedInstanceInstalledPackageDisplayNameContains,
        ///         TimeInstallDateEnd = managedInstanceInstalledPackageTimeInstallDateEnd,
        ///         TimeInstallDateStart = managedInstanceInstalledPackageTimeInstallDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedInstanceInstalledPackagesResult> InvokeAsync(GetManagedInstanceInstalledPackagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstanceInstalledPackagesResult>("oci:OsManagementHub/getManagedInstanceInstalledPackages:getManagedInstanceInstalledPackages", args ?? new GetManagedInstanceInstalledPackagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Instance Installed Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the packages that are installed on the managed instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstanceInstalledPackages = Oci.OsManagementHub.GetManagedInstanceInstalledPackages.Invoke(new()
        ///     {
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceInstalledPackageDisplayName,
        ///         DisplayNameContains = managedInstanceInstalledPackageDisplayNameContains,
        ///         TimeInstallDateEnd = managedInstanceInstalledPackageTimeInstallDateEnd,
        ///         TimeInstallDateStart = managedInstanceInstalledPackageTimeInstallDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedInstanceInstalledPackagesResult> Invoke(GetManagedInstanceInstalledPackagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceInstalledPackagesResult>("oci:OsManagementHub/getManagedInstanceInstalledPackages:getManagedInstanceInstalledPackages", args ?? new GetManagedInstanceInstalledPackagesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Instance Installed Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the packages that are installed on the managed instance.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstanceInstalledPackages = Oci.OsManagementHub.GetManagedInstanceInstalledPackages.Invoke(new()
        ///     {
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceInstalledPackageDisplayName,
        ///         DisplayNameContains = managedInstanceInstalledPackageDisplayNameContains,
        ///         TimeInstallDateEnd = managedInstanceInstalledPackageTimeInstallDateEnd,
        ///         TimeInstallDateStart = managedInstanceInstalledPackageTimeInstallDateStart,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedInstanceInstalledPackagesResult> Invoke(GetManagedInstanceInstalledPackagesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceInstalledPackagesResult>("oci:OsManagementHub/getManagedInstanceInstalledPackages:getManagedInstanceInstalledPackages", args ?? new GetManagedInstanceInstalledPackagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstanceInstalledPackagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetManagedInstanceInstalledPackagesFilterArgs>? _filters;
        public List<Inputs.GetManagedInstanceInstalledPackagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagedInstanceInstalledPackagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public string ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// A filter to return only packages that were installed on or before the date provided, in ISO 8601 format.  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeInstallDateEnd")]
        public string? TimeInstallDateEnd { get; set; }

        /// <summary>
        /// The install date after which to list all packages, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeInstallDateStart")]
        public string? TimeInstallDateStart { get; set; }

        public GetManagedInstanceInstalledPackagesArgs()
        {
        }
        public static new GetManagedInstanceInstalledPackagesArgs Empty => new GetManagedInstanceInstalledPackagesArgs();
    }

    public sealed class GetManagedInstanceInstalledPackagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetManagedInstanceInstalledPackagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagedInstanceInstalledPackagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagedInstanceInstalledPackagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// A filter to return only packages that were installed on or before the date provided, in ISO 8601 format.  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeInstallDateEnd")]
        public Input<string>? TimeInstallDateEnd { get; set; }

        /// <summary>
        /// The install date after which to list all packages, in ISO 8601 format  Example: 2017-07-14T02:40:00.000Z
        /// </summary>
        [Input("timeInstallDateStart")]
        public Input<string>? TimeInstallDateStart { get; set; }

        public GetManagedInstanceInstalledPackagesInvokeArgs()
        {
        }
        public static new GetManagedInstanceInstalledPackagesInvokeArgs Empty => new GetManagedInstanceInstalledPackagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstanceInstalledPackagesResult
    {
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetManagedInstanceInstalledPackagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of installed_package_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionResult> InstalledPackageCollections;
        public readonly string ManagedInstanceId;
        public readonly string? TimeInstallDateEnd;
        public readonly string? TimeInstallDateStart;

        [OutputConstructor]
        private GetManagedInstanceInstalledPackagesResult(
            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetManagedInstanceInstalledPackagesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetManagedInstanceInstalledPackagesInstalledPackageCollectionResult> installedPackageCollections,

            string managedInstanceId,

            string? timeInstallDateEnd,

            string? timeInstallDateStart)
        {
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Id = id;
            InstalledPackageCollections = installedPackageCollections;
            ManagedInstanceId = managedInstanceId;
            TimeInstallDateEnd = timeInstallDateEnd;
            TimeInstallDateStart = timeInstallDateStart;
        }
    }
}
