// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetManagedInstances
    {
        /// <summary>
        /// This data source provides the list of Managed Instances in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status, architecture, and OS version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstances = Oci.OsManagementHub.GetManagedInstances.Invoke(new()
        ///     {
        ///         AdvisoryNames = managedInstanceAdvisoryName,
        ///         ArchTypes = managedInstanceArchType,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceDisplayName,
        ///         DisplayNameContains = managedInstanceDisplayNameContains,
        ///         Group = managedInstanceGroup,
        ///         GroupNotEqualTo = managedInstanceGroupNotEqualTo,
        ///         IsAttachedToGroupOrLifecycleStage = managedInstanceIsAttachedToGroupOrLifecycleStage,
        ///         IsManagedByAutonomousLinux = managedInstanceIsManagedByAutonomousLinux,
        ///         IsManagementStation = managedInstanceIsManagementStation,
        ///         IsProfileAttached = managedInstanceIsProfileAttached,
        ///         LifecycleEnvironment = managedInstanceLifecycleEnvironment,
        ///         LifecycleEnvironmentNotEqualTo = managedInstanceLifecycleEnvironmentNotEqualTo,
        ///         LifecycleStage = managedInstanceLifecycleStage,
        ///         LifecycleStageNotEqualTo = managedInstanceLifecycleStageNotEqualTo,
        ///         Locations = managedInstanceLocation,
        ///         LocationNotEqualTos = managedInstanceLocationNotEqualTo,
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         OsFamilies = managedInstanceOsFamily,
        ///         Profiles = managedInstanceProfile,
        ///         ProfileNotEqualTos = managedInstanceProfileNotEqualTo,
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         Statuses = managedInstanceStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagedInstancesResult> InvokeAsync(GetManagedInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstancesResult>("oci:OsManagementHub/getManagedInstances:getManagedInstances", args ?? new GetManagedInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Instances in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status, architecture, and OS version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstances = Oci.OsManagementHub.GetManagedInstances.Invoke(new()
        ///     {
        ///         AdvisoryNames = managedInstanceAdvisoryName,
        ///         ArchTypes = managedInstanceArchType,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceDisplayName,
        ///         DisplayNameContains = managedInstanceDisplayNameContains,
        ///         Group = managedInstanceGroup,
        ///         GroupNotEqualTo = managedInstanceGroupNotEqualTo,
        ///         IsAttachedToGroupOrLifecycleStage = managedInstanceIsAttachedToGroupOrLifecycleStage,
        ///         IsManagedByAutonomousLinux = managedInstanceIsManagedByAutonomousLinux,
        ///         IsManagementStation = managedInstanceIsManagementStation,
        ///         IsProfileAttached = managedInstanceIsProfileAttached,
        ///         LifecycleEnvironment = managedInstanceLifecycleEnvironment,
        ///         LifecycleEnvironmentNotEqualTo = managedInstanceLifecycleEnvironmentNotEqualTo,
        ///         LifecycleStage = managedInstanceLifecycleStage,
        ///         LifecycleStageNotEqualTo = managedInstanceLifecycleStageNotEqualTo,
        ///         Locations = managedInstanceLocation,
        ///         LocationNotEqualTos = managedInstanceLocationNotEqualTo,
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         OsFamilies = managedInstanceOsFamily,
        ///         Profiles = managedInstanceProfile,
        ///         ProfileNotEqualTos = managedInstanceProfileNotEqualTo,
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         Statuses = managedInstanceStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedInstancesResult> Invoke(GetManagedInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstancesResult>("oci:OsManagementHub/getManagedInstances:getManagedInstances", args ?? new GetManagedInstancesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Managed Instances in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status, architecture, and OS version.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagedInstances = Oci.OsManagementHub.GetManagedInstances.Invoke(new()
        ///     {
        ///         AdvisoryNames = managedInstanceAdvisoryName,
        ///         ArchTypes = managedInstanceArchType,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = managedInstanceDisplayName,
        ///         DisplayNameContains = managedInstanceDisplayNameContains,
        ///         Group = managedInstanceGroup,
        ///         GroupNotEqualTo = managedInstanceGroupNotEqualTo,
        ///         IsAttachedToGroupOrLifecycleStage = managedInstanceIsAttachedToGroupOrLifecycleStage,
        ///         IsManagedByAutonomousLinux = managedInstanceIsManagedByAutonomousLinux,
        ///         IsManagementStation = managedInstanceIsManagementStation,
        ///         IsProfileAttached = managedInstanceIsProfileAttached,
        ///         LifecycleEnvironment = managedInstanceLifecycleEnvironment,
        ///         LifecycleEnvironmentNotEqualTo = managedInstanceLifecycleEnvironmentNotEqualTo,
        ///         LifecycleStage = managedInstanceLifecycleStage,
        ///         LifecycleStageNotEqualTo = managedInstanceLifecycleStageNotEqualTo,
        ///         Locations = managedInstanceLocation,
        ///         LocationNotEqualTos = managedInstanceLocationNotEqualTo,
        ///         ManagedInstanceId = testManagedInstance.Id,
        ///         OsFamilies = managedInstanceOsFamily,
        ///         Profiles = managedInstanceProfile,
        ///         ProfileNotEqualTos = managedInstanceProfileNotEqualTo,
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         Statuses = managedInstanceStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagedInstancesResult> Invoke(GetManagedInstancesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstancesResult>("oci:OsManagementHub/getManagedInstances:getManagedInstances", args ?? new GetManagedInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstancesArgs : global::Pulumi.InvokeArgs
    {
        [Input("advisoryNames")]
        private List<string>? _advisoryNames;

        /// <summary>
        /// The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        /// </summary>
        public List<string> AdvisoryNames
        {
            get => _advisoryNames ?? (_advisoryNames = new List<string>());
            set => _advisoryNames = value;
        }

        [Input("archTypes")]
        private List<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public List<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new List<string>());
            set => _archTypes = value;
        }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetManagedInstancesFilterArgs>? _filters;
        public List<Inputs.GetManagedInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagedInstancesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only managed instances that are attached to the specified group.
        /// </summary>
        [Input("group")]
        public string? Group { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are NOT attached to the specified group.
        /// </summary>
        [Input("groupNotEqualTo")]
        public string? GroupNotEqualTo { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are attached to the specified group or lifecycle environment.
        /// </summary>
        [Input("isAttachedToGroupOrLifecycleStage")]
        public bool? IsAttachedToGroupOrLifecycleStage { get; set; }

        /// <summary>
        /// Indicates whether to list only resources managed by the Autonomous Linux service.
        /// </summary>
        [Input("isManagedByAutonomousLinux")]
        public bool? IsManagedByAutonomousLinux { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are acting as management stations.
        /// </summary>
        [Input("isManagementStation")]
        public bool? IsManagementStation { get; set; }

        /// <summary>
        /// A filter to return only managed instances with a registration profile attached.
        /// </summary>
        [Input("isProfileAttached")]
        public bool? IsProfileAttached { get; set; }

        /// <summary>
        /// A filter to return only managed instances in a specific lifecycle environment.
        /// </summary>
        [Input("lifecycleEnvironment")]
        public string? LifecycleEnvironment { get; set; }

        /// <summary>
        /// A filter to return only managed instances that aren't in a specific lifecycle environment.
        /// </summary>
        [Input("lifecycleEnvironmentNotEqualTo")]
        public string? LifecycleEnvironmentNotEqualTo { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are associated with the specified lifecycle environment.
        /// </summary>
        [Input("lifecycleStage")]
        public string? LifecycleStage { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
        /// </summary>
        [Input("lifecycleStageNotEqualTo")]
        public string? LifecycleStageNotEqualTo { get; set; }

        [Input("locationNotEqualTos")]
        private List<string>? _locationNotEqualTos;

        /// <summary>
        /// A filter to return only resources whose location does not match the given value.
        /// </summary>
        public List<string> LocationNotEqualTos
        {
            get => _locationNotEqualTos ?? (_locationNotEqualTos = new List<string>());
            set => _locationNotEqualTos = value;
        }

        [Input("locations")]
        private List<string>? _locations;

        /// <summary>
        /// A filter to return only resources whose location matches the given value.
        /// </summary>
        public List<string> Locations
        {
            get => _locations ?? (_locations = new List<string>());
            set => _locations = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        /// </summary>
        [Input("managedInstanceId")]
        public string? ManagedInstanceId { get; set; }

        [Input("osFamilies")]
        private List<string>? _osFamilies;

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        public List<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new List<string>());
            set => _osFamilies = value;
        }

        [Input("profileNotEqualTos")]
        private List<string>? _profileNotEqualTos;

        /// <summary>
        /// A multi filter to return only managed instances that don't contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public List<string> ProfileNotEqualTos
        {
            get => _profileNotEqualTos ?? (_profileNotEqualTos = new List<string>());
            set => _profileNotEqualTos = value;
        }

        [Input("profiles")]
        private List<string>? _profiles;

        /// <summary>
        /// A multi filter to return only managed instances that match the given profile ids.
        /// </summary>
        public List<string> Profiles
        {
            get => _profiles ?? (_profiles = new List<string>());
            set => _profiles = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
        /// </summary>
        [Input("softwareSourceId")]
        public string? SoftwareSourceId { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// A filter to return only managed instances whose status matches the status provided.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public GetManagedInstancesArgs()
        {
        }
        public static new GetManagedInstancesArgs Empty => new GetManagedInstancesArgs();
    }

    public sealed class GetManagedInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("advisoryNames")]
        private InputList<string>? _advisoryNames;

        /// <summary>
        /// The assigned erratum name. It's unique and not changeable.  Example: `ELSA-2020-5804`
        /// </summary>
        public InputList<string> AdvisoryNames
        {
            get => _advisoryNames ?? (_advisoryNames = new InputList<string>());
            set => _advisoryNames = value;
        }

        [Input("archTypes")]
        private InputList<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public InputList<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new InputList<string>());
            set => _archTypes = value;
        }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetManagedInstancesFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagedInstancesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagedInstancesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only managed instances that are attached to the specified group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are NOT attached to the specified group.
        /// </summary>
        [Input("groupNotEqualTo")]
        public Input<string>? GroupNotEqualTo { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are attached to the specified group or lifecycle environment.
        /// </summary>
        [Input("isAttachedToGroupOrLifecycleStage")]
        public Input<bool>? IsAttachedToGroupOrLifecycleStage { get; set; }

        /// <summary>
        /// Indicates whether to list only resources managed by the Autonomous Linux service.
        /// </summary>
        [Input("isManagedByAutonomousLinux")]
        public Input<bool>? IsManagedByAutonomousLinux { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are acting as management stations.
        /// </summary>
        [Input("isManagementStation")]
        public Input<bool>? IsManagementStation { get; set; }

        /// <summary>
        /// A filter to return only managed instances with a registration profile attached.
        /// </summary>
        [Input("isProfileAttached")]
        public Input<bool>? IsProfileAttached { get; set; }

        /// <summary>
        /// A filter to return only managed instances in a specific lifecycle environment.
        /// </summary>
        [Input("lifecycleEnvironment")]
        public Input<string>? LifecycleEnvironment { get; set; }

        /// <summary>
        /// A filter to return only managed instances that aren't in a specific lifecycle environment.
        /// </summary>
        [Input("lifecycleEnvironmentNotEqualTo")]
        public Input<string>? LifecycleEnvironmentNotEqualTo { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are associated with the specified lifecycle environment.
        /// </summary>
        [Input("lifecycleStage")]
        public Input<string>? LifecycleStage { get; set; }

        /// <summary>
        /// A filter to return only managed instances that are NOT associated with the specified lifecycle environment.
        /// </summary>
        [Input("lifecycleStageNotEqualTo")]
        public Input<string>? LifecycleStageNotEqualTo { get; set; }

        [Input("locationNotEqualTos")]
        private InputList<string>? _locationNotEqualTos;

        /// <summary>
        /// A filter to return only resources whose location does not match the given value.
        /// </summary>
        public InputList<string> LocationNotEqualTos
        {
            get => _locationNotEqualTos ?? (_locationNotEqualTos = new InputList<string>());
            set => _locationNotEqualTos = value;
        }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A filter to return only resources whose location matches the given value.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance. This filter returns resources associated with this managed instance.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        [Input("osFamilies")]
        private InputList<string>? _osFamilies;

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        public InputList<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new InputList<string>());
            set => _osFamilies = value;
        }

        [Input("profileNotEqualTos")]
        private InputList<string>? _profileNotEqualTos;

        /// <summary>
        /// A multi filter to return only managed instances that don't contain the given profile [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </summary>
        public InputList<string> ProfileNotEqualTos
        {
            get => _profileNotEqualTos ?? (_profileNotEqualTos = new InputList<string>());
            set => _profileNotEqualTos = value;
        }

        [Input("profiles")]
        private InputList<string>? _profiles;

        /// <summary>
        /// A multi filter to return only managed instances that match the given profile ids.
        /// </summary>
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source. This filter returns resources associated with this software source.
        /// </summary>
        [Input("softwareSourceId")]
        public Input<string>? SoftwareSourceId { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// A filter to return only managed instances whose status matches the status provided.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public GetManagedInstancesInvokeArgs()
        {
        }
        public static new GetManagedInstancesInvokeArgs Empty => new GetManagedInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstancesResult
    {
        public readonly ImmutableArray<string> AdvisoryNames;
        public readonly ImmutableArray<string> ArchTypes;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the managed instance.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetManagedInstancesFilterResult> Filters;
        public readonly string? Group;
        public readonly string? GroupNotEqualTo;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsAttachedToGroupOrLifecycleStage;
        /// <summary>
        /// Indicates whether the Autonomous Linux service manages the instance.
        /// </summary>
        public readonly bool? IsManagedByAutonomousLinux;
        /// <summary>
        /// Indicates whether this managed instance is acting as an on-premises management station.
        /// </summary>
        public readonly bool? IsManagementStation;
        public readonly bool? IsProfileAttached;
        /// <summary>
        /// Id and name of a resource to simplify the display for the user.
        /// </summary>
        public readonly string? LifecycleEnvironment;
        public readonly string? LifecycleEnvironmentNotEqualTo;
        /// <summary>
        /// Id and name of a resource to simplify the display for the user.
        /// </summary>
        public readonly string? LifecycleStage;
        public readonly string? LifecycleStageNotEqualTo;
        public readonly ImmutableArray<string> LocationNotEqualTos;
        /// <summary>
        /// The location of the managed instance.
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        /// <summary>
        /// The list of managed_instance_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedInstancesManagedInstanceCollectionResult> ManagedInstanceCollections;
        public readonly string? ManagedInstanceId;
        /// <summary>
        /// The operating system type of the managed instance.
        /// </summary>
        public readonly ImmutableArray<string> OsFamilies;
        public readonly ImmutableArray<string> ProfileNotEqualTos;
        /// <summary>
        /// The profile that was used to register this instance with the service.
        /// </summary>
        public readonly ImmutableArray<string> Profiles;
        public readonly string? SoftwareSourceId;
        /// <summary>
        /// Current status of the managed instance.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;

        [OutputConstructor]
        private GetManagedInstancesResult(
            ImmutableArray<string> advisoryNames,

            ImmutableArray<string> archTypes,

            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetManagedInstancesFilterResult> filters,

            string? group,

            string? groupNotEqualTo,

            string id,

            bool? isAttachedToGroupOrLifecycleStage,

            bool? isManagedByAutonomousLinux,

            bool? isManagementStation,

            bool? isProfileAttached,

            string? lifecycleEnvironment,

            string? lifecycleEnvironmentNotEqualTo,

            string? lifecycleStage,

            string? lifecycleStageNotEqualTo,

            ImmutableArray<string> locationNotEqualTos,

            ImmutableArray<string> locations,

            ImmutableArray<Outputs.GetManagedInstancesManagedInstanceCollectionResult> managedInstanceCollections,

            string? managedInstanceId,

            ImmutableArray<string> osFamilies,

            ImmutableArray<string> profileNotEqualTos,

            ImmutableArray<string> profiles,

            string? softwareSourceId,

            ImmutableArray<string> statuses)
        {
            AdvisoryNames = advisoryNames;
            ArchTypes = archTypes;
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Group = group;
            GroupNotEqualTo = groupNotEqualTo;
            Id = id;
            IsAttachedToGroupOrLifecycleStage = isAttachedToGroupOrLifecycleStage;
            IsManagedByAutonomousLinux = isManagedByAutonomousLinux;
            IsManagementStation = isManagementStation;
            IsProfileAttached = isProfileAttached;
            LifecycleEnvironment = lifecycleEnvironment;
            LifecycleEnvironmentNotEqualTo = lifecycleEnvironmentNotEqualTo;
            LifecycleStage = lifecycleStage;
            LifecycleStageNotEqualTo = lifecycleStageNotEqualTo;
            LocationNotEqualTos = locationNotEqualTos;
            Locations = locations;
            ManagedInstanceCollections = managedInstanceCollections;
            ManagedInstanceId = managedInstanceId;
            OsFamilies = osFamilies;
            ProfileNotEqualTos = profileNotEqualTos;
            Profiles = profiles;
            SoftwareSourceId = softwareSourceId;
            Statuses = statuses;
        }
    }
}
