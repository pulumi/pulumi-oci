// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetManagementStationMirrors
    {
        /// <summary>
        /// This data source provides the list of Management Station Mirrors in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists all software source mirrors associated with a specified management station.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementStationMirrors = Oci.OsManagementHub.GetManagementStationMirrors.Invoke(new()
        ///     {
        ///         ManagementStationId = testManagementStation.Id,
        ///         DisplayName = managementStationMirrorDisplayName,
        ///         DisplayNameContains = managementStationMirrorDisplayNameContains,
        ///         MirrorStates = managementStationMirrorMirrorStates,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetManagementStationMirrorsResult> InvokeAsync(GetManagementStationMirrorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagementStationMirrorsResult>("oci:OsManagementHub/getManagementStationMirrors:getManagementStationMirrors", args ?? new GetManagementStationMirrorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Management Station Mirrors in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists all software source mirrors associated with a specified management station.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testManagementStationMirrors = Oci.OsManagementHub.GetManagementStationMirrors.Invoke(new()
        ///     {
        ///         ManagementStationId = testManagementStation.Id,
        ///         DisplayName = managementStationMirrorDisplayName,
        ///         DisplayNameContains = managementStationMirrorDisplayNameContains,
        ///         MirrorStates = managementStationMirrorMirrorStates,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetManagementStationMirrorsResult> Invoke(GetManagementStationMirrorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagementStationMirrorsResult>("oci:OsManagementHub/getManagementStationMirrors:getManagementStationMirrors", args ?? new GetManagementStationMirrorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagementStationMirrorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetManagementStationMirrorsFilterArgs>? _filters;
        public List<Inputs.GetManagementStationMirrorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagementStationMirrorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station.
        /// </summary>
        [Input("managementStationId", required: true)]
        public string ManagementStationId { get; set; } = null!;

        [Input("mirrorStates")]
        private List<string>? _mirrorStates;

        /// <summary>
        /// List of Mirror state to filter by
        /// </summary>
        public List<string> MirrorStates
        {
            get => _mirrorStates ?? (_mirrorStates = new List<string>());
            set => _mirrorStates = value;
        }

        public GetManagementStationMirrorsArgs()
        {
        }
        public static new GetManagementStationMirrorsArgs Empty => new GetManagementStationMirrorsArgs();
    }

    public sealed class GetManagementStationMirrorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetManagementStationMirrorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetManagementStationMirrorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagementStationMirrorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station.
        /// </summary>
        [Input("managementStationId", required: true)]
        public Input<string> ManagementStationId { get; set; } = null!;

        [Input("mirrorStates")]
        private InputList<string>? _mirrorStates;

        /// <summary>
        /// List of Mirror state to filter by
        /// </summary>
        public InputList<string> MirrorStates
        {
            get => _mirrorStates ?? (_mirrorStates = new InputList<string>());
            set => _mirrorStates = value;
        }

        public GetManagementStationMirrorsInvokeArgs()
        {
        }
        public static new GetManagementStationMirrorsInvokeArgs Empty => new GetManagementStationMirrorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagementStationMirrorsResult
    {
        /// <summary>
        /// Display name of the mirror
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DisplayNameContains;
        public readonly ImmutableArray<Outputs.GetManagementStationMirrorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ManagementStationId;
        public readonly ImmutableArray<string> MirrorStates;
        /// <summary>
        /// The list of mirrors_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagementStationMirrorsMirrorsCollectionResult> MirrorsCollections;

        [OutputConstructor]
        private GetManagementStationMirrorsResult(
            string? displayName,

            string? displayNameContains,

            ImmutableArray<Outputs.GetManagementStationMirrorsFilterResult> filters,

            string id,

            string managementStationId,

            ImmutableArray<string> mirrorStates,

            ImmutableArray<Outputs.GetManagementStationMirrorsMirrorsCollectionResult> mirrorsCollections)
        {
            DisplayName = displayName;
            DisplayNameContains = displayNameContains;
            Filters = filters;
            Id = id;
            ManagementStationId = managementStationId;
            MirrorStates = mirrorStates;
            MirrorsCollections = mirrorsCollections;
        }
    }
}
