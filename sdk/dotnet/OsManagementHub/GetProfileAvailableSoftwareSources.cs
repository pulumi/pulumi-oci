// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetProfileAvailableSoftwareSources
    {
        /// <summary>
        /// This data source provides the list of Profile Available Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists available software sources for a specified profile. Filter the list against a variety of criteria including but not limited to the software source name. The results list only software sources that have not already been added to the profile.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfileAvailableSoftwareSources = Oci.OsManagementHub.GetProfileAvailableSoftwareSources.Invoke(new()
        ///     {
        ///         ProfileId = testProfile.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = profileAvailableSoftwareSourceDisplayName,
        ///         DisplayNameContains = profileAvailableSoftwareSourceDisplayNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProfileAvailableSoftwareSourcesResult> InvokeAsync(GetProfileAvailableSoftwareSourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfileAvailableSoftwareSourcesResult>("oci:OsManagementHub/getProfileAvailableSoftwareSources:getProfileAvailableSoftwareSources", args ?? new GetProfileAvailableSoftwareSourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profile Available Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists available software sources for a specified profile. Filter the list against a variety of criteria including but not limited to the software source name. The results list only software sources that have not already been added to the profile.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfileAvailableSoftwareSources = Oci.OsManagementHub.GetProfileAvailableSoftwareSources.Invoke(new()
        ///     {
        ///         ProfileId = testProfile.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = profileAvailableSoftwareSourceDisplayName,
        ///         DisplayNameContains = profileAvailableSoftwareSourceDisplayNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProfileAvailableSoftwareSourcesResult> Invoke(GetProfileAvailableSoftwareSourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfileAvailableSoftwareSourcesResult>("oci:OsManagementHub/getProfileAvailableSoftwareSources:getProfileAvailableSoftwareSources", args ?? new GetProfileAvailableSoftwareSourcesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profile Available Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists available software sources for a specified profile. Filter the list against a variety of criteria including but not limited to the software source name. The results list only software sources that have not already been added to the profile.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfileAvailableSoftwareSources = Oci.OsManagementHub.GetProfileAvailableSoftwareSources.Invoke(new()
        ///     {
        ///         ProfileId = testProfile.Id,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = profileAvailableSoftwareSourceDisplayName,
        ///         DisplayNameContains = profileAvailableSoftwareSourceDisplayNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProfileAvailableSoftwareSourcesResult> Invoke(GetProfileAvailableSoftwareSourcesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfileAvailableSoftwareSourcesResult>("oci:OsManagementHub/getProfileAvailableSoftwareSources:getProfileAvailableSoftwareSources", args ?? new GetProfileAvailableSoftwareSourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfileAvailableSoftwareSourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetProfileAvailableSoftwareSourcesFilterArgs>? _filters;
        public List<Inputs.GetProfileAvailableSoftwareSourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProfileAvailableSoftwareSourcesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
        /// </summary>
        [Input("profileId", required: true)]
        public string ProfileId { get; set; } = null!;

        public GetProfileAvailableSoftwareSourcesArgs()
        {
        }
        public static new GetProfileAvailableSoftwareSourcesArgs Empty => new GetProfileAvailableSoftwareSourcesArgs();
    }

    public sealed class GetProfileAvailableSoftwareSourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetProfileAvailableSoftwareSourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetProfileAvailableSoftwareSourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProfileAvailableSoftwareSourcesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile.
        /// </summary>
        [Input("profileId", required: true)]
        public Input<string> ProfileId { get; set; } = null!;

        public GetProfileAvailableSoftwareSourcesInvokeArgs()
        {
        }
        public static new GetProfileAvailableSoftwareSourcesInvokeArgs Empty => new GetProfileAvailableSoftwareSourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfileAvailableSoftwareSourcesResult
    {
        /// <summary>
        /// The list of available_software_source_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult> AvailableSoftwareSourceCollections;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// User-friendly name for the software source.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetProfileAvailableSoftwareSourcesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProfileId;

        [OutputConstructor]
        private GetProfileAvailableSoftwareSourcesResult(
            ImmutableArray<Outputs.GetProfileAvailableSoftwareSourcesAvailableSoftwareSourceCollectionResult> availableSoftwareSourceCollections,

            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetProfileAvailableSoftwareSourcesFilterResult> filters,

            string id,

            string profileId)
        {
            AvailableSoftwareSourceCollections = availableSoftwareSourceCollections;
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Id = id;
            ProfileId = profileId;
        }
    }
}
