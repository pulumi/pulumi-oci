// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetProfiles
    {
        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, status, vendor name, and architecture type.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.OsManagementHub.GetProfiles.Invoke(new()
        ///     {
        ///         ArchType = profileArchType,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = profileDisplayName,
        ///         DisplayNameContains = profileDisplayNameContains,
        ///         IsDefaultProfile = profileIsDefaultProfile,
        ///         IsServiceProvidedProfile = profileIsServiceProvidedProfile,
        ///         OsFamily = profileOsFamily,
        ///         ProfileId = testProfile.Id,
        ///         ProfileTypes = profileProfileType,
        ///         RegistrationTypes = profileRegistrationType,
        ///         State = profileState,
        ///         VendorName = profileVendorName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProfilesResult> InvokeAsync(GetProfilesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfilesResult>("oci:OsManagementHub/getProfiles:getProfiles", args ?? new GetProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, status, vendor name, and architecture type.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.OsManagementHub.GetProfiles.Invoke(new()
        ///     {
        ///         ArchType = profileArchType,
        ///         CompartmentId = compartmentId,
        ///         DisplayNames = profileDisplayName,
        ///         DisplayNameContains = profileDisplayNameContains,
        ///         IsDefaultProfile = profileIsDefaultProfile,
        ///         IsServiceProvidedProfile = profileIsServiceProvidedProfile,
        ///         OsFamily = profileOsFamily,
        ///         ProfileId = testProfile.Id,
        ///         ProfileTypes = profileProfileType,
        ///         RegistrationTypes = profileRegistrationType,
        ///         State = profileState,
        ///         VendorName = profileVendorName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProfilesResult> Invoke(GetProfilesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfilesResult>("oci:OsManagementHub/getProfiles:getProfiles", args ?? new GetProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public string? ArchType { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetProfilesFilterArgs>? _filters;
        public List<Inputs.GetProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A boolean variable that is used to list only the default profile resources.
        /// </summary>
        [Input("isDefaultProfile")]
        public bool? IsDefaultProfile { get; set; }

        /// <summary>
        /// A filter to return only service-provided profiles.
        /// </summary>
        [Input("isServiceProvidedProfile")]
        public bool? IsServiceProvidedProfile { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public string? OsFamily { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile. A filter used to return the specified profile.
        /// </summary>
        [Input("profileId")]
        public string? ProfileId { get; set; }

        [Input("profileTypes")]
        private List<string>? _profileTypes;

        /// <summary>
        /// A filter to return registration profiles that match the given profile type.
        /// </summary>
        public List<string> ProfileTypes
        {
            get => _profileTypes ?? (_profileTypes = new List<string>());
            set => _profileTypes = value;
        }

        [Input("registrationTypes")]
        private List<string>? _registrationTypes;

        /// <summary>
        /// A filter to return profiles that match the given instance type.
        /// </summary>
        public List<string> RegistrationTypes
        {
            get => _registrationTypes ?? (_registrationTypes = new List<string>());
            set => _registrationTypes = value;
        }

        /// <summary>
        /// A filter to return only registration profiles in the given state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given vendor name.
        /// </summary>
        [Input("vendorName")]
        public string? VendorName { get; set; }

        public GetProfilesArgs()
        {
        }
        public static new GetProfilesArgs Empty => new GetProfilesArgs();
    }

    public sealed class GetProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// (Updatable) The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A boolean variable that is used to list only the default profile resources.
        /// </summary>
        [Input("isDefaultProfile")]
        public Input<bool>? IsDefaultProfile { get; set; }

        /// <summary>
        /// A filter to return only service-provided profiles.
        /// </summary>
        [Input("isServiceProvidedProfile")]
        public Input<bool>? IsServiceProvidedProfile { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the registration profile. A filter used to return the specified profile.
        /// </summary>
        [Input("profileId")]
        public Input<string>? ProfileId { get; set; }

        [Input("profileTypes")]
        private InputList<string>? _profileTypes;

        /// <summary>
        /// A filter to return registration profiles that match the given profile type.
        /// </summary>
        public InputList<string> ProfileTypes
        {
            get => _profileTypes ?? (_profileTypes = new InputList<string>());
            set => _profileTypes = value;
        }

        [Input("registrationTypes")]
        private InputList<string>? _registrationTypes;

        /// <summary>
        /// A filter to return profiles that match the given instance type.
        /// </summary>
        public InputList<string> RegistrationTypes
        {
            get => _registrationTypes ?? (_registrationTypes = new InputList<string>());
            set => _registrationTypes = value;
        }

        /// <summary>
        /// A filter to return only registration profiles in the given state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given vendor name.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public GetProfilesInvokeArgs()
        {
        }
        public static new GetProfilesInvokeArgs Empty => new GetProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfilesResult
    {
        /// <summary>
        /// The architecture type.
        /// </summary>
        public readonly string? ArchType;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the registration profile.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the profile is set as the default. There is exactly one default profile for a specified architecture, OS family, registration type, and vendor. When registering an instance with the corresonding characteristics, the default profile is used, unless another profile is specified.
        /// </summary>
        public readonly bool? IsDefaultProfile;
        /// <summary>
        /// Indicates if the profile was created by the service. OS Management Hub provides a limited set of standardized profiles that can be used to register Autonomous Linux or Windows instances.
        /// </summary>
        public readonly bool? IsServiceProvidedProfile;
        /// <summary>
        /// The operating system family.
        /// </summary>
        public readonly string? OsFamily;
        /// <summary>
        /// The list of profile_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfilesProfileCollectionResult> ProfileCollections;
        public readonly string? ProfileId;
        /// <summary>
        /// The type of profile.
        /// </summary>
        public readonly ImmutableArray<string> ProfileTypes;
        /// <summary>
        /// The type of instance to register.
        /// </summary>
        public readonly ImmutableArray<string> RegistrationTypes;
        /// <summary>
        /// The current state of the registration profile.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The vendor of the operating system for the instance.
        /// </summary>
        public readonly string? VendorName;

        [OutputConstructor]
        private GetProfilesResult(
            string? archType,

            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetProfilesFilterResult> filters,

            string id,

            bool? isDefaultProfile,

            bool? isServiceProvidedProfile,

            string? osFamily,

            ImmutableArray<Outputs.GetProfilesProfileCollectionResult> profileCollections,

            string? profileId,

            ImmutableArray<string> profileTypes,

            ImmutableArray<string> registrationTypes,

            string? state,

            string? vendorName)
        {
            ArchType = archType;
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Id = id;
            IsDefaultProfile = isDefaultProfile;
            IsServiceProvidedProfile = isServiceProvidedProfile;
            OsFamily = osFamily;
            ProfileCollections = profileCollections;
            ProfileId = profileId;
            ProfileTypes = profileTypes;
            RegistrationTypes = registrationTypes;
            State = state;
            VendorName = vendorName;
        }
    }
}
