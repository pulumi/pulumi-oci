// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetProfiles
    {
        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, status, vendor name, and architecture type.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.OsManagementHub.GetProfiles.Invoke(new()
        ///     {
        ///         ArchType = @var.Profile_arch_type,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayNames = @var.Profile_display_name,
        ///         DisplayNameContains = @var.Profile_display_name_contains,
        ///         OsFamily = @var.Profile_os_family,
        ///         ProfileId = oci_os_management_hub_profile.Test_profile.Id,
        ///         ProfileTypes = @var.Profile_profile_type,
        ///         State = @var.Profile_state,
        ///         VendorName = @var.Profile_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProfilesResult> InvokeAsync(GetProfilesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProfilesResult>("oci:OsManagementHub/getProfiles:getProfiles", args ?? new GetProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, status, vendor name, and architecture type.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProfiles = Oci.OsManagementHub.GetProfiles.Invoke(new()
        ///     {
        ///         ArchType = @var.Profile_arch_type,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayNames = @var.Profile_display_name,
        ///         DisplayNameContains = @var.Profile_display_name_contains,
        ///         OsFamily = @var.Profile_os_family,
        ///         ProfileId = oci_os_management_hub_profile.Test_profile.Id,
        ///         ProfileTypes = @var.Profile_profile_type,
        ///         State = @var.Profile_state,
        ///         VendorName = @var.Profile_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProfilesResult> Invoke(GetProfilesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProfilesResult>("oci:OsManagementHub/getProfiles:getProfiles", args ?? new GetProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProfilesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public string? ArchType { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private List<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public List<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new List<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private List<Inputs.GetProfilesFilterArgs>? _filters;
        public List<Inputs.GetProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only profiles that match the given osFamily.
        /// </summary>
        [Input("osFamily")]
        public string? OsFamily { get; set; }

        /// <summary>
        /// The OCID of the registration profile.
        /// </summary>
        [Input("profileId")]
        public string? ProfileId { get; set; }

        [Input("profileTypes")]
        private List<string>? _profileTypes;

        /// <summary>
        /// A filter to return registration profiles that match the given profileType.
        /// </summary>
        public List<string> ProfileTypes
        {
            get => _profileTypes ?? (_profileTypes = new List<string>());
            set => _profileTypes = value;
        }

        /// <summary>
        /// A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only profiles that match the given vendorName.
        /// </summary>
        [Input("vendorName")]
        public string? VendorName { get; set; }

        public GetProfilesArgs()
        {
        }
        public static new GetProfilesArgs Empty => new GetProfilesArgs();
    }

    public sealed class GetProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only profiles that match the given archType.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNames")]
        private InputList<string>? _displayNames;

        /// <summary>
        /// A filter to return resources that match the given display names.
        /// </summary>
        public InputList<string> DisplayNames
        {
            get => _displayNames ?? (_displayNames = new InputList<string>());
            set => _displayNames = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only profiles that match the given osFamily.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The OCID of the registration profile.
        /// </summary>
        [Input("profileId")]
        public Input<string>? ProfileId { get; set; }

        [Input("profileTypes")]
        private InputList<string>? _profileTypes;

        /// <summary>
        /// A filter to return registration profiles that match the given profileType.
        /// </summary>
        public InputList<string> ProfileTypes
        {
            get => _profileTypes ?? (_profileTypes = new InputList<string>());
            set => _profileTypes = value;
        }

        /// <summary>
        /// A filter to return only registration profile whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only profiles that match the given vendorName.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public GetProfilesInvokeArgs()
        {
        }
        public static new GetProfilesInvokeArgs Empty => new GetProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProfilesResult
    {
        /// <summary>
        /// The architecture type.
        /// </summary>
        public readonly string? ArchType;
        /// <summary>
        /// The OCID of the tenancy containing the registration profile.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly string? DisplayNameContains;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly ImmutableArray<string> DisplayNames;
        public readonly ImmutableArray<Outputs.GetProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The operating system family.
        /// </summary>
        public readonly string? OsFamily;
        /// <summary>
        /// The list of profile_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProfilesProfileCollectionResult> ProfileCollections;
        public readonly string? ProfileId;
        /// <summary>
        /// The type of Profile. One of SOFTWARESOURCE, GROUP or LIFECYCLE.
        /// </summary>
        public readonly ImmutableArray<string> ProfileTypes;
        /// <summary>
        /// The current state of the registration profile.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The software source vendor name.
        /// </summary>
        public readonly string? VendorName;

        [OutputConstructor]
        private GetProfilesResult(
            string? archType,

            string? compartmentId,

            string? displayNameContains,

            ImmutableArray<string> displayNames,

            ImmutableArray<Outputs.GetProfilesFilterResult> filters,

            string id,

            string? osFamily,

            ImmutableArray<Outputs.GetProfilesProfileCollectionResult> profileCollections,

            string? profileId,

            ImmutableArray<string> profileTypes,

            string? state,

            string? vendorName)
        {
            ArchType = archType;
            CompartmentId = compartmentId;
            DisplayNameContains = displayNameContains;
            DisplayNames = displayNames;
            Filters = filters;
            Id = id;
            OsFamily = osFamily;
            ProfileCollections = profileCollections;
            ProfileId = profileId;
            ProfileTypes = profileTypes;
            State = state;
            VendorName = vendorName;
        }
    }
}
