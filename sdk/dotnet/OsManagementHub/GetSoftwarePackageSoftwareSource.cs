// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwarePackageSoftwareSource
    {
        /// <summary>
        /// This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the software sources in the tenancy that contain the software package. Filter the list against a
        /// variety of criteria including but not limited to its name, type, architecture, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwarePackageSoftwareSource = Oci.OsManagementHub.GetSoftwarePackageSoftwareSource.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         SoftwarePackageName = testSoftwarePackage.Name,
        ///         ArchTypes = softwarePackageSoftwareSourceArchType,
        ///         Availabilities = softwarePackageSoftwareSourceAvailability,
        ///         AvailabilityAnywheres = softwarePackageSoftwareSourceAvailabilityAnywhere,
        ///         AvailabilityAtOcis = softwarePackageSoftwareSourceAvailabilityAtOci,
        ///         DisplayName = softwarePackageSoftwareSourceDisplayName,
        ///         DisplayNameContains = softwarePackageSoftwareSourceDisplayNameContains,
        ///         OsFamilies = softwarePackageSoftwareSourceOsFamily,
        ///         SoftwareSourceTypes = softwarePackageSoftwareSourceSoftwareSourceType,
        ///         States = softwarePackageSoftwareSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwarePackageSoftwareSourceResult> InvokeAsync(GetSoftwarePackageSoftwareSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwarePackageSoftwareSourceResult>("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", args ?? new GetSoftwarePackageSoftwareSourceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the software sources in the tenancy that contain the software package. Filter the list against a
        /// variety of criteria including but not limited to its name, type, architecture, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwarePackageSoftwareSource = Oci.OsManagementHub.GetSoftwarePackageSoftwareSource.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         SoftwarePackageName = testSoftwarePackage.Name,
        ///         ArchTypes = softwarePackageSoftwareSourceArchType,
        ///         Availabilities = softwarePackageSoftwareSourceAvailability,
        ///         AvailabilityAnywheres = softwarePackageSoftwareSourceAvailabilityAnywhere,
        ///         AvailabilityAtOcis = softwarePackageSoftwareSourceAvailabilityAtOci,
        ///         DisplayName = softwarePackageSoftwareSourceDisplayName,
        ///         DisplayNameContains = softwarePackageSoftwareSourceDisplayNameContains,
        ///         OsFamilies = softwarePackageSoftwareSourceOsFamily,
        ///         SoftwareSourceTypes = softwarePackageSoftwareSourceSoftwareSourceType,
        ///         States = softwarePackageSoftwareSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwarePackageSoftwareSourceResult> Invoke(GetSoftwarePackageSoftwareSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwarePackageSoftwareSourceResult>("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", args ?? new GetSoftwarePackageSoftwareSourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Package Software Source in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists the software sources in the tenancy that contain the software package. Filter the list against a
        /// variety of criteria including but not limited to its name, type, architecture, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwarePackageSoftwareSource = Oci.OsManagementHub.GetSoftwarePackageSoftwareSource.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         SoftwarePackageName = testSoftwarePackage.Name,
        ///         ArchTypes = softwarePackageSoftwareSourceArchType,
        ///         Availabilities = softwarePackageSoftwareSourceAvailability,
        ///         AvailabilityAnywheres = softwarePackageSoftwareSourceAvailabilityAnywhere,
        ///         AvailabilityAtOcis = softwarePackageSoftwareSourceAvailabilityAtOci,
        ///         DisplayName = softwarePackageSoftwareSourceDisplayName,
        ///         DisplayNameContains = softwarePackageSoftwareSourceDisplayNameContains,
        ///         OsFamilies = softwarePackageSoftwareSourceOsFamily,
        ///         SoftwareSourceTypes = softwarePackageSoftwareSourceSoftwareSourceType,
        ///         States = softwarePackageSoftwareSourceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwarePackageSoftwareSourceResult> Invoke(GetSoftwarePackageSoftwareSourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwarePackageSoftwareSourceResult>("oci:OsManagementHub/getSoftwarePackageSoftwareSource:getSoftwarePackageSoftwareSource", args ?? new GetSoftwarePackageSoftwareSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwarePackageSoftwareSourceArgs : global::Pulumi.InvokeArgs
    {
        [Input("archTypes")]
        private List<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public List<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new List<string>());
            set => _archTypes = value;
        }

        [Input("availabilities")]
        private List<string>? _availabilities;

        /// <summary>
        /// The availabilities of the software source in a non-OCI environment for a tenancy.
        /// </summary>
        public List<string> Availabilities
        {
            get => _availabilities ?? (_availabilities = new List<string>());
            set => _availabilities = value;
        }

        [Input("availabilityAnywheres")]
        private List<string>? _availabilityAnywheres;

        /// <summary>
        /// The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
        /// </summary>
        public List<string> AvailabilityAnywheres
        {
            get => _availabilityAnywheres ?? (_availabilityAnywheres = new List<string>());
            set => _availabilityAnywheres = value;
        }

        [Input("availabilityAtOcis")]
        private List<string>? _availabilityAtOcis;

        /// <summary>
        /// The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        /// </summary>
        public List<string> AvailabilityAtOcis
        {
            get => _availabilityAtOcis ?? (_availabilityAtOcis = new List<string>());
            set => _availabilityAtOcis = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetSoftwarePackageSoftwareSourceFilterArgs>? _filters;
        public List<Inputs.GetSoftwarePackageSoftwareSourceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwarePackageSoftwareSourceFilterArgs>());
            set => _filters = value;
        }

        [Input("osFamilies")]
        private List<string>? _osFamilies;

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        public List<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new List<string>());
            set => _osFamilies = value;
        }

        /// <summary>
        /// The name of the software package.
        /// </summary>
        [Input("softwarePackageName", required: true)]
        public string SoftwarePackageName { get; set; } = null!;

        [Input("softwareSourceTypes")]
        private List<string>? _softwareSourceTypes;

        /// <summary>
        /// The type of the software source.
        /// </summary>
        public List<string> SoftwareSourceTypes
        {
            get => _softwareSourceTypes ?? (_softwareSourceTypes = new List<string>());
            set => _softwareSourceTypes = value;
        }

        [Input("states")]
        private List<string>? _states;

        /// <summary>
        /// A filter to return only software sources whose state matches the given state.
        /// </summary>
        public List<string> States
        {
            get => _states ?? (_states = new List<string>());
            set => _states = value;
        }

        public GetSoftwarePackageSoftwareSourceArgs()
        {
        }
        public static new GetSoftwarePackageSoftwareSourceArgs Empty => new GetSoftwarePackageSoftwareSourceArgs();
    }

    public sealed class GetSoftwarePackageSoftwareSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("archTypes")]
        private InputList<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public InputList<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new InputList<string>());
            set => _archTypes = value;
        }

        [Input("availabilities")]
        private InputList<string>? _availabilities;

        /// <summary>
        /// The availabilities of the software source in a non-OCI environment for a tenancy.
        /// </summary>
        public InputList<string> Availabilities
        {
            get => _availabilities ?? (_availabilities = new InputList<string>());
            set => _availabilities = value;
        }

        [Input("availabilityAnywheres")]
        private InputList<string>? _availabilityAnywheres;

        /// <summary>
        /// The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
        /// </summary>
        public InputList<string> AvailabilityAnywheres
        {
            get => _availabilityAnywheres ?? (_availabilityAnywheres = new InputList<string>());
            set => _availabilityAnywheres = value;
        }

        [Input("availabilityAtOcis")]
        private InputList<string>? _availabilityAtOcis;

        /// <summary>
        /// The availabilities of the software source in an Oracle Cloud Infrastructure environment for a tenancy.
        /// </summary>
        public InputList<string> AvailabilityAtOcis
        {
            get => _availabilityAtOcis ?? (_availabilityAtOcis = new InputList<string>());
            set => _availabilityAtOcis = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSoftwarePackageSoftwareSourceFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwarePackageSoftwareSourceFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwarePackageSoftwareSourceFilterInputArgs>());
            set => _filters = value;
        }

        [Input("osFamilies")]
        private InputList<string>? _osFamilies;

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        public InputList<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new InputList<string>());
            set => _osFamilies = value;
        }

        /// <summary>
        /// The name of the software package.
        /// </summary>
        [Input("softwarePackageName", required: true)]
        public Input<string> SoftwarePackageName { get; set; } = null!;

        [Input("softwareSourceTypes")]
        private InputList<string>? _softwareSourceTypes;

        /// <summary>
        /// The type of the software source.
        /// </summary>
        public InputList<string> SoftwareSourceTypes
        {
            get => _softwareSourceTypes ?? (_softwareSourceTypes = new InputList<string>());
            set => _softwareSourceTypes = value;
        }

        [Input("states")]
        private InputList<string>? _states;

        /// <summary>
        /// A filter to return only software sources whose state matches the given state.
        /// </summary>
        public InputList<string> States
        {
            get => _states ?? (_states = new InputList<string>());
            set => _states = value;
        }

        public GetSoftwarePackageSoftwareSourceInvokeArgs()
        {
        }
        public static new GetSoftwarePackageSoftwareSourceInvokeArgs Empty => new GetSoftwarePackageSoftwareSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwarePackageSoftwareSourceResult
    {
        /// <summary>
        /// The architecture type supported by the software source.
        /// </summary>
        public readonly ImmutableArray<string> ArchTypes;
        /// <summary>
        /// Availability of the software source (for non-OCI environments).
        /// </summary>
        public readonly ImmutableArray<string> Availabilities;
        public readonly ImmutableArray<string> AvailabilityAnywheres;
        /// <summary>
        /// Availability of the software source (for Oracle Cloud Infrastructure environments).
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityAtOcis;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// User-friendly name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DisplayNameContains;
        public readonly ImmutableArray<Outputs.GetSoftwarePackageSoftwareSourceFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OS family the software source belongs to.
        /// </summary>
        public readonly ImmutableArray<string> OsFamilies;
        public readonly string SoftwarePackageName;
        /// <summary>
        /// The list of software_source_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionResult> SoftwareSourceCollections;
        /// <summary>
        /// Type of software source.
        /// </summary>
        public readonly ImmutableArray<string> SoftwareSourceTypes;
        /// <summary>
        /// The current state of the software source.
        /// </summary>
        public readonly ImmutableArray<string> States;

        [OutputConstructor]
        private GetSoftwarePackageSoftwareSourceResult(
            ImmutableArray<string> archTypes,

            ImmutableArray<string> availabilities,

            ImmutableArray<string> availabilityAnywheres,

            ImmutableArray<string> availabilityAtOcis,

            string compartmentId,

            string? displayName,

            string? displayNameContains,

            ImmutableArray<Outputs.GetSoftwarePackageSoftwareSourceFilterResult> filters,

            string id,

            ImmutableArray<string> osFamilies,

            string softwarePackageName,

            ImmutableArray<Outputs.GetSoftwarePackageSoftwareSourceSoftwareSourceCollectionResult> softwareSourceCollections,

            ImmutableArray<string> softwareSourceTypes,

            ImmutableArray<string> states)
        {
            ArchTypes = archTypes;
            Availabilities = availabilities;
            AvailabilityAnywheres = availabilityAnywheres;
            AvailabilityAtOcis = availabilityAtOcis;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            DisplayNameContains = displayNameContains;
            Filters = filters;
            Id = id;
            OsFamilies = osFamilies;
            SoftwarePackageName = softwarePackageName;
            SoftwareSourceCollections = softwareSourceCollections;
            SoftwareSourceTypes = softwareSourceTypes;
            States = states;
        }
    }
}
