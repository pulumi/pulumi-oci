// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwarePackages
    {
        /// <summary>
        /// This data source provides the list of Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
        /// including but not limited to its name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwarePackages = Oci.OsManagementHub.GetSoftwarePackages.Invoke(new()
        ///     {
        ///         Architecture = softwarePackageArchitecture,
        ///         DisplayName = softwarePackageDisplayName,
        ///         DisplayNameContains = softwarePackageDisplayNameContains,
        ///         IsLatest = softwarePackageIsLatest,
        ///         OsFamily = softwarePackageOsFamily,
        ///         Version = softwarePackageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwarePackagesResult> InvokeAsync(GetSoftwarePackagesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwarePackagesResult>("oci:OsManagementHub/getSoftwarePackages:getSoftwarePackages", args ?? new GetSoftwarePackagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
        /// including but not limited to its name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwarePackages = Oci.OsManagementHub.GetSoftwarePackages.Invoke(new()
        ///     {
        ///         Architecture = softwarePackageArchitecture,
        ///         DisplayName = softwarePackageDisplayName,
        ///         DisplayNameContains = softwarePackageDisplayNameContains,
        ///         IsLatest = softwarePackageIsLatest,
        ///         OsFamily = softwarePackageOsFamily,
        ///         Version = softwarePackageVersion,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwarePackagesResult> Invoke(GetSoftwarePackagesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwarePackagesResult>("oci:OsManagementHub/getSoftwarePackages:getSoftwarePackages", args ?? new GetSoftwarePackagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwarePackagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return software packages that match the given architecture.
        /// </summary>
        [Input("architecture")]
        public string? Architecture { get; set; }

        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetSoftwarePackagesFilterArgs>? _filters;
        public List<Inputs.GetSoftwarePackagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwarePackagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        /// </summary>
        [Input("isLatest")]
        public bool? IsLatest { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public string? OsFamily { get; set; }

        /// <summary>
        /// A filter to return software packages that match the given version.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetSoftwarePackagesArgs()
        {
        }
        public static new GetSoftwarePackagesArgs Empty => new GetSoftwarePackagesArgs();
    }

    public sealed class GetSoftwarePackagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return software packages that match the given architecture.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// A filter to return resources that match the given user-friendly name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSoftwarePackagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwarePackagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwarePackagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
        /// </summary>
        [Input("isLatest")]
        public Input<bool>? IsLatest { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given operating system family.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// A filter to return software packages that match the given version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetSoftwarePackagesInvokeArgs()
        {
        }
        public static new GetSoftwarePackagesInvokeArgs Empty => new GetSoftwarePackagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwarePackagesResult
    {
        /// <summary>
        /// The architecture for which this software was built
        /// </summary>
        public readonly string? Architecture;
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DisplayNameContains;
        public readonly ImmutableArray<Outputs.GetSoftwarePackagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether this package is the latest version.
        /// </summary>
        public readonly bool? IsLatest;
        public readonly string? OsFamily;
        /// <summary>
        /// The list of software_package_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwarePackagesSoftwarePackageCollectionResult> SoftwarePackageCollections;
        /// <summary>
        /// Version of the package.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetSoftwarePackagesResult(
            string? architecture,

            string? displayName,

            string? displayNameContains,

            ImmutableArray<Outputs.GetSoftwarePackagesFilterResult> filters,

            string id,

            bool? isLatest,

            string? osFamily,

            ImmutableArray<Outputs.GetSoftwarePackagesSoftwarePackageCollectionResult> softwarePackageCollections,

            string? version)
        {
            Architecture = architecture;
            DisplayName = displayName;
            DisplayNameContains = displayNameContains;
            Filters = filters;
            Id = id;
            IsLatest = isLatest;
            OsFamily = osFamily;
            SoftwarePackageCollections = softwarePackageCollections;
            Version = version;
        }
    }
}
