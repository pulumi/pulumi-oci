// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSource
    {
        /// <summary>
        /// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Returns information about the specified software source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSource = Oci.OsManagementHub.GetSoftwareSource.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourceResult> InvokeAsync(GetSoftwareSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceResult>("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args ?? new GetSoftwareSourceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Returns information about the specified software source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSource = Oci.OsManagementHub.GetSoftwareSource.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourceResult> Invoke(GetSoftwareSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceResult>("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args ?? new GetSoftwareSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceArgs()
        {
        }
        public static new GetSoftwareSourceArgs Empty => new GetSoftwareSourceArgs();
    }

    public sealed class GetSoftwareSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceInvokeArgs()
        {
        }
        public static new GetSoftwareSourceInvokeArgs Empty => new GetSoftwareSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourceResult
    {
        /// <summary>
        /// The architecture type supported by the software source.
        /// </summary>
        public readonly string ArchType;
        /// <summary>
        /// Availability of the software source (for non-OCI environments).
        /// </summary>
        public readonly string Availability;
        /// <summary>
        /// Availability of the software source (for Oracle Cloud Infrastructure environments).
        /// </summary>
        public readonly string AvailabilityAtOci;
        /// <summary>
        /// The yum repository checksum type used by this software source.
        /// </summary>
        public readonly string ChecksumType;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Provides the information used to apply filters to a vendor software source to create or update a custom software source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceCustomSoftwareSourceFilterResult> CustomSoftwareSourceFilters;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// User-specified description for the software source.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User-friendly name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Fingerprint of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyFingerprint;
        /// <summary>
        /// ID of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyId;
        /// <summary>
        /// URL of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyUrl;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
        /// </summary>
        public readonly bool IsAutoResolveDependencies;
        /// <summary>
        /// Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
        /// </summary>
        public readonly bool IsAutomaticallyUpdated;
        /// <summary>
        /// Indicates whether the service should create the software source from a list of packages provided by the user.
        /// </summary>
        public readonly bool IsCreatedFromPackageList;
        /// <summary>
        /// Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
        /// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
        /// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
        /// * For a package filter that does not specify a version, this will include only the latest available version of the package.
        /// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
        /// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
        /// </summary>
        public readonly bool IsLatestContentOnly;
        /// <summary>
        /// Indicates whether the software source is required for the Autonomous Linux service.
        /// </summary>
        public readonly bool IsMandatoryForAutonomousLinux;
        /// <summary>
        /// This property applies only to replicated vendor software sources. This is the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment.
        /// </summary>
        public readonly string OriginSoftwareSourceId;
        /// <summary>
        /// The OS family the software source belongs to.
        /// </summary>
        public readonly string OsFamily;
        /// <summary>
        /// Number of packages the software source contains.
        /// </summary>
        public readonly string PackageCount;
        /// <summary>
        /// The packages in the software source.
        /// </summary>
        public readonly ImmutableArray<string> Packages;
        /// <summary>
        /// The repository ID for the software source.
        /// </summary>
        public readonly string RepoId;
        /// <summary>
        /// The size of the software source in gigabytes (GB).
        /// </summary>
        public readonly double Size;
        public readonly string SoftwareSourceId;
        /// <summary>
        /// Type of software source.
        /// </summary>
        public readonly string SoftwareSourceType;
        /// <summary>
        /// The version to assign to this custom software source.
        /// </summary>
        public readonly string SoftwareSourceVersion;
        /// <summary>
        /// The current state of the software source.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/&lt;repoId&gt;'.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        public readonly string VendorName;
        /// <summary>
        /// List of vendor software sources that are used for the basis of the versioned custom software source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceVendorSoftwareSourceResult> VendorSoftwareSources;

        [OutputConstructor]
        private GetSoftwareSourceResult(
            string archType,

            string availability,

            string availabilityAtOci,

            string checksumType,

            string compartmentId,

            ImmutableArray<Outputs.GetSoftwareSourceCustomSoftwareSourceFilterResult> customSoftwareSourceFilters,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string gpgKeyFingerprint,

            string gpgKeyId,

            string gpgKeyUrl,

            string id,

            bool isAutoResolveDependencies,

            bool isAutomaticallyUpdated,

            bool isCreatedFromPackageList,

            bool isLatestContentOnly,

            bool isMandatoryForAutonomousLinux,

            string originSoftwareSourceId,

            string osFamily,

            string packageCount,

            ImmutableArray<string> packages,

            string repoId,

            double size,

            string softwareSourceId,

            string softwareSourceType,

            string softwareSourceVersion,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string url,

            string vendorName,

            ImmutableArray<Outputs.GetSoftwareSourceVendorSoftwareSourceResult> vendorSoftwareSources)
        {
            ArchType = archType;
            Availability = availability;
            AvailabilityAtOci = availabilityAtOci;
            ChecksumType = checksumType;
            CompartmentId = compartmentId;
            CustomSoftwareSourceFilters = customSoftwareSourceFilters;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            GpgKeyFingerprint = gpgKeyFingerprint;
            GpgKeyId = gpgKeyId;
            GpgKeyUrl = gpgKeyUrl;
            Id = id;
            IsAutoResolveDependencies = isAutoResolveDependencies;
            IsAutomaticallyUpdated = isAutomaticallyUpdated;
            IsCreatedFromPackageList = isCreatedFromPackageList;
            IsLatestContentOnly = isLatestContentOnly;
            IsMandatoryForAutonomousLinux = isMandatoryForAutonomousLinux;
            OriginSoftwareSourceId = originSoftwareSourceId;
            OsFamily = osFamily;
            PackageCount = packageCount;
            Packages = packages;
            RepoId = repoId;
            Size = size;
            SoftwareSourceId = softwareSourceId;
            SoftwareSourceType = softwareSourceType;
            SoftwareSourceVersion = softwareSourceVersion;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            Url = url;
            VendorName = vendorName;
            VendorSoftwareSources = vendorSoftwareSources;
        }
    }
}
