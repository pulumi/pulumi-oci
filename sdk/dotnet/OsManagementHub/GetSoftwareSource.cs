// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSource
    {
        /// <summary>
        /// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Gets information about the specified software source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSource = Oci.OsManagementHub.GetSoftwareSource.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourceResult> InvokeAsync(GetSoftwareSourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceResult>("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args ?? new GetSoftwareSourceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Gets information about the specified software source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSource = Oci.OsManagementHub.GetSoftwareSource.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSourceOciOsManagementHubSoftwareSource.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourceResult> Invoke(GetSoftwareSourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceResult>("oci:OsManagementHub/getSoftwareSource:getSoftwareSource", args ?? new GetSoftwareSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceArgs()
        {
        }
        public static new GetSoftwareSourceArgs Empty => new GetSoftwareSourceArgs();
    }

    public sealed class GetSoftwareSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceInvokeArgs()
        {
        }
        public static new GetSoftwareSourceInvokeArgs Empty => new GetSoftwareSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourceResult
    {
        /// <summary>
        /// The architecture type supported by the software source.
        /// </summary>
        public readonly string ArchType;
        /// <summary>
        /// Possible availabilities of a software source.
        /// </summary>
        public readonly string Availability;
        /// <summary>
        /// The yum repository checksum type used by this software source.
        /// </summary>
        public readonly string ChecksumType;
        /// <summary>
        /// The OCID of the tenancy containing the software source.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Used to apply filters to a VendorSoftwareSource to create/update CustomSoftwareSources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceCustomSoftwareSourceFilterResult> CustomSoftwareSourceFilters;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Information specified by the user about the software source.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User friendly name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Fingerprint of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyFingerprint;
        /// <summary>
        /// ID of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyId;
        /// <summary>
        /// URL of the GPG key for this software source.
        /// </summary>
        public readonly string GpgKeyUrl;
        /// <summary>
        /// The OCID of the resource that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether service should automatically update the custom software source for the user.
        /// </summary>
        public readonly bool IsAutomaticallyUpdated;
        /// <summary>
        /// The OS family the software source belongs to.
        /// </summary>
        public readonly string OsFamily;
        /// <summary>
        /// Number of packages.
        /// </summary>
        public readonly string PackageCount;
        /// <summary>
        /// The Repo ID for the software source.
        /// </summary>
        public readonly string RepoId;
        public readonly string SoftwareSourceId;
        /// <summary>
        /// Type of the software source.
        /// </summary>
        public readonly string SoftwareSourceType;
        /// <summary>
        /// The version to assign to this custom software source.
        /// </summary>
        public readonly string SoftwareSourceVersion;
        /// <summary>
        /// The current state of the software source.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The date and time the software source was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// URL for the repository.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        public readonly string VendorName;
        /// <summary>
        /// List of vendor software sources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceVendorSoftwareSourceResult> VendorSoftwareSources;

        [OutputConstructor]
        private GetSoftwareSourceResult(
            string archType,

            string availability,

            string checksumType,

            string compartmentId,

            ImmutableArray<Outputs.GetSoftwareSourceCustomSoftwareSourceFilterResult> customSoftwareSourceFilters,

            ImmutableDictionary<string, object> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string gpgKeyFingerprint,

            string gpgKeyId,

            string gpgKeyUrl,

            string id,

            bool isAutomaticallyUpdated,

            string osFamily,

            string packageCount,

            string repoId,

            string softwareSourceId,

            string softwareSourceType,

            string softwareSourceVersion,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string url,

            string vendorName,

            ImmutableArray<Outputs.GetSoftwareSourceVendorSoftwareSourceResult> vendorSoftwareSources)
        {
            ArchType = archType;
            Availability = availability;
            ChecksumType = checksumType;
            CompartmentId = compartmentId;
            CustomSoftwareSourceFilters = customSoftwareSourceFilters;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            GpgKeyFingerprint = gpgKeyFingerprint;
            GpgKeyId = gpgKeyId;
            GpgKeyUrl = gpgKeyUrl;
            Id = id;
            IsAutomaticallyUpdated = isAutomaticallyUpdated;
            OsFamily = osFamily;
            PackageCount = packageCount;
            RepoId = repoId;
            SoftwareSourceId = softwareSourceId;
            SoftwareSourceType = softwareSourceType;
            SoftwareSourceVersion = softwareSourceVersion;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            Url = url;
            VendorName = vendorName;
            VendorSoftwareSources = vendorSoftwareSources;
        }
    }
}
