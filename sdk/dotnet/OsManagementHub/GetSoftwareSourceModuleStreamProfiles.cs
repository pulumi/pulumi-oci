// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSourceModuleStreamProfiles
    {
        /// <summary>
        /// This data source provides the list of Software Source Module Stream Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists module stream profiles from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of 
        /// criteria including but not limited to its module name, stream name, and profile name.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceModuleStreamProfiles = Oci.OsManagementHub.GetSoftwareSourceModuleStreamProfiles.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         ModuleName = softwareSourceModuleStreamProfileModuleName,
        ///         Name = softwareSourceModuleStreamProfileName,
        ///         StreamName = testStream.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourceModuleStreamProfilesResult> InvokeAsync(GetSoftwareSourceModuleStreamProfilesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceModuleStreamProfilesResult>("oci:OsManagementHub/getSoftwareSourceModuleStreamProfiles:getSoftwareSourceModuleStreamProfiles", args ?? new GetSoftwareSourceModuleStreamProfilesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Module Stream Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists module stream profiles from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of 
        /// criteria including but not limited to its module name, stream name, and profile name.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceModuleStreamProfiles = Oci.OsManagementHub.GetSoftwareSourceModuleStreamProfiles.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         ModuleName = softwareSourceModuleStreamProfileModuleName,
        ///         Name = softwareSourceModuleStreamProfileName,
        ///         StreamName = testStream.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourceModuleStreamProfilesResult> Invoke(GetSoftwareSourceModuleStreamProfilesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceModuleStreamProfilesResult>("oci:OsManagementHub/getSoftwareSourceModuleStreamProfiles:getSoftwareSourceModuleStreamProfiles", args ?? new GetSoftwareSourceModuleStreamProfilesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Module Stream Profiles in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists module stream profiles from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of 
        /// criteria including but not limited to its module name, stream name, and profile name.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceModuleStreamProfiles = Oci.OsManagementHub.GetSoftwareSourceModuleStreamProfiles.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         ModuleName = softwareSourceModuleStreamProfileModuleName,
        ///         Name = softwareSourceModuleStreamProfileName,
        ///         StreamName = testStream.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourceModuleStreamProfilesResult> Invoke(GetSoftwareSourceModuleStreamProfilesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceModuleStreamProfilesResult>("oci:OsManagementHub/getSoftwareSourceModuleStreamProfiles:getSoftwareSourceModuleStreamProfiles", args ?? new GetSoftwareSourceModuleStreamProfilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceModuleStreamProfilesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSoftwareSourceModuleStreamProfilesFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourceModuleStreamProfilesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourceModuleStreamProfilesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of a module. This parameter is required if a streamName is specified.
        /// </summary>
        [Input("moduleName")]
        public string? ModuleName { get; set; }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        /// <summary>
        /// The name of the module stream. This parameter is required if a profile name is specified.
        /// </summary>
        [Input("streamName")]
        public string? StreamName { get; set; }

        public GetSoftwareSourceModuleStreamProfilesArgs()
        {
        }
        public static new GetSoftwareSourceModuleStreamProfilesArgs Empty => new GetSoftwareSourceModuleStreamProfilesArgs();
    }

    public sealed class GetSoftwareSourceModuleStreamProfilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourceModuleStreamProfilesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourceModuleStreamProfilesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourceModuleStreamProfilesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of a module. This parameter is required if a streamName is specified.
        /// </summary>
        [Input("moduleName")]
        public Input<string>? ModuleName { get; set; }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        /// <summary>
        /// The name of the module stream. This parameter is required if a profile name is specified.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        public GetSoftwareSourceModuleStreamProfilesInvokeArgs()
        {
        }
        public static new GetSoftwareSourceModuleStreamProfilesInvokeArgs Empty => new GetSoftwareSourceModuleStreamProfilesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourceModuleStreamProfilesResult
    {
        public readonly ImmutableArray<Outputs.GetSoftwareSourceModuleStreamProfilesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the module that contains the stream profile.
        /// </summary>
        public readonly string? ModuleName;
        /// <summary>
        /// The list of module_stream_profile_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult> ModuleStreamProfileCollections;
        /// <summary>
        /// The name of the profile.
        /// </summary>
        public readonly string? Name;
        public readonly string SoftwareSourceId;
        /// <summary>
        /// The name of the stream that contains the profile.
        /// </summary>
        public readonly string? StreamName;

        [OutputConstructor]
        private GetSoftwareSourceModuleStreamProfilesResult(
            ImmutableArray<Outputs.GetSoftwareSourceModuleStreamProfilesFilterResult> filters,

            string id,

            string? moduleName,

            ImmutableArray<Outputs.GetSoftwareSourceModuleStreamProfilesModuleStreamProfileCollectionResult> moduleStreamProfileCollections,

            string? name,

            string softwareSourceId,

            string? streamName)
        {
            Filters = filters;
            Id = id;
            ModuleName = moduleName;
            ModuleStreamProfileCollections = moduleStreamProfileCollections;
            Name = name;
            SoftwareSourceId = softwareSourceId;
            StreamName = streamName;
        }
    }
}
