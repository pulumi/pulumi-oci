// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSourcePackageGroups
    {
        /// <summary>
        /// This data source provides the list of Software Source Package Groups in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists package groups that associate with the specified software source OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, and package group type.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourcePackageGroups = Oci.OsManagementHub.GetSoftwareSourcePackageGroups.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         CompartmentId = compartmentId,
        ///         GroupTypes = softwareSourcePackageGroupGroupType,
        ///         Name = softwareSourcePackageGroupName,
        ///         NameContains = softwareSourcePackageGroupNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourcePackageGroupsResult> InvokeAsync(GetSoftwareSourcePackageGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourcePackageGroupsResult>("oci:OsManagementHub/getSoftwareSourcePackageGroups:getSoftwareSourcePackageGroups", args ?? new GetSoftwareSourcePackageGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Package Groups in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists package groups that associate with the specified software source OCID. Filter the list against a 
        /// variety of criteria including but not limited to its name, and package group type.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourcePackageGroups = Oci.OsManagementHub.GetSoftwareSourcePackageGroups.Invoke(new()
        ///     {
        ///         SoftwareSourceId = testSoftwareSource.Id,
        ///         CompartmentId = compartmentId,
        ///         GroupTypes = softwareSourcePackageGroupGroupType,
        ///         Name = softwareSourcePackageGroupName,
        ///         NameContains = softwareSourcePackageGroupNameContains,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourcePackageGroupsResult> Invoke(GetSoftwareSourcePackageGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourcePackageGroupsResult>("oci:OsManagementHub/getSoftwareSourcePackageGroups:getSoftwareSourcePackageGroups", args ?? new GetSoftwareSourcePackageGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourcePackageGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetSoftwareSourcePackageGroupsFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourcePackageGroupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourcePackageGroupsFilterArgs>());
            set => _filters = value;
        }

        [Input("groupTypes")]
        private List<string>? _groupTypes;

        /// <summary>
        /// A filter to return only package groups of the specified type.
        /// </summary>
        public List<string> GroupTypes
        {
            get => _groupTypes ?? (_groupTypes = new List<string>());
            set => _groupTypes = value;
        }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the name given.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourcePackageGroupsArgs()
        {
        }
        public static new GetSoftwareSourcePackageGroupsArgs Empty => new GetSoftwareSourcePackageGroupsArgs();
    }

    public sealed class GetSoftwareSourcePackageGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourcePackageGroupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourcePackageGroupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourcePackageGroupsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("groupTypes")]
        private InputList<string>? _groupTypes;

        /// <summary>
        /// A filter to return only package groups of the specified type.
        /// </summary>
        public InputList<string> GroupTypes
        {
            get => _groupTypes ?? (_groupTypes = new InputList<string>());
            set => _groupTypes = value;
        }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the name given.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourcePackageGroupsInvokeArgs()
        {
        }
        public static new GetSoftwareSourcePackageGroupsInvokeArgs Empty => new GetSoftwareSourcePackageGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourcePackageGroupsResult
    {
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetSoftwareSourcePackageGroupsFilterResult> Filters;
        /// <summary>
        /// Indicates if this is a group, category or environment.
        /// </summary>
        public readonly ImmutableArray<string> GroupTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Package group name.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameContains;
        /// <summary>
        /// The list of package_group_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionResult> PackageGroupCollections;
        public readonly string SoftwareSourceId;

        [OutputConstructor]
        private GetSoftwareSourcePackageGroupsResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetSoftwareSourcePackageGroupsFilterResult> filters,

            ImmutableArray<string> groupTypes,

            string id,

            string? name,

            string? nameContains,

            ImmutableArray<Outputs.GetSoftwareSourcePackageGroupsPackageGroupCollectionResult> packageGroupCollections,

            string softwareSourceId)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            GroupTypes = groupTypes;
            Id = id;
            Name = name;
            NameContains = nameContains;
            PackageGroupCollections = packageGroupCollections;
            SoftwareSourceId = softwareSourceId;
        }
    }
}
