// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSourceSoftwarePackages
    {
        /// <summary>
        /// This data source provides the list of Software Source Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software packages in the specified software source.  Filter the list against a variety of criteria 
        /// including but not limited to its name.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceSoftwarePackages = Oci.OsManagementHub.GetSoftwareSourceSoftwarePackages.Invoke(new()
        ///     {
        ///         SoftwareSourceId = oci_os_management_hub_software_source.Test_software_source.Id,
        ///         DisplayName = @var.Software_source_software_package_display_name,
        ///         DisplayNameContains = @var.Software_source_software_package_display_name_contains,
        ///         IsLatest = @var.Software_source_software_package_is_latest,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSoftwareSourceSoftwarePackagesResult> InvokeAsync(GetSoftwareSourceSoftwarePackagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceSoftwarePackagesResult>("oci:OsManagementHub/getSoftwareSourceSoftwarePackages:getSoftwareSourceSoftwarePackages", args ?? new GetSoftwareSourceSoftwarePackagesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Software Packages in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software packages in the specified software source.  Filter the list against a variety of criteria 
        /// including but not limited to its name.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceSoftwarePackages = Oci.OsManagementHub.GetSoftwareSourceSoftwarePackages.Invoke(new()
        ///     {
        ///         SoftwareSourceId = oci_os_management_hub_software_source.Test_software_source.Id,
        ///         DisplayName = @var.Software_source_software_package_display_name,
        ///         DisplayNameContains = @var.Software_source_software_package_display_name_contains,
        ///         IsLatest = @var.Software_source_software_package_is_latest,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSoftwareSourceSoftwarePackagesResult> Invoke(GetSoftwareSourceSoftwarePackagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceSoftwarePackagesResult>("oci:OsManagementHub/getSoftwareSourceSoftwarePackages:getSoftwareSourceSoftwarePackages", args ?? new GetSoftwareSourceSoftwarePackagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceSoftwarePackagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("filters")]
        private List<Inputs.GetSoftwareSourceSoftwarePackagesFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourceSoftwarePackagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourceSoftwarePackagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
        /// </summary>
        [Input("isLatest")]
        public bool? IsLatest { get; set; }

        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public string SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceSoftwarePackagesArgs()
        {
        }
        public static new GetSoftwareSourceSoftwarePackagesArgs Empty => new GetSoftwareSourceSoftwarePackagesArgs();
    }

    public sealed class GetSoftwareSourceSoftwarePackagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourceSoftwarePackagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourceSoftwarePackagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourceSoftwarePackagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A boolean variable that is used to list only the latest versions of packages, module streams, and stream profiles when set to true. All packages, module streams, and stream profiles are returned when set to false.
        /// </summary>
        [Input("isLatest")]
        public Input<bool>? IsLatest { get; set; }

        /// <summary>
        /// The software source OCID.
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        public GetSoftwareSourceSoftwarePackagesInvokeArgs()
        {
        }
        public static new GetSoftwareSourceSoftwarePackagesInvokeArgs Empty => new GetSoftwareSourceSoftwarePackagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourceSoftwarePackagesResult
    {
        /// <summary>
        /// Software source name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DisplayNameContains;
        public readonly ImmutableArray<Outputs.GetSoftwareSourceSoftwarePackagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether this package is the latest version.
        /// </summary>
        public readonly bool? IsLatest;
        /// <summary>
        /// The list of software_package_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult> SoftwarePackageCollections;
        public readonly string SoftwareSourceId;

        [OutputConstructor]
        private GetSoftwareSourceSoftwarePackagesResult(
            string? displayName,

            string? displayNameContains,

            ImmutableArray<Outputs.GetSoftwareSourceSoftwarePackagesFilterResult> filters,

            string id,

            bool? isLatest,

            ImmutableArray<Outputs.GetSoftwareSourceSoftwarePackagesSoftwarePackageCollectionResult> softwarePackageCollections,

            string softwareSourceId)
        {
            DisplayName = displayName;
            DisplayNameContains = displayNameContains;
            Filters = filters;
            Id = id;
            IsLatest = isLatest;
            SoftwarePackageCollections = softwarePackageCollections;
            SoftwareSourceId = softwareSourceId;
        }
    }
}
