// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSourceVendors
    {
        /// <summary>
        /// This data source provides the list of Software Source Vendors in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists available software source vendors. Filter the list against a variety of criteria including but not limited
        /// to its name.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceVendors = Oci.OsManagementHub.GetSoftwareSourceVendors.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Name = @var.Software_source_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourceVendorsResult> InvokeAsync(GetSoftwareSourceVendorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourceVendorsResult>("oci:OsManagementHub/getSoftwareSourceVendors:getSoftwareSourceVendors", args ?? new GetSoftwareSourceVendorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Source Vendors in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists available software source vendors. Filter the list against a variety of criteria including but not limited
        /// to its name.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSourceVendors = Oci.OsManagementHub.GetSoftwareSourceVendors.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Name = @var.Software_source_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourceVendorsResult> Invoke(GetSoftwareSourceVendorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourceVendorsResult>("oci:OsManagementHub/getSoftwareSourceVendors:getSoftwareSourceVendors", args ?? new GetSoftwareSourceVendorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourceVendorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This parameter is required.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetSoftwareSourceVendorsFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourceVendorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourceVendorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSoftwareSourceVendorsArgs()
        {
        }
        public static new GetSoftwareSourceVendorsArgs Empty => new GetSoftwareSourceVendorsArgs();
    }

    public sealed class GetSoftwareSourceVendorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the resources to list. This parameter is required.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourceVendorsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourceVendorsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourceVendorsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of the entity to be queried.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSoftwareSourceVendorsInvokeArgs()
        {
        }
        public static new GetSoftwareSourceVendorsInvokeArgs Empty => new GetSoftwareSourceVendorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourceVendorsResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetSoftwareSourceVendorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of software_source_vendor_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult> SoftwareSourceVendorCollections;

        [OutputConstructor]
        private GetSoftwareSourceVendorsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetSoftwareSourceVendorsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetSoftwareSourceVendorsSoftwareSourceVendorCollectionResult> softwareSourceVendorCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            SoftwareSourceVendorCollections = softwareSourceVendorCollections;
        }
    }
}
