// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    public static class GetSoftwareSources
    {
        /// <summary>
        /// This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
        /// variety of criteria including but not limited to its name, status, architecture, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSources = Oci.OsManagementHub.GetSoftwareSources.Invoke(new()
        ///     {
        ///         ArchTypes = @var.Software_source_arch_type,
        ///         Availabilities = @var.Software_source_availability,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Software_source_display_name,
        ///         DisplayNameContains = @var.Software_source_display_name_contains,
        ///         DisplayNameNotEqualTos = @var.Software_source_display_name_not_equal_to,
        ///         OsFamilies = @var.Software_source_os_family,
        ///         SoftwareSourceId = oci_os_management_hub_software_source.Test_software_source.Id,
        ///         SoftwareSourceTypes = @var.Software_source_software_source_type,
        ///         States = @var.Software_source_state,
        ///         VendorName = @var.Software_source_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSoftwareSourcesResult> InvokeAsync(GetSoftwareSourcesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoftwareSourcesResult>("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", args ?? new GetSoftwareSourcesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Software Sources in Oracle Cloud Infrastructure Os Management Hub service.
        /// 
        /// Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
        /// variety of criteria including but not limited to its name, status, architecture, and OS family.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSoftwareSources = Oci.OsManagementHub.GetSoftwareSources.Invoke(new()
        ///     {
        ///         ArchTypes = @var.Software_source_arch_type,
        ///         Availabilities = @var.Software_source_availability,
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Software_source_display_name,
        ///         DisplayNameContains = @var.Software_source_display_name_contains,
        ///         DisplayNameNotEqualTos = @var.Software_source_display_name_not_equal_to,
        ///         OsFamilies = @var.Software_source_os_family,
        ///         SoftwareSourceId = oci_os_management_hub_software_source.Test_software_source.Id,
        ///         SoftwareSourceTypes = @var.Software_source_software_source_type,
        ///         States = @var.Software_source_state,
        ///         VendorName = @var.Software_source_vendor_name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSoftwareSourcesResult> Invoke(GetSoftwareSourcesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoftwareSourcesResult>("oci:OsManagementHub/getSoftwareSources:getSoftwareSources", args ?? new GetSoftwareSourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoftwareSourcesArgs : global::Pulumi.InvokeArgs
    {
        [Input("archTypes")]
        private List<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public List<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new List<string>());
            set => _archTypes = value;
        }

        [Input("availabilities")]
        private List<string>? _availabilities;

        /// <summary>
        /// The availabilities of the software source for a tenant.
        /// </summary>
        public List<string> Availabilities
        {
            get => _availabilities ?? (_availabilities = new List<string>());
            set => _availabilities = value;
        }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public string? DisplayNameContains { get; set; }

        [Input("displayNameNotEqualTos")]
        private List<string>? _displayNameNotEqualTos;

        /// <summary>
        /// A multi filter to return resources that do not contains the given display names.
        /// </summary>
        public List<string> DisplayNameNotEqualTos
        {
            get => _displayNameNotEqualTos ?? (_displayNameNotEqualTos = new List<string>());
            set => _displayNameNotEqualTos = value;
        }

        [Input("filters")]
        private List<Inputs.GetSoftwareSourcesFilterArgs>? _filters;
        public List<Inputs.GetSoftwareSourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSoftwareSourcesFilterArgs>());
            set => _filters = value;
        }

        [Input("osFamilies")]
        private List<string>? _osFamilies;

        /// <summary>
        /// A filter to return only instances whose OS family type matches the given OS family.
        /// </summary>
        public List<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new List<string>());
            set => _osFamilies = value;
        }

        /// <summary>
        /// The OCID for the software source.
        /// </summary>
        [Input("softwareSourceId")]
        public string? SoftwareSourceId { get; set; }

        [Input("softwareSourceTypes")]
        private List<string>? _softwareSourceTypes;

        /// <summary>
        /// The type of the software source.
        /// </summary>
        public List<string> SoftwareSourceTypes
        {
            get => _softwareSourceTypes ?? (_softwareSourceTypes = new List<string>());
            set => _softwareSourceTypes = value;
        }

        [Input("states")]
        private List<string>? _states;

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleStates.
        /// </summary>
        public List<string> States
        {
            get => _states ?? (_states = new List<string>());
            set => _states = value;
        }

        /// <summary>
        /// A filter to return only profiles that match the given vendorName.
        /// </summary>
        [Input("vendorName")]
        public string? VendorName { get; set; }

        public GetSoftwareSourcesArgs()
        {
        }
        public static new GetSoftwareSourcesArgs Empty => new GetSoftwareSourcesArgs();
    }

    public sealed class GetSoftwareSourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("archTypes")]
        private InputList<string>? _archTypes;

        /// <summary>
        /// A filter to return only instances whose architecture type matches the given architecture.
        /// </summary>
        public InputList<string> ArchTypes
        {
            get => _archTypes ?? (_archTypes = new InputList<string>());
            set => _archTypes = value;
        }

        [Input("availabilities")]
        private InputList<string>? _availabilities;

        /// <summary>
        /// The availabilities of the software source for a tenant.
        /// </summary>
        public InputList<string> Availabilities
        {
            get => _availabilities ?? (_availabilities = new InputList<string>());
            set => _availabilities = value;
        }

        /// <summary>
        /// The OCID of the compartment that contains the resources to list.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A filter to return resources that may partially match the given display name.
        /// </summary>
        [Input("displayNameContains")]
        public Input<string>? DisplayNameContains { get; set; }

        [Input("displayNameNotEqualTos")]
        private InputList<string>? _displayNameNotEqualTos;

        /// <summary>
        /// A multi filter to return resources that do not contains the given display names.
        /// </summary>
        public InputList<string> DisplayNameNotEqualTos
        {
            get => _displayNameNotEqualTos ?? (_displayNameNotEqualTos = new InputList<string>());
            set => _displayNameNotEqualTos = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetSoftwareSourcesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSoftwareSourcesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSoftwareSourcesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("osFamilies")]
        private InputList<string>? _osFamilies;

        /// <summary>
        /// A filter to return only instances whose OS family type matches the given OS family.
        /// </summary>
        public InputList<string> OsFamilies
        {
            get => _osFamilies ?? (_osFamilies = new InputList<string>());
            set => _osFamilies = value;
        }

        /// <summary>
        /// The OCID for the software source.
        /// </summary>
        [Input("softwareSourceId")]
        public Input<string>? SoftwareSourceId { get; set; }

        [Input("softwareSourceTypes")]
        private InputList<string>? _softwareSourceTypes;

        /// <summary>
        /// The type of the software source.
        /// </summary>
        public InputList<string> SoftwareSourceTypes
        {
            get => _softwareSourceTypes ?? (_softwareSourceTypes = new InputList<string>());
            set => _softwareSourceTypes = value;
        }

        [Input("states")]
        private InputList<string>? _states;

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleStates.
        /// </summary>
        public InputList<string> States
        {
            get => _states ?? (_states = new InputList<string>());
            set => _states = value;
        }

        /// <summary>
        /// A filter to return only profiles that match the given vendorName.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public GetSoftwareSourcesInvokeArgs()
        {
        }
        public static new GetSoftwareSourcesInvokeArgs Empty => new GetSoftwareSourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoftwareSourcesResult
    {
        /// <summary>
        /// The architecture type supported by the software source.
        /// </summary>
        public readonly ImmutableArray<string> ArchTypes;
        /// <summary>
        /// Possible availabilities of a software source.
        /// </summary>
        public readonly ImmutableArray<string> Availabilities;
        /// <summary>
        /// The OCID of the tenancy containing the software source.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// User friendly name.
        /// </summary>
        public readonly string? DisplayName;
        public readonly string? DisplayNameContains;
        public readonly ImmutableArray<string> DisplayNameNotEqualTos;
        public readonly ImmutableArray<Outputs.GetSoftwareSourcesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OS family the software source belongs to.
        /// </summary>
        public readonly ImmutableArray<string> OsFamilies;
        /// <summary>
        /// The list of software_source_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSoftwareSourcesSoftwareSourceCollectionResult> SoftwareSourceCollections;
        public readonly string? SoftwareSourceId;
        /// <summary>
        /// Type of the software source.
        /// </summary>
        public readonly ImmutableArray<string> SoftwareSourceTypes;
        /// <summary>
        /// The current state of the software source.
        /// </summary>
        public readonly ImmutableArray<string> States;
        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        public readonly string? VendorName;

        [OutputConstructor]
        private GetSoftwareSourcesResult(
            ImmutableArray<string> archTypes,

            ImmutableArray<string> availabilities,

            string? compartmentId,

            string? displayName,

            string? displayNameContains,

            ImmutableArray<string> displayNameNotEqualTos,

            ImmutableArray<Outputs.GetSoftwareSourcesFilterResult> filters,

            string id,

            ImmutableArray<string> osFamilies,

            ImmutableArray<Outputs.GetSoftwareSourcesSoftwareSourceCollectionResult> softwareSourceCollections,

            string? softwareSourceId,

            ImmutableArray<string> softwareSourceTypes,

            ImmutableArray<string> states,

            string? vendorName)
        {
            ArchTypes = archTypes;
            Availabilities = availabilities;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            DisplayNameContains = displayNameContains;
            DisplayNameNotEqualTos = displayNameNotEqualTos;
            Filters = filters;
            Id = id;
            OsFamilies = osFamilies;
            SoftwareSourceCollections = softwareSourceCollections;
            SoftwareSourceId = softwareSourceId;
            SoftwareSourceTypes = softwareSourceTypes;
            States = states;
            VendorName = vendorName;
        }
    }
}
