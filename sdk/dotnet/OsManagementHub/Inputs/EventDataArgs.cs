// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub.Inputs
{

    public sealed class EventDataArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalDetails")]
        private InputList<Inputs.EventDataAdditionalDetailArgs>? _additionalDetails;

        /// <summary>
        /// Provides additional information for the work request associated with an event.
        /// </summary>
        public InputList<Inputs.EventDataAdditionalDetailArgs> AdditionalDetails
        {
            get => _additionalDetails ?? (_additionalDetails = new InputList<Inputs.EventDataAdditionalDetailArgs>());
            set => _additionalDetails = value;
        }

        [Input("attemptedResolutions")]
        private InputList<string>? _attemptedResolutions;

        /// <summary>
        /// The actions used to attempt fixing the error.
        /// </summary>
        public InputList<string> AttemptedResolutions
        {
            get => _attemptedResolutions ?? (_attemptedResolutions = new InputList<string>());
            set => _attemptedResolutions = value;
        }

        [Input("contents")]
        private InputList<Inputs.EventDataContentArgs>? _contents;

        /// <summary>
        /// Provides information collected for the exploit attempt event.
        /// </summary>
        public InputList<Inputs.EventDataContentArgs> Contents
        {
            get => _contents ?? (_contents = new InputList<Inputs.EventDataContentArgs>());
            set => _contents = value;
        }

        /// <summary>
        /// The commands executed by the agent that caused the error.
        /// </summary>
        [Input("errorCause")]
        public Input<string>? ErrorCause { get; set; }

        /// <summary>
        /// The output log of the error.
        /// </summary>
        [Input("errorLog")]
        public Input<string>? ErrorLog { get; set; }

        /// <summary>
        /// Number of times the event has occurred.
        /// </summary>
        [Input("eventCount")]
        public Input<int>? EventCount { get; set; }

        /// <summary>
        /// Fingerprint of the event.
        /// </summary>
        [Input("eventFingerprint")]
        public Input<string>? EventFingerprint { get; set; }

        /// <summary>
        /// Health state of the management station
        /// </summary>
        [Input("healthState")]
        public Input<string>? HealthState { get; set; }

        /// <summary>
        /// Type of management station operation.
        /// </summary>
        [Input("operationType")]
        public Input<string>? OperationType { get; set; }

        /// <summary>
        /// Reason for the event.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// Reboot status for the current event
        /// </summary>
        [Input("rebootStatus")]
        public Input<string>? RebootStatus { get; set; }

        /// <summary>
        /// The log output after the resolutions.
        /// </summary>
        [Input("resolutionLog")]
        public Input<string>? ResolutionLog { get; set; }

        /// <summary>
        /// Indicates if the event succeeded.
        /// </summary>
        [Input("resolutionStatus")]
        public Input<string>? ResolutionStatus { get; set; }

        /// <summary>
        /// Status of the management station operation.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The date and time that the event first occurred.
        /// </summary>
        [Input("timeFirstOccurred")]
        public Input<string>? TimeFirstOccurred { get; set; }

        public EventDataArgs()
        {
        }
        public static new EventDataArgs Empty => new EventDataArgs();
    }
}
