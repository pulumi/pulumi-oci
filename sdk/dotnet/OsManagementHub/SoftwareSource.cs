// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    /// <summary>
    /// This resource provides the Software Source resource in Oracle Cloud Infrastructure Os Management Hub service.
    /// 
    /// Creates a new software source.
    /// 
    /// ## Import
    /// 
    /// SoftwareSources can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:OsManagementHub/softwareSource:SoftwareSource test_software_source "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:OsManagementHub/softwareSource:SoftwareSource")]
    public partial class SoftwareSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Advanced repository options for the software source
        /// </summary>
        [Output("advancedRepoOptions")]
        public Output<string> AdvancedRepoOptions { get; private set; } = null!;

        /// <summary>
        /// The architecture type supported by the third-party software source.
        /// </summary>
        [Output("archType")]
        public Output<string> ArchType { get; private set; } = null!;

        /// <summary>
        /// Availability of the software source (for non-OCI environments).
        /// </summary>
        [Output("availability")]
        public Output<string> Availability { get; private set; } = null!;

        /// <summary>
        /// Availability of the software source (for Oracle Cloud Infrastructure environments).
        /// </summary>
        [Output("availabilityAtOci")]
        public Output<string> AvailabilityAtOci { get; private set; } = null!;

        /// <summary>
        /// The yum repository checksum type used by this software source.
        /// </summary>
        [Output("checksumType")]
        public Output<string> ChecksumType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
        /// </summary>
        [Output("customSoftwareSourceFilter")]
        public Output<Outputs.SoftwareSourceCustomSoftwareSourceFilter> CustomSoftwareSourceFilter { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, string>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-specified description for the software source. Avoid entering confidential information.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, string>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of the GPG key for this software source.
        /// </summary>
        [Output("gpgKeyFingerprint")]
        public Output<string> GpgKeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// ID of the GPG key for this software source.
        /// </summary>
        [Output("gpgKeyId")]
        public Output<string> GpgKeyId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) URI of the GPG key for this software source.
        /// </summary>
        [Output("gpgKeyUrl")]
        public Output<string> GpgKeyUrl { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
        /// </summary>
        [Output("isAutoResolveDependencies")]
        public Output<bool> IsAutoResolveDependencies { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
        /// </summary>
        [Output("isAutomaticallyUpdated")]
        public Output<bool> IsAutomaticallyUpdated { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the service should create the software source from a list of packages provided by the user.
        /// </summary>
        [Output("isCreatedFromPackageList")]
        public Output<bool> IsCreatedFromPackageList { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether signature verification should be done for the software source.
        /// </summary>
        [Output("isGpgCheckEnabled")]
        public Output<bool> IsGpgCheckEnabled { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
        /// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
        /// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
        /// * For a package filter that does not specify a version, this will include only the latest available version of the package.
        /// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
        /// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
        /// </summary>
        [Output("isLatestContentOnly")]
        public Output<bool> IsLatestContentOnly { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the software source is required for the Autonomous Linux service.
        /// </summary>
        [Output("isMandatoryForAutonomousLinux")]
        public Output<bool> IsMandatoryForAutonomousLinux { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether this software source can be synced to a management station
        /// </summary>
        [Output("isMirrorSyncAllowed")]
        public Output<bool> IsMirrorSyncAllowed { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether SSL validation needs to be turned on
        /// </summary>
        [Output("isSslVerifyEnabled")]
        public Output<bool> IsSslVerifyEnabled { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
        /// </summary>
        [Output("originSoftwareSourceId")]
        public Output<string> OriginSoftwareSourceId { get; private set; } = null!;

        /// <summary>
        /// The OS family for the third-party software source.
        /// </summary>
        [Output("osFamily")]
        public Output<string> OsFamily { get; private set; } = null!;

        /// <summary>
        /// Number of packages the software source contains.
        /// </summary>
        [Output("packageCount")]
        public Output<string> PackageCount { get; private set; } = null!;

        /// <summary>
        /// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
        /// </summary>
        [Output("packages")]
        public Output<ImmutableArray<string>> Packages { get; private set; } = null!;

        /// <summary>
        /// The repository ID for the software source.
        /// </summary>
        [Output("repoId")]
        public Output<string> RepoId { get; private set; } = null!;

        /// <summary>
        /// The size of the software source in bytes (B).
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// The creation type of a software source.
        /// </summary>
        [Output("softwareSourceSubType")]
        public Output<string> SoftwareSourceSubType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Type of software source.
        /// </summary>
        [Output("softwareSourceType")]
        public Output<string> SoftwareSourceType { get; private set; } = null!;

        /// <summary>
        /// The version to assign to this custom software source.
        /// </summary>
        [Output("softwareSourceVersion")]
        public Output<string> SoftwareSourceVersion { get; private set; } = null!;

        /// <summary>
        /// The current state of the software source.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, string>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        [Output("timeMetadataUpdated")]
        public Output<string> TimeMetadataUpdated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) URL for the third-party software source.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        [Output("vendorName")]
        public Output<string> VendorName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) List of vendor software sources.
        /// </summary>
        [Output("vendorSoftwareSources")]
        public Output<ImmutableArray<Outputs.SoftwareSourceVendorSoftwareSource>> VendorSoftwareSources { get; private set; } = null!;


        /// <summary>
        /// Create a SoftwareSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SoftwareSource(string name, SoftwareSourceArgs args, CustomResourceOptions? options = null)
            : base("oci:OsManagementHub/softwareSource:SoftwareSource", name, args ?? new SoftwareSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SoftwareSource(string name, Input<string> id, SoftwareSourceState? state = null, CustomResourceOptions? options = null)
            : base("oci:OsManagementHub/softwareSource:SoftwareSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SoftwareSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SoftwareSource Get(string name, Input<string> id, SoftwareSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new SoftwareSource(name, id, state, options);
        }
    }

    public sealed class SoftwareSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Advanced repository options for the software source
        /// </summary>
        [Input("advancedRepoOptions")]
        public Input<string>? AdvancedRepoOptions { get; set; }

        /// <summary>
        /// The architecture type supported by the third-party software source.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
        /// </summary>
        [Input("customSoftwareSourceFilter")]
        public Input<Inputs.SoftwareSourceCustomSoftwareSourceFilterArgs>? CustomSoftwareSourceFilter { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-specified description for the software source. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) URI of the GPG key for this software source.
        /// </summary>
        [Input("gpgKeyUrl")]
        public Input<string>? GpgKeyUrl { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
        /// </summary>
        [Input("isAutoResolveDependencies")]
        public Input<bool>? IsAutoResolveDependencies { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
        /// </summary>
        [Input("isAutomaticallyUpdated")]
        public Input<bool>? IsAutomaticallyUpdated { get; set; }

        /// <summary>
        /// Indicates whether the service should create the software source from a list of packages provided by the user.
        /// </summary>
        [Input("isCreatedFromPackageList")]
        public Input<bool>? IsCreatedFromPackageList { get; set; }

        /// <summary>
        /// (Updatable) Whether signature verification should be done for the software source.
        /// </summary>
        [Input("isGpgCheckEnabled")]
        public Input<bool>? IsGpgCheckEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
        /// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
        /// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
        /// * For a package filter that does not specify a version, this will include only the latest available version of the package.
        /// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
        /// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
        /// </summary>
        [Input("isLatestContentOnly")]
        public Input<bool>? IsLatestContentOnly { get; set; }

        /// <summary>
        /// (Updatable) Whether this software source can be synced to a management station
        /// </summary>
        [Input("isMirrorSyncAllowed")]
        public Input<bool>? IsMirrorSyncAllowed { get; set; }

        /// <summary>
        /// (Updatable) Whether SSL validation needs to be turned on
        /// </summary>
        [Input("isSslVerifyEnabled")]
        public Input<bool>? IsSslVerifyEnabled { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
        /// </summary>
        [Input("originSoftwareSourceId")]
        public Input<string>? OriginSoftwareSourceId { get; set; }

        /// <summary>
        /// The OS family for the third-party software source.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        [Input("packages")]
        private InputList<string>? _packages;

        /// <summary>
        /// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
        /// </summary>
        public InputList<string> Packages
        {
            get => _packages ?? (_packages = new InputList<string>());
            set => _packages = value;
        }

        /// <summary>
        /// The creation type of a software source.
        /// </summary>
        [Input("softwareSourceSubType")]
        public Input<string>? SoftwareSourceSubType { get; set; }

        /// <summary>
        /// (Updatable) Type of software source.
        /// </summary>
        [Input("softwareSourceType", required: true)]
        public Input<string> SoftwareSourceType { get; set; } = null!;

        /// <summary>
        /// The version to assign to this custom software source.
        /// </summary>
        [Input("softwareSourceVersion")]
        public Input<string>? SoftwareSourceVersion { get; set; }

        /// <summary>
        /// (Updatable) URL for the third-party software source.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("vendorSoftwareSources")]
        private InputList<Inputs.SoftwareSourceVendorSoftwareSourceArgs>? _vendorSoftwareSources;

        /// <summary>
        /// (Updatable) List of vendor software sources.
        /// </summary>
        public InputList<Inputs.SoftwareSourceVendorSoftwareSourceArgs> VendorSoftwareSources
        {
            get => _vendorSoftwareSources ?? (_vendorSoftwareSources = new InputList<Inputs.SoftwareSourceVendorSoftwareSourceArgs>());
            set => _vendorSoftwareSources = value;
        }

        public SoftwareSourceArgs()
        {
        }
        public static new SoftwareSourceArgs Empty => new SoftwareSourceArgs();
    }

    public sealed class SoftwareSourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Advanced repository options for the software source
        /// </summary>
        [Input("advancedRepoOptions")]
        public Input<string>? AdvancedRepoOptions { get; set; }

        /// <summary>
        /// The architecture type supported by the third-party software source.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// Availability of the software source (for non-OCI environments).
        /// </summary>
        [Input("availability")]
        public Input<string>? Availability { get; set; }

        /// <summary>
        /// Availability of the software source (for Oracle Cloud Infrastructure environments).
        /// </summary>
        [Input("availabilityAtOci")]
        public Input<string>? AvailabilityAtOci { get; set; }

        /// <summary>
        /// The yum repository checksum type used by this software source.
        /// </summary>
        [Input("checksumType")]
        public Input<string>? ChecksumType { get; set; }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) Provides the information used to apply filters to a vendor software source to create or update a custom software source.
        /// </summary>
        [Input("customSoftwareSourceFilter")]
        public Input<Inputs.SoftwareSourceCustomSoftwareSourceFilterGetArgs>? CustomSoftwareSourceFilter { get; set; }

        [Input("definedTags")]
        private InputMap<string>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<string> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<string>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) User-specified description for the software source. Avoid entering confidential information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) User-friendly name for the software source. Does not have to be unique and you can change the name later. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<string>? _freeformTags;

        /// <summary>
        /// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<string> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<string>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// Fingerprint of the GPG key for this software source.
        /// </summary>
        [Input("gpgKeyFingerprint")]
        public Input<string>? GpgKeyFingerprint { get; set; }

        /// <summary>
        /// ID of the GPG key for this software source.
        /// </summary>
        [Input("gpgKeyId")]
        public Input<string>? GpgKeyId { get; set; }

        /// <summary>
        /// (Updatable) URI of the GPG key for this software source.
        /// </summary>
        [Input("gpgKeyUrl")]
        public Input<string>? GpgKeyUrl { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
        /// </summary>
        [Input("isAutoResolveDependencies")]
        public Input<bool>? IsAutoResolveDependencies { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
        /// </summary>
        [Input("isAutomaticallyUpdated")]
        public Input<bool>? IsAutomaticallyUpdated { get; set; }

        /// <summary>
        /// Indicates whether the service should create the software source from a list of packages provided by the user.
        /// </summary>
        [Input("isCreatedFromPackageList")]
        public Input<bool>? IsCreatedFromPackageList { get; set; }

        /// <summary>
        /// (Updatable) Whether signature verification should be done for the software source.
        /// </summary>
        [Input("isGpgCheckEnabled")]
        public Input<bool>? IsGpgCheckEnabled { get; set; }

        /// <summary>
        /// (Updatable) Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
        /// * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
        /// * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
        /// * For a package filter that does not specify a version, this will include only the latest available version of the package.
        /// * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
        /// * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
        /// </summary>
        [Input("isLatestContentOnly")]
        public Input<bool>? IsLatestContentOnly { get; set; }

        /// <summary>
        /// Indicates whether the software source is required for the Autonomous Linux service.
        /// </summary>
        [Input("isMandatoryForAutonomousLinux")]
        public Input<bool>? IsMandatoryForAutonomousLinux { get; set; }

        /// <summary>
        /// (Updatable) Whether this software source can be synced to a management station
        /// </summary>
        [Input("isMirrorSyncAllowed")]
        public Input<bool>? IsMirrorSyncAllowed { get; set; }

        /// <summary>
        /// (Updatable) Whether SSL validation needs to be turned on
        /// </summary>
        [Input("isSslVerifyEnabled")]
        public Input<bool>? IsSslVerifyEnabled { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the vendor software source in the root compartment that is being replicated.
        /// </summary>
        [Input("originSoftwareSourceId")]
        public Input<string>? OriginSoftwareSourceId { get; set; }

        /// <summary>
        /// The OS family for the third-party software source.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// Number of packages the software source contains.
        /// </summary>
        [Input("packageCount")]
        public Input<string>? PackageCount { get; set; }

        [Input("packages")]
        private InputList<string>? _packages;

        /// <summary>
        /// A property used for compatibility only. It doesn't provide a complete list of packages. See [AddPackagesToSoftwareSourceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/osmh/latest/datatypes/AddPackagesToSoftwareSourceDetails) for providing the list of packages used to create the software source when isCreatedFromPackageList is set to true.
        /// </summary>
        public InputList<string> Packages
        {
            get => _packages ?? (_packages = new InputList<string>());
            set => _packages = value;
        }

        /// <summary>
        /// The repository ID for the software source.
        /// </summary>
        [Input("repoId")]
        public Input<string>? RepoId { get; set; }

        /// <summary>
        /// The size of the software source in bytes (B).
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// The creation type of a software source.
        /// </summary>
        [Input("softwareSourceSubType")]
        public Input<string>? SoftwareSourceSubType { get; set; }

        /// <summary>
        /// (Updatable) Type of software source.
        /// </summary>
        [Input("softwareSourceType")]
        public Input<string>? SoftwareSourceType { get; set; }

        /// <summary>
        /// The version to assign to this custom software source.
        /// </summary>
        [Input("softwareSourceVersion")]
        public Input<string>? SoftwareSourceVersion { get; set; }

        /// <summary>
        /// The current state of the software source.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<string>? _systemTags;

        /// <summary>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<string> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<string>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
        /// </summary>
        [Input("timeMetadataUpdated")]
        public Input<string>? TimeMetadataUpdated { get; set; }

        /// <summary>
        /// (Updatable) URL for the third-party software source.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Name of the vendor providing the software source.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        [Input("vendorSoftwareSources")]
        private InputList<Inputs.SoftwareSourceVendorSoftwareSourceGetArgs>? _vendorSoftwareSources;

        /// <summary>
        /// (Updatable) List of vendor software sources.
        /// </summary>
        public InputList<Inputs.SoftwareSourceVendorSoftwareSourceGetArgs> VendorSoftwareSources
        {
            get => _vendorSoftwareSources ?? (_vendorSoftwareSources = new InputList<Inputs.SoftwareSourceVendorSoftwareSourceGetArgs>());
            set => _vendorSoftwareSources = value;
        }

        public SoftwareSourceState()
        {
        }
        public static new SoftwareSourceState Empty => new SoftwareSourceState();
    }
}
