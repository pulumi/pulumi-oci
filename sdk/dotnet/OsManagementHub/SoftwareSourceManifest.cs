// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsManagementHub
{
    /// <summary>
    /// This resource provides the Software Source Manifest resource in Oracle Cloud Infrastructure Os Management Hub service.
    /// 
    /// Updates the package list document for the software source.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSoftwareSourceManifest = new Oci.OsManagementHub.SoftwareSourceManifest("test_software_source_manifest", new()
    ///     {
    ///         SoftwareSourceId = testSoftwareSource.Id,
    ///         Content = content,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SoftwareSourceManifests can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest test_software_source_manifest "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest")]
    public partial class SoftwareSourceManifest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Provides the manifest content used to update the package list of the software source.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("softwareSourceId")]
        public Output<string> SoftwareSourceId { get; private set; } = null!;


        /// <summary>
        /// Create a SoftwareSourceManifest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SoftwareSourceManifest(string name, SoftwareSourceManifestArgs args, CustomResourceOptions? options = null)
            : base("oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest", name, args ?? new SoftwareSourceManifestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SoftwareSourceManifest(string name, Input<string> id, SoftwareSourceManifestState? state = null, CustomResourceOptions? options = null)
            : base("oci:OsManagementHub/softwareSourceManifest:SoftwareSourceManifest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SoftwareSourceManifest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SoftwareSourceManifest Get(string name, Input<string> id, SoftwareSourceManifestState? state = null, CustomResourceOptions? options = null)
        {
            return new SoftwareSourceManifest(name, id, state, options);
        }
    }

    public sealed class SoftwareSourceManifestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Provides the manifest content used to update the package list of the software source.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("softwareSourceId", required: true)]
        public Input<string> SoftwareSourceId { get; set; } = null!;

        public SoftwareSourceManifestArgs()
        {
        }
        public static new SoftwareSourceManifestArgs Empty => new SoftwareSourceManifestArgs();
    }

    public sealed class SoftwareSourceManifestState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Provides the manifest content used to update the package list of the software source.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("softwareSourceId")]
        public Input<string>? SoftwareSourceId { get; set; }

        public SoftwareSourceManifestState()
        {
        }
        public static new SoftwareSourceManifestState Empty => new SoftwareSourceManifestState();
    }
}
