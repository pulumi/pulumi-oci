// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OspGateway
{
    public static class GetSubscription
    {
        /// <summary>
        /// This data source provides details about a specific Subscription resource in Oracle Cloud Infrastructure Osp Gateway service.
        /// 
        /// Get the subscription plan.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscription = Oci.OspGateway.GetSubscription.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         OspHomeRegion = subscriptionOspHomeRegion,
        ///         SubscriptionId = testSubscriptionOciOspGatewaySubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubscriptionResult> InvokeAsync(GetSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionResult>("oci:OspGateway/getSubscription:getSubscription", args ?? new GetSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Subscription resource in Oracle Cloud Infrastructure Osp Gateway service.
        /// 
        /// Get the subscription plan.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscription = Oci.OspGateway.GetSubscription.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         OspHomeRegion = subscriptionOspHomeRegion,
        ///         SubscriptionId = testSubscriptionOciOspGatewaySubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubscriptionResult> Invoke(GetSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionResult>("oci:OspGateway/getSubscription:getSubscription", args ?? new GetSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The home region's public name of the logged in user.
        /// </summary>
        [Input("ospHomeRegion", required: true)]
        public string OspHomeRegion { get; set; } = null!;

        /// <summary>
        /// Subscription id(OCID).
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetSubscriptionArgs()
        {
        }
        public static new GetSubscriptionArgs Empty => new GetSubscriptionArgs();
    }

    public sealed class GetSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The home region's public name of the logged in user.
        /// </summary>
        [Input("ospHomeRegion", required: true)]
        public Input<string> OspHomeRegion { get; set; } = null!;

        /// <summary>
        /// Subscription id(OCID).
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetSubscriptionInvokeArgs()
        {
        }
        public static new GetSubscriptionInvokeArgs Empty => new GetSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionResult
    {
        /// <summary>
        /// Account type.
        /// </summary>
        public readonly string AccountType;
        /// <summary>
        /// Bill to customer Account id.
        /// </summary>
        public readonly string BillToCustAccountId;
        /// <summary>
        /// Address details model.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionBillingAddressResult> BillingAddresses;
        public readonly string CompartmentId;
        /// <summary>
        /// Currency code
        /// </summary>
        public readonly string CurrencyCode;
        public readonly string Email;
        /// <summary>
        /// GSI Subscription external code.
        /// </summary>
        public readonly string GsiOrgCode;
        /// <summary>
        /// Subscription id identifier (OCID).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Payment intension.
        /// </summary>
        public readonly bool IsIntentToPay;
        /// <summary>
        /// Language short code (en, de, hu, etc)
        /// </summary>
        public readonly string LanguageCode;
        /// <summary>
        /// GSI organization external identifier.
        /// </summary>
        public readonly string OrganizationId;
        public readonly string OspHomeRegion;
        /// <summary>
        /// Payment gateway details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionPaymentGatewayResult> PaymentGateways;
        /// <summary>
        /// Payment option list of a subscription.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionPaymentOptionResult> PaymentOptions;
        /// <summary>
        /// Subscription plan type.
        /// </summary>
        public readonly string PlanType;
        /// <summary>
        /// Ship to customer account role.
        /// </summary>
        public readonly string ShipToCustAcctRoleId;
        /// <summary>
        /// Ship to customer account site address id.
        /// </summary>
        public readonly string ShipToCustAcctSiteId;
        public readonly string SubscriptionId;
        /// <summary>
        /// Subscription plan number.
        /// </summary>
        public readonly string SubscriptionPlanNumber;
        public readonly ImmutableArray<Outputs.GetSubscriptionSubscriptionResult> Subscriptions;
        /// <summary>
        /// Tax details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionTaxInfoResult> TaxInfos;
        /// <summary>
        /// Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
        /// </summary>
        public readonly string TimePersonalToCorporateConv;
        /// <summary>
        /// Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
        /// </summary>
        public readonly string TimePlanUpgrade;
        /// <summary>
        /// Start date of the subscription.
        /// </summary>
        public readonly string TimeStart;
        /// <summary>
        /// Status of the upgrade.
        /// </summary>
        public readonly string UpgradeState;
        /// <summary>
        /// This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
        /// </summary>
        public readonly string UpgradeStateDetails;

        [OutputConstructor]
        private GetSubscriptionResult(
            string accountType,

            string billToCustAccountId,

            ImmutableArray<Outputs.GetSubscriptionBillingAddressResult> billingAddresses,

            string compartmentId,

            string currencyCode,

            string email,

            string gsiOrgCode,

            string id,

            bool isIntentToPay,

            string languageCode,

            string organizationId,

            string ospHomeRegion,

            ImmutableArray<Outputs.GetSubscriptionPaymentGatewayResult> paymentGateways,

            ImmutableArray<Outputs.GetSubscriptionPaymentOptionResult> paymentOptions,

            string planType,

            string shipToCustAcctRoleId,

            string shipToCustAcctSiteId,

            string subscriptionId,

            string subscriptionPlanNumber,

            ImmutableArray<Outputs.GetSubscriptionSubscriptionResult> subscriptions,

            ImmutableArray<Outputs.GetSubscriptionTaxInfoResult> taxInfos,

            string timePersonalToCorporateConv,

            string timePlanUpgrade,

            string timeStart,

            string upgradeState,

            string upgradeStateDetails)
        {
            AccountType = accountType;
            BillToCustAccountId = billToCustAccountId;
            BillingAddresses = billingAddresses;
            CompartmentId = compartmentId;
            CurrencyCode = currencyCode;
            Email = email;
            GsiOrgCode = gsiOrgCode;
            Id = id;
            IsIntentToPay = isIntentToPay;
            LanguageCode = languageCode;
            OrganizationId = organizationId;
            OspHomeRegion = ospHomeRegion;
            PaymentGateways = paymentGateways;
            PaymentOptions = paymentOptions;
            PlanType = planType;
            ShipToCustAcctRoleId = shipToCustAcctRoleId;
            ShipToCustAcctSiteId = shipToCustAcctSiteId;
            SubscriptionId = subscriptionId;
            SubscriptionPlanNumber = subscriptionPlanNumber;
            Subscriptions = subscriptions;
            TaxInfos = taxInfos;
            TimePersonalToCorporateConv = timePersonalToCorporateConv;
            TimePlanUpgrade = timePlanUpgrade;
            TimeStart = timeStart;
            UpgradeState = upgradeState;
            UpgradeStateDetails = upgradeStateDetails;
        }
    }
}
