// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OspGateway.Inputs
{

    public sealed class SubscriptionSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Account type.
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        /// <summary>
        /// (Updatable) Bill to customer Account id.
        /// </summary>
        [Input("billToCustAccountId")]
        public Input<string>? BillToCustAccountId { get; set; }

        [Input("billingAddresses")]
        private InputList<Inputs.SubscriptionSubscriptionBillingAddressArgs>? _billingAddresses;

        /// <summary>
        /// (Updatable) Address details model.
        /// </summary>
        public InputList<Inputs.SubscriptionSubscriptionBillingAddressArgs> BillingAddresses
        {
            get => _billingAddresses ?? (_billingAddresses = new InputList<Inputs.SubscriptionSubscriptionBillingAddressArgs>());
            set => _billingAddresses = value;
        }

        /// <summary>
        /// (Updatable) Currency code
        /// </summary>
        [Input("currencyCode")]
        public Input<string>? CurrencyCode { get; set; }

        /// <summary>
        /// (Updatable) GSI Subscription external code.
        /// </summary>
        [Input("gsiOrgCode")]
        public Input<string>? GsiOrgCode { get; set; }

        /// <summary>
        /// (Updatable) Subscription id identifier (OCID).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// (Updatable) Payment intension.
        /// </summary>
        [Input("isIntentToPay")]
        public Input<bool>? IsIntentToPay { get; set; }

        /// <summary>
        /// (Updatable) Language short code (en, de, hu, etc)
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// (Updatable) GSI organization external identifier.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// (Updatable) Payment gateway details.
        /// </summary>
        [Input("paymentGateway")]
        public Input<Inputs.SubscriptionSubscriptionPaymentGatewayArgs>? PaymentGateway { get; set; }

        [Input("paymentOptions")]
        private InputList<Inputs.SubscriptionSubscriptionPaymentOptionArgs>? _paymentOptions;

        /// <summary>
        /// (Updatable) Payment option list of a subscription.
        /// </summary>
        public InputList<Inputs.SubscriptionSubscriptionPaymentOptionArgs> PaymentOptions
        {
            get => _paymentOptions ?? (_paymentOptions = new InputList<Inputs.SubscriptionSubscriptionPaymentOptionArgs>());
            set => _paymentOptions = value;
        }

        /// <summary>
        /// (Updatable) Subscription plan type.
        /// </summary>
        [Input("planType")]
        public Input<string>? PlanType { get; set; }

        /// <summary>
        /// (Updatable) Ship to customer account role.
        /// </summary>
        [Input("shipToCustAcctRoleId")]
        public Input<string>? ShipToCustAcctRoleId { get; set; }

        /// <summary>
        /// (Updatable) Ship to customer account site address id.
        /// </summary>
        [Input("shipToCustAcctSiteId")]
        public Input<string>? ShipToCustAcctSiteId { get; set; }

        /// <summary>
        /// (Updatable) Subscription plan number.
        /// </summary>
        [Input("subscriptionPlanNumber", required: true)]
        public Input<string> SubscriptionPlanNumber { get; set; } = null!;

        /// <summary>
        /// (Updatable) Tax details.
        /// </summary>
        [Input("taxInfo")]
        public Input<Inputs.SubscriptionSubscriptionTaxInfoArgs>? TaxInfo { get; set; }

        /// <summary>
        /// (Updatable) Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
        /// </summary>
        [Input("timePersonalToCorporateConv")]
        public Input<string>? TimePersonalToCorporateConv { get; set; }

        /// <summary>
        /// (Updatable) Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
        /// </summary>
        [Input("timePlanUpgrade")]
        public Input<string>? TimePlanUpgrade { get; set; }

        /// <summary>
        /// (Updatable) Start date of the subscription.
        /// </summary>
        [Input("timeStart")]
        public Input<string>? TimeStart { get; set; }

        /// <summary>
        /// (Updatable) Status of the upgrade.
        /// </summary>
        [Input("upgradeState")]
        public Input<string>? UpgradeState { get; set; }

        /// <summary>
        /// (Updatable) This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
        /// </summary>
        [Input("upgradeStateDetails")]
        public Input<string>? UpgradeStateDetails { get; set; }

        public SubscriptionSubscriptionArgs()
        {
        }
        public static new SubscriptionSubscriptionArgs Empty => new SubscriptionSubscriptionArgs();
    }
}
