// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsubSubscription.Outputs
{

    [OutputType]
    public sealed class GetSubscriptionsSubscriptionSubscribedServiceResult
    {
        /// <summary>
        /// Booking Opportunity Number of Subscribed Service
        /// </summary>
        public readonly string BookingOptyNumber;
        /// <summary>
        /// List of Commitment services of a line
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult> CommitmentServices;
        /// <summary>
        /// Subscribed service CSI number
        /// </summary>
        public readonly string Csi;
        /// <summary>
        /// Subscribed service data center region
        /// </summary>
        public readonly string DataCenterRegion;
        /// <summary>
        /// Funded Allocation line value example: 12000.00
        /// </summary>
        public readonly string FundedAllocationValue;
        /// <summary>
        /// SPM internal Subscribed Service ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Subscribed service intent to pay flag
        /// </summary>
        public readonly bool IsIntentToPay;
        /// <summary>
        /// Subscribed service net unit price
        /// </summary>
        public readonly string NetUnitPrice;
        /// <summary>
        /// Subscribed service operation type
        /// </summary>
        public readonly string OperationType;
        /// <summary>
        /// Sales Order Number associated to the subscribed service
        /// </summary>
        public readonly string OrderNumber;
        /// <summary>
        /// This field contains the name of the partner to which the subscription belongs - depending on which the invoicing may differ
        /// </summary>
        public readonly string PartnerTransactionType;
        /// <summary>
        /// Subscribed service pricing model
        /// </summary>
        public readonly string PricingModel;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult> Products;
        /// <summary>
        /// Subscribed service program type
        /// </summary>
        public readonly string ProgramType;
        /// <summary>
        /// Subscribed service promotion type
        /// </summary>
        public readonly string PromoType;
        /// <summary>
        /// Subscribed service quantity
        /// </summary>
        public readonly string Quantity;
        /// <summary>
        /// Subscribed service status
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Term value in Months
        /// </summary>
        public readonly string TermValue;
        /// <summary>
        /// Term value UOM
        /// </summary>
        public readonly string TermValueUom;
        /// <summary>
        /// Represents the date when the last service of the subscription ends
        /// </summary>
        public readonly string TimeEnd;
        /// <summary>
        /// Represents the date when the first service of the subscription was activated
        /// </summary>
        public readonly string TimeStart;
        /// <summary>
        /// Subscribed service total value
        /// </summary>
        public readonly string TotalValue;

        [OutputConstructor]
        private GetSubscriptionsSubscriptionSubscribedServiceResult(
            string bookingOptyNumber,

            ImmutableArray<Outputs.GetSubscriptionsSubscriptionSubscribedServiceCommitmentServiceResult> commitmentServices,

            string csi,

            string dataCenterRegion,

            string fundedAllocationValue,

            string id,

            bool isIntentToPay,

            string netUnitPrice,

            string operationType,

            string orderNumber,

            string partnerTransactionType,

            string pricingModel,

            ImmutableArray<Outputs.GetSubscriptionsSubscriptionSubscribedServiceProductResult> products,

            string programType,

            string promoType,

            string quantity,

            string status,

            string termValue,

            string termValueUom,

            string timeEnd,

            string timeStart,

            string totalValue)
        {
            BookingOptyNumber = bookingOptyNumber;
            CommitmentServices = commitmentServices;
            Csi = csi;
            DataCenterRegion = dataCenterRegion;
            FundedAllocationValue = fundedAllocationValue;
            Id = id;
            IsIntentToPay = isIntentToPay;
            NetUnitPrice = netUnitPrice;
            OperationType = operationType;
            OrderNumber = orderNumber;
            PartnerTransactionType = partnerTransactionType;
            PricingModel = pricingModel;
            Products = products;
            ProgramType = programType;
            PromoType = promoType;
            Quantity = quantity;
            Status = status;
            TermValue = termValue;
            TermValueUom = termValueUom;
            TimeEnd = timeEnd;
            TimeStart = timeStart;
            TotalValue = totalValue;
        }
    }
}
