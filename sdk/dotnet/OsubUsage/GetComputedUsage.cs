// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsubUsage
{
    public static class GetComputedUsage
    {
        /// <summary>
        /// This data source provides details about a specific Computed Usage resource in Oracle Cloud Infrastructure Osub Usage service.
        /// 
        /// This is an API which returns Computed Usage corresponding to the id passed
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testComputedUsage = Oci.OsubUsage.GetComputedUsage.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ComputedUsageId = oci_osub_usage_computed_usage.Test_computed_usage.Id,
        ///         Fields = @var.Computed_usage_fields,
        ///         XOneOriginRegion = @var.Computed_usage_x_one_origin_region,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetComputedUsageResult> InvokeAsync(GetComputedUsageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputedUsageResult>("oci:OsubUsage/getComputedUsage:getComputedUsage", args ?? new GetComputedUsageArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Computed Usage resource in Oracle Cloud Infrastructure Osub Usage service.
        /// 
        /// This is an API which returns Computed Usage corresponding to the id passed
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testComputedUsage = Oci.OsubUsage.GetComputedUsage.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ComputedUsageId = oci_osub_usage_computed_usage.Test_computed_usage.Id,
        ///         Fields = @var.Computed_usage_fields,
        ///         XOneOriginRegion = @var.Computed_usage_x_one_origin_region,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetComputedUsageResult> Invoke(GetComputedUsageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputedUsageResult>("oci:OsubUsage/getComputedUsage:getComputedUsage", args ?? new GetComputedUsageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputedUsageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The Computed Usage Id
        /// </summary>
        [Input("computedUsageId", required: true)]
        public string ComputedUsageId { get; set; } = null!;

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        /// <summary>
        /// The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
        /// </summary>
        [Input("xOneOriginRegion")]
        public string? XOneOriginRegion { get; set; }

        public GetComputedUsageArgs()
        {
        }
        public static new GetComputedUsageArgs Empty => new GetComputedUsageArgs();
    }

    public sealed class GetComputedUsageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The Computed Usage Id
        /// </summary>
        [Input("computedUsageId", required: true)]
        public Input<string> ComputedUsageId { get; set; } = null!;

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        /// <summary>
        /// The Oracle Cloud Infrastructure home region name in case home region is not us-ashburn-1 (IAD), e.g. ap-mumbai-1, us-phoenix-1 etc.
        /// </summary>
        [Input("xOneOriginRegion")]
        public Input<string>? XOneOriginRegion { get; set; }

        public GetComputedUsageInvokeArgs()
        {
        }
        public static new GetComputedUsageInvokeArgs Empty => new GetComputedUsageInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputedUsageResult
    {
        /// <summary>
        /// Subscribed service commitmentId.
        /// </summary>
        public readonly string CommitmentServiceId;
        public readonly string CompartmentId;
        /// <summary>
        /// SPM Internal compute records source .
        /// </summary>
        public readonly string ComputeSource;
        public readonly string ComputedUsageId;
        /// <summary>
        /// Computed Line Amount not rounded
        /// </summary>
        public readonly string Cost;
        /// <summary>
        /// Computed Line Amount rounded.
        /// </summary>
        public readonly string CostRounded;
        /// <summary>
        /// Currency code
        /// </summary>
        public readonly string CurrencyCode;
        /// <summary>
        /// Data Center Attribute as sent by MQS to SPM.
        /// </summary>
        public readonly string DataCenter;
        public readonly ImmutableArray<string> Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Invoicing status for the aggregated compute usage
        /// </summary>
        public readonly bool IsInvoiced;
        /// <summary>
        /// MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
        /// </summary>
        public readonly string MqsMessageId;
        /// <summary>
        /// Net Unit Price for the product in consideration, price actual.
        /// </summary>
        public readonly string NetUnitPrice;
        /// <summary>
        /// SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
        /// </summary>
        public readonly string OriginalUsageNumber;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputedUsageParentProductResult> ParentProducts;
        /// <summary>
        /// Subscribed service line parent id
        /// </summary>
        public readonly string ParentSubscribedServiceId;
        /// <summary>
        /// Subscription plan number
        /// </summary>
        public readonly string PlanNumber;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputedUsageProductResult> Products;
        /// <summary>
        /// Total Quantity that was used for computation
        /// </summary>
        public readonly string Quantity;
        /// <summary>
        /// Ratecard Id at subscribed service level
        /// </summary>
        public readonly string RateCardId;
        /// <summary>
        /// References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
        /// </summary>
        public readonly string RateCardTierdId;
        /// <summary>
        /// Computed Usage created time, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Metered Service date, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeMeteredOn;
        /// <summary>
        /// Usae computation date, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeOfArrival;
        /// <summary>
        /// Computed Usage updated time, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// Usage compute type in SPM.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Unit of Messure
        /// </summary>
        public readonly string UnitOfMeasure;
        /// <summary>
        /// SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
        /// </summary>
        public readonly string UsageNumber;
        public readonly string? XOneOriginRegion;

        [OutputConstructor]
        private GetComputedUsageResult(
            string commitmentServiceId,

            string compartmentId,

            string computeSource,

            string computedUsageId,

            string cost,

            string costRounded,

            string currencyCode,

            string dataCenter,

            ImmutableArray<string> fields,

            string id,

            bool isInvoiced,

            string mqsMessageId,

            string netUnitPrice,

            string originalUsageNumber,

            ImmutableArray<Outputs.GetComputedUsageParentProductResult> parentProducts,

            string parentSubscribedServiceId,

            string planNumber,

            ImmutableArray<Outputs.GetComputedUsageProductResult> products,

            string quantity,

            string rateCardId,

            string rateCardTierdId,

            string timeCreated,

            string timeMeteredOn,

            string timeOfArrival,

            string timeUpdated,

            string type,

            string unitOfMeasure,

            string usageNumber,

            string? xOneOriginRegion)
        {
            CommitmentServiceId = commitmentServiceId;
            CompartmentId = compartmentId;
            ComputeSource = computeSource;
            ComputedUsageId = computedUsageId;
            Cost = cost;
            CostRounded = costRounded;
            CurrencyCode = currencyCode;
            DataCenter = dataCenter;
            Fields = fields;
            Id = id;
            IsInvoiced = isInvoiced;
            MqsMessageId = mqsMessageId;
            NetUnitPrice = netUnitPrice;
            OriginalUsageNumber = originalUsageNumber;
            ParentProducts = parentProducts;
            ParentSubscribedServiceId = parentSubscribedServiceId;
            PlanNumber = planNumber;
            Products = products;
            Quantity = quantity;
            RateCardId = rateCardId;
            RateCardTierdId = rateCardTierdId;
            TimeCreated = timeCreated;
            TimeMeteredOn = timeMeteredOn;
            TimeOfArrival = timeOfArrival;
            TimeUpdated = timeUpdated;
            Type = type;
            UnitOfMeasure = unitOfMeasure;
            UsageNumber = usageNumber;
            XOneOriginRegion = xOneOriginRegion;
        }
    }
}
