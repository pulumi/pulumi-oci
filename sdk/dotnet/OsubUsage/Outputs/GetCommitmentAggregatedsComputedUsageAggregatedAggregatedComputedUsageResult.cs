// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.OsubUsage.Outputs
{

    [OutputType]
    public sealed class GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageResult
    {
        /// <summary>
        /// Sum of Computed Line Amount rounded
        /// </summary>
        public readonly string Cost;
        /// <summary>
        /// Sum of Computed Line Amount unrounded
        /// </summary>
        public readonly string CostUnrounded;
        /// <summary>
        /// Data Center Attribute as sent by MQS to SPM.
        /// </summary>
        public readonly string DataCenter;
        /// <summary>
        /// Net Unit Price for the product in consideration.
        /// </summary>
        public readonly string NetUnitPrice;
        /// <summary>
        /// Product description
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProductResult> Products;
        /// <summary>
        /// Total Quantity that was used for computation
        /// </summary>
        public readonly string Quantity;
        /// <summary>
        /// Metered Service date , expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeMeteredOn;
        /// <summary>
        /// Usage compute type in SPM.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageResult(
            string cost,

            string costUnrounded,

            string dataCenter,

            string netUnitPrice,

            ImmutableArray<Outputs.GetCommitmentAggregatedsComputedUsageAggregatedAggregatedComputedUsageProductResult> products,

            string quantity,

            string timeMeteredOn,

            string type)
        {
            Cost = cost;
            CostUnrounded = costUnrounded;
            DataCenter = dataCenter;
            NetUnitPrice = netUnitPrice;
            Products = products;
            Quantity = quantity;
            TimeMeteredOn = timeMeteredOn;
            Type = type;
        }
    }
}
