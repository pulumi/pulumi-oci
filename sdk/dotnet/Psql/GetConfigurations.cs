// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Psql
{
    public static class GetConfigurations
    {
        /// <summary>
        /// This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.
        /// 
        /// Returns a list of Configurations.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfigurations = Oci.Psql.GetConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ConfigurationId = oci_psql_configuration.Test_configuration.Id,
        ///         DbVersion = @var.Configuration_db_version,
        ///         DisplayName = @var.Configuration_display_name,
        ///         Shape = @var.Configuration_shape,
        ///         State = @var.Configuration_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConfigurationsResult> InvokeAsync(GetConfigurationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationsResult>("oci:Psql/getConfigurations:getConfigurations", args ?? new GetConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Configurations in Oracle Cloud Infrastructure Psql service.
        /// 
        /// Returns a list of Configurations.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfigurations = Oci.Psql.GetConfigurations.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         ConfigurationId = oci_psql_configuration.Test_configuration.Id,
        ///         DbVersion = @var.Configuration_db_version,
        ///         DisplayName = @var.Configuration_display_name,
        ///         Shape = @var.Configuration_shape,
        ///         State = @var.Configuration_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConfigurationsResult> Invoke(GetConfigurationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationsResult>("oci:Psql/getConfigurations:getConfigurations", args ?? new GetConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// unique Configuration identifier
        /// </summary>
        [Input("configurationId")]
        public string? ConfigurationId { get; set; }

        /// <summary>
        /// Verison of the Postgresql DB like 14.5
        /// </summary>
        [Input("dbVersion")]
        public string? DbVersion { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetConfigurationsFilterArgs>? _filters;
        public List<Inputs.GetConfigurationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetConfigurationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
        /// </summary>
        [Input("shape")]
        public string? Shape { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetConfigurationsArgs()
        {
        }
        public static new GetConfigurationsArgs Empty => new GetConfigurationsArgs();
    }

    public sealed class GetConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// unique Configuration identifier
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// Verison of the Postgresql DB like 14.5
        /// </summary>
        [Input("dbVersion")]
        public Input<string>? DbVersion { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetConfigurationsFilterInputArgs>? _filters;
        public InputList<Inputs.GetConfigurationsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetConfigurationsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Shape name of the compute like VM.Standard.E4.Flex or VM.Standard3.Flex
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetConfigurationsInvokeArgs()
        {
        }
        public static new GetConfigurationsInvokeArgs Empty => new GetConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationsResult
    {
        /// <summary>
        /// Config compartment identifier
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// The list of configuration_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigurationsConfigurationCollectionResult> ConfigurationCollections;
        public readonly string? ConfigurationId;
        /// <summary>
        /// Version of the Postgresql DB
        /// </summary>
        public readonly string? DbVersion;
        /// <summary>
        /// Config display name
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetConfigurationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Compute Shape Name like VM.Standard3.Flex.
        /// </summary>
        public readonly string? Shape;
        /// <summary>
        /// The current state of the Configuration.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetConfigurationsResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetConfigurationsConfigurationCollectionResult> configurationCollections,

            string? configurationId,

            string? dbVersion,

            string? displayName,

            ImmutableArray<Outputs.GetConfigurationsFilterResult> filters,

            string id,

            string? shape,

            string? state)
        {
            CompartmentId = compartmentId;
            ConfigurationCollections = configurationCollections;
            ConfigurationId = configurationId;
            DbVersion = dbVersion;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            Shape = shape;
            State = state;
        }
    }
}
