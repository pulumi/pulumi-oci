// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Psql.Outputs
{

    [OutputType]
    public sealed class GetShapesShapeCollectionItemResult
    {
        /// <summary>
        /// A filter to return the feature by the shape name.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if the shape is a flex shape.
        /// </summary>
        public readonly bool IsFlexible;
        /// <summary>
        /// The amount of memory in gigabytes.
        /// </summary>
        public readonly int MemorySizeInGbs;
        /// <summary>
        /// The number of OCPUs.
        /// </summary>
        public readonly int OcpuCount;
        /// <summary>
        /// The name of the Compute VM shape. Example: `VM.Standard.E4.Flex`
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// Options for the the shape memory
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShapesShapeCollectionItemShapeMemoryOptionResult> ShapeMemoryOptions;
        /// <summary>
        /// Options for the the shape OCPU
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShapesShapeCollectionItemShapeOcpuOptionResult> ShapeOcpuOptions;

        [OutputConstructor]
        private GetShapesShapeCollectionItemResult(
            string id,

            bool isFlexible,

            int memorySizeInGbs,

            int ocpuCount,

            string shape,

            ImmutableArray<Outputs.GetShapesShapeCollectionItemShapeMemoryOptionResult> shapeMemoryOptions,

            ImmutableArray<Outputs.GetShapesShapeCollectionItemShapeOcpuOptionResult> shapeOcpuOptions)
        {
            Id = id;
            IsFlexible = isFlexible;
            MemorySizeInGbs = memorySizeInGbs;
            OcpuCount = ocpuCount;
            Shape = shape;
            ShapeMemoryOptions = shapeMemoryOptions;
            ShapeOcpuOptions = shapeOcpuOptions;
        }
    }
}
