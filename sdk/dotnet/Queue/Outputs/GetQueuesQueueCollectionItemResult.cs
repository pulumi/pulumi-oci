// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Queue.Outputs
{

    [OutputType]
    public sealed class GetQueuesQueueCollectionItemResult
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Id of the custom master encryption key which will be used to encrypt messages content
        /// </summary>
        public readonly string CustomEncryptionKeyId;
        /// <summary>
        /// The number of times a message can be delivered to a consumer before being moved to the dead letter queue. A value of 0 indicates that the DLQ is not used.
        /// </summary>
        public readonly int DeadLetterQueueDeliveryCount;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// unique Queue identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The endpoint to use to consume or publish messages in the queue.
        /// </summary>
        public readonly string MessagesEndpoint;
        public readonly bool PurgeQueue;
        public readonly string PurgeType;
        /// <summary>
        /// The retention period of the messages in the queue, in seconds.
        /// </summary>
        public readonly int RetentionInSeconds;
        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time the the Queue was created. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the Queue was updated. An RFC3339 formatted datetime string
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The default polling timeout of the messages in the queue, in seconds.
        /// </summary>
        public readonly int TimeoutInSeconds;
        /// <summary>
        /// The default visibility of the messages consumed from the queue.
        /// </summary>
        public readonly int VisibilityInSeconds;

        [OutputConstructor]
        private GetQueuesQueueCollectionItemResult(
            string compartmentId,

            string customEncryptionKeyId,

            int deadLetterQueueDeliveryCount,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string lifecycleDetails,

            string messagesEndpoint,

            bool purgeQueue,

            string purgeType,

            int retentionInSeconds,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            int timeoutInSeconds,

            int visibilityInSeconds)
        {
            CompartmentId = compartmentId;
            CustomEncryptionKeyId = customEncryptionKeyId;
            DeadLetterQueueDeliveryCount = deadLetterQueueDeliveryCount;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            MessagesEndpoint = messagesEndpoint;
            PurgeQueue = purgeQueue;
            PurgeType = purgeType;
            RetentionInSeconds = retentionInSeconds;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            TimeoutInSeconds = timeoutInSeconds;
            VisibilityInSeconds = visibilityInSeconds;
        }
    }
}
