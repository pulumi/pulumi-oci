// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.RecoveryMod
{
    public static class GetProtectedDatabase
    {
        /// <summary>
        /// This data source provides details about a specific Protected Database resource in Oracle Cloud Infrastructure Recovery service.
        /// 
        /// Gets information about a specified protected database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProtectedDatabase = Oci.RecoveryMod.GetProtectedDatabase.Invoke(new()
        ///     {
        ///         ProtectedDatabaseId = testProtectedDatabaseOciRecoveryProtectedDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProtectedDatabaseResult> InvokeAsync(GetProtectedDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProtectedDatabaseResult>("oci:RecoveryMod/getProtectedDatabase:getProtectedDatabase", args ?? new GetProtectedDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Protected Database resource in Oracle Cloud Infrastructure Recovery service.
        /// 
        /// Gets information about a specified protected database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProtectedDatabase = Oci.RecoveryMod.GetProtectedDatabase.Invoke(new()
        ///     {
        ///         ProtectedDatabaseId = testProtectedDatabaseOciRecoveryProtectedDatabase.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProtectedDatabaseResult> Invoke(GetProtectedDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProtectedDatabaseResult>("oci:RecoveryMod/getProtectedDatabase:getProtectedDatabase", args ?? new GetProtectedDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProtectedDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The protected database OCID.
        /// </summary>
        [Input("protectedDatabaseId", required: true)]
        public string ProtectedDatabaseId { get; set; } = null!;

        public GetProtectedDatabaseArgs()
        {
        }
        public static new GetProtectedDatabaseArgs Empty => new GetProtectedDatabaseArgs();
    }

    public sealed class GetProtectedDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The protected database OCID.
        /// </summary>
        [Input("protectedDatabaseId", required: true)]
        public Input<string> ProtectedDatabaseId { get; set; } = null!;

        public GetProtectedDatabaseInvokeArgs()
        {
        }
        public static new GetProtectedDatabaseInvokeArgs Empty => new GetProtectedDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetProtectedDatabaseResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the protected database.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The OCID of the protected database.
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// The size of the protected database. XS - Less than 5GB, S - 5GB to 50GB, M - 50GB to 500GB, L - 500GB to 1TB, XL - 1TB to 5TB, XXL - Greater than 5TB.
        /// </summary>
        public readonly string DatabaseSize;
        /// <summary>
        /// The dbUniqueName for the protected database in Recovery Service. You cannot change the unique name.
        /// </summary>
        public readonly string DbUniqueName;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        public readonly string DeletionSchedule;
        /// <summary>
        /// The protected database name. You can change the displayName. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// Indicates the protection status of the database.
        /// </summary>
        public readonly string Health;
        /// <summary>
        /// A message describing the current health of the protected database.
        /// </summary>
        public readonly string HealthDetails;
        /// <summary>
        /// The OCID of the protected database.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the protected database is created by Recovery Service or created manually. Set to &lt;b&gt;TRUE&lt;/b&gt; for a service-defined protected database. When you enable the OCI-managed automatic backups option for a database and set Recovery Service as the backup destination, then Recovery Service creates the associated protected database resource. Set to &lt;b&gt;FALSE&lt;/b&gt; for a user-defined protected database.
        /// </summary>
        public readonly bool IsReadOnlyResource;
        /// <summary>
        /// The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service. Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups. For this to be effective, additional configuration is needed on client side.
        /// </summary>
        public readonly bool IsRedoLogsShipped;
        /// <summary>
        /// Detailed description about the current lifecycle state of the protected database. For example, it can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Backup performance and storage utilization metrics for the protected database.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProtectedDatabaseMetricResult> Metrics;
        public readonly string Password;
        /// <summary>
        /// An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
        /// </summary>
        public readonly string PolicyLockedDateTime;
        public readonly string ProtectedDatabaseId;
        /// <summary>
        /// The OCID of the protection policy associated with the protected database.
        /// </summary>
        public readonly string ProtectionPolicyId;
        /// <summary>
        /// List of recovery service subnet resources associated with the protected database.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProtectedDatabaseRecoveryServiceSubnetResult> RecoveryServiceSubnets;
        /// <summary>
        /// The current state of the Protected Database.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The OCID of the cloud service subscription to which the protected database is linked.
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// An RFC3339 formatted datetime string that indicates the created time for a protected database. For example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An RFC3339 formatted datetime string that indicates the last updated time for a protected database. For example: '2020-05-22T21:10:29.600Z'
        /// </summary>
        public readonly string TimeUpdated;
        /// <summary>
        /// The virtual private catalog (VPC) user credentials that authenticates the protected database to access Recovery Service.
        /// </summary>
        public readonly string VpcUserName;

        [OutputConstructor]
        private GetProtectedDatabaseResult(
            string compartmentId,

            string databaseId,

            string databaseSize,

            string dbUniqueName,

            ImmutableDictionary<string, string> definedTags,

            string deletionSchedule,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string health,

            string healthDetails,

            string id,

            bool isReadOnlyResource,

            bool isRedoLogsShipped,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetProtectedDatabaseMetricResult> metrics,

            string password,

            string policyLockedDateTime,

            string protectedDatabaseId,

            string protectionPolicyId,

            ImmutableArray<Outputs.GetProtectedDatabaseRecoveryServiceSubnetResult> recoveryServiceSubnets,

            string state,

            string subscriptionId,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated,

            string vpcUserName)
        {
            CompartmentId = compartmentId;
            DatabaseId = databaseId;
            DatabaseSize = databaseSize;
            DbUniqueName = dbUniqueName;
            DefinedTags = definedTags;
            DeletionSchedule = deletionSchedule;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Health = health;
            HealthDetails = healthDetails;
            Id = id;
            IsReadOnlyResource = isReadOnlyResource;
            IsRedoLogsShipped = isRedoLogsShipped;
            LifecycleDetails = lifecycleDetails;
            Metrics = metrics;
            Password = password;
            PolicyLockedDateTime = policyLockedDateTime;
            ProtectedDatabaseId = protectedDatabaseId;
            ProtectionPolicyId = protectionPolicyId;
            RecoveryServiceSubnets = recoveryServiceSubnets;
            State = state;
            SubscriptionId = subscriptionId;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            VpcUserName = vpcUserName;
        }
    }
}
