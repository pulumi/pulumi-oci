// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Redis
{
    public static class GetOciCacheConfigSets
    {
        /// <summary>
        /// This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
        /// 
        /// Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOciCacheConfigSets = Oci.Redis.GetOciCacheConfigSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = ociCacheConfigSetDisplayName,
        ///         Id = ociCacheConfigSetId,
        ///         SoftwareVersion = ociCacheConfigSetSoftwareVersion,
        ///         State = ociCacheConfigSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOciCacheConfigSetsResult> InvokeAsync(GetOciCacheConfigSetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOciCacheConfigSetsResult>("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", args ?? new GetOciCacheConfigSetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
        /// 
        /// Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOciCacheConfigSets = Oci.Redis.GetOciCacheConfigSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = ociCacheConfigSetDisplayName,
        ///         Id = ociCacheConfigSetId,
        ///         SoftwareVersion = ociCacheConfigSetSoftwareVersion,
        ///         State = ociCacheConfigSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOciCacheConfigSetsResult> Invoke(GetOciCacheConfigSetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOciCacheConfigSetsResult>("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", args ?? new GetOciCacheConfigSetsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Oci Cache Config Sets in Oracle Cloud Infrastructure Redis service.
        /// 
        /// Lists the Oracle Cloud Infrastructure Cache Config Sets in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testOciCacheConfigSets = Oci.Redis.GetOciCacheConfigSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = ociCacheConfigSetDisplayName,
        ///         Id = ociCacheConfigSetId,
        ///         SoftwareVersion = ociCacheConfigSetSoftwareVersion,
        ///         State = ociCacheConfigSetState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOciCacheConfigSetsResult> Invoke(GetOciCacheConfigSetsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOciCacheConfigSetsResult>("oci:Redis/getOciCacheConfigSets:getOciCacheConfigSets", args ?? new GetOciCacheConfigSetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOciCacheConfigSetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetOciCacheConfigSetsFilterArgs>? _filters;
        public List<Inputs.GetOciCacheConfigSetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOciCacheConfigSetsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Oracle Cloud Infrastructure Cache Config Set identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
        /// </summary>
        [Input("softwareVersion")]
        public string? SoftwareVersion { get; set; }

        /// <summary>
        /// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetOciCacheConfigSetsArgs()
        {
        }
        public static new GetOciCacheConfigSetsArgs Empty => new GetOciCacheConfigSetsArgs();
    }

    public sealed class GetOciCacheConfigSetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetOciCacheConfigSetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetOciCacheConfigSetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOciCacheConfigSetsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique Oracle Cloud Infrastructure Cache Config Set identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose software version matches with the given software version.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        /// <summary>
        /// A filter to return the Oracle Cloud Infrastructure Cache Config Set resources, whose lifecycle state matches with the given lifecycle state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetOciCacheConfigSetsInvokeArgs()
        {
        }
        public static new GetOciCacheConfigSetsInvokeArgs Empty => new GetOciCacheConfigSetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetOciCacheConfigSetsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the compartment that contains the Oracle Cloud Infrastructure Cache Config Set.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetOciCacheConfigSetsFilterResult> Filters;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm#Oracle) of the Oracle Cloud Infrastructure Cache Config Set.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of oci_cache_config_set_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOciCacheConfigSetsOciCacheConfigSetCollectionResult> OciCacheConfigSetCollections;
        /// <summary>
        /// The Oracle Cloud Infrastructure Cache engine version that the cluster is running.
        /// </summary>
        public readonly string? SoftwareVersion;
        /// <summary>
        /// The current state of the Oracle Cloud Infrastructure Cache Config Set.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetOciCacheConfigSetsResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetOciCacheConfigSetsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetOciCacheConfigSetsOciCacheConfigSetCollectionResult> ociCacheConfigSetCollections,

            string? softwareVersion,

            string? state)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            OciCacheConfigSetCollections = ociCacheConfigSetCollections;
            SoftwareVersion = softwareVersion;
            State = state;
        }
    }
}
