// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ResourceScheduler
{
    /// <summary>
    /// This resource provides the Schedule resource in Oracle Cloud Infrastructure Resource Scheduler service.
    /// 
    /// Creates a Schedule
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSchedule = new Oci.ResourceScheduler.Schedule("test_schedule", new()
    ///     {
    ///         Action = scheduleAction,
    ///         CompartmentId = compartmentId,
    ///         RecurrenceDetails = scheduleRecurrenceDetails,
    ///         RecurrenceType = scheduleRecurrenceType,
    ///         DefinedTags = 
    ///         {
    ///             { "Operations.CostCenter", "42" },
    ///         },
    ///         Description = scheduleDescription,
    ///         DisplayName = scheduleDisplayName,
    ///         FreeformTags = 
    ///         {
    ///             { "Department", "Finance" },
    ///         },
    ///         ResourceFilters = new[]
    ///         {
    ///             new Oci.ResourceScheduler.Inputs.ScheduleResourceFilterArgs
    ///             {
    ///                 Attribute = scheduleResourceFiltersAttribute,
    ///                 Condition = scheduleResourceFiltersCondition,
    ///                 ShouldIncludeChildCompartments = scheduleResourceFiltersShouldIncludeChildCompartments,
    ///                 Values = new[]
    ///                 {
    ///                     new Oci.ResourceScheduler.Inputs.ScheduleResourceFilterValueArgs
    ///                     {
    ///                         Namespace = scheduleResourceFiltersValueNamespace,
    ///                         TagKey = scheduleResourceFiltersValueTagKey,
    ///                         Value = scheduleResourceFiltersValueValue,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Resources = new[]
    ///         {
    ///             new Oci.ResourceScheduler.Inputs.ScheduleResourceArgs
    ///             {
    ///                 Id = scheduleResourcesId,
    ///                 Metadata = scheduleResourcesMetadata,
    ///             },
    ///         },
    ///         TimeEnds = scheduleTimeEnds,
    ///         TimeStarts = scheduleTimeStarts,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Schedules can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:ResourceScheduler/schedule:Schedule test_schedule "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:ResourceScheduler/schedule:Schedule")]
    public partial class Schedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) This is the action that will be executed by the schedule.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the schedule is created
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) These are defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the description of the schedule.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is a user-friendly name for the schedule. It does not have to be unique, and it's changeable.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) These are free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the frequency of recurrence of a schedule. The frequency field can either conform to RFC-5545 formatting or UNIX cron formatting for recurrences, based on the value specified by the recurrenceType field.
        /// </summary>
        [Output("recurrenceDetails")]
        public Output<string> RecurrenceDetails { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Type of recurrence of a schedule
        /// </summary>
        [Output("recurrenceType")]
        public Output<string> RecurrenceType { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is a list of resources filters.  The schedule will be applied to resources matching all of them.
        /// </summary>
        [Output("resourceFilters")]
        public Output<ImmutableArray<Outputs.ScheduleResourceFilter>> ResourceFilters { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the list of resources to which the scheduled operation is applied.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.ScheduleResource>> Resources { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The target state for the Schedule. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// These are system tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// This is the date and time the schedule was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the date and time the schedule ends, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeEnds")]
        public Output<string> TimeEnds { get; private set; } = null!;

        /// <summary>
        /// This is the date and time the schedule runs last time, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeLastRun")]
        public Output<string> TimeLastRun { get; private set; } = null!;

        /// <summary>
        /// This is the date and time the schedule run the next time, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeNextRun")]
        public Output<string> TimeNextRun { get; private set; } = null!;

        /// <summary>
        /// (Updatable) This is the date and time the schedule starts, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeStarts")]
        public Output<string> TimeStarts { get; private set; } = null!;

        /// <summary>
        /// This is the date and time the schedule was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a Schedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schedule(string name, ScheduleArgs args, CustomResourceOptions? options = null)
            : base("oci:ResourceScheduler/schedule:Schedule", name, args ?? new ScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schedule(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
            : base("oci:ResourceScheduler/schedule:Schedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schedule Get(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new Schedule(name, id, state, options);
        }
    }

    public sealed class ScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) This is the action that will be executed by the schedule.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the schedule is created
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) These are defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) This is the description of the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) This is a user-friendly name for the schedule. It does not have to be unique, and it's changeable.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) These are free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) This is the frequency of recurrence of a schedule. The frequency field can either conform to RFC-5545 formatting or UNIX cron formatting for recurrences, based on the value specified by the recurrenceType field.
        /// </summary>
        [Input("recurrenceDetails", required: true)]
        public Input<string> RecurrenceDetails { get; set; } = null!;

        /// <summary>
        /// (Updatable) Type of recurrence of a schedule
        /// </summary>
        [Input("recurrenceType", required: true)]
        public Input<string> RecurrenceType { get; set; } = null!;

        [Input("resourceFilters")]
        private InputList<Inputs.ScheduleResourceFilterArgs>? _resourceFilters;

        /// <summary>
        /// (Updatable) This is a list of resources filters.  The schedule will be applied to resources matching all of them.
        /// </summary>
        public InputList<Inputs.ScheduleResourceFilterArgs> ResourceFilters
        {
            get => _resourceFilters ?? (_resourceFilters = new InputList<Inputs.ScheduleResourceFilterArgs>());
            set => _resourceFilters = value;
        }

        [Input("resources")]
        private InputList<Inputs.ScheduleResourceArgs>? _resources;

        /// <summary>
        /// (Updatable) This is the list of resources to which the scheduled operation is applied.
        /// </summary>
        public InputList<Inputs.ScheduleResourceArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ScheduleResourceArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// (Updatable) The target state for the Schedule. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Updatable) This is the date and time the schedule ends, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeEnds")]
        public Input<string>? TimeEnds { get; set; }

        /// <summary>
        /// (Updatable) This is the date and time the schedule starts, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeStarts")]
        public Input<string>? TimeStarts { get; set; }

        public ScheduleArgs()
        {
        }
        public static new ScheduleArgs Empty => new ScheduleArgs();
    }

    public sealed class ScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) This is the action that will be executed by the schedule.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the schedule is created
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) These are defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) This is the description of the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Updatable) This is a user-friendly name for the schedule. It does not have to be unique, and it's changeable.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) These are free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) This is the frequency of recurrence of a schedule. The frequency field can either conform to RFC-5545 formatting or UNIX cron formatting for recurrences, based on the value specified by the recurrenceType field.
        /// </summary>
        [Input("recurrenceDetails")]
        public Input<string>? RecurrenceDetails { get; set; }

        /// <summary>
        /// (Updatable) Type of recurrence of a schedule
        /// </summary>
        [Input("recurrenceType")]
        public Input<string>? RecurrenceType { get; set; }

        [Input("resourceFilters")]
        private InputList<Inputs.ScheduleResourceFilterGetArgs>? _resourceFilters;

        /// <summary>
        /// (Updatable) This is a list of resources filters.  The schedule will be applied to resources matching all of them.
        /// </summary>
        public InputList<Inputs.ScheduleResourceFilterGetArgs> ResourceFilters
        {
            get => _resourceFilters ?? (_resourceFilters = new InputList<Inputs.ScheduleResourceFilterGetArgs>());
            set => _resourceFilters = value;
        }

        [Input("resources")]
        private InputList<Inputs.ScheduleResourceGetArgs>? _resources;

        /// <summary>
        /// (Updatable) This is the list of resources to which the scheduled operation is applied.
        /// </summary>
        public InputList<Inputs.ScheduleResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ScheduleResourceGetArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// (Updatable) The target state for the Schedule. Could be set to `ACTIVE` or `INACTIVE`. 
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// These are system tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// This is the date and time the schedule was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// (Updatable) This is the date and time the schedule ends, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeEnds")]
        public Input<string>? TimeEnds { get; set; }

        /// <summary>
        /// This is the date and time the schedule runs last time, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeLastRun")]
        public Input<string>? TimeLastRun { get; set; }

        /// <summary>
        /// This is the date and time the schedule run the next time, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeNextRun")]
        public Input<string>? TimeNextRun { get; set; }

        /// <summary>
        /// (Updatable) This is the date and time the schedule starts, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339)  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeStarts")]
        public Input<string>? TimeStarts { get; set; }

        /// <summary>
        /// This is the date and time the schedule was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public ScheduleState()
        {
        }
        public static new ScheduleState Empty => new ScheduleState();
    }
}
