// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Sch.Inputs
{

    public sealed class ConnectorSourceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The configuration map for the connector plugin. This map includes parameters specific to the connector plugin type.  For example, for `QueueSource`, the map lists the OCID of the selected queue. To find the parameters for a connector plugin, get the plugin using [GetConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPlugin/GetConnectorPlugin) and review its schema value.
        /// </summary>
        [Input("configMap")]
        public Input<string>? ConfigMap { get; set; }

        /// <summary>
        /// (Updatable) The [read setting](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm), which determines where in the stream to start moving data. For configuration instructions, see [Creating a Connector with a Streaming Source](https://docs.cloud.oracle.com/iaas/Content/connector-hub/create-service-connector-streaming-source.htm).
        /// </summary>
        [Input("cursor")]
        public Input<Inputs.ConnectorSourceCursorGetArgs>? Cursor { get; set; }

        /// <summary>
        /// (Updatable) The type discriminator.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        [Input("logSources")]
        private InputList<Inputs.ConnectorSourceLogSourceGetArgs>? _logSources;

        /// <summary>
        /// (Updatable) The logs for this Logging source.
        /// </summary>
        public InputList<Inputs.ConnectorSourceLogSourceGetArgs> LogSources
        {
            get => _logSources ?? (_logSources = new InputList<Inputs.ConnectorSourceLogSourceGetArgs>());
            set => _logSources = value;
        }

        [Input("monitoringSources")]
        private InputList<Inputs.ConnectorSourceMonitoringSourceGetArgs>? _monitoringSources;

        /// <summary>
        /// (Updatable) One or more compartment-specific lists of metric namespaces to retrieve data from.
        /// </summary>
        public InputList<Inputs.ConnectorSourceMonitoringSourceGetArgs> MonitoringSources
        {
            get => _monitoringSources ?? (_monitoringSources = new InputList<Inputs.ConnectorSourceMonitoringSourceGetArgs>());
            set => _monitoringSources = value;
        }

        /// <summary>
        /// (Updatable) The name of the connector plugin. This name indicates the service to be called by the connector plugin. For example, `QueueSource` indicates the Queue service. To find names of connector plugins, list the plugin using [ListConnectorPlugin](https://docs.cloud.oracle.com/iaas/api/#/en/serviceconnectors/latest/ConnectorPluginSummary/ListConnectorPlugins).
        /// </summary>
        [Input("pluginName")]
        public Input<string>? PluginName { get; set; }

        [Input("privateEndpointMetadatas")]
        private InputList<Inputs.ConnectorSourcePrivateEndpointMetadataGetArgs>? _privateEndpointMetadatas;

        /// <summary>
        /// The private endpoint metadata for the connector's source or target.
        /// </summary>
        public InputList<Inputs.ConnectorSourcePrivateEndpointMetadataGetArgs> PrivateEndpointMetadatas
        {
            get => _privateEndpointMetadatas ?? (_privateEndpointMetadatas = new InputList<Inputs.ConnectorSourcePrivateEndpointMetadataGetArgs>());
            set => _privateEndpointMetadatas = value;
        }

        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the stream.
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        public ConnectorSourceGetArgs()
        {
        }
        public static new ConnectorSourceGetArgs Empty => new ConnectorSourceGetArgs();
    }
}
