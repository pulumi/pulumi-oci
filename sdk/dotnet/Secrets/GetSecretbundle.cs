// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Secrets
{
    public static class GetSecretbundle
    {
        /// <summary>
        /// This data source provides details about a specific Secretbundle resource in Oracle Cloud Infrastructure Secrets service.
        /// 
        /// Gets a secret bundle that matches either the specified `Stage`, `Label`, or `versionNumber` parameter. 
        /// If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretbundle = Oci.Secrets.GetSecretbundle.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionName = testSecretVersion.Name,
        ///         Stage = secretbundleStage,
        ///         VersionNumber = secretbundleVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecretbundleResult> InvokeAsync(GetSecretbundleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretbundleResult>("oci:Secrets/getSecretbundle:getSecretbundle", args ?? new GetSecretbundleArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Secretbundle resource in Oracle Cloud Infrastructure Secrets service.
        /// 
        /// Gets a secret bundle that matches either the specified `Stage`, `Label`, or `versionNumber` parameter. 
        /// If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretbundle = Oci.Secrets.GetSecretbundle.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionName = testSecretVersion.Name,
        ///         Stage = secretbundleStage,
        ///         VersionNumber = secretbundleVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretbundleResult> Invoke(GetSecretbundleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretbundleResult>("oci:Secrets/getSecretbundle:getSecretbundle", args ?? new GetSecretbundleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Secretbundle resource in Oracle Cloud Infrastructure Secrets service.
        /// 
        /// Gets a secret bundle that matches either the specified `Stage`, `Label`, or `versionNumber` parameter. 
        /// If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretbundle = Oci.Secrets.GetSecretbundle.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionName = testSecretVersion.Name,
        ///         Stage = secretbundleStage,
        ///         VersionNumber = secretbundleVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretbundleResult> Invoke(GetSecretbundleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretbundleResult>("oci:Secrets/getSecretbundle:getSecretbundle", args ?? new GetSecretbundleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretbundleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public string SecretId { get; set; } = null!;

        /// <summary>
        /// The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
        /// </summary>
        [Input("secretVersionName")]
        public string? SecretVersionName { get; set; }

        /// <summary>
        /// The rotation state of the secret version.
        /// </summary>
        [Input("stage")]
        public string? Stage { get; set; }

        /// <summary>
        /// The version number of the secret.
        /// </summary>
        [Input("versionNumber")]
        public string? VersionNumber { get; set; }

        public GetSecretbundleArgs()
        {
        }
        public static new GetSecretbundleArgs Empty => new GetSecretbundleArgs();
    }

    public sealed class GetSecretbundleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        /// <summary>
        /// The name of the secret. (This might be referred to as the name of the secret version. Names are unique across the different versions of a secret.)
        /// </summary>
        [Input("secretVersionName")]
        public Input<string>? SecretVersionName { get; set; }

        /// <summary>
        /// The rotation state of the secret version.
        /// </summary>
        [Input("stage")]
        public Input<string>? Stage { get; set; }

        /// <summary>
        /// The version number of the secret.
        /// </summary>
        [Input("versionNumber")]
        public Input<string>? VersionNumber { get; set; }

        public GetSecretbundleInvokeArgs()
        {
        }
        public static new GetSecretbundleInvokeArgs Empty => new GetSecretbundleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretbundleResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Customer-provided contextual metadata for the secret.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// The contents of the secret.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretbundleSecretBundleContentResult> SecretBundleContents;
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        public readonly string SecretId;
        public readonly string? SecretVersionName;
        public readonly string? Stage;
        /// <summary>
        /// A list of possible rotation states for the secret version.
        /// </summary>
        public readonly ImmutableArray<string> Stages;
        /// <summary>
        /// The time when the secret bundle was created.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// An optional property indicating when the secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfExpiry;
        /// <summary>
        /// The name of the secret version. Labels are unique across the different versions of a particular secret.
        /// </summary>
        public readonly string VersionName;
        /// <summary>
        /// The version number of the secret.
        /// </summary>
        public readonly string VersionNumber;

        [OutputConstructor]
        private GetSecretbundleResult(
            string id,

            ImmutableDictionary<string, string> metadata,

            ImmutableArray<Outputs.GetSecretbundleSecretBundleContentResult> secretBundleContents,

            string secretId,

            string? secretVersionName,

            string? stage,

            ImmutableArray<string> stages,

            string timeCreated,

            string timeOfDeletion,

            string timeOfExpiry,

            string versionName,

            string versionNumber)
        {
            Id = id;
            Metadata = metadata;
            SecretBundleContents = secretBundleContents;
            SecretId = secretId;
            SecretVersionName = secretVersionName;
            Stage = stage;
            Stages = stages;
            TimeCreated = timeCreated;
            TimeOfDeletion = timeOfDeletion;
            TimeOfExpiry = timeOfExpiry;
            VersionName = versionName;
            VersionNumber = versionNumber;
        }
    }
}
