// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.SecurityAttribute
{
    public static class GetSecurityAttributeNamespaces
    {
        /// <summary>
        /// This data source provides the list of Security Attribute Namespaces in Oracle Cloud Infrastructure Security Attribute service.
        /// 
        /// Lists the security attribute namespaces in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAttributeNamespaces = Oci.SecurityAttribute.GetSecurityAttributeNamespaces.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = securityAttributeNamespaceCompartmentIdInSubtree,
        ///         Name = securityAttributeNamespaceName,
        ///         State = securityAttributeNamespaceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAttributeNamespacesResult> InvokeAsync(GetSecurityAttributeNamespacesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAttributeNamespacesResult>("oci:SecurityAttribute/getSecurityAttributeNamespaces:getSecurityAttributeNamespaces", args ?? new GetSecurityAttributeNamespacesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Attribute Namespaces in Oracle Cloud Infrastructure Security Attribute service.
        /// 
        /// Lists the security attribute namespaces in the specified compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAttributeNamespaces = Oci.SecurityAttribute.GetSecurityAttributeNamespaces.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         CompartmentIdInSubtree = securityAttributeNamespaceCompartmentIdInSubtree,
        ///         Name = securityAttributeNamespaceName,
        ///         State = securityAttributeNamespaceState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAttributeNamespacesResult> Invoke(GetSecurityAttributeNamespacesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAttributeNamespacesResult>("oci:SecurityAttribute/getSecurityAttributeNamespaces:getSecurityAttributeNamespaces", args ?? new GetSecurityAttributeNamespacesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAttributeNamespacesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// An optional boolean parameter indicating whether to retrieve all security attribute namespaces in subcompartments. If this parameter is not specified, only the namespaces defined in the specified compartment are retrieved.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public bool? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private List<Inputs.GetSecurityAttributeNamespacesFilterArgs>? _filters;
        public List<Inputs.GetSecurityAttributeNamespacesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAttributeNamespacesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetSecurityAttributeNamespacesArgs()
        {
        }
        public static new GetSecurityAttributeNamespacesArgs Empty => new GetSecurityAttributeNamespacesArgs();
    }

    public sealed class GetSecurityAttributeNamespacesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// An optional boolean parameter indicating whether to retrieve all security attribute namespaces in subcompartments. If this parameter is not specified, only the namespaces defined in the specified compartment are retrieved.
        /// </summary>
        [Input("compartmentIdInSubtree")]
        public Input<bool>? CompartmentIdInSubtree { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSecurityAttributeNamespacesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAttributeNamespacesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAttributeNamespacesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetSecurityAttributeNamespacesInvokeArgs()
        {
        }
        public static new GetSecurityAttributeNamespacesInvokeArgs Empty => new GetSecurityAttributeNamespacesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAttributeNamespacesResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the security attribute namespace.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly bool? CompartmentIdInSubtree;
        public readonly ImmutableArray<Outputs.GetSecurityAttributeNamespacesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the security attribute namespace. It must be unique across all security attribute namespaces in the tenancy and cannot be changed.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of security_attribute_namespaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAttributeNamespacesSecurityAttributeNamespaceResult> SecurityAttributeNamespaces;
        /// <summary>
        /// The security attribute namespace's current state. After creating a security attribute namespace, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute namespace, make sure its `lifecycleState` is INACTIVE.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetSecurityAttributeNamespacesResult(
            string? compartmentId,

            bool? compartmentIdInSubtree,

            ImmutableArray<Outputs.GetSecurityAttributeNamespacesFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetSecurityAttributeNamespacesSecurityAttributeNamespaceResult> securityAttributeNamespaces,

            string? state)
        {
            CompartmentId = compartmentId;
            CompartmentIdInSubtree = compartmentIdInSubtree;
            Filters = filters;
            Id = id;
            Name = name;
            SecurityAttributeNamespaces = securityAttributeNamespaces;
            State = state;
        }
    }
}
