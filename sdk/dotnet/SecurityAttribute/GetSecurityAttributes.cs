// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.SecurityAttribute
{
    public static class GetSecurityAttributes
    {
        /// <summary>
        /// This data source provides the list of Security Attributes in Oracle Cloud Infrastructure Security Attribute service.
        /// 
        /// Lists the security attributes in the specified namespace.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAttributes = Oci.SecurityAttribute.GetSecurityAttributes.Invoke(new()
        ///     {
        ///         SecurityAttributeNamespaceId = testSecurityAttributeNamespace.Id,
        ///         State = securityAttributeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityAttributesResult> InvokeAsync(GetSecurityAttributesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityAttributesResult>("oci:SecurityAttribute/getSecurityAttributes:getSecurityAttributes", args ?? new GetSecurityAttributesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Security Attributes in Oracle Cloud Infrastructure Security Attribute service.
        /// 
        /// Lists the security attributes in the specified namespace.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecurityAttributes = Oci.SecurityAttribute.GetSecurityAttributes.Invoke(new()
        ///     {
        ///         SecurityAttributeNamespaceId = testSecurityAttributeNamespace.Id,
        ///         State = securityAttributeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityAttributesResult> Invoke(GetSecurityAttributesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityAttributesResult>("oci:SecurityAttribute/getSecurityAttributes:getSecurityAttributes", args ?? new GetSecurityAttributesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityAttributesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSecurityAttributesFilterArgs>? _filters;
        public List<Inputs.GetSecurityAttributesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityAttributesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the security attribute namespace.
        /// </summary>
        [Input("securityAttributeNamespaceId", required: true)]
        public string SecurityAttributeNamespaceId { get; set; } = null!;

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetSecurityAttributesArgs()
        {
        }
        public static new GetSecurityAttributesArgs Empty => new GetSecurityAttributesArgs();
    }

    public sealed class GetSecurityAttributesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSecurityAttributesFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecurityAttributesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityAttributesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the security attribute namespace.
        /// </summary>
        [Input("securityAttributeNamespaceId", required: true)]
        public Input<string> SecurityAttributeNamespaceId { get; set; } = null!;

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetSecurityAttributesInvokeArgs()
        {
        }
        public static new GetSecurityAttributesInvokeArgs Empty => new GetSecurityAttributesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityAttributesResult
    {
        public readonly ImmutableArray<Outputs.GetSecurityAttributesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the security attribute namespace that contains the security attribute definition.
        /// </summary>
        public readonly string SecurityAttributeNamespaceId;
        /// <summary>
        /// The list of security_attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityAttributesSecurityAttributeResult> SecurityAttributes;
        /// <summary>
        /// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetSecurityAttributesResult(
            ImmutableArray<Outputs.GetSecurityAttributesFilterResult> filters,

            string id,

            string securityAttributeNamespaceId,

            ImmutableArray<Outputs.GetSecurityAttributesSecurityAttributeResult> securityAttributes,

            string? state)
        {
            Filters = filters;
            Id = id;
            SecurityAttributeNamespaceId = securityAttributeNamespaceId;
            SecurityAttributes = securityAttributes;
            State = state;
        }
    }
}
