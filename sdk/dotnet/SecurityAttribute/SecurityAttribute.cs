// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.SecurityAttribute
{
    /// <summary>
    /// This resource provides the Security Attribute resource in Oracle Cloud Infrastructure Security Attribute service.
    /// 
    /// Creates a new security attribute in the specified security attribute namespace.
    /// 
    /// The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
    /// security attribute.
    /// 
    /// You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
    /// and cannot be changed. The only valid characters for security attribute names are:Â 0-9, A-Z, a-z, -, _ characters.
    /// Names are case insensitive. That means, for example, "mySecurityAttribute" and "mysecurityattribute" are not allowed in the same namespace.
    /// If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
    /// 
    /// The security attribute must have a *description*. It does not have to be unique, and you can change it with
    /// [UpdateSecurityAttribute](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/Tag/UpdateSecurityAttribute).
    /// 
    /// When a validator is specified, The security attribute must have a value type. Security attribute can use either a static value or a list of possible values. Static values are entered by a user when applying the security attribute to a resource. Lists are created by the user and the user must apply a value from the list. Lists are validated.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSecurityAttribute = new Oci.SecurityAttribute.SecurityAttribute("test_security_attribute", new()
    ///     {
    ///         Description = securityAttributeDescription,
    ///         Name = securityAttributeName,
    ///         SecurityAttributeNamespaceId = testSecurityAttributeNamespace.Id,
    ///         Validator = new Oci.SecurityAttribute.Inputs.SecurityAttributeValidatorArgs
    ///         {
    ///             ValidatorType = securityAttributeValidatorValidatorType,
    ///             Values = securityAttributeValidatorValues,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SecurityAttributes can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:SecurityAttribute/securityAttribute:SecurityAttribute test_security_attribute "securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}"
    /// ```
    /// </summary>
    [OciResourceType("oci:SecurityAttribute/securityAttribute:SecurityAttribute")]
    public partial class SecurityAttribute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the compartment that contains the security attribute definition.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The description you assign to the security attribute during creation.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
        /// </summary>
        [Output("isRetired")]
        public Output<bool> IsRetired { get; private set; } = null!;

        /// <summary>
        /// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The OCID of the security attribute namespace.
        /// </summary>
        [Output("securityAttributeNamespaceId")]
        public Output<string> SecurityAttributeNamespaceId { get; private set; } = null!;

        /// <summary>
        /// The name of the security attribute namespace that contains the security attribute.
        /// </summary>
        [Output("securityAttributeNamespaceName")]
        public Output<string> SecurityAttributeNamespaceName { get; private set; } = null!;

        /// <summary>
        /// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The data type of the security attribute.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
        /// 
        /// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
        /// 
        /// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
        /// </summary>
        [Output("validator")]
        public Output<Outputs.SecurityAttributeValidator?> Validator { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityAttribute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityAttribute(string name, SecurityAttributeArgs args, CustomResourceOptions? options = null)
            : base("oci:SecurityAttribute/securityAttribute:SecurityAttribute", name, args ?? new SecurityAttributeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityAttribute(string name, Input<string> id, SecurityAttributeState? state = null, CustomResourceOptions? options = null)
            : base("oci:SecurityAttribute/securityAttribute:SecurityAttribute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityAttribute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityAttribute Get(string name, Input<string> id, SecurityAttributeState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityAttribute(name, id, state, options);
        }
    }

    public sealed class SecurityAttributeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The description you assign to the security attribute during creation.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
        /// </summary>
        [Input("isRetired")]
        public Input<bool>? IsRetired { get; set; }

        /// <summary>
        /// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The OCID of the security attribute namespace.
        /// </summary>
        [Input("securityAttributeNamespaceId", required: true)]
        public Input<string> SecurityAttributeNamespaceId { get; set; } = null!;

        /// <summary>
        /// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
        /// 
        /// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
        /// 
        /// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
        /// </summary>
        [Input("validator")]
        public Input<Inputs.SecurityAttributeValidatorArgs>? Validator { get; set; }

        public SecurityAttributeArgs()
        {
        }
        public static new SecurityAttributeArgs Empty => new SecurityAttributeArgs();
    }

    public sealed class SecurityAttributeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the compartment that contains the security attribute definition.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The description you assign to the security attribute during creation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether the security attribute is retired. See [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
        /// </summary>
        [Input("isRetired")]
        public Input<bool>? IsRetired { get; set; }

        /// <summary>
        /// The name you assign to the security attribute during creation. This is the security attribute key. The name must be unique within the namespace and cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The OCID of the security attribute namespace.
        /// </summary>
        [Input("securityAttributeNamespaceId")]
        public Input<string>? SecurityAttributeNamespaceId { get; set; }

        /// <summary>
        /// The name of the security attribute namespace that contains the security attribute.
        /// </summary>
        [Input("securityAttributeNamespaceName")]
        public Input<string>? SecurityAttributeNamespaceName { get; set; }

        /// <summary>
        /// The security attribute's current state. After creating a security attribute, make sure its `lifecycleState` is ACTIVE before using it. After retiring a security attribute, make sure its `lifecycleState` is INACTIVE before using it. If you delete a security attribute, you cannot delete another security attribute until the deleted security attribute's `lifecycleState` changes from DELETING to DELETED.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Date and time the security attribute was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The data type of the security attribute.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// (Updatable) Validates a security attribute value. Each validator performs validation steps in addition to the standard validation for security attribute values. For more information, see [Limits on Security Attributes](https://docs.cloud.oracle.com/iaas/Content/zero-trust-packet-routing/overview.htm).
        /// 
        /// If you define a validator after a value has been set for a security attribute, then any updates that attempt to change the value must pass the additional validation defined by the current rule. Previously set values (even those that would fail the current validation) are not updated. You can still update other attributes to resources that contain a non-valid security attribute.
        /// 
        /// To clear the validator call UpdateSecurityAttribute with [DefaultSecuirtyAttributeValidator](https://docs.cloud.oracle.com/iaas/api/#/en/securityattribute/latest/datatypes/DefaultTagDefinitionValidator).
        /// </summary>
        [Input("validator")]
        public Input<Inputs.SecurityAttributeValidatorGetArgs>? Validator { get; set; }

        public SecurityAttributeState()
        {
        }
        public static new SecurityAttributeState Empty => new SecurityAttributeState();
    }
}
