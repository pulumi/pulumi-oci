// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceCatalog
{
    /// <summary>
    /// This resource provides the Service Catalog Association resource in Oracle Cloud Infrastructure Service Catalog service.
    /// 
    /// Creates an association between service catalog and a resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testServiceCatalogAssociation = new Oci.ServiceCatalog.CatalogAssociation("testServiceCatalogAssociation", new()
    ///     {
    ///         EntityId = oci_service_catalog_entity.Test_entity.Id,
    ///         ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
    ///         EntityType = @var.Service_catalog_association_entity_type,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ServiceCatalogAssociations can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:ServiceCatalog/catalogAssociation:CatalogAssociation test_service_catalog_association "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:ServiceCatalog/catalogAssociation:CatalogAssociation")]
    public partial class CatalogAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the entity being associated with service catalog.
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        /// <summary>
        /// The type of the entity that is associated with the service catalog.
        /// </summary>
        [Output("entityType")]
        public Output<string> EntityType { get; private set; } = null!;

        /// <summary>
        /// Identifier of the service catalog.
        /// </summary>
        [Output("serviceCatalogId")]
        public Output<string> ServiceCatalogId { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was associated with service catalog.
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogAssociation(string name, CatalogAssociationArgs args, CustomResourceOptions? options = null)
            : base("oci:ServiceCatalog/catalogAssociation:CatalogAssociation", name, args ?? new CatalogAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogAssociation(string name, Input<string> id, CatalogAssociationState? state = null, CustomResourceOptions? options = null)
            : base("oci:ServiceCatalog/catalogAssociation:CatalogAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogAssociation Get(string name, Input<string> id, CatalogAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogAssociation(name, id, state, options);
        }
    }

    public sealed class CatalogAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the entity being associated with service catalog.
        /// </summary>
        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        /// <summary>
        /// The type of the entity that is associated with the service catalog.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// Identifier of the service catalog.
        /// </summary>
        [Input("serviceCatalogId", required: true)]
        public Input<string> ServiceCatalogId { get; set; } = null!;

        public CatalogAssociationArgs()
        {
        }
        public static new CatalogAssociationArgs Empty => new CatalogAssociationArgs();
    }

    public sealed class CatalogAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the entity being associated with service catalog.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// The type of the entity that is associated with the service catalog.
        /// </summary>
        [Input("entityType")]
        public Input<string>? EntityType { get; set; }

        /// <summary>
        /// Identifier of the service catalog.
        /// </summary>
        [Input("serviceCatalogId")]
        public Input<string>? ServiceCatalogId { get; set; }

        /// <summary>
        /// Timestamp of when the resource was associated with service catalog.
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        public CatalogAssociationState()
        {
        }
        public static new CatalogAssociationState Empty => new CatalogAssociationState();
    }
}
