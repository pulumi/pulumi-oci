// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceCatalog
{
    public static class GetServiceCatalog
    {
        /// <summary>
        /// This data source provides details about a specific Service Catalog resource in Oracle Cloud Infrastructure Service Catalog service.
        /// 
        /// Gets detailed information about the service catalog including name, compartmentId
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceCatalog = Oci.ServiceCatalog.GetServiceCatalog.Invoke(new()
        ///     {
        ///         ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceCatalogResult> InvokeAsync(GetServiceCatalogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceCatalogResult>("oci:ServiceCatalog/getServiceCatalog:getServiceCatalog", args ?? new GetServiceCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Service Catalog resource in Oracle Cloud Infrastructure Service Catalog service.
        /// 
        /// Gets detailed information about the service catalog including name, compartmentId
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceCatalog = Oci.ServiceCatalog.GetServiceCatalog.Invoke(new()
        ///     {
        ///         ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceCatalogResult> Invoke(GetServiceCatalogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceCatalogResult>("oci:ServiceCatalog/getServiceCatalog:getServiceCatalog", args ?? new GetServiceCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the service catalog.
        /// </summary>
        [Input("serviceCatalogId", required: true)]
        public string ServiceCatalogId { get; set; } = null!;

        public GetServiceCatalogArgs()
        {
        }
        public static new GetServiceCatalogArgs Empty => new GetServiceCatalogArgs();
    }

    public sealed class GetServiceCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the service catalog.
        /// </summary>
        [Input("serviceCatalogId", required: true)]
        public Input<string> ServiceCatalogId { get; set; } = null!;

        public GetServiceCatalogInvokeArgs()
        {
        }
        public static new GetServiceCatalogInvokeArgs Empty => new GetServiceCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceCatalogResult
    {
        /// <summary>
        /// The Compartment id where the service catalog exists
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The name of the service catalog.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The unique identifier for the Service catalog.
        /// </summary>
        public readonly string Id;
        public readonly string ServiceCatalogId;
        /// <summary>
        /// The lifecycle state of the service catalog.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the service catalog was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the service catalog was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetServiceCatalogResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string serviceCatalogId,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            ServiceCatalogId = serviceCatalogId;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
