// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceCatalog
{
    public static class GetServiceCatalogs
    {
        /// <summary>
        /// This data source provides the list of Service Catalogs in Oracle Cloud Infrastructure Service Catalog service.
        /// 
        /// Lists all the service catalogs in the given compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceCatalogs = Oci.ServiceCatalog.GetServiceCatalogs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Service_catalog_display_name,
        ///         ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceCatalogsResult> InvokeAsync(GetServiceCatalogsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceCatalogsResult>("oci:ServiceCatalog/getServiceCatalogs:getServiceCatalogs", args ?? new GetServiceCatalogsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Service Catalogs in Oracle Cloud Infrastructure Service Catalog service.
        /// 
        /// Lists all the service catalogs in the given compartment.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testServiceCatalogs = Oci.ServiceCatalog.GetServiceCatalogs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Service_catalog_display_name,
        ///         ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceCatalogsResult> Invoke(GetServiceCatalogsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceCatalogsResult>("oci:ServiceCatalog/getServiceCatalogs:getServiceCatalogs", args ?? new GetServiceCatalogsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceCatalogsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Exact match name filter.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetServiceCatalogsFilterArgs>? _filters;
        public List<Inputs.GetServiceCatalogsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServiceCatalogsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the service catalog.
        /// </summary>
        [Input("serviceCatalogId")]
        public string? ServiceCatalogId { get; set; }

        public GetServiceCatalogsArgs()
        {
        }
        public static new GetServiceCatalogsArgs Empty => new GetServiceCatalogsArgs();
    }

    public sealed class GetServiceCatalogsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Exact match name filter.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetServiceCatalogsFilterInputArgs>? _filters;
        public InputList<Inputs.GetServiceCatalogsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServiceCatalogsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the service catalog.
        /// </summary>
        [Input("serviceCatalogId")]
        public Input<string>? ServiceCatalogId { get; set; }

        public GetServiceCatalogsInvokeArgs()
        {
        }
        public static new GetServiceCatalogsInvokeArgs Empty => new GetServiceCatalogsInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceCatalogsResult
    {
        /// <summary>
        /// The Compartment id where the service catalog exists
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The name of the service catalog.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetServiceCatalogsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of service_catalog_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceCatalogsServiceCatalogCollectionResult> ServiceCatalogCollections;
        public readonly string? ServiceCatalogId;

        [OutputConstructor]
        private GetServiceCatalogsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetServiceCatalogsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetServiceCatalogsServiceCatalogCollectionResult> serviceCatalogCollections,

            string? serviceCatalogId)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ServiceCatalogCollections = serviceCatalogCollections;
            ServiceCatalogId = serviceCatalogId;
        }
    }
}
