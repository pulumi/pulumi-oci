// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceCatalog.Outputs
{

    [OutputType]
    public sealed class GetPrivateApplicationsPrivateApplicationCollectionItemResult
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Exact match name filter.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The unique identifier for the private application in Marketplace.
        /// </summary>
        public readonly string Id;
        public readonly string LogoFileBase64encoded;
        /// <summary>
        /// The model for uploaded binary data, like logos and images.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrivateApplicationsPrivateApplicationCollectionItemLogoResult> Logos;
        /// <summary>
        /// A long description of the private application.
        /// </summary>
        public readonly string LongDescription;
        public readonly ImmutableArray<Outputs.GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetailResult> PackageDetails;
        /// <summary>
        /// Type of packages within this private application.
        /// </summary>
        public readonly string PackageType;
        /// <summary>
        /// A short description of the private application.
        /// </summary>
        public readonly string ShortDescription;
        /// <summary>
        /// The lifecycle state of the private application.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The date and time the private application was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-05-26T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the private application was last modified, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2021-12-10T05:10:29.721Z`
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetPrivateApplicationsPrivateApplicationCollectionItemResult(
            string compartmentId,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string logoFileBase64encoded,

            ImmutableArray<Outputs.GetPrivateApplicationsPrivateApplicationCollectionItemLogoResult> logos,

            string longDescription,

            ImmutableArray<Outputs.GetPrivateApplicationsPrivateApplicationCollectionItemPackageDetailResult> packageDetails,

            string packageType,

            string shortDescription,

            string state,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            LogoFileBase64encoded = logoFileBase64encoded;
            Logos = logos;
            LongDescription = longDescription;
            PackageDetails = packageDetails;
            PackageType = packageType;
            ShortDescription = shortDescription;
            State = state;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
