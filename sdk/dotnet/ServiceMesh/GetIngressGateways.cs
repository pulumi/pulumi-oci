// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceMesh
{
    public static class GetIngressGateways
    {
        /// <summary>
        /// This data source provides the list of Ingress Gateways in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Returns a list of IngressGateway objects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIngressGateways = Oci.ServiceMesh.GetIngressGateways.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = ingressGatewayId,
        ///         MeshId = testMesh.Id,
        ///         Name = ingressGatewayName,
        ///         State = ingressGatewayState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIngressGatewaysResult> InvokeAsync(GetIngressGatewaysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIngressGatewaysResult>("oci:ServiceMesh/getIngressGateways:getIngressGateways", args ?? new GetIngressGatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Ingress Gateways in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Returns a list of IngressGateway objects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIngressGateways = Oci.ServiceMesh.GetIngressGateways.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = ingressGatewayId,
        ///         MeshId = testMesh.Id,
        ///         Name = ingressGatewayName,
        ///         State = ingressGatewayState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIngressGatewaysResult> Invoke(GetIngressGatewaysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIngressGatewaysResult>("oci:ServiceMesh/getIngressGateways:getIngressGateways", args ?? new GetIngressGatewaysInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Ingress Gateways in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Returns a list of IngressGateway objects.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIngressGateways = Oci.ServiceMesh.GetIngressGateways.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         Id = ingressGatewayId,
        ///         MeshId = testMesh.Id,
        ///         Name = ingressGatewayName,
        ///         State = ingressGatewayState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIngressGatewaysResult> Invoke(GetIngressGatewaysInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIngressGatewaysResult>("oci:ServiceMesh/getIngressGateways:getIngressGateways", args ?? new GetIngressGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIngressGatewaysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetIngressGatewaysFilterArgs>? _filters;
        public List<Inputs.GetIngressGatewaysFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIngressGatewaysFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique IngressGateway identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Unique Mesh identifier.
        /// </summary>
        [Input("meshId")]
        public string? MeshId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the life cycle state given.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetIngressGatewaysArgs()
        {
        }
        public static new GetIngressGatewaysArgs Empty => new GetIngressGatewaysArgs();
    }

    public sealed class GetIngressGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetIngressGatewaysFilterInputArgs>? _filters;
        public InputList<Inputs.GetIngressGatewaysFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetIngressGatewaysFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique IngressGateway identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Unique Mesh identifier.
        /// </summary>
        [Input("meshId")]
        public Input<string>? MeshId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the life cycle state given.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetIngressGatewaysInvokeArgs()
        {
        }
        public static new GetIngressGatewaysInvokeArgs Empty => new GetIngressGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetIngressGatewaysResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetIngressGatewaysFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of ingress_gateway_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIngressGatewaysIngressGatewayCollectionResult> IngressGatewayCollections;
        /// <summary>
        /// The OCID of the service mesh in which this ingress gateway is created.
        /// </summary>
        public readonly string? MeshId;
        /// <summary>
        /// A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the Resource.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetIngressGatewaysResult(
            string compartmentId,

            ImmutableArray<Outputs.GetIngressGatewaysFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetIngressGatewaysIngressGatewayCollectionResult> ingressGatewayCollections,

            string? meshId,

            string? name,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            IngressGatewayCollections = ingressGatewayCollections;
            MeshId = meshId;
            Name = name;
            State = state;
        }
    }
}
