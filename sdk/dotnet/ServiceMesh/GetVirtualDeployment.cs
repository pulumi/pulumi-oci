// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceMesh
{
    public static class GetVirtualDeployment
    {
        /// <summary>
        /// This data source provides details about a specific Virtual Deployment resource in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Gets a VirtualDeployment by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualDeployment = Oci.ServiceMesh.GetVirtualDeployment.Invoke(new()
        ///     {
        ///         VirtualDeploymentId = oci_service_mesh_virtual_deployment.Test_virtual_deployment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualDeploymentResult> InvokeAsync(GetVirtualDeploymentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualDeploymentResult>("oci:ServiceMesh/getVirtualDeployment:getVirtualDeployment", args ?? new GetVirtualDeploymentArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Virtual Deployment resource in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Gets a VirtualDeployment by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualDeployment = Oci.ServiceMesh.GetVirtualDeployment.Invoke(new()
        ///     {
        ///         VirtualDeploymentId = oci_service_mesh_virtual_deployment.Test_virtual_deployment.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualDeploymentResult> Invoke(GetVirtualDeploymentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualDeploymentResult>("oci:ServiceMesh/getVirtualDeployment:getVirtualDeployment", args ?? new GetVirtualDeploymentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualDeploymentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique VirtualDeployment identifier.
        /// </summary>
        [Input("virtualDeploymentId", required: true)]
        public string VirtualDeploymentId { get; set; } = null!;

        public GetVirtualDeploymentArgs()
        {
        }
        public static new GetVirtualDeploymentArgs Empty => new GetVirtualDeploymentArgs();
    }

    public sealed class GetVirtualDeploymentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique VirtualDeployment identifier.
        /// </summary>
        [Input("virtualDeploymentId", required: true)]
        public Input<string> VirtualDeploymentId { get; set; } = null!;

        public GetVirtualDeploymentInvokeArgs()
        {
        }
        public static new GetVirtualDeploymentInvokeArgs Empty => new GetVirtualDeploymentInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualDeploymentResult
    {
        /// <summary>
        /// This configuration determines if logging is enabled and where the logs will be output.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualDeploymentAccessLoggingResult> AccessLoggings;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// The listeners for the virtual deployment
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualDeploymentListenerResult> Listeners;
        /// <summary>
        /// A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Service Discovery configuration for virtual deployments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualDeploymentServiceDiscoveryResult> ServiceDiscoveries;
        /// <summary>
        /// The current state of the Resource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The time when this resource was created in an RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time when this resource was updated in an RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeUpdated;
        public readonly string VirtualDeploymentId;
        /// <summary>
        /// The OCID of the virtual service in which this virtual deployment is created.
        /// </summary>
        public readonly string VirtualServiceId;

        [OutputConstructor]
        private GetVirtualDeploymentResult(
            ImmutableArray<Outputs.GetVirtualDeploymentAccessLoggingResult> accessLoggings,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string description,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string lifecycleDetails,

            ImmutableArray<Outputs.GetVirtualDeploymentListenerResult> listeners,

            string name,

            ImmutableArray<Outputs.GetVirtualDeploymentServiceDiscoveryResult> serviceDiscoveries,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated,

            string virtualDeploymentId,

            string virtualServiceId)
        {
            AccessLoggings = accessLoggings;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            Listeners = listeners;
            Name = name;
            ServiceDiscoveries = serviceDiscoveries;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            VirtualDeploymentId = virtualDeploymentId;
            VirtualServiceId = virtualServiceId;
        }
    }
}
