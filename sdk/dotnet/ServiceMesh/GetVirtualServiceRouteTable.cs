// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceMesh
{
    public static class GetVirtualServiceRouteTable
    {
        /// <summary>
        /// This data source provides details about a specific Virtual Service Route Table resource in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Gets a VirtualServiceRouteTable by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualServiceRouteTable = Oci.ServiceMesh.GetVirtualServiceRouteTable.Invoke(new()
        ///     {
        ///         VirtualServiceRouteTableId = oci_service_mesh_virtual_service_route_table.Test_virtual_service_route_table.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualServiceRouteTableResult> InvokeAsync(GetVirtualServiceRouteTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualServiceRouteTableResult>("oci:ServiceMesh/getVirtualServiceRouteTable:getVirtualServiceRouteTable", args ?? new GetVirtualServiceRouteTableArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Virtual Service Route Table resource in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Gets a VirtualServiceRouteTable by identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualServiceRouteTable = Oci.ServiceMesh.GetVirtualServiceRouteTable.Invoke(new()
        ///     {
        ///         VirtualServiceRouteTableId = oci_service_mesh_virtual_service_route_table.Test_virtual_service_route_table.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualServiceRouteTableResult> Invoke(GetVirtualServiceRouteTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualServiceRouteTableResult>("oci:ServiceMesh/getVirtualServiceRouteTable:getVirtualServiceRouteTable", args ?? new GetVirtualServiceRouteTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualServiceRouteTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique VirtualServiceRouteTable identifier.
        /// </summary>
        [Input("virtualServiceRouteTableId", required: true)]
        public string VirtualServiceRouteTableId { get; set; } = null!;

        public GetVirtualServiceRouteTableArgs()
        {
        }
        public static new GetVirtualServiceRouteTableArgs Empty => new GetVirtualServiceRouteTableArgs();
    }

    public sealed class GetVirtualServiceRouteTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique VirtualServiceRouteTable identifier.
        /// </summary>
        [Input("virtualServiceRouteTableId", required: true)]
        public Input<string> VirtualServiceRouteTableId { get; set; } = null!;

        public GetVirtualServiceRouteTableInvokeArgs()
        {
        }
        public static new GetVirtualServiceRouteTableInvokeArgs Empty => new GetVirtualServiceRouteTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualServiceRouteTableResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? DefinedTags;
        /// <summary>
        /// Description of the resource. It can be changed after creation. Avoid entering confidential information.  Example: `This is my new resource`
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? FreeformTags;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed state.
        /// </summary>
        public readonly string? LifecycleDetails;
        /// <summary>
        /// A user-friendly name. The name must be unique within the same virtual service and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The priority of the route table. Lower value means higher priority. The routes are declared based on the priority.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The route rules for the virtual service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualServiceRouteTableRouteRuleResult> RouteRules;
        /// <summary>
        /// The current state of the Resource.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object>? SystemTags;
        /// <summary>
        /// The time when this resource was created in an RFC3339 formatted datetime string.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// The time when this resource was updated in an RFC3339 formatted datetime string.
        /// </summary>
        public readonly string? TimeUpdated;
        /// <summary>
        /// The OCID of the virtual service in which this virtual service route table is created.
        /// </summary>
        public readonly string? VirtualServiceId;
        public readonly string VirtualServiceRouteTableId;

        [OutputConstructor]
        private GetVirtualServiceRouteTableResult(
            string? compartmentId,

            ImmutableDictionary<string, object>? definedTags,

            string? description,

            ImmutableDictionary<string, object>? freeformTags,

            string? id,

            string? lifecycleDetails,

            string? name,

            int? priority,

            ImmutableArray<Outputs.GetVirtualServiceRouteTableRouteRuleResult> routeRules,

            string? state,

            ImmutableDictionary<string, object>? systemTags,

            string? timeCreated,

            string? timeUpdated,

            string? virtualServiceId,

            string virtualServiceRouteTableId)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            Description = description;
            FreeformTags = freeformTags;
            Id = id;
            LifecycleDetails = lifecycleDetails;
            Name = name;
            Priority = priority;
            RouteRules = routeRules;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
            VirtualServiceId = virtualServiceId;
            VirtualServiceRouteTableId = virtualServiceRouteTableId;
        }
    }
}
