// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.ServiceMesh
{
    public static class GetVirtualServices
    {
        /// <summary>
        /// This data source provides the list of Virtual Services in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Returns a list of VirtualService objects.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualServices = Oci.ServiceMesh.GetVirtualServices.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Id = @var.Virtual_service_id,
        ///         MeshId = oci_service_mesh_mesh.Test_mesh.Id,
        ///         Name = @var.Virtual_service_name,
        ///         State = @var.Virtual_service_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualServicesResult> InvokeAsync(GetVirtualServicesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualServicesResult>("oci:ServiceMesh/getVirtualServices:getVirtualServices", args ?? new GetVirtualServicesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Virtual Services in Oracle Cloud Infrastructure Service Mesh service.
        /// 
        /// Returns a list of VirtualService objects.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVirtualServices = Oci.ServiceMesh.GetVirtualServices.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Id = @var.Virtual_service_id,
        ///         MeshId = oci_service_mesh_mesh.Test_mesh.Id,
        ///         Name = @var.Virtual_service_name,
        ///         State = @var.Virtual_service_state,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualServicesResult> Invoke(GetVirtualServicesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualServicesResult>("oci:ServiceMesh/getVirtualServices:getVirtualServices", args ?? new GetVirtualServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualServicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetVirtualServicesFilterArgs>? _filters;
        public List<Inputs.GetVirtualServicesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVirtualServicesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique VirtualService identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Unique Mesh identifier.
        /// </summary>
        [Input("meshId")]
        public string? MeshId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the life cycle state given.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetVirtualServicesArgs()
        {
        }
        public static new GetVirtualServicesArgs Empty => new GetVirtualServicesArgs();
    }

    public sealed class GetVirtualServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetVirtualServicesFilterInputArgs>? _filters;
        public InputList<Inputs.GetVirtualServicesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVirtualServicesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Unique VirtualService identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Unique Mesh identifier.
        /// </summary>
        [Input("meshId")]
        public Input<string>? MeshId { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the life cycle state given.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetVirtualServicesInvokeArgs()
        {
        }
        public static new GetVirtualServicesInvokeArgs Empty => new GetVirtualServicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualServicesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetVirtualServicesFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The OCID of the service mesh in which this virtual service is created.
        /// </summary>
        public readonly string? MeshId;
        /// <summary>
        /// A user-friendly name. The name has to be unique within the same service mesh and cannot be changed after creation. Avoid entering confidential information.  Example: `My unique resource name`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the Resource.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of virtual_service_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualServicesVirtualServiceCollectionResult> VirtualServiceCollections;

        [OutputConstructor]
        private GetVirtualServicesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetVirtualServicesFilterResult> filters,

            string? id,

            string? meshId,

            string? name,

            string? state,

            ImmutableArray<Outputs.GetVirtualServicesVirtualServiceCollectionResult> virtualServiceCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            MeshId = meshId;
            Name = name;
            State = state;
            VirtualServiceCollections = virtualServiceCollections;
        }
    }
}
