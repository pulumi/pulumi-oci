// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetConfig
    {
        /// <summary>
        /// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Gets the details of a configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfig = Oci.StackMonitoring.GetConfig.Invoke(new()
        ///     {
        ///         ConfigId = testConfigOciStackMonitoringConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConfigResult> InvokeAsync(GetConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigResult>("oci:StackMonitoring/getConfig:getConfig", args ?? new GetConfigArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Config resource in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Gets the details of a configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfig = Oci.StackMonitoring.GetConfig.Invoke(new()
        ///     {
        ///         ConfigId = testConfigOciStackMonitoringConfig.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConfigResult> Invoke(GetConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigResult>("oci:StackMonitoring/getConfig:getConfig", args ?? new GetConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Config identifier.
        /// </summary>
        [Input("configId", required: true)]
        public string ConfigId { get; set; } = null!;

        public GetConfigArgs()
        {
        }
        public static new GetConfigArgs Empty => new GetConfigArgs();
    }

    public sealed class GetConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique Config identifier.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        public GetConfigInvokeArgs()
        {
        }
        public static new GetConfigInvokeArgs Empty => new GetConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigResult
    {
        /// <summary>
        /// The OCID of the compartment containing the configuration.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string ConfigId;
        /// <summary>
        /// The type of configuration.
        /// </summary>
        public readonly string ConfigType;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The Unique Oracle ID (OCID) that is immutable on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// True if automatic promotion or enterprise extensibility is enabled, false if it is not enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// License edition.
        /// </summary>
        public readonly string License;
        /// <summary>
        /// The type of resource to configure for automatic promotion.
        /// </summary>
        public readonly string ResourceType;
        /// <summary>
        /// The current state of the configuration.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// The time the configuration was created. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The time the Config was updated.
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetConfigResult(
            string compartmentId,

            string configId,

            string configType,

            ImmutableDictionary<string, string> definedTags,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isEnabled,

            string license,

            string resourceType,

            string state,

            ImmutableDictionary<string, string> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            ConfigId = configId;
            ConfigType = configType;
            DefinedTags = definedTags;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            IsEnabled = isEnabled;
            License = license;
            ResourceType = resourceType;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
