// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetConfigs
    {
        /// <summary>
        /// This data source provides the list of Configs in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Get a list of configurations in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfigs = Oci.StackMonitoring.GetConfigs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Config_display_name,
        ///         State = @var.Config_state,
        ///         Type = @var.Config_type,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetConfigsResult> InvokeAsync(GetConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigsResult>("oci:StackMonitoring/getConfigs:getConfigs", args ?? new GetConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Configs in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Get a list of configurations in a compartment.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testConfigs = Oci.StackMonitoring.GetConfigs.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         DisplayName = @var.Config_display_name,
        ///         State = @var.Config_state,
        ///         Type = @var.Config_type,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetConfigsResult> Invoke(GetConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigsResult>("oci:StackMonitoring/getConfigs:getConfigs", args ?? new GetConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetConfigsFilterArgs>? _filters;
        public List<Inputs.GetConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetConfigsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the Config.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return only configuration items for a given config type. The only valid config type is `"AUTO_PROMOTE"`
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetConfigsArgs()
        {
        }
        public static new GetConfigsArgs Empty => new GetConfigsArgs();
    }

    public sealed class GetConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetConfigsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of the Config.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return only configuration items for a given config type. The only valid config type is `"AUTO_PROMOTE"`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetConfigsInvokeArgs()
        {
        }
        public static new GetConfigsInvokeArgs Empty => new GetConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigsResult
    {
        /// <summary>
        /// The OCID of the compartment containing the configuration.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of config_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConfigsConfigCollectionResult> ConfigCollections;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetConfigsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the configuration.
        /// </summary>
        public readonly string? State;
        public readonly string? Type;

        [OutputConstructor]
        private GetConfigsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetConfigsConfigCollectionResult> configCollections,

            string? displayName,

            ImmutableArray<Outputs.GetConfigsFilterResult> filters,

            string id,

            string? state,

            string? type)
        {
            CompartmentId = compartmentId;
            ConfigCollections = configCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
            Type = type;
        }
    }
}
