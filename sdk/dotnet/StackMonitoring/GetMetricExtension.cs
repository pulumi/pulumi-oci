// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetMetricExtension
    {
        /// <summary>
        /// This data source provides details about a specific Metric Extension resource in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Gets a Metric Extension by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricExtension = Oci.StackMonitoring.GetMetricExtension.Invoke(new()
        ///     {
        ///         MetricExtensionId = oci_stack_monitoring_metric_extension.Test_metric_extension.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetricExtensionResult> InvokeAsync(GetMetricExtensionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricExtensionResult>("oci:StackMonitoring/getMetricExtension:getMetricExtension", args ?? new GetMetricExtensionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Metric Extension resource in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Gets a Metric Extension by identifier
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricExtension = Oci.StackMonitoring.GetMetricExtension.Invoke(new()
        ///     {
        ///         MetricExtensionId = oci_stack_monitoring_metric_extension.Test_metric_extension.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMetricExtensionResult> Invoke(GetMetricExtensionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricExtensionResult>("oci:StackMonitoring/getMetricExtension:getMetricExtension", args ?? new GetMetricExtensionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricExtensionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
        /// </summary>
        [Input("metricExtensionId", required: true)]
        public string MetricExtensionId { get; set; } = null!;

        public GetMetricExtensionArgs()
        {
        }
        public static new GetMetricExtensionArgs Empty => new GetMetricExtensionArgs();
    }

    public sealed class GetMetricExtensionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the metric extension resource.
        /// </summary>
        [Input("metricExtensionId", required: true)]
        public Input<string> MetricExtensionId { get; set; } = null!;

        public GetMetricExtensionInvokeArgs()
        {
        }
        public static new GetMetricExtensionInvokeArgs Empty => new GetMetricExtensionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricExtensionResult
    {
        /// <summary>
        /// Type of possible collection methods.
        /// </summary>
        public readonly string? CollectionMethod;
        /// <summary>
        /// Schedule of metric extension should use RFC 5545 format &gt; recur-rule-part = "FREQ";"INTERVAL" where FREQ rule part identifies the type of recurrence rule. Valid values are "MINUTELY","HOURLY","DAILY" to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
        /// </summary>
        public readonly string? CollectionRecurrences;
        /// <summary>
        /// Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// Created by user
        /// </summary>
        public readonly string? CreatedBy;
        /// <summary>
        /// Description of the metric extension.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Display name of the metric.
        /// </summary>
        public readonly string? DisplayName;
        /// <summary>
        /// List of resource objects on which this metric extension is enabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricExtensionEnabledOnResourceResult> EnabledOnResources;
        /// <summary>
        /// Count of resources on which this metric extension is enabled.
        /// </summary>
        public readonly int? EnabledOnResourcesCount;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of Metric Extension resource
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Last updated by user
        /// </summary>
        public readonly string? LastUpdatedBy;
        public readonly string MetricExtensionId;
        /// <summary>
        /// List of metrics which are part of this metric extension
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricExtensionMetricListResult> MetricLists;
        /// <summary>
        /// Name of the script file
        /// </summary>
        public readonly string? Name;
        public readonly bool? PublishTrigger;
        /// <summary>
        /// Collection method and query properties details of metric extension
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricExtensionQueryPropertyResult> QueryProperties;
        /// <summary>
        /// Resource type to which Metric Extension applies
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The URI path that the user can do a GET on to access the metric extension metadata
        /// </summary>
        public readonly string? ResourceUri;
        /// <summary>
        /// The current lifecycle state of the metric extension
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The current status of the metric extension i.e. whether it is Draft or Published
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Tenant Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        /// </summary>
        public readonly string? TenantId;
        /// <summary>
        /// Metric Extension creation time. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string? TimeCreated;
        /// <summary>
        /// Metric Extension update time. An RFC3339 formatted datetime string.
        /// </summary>
        public readonly string? TimeUpdated;

        [OutputConstructor]
        private GetMetricExtensionResult(
            string? collectionMethod,

            string? collectionRecurrences,

            string? compartmentId,

            string? createdBy,

            string? description,

            string? displayName,

            ImmutableArray<Outputs.GetMetricExtensionEnabledOnResourceResult> enabledOnResources,

            int? enabledOnResourcesCount,

            string? id,

            string? lastUpdatedBy,

            string metricExtensionId,

            ImmutableArray<Outputs.GetMetricExtensionMetricListResult> metricLists,

            string? name,

            bool? publishTrigger,

            ImmutableArray<Outputs.GetMetricExtensionQueryPropertyResult> queryProperties,

            string? resourceType,

            string? resourceUri,

            string? state,

            string? status,

            string? tenantId,

            string? timeCreated,

            string? timeUpdated)
        {
            CollectionMethod = collectionMethod;
            CollectionRecurrences = collectionRecurrences;
            CompartmentId = compartmentId;
            CreatedBy = createdBy;
            Description = description;
            DisplayName = displayName;
            EnabledOnResources = enabledOnResources;
            EnabledOnResourcesCount = enabledOnResourcesCount;
            Id = id;
            LastUpdatedBy = lastUpdatedBy;
            MetricExtensionId = metricExtensionId;
            MetricLists = metricLists;
            Name = name;
            PublishTrigger = publishTrigger;
            QueryProperties = queryProperties;
            ResourceType = resourceType;
            ResourceUri = resourceUri;
            State = state;
            Status = status;
            TenantId = tenantId;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
