// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetMetricExtensions
    {
        /// <summary>
        /// This data source provides the list of Metric Extensions in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Returns a list of metric extensions
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricExtensions = Oci.StackMonitoring.GetMetricExtensions.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         EnabledOnResourceId = oci_usage_proxy_resource.Test_resource.Id,
        ///         Name = @var.Metric_extension_name,
        ///         ResourceType = @var.Metric_extension_resource_type,
        ///         State = @var.Metric_extension_state,
        ///         Status = @var.Metric_extension_status,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetricExtensionsResult> InvokeAsync(GetMetricExtensionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricExtensionsResult>("oci:StackMonitoring/getMetricExtensions:getMetricExtensions", args ?? new GetMetricExtensionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Metric Extensions in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Returns a list of metric extensions
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMetricExtensions = Oci.StackMonitoring.GetMetricExtensions.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         EnabledOnResourceId = oci_usage_proxy_resource.Test_resource.Id,
        ///         Name = @var.Metric_extension_name,
        ///         ResourceType = @var.Metric_extension_resource_type,
        ///         State = @var.Metric_extension_state,
        ///         Status = @var.Metric_extension_status,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMetricExtensionsResult> Invoke(GetMetricExtensionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricExtensionsResult>("oci:StackMonitoring/getMetricExtensions:getMetricExtensions", args ?? new GetMetricExtensionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricExtensionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return metric extensions based on input resource Id on which metric extension is enabled
        /// </summary>
        [Input("enabledOnResourceId")]
        public string? EnabledOnResourceId { get; set; }

        [Input("filters")]
        private List<Inputs.GetMetricExtensionsFilterArgs>? _filters;
        public List<Inputs.GetMetricExtensionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMetricExtensionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return resources based on name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return resources based on resource type.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// A filter to return metric extensions based on Lifecycle State
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return resources based on status e.g. Draft or Published
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetMetricExtensionsArgs()
        {
        }
        public static new GetMetricExtensionsArgs Empty => new GetMetricExtensionsArgs();
    }

    public sealed class GetMetricExtensionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return metric extensions based on input resource Id on which metric extension is enabled
        /// </summary>
        [Input("enabledOnResourceId")]
        public Input<string>? EnabledOnResourceId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMetricExtensionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetMetricExtensionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMetricExtensionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return resources based on name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return resources based on resource type.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// A filter to return metric extensions based on Lifecycle State
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return resources based on status e.g. Draft or Published
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetMetricExtensionsInvokeArgs()
        {
        }
        public static new GetMetricExtensionsInvokeArgs Empty => new GetMetricExtensionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricExtensionsResult
    {
        /// <summary>
        /// Compartment Identifier [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
        /// </summary>
        public readonly string CompartmentId;
        public readonly string? EnabledOnResourceId;
        public readonly ImmutableArray<Outputs.GetMetricExtensionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of metric_extension_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricExtensionsMetricExtensionCollectionResult> MetricExtensionCollections;
        /// <summary>
        /// Name of the script file
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Resource type to which Metric Extension applies
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The current lifecycle state of the metric extension
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The current status of the metric extension i.e. whether it is Draft or Published
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetMetricExtensionsResult(
            string compartmentId,

            string? enabledOnResourceId,

            ImmutableArray<Outputs.GetMetricExtensionsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetMetricExtensionsMetricExtensionCollectionResult> metricExtensionCollections,

            string? name,

            string? resourceType,

            string? state,

            string? status)
        {
            CompartmentId = compartmentId;
            EnabledOnResourceId = enabledOnResourceId;
            Filters = filters;
            Id = id;
            MetricExtensionCollections = metricExtensionCollections;
            Name = name;
            ResourceType = resourceType;
            State = state;
            Status = status;
        }
    }
}
