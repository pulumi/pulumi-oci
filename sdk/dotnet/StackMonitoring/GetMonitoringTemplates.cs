// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetMonitoringTemplates
    {
        /// <summary>
        /// This data source provides the list of Monitoring Templates in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Returns a list of Monitoring Templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMonitoringTemplates = Oci.StackMonitoring.GetMonitoringTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = monitoringTemplateDisplayName,
        ///         MetricNames = testMetric.Name,
        ///         MonitoringTemplateId = testMonitoringTemplate.Id,
        ///         Namespaces = monitoringTemplateNamespace,
        ///         ResourceTypes = monitoringTemplateResourceTypes,
        ///         State = monitoringTemplateState,
        ///         Status = monitoringTemplateStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMonitoringTemplatesResult> InvokeAsync(GetMonitoringTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitoringTemplatesResult>("oci:StackMonitoring/getMonitoringTemplates:getMonitoringTemplates", args ?? new GetMonitoringTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Monitoring Templates in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Returns a list of Monitoring Templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMonitoringTemplates = Oci.StackMonitoring.GetMonitoringTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = monitoringTemplateDisplayName,
        ///         MetricNames = testMetric.Name,
        ///         MonitoringTemplateId = testMonitoringTemplate.Id,
        ///         Namespaces = monitoringTemplateNamespace,
        ///         ResourceTypes = monitoringTemplateResourceTypes,
        ///         State = monitoringTemplateState,
        ///         Status = monitoringTemplateStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMonitoringTemplatesResult> Invoke(GetMonitoringTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringTemplatesResult>("oci:StackMonitoring/getMonitoringTemplates:getMonitoringTemplates", args ?? new GetMonitoringTemplatesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Monitoring Templates in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// Returns a list of Monitoring Templates.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testMonitoringTemplates = Oci.StackMonitoring.GetMonitoringTemplates.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = monitoringTemplateDisplayName,
        ///         MetricNames = testMetric.Name,
        ///         MonitoringTemplateId = testMonitoringTemplate.Id,
        ///         Namespaces = monitoringTemplateNamespace,
        ///         ResourceTypes = monitoringTemplateResourceTypes,
        ///         State = monitoringTemplateState,
        ///         Status = monitoringTemplateStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMonitoringTemplatesResult> Invoke(GetMonitoringTemplatesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringTemplatesResult>("oci:StackMonitoring/getMonitoringTemplates:getMonitoringTemplates", args ?? new GetMonitoringTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitoringTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return monitoring template based on name.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetMonitoringTemplatesFilterArgs>? _filters;
        public List<Inputs.GetMonitoringTemplatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMonitoringTemplatesFilterArgs>());
            set => _filters = value;
        }

        [Input("metricNames")]
        private List<string>? _metricNames;

        /// <summary>
        /// metricName filter.
        /// </summary>
        public List<string> MetricNames
        {
            get => _metricNames ?? (_metricNames = new List<string>());
            set => _metricNames = value;
        }

        /// <summary>
        /// A filter to return monitoring template based on input monitoringTemplateId
        /// </summary>
        [Input("monitoringTemplateId")]
        public string? MonitoringTemplateId { get; set; }

        [Input("namespaces")]
        private List<string>? _namespaces;

        /// <summary>
        /// namespace filter.
        /// </summary>
        public List<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new List<string>());
            set => _namespaces = value;
        }

        [Input("resourceTypes")]
        private List<string>? _resourceTypes;

        /// <summary>
        /// Multiple resource types filter.
        /// </summary>
        public List<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new List<string>());
            set => _resourceTypes = value;
        }

        /// <summary>
        /// A filter to return monitoring template based on Lifecycle State
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// A filter to return monitoring template based on input status
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetMonitoringTemplatesArgs()
        {
        }
        public static new GetMonitoringTemplatesArgs Empty => new GetMonitoringTemplatesArgs();
    }

    public sealed class GetMonitoringTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// A filter to return monitoring template based on name.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetMonitoringTemplatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetMonitoringTemplatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMonitoringTemplatesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("metricNames")]
        private InputList<string>? _metricNames;

        /// <summary>
        /// metricName filter.
        /// </summary>
        public InputList<string> MetricNames
        {
            get => _metricNames ?? (_metricNames = new InputList<string>());
            set => _metricNames = value;
        }

        /// <summary>
        /// A filter to return monitoring template based on input monitoringTemplateId
        /// </summary>
        [Input("monitoringTemplateId")]
        public Input<string>? MonitoringTemplateId { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// namespace filter.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        [Input("resourceTypes")]
        private InputList<string>? _resourceTypes;

        /// <summary>
        /// Multiple resource types filter.
        /// </summary>
        public InputList<string> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<string>());
            set => _resourceTypes = value;
        }

        /// <summary>
        /// A filter to return monitoring template based on Lifecycle State
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A filter to return monitoring template based on input status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetMonitoringTemplatesInvokeArgs()
        {
        }
        public static new GetMonitoringTemplatesInvokeArgs Empty => new GetMonitoringTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitoringTemplatesResult
    {
        /// <summary>
        /// The OCID of the compartment containing the monitoringTemplate.
        /// </summary>
        public readonly string? CompartmentId;
        /// <summary>
        /// A user-friendly name for the monitoring template. It should be unique, and it's mutable in nature. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetMonitoringTemplatesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> MetricNames;
        /// <summary>
        /// The list of monitoring_template_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMonitoringTemplatesMonitoringTemplateCollectionResult> MonitoringTemplateCollections;
        public readonly string? MonitoringTemplateId;
        public readonly ImmutableArray<string> Namespaces;
        public readonly ImmutableArray<string> ResourceTypes;
        /// <summary>
        /// The current lifecycle state of the monitoring template.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The current status of the monitoring template i.e. whether it is Applied or NotApplied.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetMonitoringTemplatesResult(
            string? compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetMonitoringTemplatesFilterResult> filters,

            string id,

            ImmutableArray<string> metricNames,

            ImmutableArray<Outputs.GetMonitoringTemplatesMonitoringTemplateCollectionResult> monitoringTemplateCollections,

            string? monitoringTemplateId,

            ImmutableArray<string> namespaces,

            ImmutableArray<string> resourceTypes,

            string? state,

            string? status)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MetricNames = metricNames;
            MonitoringTemplateCollections = monitoringTemplateCollections;
            MonitoringTemplateId = monitoringTemplateId;
            Namespaces = namespaces;
            ResourceTypes = resourceTypes;
            State = state;
            Status = status;
        }
    }
}
