// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring
{
    public static class GetProcessSets
    {
        /// <summary>
        /// This data source provides the list of Process Sets in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// API to get the details of all Process Sets.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProcessSets = Oci.StackMonitoring.GetProcessSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = processSetDisplayName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProcessSetsResult> InvokeAsync(GetProcessSetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProcessSetsResult>("oci:StackMonitoring/getProcessSets:getProcessSets", args ?? new GetProcessSetsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Process Sets in Oracle Cloud Infrastructure Stack Monitoring service.
        /// 
        /// API to get the details of all Process Sets.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProcessSets = Oci.StackMonitoring.GetProcessSets.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = processSetDisplayName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProcessSetsResult> Invoke(GetProcessSetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProcessSetsResult>("oci:StackMonitoring/getProcessSets:getProcessSets", args ?? new GetProcessSetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProcessSetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetProcessSetsFilterArgs>? _filters;
        public List<Inputs.GetProcessSetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProcessSetsFilterArgs>());
            set => _filters = value;
        }

        public GetProcessSetsArgs()
        {
        }
        public static new GetProcessSetsArgs Empty => new GetProcessSetsArgs();
    }

    public sealed class GetProcessSetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which data is listed.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetProcessSetsFilterInputArgs>? _filters;
        public InputList<Inputs.GetProcessSetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProcessSetsFilterInputArgs>());
            set => _filters = value;
        }

        public GetProcessSetsInvokeArgs()
        {
        }
        public static new GetProcessSetsInvokeArgs Empty => new GetProcessSetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProcessSetsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Name of the Process Set.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetProcessSetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of process_set_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProcessSetsProcessSetCollectionResult> ProcessSetCollections;

        [OutputConstructor]
        private GetProcessSetsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetProcessSetsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetProcessSetsProcessSetCollectionResult> processSetCollections)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            ProcessSetCollections = processSetCollections;
        }
    }
}
