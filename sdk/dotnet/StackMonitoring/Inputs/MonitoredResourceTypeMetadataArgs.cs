// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.StackMonitoring.Inputs
{

    public sealed class MonitoredResourceTypeMetadataArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentProperties")]
        private InputList<string>? _agentProperties;

        /// <summary>
        /// (Updatable) List of properties needed by the agent for monitoring the resource.  Valid only if resource type is Oracle Cloud Infrastructure management agent based. When specified,  these properties are passed to the management agent during resource create or update.
        /// </summary>
        public InputList<string> AgentProperties
        {
            get => _agentProperties ?? (_agentProperties = new InputList<string>());
            set => _agentProperties = value;
        }

        /// <summary>
        /// (Updatable) ResourceType metadata format to be used. Currently supports only one format. Possible values - SYSTEM_FORMAT.
        /// * SYSTEM_FORMAT - The resource type metadata is defined in machine friendly format.
        /// </summary>
        [Input("format", required: true)]
        public Input<string> Format { get; set; } = null!;

        [Input("requiredProperties")]
        private InputList<string>? _requiredProperties;

        /// <summary>
        /// (Updatable) List of required properties for resource type.
        /// </summary>
        public InputList<string> RequiredProperties
        {
            get => _requiredProperties ?? (_requiredProperties = new InputList<string>());
            set => _requiredProperties = value;
        }

        [Input("uniquePropertySets")]
        private InputList<Inputs.MonitoredResourceTypeMetadataUniquePropertySetArgs>? _uniquePropertySets;

        /// <summary>
        /// (Updatable) List of property sets used to uniquely identify the resources.  This check is made during create or update of stack monitoring resource.  The resource has to pass unique check for each set in the list.  For example, database can have user, password and SID as one unique set.  Another unique set would be user, password and service name.
        /// </summary>
        public InputList<Inputs.MonitoredResourceTypeMetadataUniquePropertySetArgs> UniquePropertySets
        {
            get => _uniquePropertySets ?? (_uniquePropertySets = new InputList<Inputs.MonitoredResourceTypeMetadataUniquePropertySetArgs>());
            set => _uniquePropertySets = value;
        }

        [Input("validPropertiesForCreates")]
        private InputList<string>? _validPropertiesForCreates;

        /// <summary>
        /// (Updatable) List of valid properties for resource type while creating the monitored resource.  If resources of this type specifies any other properties during create operation,  the operation will fail.
        /// </summary>
        public InputList<string> ValidPropertiesForCreates
        {
            get => _validPropertiesForCreates ?? (_validPropertiesForCreates = new InputList<string>());
            set => _validPropertiesForCreates = value;
        }

        [Input("validPropertiesForUpdates")]
        private InputList<string>? _validPropertiesForUpdates;

        /// <summary>
        /// (Updatable) List of valid properties for resource type while updating the monitored resource.  If resources of this type specifies any other properties during update operation,  the operation will fail.
        /// </summary>
        public InputList<string> ValidPropertiesForUpdates
        {
            get => _validPropertiesForUpdates ?? (_validPropertiesForUpdates = new InputList<string>());
            set => _validPropertiesForUpdates = value;
        }

        [Input("validPropertyValues")]
        private InputMap<string>? _validPropertyValues;

        /// <summary>
        /// (Updatable) List of valid values for the properties. This is useful when resource type wants to restrict only certain values for some properties. For instance for 'osType' property,  supported values can be restricted to be either Linux or Windows. Example: `{ "osType": "Linux,Windows,Solaris"}`
        /// </summary>
        public InputMap<string> ValidPropertyValues
        {
            get => _validPropertyValues ?? (_validPropertyValues = new InputMap<string>());
            set => _validPropertyValues = value;
        }

        [Input("validSubResourceTypes")]
        private InputList<string>? _validSubResourceTypes;

        /// <summary>
        /// (Updatable) List of valid sub-resource types for a composite resource type. The sub-resource types will be obtained from the valid association pairs corresponding to the composite resource types. It will be empty for non composite resource types
        /// </summary>
        public InputList<string> ValidSubResourceTypes
        {
            get => _validSubResourceTypes ?? (_validSubResourceTypes = new InputList<string>());
            set => _validSubResourceTypes = value;
        }

        public MonitoredResourceTypeMetadataArgs()
        {
        }
        public static new MonitoredResourceTypeMetadataArgs Empty => new MonitoredResourceTypeMetadataArgs();
    }
}
