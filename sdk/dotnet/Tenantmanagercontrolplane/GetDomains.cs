// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Tenantmanagercontrolplane
{
    public static class GetDomains
    {
        /// <summary>
        /// This data source provides the list of Domains in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// Return a (paginated) list of domains.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDomains = Oci.Tenantmanagercontrolplane.GetDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DomainId = testDomain.Id,
        ///         Name = domainName,
        ///         State = domainState,
        ///         Status = domainStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDomainsResult> InvokeAsync(GetDomainsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainsResult>("oci:Tenantmanagercontrolplane/getDomains:getDomains", args ?? new GetDomainsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Domains in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// Return a (paginated) list of domains.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDomains = Oci.Tenantmanagercontrolplane.GetDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DomainId = testDomain.Id,
        ///         Name = domainName,
        ///         State = domainState,
        ///         Status = domainStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainsResult> Invoke(GetDomainsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainsResult>("oci:Tenantmanagercontrolplane/getDomains:getDomains", args ?? new GetDomainsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Domains in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// Return a (paginated) list of domains.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testDomains = Oci.Tenantmanagercontrolplane.GetDomains.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DomainId = testDomain.Id,
        ///         Name = domainName,
        ///         State = domainState,
        ///         Status = domainStatus,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDomainsResult> Invoke(GetDomainsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainsResult>("oci:Tenantmanagercontrolplane/getDomains:getDomains", args ?? new GetDomainsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// The domain OCID.
        /// </summary>
        [Input("domainId")]
        public string? DomainId { get; set; }

        [Input("filters")]
        private List<Inputs.GetDomainsFilterArgs>? _filters;
        public List<Inputs.GetDomainsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDomainsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that exactly match the name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The lifecycle state of the resource.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetDomainsArgs()
        {
        }
        public static new GetDomainsArgs Empty => new GetDomainsArgs();
    }

    public sealed class GetDomainsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// The domain OCID.
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetDomainsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDomainsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDomainsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that exactly match the name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The lifecycle state of the resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetDomainsInvokeArgs()
        {
        }
        public static new GetDomainsInvokeArgs Empty => new GetDomainsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainsResult
    {
        public readonly string CompartmentId;
        /// <summary>
        /// The list of domain_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsDomainCollectionResult> DomainCollections;
        public readonly string? DomainId;
        public readonly ImmutableArray<Outputs.GetDomainsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        /// <summary>
        /// Lifecycle state of the domain.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Status of the domain.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetDomainsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetDomainsDomainCollectionResult> domainCollections,

            string? domainId,

            ImmutableArray<Outputs.GetDomainsFilterResult> filters,

            string id,

            string? name,

            string? state,

            string? status)
        {
            CompartmentId = compartmentId;
            DomainCollections = domainCollections;
            DomainId = domainId;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
            Status = status;
        }
    }
}
