// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Tenantmanagercontrolplane
{
    public static class GetSubscriptionAvailableRegions
    {
        /// <summary>
        /// This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// List the available regions based on subscription ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionAvailableRegions = Oci.Tenantmanagercontrolplane.GetSubscriptionAvailableRegions.Invoke(new()
        ///     {
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubscriptionAvailableRegionsResult> InvokeAsync(GetSubscriptionAvailableRegionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionAvailableRegionsResult>("oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions", args ?? new GetSubscriptionAvailableRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// List the available regions based on subscription ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionAvailableRegions = Oci.Tenantmanagercontrolplane.GetSubscriptionAvailableRegions.Invoke(new()
        ///     {
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubscriptionAvailableRegionsResult> Invoke(GetSubscriptionAvailableRegionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionAvailableRegionsResult>("oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions", args ?? new GetSubscriptionAvailableRegionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Subscription Available Regions in Oracle Cloud Infrastructure Tenantmanagercontrolplane service.
        /// 
        /// List the available regions based on subscription ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionAvailableRegions = Oci.Tenantmanagercontrolplane.GetSubscriptionAvailableRegions.Invoke(new()
        ///     {
        ///         SubscriptionId = testSubscription.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubscriptionAvailableRegionsResult> Invoke(GetSubscriptionAvailableRegionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionAvailableRegionsResult>("oci:Tenantmanagercontrolplane/getSubscriptionAvailableRegions:getSubscriptionAvailableRegions", args ?? new GetSubscriptionAvailableRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionAvailableRegionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubscriptionAvailableRegionsFilterArgs>? _filters;
        public List<Inputs.GetSubscriptionAvailableRegionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubscriptionAvailableRegionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// OCID of the subscription.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetSubscriptionAvailableRegionsArgs()
        {
        }
        public static new GetSubscriptionAvailableRegionsArgs Empty => new GetSubscriptionAvailableRegionsArgs();
    }

    public sealed class GetSubscriptionAvailableRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSubscriptionAvailableRegionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSubscriptionAvailableRegionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubscriptionAvailableRegionsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// OCID of the subscription.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetSubscriptionAvailableRegionsInvokeArgs()
        {
        }
        public static new GetSubscriptionAvailableRegionsInvokeArgs Empty => new GetSubscriptionAvailableRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionAvailableRegionsResult
    {
        /// <summary>
        /// The list of available_region_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionAvailableRegionsAvailableRegionCollectionResult> AvailableRegionCollections;
        public readonly ImmutableArray<Outputs.GetSubscriptionAvailableRegionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string SubscriptionId;

        [OutputConstructor]
        private GetSubscriptionAvailableRegionsResult(
            ImmutableArray<Outputs.GetSubscriptionAvailableRegionsAvailableRegionCollectionResult> availableRegionCollections,

            ImmutableArray<Outputs.GetSubscriptionAvailableRegionsFilterResult> filters,

            string id,

            string subscriptionId)
        {
            AvailableRegionCollections = availableRegionCollections;
            Filters = filters;
            Id = id;
            SubscriptionId = subscriptionId;
        }
    }
}
