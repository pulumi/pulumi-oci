// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.UsageProxy
{
    public static class GetSubscriptionRedeemableUsers
    {
        /// <summary>
        /// This data source provides the list of Subscription Redeemable Users in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Provides the list of user summary that can redeem rewards for the given subscription ID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionRedeemableUsers = Oci.UsageProxy.GetSubscriptionRedeemableUsers.Invoke(new()
        ///     {
        ///         SubscriptionId = oci_ons_subscription.Test_subscription.Id,
        ///         TenancyId = oci_identity_tenancy.Test_tenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubscriptionRedeemableUsersResult> InvokeAsync(GetSubscriptionRedeemableUsersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionRedeemableUsersResult>("oci:UsageProxy/getSubscriptionRedeemableUsers:getSubscriptionRedeemableUsers", args ?? new GetSubscriptionRedeemableUsersArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Subscription Redeemable Users in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Provides the list of user summary that can redeem rewards for the given subscription ID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionRedeemableUsers = Oci.UsageProxy.GetSubscriptionRedeemableUsers.Invoke(new()
        ///     {
        ///         SubscriptionId = oci_ons_subscription.Test_subscription.Id,
        ///         TenancyId = oci_identity_tenancy.Test_tenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubscriptionRedeemableUsersResult> Invoke(GetSubscriptionRedeemableUsersInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSubscriptionRedeemableUsersResult>("oci:UsageProxy/getSubscriptionRedeemableUsers:getSubscriptionRedeemableUsers", args ?? new GetSubscriptionRedeemableUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionRedeemableUsersArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubscriptionRedeemableUsersFilterArgs>? _filters;
        public List<Inputs.GetSubscriptionRedeemableUsersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubscriptionRedeemableUsersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the tenancy.
        /// </summary>
        [Input("tenancyId", required: true)]
        public string TenancyId { get; set; } = null!;

        public GetSubscriptionRedeemableUsersArgs()
        {
        }
        public static new GetSubscriptionRedeemableUsersArgs Empty => new GetSubscriptionRedeemableUsersArgs();
    }

    public sealed class GetSubscriptionRedeemableUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSubscriptionRedeemableUsersFilterInputArgs>? _filters;
        public InputList<Inputs.GetSubscriptionRedeemableUsersFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubscriptionRedeemableUsersFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the tenancy.
        /// </summary>
        [Input("tenancyId", required: true)]
        public Input<string> TenancyId { get; set; } = null!;

        public GetSubscriptionRedeemableUsersInvokeArgs()
        {
        }
        public static new GetSubscriptionRedeemableUsersInvokeArgs Empty => new GetSubscriptionRedeemableUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionRedeemableUsersResult
    {
        public readonly ImmutableArray<Outputs.GetSubscriptionRedeemableUsersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of redeemable_user_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionResult> RedeemableUserCollections;
        public readonly string SubscriptionId;
        public readonly string TenancyId;

        [OutputConstructor]
        private GetSubscriptionRedeemableUsersResult(
            ImmutableArray<Outputs.GetSubscriptionRedeemableUsersFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSubscriptionRedeemableUsersRedeemableUserCollectionResult> redeemableUserCollections,

            string subscriptionId,

            string tenancyId)
        {
            Filters = filters;
            Id = id;
            RedeemableUserCollections = redeemableUserCollections;
            SubscriptionId = subscriptionId;
            TenancyId = tenancyId;
        }
    }
}
