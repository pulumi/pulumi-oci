// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.UsageProxy
{
    public static class GetSubscriptionRewards
    {
        /// <summary>
        /// This data source provides the list of Subscription Rewards in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Returns the list of rewards for a subscription ID.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionRewards = Oci.UsageProxy.GetSubscriptionRewards.Invoke(new()
        ///     {
        ///         SubscriptionId = testSubscription.Id,
        ///         TenancyId = testTenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubscriptionRewardsResult> InvokeAsync(GetSubscriptionRewardsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionRewardsResult>("oci:UsageProxy/getSubscriptionRewards:getSubscriptionRewards", args ?? new GetSubscriptionRewardsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Subscription Rewards in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Returns the list of rewards for a subscription ID.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSubscriptionRewards = Oci.UsageProxy.GetSubscriptionRewards.Invoke(new()
        ///     {
        ///         SubscriptionId = testSubscription.Id,
        ///         TenancyId = testTenancy.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubscriptionRewardsResult> Invoke(GetSubscriptionRewardsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionRewardsResult>("oci:UsageProxy/getSubscriptionRewards:getSubscriptionRewards", args ?? new GetSubscriptionRewardsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionRewardsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubscriptionRewardsFilterArgs>? _filters;
        public List<Inputs.GetSubscriptionRewardsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubscriptionRewardsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the tenancy.
        /// </summary>
        [Input("tenancyId", required: true)]
        public string TenancyId { get; set; } = null!;

        public GetSubscriptionRewardsArgs()
        {
        }
        public static new GetSubscriptionRewardsArgs Empty => new GetSubscriptionRewardsArgs();
    }

    public sealed class GetSubscriptionRewardsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSubscriptionRewardsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSubscriptionRewardsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubscriptionRewardsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// The OCID of the tenancy.
        /// </summary>
        [Input("tenancyId", required: true)]
        public Input<string> TenancyId { get; set; } = null!;

        public GetSubscriptionRewardsInvokeArgs()
        {
        }
        public static new GetSubscriptionRewardsInvokeArgs Empty => new GetSubscriptionRewardsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionRewardsResult
    {
        public readonly ImmutableArray<Outputs.GetSubscriptionRewardsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of reward_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubscriptionRewardsRewardCollectionResult> RewardCollections;
        /// <summary>
        /// The entitlement ID from MQS, which is the same as the subcription ID.
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// The OCID of the target tenancy.
        /// </summary>
        public readonly string TenancyId;

        [OutputConstructor]
        private GetSubscriptionRewardsResult(
            ImmutableArray<Outputs.GetSubscriptionRewardsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSubscriptionRewardsRewardCollectionResult> rewardCollections,

            string subscriptionId,

            string tenancyId)
        {
            Filters = filters;
            Id = id;
            RewardCollections = rewardCollections;
            SubscriptionId = subscriptionId;
            TenancyId = tenancyId;
        }
    }
}
