// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.UsageProxy
{
    public static class GetUsagelimits
    {
        /// <summary>
        /// This data source provides the list of Usagelimits in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Returns the list of usage limit for the subscription ID and tenant ID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsagelimits = Oci.UsageProxy.GetUsagelimits.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         SubscriptionId = oci_onesubscription_subscription.Test_subscription.Id,
        ///         LimitType = @var.Usagelimit_limit_type,
        ///         ResourceType = @var.Usagelimit_resource_type,
        ///         ServiceType = @var.Usagelimit_service_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUsagelimitsResult> InvokeAsync(GetUsagelimitsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsagelimitsResult>("oci:UsageProxy/getUsagelimits:getUsagelimits", args ?? new GetUsagelimitsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Usagelimits in Oracle Cloud Infrastructure Usage Proxy service.
        /// 
        /// Returns the list of usage limit for the subscription ID and tenant ID.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testUsagelimits = Oci.UsageProxy.GetUsagelimits.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         SubscriptionId = oci_onesubscription_subscription.Test_subscription.Id,
        ///         LimitType = @var.Usagelimit_limit_type,
        ///         ResourceType = @var.Usagelimit_resource_type,
        ///         ServiceType = @var.Usagelimit_service_type,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUsagelimitsResult> Invoke(GetUsagelimitsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsagelimitsResult>("oci:UsageProxy/getUsagelimits:getUsagelimits", args ?? new GetUsagelimitsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsagelimitsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetUsagelimitsFilterArgs>? _filters;
        public List<Inputs.GetUsagelimitsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetUsagelimitsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
        /// </summary>
        [Input("limitType")]
        public string? LimitType { get; set; }

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Input("resourceType")]
        public string? ResourceType { get; set; }

        /// <summary>
        /// Service Name.
        /// </summary>
        [Input("serviceType")]
        public string? ServiceType { get; set; }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public string SubscriptionId { get; set; } = null!;

        public GetUsagelimitsArgs()
        {
        }
        public static new GetUsagelimitsArgs Empty => new GetUsagelimitsArgs();
    }

    public sealed class GetUsagelimitsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the root compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetUsagelimitsFilterInputArgs>? _filters;
        public InputList<Inputs.GetUsagelimitsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetUsagelimitsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Hard or soft limit. Hard limits lead to breaches, soft to alerts.
        /// </summary>
        [Input("limitType")]
        public Input<string>? LimitType { get; set; }

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// Service Name.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// The subscription ID for which rewards information is requested for.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        public GetUsagelimitsInvokeArgs()
        {
        }
        public static new GetUsagelimitsInvokeArgs Empty => new GetUsagelimitsInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsagelimitsResult
    {
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetUsagelimitsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The limit type of the usage limit
        /// </summary>
        public readonly string? LimitType;
        public readonly string? ResourceType;
        public readonly string? ServiceType;
        public readonly string SubscriptionId;
        /// <summary>
        /// The list of usage_limit_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsagelimitsUsageLimitCollectionResult> UsageLimitCollections;

        [OutputConstructor]
        private GetUsagelimitsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetUsagelimitsFilterResult> filters,

            string? id,

            string? limitType,

            string? resourceType,

            string? serviceType,

            string subscriptionId,

            ImmutableArray<Outputs.GetUsagelimitsUsageLimitCollectionResult> usageLimitCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            LimitType = limitType;
            ResourceType = resourceType;
            ServiceType = serviceType;
            SubscriptionId = subscriptionId;
            UsageLimitCollections = usageLimitCollections;
        }
    }
}
