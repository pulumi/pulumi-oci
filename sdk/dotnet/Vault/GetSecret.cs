// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vault
{
    public static class GetSecret
    {
        /// <summary>
        /// This data source provides details about a specific Secret resource in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Gets information about the specified secret.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecret = Oci.Vault.GetSecret.Invoke(new()
        ///     {
        ///         SecretId = testSecretOciVaultSecret.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecretResult> InvokeAsync(GetSecretArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("oci:Vault/getSecret:getSecret", args ?? new GetSecretArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Secret resource in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Gets information about the specified secret.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecret = Oci.Vault.GetSecret.Invoke(new()
        ///     {
        ///         SecretId = testSecretOciVaultSecret.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretResult> Invoke(GetSecretInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretResult>("oci:Vault/getSecret:getSecret", args ?? new GetSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public string SecretId { get; set; } = null!;

        public GetSecretArgs()
        {
        }
        public static new GetSecretArgs Empty => new GetSecretArgs();
    }

    public sealed class GetSecretInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        public GetSecretInvokeArgs()
        {
        }
        public static new GetSecretInvokeArgs Empty => new GetSecretInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretResult
    {
        /// <summary>
        /// The OCID of the compartment where you want to create the secret.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The version number of the secret version that's currently in use.
        /// </summary>
        public readonly string CurrentVersionNumber;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// A brief description of the secret. Avoid entering confidential information.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string LastRotationTime;
        /// <summary>
        /// Additional information about the current lifecycle state of the secret.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metadata;
        /// <summary>
        /// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string NextRotationTime;
        /// <summary>
        /// Defines the frequency of the rotation and the information about the target system
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretRotationConfigResult> RotationConfigs;
        /// <summary>
        /// Additional information about the status of the secret rotation
        /// </summary>
        public readonly string RotationStatus;
        public readonly ImmutableArray<Outputs.GetSecretSecretContentResult> SecretContents;
        public readonly string SecretId;
        /// <summary>
        /// The user-friendly name of the secret. Avoid entering confidential information.
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// A list of rules that control how the secret is used and managed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretSecretRuleResult> SecretRules;
        /// <summary>
        /// The current lifecycle state of the secret.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfCurrentVersionExpiry;
        /// <summary>
        /// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The OCID of the Vault in which the secret exists
        /// </summary>
        public readonly string VaultId;

        [OutputConstructor]
        private GetSecretResult(
            string compartmentId,

            string currentVersionNumber,

            ImmutableDictionary<string, object> definedTags,

            string description,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string keyId,

            string lastRotationTime,

            string lifecycleDetails,

            ImmutableDictionary<string, object> metadata,

            string nextRotationTime,

            ImmutableArray<Outputs.GetSecretRotationConfigResult> rotationConfigs,

            string rotationStatus,

            ImmutableArray<Outputs.GetSecretSecretContentResult> secretContents,

            string secretId,

            string secretName,

            ImmutableArray<Outputs.GetSecretSecretRuleResult> secretRules,

            string state,

            string timeCreated,

            string timeOfCurrentVersionExpiry,

            string timeOfDeletion,

            string vaultId)
        {
            CompartmentId = compartmentId;
            CurrentVersionNumber = currentVersionNumber;
            DefinedTags = definedTags;
            Description = description;
            FreeformTags = freeformTags;
            Id = id;
            KeyId = keyId;
            LastRotationTime = lastRotationTime;
            LifecycleDetails = lifecycleDetails;
            Metadata = metadata;
            NextRotationTime = nextRotationTime;
            RotationConfigs = rotationConfigs;
            RotationStatus = rotationStatus;
            SecretContents = secretContents;
            SecretId = secretId;
            SecretName = secretName;
            SecretRules = secretRules;
            State = state;
            TimeCreated = timeCreated;
            TimeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            TimeOfDeletion = timeOfDeletion;
            VaultId = vaultId;
        }
    }
}
