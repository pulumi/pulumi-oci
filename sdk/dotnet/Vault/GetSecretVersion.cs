// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vault
{
    public static class GetSecretVersion
    {
        /// <summary>
        /// This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Gets information about the specified version of a secret.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretVersion = Oci.Vault.GetSecretVersion.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionNumber = secretVersionSecretVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecretVersionResult> InvokeAsync(GetSecretVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretVersionResult>("oci:Vault/getSecretVersion:getSecretVersion", args ?? new GetSecretVersionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Gets information about the specified version of a secret.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretVersion = Oci.Vault.GetSecretVersion.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionNumber = secretVersionSecretVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretVersionResult> Invoke(GetSecretVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretVersionResult>("oci:Vault/getSecretVersion:getSecretVersion", args ?? new GetSecretVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Secret Version resource in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Gets information about the specified version of a secret.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testSecretVersion = Oci.Vault.GetSecretVersion.Invoke(new()
        ///     {
        ///         SecretId = testSecret.Id,
        ///         SecretVersionNumber = secretVersionSecretVersionNumber,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretVersionResult> Invoke(GetSecretVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretVersionResult>("oci:Vault/getSecretVersion:getSecretVersion", args ?? new GetSecretVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public string SecretId { get; set; } = null!;

        /// <summary>
        /// The version number of the secret.
        /// </summary>
        [Input("secretVersionNumber", required: true)]
        public string SecretVersionNumber { get; set; } = null!;

        public GetSecretVersionArgs()
        {
        }
        public static new GetSecretVersionArgs Empty => new GetSecretVersionArgs();
    }

    public sealed class GetSecretVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        /// <summary>
        /// The version number of the secret.
        /// </summary>
        [Input("secretVersionNumber", required: true)]
        public Input<string> SecretVersionNumber { get; set; } = null!;

        public GetSecretVersionInvokeArgs()
        {
        }
        public static new GetSecretVersionInvokeArgs Empty => new GetSecretVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretVersionResult
    {
        /// <summary>
        /// The content type of the secret version's secret contents.
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the secret version. A name is unique across versions of a secret.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        public readonly string SecretId;
        public readonly string SecretVersionNumber;
        /// <summary>
        /// A list of possible rotation states for the secret version. A secret version marked `CURRENT` is currently in use. A secret version marked `PENDING` is staged and available for use, but has not been applied on the target system and, therefore, has not been rotated into current, active use. The secret most recently uploaded to a vault is always marked `LATEST`. (The first version of a secret is always marked as both `CURRENT` and `LATEST`.) A secret version marked `PREVIOUS` is the secret version that was most recently marked `CURRENT`, before the last secret version rotation. A secret version marked `DEPRECATED` is neither current, pending, nor the previous one in use. Only secret versions marked `DEPRECATED` can be scheduled for deletion.
        /// </summary>
        public readonly ImmutableArray<string> Stages;
        /// <summary>
        /// A optional property indicating when the secret version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfCurrentVersionExpiry;
        /// <summary>
        /// An optional property indicating when to delete the secret version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The version number of the secret.
        /// </summary>
        public readonly string VersionNumber;

        [OutputConstructor]
        private GetSecretVersionResult(
            string contentType,

            string id,

            string name,

            string secretId,

            string secretVersionNumber,

            ImmutableArray<string> stages,

            string timeCreated,

            string timeOfCurrentVersionExpiry,

            string timeOfDeletion,

            string versionNumber)
        {
            ContentType = contentType;
            Id = id;
            Name = name;
            SecretId = secretId;
            SecretVersionNumber = secretVersionNumber;
            Stages = stages;
            TimeCreated = timeCreated;
            TimeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            TimeOfDeletion = timeOfDeletion;
            VersionNumber = versionNumber;
        }
    }
}
