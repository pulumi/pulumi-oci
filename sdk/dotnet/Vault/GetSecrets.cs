// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vault
{
    public static class GetSecrets
    {
        /// <summary>
        /// This data source provides the list of Secrets in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Lists all secrets in the specified vault and compartment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSecrets = Output.Create(Oci.Vault.GetSecrets.InvokeAsync(new Oci.Vault.GetSecretsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Secret_name,
        ///             State = @var.Secret_state,
        ///             VaultId = oci_kms_vault.Test_vault.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecretsResult> InvokeAsync(GetSecretsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecretsResult>("oci:Vault/getSecrets:getSecrets", args ?? new GetSecretsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Secrets in Oracle Cloud Infrastructure Vault service.
        /// 
        /// Lists all secrets in the specified vault and compartment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSecrets = Output.Create(Oci.Vault.GetSecrets.InvokeAsync(new Oci.Vault.GetSecretsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Name = @var.Secret_name,
        ///             State = @var.Secret_state,
        ///             VaultId = oci_kms_vault.Test_vault.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecretsResult> Invoke(GetSecretsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecretsResult>("oci:Vault/getSecrets:getSecrets", args ?? new GetSecretsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetSecretsFilterArgs>? _filters;
        public List<Inputs.GetSecretsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecretsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The secret name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The OCID of the vault.
        /// </summary>
        [Input("vaultId")]
        public string? VaultId { get; set; }

        public GetSecretsArgs()
        {
        }
    }

    public sealed class GetSecretsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetSecretsFilterInputArgs>? _filters;
        public InputList<Inputs.GetSecretsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecretsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The secret name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter that returns only resources that match the specified lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The OCID of the vault.
        /// </summary>
        [Input("vaultId")]
        public Input<string>? VaultId { get; set; }

        public GetSecretsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecretsResult
    {
        /// <summary>
        /// The OCID of the compartment where you want to create the secret.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetSecretsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        /// <summary>
        /// The list of secrets.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretsSecretResult> Secrets;
        /// <summary>
        /// The current lifecycle state of the secret.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the Vault in which the secret exists
        /// </summary>
        public readonly string? VaultId;

        [OutputConstructor]
        private GetSecretsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetSecretsFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetSecretsSecretResult> secrets,

            string? state,

            string? vaultId)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            Secrets = secrets;
            State = state;
            VaultId = vaultId;
        }
    }
}
