// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vault.Outputs
{

    [OutputType]
    public sealed class GetSecretsSecretResult
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The version number of the secret version that's currently in use.
        /// </summary>
        public readonly string CurrentVersionNumber;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// A brief description of the secret. Avoid entering confidential information.
        /// </summary>
        public readonly string Description;
        public readonly bool EnableAutoGeneration;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The OCID of the secret.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The value of this flag determines whether or not secret content will be generated automatically.
        /// </summary>
        public readonly bool IsAutoGenerationEnabled;
        /// <summary>
        /// The OCID of the master encryption key that is used to encrypt the secret. You must specify a symmetric key to encrypt the secret during import to the vault. You cannot encrypt secrets with asymmetric keys. Furthermore, the key must exist in the vault that you specify.
        /// </summary>
        public readonly string KeyId;
        /// <summary>
        /// A property indicating when the secret was last rotated successfully, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string LastRotationTime;
        /// <summary>
        /// Additional information about the current lifecycle state of the secret.
        /// </summary>
        public readonly string LifecycleDetails;
        /// <summary>
        /// Additional metadata that you can use to provide context about how to use the secret or during rotation or other administrative tasks. For example, for a secret that you use to connect to a database, the additional metadata might specify the connection endpoint and the connection string. Provide additional metadata as key-value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Metadata;
        /// <summary>
        /// A property indicating when the secret is scheduled to be rotated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string NextRotationTime;
        /// <summary>
        /// Defines the frequency of the rotation and the information about the target system
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretsSecretRotationConfigResult> RotationConfigs;
        /// <summary>
        /// Additional information about the status of the secret rotation
        /// </summary>
        public readonly string RotationStatus;
        public readonly ImmutableArray<Outputs.GetSecretsSecretSecretContentResult> SecretContents;
        /// <summary>
        /// Captures a configurable set of secret generation rules such as length, base characters, additional characters, and so on.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretsSecretSecretGenerationContextResult> SecretGenerationContexts;
        /// <summary>
        /// The user-friendly name of the secret. Avoid entering confidential information.
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// A list of rules that control how the secret is used and managed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretsSecretSecretRuleResult> SecretRules;
        /// <summary>
        /// A filter that returns only resources that match the specified lifecycle state. The state value is case-insensitive.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A property indicating when the secret was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// An optional property indicating when the current secret version will expire, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfCurrentVersionExpiry;
        /// <summary>
        /// An optional property indicating when to delete the secret, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
        /// </summary>
        public readonly string TimeOfDeletion;
        /// <summary>
        /// The OCID of the vault.
        /// </summary>
        public readonly string VaultId;

        [OutputConstructor]
        private GetSecretsSecretResult(
            string compartmentId,

            string currentVersionNumber,

            ImmutableDictionary<string, string> definedTags,

            string description,

            bool enableAutoGeneration,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            bool isAutoGenerationEnabled,

            string keyId,

            string lastRotationTime,

            string lifecycleDetails,

            ImmutableDictionary<string, string> metadata,

            string nextRotationTime,

            ImmutableArray<Outputs.GetSecretsSecretRotationConfigResult> rotationConfigs,

            string rotationStatus,

            ImmutableArray<Outputs.GetSecretsSecretSecretContentResult> secretContents,

            ImmutableArray<Outputs.GetSecretsSecretSecretGenerationContextResult> secretGenerationContexts,

            string secretName,

            ImmutableArray<Outputs.GetSecretsSecretSecretRuleResult> secretRules,

            string state,

            string timeCreated,

            string timeOfCurrentVersionExpiry,

            string timeOfDeletion,

            string vaultId)
        {
            CompartmentId = compartmentId;
            CurrentVersionNumber = currentVersionNumber;
            DefinedTags = definedTags;
            Description = description;
            EnableAutoGeneration = enableAutoGeneration;
            FreeformTags = freeformTags;
            Id = id;
            IsAutoGenerationEnabled = isAutoGenerationEnabled;
            KeyId = keyId;
            LastRotationTime = lastRotationTime;
            LifecycleDetails = lifecycleDetails;
            Metadata = metadata;
            NextRotationTime = nextRotationTime;
            RotationConfigs = rotationConfigs;
            RotationStatus = rotationStatus;
            SecretContents = secretContents;
            SecretGenerationContexts = secretGenerationContexts;
            SecretName = secretName;
            SecretRules = secretRules;
            State = state;
            TimeCreated = timeCreated;
            TimeOfCurrentVersionExpiry = timeOfCurrentVersionExpiry;
            TimeOfDeletion = timeOfDeletion;
            VaultId = vaultId;
        }
    }
}
