// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vbs
{
    public static class GetInstVbsInstances
    {
        /// <summary>
        /// This data source provides the list of Vbs Instances in Oracle Cloud Infrastructure Vbs Inst service.
        /// 
        /// Returns a list of VbsInstances.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVbsInstances = Oci.Vbs.GetInstVbsInstances.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Id = @var.Vbs_instance_id,
        ///         Name = @var.Vbs_instance_name,
        ///         State = @var.Vbs_instance_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstVbsInstancesResult> InvokeAsync(GetInstVbsInstancesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstVbsInstancesResult>("oci:Vbs/getInstVbsInstances:getInstVbsInstances", args ?? new GetInstVbsInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Vbs Instances in Oracle Cloud Infrastructure Vbs Inst service.
        /// 
        /// Returns a list of VbsInstances.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testVbsInstances = Oci.Vbs.GetInstVbsInstances.Invoke(new()
        ///     {
        ///         CompartmentId = @var.Compartment_id,
        ///         Id = @var.Vbs_instance_id,
        ///         Name = @var.Vbs_instance_name,
        ///         State = @var.Vbs_instance_state,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstVbsInstancesResult> Invoke(GetInstVbsInstancesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstVbsInstancesResult>("oci:Vbs/getInstVbsInstances:getInstVbsInstances", args ?? new GetInstVbsInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstVbsInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetInstVbsInstancesFilterArgs>? _filters;
        public List<Inputs.GetInstVbsInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInstVbsInstancesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique VbsInstance identifier
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetInstVbsInstancesArgs()
        {
        }
        public static new GetInstVbsInstancesArgs Empty => new GetInstVbsInstancesArgs();
    }

    public sealed class GetInstVbsInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetInstVbsInstancesFilterInputArgs>? _filters;
        public InputList<Inputs.GetInstVbsInstancesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInstVbsInstancesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// unique VbsInstance identifier
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A filter to return only resources that match the entire name given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A filter to return only resources their lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetInstVbsInstancesInvokeArgs()
        {
        }
        public static new GetInstVbsInstancesInvokeArgs Empty => new GetInstVbsInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstVbsInstancesResult
    {
        /// <summary>
        /// Compartment of the service instance
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetInstVbsInstancesFilterResult> Filters;
        /// <summary>
        /// Unique identifier that is immutable on creation
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Service instance name (unique identifier)
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the VbsInstance.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The list of vbs_instance_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstVbsInstancesVbsInstanceSummaryCollectionResult> VbsInstanceSummaryCollections;

        [OutputConstructor]
        private GetInstVbsInstancesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetInstVbsInstancesFilterResult> filters,

            string? id,

            string? name,

            string? state,

            ImmutableArray<Outputs.GetInstVbsInstancesVbsInstanceSummaryCollectionResult> vbsInstanceSummaryCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
            VbsInstanceSummaryCollections = vbsInstanceSummaryCollections;
        }
    }
}
