// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Vbs
{
    /// <summary>
    /// This resource provides the Vbs Instance resource in Oracle Cloud Infrastructure Vbs Inst service.
    /// 
    /// Creates a new VbsInstance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testVbsInstance = new Oci.Vbs.InstVbsInstance("test_vbs_instance", new()
    ///     {
    ///         CompartmentId = compartmentId,
    ///         DisplayName = vbsInstanceDisplayName,
    ///         Name = vbsInstanceName,
    ///         DefinedTags = 
    ///         {
    ///             { "foo-namespace.bar-key", "value" },
    ///         },
    ///         FreeformTags = 
    ///         {
    ///             { "bar-key", "value" },
    ///         },
    ///         IdcsAccessToken = vbsInstanceIdcsAccessToken,
    ///         IsResourceUsageAgreementGranted = vbsInstanceIsResourceUsageAgreementGranted,
    ///         ResourceCompartmentId = resourceCompartmentId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VbsInstances can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import oci:Vbs/instVbsInstance:InstVbsInstance test_vbs_instance "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:Vbs/instVbsInstance:InstVbsInstance")]
    public partial class InstVbsInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Compartment Identifier. It can only be the root compartment
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Display Name
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
        /// </summary>
        [Output("idcsAccessToken")]
        public Output<string> IdcsAccessToken { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
        /// </summary>
        [Output("isResourceUsageAgreementGranted")]
        public Output<bool> IsResourceUsageAgreementGranted { get; private set; } = null!;

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Output("lifecyleDetails")]
        public Output<string> LifecyleDetails { get; private set; } = null!;

        /// <summary>
        /// Service Instance Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Compartment where VBS may create additional resources for the service instance
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("resourceCompartmentId")]
        public Output<string> ResourceCompartmentId { get; private set; } = null!;

        /// <summary>
        /// The current state of the VbsInstance.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The time the the VbsInstance was created. An RFC3339 formatted datetime string
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The time the VbsInstance was updated. An RFC3339 formatted datetime string
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;

        /// <summary>
        /// Public web URL for accessing the VBS service instance
        /// </summary>
        [Output("vbsAccessUrl")]
        public Output<string> VbsAccessUrl { get; private set; } = null!;


        /// <summary>
        /// Create a InstVbsInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstVbsInstance(string name, InstVbsInstanceArgs args, CustomResourceOptions? options = null)
            : base("oci:Vbs/instVbsInstance:InstVbsInstance", name, args ?? new InstVbsInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstVbsInstance(string name, Input<string> id, InstVbsInstanceState? state = null, CustomResourceOptions? options = null)
            : base("oci:Vbs/instVbsInstance:InstVbsInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstVbsInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstVbsInstance Get(string name, Input<string> id, InstVbsInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new InstVbsInstance(name, id, state, options);
        }
    }

    public sealed class InstVbsInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Compartment Identifier. It can only be the root compartment
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display Name
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
        /// </summary>
        [Input("idcsAccessToken")]
        public Input<string>? IdcsAccessToken { get; set; }

        /// <summary>
        /// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
        /// </summary>
        [Input("isResourceUsageAgreementGranted")]
        public Input<bool>? IsResourceUsageAgreementGranted { get; set; }

        /// <summary>
        /// Service Instance Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) Compartment where VBS may create additional resources for the service instance
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("resourceCompartmentId")]
        public Input<string>? ResourceCompartmentId { get; set; }

        public InstVbsInstanceArgs()
        {
        }
        public static new InstVbsInstanceArgs Empty => new InstVbsInstanceArgs();
    }

    public sealed class InstVbsInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Compartment Identifier. It can only be the root compartment
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Display Name
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// IDCS personal acceess token identifying IDCS user and stripe for the VBS service
        /// </summary>
        [Input("idcsAccessToken")]
        public Input<string>? IdcsAccessToken { get; set; }

        /// <summary>
        /// (Updatable) Whether VBS is authorized to create and use resources in the customer tenancy
        /// </summary>
        [Input("isResourceUsageAgreementGranted")]
        public Input<bool>? IsResourceUsageAgreementGranted { get; set; }

        /// <summary>
        /// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        /// </summary>
        [Input("lifecyleDetails")]
        public Input<string>? LifecyleDetails { get; set; }

        /// <summary>
        /// Service Instance Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) Compartment where VBS may create additional resources for the service instance
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("resourceCompartmentId")]
        public Input<string>? ResourceCompartmentId { get; set; }

        /// <summary>
        /// The current state of the VbsInstance.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The time the the VbsInstance was created. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The time the VbsInstance was updated. An RFC3339 formatted datetime string
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        /// <summary>
        /// Public web URL for accessing the VBS service instance
        /// </summary>
        [Input("vbsAccessUrl")]
        public Input<string>? VbsAccessUrl { get; set; }

        public InstVbsInstanceState()
        {
        }
        public static new InstVbsInstanceState Empty => new InstVbsInstanceState();
    }
}
