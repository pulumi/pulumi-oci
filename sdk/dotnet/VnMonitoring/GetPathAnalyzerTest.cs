// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.VnMonitoring
{
    public static class GetPathAnalyzerTest
    {
        /// <summary>
        /// This data source provides details about a specific Path Analyzer Test resource in Oracle Cloud Infrastructure Vn Monitoring service.
        /// 
        /// Gets a `PathAnalyzerTest` using its identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPathAnalyzerTest = Oci.VnMonitoring.GetPathAnalyzerTest.Invoke(new()
        ///     {
        ///         PathAnalyzerTestId = oci_vn_monitoring_path_analyzer_test.Test_path_analyzer_test.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPathAnalyzerTestResult> InvokeAsync(GetPathAnalyzerTestArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPathAnalyzerTestResult>("oci:VnMonitoring/getPathAnalyzerTest:GetPathAnalyzerTest", args ?? new GetPathAnalyzerTestArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Path Analyzer Test resource in Oracle Cloud Infrastructure Vn Monitoring service.
        /// 
        /// Gets a `PathAnalyzerTest` using its identifier.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPathAnalyzerTest = Oci.VnMonitoring.GetPathAnalyzerTest.Invoke(new()
        ///     {
        ///         PathAnalyzerTestId = oci_vn_monitoring_path_analyzer_test.Test_path_analyzer_test.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPathAnalyzerTestResult> Invoke(GetPathAnalyzerTestInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPathAnalyzerTestResult>("oci:VnMonitoring/getPathAnalyzerTest:GetPathAnalyzerTest", args ?? new GetPathAnalyzerTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPathAnalyzerTestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("pathAnalyzerTestId", required: true)]
        public string PathAnalyzerTestId { get; set; } = null!;

        public GetPathAnalyzerTestArgs()
        {
        }
        public static new GetPathAnalyzerTestArgs Empty => new GetPathAnalyzerTestArgs();
    }

    public sealed class GetPathAnalyzerTestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("pathAnalyzerTestId", required: true)]
        public Input<string> PathAnalyzerTestId { get; set; } = null!;

        public GetPathAnalyzerTestInvokeArgs()
        {
        }
        public static new GetPathAnalyzerTestInvokeArgs Empty => new GetPathAnalyzerTestInvokeArgs();
    }


    [OutputType]
    public sealed class GetPathAnalyzerTestResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource's compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPathAnalyzerTestDestinationEndpointResult> DestinationEndpoints;
        /// <summary>
        /// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// A unique identifier established when the resource is created. The identifier can't be changed later.
        /// </summary>
        public readonly string Id;
        public readonly string PathAnalyzerTestId;
        /// <summary>
        /// The IP protocol to use for the `PathAnalyzerTest` resource.
        /// </summary>
        public readonly int Protocol;
        /// <summary>
        /// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPathAnalyzerTestProtocolParameterResult> ProtocolParameters;
        /// <summary>
        /// Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPathAnalyzerTestQueryOptionResult> QueryOptions;
        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPathAnalyzerTestSourceEndpointResult> SourceEndpoints;
        /// <summary>
        /// The current state of the `PathAnalyzerTest` resource.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> SystemTags;
        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetPathAnalyzerTestResult(
            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            ImmutableArray<Outputs.GetPathAnalyzerTestDestinationEndpointResult> destinationEndpoints,

            string displayName,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            string pathAnalyzerTestId,

            int protocol,

            ImmutableArray<Outputs.GetPathAnalyzerTestProtocolParameterResult> protocolParameters,

            ImmutableArray<Outputs.GetPathAnalyzerTestQueryOptionResult> queryOptions,

            ImmutableArray<Outputs.GetPathAnalyzerTestSourceEndpointResult> sourceEndpoints,

            string state,

            ImmutableDictionary<string, object> systemTags,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DestinationEndpoints = destinationEndpoints;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            PathAnalyzerTestId = pathAnalyzerTestId;
            Protocol = protocol;
            ProtocolParameters = protocolParameters;
            QueryOptions = queryOptions;
            SourceEndpoints = sourceEndpoints;
            State = state;
            SystemTags = systemTags;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
