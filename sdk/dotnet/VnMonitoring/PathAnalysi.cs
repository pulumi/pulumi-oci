// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.VnMonitoring
{
    /// <summary>
    /// This resource provides the Path Analysi resource in Oracle Cloud Infrastructure Vn Monitoring service.
    /// 
    /// Use this method to initiate a [Network Path Analyzer](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) analysis. This method returns
    /// an opc-work-request-id, and you can poll the status of the work request until it either fails or succeeds.
    /// 
    /// If the work request status is successful, use [ListWorkRequestResults](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestResult/ListWorkRequestResults)
    /// with the work request ID to ask for the successful analysis results. If the work request status is failed, use
    /// [ListWorkRequestErrors](https://docs.cloud.oracle.com/iaas/api/#/en/VnConfigAdvisor/latest/WorkRequestError/ListWorkRequestErrors)
    /// with the work request ID to ask for the analysis failure information. The information
    /// returned from either of these methods can be used to build a final report.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testPathAnalysi = new Oci.VnMonitoring.PathAnalysi("testPathAnalysi", new()
    ///     {
    ///         Type = @var.Path_analysi_type,
    ///         CacheControl = @var.Path_analysi_cache_control,
    ///         CompartmentId = @var.Compartment_id,
    ///         DestinationEndpoint = new Oci.VnMonitoring.Inputs.PathAnalysiDestinationEndpointArgs
    ///         {
    ///             Type = @var.Path_analysi_destination_endpoint_type,
    ///             Address = @var.Path_analysi_destination_endpoint_address,
    ///             InstanceId = oci_core_instance.Test_instance.Id,
    ///             ListenerId = oci_load_balancer_listener.Test_listener.Id,
    ///             LoadBalancerId = oci_load_balancer_load_balancer.Test_load_balancer.Id,
    ///             NetworkLoadBalancerId = oci_network_load_balancer_network_load_balancer.Test_network_load_balancer.Id,
    ///             SubnetId = oci_core_subnet.Test_subnet.Id,
    ///             VlanId = oci_core_vlan.Test_vlan.Id,
    ///             VnicId = oci_core_vnic_attachment.Test_vnic_attachment.Id,
    ///         },
    ///         PathAnalyzerTestId = oci_vn_monitoring_path_analyzer_test.Test_path_analyzer_test.Id,
    ///         Protocol = @var.Path_analysi_protocol,
    ///         ProtocolParameters = new Oci.VnMonitoring.Inputs.PathAnalysiProtocolParametersArgs
    ///         {
    ///             Type = @var.Path_analysi_protocol_parameters_type,
    ///             DestinationPort = @var.Path_analysi_protocol_parameters_destination_port,
    ///             IcmpCode = @var.Path_analysi_protocol_parameters_icmp_code,
    ///             IcmpType = @var.Path_analysi_protocol_parameters_icmp_type,
    ///             SourcePort = @var.Path_analysi_protocol_parameters_source_port,
    ///         },
    ///         QueryOptions = new Oci.VnMonitoring.Inputs.PathAnalysiQueryOptionsArgs
    ///         {
    ///             IsBiDirectionalAnalysis = @var.Path_analysi_query_options_is_bi_directional_analysis,
    ///         },
    ///         SourceEndpoint = new Oci.VnMonitoring.Inputs.PathAnalysiSourceEndpointArgs
    ///         {
    ///             Type = @var.Path_analysi_source_endpoint_type,
    ///             Address = @var.Path_analysi_source_endpoint_address,
    ///             InstanceId = oci_core_instance.Test_instance.Id,
    ///             ListenerId = oci_load_balancer_listener.Test_listener.Id,
    ///             LoadBalancerId = oci_load_balancer_load_balancer.Test_load_balancer.Id,
    ///             NetworkLoadBalancerId = oci_network_load_balancer_network_load_balancer.Test_network_load_balancer.Id,
    ///             SubnetId = oci_core_subnet.Test_subnet.Id,
    ///             VlanId = oci_core_vlan.Test_vlan.Id,
    ///             VnicId = oci_core_vnic_attachment.Test_vnic_attachment.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// PathAnalysis can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:VnMonitoring/pathAnalysi:PathAnalysi test_path_analysi "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:VnMonitoring/pathAnalysi:PathAnalysi")]
    public partial class PathAnalysi : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
        /// </summary>
        [Output("cacheControl")]
        public Output<string?> CacheControl { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string?> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("destinationEndpoint")]
        public Output<Outputs.PathAnalysiDestinationEndpoint?> DestinationEndpoint { get; private set; } = null!;

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
        /// </summary>
        [Output("pathAnalyzerTestId")]
        public Output<string?> PathAnalyzerTestId { get; private set; } = null!;

        /// <summary>
        /// The IP protocol to used for the path analysis.
        /// </summary>
        [Output("protocol")]
        public Output<int?> Protocol { get; private set; } = null!;

        /// <summary>
        /// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("protocolParameters")]
        public Output<Outputs.PathAnalysiProtocolParameters?> ProtocolParameters { get; private set; } = null!;

        /// <summary>
        /// Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("queryOptions")]
        public Output<Outputs.PathAnalysiQueryOptions?> QueryOptions { get; private set; } = null!;

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("sourceEndpoint")]
        public Output<Outputs.PathAnalysiSourceEndpoint?> SourceEndpoint { get; private set; } = null!;

        /// <summary>
        /// The type of the `PathAnalysis` query.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a PathAnalysi resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PathAnalysi(string name, PathAnalysiArgs args, CustomResourceOptions? options = null)
            : base("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, args ?? new PathAnalysiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PathAnalysi(string name, Input<string> id, PathAnalysiState? state = null, CustomResourceOptions? options = null)
            : base("oci:VnMonitoring/pathAnalysi:PathAnalysi", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PathAnalysi resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PathAnalysi Get(string name, Input<string> id, PathAnalysiState? state = null, CustomResourceOptions? options = null)
        {
            return new PathAnalysi(name, id, state, options);
        }
    }

    public sealed class PathAnalysiArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
        /// </summary>
        [Input("cacheControl")]
        public Input<string>? CacheControl { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("destinationEndpoint")]
        public Input<Inputs.PathAnalysiDestinationEndpointArgs>? DestinationEndpoint { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("pathAnalyzerTestId")]
        public Input<string>? PathAnalyzerTestId { get; set; }

        /// <summary>
        /// The IP protocol to used for the path analysis.
        /// </summary>
        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        /// <summary>
        /// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocolParameters")]
        public Input<Inputs.PathAnalysiProtocolParametersArgs>? ProtocolParameters { get; set; }

        /// <summary>
        /// Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("queryOptions")]
        public Input<Inputs.PathAnalysiQueryOptionsArgs>? QueryOptions { get; set; }

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("sourceEndpoint")]
        public Input<Inputs.PathAnalysiSourceEndpointArgs>? SourceEndpoint { get; set; }

        /// <summary>
        /// The type of the `PathAnalysis` query.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public PathAnalysiArgs()
        {
        }
        public static new PathAnalysiArgs Empty => new PathAnalysiArgs();
    }

    public sealed class PathAnalysiState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses.
        /// </summary>
        [Input("cacheControl")]
        public Input<string>? CacheControl { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("destinationEndpoint")]
        public Input<Inputs.PathAnalysiDestinationEndpointGetArgs>? DestinationEndpoint { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("pathAnalyzerTestId")]
        public Input<string>? PathAnalyzerTestId { get; set; }

        /// <summary>
        /// The IP protocol to used for the path analysis.
        /// </summary>
        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        /// <summary>
        /// Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocolParameters")]
        public Input<Inputs.PathAnalysiProtocolParametersGetArgs>? ProtocolParameters { get; set; }

        /// <summary>
        /// Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("queryOptions")]
        public Input<Inputs.PathAnalysiQueryOptionsGetArgs>? QueryOptions { get; set; }

        /// <summary>
        /// Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("sourceEndpoint")]
        public Input<Inputs.PathAnalysiSourceEndpointGetArgs>? SourceEndpoint { get; set; }

        /// <summary>
        /// The type of the `PathAnalysis` query.
        /// 
        /// 
        /// ** IMPORTANT **
        /// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public PathAnalysiState()
        {
        }
        public static new PathAnalysiState Empty => new PathAnalysiState();
    }
}
