// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.VnMonitoring
{
    /// <summary>
    /// This resource provides the Path Analyzer Test resource in Oracle Cloud Infrastructure Vn Monitoring service.
    /// 
    /// Creates a new `PathAnalyzerTest` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testPathAnalyzerTest = new Oci.VnMonitoring.PathAnalyzerTest("testPathAnalyzerTest", new Oci.VnMonitoring.PathAnalyzerTestArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             DestinationEndpoint = new Oci.VnMonitoring.Inputs.PathAnalyzerTestDestinationEndpointArgs
    ///             {
    ///                 Type = @var.Path_analyzer_test_destination_endpoint_type,
    ///                 Address = @var.Path_analyzer_test_destination_endpoint_address,
    ///                 InstanceId = oci_core_instance.Test_instance.Id,
    ///                 ListenerId = oci_load_balancer_listener.Test_listener.Id,
    ///                 LoadBalancerId = oci_load_balancer_load_balancer.Test_load_balancer.Id,
    ///                 NetworkLoadBalancerId = oci_network_load_balancer_network_load_balancer.Test_network_load_balancer.Id,
    ///                 SubnetId = oci_core_subnet.Test_subnet.Id,
    ///                 VlanId = oci_core_vlan.Test_vlan.Id,
    ///                 VnicId = oci_core_vnic_attachment.Test_vnic_attachment.Id,
    ///             },
    ///             Protocol = @var.Path_analyzer_test_protocol,
    ///             SourceEndpoint = new Oci.VnMonitoring.Inputs.PathAnalyzerTestSourceEndpointArgs
    ///             {
    ///                 Type = @var.Path_analyzer_test_source_endpoint_type,
    ///                 Address = @var.Path_analyzer_test_source_endpoint_address,
    ///                 InstanceId = oci_core_instance.Test_instance.Id,
    ///                 ListenerId = oci_load_balancer_listener.Test_listener.Id,
    ///                 LoadBalancerId = oci_load_balancer_load_balancer.Test_load_balancer.Id,
    ///                 NetworkLoadBalancerId = oci_network_load_balancer_network_load_balancer.Test_network_load_balancer.Id,
    ///                 SubnetId = oci_core_subnet.Test_subnet.Id,
    ///                 VlanId = oci_core_vlan.Test_vlan.Id,
    ///                 VnicId = oci_core_vnic_attachment.Test_vnic_attachment.Id,
    ///             },
    ///             DefinedTags = 
    ///             {
    ///                 { "foo-namespace.bar-key", "value" },
    ///             },
    ///             DisplayName = @var.Path_analyzer_test_display_name,
    ///             FreeformTags = 
    ///             {
    ///                 { "bar-key", "value" },
    ///             },
    ///             ProtocolParameters = new Oci.VnMonitoring.Inputs.PathAnalyzerTestProtocolParametersArgs
    ///             {
    ///                 Type = @var.Path_analyzer_test_protocol_parameters_type,
    ///                 DestinationPort = @var.Path_analyzer_test_protocol_parameters_destination_port,
    ///                 IcmpCode = @var.Path_analyzer_test_protocol_parameters_icmp_code,
    ///                 IcmpType = @var.Path_analyzer_test_protocol_parameters_icmp_type,
    ///                 SourcePort = @var.Path_analyzer_test_protocol_parameters_source_port,
    ///             },
    ///             QueryOptions = new Oci.VnMonitoring.Inputs.PathAnalyzerTestQueryOptionsArgs
    ///             {
    ///                 IsBiDirectionalAnalysis = @var.Path_analyzer_test_query_options_is_bi_directional_analysis,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// PathAnalyzerTests can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest test_path_analyzer_test "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest")]
    public partial class PathAnalyzerTest : Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource's compartment.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        [Output("definedTags")]
        public Output<ImmutableDictionary<string, object>> DefinedTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("destinationEndpoint")]
        public Output<Outputs.PathAnalyzerTestDestinationEndpoint> DestinationEndpoint { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        [Output("freeformTags")]
        public Output<ImmutableDictionary<string, object>> FreeformTags { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
        /// </summary>
        [Output("protocol")]
        public Output<int> Protocol { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("protocolParameters")]
        public Output<Outputs.PathAnalyzerTestProtocolParameters> ProtocolParameters { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("queryOptions")]
        public Output<Outputs.PathAnalyzerTestQueryOptions> QueryOptions { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Output("sourceEndpoint")]
        public Output<Outputs.PathAnalyzerTestSourceEndpoint> SourceEndpoint { get; private set; } = null!;

        /// <summary>
        /// The current state of the `PathAnalyzerTest` resource.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        [Output("systemTags")]
        public Output<ImmutableDictionary<string, object>> SystemTags { get; private set; } = null!;

        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Output("timeCreated")]
        public Output<string> TimeCreated { get; private set; } = null!;

        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Output("timeUpdated")]
        public Output<string> TimeUpdated { get; private set; } = null!;


        /// <summary>
        /// Create a PathAnalyzerTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PathAnalyzerTest(string name, PathAnalyzerTestArgs args, CustomResourceOptions? options = null)
            : base("oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest", name, args ?? new PathAnalyzerTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PathAnalyzerTest(string name, Input<string> id, PathAnalyzerTestState? state = null, CustomResourceOptions? options = null)
            : base("oci:VnMonitoring/pathAnalyzerTest:PathAnalyzerTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PathAnalyzerTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PathAnalyzerTest Get(string name, Input<string> id, PathAnalyzerTestState? state = null, CustomResourceOptions? options = null)
        {
            return new PathAnalyzerTest(name, id, state, options);
        }
    }

    public sealed class PathAnalyzerTestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource's compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("destinationEndpoint", required: true)]
        public Input<Inputs.PathAnalyzerTestDestinationEndpointArgs> DestinationEndpoint { get; set; } = null!;

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<int> Protocol { get; set; } = null!;

        /// <summary>
        /// (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocolParameters")]
        public Input<Inputs.PathAnalyzerTestProtocolParametersArgs>? ProtocolParameters { get; set; }

        /// <summary>
        /// (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("queryOptions")]
        public Input<Inputs.PathAnalyzerTestQueryOptionsArgs>? QueryOptions { get; set; }

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("sourceEndpoint", required: true)]
        public Input<Inputs.PathAnalyzerTestSourceEndpointArgs> SourceEndpoint { get; set; } = null!;

        public PathAnalyzerTestArgs()
        {
        }
    }

    public sealed class PathAnalyzerTestState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the `PathAnalyzerTest` resource's compartment.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("definedTags")]
        private InputMap<object>? _definedTags;

        /// <summary>
        /// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public InputMap<object> DefinedTags
        {
            get => _definedTags ?? (_definedTags = new InputMap<object>());
            set => _definedTags = value;
        }

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("destinationEndpoint")]
        public Input<Inputs.PathAnalyzerTestDestinationEndpointGetArgs>? DestinationEndpoint { get; set; }

        /// <summary>
        /// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("freeformTags")]
        private InputMap<object>? _freeformTags;

        /// <summary>
        /// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public InputMap<object> FreeformTags
        {
            get => _freeformTags ?? (_freeformTags = new InputMap<object>());
            set => _freeformTags = value;
        }

        /// <summary>
        /// (Updatable) The IP protocol to use in the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        /// <summary>
        /// (Updatable) Defines the IP protocol parameters for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("protocolParameters")]
        public Input<Inputs.PathAnalyzerTestProtocolParametersGetArgs>? ProtocolParameters { get; set; }

        /// <summary>
        /// (Updatable) Defines the query options required for a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("queryOptions")]
        public Input<Inputs.PathAnalyzerTestQueryOptionsGetArgs>? QueryOptions { get; set; }

        /// <summary>
        /// (Updatable) Information describing a source or destination in a `PathAnalyzerTest` resource.
        /// </summary>
        [Input("sourceEndpoint")]
        public Input<Inputs.PathAnalyzerTestSourceEndpointGetArgs>? SourceEndpoint { get; set; }

        /// <summary>
        /// The current state of the `PathAnalyzerTest` resource.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("systemTags")]
        private InputMap<object>? _systemTags;

        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public InputMap<object> SystemTags
        {
            get => _systemTags ?? (_systemTags = new InputMap<object>());
            set => _systemTags = value;
        }

        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeCreated")]
        public Input<string>? TimeCreated { get; set; }

        /// <summary>
        /// The date and time the `PathAnalyzerTest` resource was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        [Input("timeUpdated")]
        public Input<string>? TimeUpdated { get; set; }

        public PathAnalyzerTestState()
        {
        }
    }
}
