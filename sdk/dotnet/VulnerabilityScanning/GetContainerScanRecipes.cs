// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.VulnerabilityScanning
{
    public static class GetContainerScanRecipes
    {
        /// <summary>
        /// This data source provides the list of Container Scan Recipes in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Retrieves a list of ContainerScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanRecipes = Oci.VulnerabilityScanning.GetContainerScanRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = containerScanRecipeDisplayName,
        ///         State = containerScanRecipeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainerScanRecipesResult> InvokeAsync(GetContainerScanRecipesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerScanRecipesResult>("oci:VulnerabilityScanning/getContainerScanRecipes:getContainerScanRecipes", args ?? new GetContainerScanRecipesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Container Scan Recipes in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Retrieves a list of ContainerScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanRecipes = Oci.VulnerabilityScanning.GetContainerScanRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = containerScanRecipeDisplayName,
        ///         State = containerScanRecipeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerScanRecipesResult> Invoke(GetContainerScanRecipesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerScanRecipesResult>("oci:VulnerabilityScanning/getContainerScanRecipes:getContainerScanRecipes", args ?? new GetContainerScanRecipesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Container Scan Recipes in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Retrieves a list of ContainerScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanRecipes = Oci.VulnerabilityScanning.GetContainerScanRecipes.Invoke(new()
        ///     {
        ///         CompartmentId = compartmentId,
        ///         DisplayName = containerScanRecipeDisplayName,
        ///         State = containerScanRecipeState,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerScanRecipesResult> Invoke(GetContainerScanRecipesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerScanRecipesResult>("oci:VulnerabilityScanning/getContainerScanRecipes:getContainerScanRecipes", args ?? new GetContainerScanRecipesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerScanRecipesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetContainerScanRecipesFilterArgs>? _filters;
        public List<Inputs.GetContainerScanRecipesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetContainerScanRecipesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetContainerScanRecipesArgs()
        {
        }
        public static new GetContainerScanRecipesArgs Empty => new GetContainerScanRecipesArgs();
    }

    public sealed class GetContainerScanRecipesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the compartment in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetContainerScanRecipesFilterInputArgs>? _filters;
        public InputList<Inputs.GetContainerScanRecipesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetContainerScanRecipesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources whose lifecycleState matches the given lifecycleState.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetContainerScanRecipesInvokeArgs()
        {
        }
        public static new GetContainerScanRecipesInvokeArgs Empty => new GetContainerScanRecipesInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerScanRecipesResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container scan recipe's compartment
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The list of container_scan_recipe_summary_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult> ContainerScanRecipeSummaryCollections;
        /// <summary>
        /// User friendly name of container scan recipe
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetContainerScanRecipesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the config.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetContainerScanRecipesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetContainerScanRecipesContainerScanRecipeSummaryCollectionResult> containerScanRecipeSummaryCollections,

            string? displayName,

            ImmutableArray<Outputs.GetContainerScanRecipesFilterResult> filters,

            string id,

            string? state)
        {
            CompartmentId = compartmentId;
            ContainerScanRecipeSummaryCollections = containerScanRecipeSummaryCollections;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
