// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.VulnerabilityScanning
{
    public static class GetContainerScanTarget
    {
        /// <summary>
        /// This data source provides details about a specific Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Gets a ContainerScanTarget identified by the target ID. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanTarget = Oci.VulnerabilityScanning.GetContainerScanTarget.Invoke(new()
        ///     {
        ///         ContainerScanTargetId = testContainerScanTargetOciVulnerabilityScanningContainerScanTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetContainerScanTargetResult> InvokeAsync(GetContainerScanTargetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerScanTargetResult>("oci:VulnerabilityScanning/getContainerScanTarget:getContainerScanTarget", args ?? new GetContainerScanTargetArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Gets a ContainerScanTarget identified by the target ID. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanTarget = Oci.VulnerabilityScanning.GetContainerScanTarget.Invoke(new()
        ///     {
        ///         ContainerScanTargetId = testContainerScanTargetOciVulnerabilityScanningContainerScanTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerScanTargetResult> Invoke(GetContainerScanTargetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerScanTargetResult>("oci:VulnerabilityScanning/getContainerScanTarget:getContainerScanTarget", args ?? new GetContainerScanTargetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Container Scan Target resource in Oracle Cloud Infrastructure Vulnerability Scanning service.
        /// 
        /// Gets a ContainerScanTarget identified by the target ID. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testContainerScanTarget = Oci.VulnerabilityScanning.GetContainerScanTarget.Invoke(new()
        ///     {
        ///         ContainerScanTargetId = testContainerScanTargetOciVulnerabilityScanningContainerScanTarget.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetContainerScanTargetResult> Invoke(GetContainerScanTargetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerScanTargetResult>("oci:VulnerabilityScanning/getContainerScanTarget:getContainerScanTarget", args ?? new GetContainerScanTargetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerScanTargetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// unique ContainerScanTarget identifier
        /// </summary>
        [Input("containerScanTargetId", required: true)]
        public string ContainerScanTargetId { get; set; } = null!;

        public GetContainerScanTargetArgs()
        {
        }
        public static new GetContainerScanTargetArgs Empty => new GetContainerScanTargetArgs();
    }

    public sealed class GetContainerScanTargetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// unique ContainerScanTarget identifier
        /// </summary>
        [Input("containerScanTargetId", required: true)]
        public Input<string> ContainerScanTargetId { get; set; } = null!;

        public GetContainerScanTargetInvokeArgs()
        {
        }
        public static new GetContainerScanTargetInvokeArgs Empty => new GetContainerScanTargetInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerScanTargetResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to perform the scans in. All listed repositories must be in the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// ID of the container scan recipe this target applies.
        /// </summary>
        public readonly string ContainerScanRecipeId;
        public readonly string ContainerScanTargetId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> DefinedTags;
        /// <summary>
        /// Target description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// User friendly name of container scan target
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of container scan target. Immutable and generated on creation.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current state of the config.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        /// </summary>
        public readonly ImmutableDictionary<string, string> SystemTags;
        /// <summary>
        /// Registry information for a container scan target
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerScanTargetTargetRegistryResult> TargetRegistries;
        /// <summary>
        /// Date and time the target was created, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// Date and time the target was last updated, format as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
        /// </summary>
        public readonly string TimeUpdated;

        [OutputConstructor]
        private GetContainerScanTargetResult(
            string compartmentId,

            string containerScanRecipeId,

            string containerScanTargetId,

            ImmutableDictionary<string, string> definedTags,

            string description,

            string displayName,

            ImmutableDictionary<string, string> freeformTags,

            string id,

            string state,

            ImmutableDictionary<string, string> systemTags,

            ImmutableArray<Outputs.GetContainerScanTargetTargetRegistryResult> targetRegistries,

            string timeCreated,

            string timeUpdated)
        {
            CompartmentId = compartmentId;
            ContainerScanRecipeId = containerScanRecipeId;
            ContainerScanTargetId = containerScanTargetId;
            DefinedTags = definedTags;
            Description = description;
            DisplayName = displayName;
            FreeformTags = freeformTags;
            Id = id;
            State = state;
            SystemTags = systemTags;
            TargetRegistries = targetRegistries;
            TimeCreated = timeCreated;
            TimeUpdated = timeUpdated;
        }
    }
}
