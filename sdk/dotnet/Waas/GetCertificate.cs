// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Waas
{
    public static class GetCertificate
    {
        /// <summary>
        /// This data source provides details about a specific Certificate resource in Oracle Cloud Infrastructure Web Application Acceleration and Security service.
        /// 
        /// Gets the details of an SSL certificate.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificate = Oci.Waas.GetCertificate.Invoke(new()
        ///     {
        ///         CertificateId = testCertificateOciWaasCertificate.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("oci:Waas/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides details about a specific Certificate resource in Oracle Cloud Infrastructure Web Application Acceleration and Security service.
        /// 
        /// Gets the details of an SSL certificate.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testCertificate = Oci.Waas.GetCertificate.Invoke(new()
        ///     {
        ///         CertificateId = testCertificateOciWaasCertificate.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("oci:Waas/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate used in the WAAS policy. This number is generated when the certificate is added to the policy.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate used in the WAAS policy. This number is generated when the certificate is added to the policy.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// The data of the SSL certificate.
        /// </summary>
        public readonly string CertificateData;
        public readonly string CertificateId;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate's compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> DefinedTags;
        /// <summary>
        /// The user-friendly name of the SSL certificate.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Additional attributes associated with users or public keys for managing relationships between Certificate Authorities.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateExtensionResult> Extensions;
        /// <summary>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        /// </summary>
        public readonly ImmutableDictionary<string, object> FreeformTags;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SSL certificate.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This indicates whether trust verification was disabled during the creation of SSL certificate. If `true` SSL certificate trust verification was disabled and this SSL certificate is most likely self-signed.
        /// </summary>
        public readonly bool IsTrustVerificationDisabled;
        public readonly string IssuedBy;
        /// <summary>
        /// The issuer of the certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateIssuerNameResult> IssuerNames;
        public readonly string PrivateKeyData;
        /// <summary>
        /// Information about the public key and the algorithm used by the public key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatePublicKeyInfoResult> PublicKeyInfos;
        /// <summary>
        /// A unique, positive integer assigned by the Certificate Authority (CA). The issuer name and serial number identify a unique certificate.
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// The identifier for the cryptographic algorithm used by the Certificate Authority (CA) to sign this certificate.
        /// </summary>
        public readonly string SignatureAlgorithm;
        /// <summary>
        /// The current lifecycle state of the SSL certificate.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The entity to be secured by the certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateSubjectNameResult> SubjectNames;
        /// <summary>
        /// The date and time the certificate was created, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeCreated;
        /// <summary>
        /// The date and time the certificate will expire, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeNotValidAfter;
        /// <summary>
        /// The date and time the certificate will become valid, expressed in RFC 3339 timestamp format.
        /// </summary>
        public readonly string TimeNotValidBefore;
        /// <summary>
        /// The version of the encoded certificate.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCertificateResult(
            string certificateData,

            string certificateId,

            string compartmentId,

            ImmutableDictionary<string, object> definedTags,

            string displayName,

            ImmutableArray<Outputs.GetCertificateExtensionResult> extensions,

            ImmutableDictionary<string, object> freeformTags,

            string id,

            bool isTrustVerificationDisabled,

            string issuedBy,

            ImmutableArray<Outputs.GetCertificateIssuerNameResult> issuerNames,

            string privateKeyData,

            ImmutableArray<Outputs.GetCertificatePublicKeyInfoResult> publicKeyInfos,

            string serialNumber,

            string signatureAlgorithm,

            string state,

            ImmutableArray<Outputs.GetCertificateSubjectNameResult> subjectNames,

            string timeCreated,

            string timeNotValidAfter,

            string timeNotValidBefore,

            int version)
        {
            CertificateData = certificateData;
            CertificateId = certificateId;
            CompartmentId = compartmentId;
            DefinedTags = definedTags;
            DisplayName = displayName;
            Extensions = extensions;
            FreeformTags = freeformTags;
            Id = id;
            IsTrustVerificationDisabled = isTrustVerificationDisabled;
            IssuedBy = issuedBy;
            IssuerNames = issuerNames;
            PrivateKeyData = privateKeyData;
            PublicKeyInfos = publicKeyInfos;
            SerialNumber = serialNumber;
            SignatureAlgorithm = signatureAlgorithm;
            State = state;
            SubjectNames = subjectNames;
            TimeCreated = timeCreated;
            TimeNotValidAfter = timeNotValidAfter;
            TimeNotValidBefore = timeNotValidBefore;
            Version = version;
        }
    }
}
