// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Waas.Inputs
{

    public sealed class PolicyWafConfigAccessRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The action to take against requests from detected bots. If unspecified, defaults to `DETECT`.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// (Updatable) If `action` is set to `BLOCK`, this specifies how the traffic is blocked when detected as malicious by a protection rule. If unspecified, defaults to `SET_RESPONSE_CODE`.
        /// </summary>
        [Input("blockAction")]
        public Input<string>? BlockAction { get; set; }

        /// <summary>
        /// (Updatable) The error code to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`.
        /// </summary>
        [Input("blockErrorPageCode")]
        public Input<string>? BlockErrorPageCode { get; set; }

        /// <summary>
        /// (Updatable) The description text to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `Access blocked by website owner. Please contact support.`
        /// </summary>
        [Input("blockErrorPageDescription")]
        public Input<string>? BlockErrorPageDescription { get; set; }

        /// <summary>
        /// (Updatable) The message to show on the error page when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_ERROR_PAGE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to 'Access to the website is blocked.'
        /// </summary>
        [Input("blockErrorPageMessage")]
        public Input<string>? BlockErrorPageMessage { get; set; }

        /// <summary>
        /// (Updatable) The response code returned when `action` is set to `BLOCK`, `blockAction` is set to `SET_RESPONSE_CODE`, and the traffic is detected as malicious by a protection rule. If unspecified, defaults to `403`. The list of available response codes: `400`, `401`, `403`, `405`, `409`, `411`, `412`, `413`, `414`, `415`, `416`, `500`, `501`, `502`, `503`, `504`, `507`.
        /// </summary>
        [Input("blockResponseCode")]
        public Input<int>? BlockResponseCode { get; set; }

        [Input("bypassChallenges")]
        private InputList<string>? _bypassChallenges;

        /// <summary>
        /// (Updatable) The list of challenges to bypass when `action` is set to `BYPASS`. If unspecified or empty, all challenges are bypassed.
        /// * **JS_CHALLENGE:** Bypasses JavaScript Challenge.
        /// * **DEVICE_FINGERPRINT_CHALLENGE:** Bypasses Device Fingerprint Challenge.
        /// * **HUMAN_INTERACTION_CHALLENGE:** Bypasses Human Interaction Challenge.
        /// * **CAPTCHA:** Bypasses CAPTCHA Challenge.
        /// </summary>
        public InputList<string> BypassChallenges
        {
            get => _bypassChallenges ?? (_bypassChallenges = new InputList<string>());
            set => _bypassChallenges = value;
        }

        /// <summary>
        /// (Updatable) The text to show in the footer when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, default to `Enter the letters and numbers as they are shown in image above`.
        /// </summary>
        [Input("captchaFooter")]
        public Input<string>? CaptchaFooter { get; set; }

        /// <summary>
        /// (Updatable) The text to show in the header when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `We have detected an increased number of attempts to access this webapp. To help us keep this webapp secure, please let us know that you are not a robot by entering the text from captcha below.`
        /// </summary>
        [Input("captchaHeader")]
        public Input<string>? CaptchaHeader { get; set; }

        /// <summary>
        /// (Updatable) The text to show on the label of the CAPTCHA challenge submit button when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Yes, I am human`.
        /// </summary>
        [Input("captchaSubmitLabel")]
        public Input<string>? CaptchaSubmitLabel { get; set; }

        /// <summary>
        /// (Updatable) The title used when showing a CAPTCHA challenge when `action` is set to `BLOCK`, `blockAction` is set to `SHOW_CAPTCHA`, and the request is blocked. If unspecified, defaults to `Are you human?`
        /// </summary>
        [Input("captchaTitle")]
        public Input<string>? CaptchaTitle { get; set; }

        [Input("criterias", required: true)]
        private InputList<Inputs.PolicyWafConfigAccessRuleCriteriaGetArgs>? _criterias;

        /// <summary>
        /// (Updatable) When defined, the JavaScript Challenge would be applied only for the requests that matched all the listed conditions.
        /// </summary>
        public InputList<Inputs.PolicyWafConfigAccessRuleCriteriaGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.PolicyWafConfigAccessRuleCriteriaGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// (Updatable) The unique name of the whitelist.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (Updatable) The response status code to return when `action` is set to `REDIRECT`.
        /// * **MOVED_PERMANENTLY:** Used for designating the permanent movement of a page (numerical code - 301).
        /// * **FOUND:** Used for designating the temporary movement of a page (numerical code - 302).
        /// </summary>
        [Input("redirectResponseCode")]
        public Input<string>? RedirectResponseCode { get; set; }

        /// <summary>
        /// (Updatable) The target to which the request should be redirected, represented as a URI reference. Required when `action` is `REDIRECT`.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        [Input("responseHeaderManipulations")]
        private InputList<Inputs.PolicyWafConfigAccessRuleResponseHeaderManipulationGetArgs>? _responseHeaderManipulations;

        /// <summary>
        /// (Updatable) An object that represents an action to apply to an HTTP response headers if all rule criteria will be matched regardless of `action` value.
        /// </summary>
        public InputList<Inputs.PolicyWafConfigAccessRuleResponseHeaderManipulationGetArgs> ResponseHeaderManipulations
        {
            get => _responseHeaderManipulations ?? (_responseHeaderManipulations = new InputList<Inputs.PolicyWafConfigAccessRuleResponseHeaderManipulationGetArgs>());
            set => _responseHeaderManipulations = value;
        }

        public PolicyWafConfigAccessRuleGetArgs()
        {
        }
        public static new PolicyWafConfigAccessRuleGetArgs Empty => new PolicyWafConfigAccessRuleGetArgs();
    }
}
