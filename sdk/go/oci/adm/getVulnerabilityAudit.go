// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package adm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides details about a specific Vulnerability Audit resource in Oracle Cloud Infrastructure ADM service.
//
// Returns the details of the specified Vulnerability Audit.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Adm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Adm.GetVulnerabilityAudit(ctx, &adm.GetVulnerabilityAuditArgs{
//				VulnerabilityAuditId: oci_adm_vulnerability_audit.Test_vulnerability_audit.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVulnerabilityAudit(ctx *pulumi.Context, args *LookupVulnerabilityAuditArgs, opts ...pulumi.InvokeOption) (*LookupVulnerabilityAuditResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVulnerabilityAuditResult
	err := ctx.Invoke("oci:Adm/getVulnerabilityAudit:getVulnerabilityAudit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVulnerabilityAudit.
type LookupVulnerabilityAuditArgs struct {
	// Unique Vulnerability Audit identifier path parameter.
	VulnerabilityAuditId string `pulumi:"vulnerabilityAuditId"`
}

// A collection of values returned by getVulnerabilityAudit.
type LookupVulnerabilityAuditResult struct {
	ApplicationDependencies []GetVulnerabilityAuditApplicationDependency `pulumi:"applicationDependencies"`
	// The type of the build tool.
	BuildType string `pulumi:"buildType"`
	// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the compartment associated with the Vulnerability Audit.
	CompartmentId string `pulumi:"compartmentId"`
	// Configuration for a Vulnerability Audit. A vulnerable Application Dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
	Configurations []GetVulnerabilityAuditConfiguration `pulumi:"configurations"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The name of the Vulnerability Audit.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique vulnerability identifier, e.g. CVE-1999-0067.
	Id string `pulumi:"id"`
	// Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
	IsSuccess bool `pulumi:"isSuccess"`
	// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Knowledge Base.
	KnowledgeBaseId string `pulumi:"knowledgeBaseId"`
	// Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable Application Dependencies.
	MaxObservedCvssV2score float64 `pulumi:"maxObservedCvssV2score"`
	// Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable Application Dependencies including ignored ones.
	MaxObservedCvssV2scoreWithIgnored float64 `pulumi:"maxObservedCvssV2scoreWithIgnored"`
	// Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable Application Dependencies.
	MaxObservedCvssV3score float64 `pulumi:"maxObservedCvssV3score"`
	// Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable Application Dependencies including ignored ones.
	MaxObservedCvssV3scoreWithIgnored float64 `pulumi:"maxObservedCvssV3scoreWithIgnored"`
	// Vulnerability Audit source.
	Sources []GetVulnerabilityAuditSource `pulumi:"sources"`
	// The current lifecycle state of the Vulnerability Audit.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The creation date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeCreated string `pulumi:"timeCreated"`
	// The update date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeUpdated string `pulumi:"timeUpdated"`
	// List of vulnerabilities found in the Vulnerability Audit.
	Vulnerabilities      []GetVulnerabilityAuditVulnerability `pulumi:"vulnerabilities"`
	VulnerabilityAuditId string                               `pulumi:"vulnerabilityAuditId"`
	// Count of non-ignored vulnerable Application Dependencies.
	VulnerableArtifactsCount int `pulumi:"vulnerableArtifactsCount"`
	// Count of all vulnerable Application Dependencies.
	VulnerableArtifactsCountWithIgnored int `pulumi:"vulnerableArtifactsCountWithIgnored"`
}

func LookupVulnerabilityAuditOutput(ctx *pulumi.Context, args LookupVulnerabilityAuditOutputArgs, opts ...pulumi.InvokeOption) LookupVulnerabilityAuditResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVulnerabilityAuditResult, error) {
			args := v.(LookupVulnerabilityAuditArgs)
			r, err := LookupVulnerabilityAudit(ctx, &args, opts...)
			var s LookupVulnerabilityAuditResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVulnerabilityAuditResultOutput)
}

// A collection of arguments for invoking getVulnerabilityAudit.
type LookupVulnerabilityAuditOutputArgs struct {
	// Unique Vulnerability Audit identifier path parameter.
	VulnerabilityAuditId pulumi.StringInput `pulumi:"vulnerabilityAuditId"`
}

func (LookupVulnerabilityAuditOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVulnerabilityAuditArgs)(nil)).Elem()
}

// A collection of values returned by getVulnerabilityAudit.
type LookupVulnerabilityAuditResultOutput struct{ *pulumi.OutputState }

func (LookupVulnerabilityAuditResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVulnerabilityAuditResult)(nil)).Elem()
}

func (o LookupVulnerabilityAuditResultOutput) ToLookupVulnerabilityAuditResultOutput() LookupVulnerabilityAuditResultOutput {
	return o
}

func (o LookupVulnerabilityAuditResultOutput) ToLookupVulnerabilityAuditResultOutputWithContext(ctx context.Context) LookupVulnerabilityAuditResultOutput {
	return o
}

func (o LookupVulnerabilityAuditResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVulnerabilityAuditResult] {
	return pulumix.Output[LookupVulnerabilityAuditResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupVulnerabilityAuditResultOutput) ApplicationDependencies() GetVulnerabilityAuditApplicationDependencyArrayOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) []GetVulnerabilityAuditApplicationDependency {
		return v.ApplicationDependencies
	}).(GetVulnerabilityAuditApplicationDependencyArrayOutput)
}

// The type of the build tool.
func (o LookupVulnerabilityAuditResultOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.BuildType }).(pulumi.StringOutput)
}

// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the compartment associated with the Vulnerability Audit.
func (o LookupVulnerabilityAuditResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Configuration for a Vulnerability Audit. A vulnerable Application Dependency is ignored if its name does match any of the items in `exclusions`, or all of the associated Vulnerabilies have a CVSS v2 score below `maxPermissibleCvssV2Score` and a CVSS v3 score below `maxPermissibleCvssV3Score`. type: object
func (o LookupVulnerabilityAuditResultOutput) Configurations() GetVulnerabilityAuditConfigurationArrayOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) []GetVulnerabilityAuditConfiguration { return v.Configurations }).(GetVulnerabilityAuditConfigurationArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupVulnerabilityAuditResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The name of the Vulnerability Audit.
func (o LookupVulnerabilityAuditResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupVulnerabilityAuditResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique vulnerability identifier, e.g. CVE-1999-0067.
func (o LookupVulnerabilityAuditResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
func (o LookupVulnerabilityAuditResultOutput) IsSuccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) bool { return v.IsSuccess }).(pulumi.BoolOutput)
}

// The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)) of the Knowledge Base.
func (o LookupVulnerabilityAuditResultOutput) KnowledgeBaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.KnowledgeBaseId }).(pulumi.StringOutput)
}

// Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable Application Dependencies.
func (o LookupVulnerabilityAuditResultOutput) MaxObservedCvssV2score() pulumi.Float64Output {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) float64 { return v.MaxObservedCvssV2score }).(pulumi.Float64Output)
}

// Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable Application Dependencies including ignored ones.
func (o LookupVulnerabilityAuditResultOutput) MaxObservedCvssV2scoreWithIgnored() pulumi.Float64Output {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) float64 { return v.MaxObservedCvssV2scoreWithIgnored }).(pulumi.Float64Output)
}

// Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable Application Dependencies.
func (o LookupVulnerabilityAuditResultOutput) MaxObservedCvssV3score() pulumi.Float64Output {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) float64 { return v.MaxObservedCvssV3score }).(pulumi.Float64Output)
}

// Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable Application Dependencies including ignored ones.
func (o LookupVulnerabilityAuditResultOutput) MaxObservedCvssV3scoreWithIgnored() pulumi.Float64Output {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) float64 { return v.MaxObservedCvssV3scoreWithIgnored }).(pulumi.Float64Output)
}

// Vulnerability Audit source.
func (o LookupVulnerabilityAuditResultOutput) Sources() GetVulnerabilityAuditSourceArrayOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) []GetVulnerabilityAuditSource { return v.Sources }).(GetVulnerabilityAuditSourceArrayOutput)
}

// The current lifecycle state of the Vulnerability Audit.
func (o LookupVulnerabilityAuditResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupVulnerabilityAuditResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The creation date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupVulnerabilityAuditResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The update date and time of the Vulnerability Audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupVulnerabilityAuditResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// List of vulnerabilities found in the Vulnerability Audit.
func (o LookupVulnerabilityAuditResultOutput) Vulnerabilities() GetVulnerabilityAuditVulnerabilityArrayOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) []GetVulnerabilityAuditVulnerability { return v.Vulnerabilities }).(GetVulnerabilityAuditVulnerabilityArrayOutput)
}

func (o LookupVulnerabilityAuditResultOutput) VulnerabilityAuditId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) string { return v.VulnerabilityAuditId }).(pulumi.StringOutput)
}

// Count of non-ignored vulnerable Application Dependencies.
func (o LookupVulnerabilityAuditResultOutput) VulnerableArtifactsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) int { return v.VulnerableArtifactsCount }).(pulumi.IntOutput)
}

// Count of all vulnerable Application Dependencies.
func (o LookupVulnerabilityAuditResultOutput) VulnerableArtifactsCountWithIgnored() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVulnerabilityAuditResult) int { return v.VulnerableArtifactsCountWithIgnored }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVulnerabilityAuditResultOutput{})
}
