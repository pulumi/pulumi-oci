// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aidocument

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Processor Job resource in Oracle Cloud Infrastructure Ai Document service.
//
// Create a processor job for document analysis.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/AiDocument"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := AiDocument.NewProcessorJob(ctx, "testProcessorJob", &AiDocument.ProcessorJobArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				InputLocation: &aidocument.ProcessorJobInputLocationArgs{
//					SourceType: pulumi.Any(_var.Processor_job_input_location_source_type),
//					Data:       pulumi.Any(_var.Processor_job_input_location_data),
//					ObjectLocations: aidocument.ProcessorJobInputLocationObjectLocationArray{
//						&aidocument.ProcessorJobInputLocationObjectLocationArgs{
//							Bucket:    pulumi.Any(_var.Processor_job_input_location_object_locations_bucket),
//							Namespace: pulumi.Any(_var.Processor_job_input_location_object_locations_namespace),
//							Object:    pulumi.Any(_var.Processor_job_input_location_object_locations_object),
//						},
//					},
//				},
//				OutputLocation: &aidocument.ProcessorJobOutputLocationArgs{
//					Bucket:    pulumi.Any(_var.Processor_job_output_location_bucket),
//					Namespace: pulumi.Any(_var.Processor_job_output_location_namespace),
//					Prefix:    pulumi.Any(_var.Processor_job_output_location_prefix),
//				},
//				ProcessorConfig: &aidocument.ProcessorJobProcessorConfigArgs{
//					Features: aidocument.ProcessorJobProcessorConfigFeatureArray{
//						&aidocument.ProcessorJobProcessorConfigFeatureArgs{
//							FeatureType:           pulumi.Any(_var.Processor_job_processor_config_features_feature_type),
//							GenerateSearchablePdf: pulumi.Any(_var.Processor_job_processor_config_features_generate_searchable_pdf),
//							MaxResults:            pulumi.Any(_var.Processor_job_processor_config_features_max_results),
//							ModelId:               pulumi.Any(oci_ai_document_model.Test_model.Id),
//						},
//					},
//					ProcessorType:      pulumi.Any(_var.Processor_job_processor_config_processor_type),
//					DocumentType:       pulumi.Any(_var.Processor_job_processor_config_document_type),
//					IsZipOutputEnabled: pulumi.Any(_var.Processor_job_processor_config_is_zip_output_enabled),
//					Language:           pulumi.Any(_var.Processor_job_processor_config_language),
//				},
//				DisplayName: pulumi.Any(_var.Processor_job_display_name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProcessorJobs can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:AiDocument/processorJob:ProcessorJob test_processor_job "id"
//
// ```
type ProcessorJob struct {
	pulumi.CustomResourceState

	// The compartment identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The display name of the processor job.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The location of the inputs.
	InputLocation ProcessorJobInputLocationOutput `pulumi:"inputLocation"`
	// The detailed status of FAILED state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The Object Storage Location.
	OutputLocation ProcessorJobOutputLocationOutput `pulumi:"outputLocation"`
	// How much progress the operation has made, compared to the total amount of work to be performed.
	PercentComplete pulumi.Float64Output `pulumi:"percentComplete"`
	// The configuration of a processor.
	ProcessorConfig ProcessorJobProcessorConfigOutput `pulumi:"processorConfig"`
	// The current state of the processor job.
	State pulumi.StringOutput `pulumi:"state"`
	// The job acceptance time.
	TimeAccepted pulumi.StringOutput `pulumi:"timeAccepted"`
	// The job finish time.
	TimeFinished pulumi.StringOutput `pulumi:"timeFinished"`
	// The job start time.
	TimeStarted pulumi.StringOutput `pulumi:"timeStarted"`
}

// NewProcessorJob registers a new resource with the given unique name, arguments, and options.
func NewProcessorJob(ctx *pulumi.Context,
	name string, args *ProcessorJobArgs, opts ...pulumi.ResourceOption) (*ProcessorJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.InputLocation == nil {
		return nil, errors.New("invalid value for required argument 'InputLocation'")
	}
	if args.OutputLocation == nil {
		return nil, errors.New("invalid value for required argument 'OutputLocation'")
	}
	if args.ProcessorConfig == nil {
		return nil, errors.New("invalid value for required argument 'ProcessorConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessorJob
	err := ctx.RegisterResource("oci:AiDocument/processorJob:ProcessorJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessorJob gets an existing ProcessorJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessorJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessorJobState, opts ...pulumi.ResourceOption) (*ProcessorJob, error) {
	var resource ProcessorJob
	err := ctx.ReadResource("oci:AiDocument/processorJob:ProcessorJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessorJob resources.
type processorJobState struct {
	// The compartment identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// The display name of the processor job.
	DisplayName *string `pulumi:"displayName"`
	// The location of the inputs.
	InputLocation *ProcessorJobInputLocation `pulumi:"inputLocation"`
	// The detailed status of FAILED state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The Object Storage Location.
	OutputLocation *ProcessorJobOutputLocation `pulumi:"outputLocation"`
	// How much progress the operation has made, compared to the total amount of work to be performed.
	PercentComplete *float64 `pulumi:"percentComplete"`
	// The configuration of a processor.
	ProcessorConfig *ProcessorJobProcessorConfig `pulumi:"processorConfig"`
	// The current state of the processor job.
	State *string `pulumi:"state"`
	// The job acceptance time.
	TimeAccepted *string `pulumi:"timeAccepted"`
	// The job finish time.
	TimeFinished *string `pulumi:"timeFinished"`
	// The job start time.
	TimeStarted *string `pulumi:"timeStarted"`
}

type ProcessorJobState struct {
	// The compartment identifier.
	CompartmentId pulumi.StringPtrInput
	// The display name of the processor job.
	DisplayName pulumi.StringPtrInput
	// The location of the inputs.
	InputLocation ProcessorJobInputLocationPtrInput
	// The detailed status of FAILED state.
	LifecycleDetails pulumi.StringPtrInput
	// The Object Storage Location.
	OutputLocation ProcessorJobOutputLocationPtrInput
	// How much progress the operation has made, compared to the total amount of work to be performed.
	PercentComplete pulumi.Float64PtrInput
	// The configuration of a processor.
	ProcessorConfig ProcessorJobProcessorConfigPtrInput
	// The current state of the processor job.
	State pulumi.StringPtrInput
	// The job acceptance time.
	TimeAccepted pulumi.StringPtrInput
	// The job finish time.
	TimeFinished pulumi.StringPtrInput
	// The job start time.
	TimeStarted pulumi.StringPtrInput
}

func (ProcessorJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*processorJobState)(nil)).Elem()
}

type processorJobArgs struct {
	// The compartment identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// The display name of the processor job.
	DisplayName *string `pulumi:"displayName"`
	// The location of the inputs.
	InputLocation ProcessorJobInputLocation `pulumi:"inputLocation"`
	// The Object Storage Location.
	OutputLocation ProcessorJobOutputLocation `pulumi:"outputLocation"`
	// The configuration of a processor.
	ProcessorConfig ProcessorJobProcessorConfig `pulumi:"processorConfig"`
}

// The set of arguments for constructing a ProcessorJob resource.
type ProcessorJobArgs struct {
	// The compartment identifier.
	CompartmentId pulumi.StringInput
	// The display name of the processor job.
	DisplayName pulumi.StringPtrInput
	// The location of the inputs.
	InputLocation ProcessorJobInputLocationInput
	// The Object Storage Location.
	OutputLocation ProcessorJobOutputLocationInput
	// The configuration of a processor.
	ProcessorConfig ProcessorJobProcessorConfigInput
}

func (ProcessorJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processorJobArgs)(nil)).Elem()
}

type ProcessorJobInput interface {
	pulumi.Input

	ToProcessorJobOutput() ProcessorJobOutput
	ToProcessorJobOutputWithContext(ctx context.Context) ProcessorJobOutput
}

func (*ProcessorJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessorJob)(nil)).Elem()
}

func (i *ProcessorJob) ToProcessorJobOutput() ProcessorJobOutput {
	return i.ToProcessorJobOutputWithContext(context.Background())
}

func (i *ProcessorJob) ToProcessorJobOutputWithContext(ctx context.Context) ProcessorJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorJobOutput)
}

// ProcessorJobArrayInput is an input type that accepts ProcessorJobArray and ProcessorJobArrayOutput values.
// You can construct a concrete instance of `ProcessorJobArrayInput` via:
//
//	ProcessorJobArray{ ProcessorJobArgs{...} }
type ProcessorJobArrayInput interface {
	pulumi.Input

	ToProcessorJobArrayOutput() ProcessorJobArrayOutput
	ToProcessorJobArrayOutputWithContext(context.Context) ProcessorJobArrayOutput
}

type ProcessorJobArray []ProcessorJobInput

func (ProcessorJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessorJob)(nil)).Elem()
}

func (i ProcessorJobArray) ToProcessorJobArrayOutput() ProcessorJobArrayOutput {
	return i.ToProcessorJobArrayOutputWithContext(context.Background())
}

func (i ProcessorJobArray) ToProcessorJobArrayOutputWithContext(ctx context.Context) ProcessorJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorJobArrayOutput)
}

// ProcessorJobMapInput is an input type that accepts ProcessorJobMap and ProcessorJobMapOutput values.
// You can construct a concrete instance of `ProcessorJobMapInput` via:
//
//	ProcessorJobMap{ "key": ProcessorJobArgs{...} }
type ProcessorJobMapInput interface {
	pulumi.Input

	ToProcessorJobMapOutput() ProcessorJobMapOutput
	ToProcessorJobMapOutputWithContext(context.Context) ProcessorJobMapOutput
}

type ProcessorJobMap map[string]ProcessorJobInput

func (ProcessorJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessorJob)(nil)).Elem()
}

func (i ProcessorJobMap) ToProcessorJobMapOutput() ProcessorJobMapOutput {
	return i.ToProcessorJobMapOutputWithContext(context.Background())
}

func (i ProcessorJobMap) ToProcessorJobMapOutputWithContext(ctx context.Context) ProcessorJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorJobMapOutput)
}

type ProcessorJobOutput struct{ *pulumi.OutputState }

func (ProcessorJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessorJob)(nil)).Elem()
}

func (o ProcessorJobOutput) ToProcessorJobOutput() ProcessorJobOutput {
	return o
}

func (o ProcessorJobOutput) ToProcessorJobOutputWithContext(ctx context.Context) ProcessorJobOutput {
	return o
}

// The compartment identifier.
func (o ProcessorJobOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The display name of the processor job.
func (o ProcessorJobOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The location of the inputs.
func (o ProcessorJobOutput) InputLocation() ProcessorJobInputLocationOutput {
	return o.ApplyT(func(v *ProcessorJob) ProcessorJobInputLocationOutput { return v.InputLocation }).(ProcessorJobInputLocationOutput)
}

// The detailed status of FAILED state.
func (o ProcessorJobOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The Object Storage Location.
func (o ProcessorJobOutput) OutputLocation() ProcessorJobOutputLocationOutput {
	return o.ApplyT(func(v *ProcessorJob) ProcessorJobOutputLocationOutput { return v.OutputLocation }).(ProcessorJobOutputLocationOutput)
}

// How much progress the operation has made, compared to the total amount of work to be performed.
func (o ProcessorJobOutput) PercentComplete() pulumi.Float64Output {
	return o.ApplyT(func(v *ProcessorJob) pulumi.Float64Output { return v.PercentComplete }).(pulumi.Float64Output)
}

// The configuration of a processor.
func (o ProcessorJobOutput) ProcessorConfig() ProcessorJobProcessorConfigOutput {
	return o.ApplyT(func(v *ProcessorJob) ProcessorJobProcessorConfigOutput { return v.ProcessorConfig }).(ProcessorJobProcessorConfigOutput)
}

// The current state of the processor job.
func (o ProcessorJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The job acceptance time.
func (o ProcessorJobOutput) TimeAccepted() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.TimeAccepted }).(pulumi.StringOutput)
}

// The job finish time.
func (o ProcessorJobOutput) TimeFinished() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.TimeFinished }).(pulumi.StringOutput)
}

// The job start time.
func (o ProcessorJobOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessorJob) pulumi.StringOutput { return v.TimeStarted }).(pulumi.StringOutput)
}

type ProcessorJobArrayOutput struct{ *pulumi.OutputState }

func (ProcessorJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessorJob)(nil)).Elem()
}

func (o ProcessorJobArrayOutput) ToProcessorJobArrayOutput() ProcessorJobArrayOutput {
	return o
}

func (o ProcessorJobArrayOutput) ToProcessorJobArrayOutputWithContext(ctx context.Context) ProcessorJobArrayOutput {
	return o
}

func (o ProcessorJobArrayOutput) Index(i pulumi.IntInput) ProcessorJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessorJob {
		return vs[0].([]*ProcessorJob)[vs[1].(int)]
	}).(ProcessorJobOutput)
}

type ProcessorJobMapOutput struct{ *pulumi.OutputState }

func (ProcessorJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessorJob)(nil)).Elem()
}

func (o ProcessorJobMapOutput) ToProcessorJobMapOutput() ProcessorJobMapOutput {
	return o
}

func (o ProcessorJobMapOutput) ToProcessorJobMapOutputWithContext(ctx context.Context) ProcessorJobMapOutput {
	return o
}

func (o ProcessorJobMapOutput) MapIndex(k pulumi.StringInput) ProcessorJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessorJob {
		return vs[0].(map[string]*ProcessorJob)[vs[1].(string)]
	}).(ProcessorJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessorJobInput)(nil)).Elem(), &ProcessorJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessorJobArrayInput)(nil)).Elem(), ProcessorJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessorJobMapInput)(nil)).Elem(), ProcessorJobMap{})
	pulumi.RegisterOutputType(ProcessorJobOutput{})
	pulumi.RegisterOutputType(ProcessorJobArrayOutput{})
	pulumi.RegisterOutputType(ProcessorJobMapOutput{})
}
