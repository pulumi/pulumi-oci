// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ailanguage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Model resource in Oracle Cloud Infrastructure Ai Language service.
//
// Gets a model by identifier
func LookupModel(ctx *pulumi.Context, args *LookupModelArgs, opts ...pulumi.InvokeOption) (*LookupModelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupModelResult
	err := ctx.Invoke("oci:AiLanguage/getModel:getModel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getModel.
type LookupModelArgs struct {
	// Unique identifier model OCID of a model that is immutable on creation
	Id string `pulumi:"id"`
}

// A collection of values returned by getModel.
type LookupModelResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)  for the model's compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A short description of the Model.
	Description string `pulumi:"description"`
	// A user-friendly display name for the resource. It does not have to be unique and can be modified. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// model training results of different models
	EvaluationResults []GetModelEvaluationResult `pulumi:"evaluationResults"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier model OCID of a model that is immutable on creation
	Id string `pulumi:"id"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in failed state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// Possible model types
	ModelDetails []GetModelModelDetail `pulumi:"modelDetails"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
	ProjectId string `pulumi:"projectId"`
	// The state of the model.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Possible strategy as testing and validation(optional) dataset.
	TestStrategies []GetModelTestStrategy `pulumi:"testStrategies"`
	// The time the the model was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the model was updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
	// Possible data set type
	TrainingDatasets []GetModelTrainingDataset `pulumi:"trainingDatasets"`
	// For pre trained models this will identify model type version used for model creation For custom identifying the model by model id is difficult. This param provides ease of use for end customer. <<service>>::<<service-name>>_<<model-type-version>>::<<custom model on which this training has to be done>> ex: ai-lang::NER_V1::CUSTOM-V0
	Version string `pulumi:"version"`
}

func LookupModelOutput(ctx *pulumi.Context, args LookupModelOutputArgs, opts ...pulumi.InvokeOption) LookupModelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupModelResult, error) {
			args := v.(LookupModelArgs)
			r, err := LookupModel(ctx, &args, opts...)
			var s LookupModelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupModelResultOutput)
}

// A collection of arguments for invoking getModel.
type LookupModelOutputArgs struct {
	// Unique identifier model OCID of a model that is immutable on creation
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupModelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelArgs)(nil)).Elem()
}

// A collection of values returned by getModel.
type LookupModelResultOutput struct{ *pulumi.OutputState }

func (LookupModelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelResult)(nil)).Elem()
}

func (o LookupModelResultOutput) ToLookupModelResultOutput() LookupModelResultOutput {
	return o
}

func (o LookupModelResultOutput) ToLookupModelResultOutputWithContext(ctx context.Context) LookupModelResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)  for the model's compartment.
func (o LookupModelResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupModelResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupModelResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A short description of the Model.
func (o LookupModelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Description }).(pulumi.StringOutput)
}

// A user-friendly display name for the resource. It does not have to be unique and can be modified. Avoid entering confidential information.
func (o LookupModelResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// model training results of different models
func (o LookupModelResultOutput) EvaluationResults() GetModelEvaluationResultArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []GetModelEvaluationResult { return v.EvaluationResults }).(GetModelEvaluationResultArrayOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupModelResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupModelResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique identifier model OCID of a model that is immutable on creation
func (o LookupModelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Id }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in failed state.
func (o LookupModelResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Possible model types
func (o LookupModelResultOutput) ModelDetails() GetModelModelDetailArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []GetModelModelDetail { return v.ModelDetails }).(GetModelModelDetailArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
func (o LookupModelResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The state of the model.
func (o LookupModelResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupModelResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupModelResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// Possible strategy as testing and validation(optional) dataset.
func (o LookupModelResultOutput) TestStrategies() GetModelTestStrategyArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []GetModelTestStrategy { return v.TestStrategies }).(GetModelTestStrategyArrayOutput)
}

// The time the the model was created. An RFC3339 formatted datetime string.
func (o LookupModelResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the model was updated. An RFC3339 formatted datetime string.
func (o LookupModelResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Possible data set type
func (o LookupModelResultOutput) TrainingDatasets() GetModelTrainingDatasetArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []GetModelTrainingDataset { return v.TrainingDatasets }).(GetModelTrainingDatasetArrayOutput)
}

// For pre trained models this will identify model type version used for model creation For custom identifying the model by model id is difficult. This param provides ease of use for end customer. <<service>>::<<service-name>>_<<model-type-version>>::<<custom model on which this training has to be done>> ex: ai-lang::NER_V1::CUSTOM-V0
func (o LookupModelResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelResultOutput{})
}
