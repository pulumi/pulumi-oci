// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aivision

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
//
// # Get a  streamGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/aivision"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aivision.GetStreamGroup(ctx, &aivision.GetStreamGroupArgs{
//				StreamGroupId: testStreamGroupOciAiVisionStreamGroup.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamGroup(ctx *pulumi.Context, args *LookupStreamGroupArgs, opts ...pulumi.InvokeOption) (*LookupStreamGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamGroupResult
	err := ctx.Invoke("oci:AiVision/getStreamGroup:getStreamGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamGroup.
type LookupStreamGroupArgs struct {
	// StreamGroup Id.
	StreamGroupId string `pulumi:"streamGroupId"`
}

// A collection of values returned by getStreamGroup.
type LookupStreamGroupResult struct {
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A human-friendly name for the streamGroup.
	DisplayName string `pulumi:"displayName"`
	// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamGroup.
	Id string `pulumi:"id"`
	// Stream
	IsEnabled bool `pulumi:"isEnabled"`
	// The current state of the streamGroup.
	State         string `pulumi:"state"`
	StreamGroupId string `pulumi:"streamGroupId"`
	// List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps []GetStreamGroupStreamOverlap `pulumi:"streamOverlaps"`
	// List of streamSource OCIDs associated with the stream group
	StreamSourceIds []string `pulumi:"streamSourceIds"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// When the streamGroup was created, as an RFC3339 datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// When the streamGroup was updated, as an RFC3339 datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupStreamGroupOutput(ctx *pulumi.Context, args LookupStreamGroupOutputArgs, opts ...pulumi.InvokeOption) LookupStreamGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamGroupResultOutput, error) {
			args := v.(LookupStreamGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:AiVision/getStreamGroup:getStreamGroup", args, LookupStreamGroupResultOutput{}, options).(LookupStreamGroupResultOutput), nil
		}).(LookupStreamGroupResultOutput)
}

// A collection of arguments for invoking getStreamGroup.
type LookupStreamGroupOutputArgs struct {
	// StreamGroup Id.
	StreamGroupId pulumi.StringInput `pulumi:"streamGroupId"`
}

func (LookupStreamGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamGroupArgs)(nil)).Elem()
}

// A collection of values returned by getStreamGroup.
type LookupStreamGroupResultOutput struct{ *pulumi.OutputState }

func (LookupStreamGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamGroupResult)(nil)).Elem()
}

func (o LookupStreamGroupResultOutput) ToLookupStreamGroupResultOutput() LookupStreamGroupResultOutput {
	return o
}

func (o LookupStreamGroupResultOutput) ToLookupStreamGroupResultOutputWithContext(ctx context.Context) LookupStreamGroupResultOutput {
	return o
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
func (o LookupStreamGroupResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
func (o LookupStreamGroupResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A human-friendly name for the streamGroup.
func (o LookupStreamGroupResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
func (o LookupStreamGroupResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamGroup.
func (o LookupStreamGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Stream
func (o LookupStreamGroupResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The current state of the streamGroup.
func (o LookupStreamGroupResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupStreamGroupResultOutput) StreamGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.StreamGroupId }).(pulumi.StringOutput)
}

// List of streamSource OCIDs where the streamSource overlaps in field of view.
func (o LookupStreamGroupResultOutput) StreamOverlaps() GetStreamGroupStreamOverlapArrayOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) []GetStreamGroupStreamOverlap { return v.StreamOverlaps }).(GetStreamGroupStreamOverlapArrayOutput)
}

// List of streamSource OCIDs associated with the stream group
func (o LookupStreamGroupResultOutput) StreamSourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) []string { return v.StreamSourceIds }).(pulumi.StringArrayOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
func (o LookupStreamGroupResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// When the streamGroup was created, as an RFC3339 datetime string.
func (o LookupStreamGroupResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the streamGroup was updated, as an RFC3339 datetime string.
func (o LookupStreamGroupResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamGroupResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamGroupResultOutput{})
}
