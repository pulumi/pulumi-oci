// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aivision

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
//
// # Get a  streamSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/aivision"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aivision.GetStreamSource(ctx, &aivision.GetStreamSourceArgs{
//				StreamSourceId: testStreamSourceOciAiVisionStreamSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamSource(ctx *pulumi.Context, args *LookupStreamSourceArgs, opts ...pulumi.InvokeOption) (*LookupStreamSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamSourceResult
	err := ctx.Invoke("oci:AiVision/getStreamSource:getStreamSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamSource.
type LookupStreamSourceArgs struct {
	// StreamSource Id.
	StreamSourceId string `pulumi:"streamSourceId"`
}

// A collection of values returned by getStreamSource.
type LookupStreamSourceResult struct {
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// display name.
	DisplayName string `pulumi:"displayName"`
	// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
	Id string `pulumi:"id"`
	// The current state of the streamSource.
	State string `pulumi:"state"`
	// Details about a stream source
	StreamSourceDetails []GetStreamSourceStreamSourceDetail `pulumi:"streamSourceDetails"`
	StreamSourceId      string                              `pulumi:"streamSourceId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// When the streamSource was created, as an RFC3339 datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// When the streamSource was updated, as an RFC3339 datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupStreamSourceOutput(ctx *pulumi.Context, args LookupStreamSourceOutputArgs, opts ...pulumi.InvokeOption) LookupStreamSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamSourceResultOutput, error) {
			args := v.(LookupStreamSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:AiVision/getStreamSource:getStreamSource", args, LookupStreamSourceResultOutput{}, options).(LookupStreamSourceResultOutput), nil
		}).(LookupStreamSourceResultOutput)
}

// A collection of arguments for invoking getStreamSource.
type LookupStreamSourceOutputArgs struct {
	// StreamSource Id.
	StreamSourceId pulumi.StringInput `pulumi:"streamSourceId"`
}

func (LookupStreamSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamSourceArgs)(nil)).Elem()
}

// A collection of values returned by getStreamSource.
type LookupStreamSourceResultOutput struct{ *pulumi.OutputState }

func (LookupStreamSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamSourceResult)(nil)).Elem()
}

func (o LookupStreamSourceResultOutput) ToLookupStreamSourceResultOutput() LookupStreamSourceResultOutput {
	return o
}

func (o LookupStreamSourceResultOutput) ToLookupStreamSourceResultOutputWithContext(ctx context.Context) LookupStreamSourceResultOutput {
	return o
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
func (o LookupStreamSourceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
func (o LookupStreamSourceResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// display name.
func (o LookupStreamSourceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
func (o LookupStreamSourceResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
func (o LookupStreamSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The current state of the streamSource.
func (o LookupStreamSourceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.State }).(pulumi.StringOutput)
}

// Details about a stream source
func (o LookupStreamSourceResultOutput) StreamSourceDetails() GetStreamSourceStreamSourceDetailArrayOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) []GetStreamSourceStreamSourceDetail { return v.StreamSourceDetails }).(GetStreamSourceStreamSourceDetailArrayOutput)
}

func (o LookupStreamSourceResultOutput) StreamSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.StreamSourceId }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
func (o LookupStreamSourceResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// When the streamSource was created, as an RFC3339 datetime string.
func (o LookupStreamSourceResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the streamSource was updated, as an RFC3339 datetime string.
func (o LookupStreamSourceResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamSourceResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamSourceResultOutput{})
}
