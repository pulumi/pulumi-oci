// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aivision

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Stream Sources in Oracle Cloud Infrastructure Ai Vision service.
//
// Gets a list of the streamSources in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/aivision"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aivision.GetStreamSources(ctx, &aivision.GetStreamSourcesArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				DisplayName:   pulumi.StringRef(streamSourceDisplayName),
//				Id:            pulumi.StringRef(streamSourceId),
//				State:         pulumi.StringRef(streamSourceState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetStreamSources(ctx *pulumi.Context, args *GetStreamSourcesArgs, opts ...pulumi.InvokeOption) (*GetStreamSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStreamSourcesResult
	err := ctx.Invoke("oci:AiVision/getStreamSources:getStreamSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamSources.
type GetStreamSourcesArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                  `pulumi:"displayName"`
	Filters     []GetStreamSourcesFilter `pulumi:"filters"`
	// The filter to find the device with the given identifier.
	Id *string `pulumi:"id"`
	// The filter to match projects with the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getStreamSources.
type GetStreamSourcesResult struct {
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
	CompartmentId *string `pulumi:"compartmentId"`
	// display name.
	DisplayName *string                  `pulumi:"displayName"`
	Filters     []GetStreamSourcesFilter `pulumi:"filters"`
	// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
	Id *string `pulumi:"id"`
	// The current state of the streamSource.
	State *string `pulumi:"state"`
	// The list of stream_source_collection.
	StreamSourceCollections []GetStreamSourcesStreamSourceCollection `pulumi:"streamSourceCollections"`
}

func GetStreamSourcesOutput(ctx *pulumi.Context, args GetStreamSourcesOutputArgs, opts ...pulumi.InvokeOption) GetStreamSourcesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetStreamSourcesResultOutput, error) {
			args := v.(GetStreamSourcesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:AiVision/getStreamSources:getStreamSources", args, GetStreamSourcesResultOutput{}, options).(GetStreamSourcesResultOutput), nil
		}).(GetStreamSourcesResultOutput)
}

// A collection of arguments for invoking getStreamSources.
type GetStreamSourcesOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput            `pulumi:"displayName"`
	Filters     GetStreamSourcesFilterArrayInput `pulumi:"filters"`
	// The filter to find the device with the given identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The filter to match projects with the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetStreamSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getStreamSources.
type GetStreamSourcesResultOutput struct{ *pulumi.OutputState }

func (GetStreamSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStreamSourcesResult)(nil)).Elem()
}

func (o GetStreamSourcesResultOutput) ToGetStreamSourcesResultOutput() GetStreamSourcesResultOutput {
	return o
}

func (o GetStreamSourcesResultOutput) ToGetStreamSourcesResultOutputWithContext(ctx context.Context) GetStreamSourcesResultOutput {
	return o
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartm.
func (o GetStreamSourcesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// display name.
func (o GetStreamSourcesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetStreamSourcesResultOutput) Filters() GetStreamSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) []GetStreamSourcesFilter { return v.Filters }).(GetStreamSourcesFilterArrayOutput)
}

// [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the streamSource.
func (o GetStreamSourcesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current state of the streamSource.
func (o GetStreamSourcesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The list of stream_source_collection.
func (o GetStreamSourcesResultOutput) StreamSourceCollections() GetStreamSourcesStreamSourceCollectionArrayOutput {
	return o.ApplyT(func(v GetStreamSourcesResult) []GetStreamSourcesStreamSourceCollection {
		return v.StreamSourceCollections
	}).(GetStreamSourcesStreamSourceCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStreamSourcesResultOutput{})
}
