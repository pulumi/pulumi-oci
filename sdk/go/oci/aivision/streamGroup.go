// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aivision

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Stream Group resource in Oracle Cloud Infrastructure Ai Vision service.
//
// # Registration of new streamGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/aivision"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aivision.NewStreamGroup(ctx, "test_stream_group", &aivision.StreamGroupArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				DefinedTags:   pulumi.Any(streamGroupDefinedTags),
//				DisplayName:   pulumi.Any(streamGroupDisplayName),
//				FreeformTags:  pulumi.Any(streamGroupFreeformTags),
//				IsEnabled:     pulumi.Any(streamGroupIsEnabled),
//				StreamOverlaps: aivision.StreamGroupStreamOverlapArray{
//					&aivision.StreamGroupStreamOverlapArgs{
//						OverlappingStreams: pulumi.Any(streamGroupStreamOverlapsOverlappingStreams),
//					},
//				},
//				StreamSourceIds: pulumi.Any(streamGroupStreamSourceIds),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// StreamGroups can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:AiVision/streamGroup:StreamGroup test_stream_group "id"
// ```
type StreamGroup struct {
	pulumi.CustomResourceState

	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamGroup.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) Stream
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The current state of the streamGroup.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps StreamGroupStreamOverlapArrayOutput `pulumi:"streamOverlaps"`
	// (Updatable) List of streamSource OCIDs associated with the stream group
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamSourceIds pulumi.StringArrayOutput `pulumi:"streamSourceIds"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// When the streamGroup was created, as an RFC3339 datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the streamGroup was updated, as an RFC3339 datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewStreamGroup registers a new resource with the given unique name, arguments, and options.
func NewStreamGroup(ctx *pulumi.Context,
	name string, args *StreamGroupArgs, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamGroup
	err := ctx.RegisterResource("oci:AiVision/streamGroup:StreamGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamGroup gets an existing StreamGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamGroupState, opts ...pulumi.ResourceOption) (*StreamGroup, error) {
	var resource StreamGroup
	err := ctx.ReadResource("oci:AiVision/streamGroup:StreamGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamGroup resources.
type streamGroupState struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamGroup.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Stream
	IsEnabled *bool `pulumi:"isEnabled"`
	// The current state of the streamGroup.
	State *string `pulumi:"state"`
	// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps []StreamGroupStreamOverlap `pulumi:"streamOverlaps"`
	// (Updatable) List of streamSource OCIDs associated with the stream group
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamSourceIds []string `pulumi:"streamSourceIds"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// When the streamGroup was created, as an RFC3339 datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// When the streamGroup was updated, as an RFC3339 datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type StreamGroupState struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A human-friendly name for the streamGroup.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Stream
	IsEnabled pulumi.BoolPtrInput
	// The current state of the streamGroup.
	State pulumi.StringPtrInput
	// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps StreamGroupStreamOverlapArrayInput
	// (Updatable) List of streamSource OCIDs associated with the stream group
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamSourceIds pulumi.StringArrayInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags pulumi.StringMapInput
	// When the streamGroup was created, as an RFC3339 datetime string.
	TimeCreated pulumi.StringPtrInput
	// When the streamGroup was updated, as an RFC3339 datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (StreamGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupState)(nil)).Elem()
}

type streamGroupArgs struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamGroup.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Stream
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps []StreamGroupStreamOverlap `pulumi:"streamOverlaps"`
	// (Updatable) List of streamSource OCIDs associated with the stream group
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamSourceIds []string `pulumi:"streamSourceIds"`
}

// The set of arguments for constructing a StreamGroup resource.
type StreamGroupArgs struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A human-friendly name for the streamGroup.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Stream
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
	StreamOverlaps StreamGroupStreamOverlapArrayInput
	// (Updatable) List of streamSource OCIDs associated with the stream group
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamSourceIds pulumi.StringArrayInput
}

func (StreamGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamGroupArgs)(nil)).Elem()
}

type StreamGroupInput interface {
	pulumi.Input

	ToStreamGroupOutput() StreamGroupOutput
	ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput
}

func (*StreamGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (i *StreamGroup) ToStreamGroupOutput() StreamGroupOutput {
	return i.ToStreamGroupOutputWithContext(context.Background())
}

func (i *StreamGroup) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGroupOutput)
}

// StreamGroupArrayInput is an input type that accepts StreamGroupArray and StreamGroupArrayOutput values.
// You can construct a concrete instance of `StreamGroupArrayInput` via:
//
//	StreamGroupArray{ StreamGroupArgs{...} }
type StreamGroupArrayInput interface {
	pulumi.Input

	ToStreamGroupArrayOutput() StreamGroupArrayOutput
	ToStreamGroupArrayOutputWithContext(context.Context) StreamGroupArrayOutput
}

type StreamGroupArray []StreamGroupInput

func (StreamGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamGroup)(nil)).Elem()
}

func (i StreamGroupArray) ToStreamGroupArrayOutput() StreamGroupArrayOutput {
	return i.ToStreamGroupArrayOutputWithContext(context.Background())
}

func (i StreamGroupArray) ToStreamGroupArrayOutputWithContext(ctx context.Context) StreamGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGroupArrayOutput)
}

// StreamGroupMapInput is an input type that accepts StreamGroupMap and StreamGroupMapOutput values.
// You can construct a concrete instance of `StreamGroupMapInput` via:
//
//	StreamGroupMap{ "key": StreamGroupArgs{...} }
type StreamGroupMapInput interface {
	pulumi.Input

	ToStreamGroupMapOutput() StreamGroupMapOutput
	ToStreamGroupMapOutputWithContext(context.Context) StreamGroupMapOutput
}

type StreamGroupMap map[string]StreamGroupInput

func (StreamGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamGroup)(nil)).Elem()
}

func (i StreamGroupMap) ToStreamGroupMapOutput() StreamGroupMapOutput {
	return i.ToStreamGroupMapOutputWithContext(context.Background())
}

func (i StreamGroupMap) ToStreamGroupMapOutputWithContext(ctx context.Context) StreamGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamGroupMapOutput)
}

type StreamGroupOutput struct{ *pulumi.OutputState }

func (StreamGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamGroup)(nil)).Elem()
}

func (o StreamGroupOutput) ToStreamGroupOutput() StreamGroupOutput {
	return o
}

func (o StreamGroupOutput) ToStreamGroupOutputWithContext(ctx context.Context) StreamGroupOutput {
	return o
}

// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
func (o StreamGroupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
func (o StreamGroupOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) A human-friendly name for the streamGroup.
func (o StreamGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
func (o StreamGroupOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) Stream
func (o StreamGroupOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The current state of the streamGroup.
func (o StreamGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) List of streamSource OCIDs where the streamSource overlaps in field of view.
func (o StreamGroupOutput) StreamOverlaps() StreamGroupStreamOverlapArrayOutput {
	return o.ApplyT(func(v *StreamGroup) StreamGroupStreamOverlapArrayOutput { return v.StreamOverlaps }).(StreamGroupStreamOverlapArrayOutput)
}

// (Updatable) List of streamSource OCIDs associated with the stream group
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o StreamGroupOutput) StreamSourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringArrayOutput { return v.StreamSourceIds }).(pulumi.StringArrayOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
func (o StreamGroupOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// When the streamGroup was created, as an RFC3339 datetime string.
func (o StreamGroupOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the streamGroup was updated, as an RFC3339 datetime string.
func (o StreamGroupOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamGroup) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type StreamGroupArrayOutput struct{ *pulumi.OutputState }

func (StreamGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamGroup)(nil)).Elem()
}

func (o StreamGroupArrayOutput) ToStreamGroupArrayOutput() StreamGroupArrayOutput {
	return o
}

func (o StreamGroupArrayOutput) ToStreamGroupArrayOutputWithContext(ctx context.Context) StreamGroupArrayOutput {
	return o
}

func (o StreamGroupArrayOutput) Index(i pulumi.IntInput) StreamGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamGroup {
		return vs[0].([]*StreamGroup)[vs[1].(int)]
	}).(StreamGroupOutput)
}

type StreamGroupMapOutput struct{ *pulumi.OutputState }

func (StreamGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamGroup)(nil)).Elem()
}

func (o StreamGroupMapOutput) ToStreamGroupMapOutput() StreamGroupMapOutput {
	return o
}

func (o StreamGroupMapOutput) ToStreamGroupMapOutputWithContext(ctx context.Context) StreamGroupMapOutput {
	return o
}

func (o StreamGroupMapOutput) MapIndex(k pulumi.StringInput) StreamGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamGroup {
		return vs[0].(map[string]*StreamGroup)[vs[1].(string)]
	}).(StreamGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGroupInput)(nil)).Elem(), &StreamGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGroupArrayInput)(nil)).Elem(), StreamGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamGroupMapInput)(nil)).Elem(), StreamGroupMap{})
	pulumi.RegisterOutputType(StreamGroupOutput{})
	pulumi.RegisterOutputType(StreamGroupArrayOutput{})
	pulumi.RegisterOutputType(StreamGroupMapOutput{})
}
