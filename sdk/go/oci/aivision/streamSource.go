// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aivision

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Stream Source resource in Oracle Cloud Infrastructure Ai Vision service.
//
// # Registration of new streamSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/aivision"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aivision.NewStreamSource(ctx, "test_stream_source", &aivision.StreamSourceArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				StreamSourceDetails: &aivision.StreamSourceStreamSourceDetailsArgs{
//					CameraUrl:  pulumi.Any(streamSourceStreamSourceDetailsCameraUrl),
//					SourceType: pulumi.Any(streamSourceStreamSourceDetailsSourceType),
//					StreamNetworkAccessDetails: &aivision.StreamSourceStreamSourceDetailsStreamNetworkAccessDetailsArgs{
//						PrivateEndpointId: pulumi.Any(testPrivateEndpoint.Id),
//						StreamAccessType:  pulumi.Any(streamSourceStreamSourceDetailsStreamNetworkAccessDetailsStreamAccessType),
//					},
//					SecretId: pulumi.Any(testSecret.Id),
//				},
//				DefinedTags:  pulumi.Any(streamSourceDefinedTags),
//				DisplayName:  pulumi.Any(streamSourceDisplayName),
//				FreeformTags: pulumi.Any(streamSourceFreeformTags),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// StreamSources can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:AiVision/streamSource:StreamSource test_stream_source "id"
// ```
type StreamSource struct {
	pulumi.CustomResourceState

	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamSource.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The current state of the streamSource.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) Details about a stream source
	StreamSourceDetails StreamSourceStreamSourceDetailsOutput `pulumi:"streamSourceDetails"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// When the streamSource was created, as an RFC3339 datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the streamSource was updated, as an RFC3339 datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewStreamSource registers a new resource with the given unique name, arguments, and options.
func NewStreamSource(ctx *pulumi.Context,
	name string, args *StreamSourceArgs, opts ...pulumi.ResourceOption) (*StreamSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.StreamSourceDetails == nil {
		return nil, errors.New("invalid value for required argument 'StreamSourceDetails'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamSource
	err := ctx.RegisterResource("oci:AiVision/streamSource:StreamSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamSource gets an existing StreamSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamSourceState, opts ...pulumi.ResourceOption) (*StreamSource, error) {
	var resource StreamSource
	err := ctx.ReadResource("oci:AiVision/streamSource:StreamSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamSource resources.
type streamSourceState struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamSource.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The current state of the streamSource.
	State *string `pulumi:"state"`
	// (Updatable) Details about a stream source
	StreamSourceDetails *StreamSourceStreamSourceDetails `pulumi:"streamSourceDetails"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// When the streamSource was created, as an RFC3339 datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// When the streamSource was updated, as an RFC3339 datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type StreamSourceState struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A human-friendly name for the streamSource.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// The current state of the streamSource.
	State pulumi.StringPtrInput
	// (Updatable) Details about a stream source
	StreamSourceDetails StreamSourceStreamSourceDetailsPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
	SystemTags pulumi.StringMapInput
	// When the streamSource was created, as an RFC3339 datetime string.
	TimeCreated pulumi.StringPtrInput
	// When the streamSource was updated, as an RFC3339 datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (StreamSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamSourceState)(nil)).Elem()
}

type streamSourceArgs struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A human-friendly name for the streamSource.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Details about a stream source
	StreamSourceDetails StreamSourceStreamSourceDetails `pulumi:"streamSourceDetails"`
}

// The set of arguments for constructing a StreamSource resource.
type StreamSourceArgs struct {
	// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) A human-friendly name for the streamSource.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Details about a stream source
	StreamSourceDetails StreamSourceStreamSourceDetailsInput
}

func (StreamSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamSourceArgs)(nil)).Elem()
}

type StreamSourceInput interface {
	pulumi.Input

	ToStreamSourceOutput() StreamSourceOutput
	ToStreamSourceOutputWithContext(ctx context.Context) StreamSourceOutput
}

func (*StreamSource) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSource)(nil)).Elem()
}

func (i *StreamSource) ToStreamSourceOutput() StreamSourceOutput {
	return i.ToStreamSourceOutputWithContext(context.Background())
}

func (i *StreamSource) ToStreamSourceOutputWithContext(ctx context.Context) StreamSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceOutput)
}

// StreamSourceArrayInput is an input type that accepts StreamSourceArray and StreamSourceArrayOutput values.
// You can construct a concrete instance of `StreamSourceArrayInput` via:
//
//	StreamSourceArray{ StreamSourceArgs{...} }
type StreamSourceArrayInput interface {
	pulumi.Input

	ToStreamSourceArrayOutput() StreamSourceArrayOutput
	ToStreamSourceArrayOutputWithContext(context.Context) StreamSourceArrayOutput
}

type StreamSourceArray []StreamSourceInput

func (StreamSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamSource)(nil)).Elem()
}

func (i StreamSourceArray) ToStreamSourceArrayOutput() StreamSourceArrayOutput {
	return i.ToStreamSourceArrayOutputWithContext(context.Background())
}

func (i StreamSourceArray) ToStreamSourceArrayOutputWithContext(ctx context.Context) StreamSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceArrayOutput)
}

// StreamSourceMapInput is an input type that accepts StreamSourceMap and StreamSourceMapOutput values.
// You can construct a concrete instance of `StreamSourceMapInput` via:
//
//	StreamSourceMap{ "key": StreamSourceArgs{...} }
type StreamSourceMapInput interface {
	pulumi.Input

	ToStreamSourceMapOutput() StreamSourceMapOutput
	ToStreamSourceMapOutputWithContext(context.Context) StreamSourceMapOutput
}

type StreamSourceMap map[string]StreamSourceInput

func (StreamSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamSource)(nil)).Elem()
}

func (i StreamSourceMap) ToStreamSourceMapOutput() StreamSourceMapOutput {
	return i.ToStreamSourceMapOutputWithContext(context.Background())
}

func (i StreamSourceMap) ToStreamSourceMapOutputWithContext(ctx context.Context) StreamSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceMapOutput)
}

type StreamSourceOutput struct{ *pulumi.OutputState }

func (StreamSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSource)(nil)).Elem()
}

func (o StreamSourceOutput) ToStreamSourceOutput() StreamSourceOutput {
	return o
}

func (o StreamSourceOutput) ToStreamSourceOutputWithContext(ctx context.Context) StreamSourceOutput {
	return o
}

// (Updatable) [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of compartment
func (o StreamSourceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
func (o StreamSourceOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) A human-friendly name for the streamSource.
func (o StreamSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
func (o StreamSourceOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The current state of the streamSource.
func (o StreamSourceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) Details about a stream source
func (o StreamSourceOutput) StreamSourceDetails() StreamSourceStreamSourceDetailsOutput {
	return o.ApplyT(func(v *StreamSource) StreamSourceStreamSourceDetailsOutput { return v.StreamSourceDetails }).(StreamSourceStreamSourceDetailsOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. For example: `{"orcl-cloud": {"free-tier-retained": "true"}}`
func (o StreamSourceOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// When the streamSource was created, as an RFC3339 datetime string.
func (o StreamSourceOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the streamSource was updated, as an RFC3339 datetime string.
func (o StreamSourceOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamSource) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type StreamSourceArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamSource)(nil)).Elem()
}

func (o StreamSourceArrayOutput) ToStreamSourceArrayOutput() StreamSourceArrayOutput {
	return o
}

func (o StreamSourceArrayOutput) ToStreamSourceArrayOutputWithContext(ctx context.Context) StreamSourceArrayOutput {
	return o
}

func (o StreamSourceArrayOutput) Index(i pulumi.IntInput) StreamSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamSource {
		return vs[0].([]*StreamSource)[vs[1].(int)]
	}).(StreamSourceOutput)
}

type StreamSourceMapOutput struct{ *pulumi.OutputState }

func (StreamSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamSource)(nil)).Elem()
}

func (o StreamSourceMapOutput) ToStreamSourceMapOutput() StreamSourceMapOutput {
	return o
}

func (o StreamSourceMapOutput) ToStreamSourceMapOutputWithContext(ctx context.Context) StreamSourceMapOutput {
	return o
}

func (o StreamSourceMapOutput) MapIndex(k pulumi.StringInput) StreamSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamSource {
		return vs[0].(map[string]*StreamSource)[vs[1].(string)]
	}).(StreamSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceInput)(nil)).Elem(), &StreamSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceArrayInput)(nil)).Elem(), StreamSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceMapInput)(nil)).Elem(), StreamSourceMap{})
	pulumi.RegisterOutputType(StreamSourceOutput{})
	pulumi.RegisterOutputType(StreamSourceArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceMapOutput{})
}
