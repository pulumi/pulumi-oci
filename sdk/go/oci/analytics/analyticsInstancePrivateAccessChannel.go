// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package analytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Analytics Instance Private Access Channel resource in Oracle Cloud Infrastructure Analytics service.
//
// Create a Private access Channel for the Analytics instance. The operation is long-running
// and creates a new WorkRequest.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Analytics"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Analytics.NewAnalyticsInstancePrivateAccessChannel(ctx, "testAnalyticsInstancePrivateAccessChannel", &Analytics.AnalyticsInstancePrivateAccessChannelArgs{
// 			AnalyticsInstanceId: pulumi.Any(oci_analytics_analytics_instance.Test_analytics_instance.Id),
// 			DisplayName:         pulumi.Any(_var.Analytics_instance_private_access_channel_display_name),
// 			PrivateSourceDnsZones: analytics.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArray{
// 				&analytics.AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs{
// 					DnsZone:     pulumi.Any(_var.Analytics_instance_private_access_channel_private_source_dns_zones_dns_zone),
// 					Description: pulumi.Any(_var.Analytics_instance_private_access_channel_private_source_dns_zones_description),
// 				},
// 			},
// 			SubnetId: pulumi.Any(oci_core_subnet.Test_subnet.Id),
// 			VcnId:    pulumi.Any(oci_core_vcn.Test_vcn.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AnalyticsInstancePrivateAccessChannels can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel test_analytics_instance_private_access_channel "analyticsInstances/{analyticsInstanceId}/privateAccessChannels/{privateAccessChannelKey}"
// ```
type AnalyticsInstancePrivateAccessChannel struct {
	pulumi.CustomResourceState

	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringOutput `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses pulumi.StringArrayOutput `pulumi:"egressSourceIpAddresses"`
	// IP Address of the Private Access channel.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Private Access Channel unique identifier key.
	Key pulumi.StringOutput `pulumi:"key"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayOutput `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewAnalyticsInstancePrivateAccessChannel registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsInstancePrivateAccessChannel(ctx *pulumi.Context,
	name string, args *AnalyticsInstancePrivateAccessChannelArgs, opts ...pulumi.ResourceOption) (*AnalyticsInstancePrivateAccessChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyticsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'AnalyticsInstanceId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PrivateSourceDnsZones == nil {
		return nil, errors.New("invalid value for required argument 'PrivateSourceDnsZones'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	var resource AnalyticsInstancePrivateAccessChannel
	err := ctx.RegisterResource("oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsInstancePrivateAccessChannel gets an existing AnalyticsInstancePrivateAccessChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsInstancePrivateAccessChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsInstancePrivateAccessChannelState, opts ...pulumi.ResourceOption) (*AnalyticsInstancePrivateAccessChannel, error) {
	var resource AnalyticsInstancePrivateAccessChannel
	err := ctx.ReadResource("oci:Analytics/analyticsInstancePrivateAccessChannel:AnalyticsInstancePrivateAccessChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsInstancePrivateAccessChannel resources.
type analyticsInstancePrivateAccessChannelState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId *string `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName *string `pulumi:"displayName"`
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses []string `pulumi:"egressSourceIpAddresses"`
	// IP Address of the Private Access channel.
	IpAddress *string `pulumi:"ipAddress"`
	// Private Access Channel unique identifier key.
	Key *string `pulumi:"key"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones []AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId *string `pulumi:"vcnId"`
}

type AnalyticsInstancePrivateAccessChannelState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringPtrInput
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringPtrInput
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses pulumi.StringArrayInput
	// IP Address of the Private Access channel.
	IpAddress pulumi.StringPtrInput
	// Private Access Channel unique identifier key.
	Key pulumi.StringPtrInput
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayInput
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringPtrInput
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringPtrInput
}

func (AnalyticsInstancePrivateAccessChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsInstancePrivateAccessChannelState)(nil)).Elem()
}

type analyticsInstancePrivateAccessChannelArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId string `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones []AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId string `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId string `pulumi:"vcnId"`
}

// The set of arguments for constructing a AnalyticsInstancePrivateAccessChannel resource.
type AnalyticsInstancePrivateAccessChannelArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringInput
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringInput
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayInput
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringInput
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringInput
}

func (AnalyticsInstancePrivateAccessChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsInstancePrivateAccessChannelArgs)(nil)).Elem()
}

type AnalyticsInstancePrivateAccessChannelInput interface {
	pulumi.Input

	ToAnalyticsInstancePrivateAccessChannelOutput() AnalyticsInstancePrivateAccessChannelOutput
	ToAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelOutput
}

func (*AnalyticsInstancePrivateAccessChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (i *AnalyticsInstancePrivateAccessChannel) ToAnalyticsInstancePrivateAccessChannelOutput() AnalyticsInstancePrivateAccessChannelOutput {
	return i.ToAnalyticsInstancePrivateAccessChannelOutputWithContext(context.Background())
}

func (i *AnalyticsInstancePrivateAccessChannel) ToAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstancePrivateAccessChannelOutput)
}

// AnalyticsInstancePrivateAccessChannelArrayInput is an input type that accepts AnalyticsInstancePrivateAccessChannelArray and AnalyticsInstancePrivateAccessChannelArrayOutput values.
// You can construct a concrete instance of `AnalyticsInstancePrivateAccessChannelArrayInput` via:
//
//          AnalyticsInstancePrivateAccessChannelArray{ AnalyticsInstancePrivateAccessChannelArgs{...} }
type AnalyticsInstancePrivateAccessChannelArrayInput interface {
	pulumi.Input

	ToAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsInstancePrivateAccessChannelArrayOutput
	ToAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(context.Context) AnalyticsInstancePrivateAccessChannelArrayOutput
}

type AnalyticsInstancePrivateAccessChannelArray []AnalyticsInstancePrivateAccessChannelInput

func (AnalyticsInstancePrivateAccessChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (i AnalyticsInstancePrivateAccessChannelArray) ToAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsInstancePrivateAccessChannelArrayOutput {
	return i.ToAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(context.Background())
}

func (i AnalyticsInstancePrivateAccessChannelArray) ToAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstancePrivateAccessChannelArrayOutput)
}

// AnalyticsInstancePrivateAccessChannelMapInput is an input type that accepts AnalyticsInstancePrivateAccessChannelMap and AnalyticsInstancePrivateAccessChannelMapOutput values.
// You can construct a concrete instance of `AnalyticsInstancePrivateAccessChannelMapInput` via:
//
//          AnalyticsInstancePrivateAccessChannelMap{ "key": AnalyticsInstancePrivateAccessChannelArgs{...} }
type AnalyticsInstancePrivateAccessChannelMapInput interface {
	pulumi.Input

	ToAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsInstancePrivateAccessChannelMapOutput
	ToAnalyticsInstancePrivateAccessChannelMapOutputWithContext(context.Context) AnalyticsInstancePrivateAccessChannelMapOutput
}

type AnalyticsInstancePrivateAccessChannelMap map[string]AnalyticsInstancePrivateAccessChannelInput

func (AnalyticsInstancePrivateAccessChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (i AnalyticsInstancePrivateAccessChannelMap) ToAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsInstancePrivateAccessChannelMapOutput {
	return i.ToAnalyticsInstancePrivateAccessChannelMapOutputWithContext(context.Background())
}

func (i AnalyticsInstancePrivateAccessChannelMap) ToAnalyticsInstancePrivateAccessChannelMapOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstancePrivateAccessChannelMapOutput)
}

type AnalyticsInstancePrivateAccessChannelOutput struct{ *pulumi.OutputState }

func (AnalyticsInstancePrivateAccessChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (o AnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsInstancePrivateAccessChannelOutput() AnalyticsInstancePrivateAccessChannelOutput {
	return o
}

func (o AnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelOutput {
	return o
}

type AnalyticsInstancePrivateAccessChannelArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsInstancePrivateAccessChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (o AnalyticsInstancePrivateAccessChannelArrayOutput) ToAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsInstancePrivateAccessChannelArrayOutput {
	return o
}

func (o AnalyticsInstancePrivateAccessChannelArrayOutput) ToAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelArrayOutput {
	return o
}

func (o AnalyticsInstancePrivateAccessChannelArrayOutput) Index(i pulumi.IntInput) AnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalyticsInstancePrivateAccessChannel {
		return vs[0].([]*AnalyticsInstancePrivateAccessChannel)[vs[1].(int)]
	}).(AnalyticsInstancePrivateAccessChannelOutput)
}

type AnalyticsInstancePrivateAccessChannelMapOutput struct{ *pulumi.OutputState }

func (AnalyticsInstancePrivateAccessChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (o AnalyticsInstancePrivateAccessChannelMapOutput) ToAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsInstancePrivateAccessChannelMapOutput {
	return o
}

func (o AnalyticsInstancePrivateAccessChannelMapOutput) ToAnalyticsInstancePrivateAccessChannelMapOutputWithContext(ctx context.Context) AnalyticsInstancePrivateAccessChannelMapOutput {
	return o
}

func (o AnalyticsInstancePrivateAccessChannelMapOutput) MapIndex(k pulumi.StringInput) AnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalyticsInstancePrivateAccessChannel {
		return vs[0].(map[string]*AnalyticsInstancePrivateAccessChannel)[vs[1].(string)]
	}).(AnalyticsInstancePrivateAccessChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstancePrivateAccessChannelInput)(nil)).Elem(), &AnalyticsInstancePrivateAccessChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstancePrivateAccessChannelArrayInput)(nil)).Elem(), AnalyticsInstancePrivateAccessChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstancePrivateAccessChannelMapInput)(nil)).Elem(), AnalyticsInstancePrivateAccessChannelMap{})
	pulumi.RegisterOutputType(AnalyticsInstancePrivateAccessChannelOutput{})
	pulumi.RegisterOutputType(AnalyticsInstancePrivateAccessChannelArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsInstancePrivateAccessChannelMapOutput{})
}
