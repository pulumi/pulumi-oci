// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package analytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Analytics Instance Vanity Url resource in Oracle Cloud Infrastructure Analytics service.
//
// Allows specifying a custom host name to be used to access the analytics instance.  This requires prior setup of DNS entry and certificate
// for this host.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/analytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := analytics.NewAnalyticsInstanceVanityUrl(ctx, "test_analytics_instance_vanity_url", &analytics.AnalyticsInstanceVanityUrlArgs{
//				AnalyticsInstanceId: pulumi.Any(testAnalyticsInstance.Id),
//				CaCertificate:       pulumi.Any(analyticsInstanceVanityUrlCaCertificate),
//				Hosts:               pulumi.Any(analyticsInstanceVanityUrlHosts),
//				PrivateKey:          pulumi.Any(analyticsInstanceVanityUrlPrivateKey),
//				PublicCertificate:   pulumi.Any(analyticsInstanceVanityUrlPublicCertificate),
//				Description:         pulumi.Any(analyticsInstanceVanityUrlDescription),
//				Passphrase:          pulumi.Any(analyticsInstanceVanityUrlPassphrase),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AnalyticsInstanceVanityUrls can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl test_analytics_instance_vanity_url "analyticsInstances/{analyticsInstanceId}/vanityUrls/{vanityUrlKey}"
// ```
type AnalyticsInstanceVanityUrl struct {
	pulumi.CustomResourceState

	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringOutput `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// Optional description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PublicCertificate pulumi.StringOutput `pulumi:"publicCertificate"`
}

// NewAnalyticsInstanceVanityUrl registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsInstanceVanityUrl(ctx *pulumi.Context,
	name string, args *AnalyticsInstanceVanityUrlArgs, opts ...pulumi.ResourceOption) (*AnalyticsInstanceVanityUrl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyticsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'AnalyticsInstanceId'")
	}
	if args.CaCertificate == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificate'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PublicCertificate == nil {
		return nil, errors.New("invalid value for required argument 'PublicCertificate'")
	}
	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnalyticsInstanceVanityUrl
	err := ctx.RegisterResource("oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsInstanceVanityUrl gets an existing AnalyticsInstanceVanityUrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsInstanceVanityUrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsInstanceVanityUrlState, opts ...pulumi.ResourceOption) (*AnalyticsInstanceVanityUrl, error) {
	var resource AnalyticsInstanceVanityUrl
	err := ctx.ReadResource("oci:Analytics/analyticsInstanceVanityUrl:AnalyticsInstanceVanityUrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsInstanceVanityUrl resources.
type analyticsInstanceVanityUrlState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId *string `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate *string `pulumi:"caCertificate"`
	// Optional description.
	Description *string `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts []string `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase *string `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey *string `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PublicCertificate *string `pulumi:"publicCertificate"`
}

type AnalyticsInstanceVanityUrlState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringPtrInput
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringPtrInput
	// Optional description.
	Description pulumi.StringPtrInput
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayInput
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrInput
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringPtrInput
	// (Updatable) PEM certificate for HTTPS connections.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PublicCertificate pulumi.StringPtrInput
}

func (AnalyticsInstanceVanityUrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsInstanceVanityUrlState)(nil)).Elem()
}

type analyticsInstanceVanityUrlArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId string `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate string `pulumi:"caCertificate"`
	// Optional description.
	Description *string `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts []string `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase *string `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey string `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PublicCertificate string `pulumi:"publicCertificate"`
}

// The set of arguments for constructing a AnalyticsInstanceVanityUrl resource.
type AnalyticsInstanceVanityUrlArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringInput
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringInput
	// Optional description.
	Description pulumi.StringPtrInput
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayInput
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrInput
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringInput
	// (Updatable) PEM certificate for HTTPS connections.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PublicCertificate pulumi.StringInput
}

func (AnalyticsInstanceVanityUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsInstanceVanityUrlArgs)(nil)).Elem()
}

type AnalyticsInstanceVanityUrlInput interface {
	pulumi.Input

	ToAnalyticsInstanceVanityUrlOutput() AnalyticsInstanceVanityUrlOutput
	ToAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlOutput
}

func (*AnalyticsInstanceVanityUrl) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (i *AnalyticsInstanceVanityUrl) ToAnalyticsInstanceVanityUrlOutput() AnalyticsInstanceVanityUrlOutput {
	return i.ToAnalyticsInstanceVanityUrlOutputWithContext(context.Background())
}

func (i *AnalyticsInstanceVanityUrl) ToAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstanceVanityUrlOutput)
}

// AnalyticsInstanceVanityUrlArrayInput is an input type that accepts AnalyticsInstanceVanityUrlArray and AnalyticsInstanceVanityUrlArrayOutput values.
// You can construct a concrete instance of `AnalyticsInstanceVanityUrlArrayInput` via:
//
//	AnalyticsInstanceVanityUrlArray{ AnalyticsInstanceVanityUrlArgs{...} }
type AnalyticsInstanceVanityUrlArrayInput interface {
	pulumi.Input

	ToAnalyticsInstanceVanityUrlArrayOutput() AnalyticsInstanceVanityUrlArrayOutput
	ToAnalyticsInstanceVanityUrlArrayOutputWithContext(context.Context) AnalyticsInstanceVanityUrlArrayOutput
}

type AnalyticsInstanceVanityUrlArray []AnalyticsInstanceVanityUrlInput

func (AnalyticsInstanceVanityUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (i AnalyticsInstanceVanityUrlArray) ToAnalyticsInstanceVanityUrlArrayOutput() AnalyticsInstanceVanityUrlArrayOutput {
	return i.ToAnalyticsInstanceVanityUrlArrayOutputWithContext(context.Background())
}

func (i AnalyticsInstanceVanityUrlArray) ToAnalyticsInstanceVanityUrlArrayOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstanceVanityUrlArrayOutput)
}

// AnalyticsInstanceVanityUrlMapInput is an input type that accepts AnalyticsInstanceVanityUrlMap and AnalyticsInstanceVanityUrlMapOutput values.
// You can construct a concrete instance of `AnalyticsInstanceVanityUrlMapInput` via:
//
//	AnalyticsInstanceVanityUrlMap{ "key": AnalyticsInstanceVanityUrlArgs{...} }
type AnalyticsInstanceVanityUrlMapInput interface {
	pulumi.Input

	ToAnalyticsInstanceVanityUrlMapOutput() AnalyticsInstanceVanityUrlMapOutput
	ToAnalyticsInstanceVanityUrlMapOutputWithContext(context.Context) AnalyticsInstanceVanityUrlMapOutput
}

type AnalyticsInstanceVanityUrlMap map[string]AnalyticsInstanceVanityUrlInput

func (AnalyticsInstanceVanityUrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (i AnalyticsInstanceVanityUrlMap) ToAnalyticsInstanceVanityUrlMapOutput() AnalyticsInstanceVanityUrlMapOutput {
	return i.ToAnalyticsInstanceVanityUrlMapOutputWithContext(context.Background())
}

func (i AnalyticsInstanceVanityUrlMap) ToAnalyticsInstanceVanityUrlMapOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsInstanceVanityUrlMapOutput)
}

type AnalyticsInstanceVanityUrlOutput struct{ *pulumi.OutputState }

func (AnalyticsInstanceVanityUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (o AnalyticsInstanceVanityUrlOutput) ToAnalyticsInstanceVanityUrlOutput() AnalyticsInstanceVanityUrlOutput {
	return o
}

func (o AnalyticsInstanceVanityUrlOutput) ToAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlOutput {
	return o
}

// The OCID of the AnalyticsInstance.
func (o AnalyticsInstanceVanityUrlOutput) AnalyticsInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringOutput { return v.AnalyticsInstanceId }).(pulumi.StringOutput)
}

// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
func (o AnalyticsInstanceVanityUrlOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringOutput { return v.CaCertificate }).(pulumi.StringOutput)
}

// Optional description.
func (o AnalyticsInstanceVanityUrlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
func (o AnalyticsInstanceVanityUrlOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// (Updatable) Passphrase for the PEM Private key (if any).
func (o AnalyticsInstanceVanityUrlOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// (Updatable) PEM Private key for HTTPS connections.
func (o AnalyticsInstanceVanityUrlOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// (Updatable) PEM certificate for HTTPS connections.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o AnalyticsInstanceVanityUrlOutput) PublicCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalyticsInstanceVanityUrl) pulumi.StringOutput { return v.PublicCertificate }).(pulumi.StringOutput)
}

type AnalyticsInstanceVanityUrlArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsInstanceVanityUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (o AnalyticsInstanceVanityUrlArrayOutput) ToAnalyticsInstanceVanityUrlArrayOutput() AnalyticsInstanceVanityUrlArrayOutput {
	return o
}

func (o AnalyticsInstanceVanityUrlArrayOutput) ToAnalyticsInstanceVanityUrlArrayOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlArrayOutput {
	return o
}

func (o AnalyticsInstanceVanityUrlArrayOutput) Index(i pulumi.IntInput) AnalyticsInstanceVanityUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalyticsInstanceVanityUrl {
		return vs[0].([]*AnalyticsInstanceVanityUrl)[vs[1].(int)]
	}).(AnalyticsInstanceVanityUrlOutput)
}

type AnalyticsInstanceVanityUrlMapOutput struct{ *pulumi.OutputState }

func (AnalyticsInstanceVanityUrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (o AnalyticsInstanceVanityUrlMapOutput) ToAnalyticsInstanceVanityUrlMapOutput() AnalyticsInstanceVanityUrlMapOutput {
	return o
}

func (o AnalyticsInstanceVanityUrlMapOutput) ToAnalyticsInstanceVanityUrlMapOutputWithContext(ctx context.Context) AnalyticsInstanceVanityUrlMapOutput {
	return o
}

func (o AnalyticsInstanceVanityUrlMapOutput) MapIndex(k pulumi.StringInput) AnalyticsInstanceVanityUrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalyticsInstanceVanityUrl {
		return vs[0].(map[string]*AnalyticsInstanceVanityUrl)[vs[1].(string)]
	}).(AnalyticsInstanceVanityUrlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstanceVanityUrlInput)(nil)).Elem(), &AnalyticsInstanceVanityUrl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstanceVanityUrlArrayInput)(nil)).Elem(), AnalyticsInstanceVanityUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsInstanceVanityUrlMapInput)(nil)).Elem(), AnalyticsInstanceVanityUrlMap{})
	pulumi.RegisterOutputType(AnalyticsInstanceVanityUrlOutput{})
	pulumi.RegisterOutputType(AnalyticsInstanceVanityUrlArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsInstanceVanityUrlMapOutput{})
}
