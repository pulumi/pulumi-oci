// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package announcementsservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Announcement Subscriptions Filter Group resource in Oracle Cloud Infrastructure Announcements Service service.
//
// Creates a new filter group in the specified announcement subscription.
//
// This call is subject to an Announcements limit that applies to the total number of requests across all read or write operations. Announcements might throttle this call to reject an otherwise valid request when the total rate of operations exceeds 20 requests per second for a given user. The service might also throttle this call to reject an otherwise valid request when the total rate of operations exceeds 100 requests per second for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/AnnouncementsService"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := AnnouncementsService.NewAnnouncementSubscriptionsFilterGroup(ctx, "testAnnouncementSubscriptionsFilterGroup", &AnnouncementsService.AnnouncementSubscriptionsFilterGroupArgs{
//				AnnouncementSubscriptionId: pulumi.Any(oci_announcements_service_announcement_subscription.Test_announcement_subscription.Id),
//				Filters: announcementsservice.AnnouncementSubscriptionsFilterGroupFilterArray{
//					&announcementsservice.AnnouncementSubscriptionsFilterGroupFilterArgs{
//						Type:  pulumi.Any(_var.Announcement_subscriptions_filter_group_filters_type),
//						Value: pulumi.Any(_var.Announcement_subscriptions_filter_group_filters_value),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AnnouncementSubscriptionsFilterGroups can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:AnnouncementsService/announcementSubscriptionsFilterGroup:AnnouncementSubscriptionsFilterGroup test_announcement_subscriptions_filter_group "id"
//
// ```
type AnnouncementSubscriptionsFilterGroup struct {
	pulumi.CustomResourceState

	// The OCID of the announcement subscription.
	AnnouncementSubscriptionId pulumi.StringOutput `pulumi:"announcementSubscriptionId"`
	// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
	Filters AnnouncementSubscriptionsFilterGroupFilterArrayOutput `pulumi:"filters"`
	// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAnnouncementSubscriptionsFilterGroup registers a new resource with the given unique name, arguments, and options.
func NewAnnouncementSubscriptionsFilterGroup(ctx *pulumi.Context,
	name string, args *AnnouncementSubscriptionsFilterGroupArgs, opts ...pulumi.ResourceOption) (*AnnouncementSubscriptionsFilterGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnnouncementSubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'AnnouncementSubscriptionId'")
	}
	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnnouncementSubscriptionsFilterGroup
	err := ctx.RegisterResource("oci:AnnouncementsService/announcementSubscriptionsFilterGroup:AnnouncementSubscriptionsFilterGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnouncementSubscriptionsFilterGroup gets an existing AnnouncementSubscriptionsFilterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnouncementSubscriptionsFilterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnouncementSubscriptionsFilterGroupState, opts ...pulumi.ResourceOption) (*AnnouncementSubscriptionsFilterGroup, error) {
	var resource AnnouncementSubscriptionsFilterGroup
	err := ctx.ReadResource("oci:AnnouncementsService/announcementSubscriptionsFilterGroup:AnnouncementSubscriptionsFilterGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnnouncementSubscriptionsFilterGroup resources.
type announcementSubscriptionsFilterGroupState struct {
	// The OCID of the announcement subscription.
	AnnouncementSubscriptionId *string `pulumi:"announcementSubscriptionId"`
	// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
	Filters []AnnouncementSubscriptionsFilterGroupFilter `pulumi:"filters"`
	// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Name *string `pulumi:"name"`
}

type AnnouncementSubscriptionsFilterGroupState struct {
	// The OCID of the announcement subscription.
	AnnouncementSubscriptionId pulumi.StringPtrInput
	// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
	Filters AnnouncementSubscriptionsFilterGroupFilterArrayInput
	// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Name pulumi.StringPtrInput
}

func (AnnouncementSubscriptionsFilterGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*announcementSubscriptionsFilterGroupState)(nil)).Elem()
}

type announcementSubscriptionsFilterGroupArgs struct {
	// The OCID of the announcement subscription.
	AnnouncementSubscriptionId string `pulumi:"announcementSubscriptionId"`
	// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
	Filters []AnnouncementSubscriptionsFilterGroupFilter `pulumi:"filters"`
	// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AnnouncementSubscriptionsFilterGroup resource.
type AnnouncementSubscriptionsFilterGroupArgs struct {
	// The OCID of the announcement subscription.
	AnnouncementSubscriptionId pulumi.StringInput
	// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
	Filters AnnouncementSubscriptionsFilterGroupFilterArrayInput
	// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Name pulumi.StringPtrInput
}

func (AnnouncementSubscriptionsFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*announcementSubscriptionsFilterGroupArgs)(nil)).Elem()
}

type AnnouncementSubscriptionsFilterGroupInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionsFilterGroupOutput() AnnouncementSubscriptionsFilterGroupOutput
	ToAnnouncementSubscriptionsFilterGroupOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupOutput
}

func (*AnnouncementSubscriptionsFilterGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (i *AnnouncementSubscriptionsFilterGroup) ToAnnouncementSubscriptionsFilterGroupOutput() AnnouncementSubscriptionsFilterGroupOutput {
	return i.ToAnnouncementSubscriptionsFilterGroupOutputWithContext(context.Background())
}

func (i *AnnouncementSubscriptionsFilterGroup) ToAnnouncementSubscriptionsFilterGroupOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionsFilterGroupOutput)
}

// AnnouncementSubscriptionsFilterGroupArrayInput is an input type that accepts AnnouncementSubscriptionsFilterGroupArray and AnnouncementSubscriptionsFilterGroupArrayOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionsFilterGroupArrayInput` via:
//
//	AnnouncementSubscriptionsFilterGroupArray{ AnnouncementSubscriptionsFilterGroupArgs{...} }
type AnnouncementSubscriptionsFilterGroupArrayInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionsFilterGroupArrayOutput() AnnouncementSubscriptionsFilterGroupArrayOutput
	ToAnnouncementSubscriptionsFilterGroupArrayOutputWithContext(context.Context) AnnouncementSubscriptionsFilterGroupArrayOutput
}

type AnnouncementSubscriptionsFilterGroupArray []AnnouncementSubscriptionsFilterGroupInput

func (AnnouncementSubscriptionsFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (i AnnouncementSubscriptionsFilterGroupArray) ToAnnouncementSubscriptionsFilterGroupArrayOutput() AnnouncementSubscriptionsFilterGroupArrayOutput {
	return i.ToAnnouncementSubscriptionsFilterGroupArrayOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionsFilterGroupArray) ToAnnouncementSubscriptionsFilterGroupArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionsFilterGroupArrayOutput)
}

// AnnouncementSubscriptionsFilterGroupMapInput is an input type that accepts AnnouncementSubscriptionsFilterGroupMap and AnnouncementSubscriptionsFilterGroupMapOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionsFilterGroupMapInput` via:
//
//	AnnouncementSubscriptionsFilterGroupMap{ "key": AnnouncementSubscriptionsFilterGroupArgs{...} }
type AnnouncementSubscriptionsFilterGroupMapInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionsFilterGroupMapOutput() AnnouncementSubscriptionsFilterGroupMapOutput
	ToAnnouncementSubscriptionsFilterGroupMapOutputWithContext(context.Context) AnnouncementSubscriptionsFilterGroupMapOutput
}

type AnnouncementSubscriptionsFilterGroupMap map[string]AnnouncementSubscriptionsFilterGroupInput

func (AnnouncementSubscriptionsFilterGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (i AnnouncementSubscriptionsFilterGroupMap) ToAnnouncementSubscriptionsFilterGroupMapOutput() AnnouncementSubscriptionsFilterGroupMapOutput {
	return i.ToAnnouncementSubscriptionsFilterGroupMapOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionsFilterGroupMap) ToAnnouncementSubscriptionsFilterGroupMapOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionsFilterGroupMapOutput)
}

type AnnouncementSubscriptionsFilterGroupOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionsFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (o AnnouncementSubscriptionsFilterGroupOutput) ToAnnouncementSubscriptionsFilterGroupOutput() AnnouncementSubscriptionsFilterGroupOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupOutput) ToAnnouncementSubscriptionsFilterGroupOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupOutput {
	return o
}

// The OCID of the announcement subscription.
func (o AnnouncementSubscriptionsFilterGroupOutput) AnnouncementSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionsFilterGroup) pulumi.StringOutput { return v.AnnouncementSubscriptionId }).(pulumi.StringOutput)
}

// (Updatable) A list of filters against which the Announcements service will match announcements. You cannot have more than one of any given filter type within a filter group.
func (o AnnouncementSubscriptionsFilterGroupOutput) Filters() AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionsFilterGroup) AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
		return v.Filters
	}).(AnnouncementSubscriptionsFilterGroupFilterArrayOutput)
}

// The name of the filter group. The name must be unique and it cannot be changed. Avoid entering confidential information.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o AnnouncementSubscriptionsFilterGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionsFilterGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AnnouncementSubscriptionsFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionsFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (o AnnouncementSubscriptionsFilterGroupArrayOutput) ToAnnouncementSubscriptionsFilterGroupArrayOutput() AnnouncementSubscriptionsFilterGroupArrayOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupArrayOutput) ToAnnouncementSubscriptionsFilterGroupArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupArrayOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupArrayOutput) Index(i pulumi.IntInput) AnnouncementSubscriptionsFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnnouncementSubscriptionsFilterGroup {
		return vs[0].([]*AnnouncementSubscriptionsFilterGroup)[vs[1].(int)]
	}).(AnnouncementSubscriptionsFilterGroupOutput)
}

type AnnouncementSubscriptionsFilterGroupMapOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionsFilterGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnnouncementSubscriptionsFilterGroup)(nil)).Elem()
}

func (o AnnouncementSubscriptionsFilterGroupMapOutput) ToAnnouncementSubscriptionsFilterGroupMapOutput() AnnouncementSubscriptionsFilterGroupMapOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupMapOutput) ToAnnouncementSubscriptionsFilterGroupMapOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupMapOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupMapOutput) MapIndex(k pulumi.StringInput) AnnouncementSubscriptionsFilterGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnnouncementSubscriptionsFilterGroup {
		return vs[0].(map[string]*AnnouncementSubscriptionsFilterGroup)[vs[1].(string)]
	}).(AnnouncementSubscriptionsFilterGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupInput)(nil)).Elem(), &AnnouncementSubscriptionsFilterGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupArrayInput)(nil)).Elem(), AnnouncementSubscriptionsFilterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupMapInput)(nil)).Elem(), AnnouncementSubscriptionsFilterGroupMap{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionsFilterGroupOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionsFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionsFilterGroupMapOutput{})
}
