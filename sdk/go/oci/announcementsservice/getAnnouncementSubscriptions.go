// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package announcementsservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Announcement Subscriptions in Oracle Cloud Infrastructure Announcements Service service.
//
// Gets a list of all announcement subscriptions in the specified compartment.
//
// This call is subject to an Announcements limit that applies to the total number of requests across all read or write operations. Announcements might throttle this call to reject an otherwise valid request when the total rate of operations exceeds 20 requests per second for a given user. The service might also throttle this call to reject an otherwise valid request when the total rate of operations exceeds 100 requests per second for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/AnnouncementsService"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := AnnouncementsService.GetAnnouncementSubscriptions(ctx, &announcementsservice.GetAnnouncementSubscriptionsArgs{
//				CompartmentId: compartmentId,
//				DisplayName:   pulumi.StringRef(announcementSubscriptionDisplayName),
//				Id:            pulumi.StringRef(announcementSubscriptionId),
//				State:         pulumi.StringRef(announcementSubscriptionState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAnnouncementSubscriptions(ctx *pulumi.Context, args *GetAnnouncementSubscriptionsArgs, opts ...pulumi.InvokeOption) (*GetAnnouncementSubscriptionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAnnouncementSubscriptionsResult
	err := ctx.Invoke("oci:AnnouncementsService/getAnnouncementSubscriptions:getAnnouncementSubscriptions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAnnouncementSubscriptions.
type GetAnnouncementSubscriptionsArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                              `pulumi:"displayName"`
	Filters     []GetAnnouncementSubscriptionsFilter `pulumi:"filters"`
	// The OCID of the announcement subscription.
	Id *string `pulumi:"id"`
	// A filter to return only announcement subscriptions that match the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getAnnouncementSubscriptions.
type GetAnnouncementSubscriptionsResult struct {
	// The list of announcement_subscription_collection.
	AnnouncementSubscriptionCollections []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection `pulumi:"announcementSubscriptionCollections"`
	// The OCID of the compartment that contains the announcement subscription.
	CompartmentId string `pulumi:"compartmentId"`
	// A user-friendly name for the announcement subscription. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                              `pulumi:"displayName"`
	Filters     []GetAnnouncementSubscriptionsFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the announcement subscription.
	Id *string `pulumi:"id"`
	// The current lifecycle state of the announcement subscription.
	State *string `pulumi:"state"`
}

func GetAnnouncementSubscriptionsOutput(ctx *pulumi.Context, args GetAnnouncementSubscriptionsOutputArgs, opts ...pulumi.InvokeOption) GetAnnouncementSubscriptionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAnnouncementSubscriptionsResult, error) {
			args := v.(GetAnnouncementSubscriptionsArgs)
			r, err := GetAnnouncementSubscriptions(ctx, &args, opts...)
			var s GetAnnouncementSubscriptionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAnnouncementSubscriptionsResultOutput)
}

// A collection of arguments for invoking getAnnouncementSubscriptions.
type GetAnnouncementSubscriptionsOutputArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput                        `pulumi:"displayName"`
	Filters     GetAnnouncementSubscriptionsFilterArrayInput `pulumi:"filters"`
	// The OCID of the announcement subscription.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return only announcement subscriptions that match the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetAnnouncementSubscriptionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsArgs)(nil)).Elem()
}

// A collection of values returned by getAnnouncementSubscriptions.
type GetAnnouncementSubscriptionsResultOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsResult)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsResultOutput) ToGetAnnouncementSubscriptionsResultOutput() GetAnnouncementSubscriptionsResultOutput {
	return o
}

func (o GetAnnouncementSubscriptionsResultOutput) ToGetAnnouncementSubscriptionsResultOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsResultOutput {
	return o
}

// The list of announcement_subscription_collection.
func (o GetAnnouncementSubscriptionsResultOutput) AnnouncementSubscriptionCollections() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection {
		return v.AnnouncementSubscriptionCollections
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput)
}

// The OCID of the compartment that contains the announcement subscription.
func (o GetAnnouncementSubscriptionsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// A user-friendly name for the announcement subscription. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetAnnouncementSubscriptionsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetAnnouncementSubscriptionsResultOutput) Filters() GetAnnouncementSubscriptionsFilterArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) []GetAnnouncementSubscriptionsFilter { return v.Filters }).(GetAnnouncementSubscriptionsFilterArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the announcement subscription.
func (o GetAnnouncementSubscriptionsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current lifecycle state of the announcement subscription.
func (o GetAnnouncementSubscriptionsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsResultOutput{})
}
