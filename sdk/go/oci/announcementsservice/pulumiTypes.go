// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package announcementsservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AnnouncementSubscriptionFilterGroups struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group.
	Filters []AnnouncementSubscriptionFilterGroupsFilter `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name *string `pulumi:"name"`
}

// AnnouncementSubscriptionFilterGroupsInput is an input type that accepts AnnouncementSubscriptionFilterGroupsArgs and AnnouncementSubscriptionFilterGroupsOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionFilterGroupsInput` via:
//
//	AnnouncementSubscriptionFilterGroupsArgs{...}
type AnnouncementSubscriptionFilterGroupsInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionFilterGroupsOutput() AnnouncementSubscriptionFilterGroupsOutput
	ToAnnouncementSubscriptionFilterGroupsOutputWithContext(context.Context) AnnouncementSubscriptionFilterGroupsOutput
}

type AnnouncementSubscriptionFilterGroupsArgs struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group.
	Filters AnnouncementSubscriptionFilterGroupsFilterArrayInput `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AnnouncementSubscriptionFilterGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionFilterGroups)(nil)).Elem()
}

func (i AnnouncementSubscriptionFilterGroupsArgs) ToAnnouncementSubscriptionFilterGroupsOutput() AnnouncementSubscriptionFilterGroupsOutput {
	return i.ToAnnouncementSubscriptionFilterGroupsOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionFilterGroupsArgs) ToAnnouncementSubscriptionFilterGroupsOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionFilterGroupsOutput)
}

func (i AnnouncementSubscriptionFilterGroupsArgs) ToAnnouncementSubscriptionFilterGroupsPtrOutput() AnnouncementSubscriptionFilterGroupsPtrOutput {
	return i.ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionFilterGroupsArgs) ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionFilterGroupsOutput).ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(ctx)
}

// AnnouncementSubscriptionFilterGroupsPtrInput is an input type that accepts AnnouncementSubscriptionFilterGroupsArgs, AnnouncementSubscriptionFilterGroupsPtr and AnnouncementSubscriptionFilterGroupsPtrOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionFilterGroupsPtrInput` via:
//
//	        AnnouncementSubscriptionFilterGroupsArgs{...}
//
//	or:
//
//	        nil
type AnnouncementSubscriptionFilterGroupsPtrInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionFilterGroupsPtrOutput() AnnouncementSubscriptionFilterGroupsPtrOutput
	ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(context.Context) AnnouncementSubscriptionFilterGroupsPtrOutput
}

type announcementSubscriptionFilterGroupsPtrType AnnouncementSubscriptionFilterGroupsArgs

func AnnouncementSubscriptionFilterGroupsPtr(v *AnnouncementSubscriptionFilterGroupsArgs) AnnouncementSubscriptionFilterGroupsPtrInput {
	return (*announcementSubscriptionFilterGroupsPtrType)(v)
}

func (*announcementSubscriptionFilterGroupsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnouncementSubscriptionFilterGroups)(nil)).Elem()
}

func (i *announcementSubscriptionFilterGroupsPtrType) ToAnnouncementSubscriptionFilterGroupsPtrOutput() AnnouncementSubscriptionFilterGroupsPtrOutput {
	return i.ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(context.Background())
}

func (i *announcementSubscriptionFilterGroupsPtrType) ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionFilterGroupsPtrOutput)
}

type AnnouncementSubscriptionFilterGroupsOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionFilterGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionFilterGroups)(nil)).Elem()
}

func (o AnnouncementSubscriptionFilterGroupsOutput) ToAnnouncementSubscriptionFilterGroupsOutput() AnnouncementSubscriptionFilterGroupsOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsOutput) ToAnnouncementSubscriptionFilterGroupsOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsOutput) ToAnnouncementSubscriptionFilterGroupsPtrOutput() AnnouncementSubscriptionFilterGroupsPtrOutput {
	return o.ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(context.Background())
}

func (o AnnouncementSubscriptionFilterGroupsOutput) ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnouncementSubscriptionFilterGroups) *AnnouncementSubscriptionFilterGroups {
		return &v
	}).(AnnouncementSubscriptionFilterGroupsPtrOutput)
}

// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group.
func (o AnnouncementSubscriptionFilterGroupsOutput) Filters() AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionFilterGroups) []AnnouncementSubscriptionFilterGroupsFilter {
		return v.Filters
	}).(AnnouncementSubscriptionFilterGroupsFilterArrayOutput)
}

// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
func (o AnnouncementSubscriptionFilterGroupsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionFilterGroups) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AnnouncementSubscriptionFilterGroupsPtrOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionFilterGroupsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnouncementSubscriptionFilterGroups)(nil)).Elem()
}

func (o AnnouncementSubscriptionFilterGroupsPtrOutput) ToAnnouncementSubscriptionFilterGroupsPtrOutput() AnnouncementSubscriptionFilterGroupsPtrOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsPtrOutput) ToAnnouncementSubscriptionFilterGroupsPtrOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsPtrOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsPtrOutput) Elem() AnnouncementSubscriptionFilterGroupsOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionFilterGroups) AnnouncementSubscriptionFilterGroups {
		if v != nil {
			return *v
		}
		var ret AnnouncementSubscriptionFilterGroups
		return ret
	}).(AnnouncementSubscriptionFilterGroupsOutput)
}

// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group.
func (o AnnouncementSubscriptionFilterGroupsPtrOutput) Filters() AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionFilterGroups) []AnnouncementSubscriptionFilterGroupsFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(AnnouncementSubscriptionFilterGroupsFilterArrayOutput)
}

// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
func (o AnnouncementSubscriptionFilterGroupsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnouncementSubscriptionFilterGroups) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type AnnouncementSubscriptionFilterGroupsFilter struct {
	// The type of filter.
	Type string `pulumi:"type"`
	// The value of the filter.
	Value string `pulumi:"value"`
}

// AnnouncementSubscriptionFilterGroupsFilterInput is an input type that accepts AnnouncementSubscriptionFilterGroupsFilterArgs and AnnouncementSubscriptionFilterGroupsFilterOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionFilterGroupsFilterInput` via:
//
//	AnnouncementSubscriptionFilterGroupsFilterArgs{...}
type AnnouncementSubscriptionFilterGroupsFilterInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionFilterGroupsFilterOutput() AnnouncementSubscriptionFilterGroupsFilterOutput
	ToAnnouncementSubscriptionFilterGroupsFilterOutputWithContext(context.Context) AnnouncementSubscriptionFilterGroupsFilterOutput
}

type AnnouncementSubscriptionFilterGroupsFilterArgs struct {
	// The type of filter.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AnnouncementSubscriptionFilterGroupsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsFilter)(nil)).Elem()
}

func (i AnnouncementSubscriptionFilterGroupsFilterArgs) ToAnnouncementSubscriptionFilterGroupsFilterOutput() AnnouncementSubscriptionFilterGroupsFilterOutput {
	return i.ToAnnouncementSubscriptionFilterGroupsFilterOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionFilterGroupsFilterArgs) ToAnnouncementSubscriptionFilterGroupsFilterOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionFilterGroupsFilterOutput)
}

// AnnouncementSubscriptionFilterGroupsFilterArrayInput is an input type that accepts AnnouncementSubscriptionFilterGroupsFilterArray and AnnouncementSubscriptionFilterGroupsFilterArrayOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionFilterGroupsFilterArrayInput` via:
//
//	AnnouncementSubscriptionFilterGroupsFilterArray{ AnnouncementSubscriptionFilterGroupsFilterArgs{...} }
type AnnouncementSubscriptionFilterGroupsFilterArrayInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionFilterGroupsFilterArrayOutput() AnnouncementSubscriptionFilterGroupsFilterArrayOutput
	ToAnnouncementSubscriptionFilterGroupsFilterArrayOutputWithContext(context.Context) AnnouncementSubscriptionFilterGroupsFilterArrayOutput
}

type AnnouncementSubscriptionFilterGroupsFilterArray []AnnouncementSubscriptionFilterGroupsFilterInput

func (AnnouncementSubscriptionFilterGroupsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnouncementSubscriptionFilterGroupsFilter)(nil)).Elem()
}

func (i AnnouncementSubscriptionFilterGroupsFilterArray) ToAnnouncementSubscriptionFilterGroupsFilterArrayOutput() AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return i.ToAnnouncementSubscriptionFilterGroupsFilterArrayOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionFilterGroupsFilterArray) ToAnnouncementSubscriptionFilterGroupsFilterArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionFilterGroupsFilterArrayOutput)
}

type AnnouncementSubscriptionFilterGroupsFilterOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionFilterGroupsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsFilter)(nil)).Elem()
}

func (o AnnouncementSubscriptionFilterGroupsFilterOutput) ToAnnouncementSubscriptionFilterGroupsFilterOutput() AnnouncementSubscriptionFilterGroupsFilterOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsFilterOutput) ToAnnouncementSubscriptionFilterGroupsFilterOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsFilterOutput {
	return o
}

// The type of filter.
func (o AnnouncementSubscriptionFilterGroupsFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionFilterGroupsFilter) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the filter.
func (o AnnouncementSubscriptionFilterGroupsFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionFilterGroupsFilter) string { return v.Value }).(pulumi.StringOutput)
}

type AnnouncementSubscriptionFilterGroupsFilterArrayOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionFilterGroupsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnouncementSubscriptionFilterGroupsFilter)(nil)).Elem()
}

func (o AnnouncementSubscriptionFilterGroupsFilterArrayOutput) ToAnnouncementSubscriptionFilterGroupsFilterArrayOutput() AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsFilterArrayOutput) ToAnnouncementSubscriptionFilterGroupsFilterArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionFilterGroupsFilterArrayOutput {
	return o
}

func (o AnnouncementSubscriptionFilterGroupsFilterArrayOutput) Index(i pulumi.IntInput) AnnouncementSubscriptionFilterGroupsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnnouncementSubscriptionFilterGroupsFilter {
		return vs[0].([]AnnouncementSubscriptionFilterGroupsFilter)[vs[1].(int)]
	}).(AnnouncementSubscriptionFilterGroupsFilterOutput)
}

type AnnouncementSubscriptionsFilterGroupFilter struct {
	// (Updatable) The type of filter.
	Type string `pulumi:"type"`
	// (Updatable) The value of the filter.
	Value string `pulumi:"value"`
}

// AnnouncementSubscriptionsFilterGroupFilterInput is an input type that accepts AnnouncementSubscriptionsFilterGroupFilterArgs and AnnouncementSubscriptionsFilterGroupFilterOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionsFilterGroupFilterInput` via:
//
//	AnnouncementSubscriptionsFilterGroupFilterArgs{...}
type AnnouncementSubscriptionsFilterGroupFilterInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionsFilterGroupFilterOutput() AnnouncementSubscriptionsFilterGroupFilterOutput
	ToAnnouncementSubscriptionsFilterGroupFilterOutputWithContext(context.Context) AnnouncementSubscriptionsFilterGroupFilterOutput
}

type AnnouncementSubscriptionsFilterGroupFilterArgs struct {
	// (Updatable) The type of filter.
	Type pulumi.StringInput `pulumi:"type"`
	// (Updatable) The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AnnouncementSubscriptionsFilterGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupFilter)(nil)).Elem()
}

func (i AnnouncementSubscriptionsFilterGroupFilterArgs) ToAnnouncementSubscriptionsFilterGroupFilterOutput() AnnouncementSubscriptionsFilterGroupFilterOutput {
	return i.ToAnnouncementSubscriptionsFilterGroupFilterOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionsFilterGroupFilterArgs) ToAnnouncementSubscriptionsFilterGroupFilterOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionsFilterGroupFilterOutput)
}

// AnnouncementSubscriptionsFilterGroupFilterArrayInput is an input type that accepts AnnouncementSubscriptionsFilterGroupFilterArray and AnnouncementSubscriptionsFilterGroupFilterArrayOutput values.
// You can construct a concrete instance of `AnnouncementSubscriptionsFilterGroupFilterArrayInput` via:
//
//	AnnouncementSubscriptionsFilterGroupFilterArray{ AnnouncementSubscriptionsFilterGroupFilterArgs{...} }
type AnnouncementSubscriptionsFilterGroupFilterArrayInput interface {
	pulumi.Input

	ToAnnouncementSubscriptionsFilterGroupFilterArrayOutput() AnnouncementSubscriptionsFilterGroupFilterArrayOutput
	ToAnnouncementSubscriptionsFilterGroupFilterArrayOutputWithContext(context.Context) AnnouncementSubscriptionsFilterGroupFilterArrayOutput
}

type AnnouncementSubscriptionsFilterGroupFilterArray []AnnouncementSubscriptionsFilterGroupFilterInput

func (AnnouncementSubscriptionsFilterGroupFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnouncementSubscriptionsFilterGroupFilter)(nil)).Elem()
}

func (i AnnouncementSubscriptionsFilterGroupFilterArray) ToAnnouncementSubscriptionsFilterGroupFilterArrayOutput() AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
	return i.ToAnnouncementSubscriptionsFilterGroupFilterArrayOutputWithContext(context.Background())
}

func (i AnnouncementSubscriptionsFilterGroupFilterArray) ToAnnouncementSubscriptionsFilterGroupFilterArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnouncementSubscriptionsFilterGroupFilterArrayOutput)
}

type AnnouncementSubscriptionsFilterGroupFilterOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionsFilterGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupFilter)(nil)).Elem()
}

func (o AnnouncementSubscriptionsFilterGroupFilterOutput) ToAnnouncementSubscriptionsFilterGroupFilterOutput() AnnouncementSubscriptionsFilterGroupFilterOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupFilterOutput) ToAnnouncementSubscriptionsFilterGroupFilterOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupFilterOutput {
	return o
}

// (Updatable) The type of filter.
func (o AnnouncementSubscriptionsFilterGroupFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionsFilterGroupFilter) string { return v.Type }).(pulumi.StringOutput)
}

// (Updatable) The value of the filter.
func (o AnnouncementSubscriptionsFilterGroupFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AnnouncementSubscriptionsFilterGroupFilter) string { return v.Value }).(pulumi.StringOutput)
}

type AnnouncementSubscriptionsFilterGroupFilterArrayOutput struct{ *pulumi.OutputState }

func (AnnouncementSubscriptionsFilterGroupFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnnouncementSubscriptionsFilterGroupFilter)(nil)).Elem()
}

func (o AnnouncementSubscriptionsFilterGroupFilterArrayOutput) ToAnnouncementSubscriptionsFilterGroupFilterArrayOutput() AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupFilterArrayOutput) ToAnnouncementSubscriptionsFilterGroupFilterArrayOutputWithContext(ctx context.Context) AnnouncementSubscriptionsFilterGroupFilterArrayOutput {
	return o
}

func (o AnnouncementSubscriptionsFilterGroupFilterArrayOutput) Index(i pulumi.IntInput) AnnouncementSubscriptionsFilterGroupFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnnouncementSubscriptionsFilterGroupFilter {
		return vs[0].([]AnnouncementSubscriptionsFilterGroupFilter)[vs[1].(int)]
	}).(AnnouncementSubscriptionsFilterGroupFilterOutput)
}

type GetAnnouncementSubscriptionFilterGroup struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
	Filters []GetAnnouncementSubscriptionFilterGroupFilter `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name string `pulumi:"name"`
}

// GetAnnouncementSubscriptionFilterGroupInput is an input type that accepts GetAnnouncementSubscriptionFilterGroupArgs and GetAnnouncementSubscriptionFilterGroupOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionFilterGroupInput` via:
//
//	GetAnnouncementSubscriptionFilterGroupArgs{...}
type GetAnnouncementSubscriptionFilterGroupInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionFilterGroupOutput() GetAnnouncementSubscriptionFilterGroupOutput
	ToGetAnnouncementSubscriptionFilterGroupOutputWithContext(context.Context) GetAnnouncementSubscriptionFilterGroupOutput
}

type GetAnnouncementSubscriptionFilterGroupArgs struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
	Filters GetAnnouncementSubscriptionFilterGroupFilterArrayInput `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAnnouncementSubscriptionFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroup)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionFilterGroupArgs) ToGetAnnouncementSubscriptionFilterGroupOutput() GetAnnouncementSubscriptionFilterGroupOutput {
	return i.ToGetAnnouncementSubscriptionFilterGroupOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionFilterGroupArgs) ToGetAnnouncementSubscriptionFilterGroupOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionFilterGroupOutput)
}

// GetAnnouncementSubscriptionFilterGroupArrayInput is an input type that accepts GetAnnouncementSubscriptionFilterGroupArray and GetAnnouncementSubscriptionFilterGroupArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionFilterGroupArrayInput` via:
//
//	GetAnnouncementSubscriptionFilterGroupArray{ GetAnnouncementSubscriptionFilterGroupArgs{...} }
type GetAnnouncementSubscriptionFilterGroupArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionFilterGroupArrayOutput() GetAnnouncementSubscriptionFilterGroupArrayOutput
	ToGetAnnouncementSubscriptionFilterGroupArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionFilterGroupArrayOutput
}

type GetAnnouncementSubscriptionFilterGroupArray []GetAnnouncementSubscriptionFilterGroupInput

func (GetAnnouncementSubscriptionFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionFilterGroup)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionFilterGroupArray) ToGetAnnouncementSubscriptionFilterGroupArrayOutput() GetAnnouncementSubscriptionFilterGroupArrayOutput {
	return i.ToGetAnnouncementSubscriptionFilterGroupArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionFilterGroupArray) ToGetAnnouncementSubscriptionFilterGroupArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionFilterGroupArrayOutput)
}

type GetAnnouncementSubscriptionFilterGroupOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroup)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionFilterGroupOutput) ToGetAnnouncementSubscriptionFilterGroupOutput() GetAnnouncementSubscriptionFilterGroupOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupOutput) ToGetAnnouncementSubscriptionFilterGroupOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupOutput {
	return o
}

// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
func (o GetAnnouncementSubscriptionFilterGroupOutput) Filters() GetAnnouncementSubscriptionFilterGroupFilterArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionFilterGroup) []GetAnnouncementSubscriptionFilterGroupFilter {
		return v.Filters
	}).(GetAnnouncementSubscriptionFilterGroupFilterArrayOutput)
}

// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
func (o GetAnnouncementSubscriptionFilterGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionFilterGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetAnnouncementSubscriptionFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionFilterGroup)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionFilterGroupArrayOutput) ToGetAnnouncementSubscriptionFilterGroupArrayOutput() GetAnnouncementSubscriptionFilterGroupArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupArrayOutput) ToGetAnnouncementSubscriptionFilterGroupArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionFilterGroup {
		return vs[0].([]GetAnnouncementSubscriptionFilterGroup)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionFilterGroupOutput)
}

type GetAnnouncementSubscriptionFilterGroupFilter struct {
	// The type of filter.
	Type string `pulumi:"type"`
	// The value of the filter.
	Value string `pulumi:"value"`
}

// GetAnnouncementSubscriptionFilterGroupFilterInput is an input type that accepts GetAnnouncementSubscriptionFilterGroupFilterArgs and GetAnnouncementSubscriptionFilterGroupFilterOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionFilterGroupFilterInput` via:
//
//	GetAnnouncementSubscriptionFilterGroupFilterArgs{...}
type GetAnnouncementSubscriptionFilterGroupFilterInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionFilterGroupFilterOutput() GetAnnouncementSubscriptionFilterGroupFilterOutput
	ToGetAnnouncementSubscriptionFilterGroupFilterOutputWithContext(context.Context) GetAnnouncementSubscriptionFilterGroupFilterOutput
}

type GetAnnouncementSubscriptionFilterGroupFilterArgs struct {
	// The type of filter.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAnnouncementSubscriptionFilterGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionFilterGroupFilterArgs) ToGetAnnouncementSubscriptionFilterGroupFilterOutput() GetAnnouncementSubscriptionFilterGroupFilterOutput {
	return i.ToGetAnnouncementSubscriptionFilterGroupFilterOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionFilterGroupFilterArgs) ToGetAnnouncementSubscriptionFilterGroupFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionFilterGroupFilterOutput)
}

// GetAnnouncementSubscriptionFilterGroupFilterArrayInput is an input type that accepts GetAnnouncementSubscriptionFilterGroupFilterArray and GetAnnouncementSubscriptionFilterGroupFilterArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionFilterGroupFilterArrayInput` via:
//
//	GetAnnouncementSubscriptionFilterGroupFilterArray{ GetAnnouncementSubscriptionFilterGroupFilterArgs{...} }
type GetAnnouncementSubscriptionFilterGroupFilterArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionFilterGroupFilterArrayOutput
	ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionFilterGroupFilterArrayOutput
}

type GetAnnouncementSubscriptionFilterGroupFilterArray []GetAnnouncementSubscriptionFilterGroupFilterInput

func (GetAnnouncementSubscriptionFilterGroupFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionFilterGroupFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionFilterGroupFilterArray) ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionFilterGroupFilterArrayOutput {
	return i.ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionFilterGroupFilterArray) ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionFilterGroupFilterArrayOutput)
}

type GetAnnouncementSubscriptionFilterGroupFilterOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionFilterGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionFilterGroupFilterOutput) ToGetAnnouncementSubscriptionFilterGroupFilterOutput() GetAnnouncementSubscriptionFilterGroupFilterOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupFilterOutput) ToGetAnnouncementSubscriptionFilterGroupFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupFilterOutput {
	return o
}

// The type of filter.
func (o GetAnnouncementSubscriptionFilterGroupFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionFilterGroupFilter) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the filter.
func (o GetAnnouncementSubscriptionFilterGroupFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionFilterGroupFilter) string { return v.Value }).(pulumi.StringOutput)
}

type GetAnnouncementSubscriptionFilterGroupFilterArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionFilterGroupFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionFilterGroupFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionFilterGroupFilterArrayOutput) ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionFilterGroupFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupFilterArrayOutput) ToGetAnnouncementSubscriptionFilterGroupFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionFilterGroupFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionFilterGroupFilterArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionFilterGroupFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionFilterGroupFilter {
		return vs[0].([]GetAnnouncementSubscriptionFilterGroupFilter)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionFilterGroupFilterOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection struct {
	Items []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem `pulumi:"items"`
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs{...}
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs struct {
	Items GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayInput `pulumi:"items"`
}

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput)
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray{ GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs{...} }
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionInput

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput) Items() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection) []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem {
		return v.Items
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection {
		return vs[0].([]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollection)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A description of the announcement subscription. Avoid entering confidential information.
	Description string `pulumi:"description"`
	// A filter to return only resources that match the entire display name given.
	DisplayName string `pulumi:"displayName"`
	// A list of filter groups for the announcement subscription. A filter group is a combination of multiple filters applied to announcements for matching purposes.
	FilterGroups []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup `pulumi:"filterGroups"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the announcement subscription.
	Id string `pulumi:"id"`
	// A message describing the current lifecycle state in more detail. For example, details might provide required or recommended actions for a resource in a Failed state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The OCID of the Notifications service topic that is the target for publishing announcements that match the configured announcement subscription.
	OnsTopicId string `pulumi:"onsTopicId"`
	// (For announcement subscriptions with Oracle Fusion Applications configured as the service only) The language in which the user prefers to receive emailed announcements. Specify the preference with a value that uses the language tag format (x-obmcs-human-language). For example fr-FR.
	PreferredLanguage string `pulumi:"preferredLanguage"`
	// The time zone that the user prefers for announcement time stamps. Specify the preference with a value that uses the IANA Time Zone Database format (x-obmcs-time-zone). For example America/Los_Angeles.
	PreferredTimeZone string `pulumi:"preferredTimeZone"`
	// A filter to return only announcement subscriptions that match the given lifecycle state.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time that the announcement subscription was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time that the announcement subscription was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs{...}
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput `pulumi:"definedTags"`
	// A description of the announcement subscription. Avoid entering confidential information.
	Description pulumi.StringInput `pulumi:"description"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// A list of filter groups for the announcement subscription. A filter group is a combination of multiple filters applied to announcements for matching purposes.
	FilterGroups GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayInput `pulumi:"filterGroups"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput `pulumi:"freeformTags"`
	// The OCID of the announcement subscription.
	Id pulumi.StringInput `pulumi:"id"`
	// A message describing the current lifecycle state in more detail. For example, details might provide required or recommended actions for a resource in a Failed state.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// The OCID of the Notifications service topic that is the target for publishing announcements that match the configured announcement subscription.
	OnsTopicId pulumi.StringInput `pulumi:"onsTopicId"`
	// (For announcement subscriptions with Oracle Fusion Applications configured as the service only) The language in which the user prefers to receive emailed announcements. Specify the preference with a value that uses the language tag format (x-obmcs-human-language). For example fr-FR.
	PreferredLanguage pulumi.StringInput `pulumi:"preferredLanguage"`
	// The time zone that the user prefers for announcement time stamps. Specify the preference with a value that uses the IANA Time Zone Database format (x-obmcs-time-zone). For example America/Los_Angeles.
	PreferredTimeZone pulumi.StringInput `pulumi:"preferredTimeZone"`
	// A filter to return only announcement subscriptions that match the given lifecycle state.
	State pulumi.StringInput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput `pulumi:"systemTags"`
	// The date and time that the announcement subscription was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The date and time that the announcement subscription was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput)
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray{ GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs{...} }
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemInput

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput {
	return o
}

// The OCID of the compartment.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.CompartmentId
	}).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) map[string]string {
		return v.DefinedTags
	}).(pulumi.StringMapOutput)
}

// A description of the announcement subscription. Avoid entering confidential information.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.Description
	}).(pulumi.StringOutput)
}

// A filter to return only resources that match the entire display name given.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.DisplayName
	}).(pulumi.StringOutput)
}

// A list of filter groups for the announcement subscription. A filter group is a combination of multiple filters applied to announcements for matching purposes.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) FilterGroups() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup {
		return v.FilterGroups
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) map[string]string {
		return v.FreeformTags
	}).(pulumi.StringMapOutput)
}

// The OCID of the announcement subscription.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string { return v.Id }).(pulumi.StringOutput)
}

// A message describing the current lifecycle state in more detail. For example, details might provide required or recommended actions for a resource in a Failed state.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.LifecycleDetails
	}).(pulumi.StringOutput)
}

// The OCID of the Notifications service topic that is the target for publishing announcements that match the configured announcement subscription.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) OnsTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string { return v.OnsTopicId }).(pulumi.StringOutput)
}

// (For announcement subscriptions with Oracle Fusion Applications configured as the service only) The language in which the user prefers to receive emailed announcements. Specify the preference with a value that uses the language tag format (x-obmcs-human-language). For example fr-FR.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.PreferredLanguage
	}).(pulumi.StringOutput)
}

// The time zone that the user prefers for announcement time stamps. Specify the preference with a value that uses the IANA Time Zone Database format (x-obmcs-time-zone). For example America/Los_Angeles.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) PreferredTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.PreferredTimeZone
	}).(pulumi.StringOutput)
}

// A filter to return only announcement subscriptions that match the given lifecycle state.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) map[string]string {
		return v.SystemTags
	}).(pulumi.StringMapOutput)
}

// The date and time that the announcement subscription was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.TimeCreated
	}).(pulumi.StringOutput)
}

// The date and time that the announcement subscription was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem) string {
		return v.TimeUpdated
	}).(pulumi.StringOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem {
		return vs[0].([]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItem)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
	Filters []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name string `pulumi:"name"`
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs{...}
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs struct {
	// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
	Filters GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayInput `pulumi:"filters"`
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput)
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray{ GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs{...} }
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupInput

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput {
	return o
}

// A list of filters against which the Announcements service matches announcements. You cannot have more than one of any given filter type within a filter group. You also cannot combine the RESOURCE_ID filter with any other type of filter within a given filter group.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput) Filters() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup) []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter {
		return v.Filters
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput)
}

// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup) string {
		return v.Name
	}).(pulumi.StringOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup {
		return vs[0].([]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroup)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter struct {
	// The type of filter.
	Type string `pulumi:"type"`
	// The value of the filter.
	Value string `pulumi:"value"`
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs{...}
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs struct {
	// The type of filter.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput)
}

// GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayInput is an input type that accepts GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray and GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayInput` via:
//
//	GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray{ GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs{...} }
type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput
	ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray []GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterInput

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput {
	return i.ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput {
	return o
}

// The type of filter.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter) string {
		return v.Type
	}).(pulumi.StringOutput)
}

// The value of the filter.
func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter) string {
		return v.Value
	}).(pulumi.StringOutput)
}

type GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput() GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput) ToGetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter {
		return vs[0].([]GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilter)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput)
}

type GetAnnouncementSubscriptionsFilter struct {
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetAnnouncementSubscriptionsFilterInput is an input type that accepts GetAnnouncementSubscriptionsFilterArgs and GetAnnouncementSubscriptionsFilterOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsFilterInput` via:
//
//	GetAnnouncementSubscriptionsFilterArgs{...}
type GetAnnouncementSubscriptionsFilterInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsFilterOutput() GetAnnouncementSubscriptionsFilterOutput
	ToGetAnnouncementSubscriptionsFilterOutputWithContext(context.Context) GetAnnouncementSubscriptionsFilterOutput
}

type GetAnnouncementSubscriptionsFilterArgs struct {
	// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetAnnouncementSubscriptionsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsFilterArgs) ToGetAnnouncementSubscriptionsFilterOutput() GetAnnouncementSubscriptionsFilterOutput {
	return i.ToGetAnnouncementSubscriptionsFilterOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsFilterArgs) ToGetAnnouncementSubscriptionsFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsFilterOutput)
}

// GetAnnouncementSubscriptionsFilterArrayInput is an input type that accepts GetAnnouncementSubscriptionsFilterArray and GetAnnouncementSubscriptionsFilterArrayOutput values.
// You can construct a concrete instance of `GetAnnouncementSubscriptionsFilterArrayInput` via:
//
//	GetAnnouncementSubscriptionsFilterArray{ GetAnnouncementSubscriptionsFilterArgs{...} }
type GetAnnouncementSubscriptionsFilterArrayInput interface {
	pulumi.Input

	ToGetAnnouncementSubscriptionsFilterArrayOutput() GetAnnouncementSubscriptionsFilterArrayOutput
	ToGetAnnouncementSubscriptionsFilterArrayOutputWithContext(context.Context) GetAnnouncementSubscriptionsFilterArrayOutput
}

type GetAnnouncementSubscriptionsFilterArray []GetAnnouncementSubscriptionsFilterInput

func (GetAnnouncementSubscriptionsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsFilter)(nil)).Elem()
}

func (i GetAnnouncementSubscriptionsFilterArray) ToGetAnnouncementSubscriptionsFilterArrayOutput() GetAnnouncementSubscriptionsFilterArrayOutput {
	return i.ToGetAnnouncementSubscriptionsFilterArrayOutputWithContext(context.Background())
}

func (i GetAnnouncementSubscriptionsFilterArray) ToGetAnnouncementSubscriptionsFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAnnouncementSubscriptionsFilterArrayOutput)
}

type GetAnnouncementSubscriptionsFilterOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAnnouncementSubscriptionsFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsFilterOutput) ToGetAnnouncementSubscriptionsFilterOutput() GetAnnouncementSubscriptionsFilterOutput {
	return o
}

func (o GetAnnouncementSubscriptionsFilterOutput) ToGetAnnouncementSubscriptionsFilterOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsFilterOutput {
	return o
}

// The name of the group. The name must be unique and it cannot be changed. Avoid entering confidential information.
func (o GetAnnouncementSubscriptionsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAnnouncementSubscriptionsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetAnnouncementSubscriptionsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAnnouncementSubscriptionsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetAnnouncementSubscriptionsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetAnnouncementSubscriptionsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAnnouncementSubscriptionsFilter)(nil)).Elem()
}

func (o GetAnnouncementSubscriptionsFilterArrayOutput) ToGetAnnouncementSubscriptionsFilterArrayOutput() GetAnnouncementSubscriptionsFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsFilterArrayOutput) ToGetAnnouncementSubscriptionsFilterArrayOutputWithContext(ctx context.Context) GetAnnouncementSubscriptionsFilterArrayOutput {
	return o
}

func (o GetAnnouncementSubscriptionsFilterArrayOutput) Index(i pulumi.IntInput) GetAnnouncementSubscriptionsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAnnouncementSubscriptionsFilter {
		return vs[0].([]GetAnnouncementSubscriptionsFilter)[vs[1].(int)]
	}).(GetAnnouncementSubscriptionsFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsInput)(nil)).Elem(), AnnouncementSubscriptionFilterGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsPtrInput)(nil)).Elem(), AnnouncementSubscriptionFilterGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsFilterInput)(nil)).Elem(), AnnouncementSubscriptionFilterGroupsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionFilterGroupsFilterArrayInput)(nil)).Elem(), AnnouncementSubscriptionFilterGroupsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupFilterInput)(nil)).Elem(), AnnouncementSubscriptionsFilterGroupFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnouncementSubscriptionsFilterGroupFilterArrayInput)(nil)).Elem(), AnnouncementSubscriptionsFilterGroupFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupInput)(nil)).Elem(), GetAnnouncementSubscriptionFilterGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionFilterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupFilterInput)(nil)).Elem(), GetAnnouncementSubscriptionFilterGroupFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionFilterGroupFilterArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionFilterGroupFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsFilterInput)(nil)).Elem(), GetAnnouncementSubscriptionsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAnnouncementSubscriptionsFilterArrayInput)(nil)).Elem(), GetAnnouncementSubscriptionsFilterArray{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionFilterGroupsOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionFilterGroupsPtrOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionFilterGroupsFilterOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionFilterGroupsFilterArrayOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionsFilterGroupFilterOutput{})
	pulumi.RegisterOutputType(AnnouncementSubscriptionsFilterGroupFilterArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionFilterGroupOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionFilterGroupFilterOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionFilterGroupFilterArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsAnnouncementSubscriptionCollectionItemFilterGroupFilterArrayOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsFilterOutput{})
	pulumi.RegisterOutputType(GetAnnouncementSubscriptionsFilterArrayOutput{})
}
