// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apmconfig

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Config resource in Oracle Cloud Infrastructure Apm Config service.
//
// Creates a new Configuration item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/ApmConfig"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ApmConfig.NewConfig(ctx, "testConfig", &ApmConfig.ConfigArgs{
// 			ApmDomainId: pulumi.Any(oci_apm_apm_domain.Test_apm_domain.Id),
// 			ConfigType:  pulumi.Any(_var.Config_config_type),
// 			DisplayName: pulumi.Any(_var.Config_display_name),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Config_description),
// 			Dimensions: apmconfig.ConfigDimensionArray{
// 				&apmconfig.ConfigDimensionArgs{
// 					Name:        pulumi.Any(_var.Config_dimensions_name),
// 					ValueSource: pulumi.Any(_var.Config_dimensions_value_source),
// 				},
// 			},
// 			FilterId:   pulumi.Any(oci_apm_config_filter.Test_filter.Id),
// 			FilterText: pulumi.Any(_var.Config_filter_text),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			Metrics: apmconfig.ConfigMetricArray{
// 				&apmconfig.ConfigMetricArgs{
// 					Description: pulumi.Any(_var.Config_metrics_description),
// 					Name:        pulumi.Any(_var.Config_metrics_name),
// 					Unit:        pulumi.Any(_var.Config_metrics_unit),
// 					ValueSource: pulumi.Any(_var.Config_metrics_value_source),
// 				},
// 			},
// 			Namespace: pulumi.Any(_var.Config_namespace),
// 			OpcDryRun: pulumi.Any(_var.Config_opc_dry_run),
// 			Rules: apmconfig.ConfigRuleArray{
// 				&apmconfig.ConfigRuleArgs{
// 					DisplayName:            pulumi.Any(_var.Config_rules_display_name),
// 					FilterText:             pulumi.Any(_var.Config_rules_filter_text),
// 					IsApplyToErrorSpans:    pulumi.Any(_var.Config_rules_is_apply_to_error_spans),
// 					IsEnabled:              pulumi.Any(_var.Config_rules_is_enabled),
// 					Priority:               pulumi.Any(_var.Config_rules_priority),
// 					SatisfiedResponseTime:  pulumi.Any(_var.Config_rules_satisfied_response_time),
// 					ToleratingResponseTime: pulumi.Any(_var.Config_rules_tolerating_response_time),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Configs can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:ApmConfig/config:Config test_config "configs/{configId}/apmDomainId/{apmDomainId}"
// ```
type Config struct {
	pulumi.CustomResourceState

	// (Updatable) The APM Domain Id the request is intended for.
	ApmDomainId pulumi.StringOutput `pulumi:"apmDomainId"`
	// (Updatable) The type of configuration item
	ConfigType pulumi.StringOutput `pulumi:"configType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A description of the metric
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A list of dimensions for this metric. Must be NULL at the moment.
	Dimensions ConfigDimensionArrayOutput `pulumi:"dimensions"`
	// (Updatable) A user-friendly name that provides a short description this rule.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId will be generated when a Span Filter is created.
	FilterId pulumi.StringOutput `pulumi:"filterId"`
	// (Updatable) The string that defines the Span Filter expression.
	FilterText pulumi.StringOutput `pulumi:"filterText"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable)
	Metrics ConfigMetricArrayOutput `pulumi:"metrics"`
	// (Updatable) The namespace to write the metrics to
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// (Updatable) Indicates that this request is a dry-run. If set to "true", nothing will be modified, only the validation will be performed.
	OpcDryRun pulumi.StringOutput `pulumi:"opcDryRun"`
	// (Updatable)
	Rules ConfigRuleArrayOutput `pulumi:"rules"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewConfig registers a new resource with the given unique name, arguments, and options.
func NewConfig(ctx *pulumi.Context,
	name string, args *ConfigArgs, opts ...pulumi.ResourceOption) (*Config, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApmDomainId == nil {
		return nil, errors.New("invalid value for required argument 'ApmDomainId'")
	}
	if args.ConfigType == nil {
		return nil, errors.New("invalid value for required argument 'ConfigType'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource Config
	err := ctx.RegisterResource("oci:ApmConfig/config:Config", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfig gets an existing Config resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigState, opts ...pulumi.ResourceOption) (*Config, error) {
	var resource Config
	err := ctx.ReadResource("oci:ApmConfig/config:Config", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Config resources.
type configState struct {
	// (Updatable) The APM Domain Id the request is intended for.
	ApmDomainId *string `pulumi:"apmDomainId"`
	// (Updatable) The type of configuration item
	ConfigType *string `pulumi:"configType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A description of the metric
	Description *string `pulumi:"description"`
	// (Updatable) A list of dimensions for this metric. Must be NULL at the moment.
	Dimensions []ConfigDimension `pulumi:"dimensions"`
	// (Updatable) A user-friendly name that provides a short description this rule.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId will be generated when a Span Filter is created.
	FilterId *string `pulumi:"filterId"`
	// (Updatable) The string that defines the Span Filter expression.
	FilterText *string `pulumi:"filterText"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable)
	Metrics []ConfigMetric `pulumi:"metrics"`
	// (Updatable) The namespace to write the metrics to
	Namespace *string `pulumi:"namespace"`
	// (Updatable) Indicates that this request is a dry-run. If set to "true", nothing will be modified, only the validation will be performed.
	OpcDryRun *string `pulumi:"opcDryRun"`
	// (Updatable)
	Rules []ConfigRule `pulumi:"rules"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ConfigState struct {
	// (Updatable) The APM Domain Id the request is intended for.
	ApmDomainId pulumi.StringPtrInput
	// (Updatable) The type of configuration item
	ConfigType pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A description of the metric
	Description pulumi.StringPtrInput
	// (Updatable) A list of dimensions for this metric. Must be NULL at the moment.
	Dimensions ConfigDimensionArrayInput
	// (Updatable) A user-friendly name that provides a short description this rule.
	DisplayName pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId will be generated when a Span Filter is created.
	FilterId pulumi.StringPtrInput
	// (Updatable) The string that defines the Span Filter expression.
	FilterText pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable)
	Metrics ConfigMetricArrayInput
	// (Updatable) The namespace to write the metrics to
	Namespace pulumi.StringPtrInput
	// (Updatable) Indicates that this request is a dry-run. If set to "true", nothing will be modified, only the validation will be performed.
	OpcDryRun pulumi.StringPtrInput
	// (Updatable)
	Rules ConfigRuleArrayInput
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringPtrInput
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringPtrInput
}

func (ConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*configState)(nil)).Elem()
}

type configArgs struct {
	// (Updatable) The APM Domain Id the request is intended for.
	ApmDomainId string `pulumi:"apmDomainId"`
	// (Updatable) The type of configuration item
	ConfigType string `pulumi:"configType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A description of the metric
	Description *string `pulumi:"description"`
	// (Updatable) A list of dimensions for this metric. Must be NULL at the moment.
	Dimensions []ConfigDimension `pulumi:"dimensions"`
	// (Updatable) A user-friendly name that provides a short description this rule.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId will be generated when a Span Filter is created.
	FilterId *string `pulumi:"filterId"`
	// (Updatable) The string that defines the Span Filter expression.
	FilterText *string `pulumi:"filterText"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable)
	Metrics []ConfigMetric `pulumi:"metrics"`
	// (Updatable) The namespace to write the metrics to
	Namespace *string `pulumi:"namespace"`
	// (Updatable) Indicates that this request is a dry-run. If set to "true", nothing will be modified, only the validation will be performed.
	OpcDryRun *string `pulumi:"opcDryRun"`
	// (Updatable)
	Rules []ConfigRule `pulumi:"rules"`
}

// The set of arguments for constructing a Config resource.
type ConfigArgs struct {
	// (Updatable) The APM Domain Id the request is intended for.
	ApmDomainId pulumi.StringInput
	// (Updatable) The type of configuration item
	ConfigType pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A description of the metric
	Description pulumi.StringPtrInput
	// (Updatable) A list of dimensions for this metric. Must be NULL at the moment.
	Dimensions ConfigDimensionArrayInput
	// (Updatable) A user-friendly name that provides a short description this rule.
	DisplayName pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a Span Filter. The filterId is mandatory for the creation of MetricGroups. A filterId will be generated when a Span Filter is created.
	FilterId pulumi.StringPtrInput
	// (Updatable) The string that defines the Span Filter expression.
	FilterText pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable)
	Metrics ConfigMetricArrayInput
	// (Updatable) The namespace to write the metrics to
	Namespace pulumi.StringPtrInput
	// (Updatable) Indicates that this request is a dry-run. If set to "true", nothing will be modified, only the validation will be performed.
	OpcDryRun pulumi.StringPtrInput
	// (Updatable)
	Rules ConfigRuleArrayInput
}

func (ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configArgs)(nil)).Elem()
}

type ConfigInput interface {
	pulumi.Input

	ToConfigOutput() ConfigOutput
	ToConfigOutputWithContext(ctx context.Context) ConfigOutput
}

func (*Config) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (i *Config) ToConfigOutput() ConfigOutput {
	return i.ToConfigOutputWithContext(context.Background())
}

func (i *Config) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigOutput)
}

// ConfigArrayInput is an input type that accepts ConfigArray and ConfigArrayOutput values.
// You can construct a concrete instance of `ConfigArrayInput` via:
//
//          ConfigArray{ ConfigArgs{...} }
type ConfigArrayInput interface {
	pulumi.Input

	ToConfigArrayOutput() ConfigArrayOutput
	ToConfigArrayOutputWithContext(context.Context) ConfigArrayOutput
}

type ConfigArray []ConfigInput

func (ConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Config)(nil)).Elem()
}

func (i ConfigArray) ToConfigArrayOutput() ConfigArrayOutput {
	return i.ToConfigArrayOutputWithContext(context.Background())
}

func (i ConfigArray) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigArrayOutput)
}

// ConfigMapInput is an input type that accepts ConfigMap and ConfigMapOutput values.
// You can construct a concrete instance of `ConfigMapInput` via:
//
//          ConfigMap{ "key": ConfigArgs{...} }
type ConfigMapInput interface {
	pulumi.Input

	ToConfigMapOutput() ConfigMapOutput
	ToConfigMapOutputWithContext(context.Context) ConfigMapOutput
}

type ConfigMap map[string]ConfigInput

func (ConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Config)(nil)).Elem()
}

func (i ConfigMap) ToConfigMapOutput() ConfigMapOutput {
	return i.ToConfigMapOutputWithContext(context.Background())
}

func (i ConfigMap) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapOutput)
}

type ConfigOutput struct{ *pulumi.OutputState }

func (ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (o ConfigOutput) ToConfigOutput() ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return o
}

type ConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Config)(nil)).Elem()
}

func (o ConfigArrayOutput) ToConfigArrayOutput() ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) Index(i pulumi.IntInput) ConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Config {
		return vs[0].([]*Config)[vs[1].(int)]
	}).(ConfigOutput)
}

type ConfigMapOutput struct{ *pulumi.OutputState }

func (ConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Config)(nil)).Elem()
}

func (o ConfigMapOutput) ToConfigMapOutput() ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) MapIndex(k pulumi.StringInput) ConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Config {
		return vs[0].(map[string]*Config)[vs[1].(string)]
	}).(ConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigInput)(nil)).Elem(), &Config{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigArrayInput)(nil)).Elem(), ConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapInput)(nil)).Elem(), ConfigMap{})
	pulumi.RegisterOutputType(ConfigOutput{})
	pulumi.RegisterOutputType(ConfigArrayOutput{})
	pulumi.RegisterOutputType(ConfigMapOutput{})
}
