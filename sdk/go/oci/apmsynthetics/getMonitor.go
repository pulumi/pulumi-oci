// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apmsynthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Monitor resource in Oracle Cloud Infrastructure Apm Synthetics service.
//
// Gets the configuration of the monitor identified by the OCID.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ApmSynthetics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApmSynthetics.GetMonitor(ctx, &apmsynthetics.GetMonitorArgs{
//				ApmDomainId: testApmDomain.Id,
//				MonitorId:   testMonitorOciApmSyntheticsMonitor.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetMonitor(ctx *pulumi.Context, args *GetMonitorArgs, opts ...pulumi.InvokeOption) (*GetMonitorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMonitorResult
	err := ctx.Invoke("oci:ApmSynthetics/getMonitor:getMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitor.
type GetMonitorArgs struct {
	// The APM domain ID the request is intended for.
	ApmDomainId string `pulumi:"apmDomainId"`
	// The OCID of the monitor.
	MonitorId string `pulumi:"monitorId"`
}

// A collection of values returned by getMonitor.
type GetMonitorResult struct {
	ApmDomainId string `pulumi:"apmDomainId"`
	// Monitor availability configuration details.
	AvailabilityConfigurations []GetMonitorAvailabilityConfiguration `pulumi:"availabilityConfigurations"`
	// Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
	BatchIntervalInSeconds int `pulumi:"batchIntervalInSeconds"`
	// Details of monitor configuration.
	Configurations []GetMonitorConfiguration `pulumi:"configurations"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Unique name that can be edited. The name should not contain any confidential information.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
	Id string `pulumi:"id"`
	// If isRunNow is enabled, then the monitor will run immediately.
	IsRunNow bool `pulumi:"isRunNow"`
	// If runOnce is enabled, then the monitor will run once.
	IsRunOnce bool `pulumi:"isRunOnce"`
	// Details required to schedule maintenance window.
	MaintenanceWindowSchedules []GetMonitorMaintenanceWindowSchedule `pulumi:"maintenanceWindowSchedules"`
	MonitorId                  string                                `pulumi:"monitorId"`
	// Type of monitor.
	MonitorType string `pulumi:"monitorType"`
	// Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
	RepeatIntervalInSeconds int `pulumi:"repeatIntervalInSeconds"`
	// Scheduling policy to decide the distribution of monitor executions on vantage points.
	SchedulingPolicy string `pulumi:"schedulingPolicy"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId string `pulumi:"scriptId"`
	// Name of the script.
	ScriptName string `pulumi:"scriptName"`
	// List of script parameters. Example: `[{"monitorScriptParameter": {"paramName": "userid", "paramValue":"testuser"}, "isSecret": false, "isOverwritten": false}]`
	ScriptParameters []GetMonitorScriptParameter `pulumi:"scriptParameters"`
	// Enables or disables the monitor.
	Status string `pulumi:"status"`
	// Specify the endpoint on which to run the monitor. For BROWSER, REST and NETWORK monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
	Target string `pulumi:"target"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated string `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated string `pulumi:"timeUpdated"`
	// Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds int `pulumi:"timeoutInSeconds"`
	// Number of vantage points where monitor is running.
	VantagePointCount int `pulumi:"vantagePointCount"`
	// List of public and dedicated vantage points where the monitor is running.
	VantagePoints []GetMonitorVantagePoint `pulumi:"vantagePoints"`
}

func GetMonitorOutput(ctx *pulumi.Context, args GetMonitorOutputArgs, opts ...pulumi.InvokeOption) GetMonitorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMonitorResult, error) {
			args := v.(GetMonitorArgs)
			r, err := GetMonitor(ctx, &args, opts...)
			var s GetMonitorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMonitorResultOutput)
}

// A collection of arguments for invoking getMonitor.
type GetMonitorOutputArgs struct {
	// The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringInput `pulumi:"apmDomainId"`
	// The OCID of the monitor.
	MonitorId pulumi.StringInput `pulumi:"monitorId"`
}

func (GetMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorArgs)(nil)).Elem()
}

// A collection of values returned by getMonitor.
type GetMonitorResultOutput struct{ *pulumi.OutputState }

func (GetMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorResult)(nil)).Elem()
}

func (o GetMonitorResultOutput) ToGetMonitorResultOutput() GetMonitorResultOutput {
	return o
}

func (o GetMonitorResultOutput) ToGetMonitorResultOutputWithContext(ctx context.Context) GetMonitorResultOutput {
	return o
}

func (o GetMonitorResultOutput) ApmDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.ApmDomainId }).(pulumi.StringOutput)
}

// Monitor availability configuration details.
func (o GetMonitorResultOutput) AvailabilityConfigurations() GetMonitorAvailabilityConfigurationArrayOutput {
	return o.ApplyT(func(v GetMonitorResult) []GetMonitorAvailabilityConfiguration { return v.AvailabilityConfigurations }).(GetMonitorAvailabilityConfigurationArrayOutput)
}

// Time interval between two runs in round robin batch mode (SchedulingPolicy - BATCHED_ROUND_ROBIN).
func (o GetMonitorResultOutput) BatchIntervalInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorResult) int { return v.BatchIntervalInSeconds }).(pulumi.IntOutput)
}

// Details of monitor configuration.
func (o GetMonitorResultOutput) Configurations() GetMonitorConfigurationArrayOutput {
	return o.ApplyT(func(v GetMonitorResult) []GetMonitorConfiguration { return v.Configurations }).(GetMonitorConfigurationArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetMonitorResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMonitorResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Unique name that can be edited. The name should not contain any confidential information.
func (o GetMonitorResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetMonitorResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetMonitorResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the monitor.
func (o GetMonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

// If isRunNow is enabled, then the monitor will run immediately.
func (o GetMonitorResultOutput) IsRunNow() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMonitorResult) bool { return v.IsRunNow }).(pulumi.BoolOutput)
}

// If runOnce is enabled, then the monitor will run once.
func (o GetMonitorResultOutput) IsRunOnce() pulumi.BoolOutput {
	return o.ApplyT(func(v GetMonitorResult) bool { return v.IsRunOnce }).(pulumi.BoolOutput)
}

// Details required to schedule maintenance window.
func (o GetMonitorResultOutput) MaintenanceWindowSchedules() GetMonitorMaintenanceWindowScheduleArrayOutput {
	return o.ApplyT(func(v GetMonitorResult) []GetMonitorMaintenanceWindowSchedule { return v.MaintenanceWindowSchedules }).(GetMonitorMaintenanceWindowScheduleArrayOutput)
}

func (o GetMonitorResultOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.MonitorId }).(pulumi.StringOutput)
}

// Type of monitor.
func (o GetMonitorResultOutput) MonitorType() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.MonitorType }).(pulumi.StringOutput)
}

// Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds for Scripted REST, Scripted Browser and Browser monitors, and 60 seconds for REST monitor.
func (o GetMonitorResultOutput) RepeatIntervalInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorResult) int { return v.RepeatIntervalInSeconds }).(pulumi.IntOutput)
}

// Scheduling policy to decide the distribution of monitor executions on vantage points.
func (o GetMonitorResultOutput) SchedulingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.SchedulingPolicy }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
func (o GetMonitorResultOutput) ScriptId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.ScriptId }).(pulumi.StringOutput)
}

// Name of the script.
func (o GetMonitorResultOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.ScriptName }).(pulumi.StringOutput)
}

// List of script parameters. Example: `[{"monitorScriptParameter": {"paramName": "userid", "paramValue":"testuser"}, "isSecret": false, "isOverwritten": false}]`
func (o GetMonitorResultOutput) ScriptParameters() GetMonitorScriptParameterArrayOutput {
	return o.ApplyT(func(v GetMonitorResult) []GetMonitorScriptParameter { return v.ScriptParameters }).(GetMonitorScriptParameterArrayOutput)
}

// Enables or disables the monitor.
func (o GetMonitorResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.Status }).(pulumi.StringOutput)
}

// Specify the endpoint on which to run the monitor. For BROWSER, REST and NETWORK monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is. For NETWORK monitor with TCP protocol, a port needs to be provided along with target. Example: 192.168.0.1:80
func (o GetMonitorResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.Target }).(pulumi.StringOutput)
}

// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
func (o GetMonitorResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
func (o GetMonitorResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Timeout in seconds. If isFailureRetried is true, then timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. If isFailureRetried is false, then timeout cannot be more than 50% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60 for Scripted REST, Scripted Browser and Browser monitors. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
func (o GetMonitorResultOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorResult) int { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

// Number of vantage points where monitor is running.
func (o GetMonitorResultOutput) VantagePointCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetMonitorResult) int { return v.VantagePointCount }).(pulumi.IntOutput)
}

// List of public and dedicated vantage points where the monitor is running.
func (o GetMonitorResultOutput) VantagePoints() GetMonitorVantagePointArrayOutput {
	return o.ApplyT(func(v GetMonitorResult) []GetMonitorVantagePoint { return v.VantagePoints }).(GetMonitorVantagePointArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitorResultOutput{})
}
