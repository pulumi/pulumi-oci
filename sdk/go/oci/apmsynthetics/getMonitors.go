// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apmsynthetics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Monitors in Oracle Cloud Infrastructure Apm Synthetics service.
//
// Returns a list of monitors.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ApmSynthetics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApmSynthetics.GetMonitors(ctx, &apmsynthetics.GetMonitorsArgs{
//				ApmDomainId:               oci_apm_synthetics_apm_domain.Test_apm_domain.Id,
//				DisplayName:               pulumi.StringRef(_var.Monitor_display_name),
//				IsMaintenanceWindowActive: pulumi.BoolRef(_var.Monitor_is_maintenance_window_active),
//				IsMaintenanceWindowSet:    pulumi.BoolRef(_var.Monitor_is_maintenance_window_set),
//				MonitorType:               pulumi.StringRef(_var.Monitor_monitor_type),
//				ScriptId:                  pulumi.StringRef(oci_apm_synthetics_script.Test_script.Id),
//				Status:                    pulumi.StringRef(_var.Monitor_status),
//				VantagePoint:              pulumi.StringRef(_var.Monitor_vantage_point),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetMonitors(ctx *pulumi.Context, args *GetMonitorsArgs, opts ...pulumi.InvokeOption) (*GetMonitorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMonitorsResult
	err := ctx.Invoke("oci:ApmSynthetics/getMonitors:getMonitors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsArgs struct {
	// The APM domain ID the request is intended for.
	ApmDomainId string `pulumi:"apmDomainId"`
	// A filter to return only the resources that match the entire display name.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetMonitorsFilter `pulumi:"filters"`
	// A filter to return the monitors whose maintenance window is currently active.
	IsMaintenanceWindowActive *bool `pulumi:"isMaintenanceWindowActive"`
	// A filter to return the monitors whose maintenance window is set.
	IsMaintenanceWindowSet *bool `pulumi:"isMaintenanceWindowSet"`
	// A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST, REST and NETWORK.
	MonitorType *string `pulumi:"monitorType"`
	// A filter to return only monitors using scriptId.
	ScriptId *string `pulumi:"scriptId"`
	// A filter to return only monitors that match the status given.
	Status *string `pulumi:"status"`
	// The name of the public or dedicated vantage point.
	VantagePoint *string `pulumi:"vantagePoint"`
}

// A collection of values returned by getMonitors.
type GetMonitorsResult struct {
	ApmDomainId string `pulumi:"apmDomainId"`
	// Unique name that can be edited. The name should not contain any confidential information.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetMonitorsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                        string `pulumi:"id"`
	IsMaintenanceWindowActive *bool  `pulumi:"isMaintenanceWindowActive"`
	IsMaintenanceWindowSet    *bool  `pulumi:"isMaintenanceWindowSet"`
	// The list of monitor_collection.
	MonitorCollections []GetMonitorsMonitorCollection `pulumi:"monitorCollections"`
	// Type of monitor.
	MonitorType *string `pulumi:"monitorType"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId *string `pulumi:"scriptId"`
	// Enables or disables the monitor.
	Status       *string `pulumi:"status"`
	VantagePoint *string `pulumi:"vantagePoint"`
}

func GetMonitorsOutput(ctx *pulumi.Context, args GetMonitorsOutputArgs, opts ...pulumi.InvokeOption) GetMonitorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMonitorsResult, error) {
			args := v.(GetMonitorsArgs)
			r, err := GetMonitors(ctx, &args, opts...)
			var s GetMonitorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMonitorsResultOutput)
}

// A collection of arguments for invoking getMonitors.
type GetMonitorsOutputArgs struct {
	// The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringInput `pulumi:"apmDomainId"`
	// A filter to return only the resources that match the entire display name.
	DisplayName pulumi.StringPtrInput       `pulumi:"displayName"`
	Filters     GetMonitorsFilterArrayInput `pulumi:"filters"`
	// A filter to return the monitors whose maintenance window is currently active.
	IsMaintenanceWindowActive pulumi.BoolPtrInput `pulumi:"isMaintenanceWindowActive"`
	// A filter to return the monitors whose maintenance window is set.
	IsMaintenanceWindowSet pulumi.BoolPtrInput `pulumi:"isMaintenanceWindowSet"`
	// A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST, REST and NETWORK.
	MonitorType pulumi.StringPtrInput `pulumi:"monitorType"`
	// A filter to return only monitors using scriptId.
	ScriptId pulumi.StringPtrInput `pulumi:"scriptId"`
	// A filter to return only monitors that match the status given.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The name of the public or dedicated vantage point.
	VantagePoint pulumi.StringPtrInput `pulumi:"vantagePoint"`
}

func (GetMonitorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsArgs)(nil)).Elem()
}

// A collection of values returned by getMonitors.
type GetMonitorsResultOutput struct{ *pulumi.OutputState }

func (GetMonitorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMonitorsResult)(nil)).Elem()
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutput() GetMonitorsResultOutput {
	return o
}

func (o GetMonitorsResultOutput) ToGetMonitorsResultOutputWithContext(ctx context.Context) GetMonitorsResultOutput {
	return o
}

func (o GetMonitorsResultOutput) ApmDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsResult) string { return v.ApmDomainId }).(pulumi.StringOutput)
}

// Unique name that can be edited. The name should not contain any confidential information.
func (o GetMonitorsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetMonitorsResultOutput) Filters() GetMonitorsFilterArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []GetMonitorsFilter { return v.Filters }).(GetMonitorsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMonitorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMonitorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMonitorsResultOutput) IsMaintenanceWindowActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *bool { return v.IsMaintenanceWindowActive }).(pulumi.BoolPtrOutput)
}

func (o GetMonitorsResultOutput) IsMaintenanceWindowSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *bool { return v.IsMaintenanceWindowSet }).(pulumi.BoolPtrOutput)
}

// The list of monitor_collection.
func (o GetMonitorsResultOutput) MonitorCollections() GetMonitorsMonitorCollectionArrayOutput {
	return o.ApplyT(func(v GetMonitorsResult) []GetMonitorsMonitorCollection { return v.MonitorCollections }).(GetMonitorsMonitorCollectionArrayOutput)
}

// Type of monitor.
func (o GetMonitorsResultOutput) MonitorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.MonitorType }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
func (o GetMonitorsResultOutput) ScriptId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.ScriptId }).(pulumi.StringPtrOutput)
}

// Enables or disables the monitor.
func (o GetMonitorsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o GetMonitorsResultOutput) VantagePoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMonitorsResult) *string { return v.VantagePoint }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMonitorsResultOutput{})
}
