// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apmtraces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Trace resource in Oracle Cloud Infrastructure Apm Traces service.
//
// Gets the trace details identified by traceId.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/ApmTraces"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApmTraces.GetTrace(ctx, &apmtraces.GetTraceArgs{
//				ApmDomainId:                          testApmDomain.Id,
//				TraceKey:                             traceTraceKey,
//				TimeTraceStartedGreaterThanOrEqualTo: pulumi.StringRef(traceTimeTraceStartedGreaterThanOrEqualTo),
//				TimeTraceStartedLessThan:             pulumi.StringRef(traceTimeTraceStartedLessThan),
//				TraceNamespace:                       pulumi.StringRef(traceTraceNamespace),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTrace(ctx *pulumi.Context, args *GetTraceArgs, opts ...pulumi.InvokeOption) (*GetTraceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTraceResult
	err := ctx.Invoke("oci:ApmTraces/getTrace:getTrace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrace.
type GetTraceArgs struct {
	// The APM Domain ID for the intended request.
	ApmDomainId string `pulumi:"apmDomainId"`
	// Include traces that have a `minTraceStartTime` equal to or greater than this value.
	TimeTraceStartedGreaterThanOrEqualTo *string `pulumi:"timeTraceStartedGreaterThanOrEqualTo"`
	// Include traces that have a `minTraceStartTime` less than this value.
	TimeTraceStartedLessThan *string `pulumi:"timeTraceStartedLessThan"`
	// Unique Application Performance Monitoring trace identifier (traceId).
	TraceKey string `pulumi:"traceKey"`
	// Name space from which the trace details need to be retrieved.
	TraceNamespace *string `pulumi:"traceNamespace"`
}

// A collection of values returned by getTrace.
type GetTraceResult struct {
	ApmDomainId string `pulumi:"apmDomainId"`
	// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
	ErrorSpanCount int `pulumi:"errorSpanCount"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Boolean flag that indicates whether the trace has an error.
	IsFault bool `pulumi:"isFault"`
	// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
	Key string `pulumi:"key"`
	// Time taken for the root span operation to complete in milliseconds.
	RootSpanDurationInMs int `pulumi:"rootSpanDurationInMs"`
	// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
	RootSpanOperationName string `pulumi:"rootSpanOperationName"`
	// Service associated with the trace.
	RootSpanServiceName string `pulumi:"rootSpanServiceName"`
	// A summary of the spans by service.
	ServiceSummaries []GetTraceServiceSummary `pulumi:"serviceSummaries"`
	// Source of span (spans, syn_spans).
	SourceName string `pulumi:"sourceName"`
	// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
	SpanCount int `pulumi:"spanCount"`
	// Summary of the information pertaining to the spans in the trace window that is being queried.
	SpanSummaries []GetTraceSpanSummary `pulumi:"spanSummaries"`
	// An array of spans in the trace.
	Spans []GetTraceSpan `pulumi:"spans"`
	// Start time of the earliest span in the span collection.
	TimeEarliestSpanStarted string `pulumi:"timeEarliestSpanStarted"`
	// End time of the span that most recently ended in the span collection.
	TimeLatestSpanEnded string `pulumi:"timeLatestSpanEnded"`
	// End time of the root span for the span collection.
	TimeRootSpanEnded string `pulumi:"timeRootSpanEnded"`
	// Start time of the root span for the span collection.
	TimeRootSpanStarted                  string  `pulumi:"timeRootSpanStarted"`
	TimeTraceStartedGreaterThanOrEqualTo *string `pulumi:"timeTraceStartedGreaterThanOrEqualTo"`
	TimeTraceStartedLessThan             *string `pulumi:"timeTraceStartedLessThan"`
	// Time between the start of the earliest span and the end of the most recent span in milliseconds.
	TraceDurationInMs int `pulumi:"traceDurationInMs"`
	// Error code of the trace.
	TraceErrorCode string `pulumi:"traceErrorCode"`
	// Error type of the trace.
	TraceErrorType string `pulumi:"traceErrorType"`
	// Unique identifier for the trace.
	TraceKey       string  `pulumi:"traceKey"`
	TraceNamespace *string `pulumi:"traceNamespace"`
	// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
	TraceStatus string `pulumi:"traceStatus"`
}

func GetTraceOutput(ctx *pulumi.Context, args GetTraceOutputArgs, opts ...pulumi.InvokeOption) GetTraceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTraceResultOutput, error) {
			args := v.(GetTraceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:ApmTraces/getTrace:getTrace", args, GetTraceResultOutput{}, options).(GetTraceResultOutput), nil
		}).(GetTraceResultOutput)
}

// A collection of arguments for invoking getTrace.
type GetTraceOutputArgs struct {
	// The APM Domain ID for the intended request.
	ApmDomainId pulumi.StringInput `pulumi:"apmDomainId"`
	// Include traces that have a `minTraceStartTime` equal to or greater than this value.
	TimeTraceStartedGreaterThanOrEqualTo pulumi.StringPtrInput `pulumi:"timeTraceStartedGreaterThanOrEqualTo"`
	// Include traces that have a `minTraceStartTime` less than this value.
	TimeTraceStartedLessThan pulumi.StringPtrInput `pulumi:"timeTraceStartedLessThan"`
	// Unique Application Performance Monitoring trace identifier (traceId).
	TraceKey pulumi.StringInput `pulumi:"traceKey"`
	// Name space from which the trace details need to be retrieved.
	TraceNamespace pulumi.StringPtrInput `pulumi:"traceNamespace"`
}

func (GetTraceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceArgs)(nil)).Elem()
}

// A collection of values returned by getTrace.
type GetTraceResultOutput struct{ *pulumi.OutputState }

func (GetTraceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceResult)(nil)).Elem()
}

func (o GetTraceResultOutput) ToGetTraceResultOutput() GetTraceResultOutput {
	return o
}

func (o GetTraceResultOutput) ToGetTraceResultOutputWithContext(ctx context.Context) GetTraceResultOutput {
	return o
}

func (o GetTraceResultOutput) ApmDomainId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.ApmDomainId }).(pulumi.StringOutput)
}

// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
func (o GetTraceResultOutput) ErrorSpanCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTraceResult) int { return v.ErrorSpanCount }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTraceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Boolean flag that indicates whether the trace has an error.
func (o GetTraceResultOutput) IsFault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTraceResult) bool { return v.IsFault }).(pulumi.BoolOutput)
}

// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
func (o GetTraceResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.Key }).(pulumi.StringOutput)
}

// Time taken for the root span operation to complete in milliseconds.
func (o GetTraceResultOutput) RootSpanDurationInMs() pulumi.IntOutput {
	return o.ApplyT(func(v GetTraceResult) int { return v.RootSpanDurationInMs }).(pulumi.IntOutput)
}

// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
func (o GetTraceResultOutput) RootSpanOperationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.RootSpanOperationName }).(pulumi.StringOutput)
}

// Service associated with the trace.
func (o GetTraceResultOutput) RootSpanServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.RootSpanServiceName }).(pulumi.StringOutput)
}

// A summary of the spans by service.
func (o GetTraceResultOutput) ServiceSummaries() GetTraceServiceSummaryArrayOutput {
	return o.ApplyT(func(v GetTraceResult) []GetTraceServiceSummary { return v.ServiceSummaries }).(GetTraceServiceSummaryArrayOutput)
}

// Source of span (spans, syn_spans).
func (o GetTraceResultOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.SourceName }).(pulumi.StringOutput)
}

// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
func (o GetTraceResultOutput) SpanCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTraceResult) int { return v.SpanCount }).(pulumi.IntOutput)
}

// Summary of the information pertaining to the spans in the trace window that is being queried.
func (o GetTraceResultOutput) SpanSummaries() GetTraceSpanSummaryArrayOutput {
	return o.ApplyT(func(v GetTraceResult) []GetTraceSpanSummary { return v.SpanSummaries }).(GetTraceSpanSummaryArrayOutput)
}

// An array of spans in the trace.
func (o GetTraceResultOutput) Spans() GetTraceSpanArrayOutput {
	return o.ApplyT(func(v GetTraceResult) []GetTraceSpan { return v.Spans }).(GetTraceSpanArrayOutput)
}

// Start time of the earliest span in the span collection.
func (o GetTraceResultOutput) TimeEarliestSpanStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TimeEarliestSpanStarted }).(pulumi.StringOutput)
}

// End time of the span that most recently ended in the span collection.
func (o GetTraceResultOutput) TimeLatestSpanEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TimeLatestSpanEnded }).(pulumi.StringOutput)
}

// End time of the root span for the span collection.
func (o GetTraceResultOutput) TimeRootSpanEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TimeRootSpanEnded }).(pulumi.StringOutput)
}

// Start time of the root span for the span collection.
func (o GetTraceResultOutput) TimeRootSpanStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TimeRootSpanStarted }).(pulumi.StringOutput)
}

func (o GetTraceResultOutput) TimeTraceStartedGreaterThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceResult) *string { return v.TimeTraceStartedGreaterThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func (o GetTraceResultOutput) TimeTraceStartedLessThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceResult) *string { return v.TimeTraceStartedLessThan }).(pulumi.StringPtrOutput)
}

// Time between the start of the earliest span and the end of the most recent span in milliseconds.
func (o GetTraceResultOutput) TraceDurationInMs() pulumi.IntOutput {
	return o.ApplyT(func(v GetTraceResult) int { return v.TraceDurationInMs }).(pulumi.IntOutput)
}

// Error code of the trace.
func (o GetTraceResultOutput) TraceErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TraceErrorCode }).(pulumi.StringOutput)
}

// Error type of the trace.
func (o GetTraceResultOutput) TraceErrorType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TraceErrorType }).(pulumi.StringOutput)
}

// Unique identifier for the trace.
func (o GetTraceResultOutput) TraceKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TraceKey }).(pulumi.StringOutput)
}

func (o GetTraceResultOutput) TraceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceResult) *string { return v.TraceNamespace }).(pulumi.StringPtrOutput)
}

// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
func (o GetTraceResultOutput) TraceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetTraceResult) string { return v.TraceStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTraceResultOutput{})
}
