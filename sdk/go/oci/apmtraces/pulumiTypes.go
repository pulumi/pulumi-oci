// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apmtraces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetQueryQuickPicksFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetQueryQuickPicksFilterInput is an input type that accepts GetQueryQuickPicksFilterArgs and GetQueryQuickPicksFilterOutput values.
// You can construct a concrete instance of `GetQueryQuickPicksFilterInput` via:
//
//	GetQueryQuickPicksFilterArgs{...}
type GetQueryQuickPicksFilterInput interface {
	pulumi.Input

	ToGetQueryQuickPicksFilterOutput() GetQueryQuickPicksFilterOutput
	ToGetQueryQuickPicksFilterOutputWithContext(context.Context) GetQueryQuickPicksFilterOutput
}

type GetQueryQuickPicksFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetQueryQuickPicksFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryQuickPicksFilter)(nil)).Elem()
}

func (i GetQueryQuickPicksFilterArgs) ToGetQueryQuickPicksFilterOutput() GetQueryQuickPicksFilterOutput {
	return i.ToGetQueryQuickPicksFilterOutputWithContext(context.Background())
}

func (i GetQueryQuickPicksFilterArgs) ToGetQueryQuickPicksFilterOutputWithContext(ctx context.Context) GetQueryQuickPicksFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryQuickPicksFilterOutput)
}

// GetQueryQuickPicksFilterArrayInput is an input type that accepts GetQueryQuickPicksFilterArray and GetQueryQuickPicksFilterArrayOutput values.
// You can construct a concrete instance of `GetQueryQuickPicksFilterArrayInput` via:
//
//	GetQueryQuickPicksFilterArray{ GetQueryQuickPicksFilterArgs{...} }
type GetQueryQuickPicksFilterArrayInput interface {
	pulumi.Input

	ToGetQueryQuickPicksFilterArrayOutput() GetQueryQuickPicksFilterArrayOutput
	ToGetQueryQuickPicksFilterArrayOutputWithContext(context.Context) GetQueryQuickPicksFilterArrayOutput
}

type GetQueryQuickPicksFilterArray []GetQueryQuickPicksFilterInput

func (GetQueryQuickPicksFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryQuickPicksFilter)(nil)).Elem()
}

func (i GetQueryQuickPicksFilterArray) ToGetQueryQuickPicksFilterArrayOutput() GetQueryQuickPicksFilterArrayOutput {
	return i.ToGetQueryQuickPicksFilterArrayOutputWithContext(context.Background())
}

func (i GetQueryQuickPicksFilterArray) ToGetQueryQuickPicksFilterArrayOutputWithContext(ctx context.Context) GetQueryQuickPicksFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryQuickPicksFilterArrayOutput)
}

type GetQueryQuickPicksFilterOutput struct{ *pulumi.OutputState }

func (GetQueryQuickPicksFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryQuickPicksFilter)(nil)).Elem()
}

func (o GetQueryQuickPicksFilterOutput) ToGetQueryQuickPicksFilterOutput() GetQueryQuickPicksFilterOutput {
	return o
}

func (o GetQueryQuickPicksFilterOutput) ToGetQueryQuickPicksFilterOutputWithContext(ctx context.Context) GetQueryQuickPicksFilterOutput {
	return o
}

func (o GetQueryQuickPicksFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryQuickPicksFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetQueryQuickPicksFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetQueryQuickPicksFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetQueryQuickPicksFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetQueryQuickPicksFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetQueryQuickPicksFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQueryQuickPicksFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryQuickPicksFilter)(nil)).Elem()
}

func (o GetQueryQuickPicksFilterArrayOutput) ToGetQueryQuickPicksFilterArrayOutput() GetQueryQuickPicksFilterArrayOutput {
	return o
}

func (o GetQueryQuickPicksFilterArrayOutput) ToGetQueryQuickPicksFilterArrayOutputWithContext(ctx context.Context) GetQueryQuickPicksFilterArrayOutput {
	return o
}

func (o GetQueryQuickPicksFilterArrayOutput) Index(i pulumi.IntInput) GetQueryQuickPicksFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQueryQuickPicksFilter {
		return vs[0].([]GetQueryQuickPicksFilter)[vs[1].(int)]
	}).(GetQueryQuickPicksFilterOutput)
}

type GetQueryQuickPicksQuickPick struct {
	// Quick Pick name for the query.
	QuickPickName *string `pulumi:"quickPickName"`
	// Query for the Quick Pick.
	QuickPickQuery *string `pulumi:"quickPickQuery"`
}

// GetQueryQuickPicksQuickPickInput is an input type that accepts GetQueryQuickPicksQuickPickArgs and GetQueryQuickPicksQuickPickOutput values.
// You can construct a concrete instance of `GetQueryQuickPicksQuickPickInput` via:
//
//	GetQueryQuickPicksQuickPickArgs{...}
type GetQueryQuickPicksQuickPickInput interface {
	pulumi.Input

	ToGetQueryQuickPicksQuickPickOutput() GetQueryQuickPicksQuickPickOutput
	ToGetQueryQuickPicksQuickPickOutputWithContext(context.Context) GetQueryQuickPicksQuickPickOutput
}

type GetQueryQuickPicksQuickPickArgs struct {
	// Quick Pick name for the query.
	QuickPickName pulumi.StringPtrInput `pulumi:"quickPickName"`
	// Query for the Quick Pick.
	QuickPickQuery pulumi.StringPtrInput `pulumi:"quickPickQuery"`
}

func (GetQueryQuickPicksQuickPickArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryQuickPicksQuickPick)(nil)).Elem()
}

func (i GetQueryQuickPicksQuickPickArgs) ToGetQueryQuickPicksQuickPickOutput() GetQueryQuickPicksQuickPickOutput {
	return i.ToGetQueryQuickPicksQuickPickOutputWithContext(context.Background())
}

func (i GetQueryQuickPicksQuickPickArgs) ToGetQueryQuickPicksQuickPickOutputWithContext(ctx context.Context) GetQueryQuickPicksQuickPickOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryQuickPicksQuickPickOutput)
}

// GetQueryQuickPicksQuickPickArrayInput is an input type that accepts GetQueryQuickPicksQuickPickArray and GetQueryQuickPicksQuickPickArrayOutput values.
// You can construct a concrete instance of `GetQueryQuickPicksQuickPickArrayInput` via:
//
//	GetQueryQuickPicksQuickPickArray{ GetQueryQuickPicksQuickPickArgs{...} }
type GetQueryQuickPicksQuickPickArrayInput interface {
	pulumi.Input

	ToGetQueryQuickPicksQuickPickArrayOutput() GetQueryQuickPicksQuickPickArrayOutput
	ToGetQueryQuickPicksQuickPickArrayOutputWithContext(context.Context) GetQueryQuickPicksQuickPickArrayOutput
}

type GetQueryQuickPicksQuickPickArray []GetQueryQuickPicksQuickPickInput

func (GetQueryQuickPicksQuickPickArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryQuickPicksQuickPick)(nil)).Elem()
}

func (i GetQueryQuickPicksQuickPickArray) ToGetQueryQuickPicksQuickPickArrayOutput() GetQueryQuickPicksQuickPickArrayOutput {
	return i.ToGetQueryQuickPicksQuickPickArrayOutputWithContext(context.Background())
}

func (i GetQueryQuickPicksQuickPickArray) ToGetQueryQuickPicksQuickPickArrayOutputWithContext(ctx context.Context) GetQueryQuickPicksQuickPickArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQueryQuickPicksQuickPickArrayOutput)
}

type GetQueryQuickPicksQuickPickOutput struct{ *pulumi.OutputState }

func (GetQueryQuickPicksQuickPickOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryQuickPicksQuickPick)(nil)).Elem()
}

func (o GetQueryQuickPicksQuickPickOutput) ToGetQueryQuickPicksQuickPickOutput() GetQueryQuickPicksQuickPickOutput {
	return o
}

func (o GetQueryQuickPicksQuickPickOutput) ToGetQueryQuickPicksQuickPickOutputWithContext(ctx context.Context) GetQueryQuickPicksQuickPickOutput {
	return o
}

// Quick Pick name for the query.
func (o GetQueryQuickPicksQuickPickOutput) QuickPickName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQueryQuickPicksQuickPick) *string { return v.QuickPickName }).(pulumi.StringPtrOutput)
}

// Query for the Quick Pick.
func (o GetQueryQuickPicksQuickPickOutput) QuickPickQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQueryQuickPicksQuickPick) *string { return v.QuickPickQuery }).(pulumi.StringPtrOutput)
}

type GetQueryQuickPicksQuickPickArrayOutput struct{ *pulumi.OutputState }

func (GetQueryQuickPicksQuickPickArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQueryQuickPicksQuickPick)(nil)).Elem()
}

func (o GetQueryQuickPicksQuickPickArrayOutput) ToGetQueryQuickPicksQuickPickArrayOutput() GetQueryQuickPicksQuickPickArrayOutput {
	return o
}

func (o GetQueryQuickPicksQuickPickArrayOutput) ToGetQueryQuickPicksQuickPickArrayOutputWithContext(ctx context.Context) GetQueryQuickPicksQuickPickArrayOutput {
	return o
}

func (o GetQueryQuickPicksQuickPickArrayOutput) Index(i pulumi.IntInput) GetQueryQuickPicksQuickPickOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQueryQuickPicksQuickPick {
		return vs[0].([]GetQueryQuickPicksQuickPick)[vs[1].(int)]
	}).(GetQueryQuickPicksQuickPickOutput)
}

type GetTraceAggregatedSnapshotDataDetail struct {
	// Name of the property.
	Key *string `pulumi:"key"`
	// Value of the property.
	Value *string `pulumi:"value"`
}

// GetTraceAggregatedSnapshotDataDetailInput is an input type that accepts GetTraceAggregatedSnapshotDataDetailArgs and GetTraceAggregatedSnapshotDataDetailOutput values.
// You can construct a concrete instance of `GetTraceAggregatedSnapshotDataDetailInput` via:
//
//	GetTraceAggregatedSnapshotDataDetailArgs{...}
type GetTraceAggregatedSnapshotDataDetailInput interface {
	pulumi.Input

	ToGetTraceAggregatedSnapshotDataDetailOutput() GetTraceAggregatedSnapshotDataDetailOutput
	ToGetTraceAggregatedSnapshotDataDetailOutputWithContext(context.Context) GetTraceAggregatedSnapshotDataDetailOutput
}

type GetTraceAggregatedSnapshotDataDetailArgs struct {
	// Name of the property.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of the property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetTraceAggregatedSnapshotDataDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceAggregatedSnapshotDataDetail)(nil)).Elem()
}

func (i GetTraceAggregatedSnapshotDataDetailArgs) ToGetTraceAggregatedSnapshotDataDetailOutput() GetTraceAggregatedSnapshotDataDetailOutput {
	return i.ToGetTraceAggregatedSnapshotDataDetailOutputWithContext(context.Background())
}

func (i GetTraceAggregatedSnapshotDataDetailArgs) ToGetTraceAggregatedSnapshotDataDetailOutputWithContext(ctx context.Context) GetTraceAggregatedSnapshotDataDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceAggregatedSnapshotDataDetailOutput)
}

// GetTraceAggregatedSnapshotDataDetailArrayInput is an input type that accepts GetTraceAggregatedSnapshotDataDetailArray and GetTraceAggregatedSnapshotDataDetailArrayOutput values.
// You can construct a concrete instance of `GetTraceAggregatedSnapshotDataDetailArrayInput` via:
//
//	GetTraceAggregatedSnapshotDataDetailArray{ GetTraceAggregatedSnapshotDataDetailArgs{...} }
type GetTraceAggregatedSnapshotDataDetailArrayInput interface {
	pulumi.Input

	ToGetTraceAggregatedSnapshotDataDetailArrayOutput() GetTraceAggregatedSnapshotDataDetailArrayOutput
	ToGetTraceAggregatedSnapshotDataDetailArrayOutputWithContext(context.Context) GetTraceAggregatedSnapshotDataDetailArrayOutput
}

type GetTraceAggregatedSnapshotDataDetailArray []GetTraceAggregatedSnapshotDataDetailInput

func (GetTraceAggregatedSnapshotDataDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceAggregatedSnapshotDataDetail)(nil)).Elem()
}

func (i GetTraceAggregatedSnapshotDataDetailArray) ToGetTraceAggregatedSnapshotDataDetailArrayOutput() GetTraceAggregatedSnapshotDataDetailArrayOutput {
	return i.ToGetTraceAggregatedSnapshotDataDetailArrayOutputWithContext(context.Background())
}

func (i GetTraceAggregatedSnapshotDataDetailArray) ToGetTraceAggregatedSnapshotDataDetailArrayOutputWithContext(ctx context.Context) GetTraceAggregatedSnapshotDataDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceAggregatedSnapshotDataDetailArrayOutput)
}

type GetTraceAggregatedSnapshotDataDetailOutput struct{ *pulumi.OutputState }

func (GetTraceAggregatedSnapshotDataDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceAggregatedSnapshotDataDetail)(nil)).Elem()
}

func (o GetTraceAggregatedSnapshotDataDetailOutput) ToGetTraceAggregatedSnapshotDataDetailOutput() GetTraceAggregatedSnapshotDataDetailOutput {
	return o
}

func (o GetTraceAggregatedSnapshotDataDetailOutput) ToGetTraceAggregatedSnapshotDataDetailOutputWithContext(ctx context.Context) GetTraceAggregatedSnapshotDataDetailOutput {
	return o
}

// Name of the property.
func (o GetTraceAggregatedSnapshotDataDetailOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceAggregatedSnapshotDataDetail) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of the property.
func (o GetTraceAggregatedSnapshotDataDetailOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceAggregatedSnapshotDataDetail) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetTraceAggregatedSnapshotDataDetailArrayOutput struct{ *pulumi.OutputState }

func (GetTraceAggregatedSnapshotDataDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceAggregatedSnapshotDataDetail)(nil)).Elem()
}

func (o GetTraceAggregatedSnapshotDataDetailArrayOutput) ToGetTraceAggregatedSnapshotDataDetailArrayOutput() GetTraceAggregatedSnapshotDataDetailArrayOutput {
	return o
}

func (o GetTraceAggregatedSnapshotDataDetailArrayOutput) ToGetTraceAggregatedSnapshotDataDetailArrayOutputWithContext(ctx context.Context) GetTraceAggregatedSnapshotDataDetailArrayOutput {
	return o
}

func (o GetTraceAggregatedSnapshotDataDetailArrayOutput) Index(i pulumi.IntInput) GetTraceAggregatedSnapshotDataDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceAggregatedSnapshotDataDetail {
		return vs[0].([]GetTraceAggregatedSnapshotDataDetail)[vs[1].(int)]
	}).(GetTraceAggregatedSnapshotDataDetailOutput)
}

type GetTraceServiceSummary struct {
	// Number of spans with errors for serviceName in the trace.
	ErrorSpans *string `pulumi:"errorSpans"`
	// Name associated with the service.
	SpanServiceName *string `pulumi:"spanServiceName"`
	// Number of spans for serviceName in the trace.
	TotalSpans *string `pulumi:"totalSpans"`
}

// GetTraceServiceSummaryInput is an input type that accepts GetTraceServiceSummaryArgs and GetTraceServiceSummaryOutput values.
// You can construct a concrete instance of `GetTraceServiceSummaryInput` via:
//
//	GetTraceServiceSummaryArgs{...}
type GetTraceServiceSummaryInput interface {
	pulumi.Input

	ToGetTraceServiceSummaryOutput() GetTraceServiceSummaryOutput
	ToGetTraceServiceSummaryOutputWithContext(context.Context) GetTraceServiceSummaryOutput
}

type GetTraceServiceSummaryArgs struct {
	// Number of spans with errors for serviceName in the trace.
	ErrorSpans pulumi.StringPtrInput `pulumi:"errorSpans"`
	// Name associated with the service.
	SpanServiceName pulumi.StringPtrInput `pulumi:"spanServiceName"`
	// Number of spans for serviceName in the trace.
	TotalSpans pulumi.StringPtrInput `pulumi:"totalSpans"`
}

func (GetTraceServiceSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceServiceSummary)(nil)).Elem()
}

func (i GetTraceServiceSummaryArgs) ToGetTraceServiceSummaryOutput() GetTraceServiceSummaryOutput {
	return i.ToGetTraceServiceSummaryOutputWithContext(context.Background())
}

func (i GetTraceServiceSummaryArgs) ToGetTraceServiceSummaryOutputWithContext(ctx context.Context) GetTraceServiceSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceServiceSummaryOutput)
}

// GetTraceServiceSummaryArrayInput is an input type that accepts GetTraceServiceSummaryArray and GetTraceServiceSummaryArrayOutput values.
// You can construct a concrete instance of `GetTraceServiceSummaryArrayInput` via:
//
//	GetTraceServiceSummaryArray{ GetTraceServiceSummaryArgs{...} }
type GetTraceServiceSummaryArrayInput interface {
	pulumi.Input

	ToGetTraceServiceSummaryArrayOutput() GetTraceServiceSummaryArrayOutput
	ToGetTraceServiceSummaryArrayOutputWithContext(context.Context) GetTraceServiceSummaryArrayOutput
}

type GetTraceServiceSummaryArray []GetTraceServiceSummaryInput

func (GetTraceServiceSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceServiceSummary)(nil)).Elem()
}

func (i GetTraceServiceSummaryArray) ToGetTraceServiceSummaryArrayOutput() GetTraceServiceSummaryArrayOutput {
	return i.ToGetTraceServiceSummaryArrayOutputWithContext(context.Background())
}

func (i GetTraceServiceSummaryArray) ToGetTraceServiceSummaryArrayOutputWithContext(ctx context.Context) GetTraceServiceSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceServiceSummaryArrayOutput)
}

type GetTraceServiceSummaryOutput struct{ *pulumi.OutputState }

func (GetTraceServiceSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceServiceSummary)(nil)).Elem()
}

func (o GetTraceServiceSummaryOutput) ToGetTraceServiceSummaryOutput() GetTraceServiceSummaryOutput {
	return o
}

func (o GetTraceServiceSummaryOutput) ToGetTraceServiceSummaryOutputWithContext(ctx context.Context) GetTraceServiceSummaryOutput {
	return o
}

// Number of spans with errors for serviceName in the trace.
func (o GetTraceServiceSummaryOutput) ErrorSpans() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceServiceSummary) *string { return v.ErrorSpans }).(pulumi.StringPtrOutput)
}

// Name associated with the service.
func (o GetTraceServiceSummaryOutput) SpanServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceServiceSummary) *string { return v.SpanServiceName }).(pulumi.StringPtrOutput)
}

// Number of spans for serviceName in the trace.
func (o GetTraceServiceSummaryOutput) TotalSpans() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceServiceSummary) *string { return v.TotalSpans }).(pulumi.StringPtrOutput)
}

type GetTraceServiceSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetTraceServiceSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceServiceSummary)(nil)).Elem()
}

func (o GetTraceServiceSummaryArrayOutput) ToGetTraceServiceSummaryArrayOutput() GetTraceServiceSummaryArrayOutput {
	return o
}

func (o GetTraceServiceSummaryArrayOutput) ToGetTraceServiceSummaryArrayOutputWithContext(ctx context.Context) GetTraceServiceSummaryArrayOutput {
	return o
}

func (o GetTraceServiceSummaryArrayOutput) Index(i pulumi.IntInput) GetTraceServiceSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceServiceSummary {
		return vs[0].([]GetTraceServiceSummary)[vs[1].(int)]
	}).(GetTraceServiceSummaryOutput)
}

type GetTraceSnapshotDataTraceSnapshotDetail struct {
	// Name of the property.
	Key *string `pulumi:"key"`
	// Value of the property.
	Value *string `pulumi:"value"`
}

// GetTraceSnapshotDataTraceSnapshotDetailInput is an input type that accepts GetTraceSnapshotDataTraceSnapshotDetailArgs and GetTraceSnapshotDataTraceSnapshotDetailOutput values.
// You can construct a concrete instance of `GetTraceSnapshotDataTraceSnapshotDetailInput` via:
//
//	GetTraceSnapshotDataTraceSnapshotDetailArgs{...}
type GetTraceSnapshotDataTraceSnapshotDetailInput interface {
	pulumi.Input

	ToGetTraceSnapshotDataTraceSnapshotDetailOutput() GetTraceSnapshotDataTraceSnapshotDetailOutput
	ToGetTraceSnapshotDataTraceSnapshotDetailOutputWithContext(context.Context) GetTraceSnapshotDataTraceSnapshotDetailOutput
}

type GetTraceSnapshotDataTraceSnapshotDetailArgs struct {
	// Name of the property.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of the property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetTraceSnapshotDataTraceSnapshotDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSnapshotDataTraceSnapshotDetail)(nil)).Elem()
}

func (i GetTraceSnapshotDataTraceSnapshotDetailArgs) ToGetTraceSnapshotDataTraceSnapshotDetailOutput() GetTraceSnapshotDataTraceSnapshotDetailOutput {
	return i.ToGetTraceSnapshotDataTraceSnapshotDetailOutputWithContext(context.Background())
}

func (i GetTraceSnapshotDataTraceSnapshotDetailArgs) ToGetTraceSnapshotDataTraceSnapshotDetailOutputWithContext(ctx context.Context) GetTraceSnapshotDataTraceSnapshotDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSnapshotDataTraceSnapshotDetailOutput)
}

// GetTraceSnapshotDataTraceSnapshotDetailArrayInput is an input type that accepts GetTraceSnapshotDataTraceSnapshotDetailArray and GetTraceSnapshotDataTraceSnapshotDetailArrayOutput values.
// You can construct a concrete instance of `GetTraceSnapshotDataTraceSnapshotDetailArrayInput` via:
//
//	GetTraceSnapshotDataTraceSnapshotDetailArray{ GetTraceSnapshotDataTraceSnapshotDetailArgs{...} }
type GetTraceSnapshotDataTraceSnapshotDetailArrayInput interface {
	pulumi.Input

	ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutput() GetTraceSnapshotDataTraceSnapshotDetailArrayOutput
	ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutputWithContext(context.Context) GetTraceSnapshotDataTraceSnapshotDetailArrayOutput
}

type GetTraceSnapshotDataTraceSnapshotDetailArray []GetTraceSnapshotDataTraceSnapshotDetailInput

func (GetTraceSnapshotDataTraceSnapshotDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSnapshotDataTraceSnapshotDetail)(nil)).Elem()
}

func (i GetTraceSnapshotDataTraceSnapshotDetailArray) ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutput() GetTraceSnapshotDataTraceSnapshotDetailArrayOutput {
	return i.ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutputWithContext(context.Background())
}

func (i GetTraceSnapshotDataTraceSnapshotDetailArray) ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutputWithContext(ctx context.Context) GetTraceSnapshotDataTraceSnapshotDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSnapshotDataTraceSnapshotDetailArrayOutput)
}

type GetTraceSnapshotDataTraceSnapshotDetailOutput struct{ *pulumi.OutputState }

func (GetTraceSnapshotDataTraceSnapshotDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSnapshotDataTraceSnapshotDetail)(nil)).Elem()
}

func (o GetTraceSnapshotDataTraceSnapshotDetailOutput) ToGetTraceSnapshotDataTraceSnapshotDetailOutput() GetTraceSnapshotDataTraceSnapshotDetailOutput {
	return o
}

func (o GetTraceSnapshotDataTraceSnapshotDetailOutput) ToGetTraceSnapshotDataTraceSnapshotDetailOutputWithContext(ctx context.Context) GetTraceSnapshotDataTraceSnapshotDetailOutput {
	return o
}

// Name of the property.
func (o GetTraceSnapshotDataTraceSnapshotDetailOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSnapshotDataTraceSnapshotDetail) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of the property.
func (o GetTraceSnapshotDataTraceSnapshotDetailOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSnapshotDataTraceSnapshotDetail) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetTraceSnapshotDataTraceSnapshotDetailArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSnapshotDataTraceSnapshotDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSnapshotDataTraceSnapshotDetail)(nil)).Elem()
}

func (o GetTraceSnapshotDataTraceSnapshotDetailArrayOutput) ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutput() GetTraceSnapshotDataTraceSnapshotDetailArrayOutput {
	return o
}

func (o GetTraceSnapshotDataTraceSnapshotDetailArrayOutput) ToGetTraceSnapshotDataTraceSnapshotDetailArrayOutputWithContext(ctx context.Context) GetTraceSnapshotDataTraceSnapshotDetailArrayOutput {
	return o
}

func (o GetTraceSnapshotDataTraceSnapshotDetailArrayOutput) Index(i pulumi.IntInput) GetTraceSnapshotDataTraceSnapshotDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSnapshotDataTraceSnapshotDetail {
		return vs[0].([]GetTraceSnapshotDataTraceSnapshotDetail)[vs[1].(int)]
	}).(GetTraceSnapshotDataTraceSnapshotDetailOutput)
}

type GetTraceSpan struct {
	// Total span duration in milliseconds.
	DurationInMs *string `pulumi:"durationInMs"`
	// Indicates if the span has an error.
	IsError *bool `pulumi:"isError"`
	// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
	Key *string `pulumi:"key"`
	// Kind associated with the span.
	Kind *string `pulumi:"kind"`
	// List of logs associated with the span.
	Logs []GetTraceSpanLog `pulumi:"logs"`
	// Span name associated with the trace.  This is usually the method or URI of the request.
	OperationName *string `pulumi:"operationName"`
	// Unique parent identifier for the span if one exists. For root spans this will be null.
	ParentSpanKey *string `pulumi:"parentSpanKey"`
	// Service name associated with the span.
	ServiceName *string `pulumi:"serviceName"`
	// List of tags associated with the span.
	Tags []GetTraceSpanTag `pulumi:"tags"`
	// Span end time.  Timestamp when the span was completed.
	TimeEnded *string `pulumi:"timeEnded"`
	// Span start time.  Timestamp when the span was started.
	TimeStarted *string `pulumi:"timeStarted"`
	// Unique Application Performance Monitoring trace identifier (traceId).
	TraceKey *string `pulumi:"traceKey"`
}

// GetTraceSpanInput is an input type that accepts GetTraceSpanArgs and GetTraceSpanOutput values.
// You can construct a concrete instance of `GetTraceSpanInput` via:
//
//	GetTraceSpanArgs{...}
type GetTraceSpanInput interface {
	pulumi.Input

	ToGetTraceSpanOutput() GetTraceSpanOutput
	ToGetTraceSpanOutputWithContext(context.Context) GetTraceSpanOutput
}

type GetTraceSpanArgs struct {
	// Total span duration in milliseconds.
	DurationInMs pulumi.StringPtrInput `pulumi:"durationInMs"`
	// Indicates if the span has an error.
	IsError pulumi.BoolPtrInput `pulumi:"isError"`
	// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Kind associated with the span.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of logs associated with the span.
	Logs GetTraceSpanLogArrayInput `pulumi:"logs"`
	// Span name associated with the trace.  This is usually the method or URI of the request.
	OperationName pulumi.StringPtrInput `pulumi:"operationName"`
	// Unique parent identifier for the span if one exists. For root spans this will be null.
	ParentSpanKey pulumi.StringPtrInput `pulumi:"parentSpanKey"`
	// Service name associated with the span.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// List of tags associated with the span.
	Tags GetTraceSpanTagArrayInput `pulumi:"tags"`
	// Span end time.  Timestamp when the span was completed.
	TimeEnded pulumi.StringPtrInput `pulumi:"timeEnded"`
	// Span start time.  Timestamp when the span was started.
	TimeStarted pulumi.StringPtrInput `pulumi:"timeStarted"`
	// Unique Application Performance Monitoring trace identifier (traceId).
	TraceKey pulumi.StringPtrInput `pulumi:"traceKey"`
}

func (GetTraceSpanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpan)(nil)).Elem()
}

func (i GetTraceSpanArgs) ToGetTraceSpanOutput() GetTraceSpanOutput {
	return i.ToGetTraceSpanOutputWithContext(context.Background())
}

func (i GetTraceSpanArgs) ToGetTraceSpanOutputWithContext(ctx context.Context) GetTraceSpanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanOutput)
}

// GetTraceSpanArrayInput is an input type that accepts GetTraceSpanArray and GetTraceSpanArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanArrayInput` via:
//
//	GetTraceSpanArray{ GetTraceSpanArgs{...} }
type GetTraceSpanArrayInput interface {
	pulumi.Input

	ToGetTraceSpanArrayOutput() GetTraceSpanArrayOutput
	ToGetTraceSpanArrayOutputWithContext(context.Context) GetTraceSpanArrayOutput
}

type GetTraceSpanArray []GetTraceSpanInput

func (GetTraceSpanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpan)(nil)).Elem()
}

func (i GetTraceSpanArray) ToGetTraceSpanArrayOutput() GetTraceSpanArrayOutput {
	return i.ToGetTraceSpanArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanArray) ToGetTraceSpanArrayOutputWithContext(ctx context.Context) GetTraceSpanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanArrayOutput)
}

type GetTraceSpanOutput struct{ *pulumi.OutputState }

func (GetTraceSpanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpan)(nil)).Elem()
}

func (o GetTraceSpanOutput) ToGetTraceSpanOutput() GetTraceSpanOutput {
	return o
}

func (o GetTraceSpanOutput) ToGetTraceSpanOutputWithContext(ctx context.Context) GetTraceSpanOutput {
	return o
}

// Total span duration in milliseconds.
func (o GetTraceSpanOutput) DurationInMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.DurationInMs }).(pulumi.StringPtrOutput)
}

// Indicates if the span has an error.
func (o GetTraceSpanOutput) IsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *bool { return v.IsError }).(pulumi.BoolPtrOutput)
}

// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
func (o GetTraceSpanOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Kind associated with the span.
func (o GetTraceSpanOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of logs associated with the span.
func (o GetTraceSpanOutput) Logs() GetTraceSpanLogArrayOutput {
	return o.ApplyT(func(v GetTraceSpan) []GetTraceSpanLog { return v.Logs }).(GetTraceSpanLogArrayOutput)
}

// Span name associated with the trace.  This is usually the method or URI of the request.
func (o GetTraceSpanOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// Unique parent identifier for the span if one exists. For root spans this will be null.
func (o GetTraceSpanOutput) ParentSpanKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.ParentSpanKey }).(pulumi.StringPtrOutput)
}

// Service name associated with the span.
func (o GetTraceSpanOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// List of tags associated with the span.
func (o GetTraceSpanOutput) Tags() GetTraceSpanTagArrayOutput {
	return o.ApplyT(func(v GetTraceSpan) []GetTraceSpanTag { return v.Tags }).(GetTraceSpanTagArrayOutput)
}

// Span end time.  Timestamp when the span was completed.
func (o GetTraceSpanOutput) TimeEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.TimeEnded }).(pulumi.StringPtrOutput)
}

// Span start time.  Timestamp when the span was started.
func (o GetTraceSpanOutput) TimeStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.TimeStarted }).(pulumi.StringPtrOutput)
}

// Unique Application Performance Monitoring trace identifier (traceId).
func (o GetTraceSpanOutput) TraceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpan) *string { return v.TraceKey }).(pulumi.StringPtrOutput)
}

type GetTraceSpanArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpan)(nil)).Elem()
}

func (o GetTraceSpanArrayOutput) ToGetTraceSpanArrayOutput() GetTraceSpanArrayOutput {
	return o
}

func (o GetTraceSpanArrayOutput) ToGetTraceSpanArrayOutputWithContext(ctx context.Context) GetTraceSpanArrayOutput {
	return o
}

func (o GetTraceSpanArrayOutput) Index(i pulumi.IntInput) GetTraceSpanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpan {
		return vs[0].([]GetTraceSpan)[vs[1].(int)]
	}).(GetTraceSpanOutput)
}

type GetTraceSpanLog struct {
	// List of logs associated with the span at the given timestamp.
	SpanLogs []GetTraceSpanLogSpanLog `pulumi:"spanLogs"`
	// Timestamp at which the log is created.
	TimeCreated *string `pulumi:"timeCreated"`
}

// GetTraceSpanLogInput is an input type that accepts GetTraceSpanLogArgs and GetTraceSpanLogOutput values.
// You can construct a concrete instance of `GetTraceSpanLogInput` via:
//
//	GetTraceSpanLogArgs{...}
type GetTraceSpanLogInput interface {
	pulumi.Input

	ToGetTraceSpanLogOutput() GetTraceSpanLogOutput
	ToGetTraceSpanLogOutputWithContext(context.Context) GetTraceSpanLogOutput
}

type GetTraceSpanLogArgs struct {
	// List of logs associated with the span at the given timestamp.
	SpanLogs GetTraceSpanLogSpanLogArrayInput `pulumi:"spanLogs"`
	// Timestamp at which the log is created.
	TimeCreated pulumi.StringPtrInput `pulumi:"timeCreated"`
}

func (GetTraceSpanLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanLog)(nil)).Elem()
}

func (i GetTraceSpanLogArgs) ToGetTraceSpanLogOutput() GetTraceSpanLogOutput {
	return i.ToGetTraceSpanLogOutputWithContext(context.Background())
}

func (i GetTraceSpanLogArgs) ToGetTraceSpanLogOutputWithContext(ctx context.Context) GetTraceSpanLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanLogOutput)
}

// GetTraceSpanLogArrayInput is an input type that accepts GetTraceSpanLogArray and GetTraceSpanLogArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanLogArrayInput` via:
//
//	GetTraceSpanLogArray{ GetTraceSpanLogArgs{...} }
type GetTraceSpanLogArrayInput interface {
	pulumi.Input

	ToGetTraceSpanLogArrayOutput() GetTraceSpanLogArrayOutput
	ToGetTraceSpanLogArrayOutputWithContext(context.Context) GetTraceSpanLogArrayOutput
}

type GetTraceSpanLogArray []GetTraceSpanLogInput

func (GetTraceSpanLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanLog)(nil)).Elem()
}

func (i GetTraceSpanLogArray) ToGetTraceSpanLogArrayOutput() GetTraceSpanLogArrayOutput {
	return i.ToGetTraceSpanLogArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanLogArray) ToGetTraceSpanLogArrayOutputWithContext(ctx context.Context) GetTraceSpanLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanLogArrayOutput)
}

type GetTraceSpanLogOutput struct{ *pulumi.OutputState }

func (GetTraceSpanLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanLog)(nil)).Elem()
}

func (o GetTraceSpanLogOutput) ToGetTraceSpanLogOutput() GetTraceSpanLogOutput {
	return o
}

func (o GetTraceSpanLogOutput) ToGetTraceSpanLogOutputWithContext(ctx context.Context) GetTraceSpanLogOutput {
	return o
}

// List of logs associated with the span at the given timestamp.
func (o GetTraceSpanLogOutput) SpanLogs() GetTraceSpanLogSpanLogArrayOutput {
	return o.ApplyT(func(v GetTraceSpanLog) []GetTraceSpanLogSpanLog { return v.SpanLogs }).(GetTraceSpanLogSpanLogArrayOutput)
}

// Timestamp at which the log is created.
func (o GetTraceSpanLogOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanLog) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

type GetTraceSpanLogArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanLog)(nil)).Elem()
}

func (o GetTraceSpanLogArrayOutput) ToGetTraceSpanLogArrayOutput() GetTraceSpanLogArrayOutput {
	return o
}

func (o GetTraceSpanLogArrayOutput) ToGetTraceSpanLogArrayOutputWithContext(ctx context.Context) GetTraceSpanLogArrayOutput {
	return o
}

func (o GetTraceSpanLogArrayOutput) Index(i pulumi.IntInput) GetTraceSpanLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpanLog {
		return vs[0].([]GetTraceSpanLog)[vs[1].(int)]
	}).(GetTraceSpanLogOutput)
}

type GetTraceSpanLogSpanLog struct {
	// Key that specifies the log name.
	LogKey *string `pulumi:"logKey"`
	// Value associated with the log key.
	LogValue *string `pulumi:"logValue"`
}

// GetTraceSpanLogSpanLogInput is an input type that accepts GetTraceSpanLogSpanLogArgs and GetTraceSpanLogSpanLogOutput values.
// You can construct a concrete instance of `GetTraceSpanLogSpanLogInput` via:
//
//	GetTraceSpanLogSpanLogArgs{...}
type GetTraceSpanLogSpanLogInput interface {
	pulumi.Input

	ToGetTraceSpanLogSpanLogOutput() GetTraceSpanLogSpanLogOutput
	ToGetTraceSpanLogSpanLogOutputWithContext(context.Context) GetTraceSpanLogSpanLogOutput
}

type GetTraceSpanLogSpanLogArgs struct {
	// Key that specifies the log name.
	LogKey pulumi.StringPtrInput `pulumi:"logKey"`
	// Value associated with the log key.
	LogValue pulumi.StringPtrInput `pulumi:"logValue"`
}

func (GetTraceSpanLogSpanLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanLogSpanLog)(nil)).Elem()
}

func (i GetTraceSpanLogSpanLogArgs) ToGetTraceSpanLogSpanLogOutput() GetTraceSpanLogSpanLogOutput {
	return i.ToGetTraceSpanLogSpanLogOutputWithContext(context.Background())
}

func (i GetTraceSpanLogSpanLogArgs) ToGetTraceSpanLogSpanLogOutputWithContext(ctx context.Context) GetTraceSpanLogSpanLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanLogSpanLogOutput)
}

// GetTraceSpanLogSpanLogArrayInput is an input type that accepts GetTraceSpanLogSpanLogArray and GetTraceSpanLogSpanLogArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanLogSpanLogArrayInput` via:
//
//	GetTraceSpanLogSpanLogArray{ GetTraceSpanLogSpanLogArgs{...} }
type GetTraceSpanLogSpanLogArrayInput interface {
	pulumi.Input

	ToGetTraceSpanLogSpanLogArrayOutput() GetTraceSpanLogSpanLogArrayOutput
	ToGetTraceSpanLogSpanLogArrayOutputWithContext(context.Context) GetTraceSpanLogSpanLogArrayOutput
}

type GetTraceSpanLogSpanLogArray []GetTraceSpanLogSpanLogInput

func (GetTraceSpanLogSpanLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanLogSpanLog)(nil)).Elem()
}

func (i GetTraceSpanLogSpanLogArray) ToGetTraceSpanLogSpanLogArrayOutput() GetTraceSpanLogSpanLogArrayOutput {
	return i.ToGetTraceSpanLogSpanLogArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanLogSpanLogArray) ToGetTraceSpanLogSpanLogArrayOutputWithContext(ctx context.Context) GetTraceSpanLogSpanLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanLogSpanLogArrayOutput)
}

type GetTraceSpanLogSpanLogOutput struct{ *pulumi.OutputState }

func (GetTraceSpanLogSpanLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanLogSpanLog)(nil)).Elem()
}

func (o GetTraceSpanLogSpanLogOutput) ToGetTraceSpanLogSpanLogOutput() GetTraceSpanLogSpanLogOutput {
	return o
}

func (o GetTraceSpanLogSpanLogOutput) ToGetTraceSpanLogSpanLogOutputWithContext(ctx context.Context) GetTraceSpanLogSpanLogOutput {
	return o
}

// Key that specifies the log name.
func (o GetTraceSpanLogSpanLogOutput) LogKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanLogSpanLog) *string { return v.LogKey }).(pulumi.StringPtrOutput)
}

// Value associated with the log key.
func (o GetTraceSpanLogSpanLogOutput) LogValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanLogSpanLog) *string { return v.LogValue }).(pulumi.StringPtrOutput)
}

type GetTraceSpanLogSpanLogArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanLogSpanLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanLogSpanLog)(nil)).Elem()
}

func (o GetTraceSpanLogSpanLogArrayOutput) ToGetTraceSpanLogSpanLogArrayOutput() GetTraceSpanLogSpanLogArrayOutput {
	return o
}

func (o GetTraceSpanLogSpanLogArrayOutput) ToGetTraceSpanLogSpanLogArrayOutputWithContext(ctx context.Context) GetTraceSpanLogSpanLogArrayOutput {
	return o
}

func (o GetTraceSpanLogSpanLogArrayOutput) Index(i pulumi.IntInput) GetTraceSpanLogSpanLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpanLogSpanLog {
		return vs[0].([]GetTraceSpanLogSpanLog)[vs[1].(int)]
	}).(GetTraceSpanLogSpanLogOutput)
}

type GetTraceSpanSummary struct {
	// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
	ErrorSpanCount *int `pulumi:"errorSpanCount"`
	// Boolean flag that indicates whether the trace has an error.
	IsFault *bool `pulumi:"isFault"`
	// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
	Key *string `pulumi:"key"`
	// Time taken for the root span operation to complete in milliseconds.
	RootSpanDurationInMs *int `pulumi:"rootSpanDurationInMs"`
	// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
	RootSpanOperationName *string `pulumi:"rootSpanOperationName"`
	// Service associated with the trace.
	RootSpanServiceName *string `pulumi:"rootSpanServiceName"`
	// A summary of the spans by service.
	ServiceSummaries []GetTraceSpanSummaryServiceSummary `pulumi:"serviceSummaries"`
	// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
	SpanCount *int `pulumi:"spanCount"`
	// Start time of the earliest span in the span collection.
	TimeEarliestSpanStarted *string `pulumi:"timeEarliestSpanStarted"`
	// End time of the span that most recently ended in the span collection.
	TimeLatestSpanEnded *string `pulumi:"timeLatestSpanEnded"`
	// End time of the root span for the span collection.
	TimeRootSpanEnded *string `pulumi:"timeRootSpanEnded"`
	// Start time of the root span for the span collection.
	TimeRootSpanStarted *string `pulumi:"timeRootSpanStarted"`
	// Time between the start of the earliest span and the end of the most recent span in milliseconds.
	TraceDurationInMs *int `pulumi:"traceDurationInMs"`
	// Error code of the trace.
	TraceErrorCode *string `pulumi:"traceErrorCode"`
	// Error type of the trace.
	TraceErrorType *string `pulumi:"traceErrorType"`
	// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
	TraceStatus *string `pulumi:"traceStatus"`
}

// GetTraceSpanSummaryInput is an input type that accepts GetTraceSpanSummaryArgs and GetTraceSpanSummaryOutput values.
// You can construct a concrete instance of `GetTraceSpanSummaryInput` via:
//
//	GetTraceSpanSummaryArgs{...}
type GetTraceSpanSummaryInput interface {
	pulumi.Input

	ToGetTraceSpanSummaryOutput() GetTraceSpanSummaryOutput
	ToGetTraceSpanSummaryOutputWithContext(context.Context) GetTraceSpanSummaryOutput
}

type GetTraceSpanSummaryArgs struct {
	// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
	ErrorSpanCount pulumi.IntPtrInput `pulumi:"errorSpanCount"`
	// Boolean flag that indicates whether the trace has an error.
	IsFault pulumi.BoolPtrInput `pulumi:"isFault"`
	// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Time taken for the root span operation to complete in milliseconds.
	RootSpanDurationInMs pulumi.IntPtrInput `pulumi:"rootSpanDurationInMs"`
	// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
	RootSpanOperationName pulumi.StringPtrInput `pulumi:"rootSpanOperationName"`
	// Service associated with the trace.
	RootSpanServiceName pulumi.StringPtrInput `pulumi:"rootSpanServiceName"`
	// A summary of the spans by service.
	ServiceSummaries GetTraceSpanSummaryServiceSummaryArrayInput `pulumi:"serviceSummaries"`
	// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
	SpanCount pulumi.IntPtrInput `pulumi:"spanCount"`
	// Start time of the earliest span in the span collection.
	TimeEarliestSpanStarted pulumi.StringPtrInput `pulumi:"timeEarliestSpanStarted"`
	// End time of the span that most recently ended in the span collection.
	TimeLatestSpanEnded pulumi.StringPtrInput `pulumi:"timeLatestSpanEnded"`
	// End time of the root span for the span collection.
	TimeRootSpanEnded pulumi.StringPtrInput `pulumi:"timeRootSpanEnded"`
	// Start time of the root span for the span collection.
	TimeRootSpanStarted pulumi.StringPtrInput `pulumi:"timeRootSpanStarted"`
	// Time between the start of the earliest span and the end of the most recent span in milliseconds.
	TraceDurationInMs pulumi.IntPtrInput `pulumi:"traceDurationInMs"`
	// Error code of the trace.
	TraceErrorCode pulumi.StringPtrInput `pulumi:"traceErrorCode"`
	// Error type of the trace.
	TraceErrorType pulumi.StringPtrInput `pulumi:"traceErrorType"`
	// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
	TraceStatus pulumi.StringPtrInput `pulumi:"traceStatus"`
}

func (GetTraceSpanSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanSummary)(nil)).Elem()
}

func (i GetTraceSpanSummaryArgs) ToGetTraceSpanSummaryOutput() GetTraceSpanSummaryOutput {
	return i.ToGetTraceSpanSummaryOutputWithContext(context.Background())
}

func (i GetTraceSpanSummaryArgs) ToGetTraceSpanSummaryOutputWithContext(ctx context.Context) GetTraceSpanSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanSummaryOutput)
}

// GetTraceSpanSummaryArrayInput is an input type that accepts GetTraceSpanSummaryArray and GetTraceSpanSummaryArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanSummaryArrayInput` via:
//
//	GetTraceSpanSummaryArray{ GetTraceSpanSummaryArgs{...} }
type GetTraceSpanSummaryArrayInput interface {
	pulumi.Input

	ToGetTraceSpanSummaryArrayOutput() GetTraceSpanSummaryArrayOutput
	ToGetTraceSpanSummaryArrayOutputWithContext(context.Context) GetTraceSpanSummaryArrayOutput
}

type GetTraceSpanSummaryArray []GetTraceSpanSummaryInput

func (GetTraceSpanSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanSummary)(nil)).Elem()
}

func (i GetTraceSpanSummaryArray) ToGetTraceSpanSummaryArrayOutput() GetTraceSpanSummaryArrayOutput {
	return i.ToGetTraceSpanSummaryArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanSummaryArray) ToGetTraceSpanSummaryArrayOutputWithContext(ctx context.Context) GetTraceSpanSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanSummaryArrayOutput)
}

type GetTraceSpanSummaryOutput struct{ *pulumi.OutputState }

func (GetTraceSpanSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanSummary)(nil)).Elem()
}

func (o GetTraceSpanSummaryOutput) ToGetTraceSpanSummaryOutput() GetTraceSpanSummaryOutput {
	return o
}

func (o GetTraceSpanSummaryOutput) ToGetTraceSpanSummaryOutputWithContext(ctx context.Context) GetTraceSpanSummaryOutput {
	return o
}

// The number of spans with errors that have been processed by the system for the trace. Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
func (o GetTraceSpanSummaryOutput) ErrorSpanCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *int { return v.ErrorSpanCount }).(pulumi.IntPtrOutput)
}

// Boolean flag that indicates whether the trace has an error.
func (o GetTraceSpanSummaryOutput) IsFault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *bool { return v.IsFault }).(pulumi.BoolPtrOutput)
}

// Unique identifier (spanId) for the span.  Note that this field is defined as spanKey in the API and it maps to the spanId in the trace data in Application Performance Monitoring.
func (o GetTraceSpanSummaryOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Time taken for the root span operation to complete in milliseconds.
func (o GetTraceSpanSummaryOutput) RootSpanDurationInMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *int { return v.RootSpanDurationInMs }).(pulumi.IntPtrOutput)
}

// Root span name associated with the trace. This is the flow start operation name. Null is displayed if the root span is not yet completed.
func (o GetTraceSpanSummaryOutput) RootSpanOperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.RootSpanOperationName }).(pulumi.StringPtrOutput)
}

// Service associated with the trace.
func (o GetTraceSpanSummaryOutput) RootSpanServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.RootSpanServiceName }).(pulumi.StringPtrOutput)
}

// A summary of the spans by service.
func (o GetTraceSpanSummaryOutput) ServiceSummaries() GetTraceSpanSummaryServiceSummaryArrayOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) []GetTraceSpanSummaryServiceSummary { return v.ServiceSummaries }).(GetTraceSpanSummaryServiceSummaryArrayOutput)
}

// The number of spans that have been processed by the system for the trace.  Note that there could be additional spans that have not been processed or reported yet if the trace is still in progress.
func (o GetTraceSpanSummaryOutput) SpanCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *int { return v.SpanCount }).(pulumi.IntPtrOutput)
}

// Start time of the earliest span in the span collection.
func (o GetTraceSpanSummaryOutput) TimeEarliestSpanStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TimeEarliestSpanStarted }).(pulumi.StringPtrOutput)
}

// End time of the span that most recently ended in the span collection.
func (o GetTraceSpanSummaryOutput) TimeLatestSpanEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TimeLatestSpanEnded }).(pulumi.StringPtrOutput)
}

// End time of the root span for the span collection.
func (o GetTraceSpanSummaryOutput) TimeRootSpanEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TimeRootSpanEnded }).(pulumi.StringPtrOutput)
}

// Start time of the root span for the span collection.
func (o GetTraceSpanSummaryOutput) TimeRootSpanStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TimeRootSpanStarted }).(pulumi.StringPtrOutput)
}

// Time between the start of the earliest span and the end of the most recent span in milliseconds.
func (o GetTraceSpanSummaryOutput) TraceDurationInMs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *int { return v.TraceDurationInMs }).(pulumi.IntPtrOutput)
}

// Error code of the trace.
func (o GetTraceSpanSummaryOutput) TraceErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TraceErrorCode }).(pulumi.StringPtrOutput)
}

// Error type of the trace.
func (o GetTraceSpanSummaryOutput) TraceErrorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TraceErrorType }).(pulumi.StringPtrOutput)
}

// The status of the trace. The trace statuses are defined as follows: complete - a root span has been recorded, but there is no information on the errors. success - a complete root span is recorded there is a successful error type and error code - HTTP 200. incomplete - the root span has not yet been received. error - the root span returned with an error. There may or may not be an associated error code or error type.
func (o GetTraceSpanSummaryOutput) TraceStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummary) *string { return v.TraceStatus }).(pulumi.StringPtrOutput)
}

type GetTraceSpanSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanSummary)(nil)).Elem()
}

func (o GetTraceSpanSummaryArrayOutput) ToGetTraceSpanSummaryArrayOutput() GetTraceSpanSummaryArrayOutput {
	return o
}

func (o GetTraceSpanSummaryArrayOutput) ToGetTraceSpanSummaryArrayOutputWithContext(ctx context.Context) GetTraceSpanSummaryArrayOutput {
	return o
}

func (o GetTraceSpanSummaryArrayOutput) Index(i pulumi.IntInput) GetTraceSpanSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpanSummary {
		return vs[0].([]GetTraceSpanSummary)[vs[1].(int)]
	}).(GetTraceSpanSummaryOutput)
}

type GetTraceSpanSummaryServiceSummary struct {
	// Number of spans with errors for serviceName in the trace.
	ErrorSpans *string `pulumi:"errorSpans"`
	// Name associated with the service.
	SpanServiceName *string `pulumi:"spanServiceName"`
	// Number of spans for serviceName in the trace.
	TotalSpans *string `pulumi:"totalSpans"`
}

// GetTraceSpanSummaryServiceSummaryInput is an input type that accepts GetTraceSpanSummaryServiceSummaryArgs and GetTraceSpanSummaryServiceSummaryOutput values.
// You can construct a concrete instance of `GetTraceSpanSummaryServiceSummaryInput` via:
//
//	GetTraceSpanSummaryServiceSummaryArgs{...}
type GetTraceSpanSummaryServiceSummaryInput interface {
	pulumi.Input

	ToGetTraceSpanSummaryServiceSummaryOutput() GetTraceSpanSummaryServiceSummaryOutput
	ToGetTraceSpanSummaryServiceSummaryOutputWithContext(context.Context) GetTraceSpanSummaryServiceSummaryOutput
}

type GetTraceSpanSummaryServiceSummaryArgs struct {
	// Number of spans with errors for serviceName in the trace.
	ErrorSpans pulumi.StringPtrInput `pulumi:"errorSpans"`
	// Name associated with the service.
	SpanServiceName pulumi.StringPtrInput `pulumi:"spanServiceName"`
	// Number of spans for serviceName in the trace.
	TotalSpans pulumi.StringPtrInput `pulumi:"totalSpans"`
}

func (GetTraceSpanSummaryServiceSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanSummaryServiceSummary)(nil)).Elem()
}

func (i GetTraceSpanSummaryServiceSummaryArgs) ToGetTraceSpanSummaryServiceSummaryOutput() GetTraceSpanSummaryServiceSummaryOutput {
	return i.ToGetTraceSpanSummaryServiceSummaryOutputWithContext(context.Background())
}

func (i GetTraceSpanSummaryServiceSummaryArgs) ToGetTraceSpanSummaryServiceSummaryOutputWithContext(ctx context.Context) GetTraceSpanSummaryServiceSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanSummaryServiceSummaryOutput)
}

// GetTraceSpanSummaryServiceSummaryArrayInput is an input type that accepts GetTraceSpanSummaryServiceSummaryArray and GetTraceSpanSummaryServiceSummaryArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanSummaryServiceSummaryArrayInput` via:
//
//	GetTraceSpanSummaryServiceSummaryArray{ GetTraceSpanSummaryServiceSummaryArgs{...} }
type GetTraceSpanSummaryServiceSummaryArrayInput interface {
	pulumi.Input

	ToGetTraceSpanSummaryServiceSummaryArrayOutput() GetTraceSpanSummaryServiceSummaryArrayOutput
	ToGetTraceSpanSummaryServiceSummaryArrayOutputWithContext(context.Context) GetTraceSpanSummaryServiceSummaryArrayOutput
}

type GetTraceSpanSummaryServiceSummaryArray []GetTraceSpanSummaryServiceSummaryInput

func (GetTraceSpanSummaryServiceSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanSummaryServiceSummary)(nil)).Elem()
}

func (i GetTraceSpanSummaryServiceSummaryArray) ToGetTraceSpanSummaryServiceSummaryArrayOutput() GetTraceSpanSummaryServiceSummaryArrayOutput {
	return i.ToGetTraceSpanSummaryServiceSummaryArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanSummaryServiceSummaryArray) ToGetTraceSpanSummaryServiceSummaryArrayOutputWithContext(ctx context.Context) GetTraceSpanSummaryServiceSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanSummaryServiceSummaryArrayOutput)
}

type GetTraceSpanSummaryServiceSummaryOutput struct{ *pulumi.OutputState }

func (GetTraceSpanSummaryServiceSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanSummaryServiceSummary)(nil)).Elem()
}

func (o GetTraceSpanSummaryServiceSummaryOutput) ToGetTraceSpanSummaryServiceSummaryOutput() GetTraceSpanSummaryServiceSummaryOutput {
	return o
}

func (o GetTraceSpanSummaryServiceSummaryOutput) ToGetTraceSpanSummaryServiceSummaryOutputWithContext(ctx context.Context) GetTraceSpanSummaryServiceSummaryOutput {
	return o
}

// Number of spans with errors for serviceName in the trace.
func (o GetTraceSpanSummaryServiceSummaryOutput) ErrorSpans() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummaryServiceSummary) *string { return v.ErrorSpans }).(pulumi.StringPtrOutput)
}

// Name associated with the service.
func (o GetTraceSpanSummaryServiceSummaryOutput) SpanServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummaryServiceSummary) *string { return v.SpanServiceName }).(pulumi.StringPtrOutput)
}

// Number of spans for serviceName in the trace.
func (o GetTraceSpanSummaryServiceSummaryOutput) TotalSpans() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanSummaryServiceSummary) *string { return v.TotalSpans }).(pulumi.StringPtrOutput)
}

type GetTraceSpanSummaryServiceSummaryArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanSummaryServiceSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanSummaryServiceSummary)(nil)).Elem()
}

func (o GetTraceSpanSummaryServiceSummaryArrayOutput) ToGetTraceSpanSummaryServiceSummaryArrayOutput() GetTraceSpanSummaryServiceSummaryArrayOutput {
	return o
}

func (o GetTraceSpanSummaryServiceSummaryArrayOutput) ToGetTraceSpanSummaryServiceSummaryArrayOutputWithContext(ctx context.Context) GetTraceSpanSummaryServiceSummaryArrayOutput {
	return o
}

func (o GetTraceSpanSummaryServiceSummaryArrayOutput) Index(i pulumi.IntInput) GetTraceSpanSummaryServiceSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpanSummaryServiceSummary {
		return vs[0].([]GetTraceSpanSummaryServiceSummary)[vs[1].(int)]
	}).(GetTraceSpanSummaryServiceSummaryOutput)
}

type GetTraceSpanTag struct {
	// Key that specifies the tag name.
	TagName *string `pulumi:"tagName"`
	// Value associated with the tag key.
	TagValue *string `pulumi:"tagValue"`
}

// GetTraceSpanTagInput is an input type that accepts GetTraceSpanTagArgs and GetTraceSpanTagOutput values.
// You can construct a concrete instance of `GetTraceSpanTagInput` via:
//
//	GetTraceSpanTagArgs{...}
type GetTraceSpanTagInput interface {
	pulumi.Input

	ToGetTraceSpanTagOutput() GetTraceSpanTagOutput
	ToGetTraceSpanTagOutputWithContext(context.Context) GetTraceSpanTagOutput
}

type GetTraceSpanTagArgs struct {
	// Key that specifies the tag name.
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
	// Value associated with the tag key.
	TagValue pulumi.StringPtrInput `pulumi:"tagValue"`
}

func (GetTraceSpanTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanTag)(nil)).Elem()
}

func (i GetTraceSpanTagArgs) ToGetTraceSpanTagOutput() GetTraceSpanTagOutput {
	return i.ToGetTraceSpanTagOutputWithContext(context.Background())
}

func (i GetTraceSpanTagArgs) ToGetTraceSpanTagOutputWithContext(ctx context.Context) GetTraceSpanTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanTagOutput)
}

// GetTraceSpanTagArrayInput is an input type that accepts GetTraceSpanTagArray and GetTraceSpanTagArrayOutput values.
// You can construct a concrete instance of `GetTraceSpanTagArrayInput` via:
//
//	GetTraceSpanTagArray{ GetTraceSpanTagArgs{...} }
type GetTraceSpanTagArrayInput interface {
	pulumi.Input

	ToGetTraceSpanTagArrayOutput() GetTraceSpanTagArrayOutput
	ToGetTraceSpanTagArrayOutputWithContext(context.Context) GetTraceSpanTagArrayOutput
}

type GetTraceSpanTagArray []GetTraceSpanTagInput

func (GetTraceSpanTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanTag)(nil)).Elem()
}

func (i GetTraceSpanTagArray) ToGetTraceSpanTagArrayOutput() GetTraceSpanTagArrayOutput {
	return i.ToGetTraceSpanTagArrayOutputWithContext(context.Background())
}

func (i GetTraceSpanTagArray) ToGetTraceSpanTagArrayOutputWithContext(ctx context.Context) GetTraceSpanTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTraceSpanTagArrayOutput)
}

type GetTraceSpanTagOutput struct{ *pulumi.OutputState }

func (GetTraceSpanTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTraceSpanTag)(nil)).Elem()
}

func (o GetTraceSpanTagOutput) ToGetTraceSpanTagOutput() GetTraceSpanTagOutput {
	return o
}

func (o GetTraceSpanTagOutput) ToGetTraceSpanTagOutputWithContext(ctx context.Context) GetTraceSpanTagOutput {
	return o
}

// Key that specifies the tag name.
func (o GetTraceSpanTagOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanTag) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

// Value associated with the tag key.
func (o GetTraceSpanTagOutput) TagValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTraceSpanTag) *string { return v.TagValue }).(pulumi.StringPtrOutput)
}

type GetTraceSpanTagArrayOutput struct{ *pulumi.OutputState }

func (GetTraceSpanTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTraceSpanTag)(nil)).Elem()
}

func (o GetTraceSpanTagArrayOutput) ToGetTraceSpanTagArrayOutput() GetTraceSpanTagArrayOutput {
	return o
}

func (o GetTraceSpanTagArrayOutput) ToGetTraceSpanTagArrayOutputWithContext(ctx context.Context) GetTraceSpanTagArrayOutput {
	return o
}

func (o GetTraceSpanTagArrayOutput) Index(i pulumi.IntInput) GetTraceSpanTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTraceSpanTag {
		return vs[0].([]GetTraceSpanTag)[vs[1].(int)]
	}).(GetTraceSpanTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryQuickPicksFilterInput)(nil)).Elem(), GetQueryQuickPicksFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryQuickPicksFilterArrayInput)(nil)).Elem(), GetQueryQuickPicksFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryQuickPicksQuickPickInput)(nil)).Elem(), GetQueryQuickPicksQuickPickArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQueryQuickPicksQuickPickArrayInput)(nil)).Elem(), GetQueryQuickPicksQuickPickArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceAggregatedSnapshotDataDetailInput)(nil)).Elem(), GetTraceAggregatedSnapshotDataDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceAggregatedSnapshotDataDetailArrayInput)(nil)).Elem(), GetTraceAggregatedSnapshotDataDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceServiceSummaryInput)(nil)).Elem(), GetTraceServiceSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceServiceSummaryArrayInput)(nil)).Elem(), GetTraceServiceSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSnapshotDataTraceSnapshotDetailInput)(nil)).Elem(), GetTraceSnapshotDataTraceSnapshotDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSnapshotDataTraceSnapshotDetailArrayInput)(nil)).Elem(), GetTraceSnapshotDataTraceSnapshotDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanInput)(nil)).Elem(), GetTraceSpanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanArrayInput)(nil)).Elem(), GetTraceSpanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanLogInput)(nil)).Elem(), GetTraceSpanLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanLogArrayInput)(nil)).Elem(), GetTraceSpanLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanLogSpanLogInput)(nil)).Elem(), GetTraceSpanLogSpanLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanLogSpanLogArrayInput)(nil)).Elem(), GetTraceSpanLogSpanLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanSummaryInput)(nil)).Elem(), GetTraceSpanSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanSummaryArrayInput)(nil)).Elem(), GetTraceSpanSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanSummaryServiceSummaryInput)(nil)).Elem(), GetTraceSpanSummaryServiceSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanSummaryServiceSummaryArrayInput)(nil)).Elem(), GetTraceSpanSummaryServiceSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanTagInput)(nil)).Elem(), GetTraceSpanTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTraceSpanTagArrayInput)(nil)).Elem(), GetTraceSpanTagArray{})
	pulumi.RegisterOutputType(GetQueryQuickPicksFilterOutput{})
	pulumi.RegisterOutputType(GetQueryQuickPicksFilterArrayOutput{})
	pulumi.RegisterOutputType(GetQueryQuickPicksQuickPickOutput{})
	pulumi.RegisterOutputType(GetQueryQuickPicksQuickPickArrayOutput{})
	pulumi.RegisterOutputType(GetTraceAggregatedSnapshotDataDetailOutput{})
	pulumi.RegisterOutputType(GetTraceAggregatedSnapshotDataDetailArrayOutput{})
	pulumi.RegisterOutputType(GetTraceServiceSummaryOutput{})
	pulumi.RegisterOutputType(GetTraceServiceSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSnapshotDataTraceSnapshotDetailOutput{})
	pulumi.RegisterOutputType(GetTraceSnapshotDataTraceSnapshotDetailArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanOutput{})
	pulumi.RegisterOutputType(GetTraceSpanArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanLogOutput{})
	pulumi.RegisterOutputType(GetTraceSpanLogArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanLogSpanLogOutput{})
	pulumi.RegisterOutputType(GetTraceSpanLogSpanLogArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanSummaryOutput{})
	pulumi.RegisterOutputType(GetTraceSpanSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanSummaryServiceSummaryOutput{})
	pulumi.RegisterOutputType(GetTraceSpanSummaryServiceSummaryArrayOutput{})
	pulumi.RegisterOutputType(GetTraceSpanTagOutput{})
	pulumi.RegisterOutputType(GetTraceSpanTagArrayOutput{})
}
