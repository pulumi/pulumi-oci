// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifacts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Container Image Signature resource in Oracle Cloud Infrastructure Artifacts service.
//
// Upload a signature to an image.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Artifacts"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Artifacts.NewContainerImageSignature(ctx, "testContainerImageSignature", &Artifacts.ContainerImageSignatureArgs{
// 			CompartmentId:    pulumi.Any(_var.Compartment_id),
// 			ImageId:          pulumi.Any(oci_core_image.Test_image.Id),
// 			KmsKeyId:         pulumi.Any(oci_kms_key.Test_key.Id),
// 			KmsKeyVersionId:  pulumi.Any(oci_kms_key_version.Test_key_version.Id),
// 			Message:          pulumi.Any(_var.Container_image_signature_message),
// 			Signature:        pulumi.Any(_var.Container_image_signature_signature),
// 			SigningAlgorithm: pulumi.Any(_var.Container_image_signature_signing_algorithm),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ContainerImageSignatures can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:Artifacts/containerImageSignature:ContainerImageSignature test_container_image_signature "container/imageSignatures/{imageSignatureId}"
// ```
type ContainerImageSignature struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The id of the user or principal that created the resource.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The last 10 characters of the kmsKeyId, the last 10 characters of the kmsKeyVersionId, the signingAlgorithm, and the last 10 characters of the signatureId.  Example: `wrmz22sixa::qdwyc2ptun::SHA_256_RSA_PKCS_PSS::2vwmobasva`
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID`
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID`
	KmsKeyVersionId pulumi.StringOutput `pulumi:"kmsKeyVersionId"`
	// The base64 encoded signature payload that was signed.
	Message pulumi.StringOutput `pulumi:"message"`
	// The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
	Signature pulumi.StringOutput `pulumi:"signature"`
	// The algorithm to be used for signing. These are the only supported signing algorithms for container images.
	SigningAlgorithm pulumi.StringOutput `pulumi:"signingAlgorithm"`
	// An RFC 3339 timestamp indicating when the image was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewContainerImageSignature registers a new resource with the given unique name, arguments, and options.
func NewContainerImageSignature(ctx *pulumi.Context,
	name string, args *ContainerImageSignatureArgs, opts ...pulumi.ResourceOption) (*ContainerImageSignature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.KmsKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyId'")
	}
	if args.KmsKeyVersionId == nil {
		return nil, errors.New("invalid value for required argument 'KmsKeyVersionId'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Signature == nil {
		return nil, errors.New("invalid value for required argument 'Signature'")
	}
	if args.SigningAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'SigningAlgorithm'")
	}
	var resource ContainerImageSignature
	err := ctx.RegisterResource("oci:Artifacts/containerImageSignature:ContainerImageSignature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerImageSignature gets an existing ContainerImageSignature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerImageSignature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerImageSignatureState, opts ...pulumi.ResourceOption) (*ContainerImageSignature, error) {
	var resource ContainerImageSignature
	err := ctx.ReadResource("oci:Artifacts/containerImageSignature:ContainerImageSignature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerImageSignature resources.
type containerImageSignatureState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
	CompartmentId *string `pulumi:"compartmentId"`
	// The id of the user or principal that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The last 10 characters of the kmsKeyId, the last 10 characters of the kmsKeyVersionId, the signingAlgorithm, and the last 10 characters of the signatureId.  Example: `wrmz22sixa::qdwyc2ptun::SHA_256_RSA_PKCS_PSS::2vwmobasva`
	DisplayName *string `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
	ImageId *string `pulumi:"imageId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID`
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID`
	KmsKeyVersionId *string `pulumi:"kmsKeyVersionId"`
	// The base64 encoded signature payload that was signed.
	Message *string `pulumi:"message"`
	// The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
	Signature *string `pulumi:"signature"`
	// The algorithm to be used for signing. These are the only supported signing algorithms for container images.
	SigningAlgorithm *string `pulumi:"signingAlgorithm"`
	// An RFC 3339 timestamp indicating when the image was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type ContainerImageSignatureState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
	CompartmentId pulumi.StringPtrInput
	// The id of the user or principal that created the resource.
	CreatedBy pulumi.StringPtrInput
	// The last 10 characters of the kmsKeyId, the last 10 characters of the kmsKeyVersionId, the signingAlgorithm, and the last 10 characters of the signatureId.  Example: `wrmz22sixa::qdwyc2ptun::SHA_256_RSA_PKCS_PSS::2vwmobasva`
	DisplayName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
	ImageId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID`
	KmsKeyId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID`
	KmsKeyVersionId pulumi.StringPtrInput
	// The base64 encoded signature payload that was signed.
	Message pulumi.StringPtrInput
	// The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
	Signature pulumi.StringPtrInput
	// The algorithm to be used for signing. These are the only supported signing algorithms for container images.
	SigningAlgorithm pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the image was created.
	TimeCreated pulumi.StringPtrInput
}

func (ContainerImageSignatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerImageSignatureState)(nil)).Elem()
}

type containerImageSignatureArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
	CompartmentId string `pulumi:"compartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
	ImageId string `pulumi:"imageId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID`
	KmsKeyId string `pulumi:"kmsKeyId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID`
	KmsKeyVersionId string `pulumi:"kmsKeyVersionId"`
	// The base64 encoded signature payload that was signed.
	Message string `pulumi:"message"`
	// The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
	Signature string `pulumi:"signature"`
	// The algorithm to be used for signing. These are the only supported signing algorithms for container images.
	SigningAlgorithm string `pulumi:"signingAlgorithm"`
}

// The set of arguments for constructing a ContainerImageSignature resource.
type ContainerImageSignatureArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
	CompartmentId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID`
	ImageId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID`
	KmsKeyId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID`
	KmsKeyVersionId pulumi.StringInput
	// The base64 encoded signature payload that was signed.
	Message pulumi.StringInput
	// The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
	Signature pulumi.StringInput
	// The algorithm to be used for signing. These are the only supported signing algorithms for container images.
	SigningAlgorithm pulumi.StringInput
}

func (ContainerImageSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerImageSignatureArgs)(nil)).Elem()
}

type ContainerImageSignatureInput interface {
	pulumi.Input

	ToContainerImageSignatureOutput() ContainerImageSignatureOutput
	ToContainerImageSignatureOutputWithContext(ctx context.Context) ContainerImageSignatureOutput
}

func (*ContainerImageSignature) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImageSignature)(nil)).Elem()
}

func (i *ContainerImageSignature) ToContainerImageSignatureOutput() ContainerImageSignatureOutput {
	return i.ToContainerImageSignatureOutputWithContext(context.Background())
}

func (i *ContainerImageSignature) ToContainerImageSignatureOutputWithContext(ctx context.Context) ContainerImageSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageSignatureOutput)
}

// ContainerImageSignatureArrayInput is an input type that accepts ContainerImageSignatureArray and ContainerImageSignatureArrayOutput values.
// You can construct a concrete instance of `ContainerImageSignatureArrayInput` via:
//
//          ContainerImageSignatureArray{ ContainerImageSignatureArgs{...} }
type ContainerImageSignatureArrayInput interface {
	pulumi.Input

	ToContainerImageSignatureArrayOutput() ContainerImageSignatureArrayOutput
	ToContainerImageSignatureArrayOutputWithContext(context.Context) ContainerImageSignatureArrayOutput
}

type ContainerImageSignatureArray []ContainerImageSignatureInput

func (ContainerImageSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerImageSignature)(nil)).Elem()
}

func (i ContainerImageSignatureArray) ToContainerImageSignatureArrayOutput() ContainerImageSignatureArrayOutput {
	return i.ToContainerImageSignatureArrayOutputWithContext(context.Background())
}

func (i ContainerImageSignatureArray) ToContainerImageSignatureArrayOutputWithContext(ctx context.Context) ContainerImageSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageSignatureArrayOutput)
}

// ContainerImageSignatureMapInput is an input type that accepts ContainerImageSignatureMap and ContainerImageSignatureMapOutput values.
// You can construct a concrete instance of `ContainerImageSignatureMapInput` via:
//
//          ContainerImageSignatureMap{ "key": ContainerImageSignatureArgs{...} }
type ContainerImageSignatureMapInput interface {
	pulumi.Input

	ToContainerImageSignatureMapOutput() ContainerImageSignatureMapOutput
	ToContainerImageSignatureMapOutputWithContext(context.Context) ContainerImageSignatureMapOutput
}

type ContainerImageSignatureMap map[string]ContainerImageSignatureInput

func (ContainerImageSignatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerImageSignature)(nil)).Elem()
}

func (i ContainerImageSignatureMap) ToContainerImageSignatureMapOutput() ContainerImageSignatureMapOutput {
	return i.ToContainerImageSignatureMapOutputWithContext(context.Background())
}

func (i ContainerImageSignatureMap) ToContainerImageSignatureMapOutputWithContext(ctx context.Context) ContainerImageSignatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageSignatureMapOutput)
}

type ContainerImageSignatureOutput struct{ *pulumi.OutputState }

func (ContainerImageSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImageSignature)(nil)).Elem()
}

func (o ContainerImageSignatureOutput) ToContainerImageSignatureOutput() ContainerImageSignatureOutput {
	return o
}

func (o ContainerImageSignatureOutput) ToContainerImageSignatureOutputWithContext(ctx context.Context) ContainerImageSignatureOutput {
	return o
}

type ContainerImageSignatureArrayOutput struct{ *pulumi.OutputState }

func (ContainerImageSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerImageSignature)(nil)).Elem()
}

func (o ContainerImageSignatureArrayOutput) ToContainerImageSignatureArrayOutput() ContainerImageSignatureArrayOutput {
	return o
}

func (o ContainerImageSignatureArrayOutput) ToContainerImageSignatureArrayOutputWithContext(ctx context.Context) ContainerImageSignatureArrayOutput {
	return o
}

func (o ContainerImageSignatureArrayOutput) Index(i pulumi.IntInput) ContainerImageSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerImageSignature {
		return vs[0].([]*ContainerImageSignature)[vs[1].(int)]
	}).(ContainerImageSignatureOutput)
}

type ContainerImageSignatureMapOutput struct{ *pulumi.OutputState }

func (ContainerImageSignatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerImageSignature)(nil)).Elem()
}

func (o ContainerImageSignatureMapOutput) ToContainerImageSignatureMapOutput() ContainerImageSignatureMapOutput {
	return o
}

func (o ContainerImageSignatureMapOutput) ToContainerImageSignatureMapOutputWithContext(ctx context.Context) ContainerImageSignatureMapOutput {
	return o
}

func (o ContainerImageSignatureMapOutput) MapIndex(k pulumi.StringInput) ContainerImageSignatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerImageSignature {
		return vs[0].(map[string]*ContainerImageSignature)[vs[1].(string)]
	}).(ContainerImageSignatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageSignatureInput)(nil)).Elem(), &ContainerImageSignature{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageSignatureArrayInput)(nil)).Elem(), ContainerImageSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageSignatureMapInput)(nil)).Elem(), ContainerImageSignatureMap{})
	pulumi.RegisterOutputType(ContainerImageSignatureOutput{})
	pulumi.RegisterOutputType(ContainerImageSignatureArrayOutput{})
	pulumi.RegisterOutputType(ContainerImageSignatureMapOutput{})
}
