// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides details about a specific Container Configuration resource in Oracle Cloud Infrastructure Artifacts service.
//
// Get container configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Artifacts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Artifacts.GetContainerConfiguration(ctx, &artifacts.GetContainerConfigurationArgs{
//				CompartmentId: _var.Compartment_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupContainerConfiguration(ctx *pulumi.Context, args *LookupContainerConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupContainerConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupContainerConfigurationResult
	err := ctx.Invoke("oci:Artifacts/getContainerConfiguration:getContainerConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerConfiguration.
type LookupContainerConfigurationArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
}

// A collection of values returned by getContainerConfiguration.
type LookupContainerConfigurationResult struct {
	CompartmentId string `pulumi:"compartmentId"`
	Id            string `pulumi:"id"`
	// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
	IsRepositoryCreatedOnFirstPush bool `pulumi:"isRepositoryCreatedOnFirstPush"`
	// The tenancy namespace used in the container repository path.
	Namespace string `pulumi:"namespace"`
}

func LookupContainerConfigurationOutput(ctx *pulumi.Context, args LookupContainerConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupContainerConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerConfigurationResult, error) {
			args := v.(LookupContainerConfigurationArgs)
			r, err := LookupContainerConfiguration(ctx, &args, opts...)
			var s LookupContainerConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContainerConfigurationResultOutput)
}

// A collection of arguments for invoking getContainerConfiguration.
type LookupContainerConfigurationOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
}

func (LookupContainerConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getContainerConfiguration.
type LookupContainerConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupContainerConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerConfigurationResult)(nil)).Elem()
}

func (o LookupContainerConfigurationResultOutput) ToLookupContainerConfigurationResultOutput() LookupContainerConfigurationResultOutput {
	return o
}

func (o LookupContainerConfigurationResultOutput) ToLookupContainerConfigurationResultOutputWithContext(ctx context.Context) LookupContainerConfigurationResultOutput {
	return o
}

func (o LookupContainerConfigurationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupContainerConfigurationResult] {
	return pulumix.Output[LookupContainerConfigurationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupContainerConfigurationResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerConfigurationResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o LookupContainerConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
func (o LookupContainerConfigurationResultOutput) IsRepositoryCreatedOnFirstPush() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerConfigurationResult) bool { return v.IsRepositoryCreatedOnFirstPush }).(pulumi.BoolOutput)
}

// The tenancy namespace used in the container repository path.
func (o LookupContainerConfigurationResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerConfigurationResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerConfigurationResultOutput{})
}
