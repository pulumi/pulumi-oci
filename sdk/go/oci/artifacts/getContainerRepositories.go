// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package artifacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Container Repositories in Oracle Cloud Infrastructure Artifacts service.
//
// List container repositories in a compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Artifacts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Artifacts.GetContainerRepositories(ctx, &artifacts.GetContainerRepositoriesArgs{
//				CompartmentId:          compartmentId,
//				CompartmentIdInSubtree: pulumi.BoolRef(containerRepositoryCompartmentIdInSubtree),
//				DisplayName:            pulumi.StringRef(containerRepositoryDisplayName),
//				IsPublic:               pulumi.BoolRef(containerRepositoryIsPublic),
//				RepositoryId:           pulumi.StringRef(testRepository.Id),
//				State:                  pulumi.StringRef(containerRepositoryState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetContainerRepositories(ctx *pulumi.Context, args *GetContainerRepositoriesArgs, opts ...pulumi.InvokeOption) (*GetContainerRepositoriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContainerRepositoriesResult
	err := ctx.Invoke("oci:Artifacts/getContainerRepositories:getContainerRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRepositories.
type GetContainerRepositoriesArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName *string                          `pulumi:"displayName"`
	Filters     []GetContainerRepositoriesFilter `pulumi:"filters"`
	// A filter to return resources that match the isPublic value.
	IsPublic *bool `pulumi:"isPublic"`
	// A filter to return container images only for the specified container repository OCID.
	RepositoryId *string `pulumi:"repositoryId"`
	// A filter to return only resources that match the given lifecycle state name exactly.
	State *string `pulumi:"state"`
}

// A collection of values returned by getContainerRepositories.
type GetContainerRepositoriesResult struct {
	// The OCID of the compartment in which the container repository exists.
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The list of container_repository_collection.
	ContainerRepositoryCollections []GetContainerRepositoriesContainerRepositoryCollection `pulumi:"containerRepositoryCollections"`
	// The container repository name.
	DisplayName *string                          `pulumi:"displayName"`
	Filters     []GetContainerRepositoriesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic     *bool   `pulumi:"isPublic"`
	RepositoryId *string `pulumi:"repositoryId"`
	// The current state of the container repository.
	State *string `pulumi:"state"`
}

func GetContainerRepositoriesOutput(ctx *pulumi.Context, args GetContainerRepositoriesOutputArgs, opts ...pulumi.InvokeOption) GetContainerRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetContainerRepositoriesResultOutput, error) {
			args := v.(GetContainerRepositoriesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetContainerRepositoriesResult
			secret, err := ctx.InvokePackageRaw("oci:Artifacts/getContainerRepositories:getContainerRepositories", args, &rv, "", opts...)
			if err != nil {
				return GetContainerRepositoriesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetContainerRepositoriesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetContainerRepositoriesResultOutput), nil
			}
			return output, nil
		}).(GetContainerRepositoriesResultOutput)
}

// A collection of arguments for invoking getContainerRepositories.
type GetContainerRepositoriesOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of `accessLevel`. Default is false. Can only be set to true when calling the API on the tenancy (root compartment).
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName pulumi.StringPtrInput                    `pulumi:"displayName"`
	Filters     GetContainerRepositoriesFilterArrayInput `pulumi:"filters"`
	// A filter to return resources that match the isPublic value.
	IsPublic pulumi.BoolPtrInput `pulumi:"isPublic"`
	// A filter to return container images only for the specified container repository OCID.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// A filter to return only resources that match the given lifecycle state name exactly.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetContainerRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRepositoriesArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRepositories.
type GetContainerRepositoriesResultOutput struct{ *pulumi.OutputState }

func (GetContainerRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerRepositoriesResult)(nil)).Elem()
}

func (o GetContainerRepositoriesResultOutput) ToGetContainerRepositoriesResultOutput() GetContainerRepositoriesResultOutput {
	return o
}

func (o GetContainerRepositoriesResultOutput) ToGetContainerRepositoriesResultOutputWithContext(ctx context.Context) GetContainerRepositoriesResultOutput {
	return o
}

// The OCID of the compartment in which the container repository exists.
func (o GetContainerRepositoriesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetContainerRepositoriesResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// The list of container_repository_collection.
func (o GetContainerRepositoriesResultOutput) ContainerRepositoryCollections() GetContainerRepositoriesContainerRepositoryCollectionArrayOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) []GetContainerRepositoriesContainerRepositoryCollection {
		return v.ContainerRepositoryCollections
	}).(GetContainerRepositoriesContainerRepositoryCollectionArrayOutput)
}

// The container repository name.
func (o GetContainerRepositoriesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetContainerRepositoriesResultOutput) Filters() GetContainerRepositoriesFilterArrayOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) []GetContainerRepositoriesFilter { return v.Filters }).(GetContainerRepositoriesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetContainerRepositoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the repository is public. A public repository allows unauthenticated access.
func (o GetContainerRepositoriesResultOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) *bool { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

func (o GetContainerRepositoriesResultOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The current state of the container repository.
func (o GetContainerRepositoriesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainerRepositoriesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContainerRepositoriesResultOutput{})
}
