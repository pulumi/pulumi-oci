// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package artifacts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Container Repository resource in Oracle Cloud Infrastructure Artifacts service.
//
// Get container repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Artifacts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Artifacts.GetContainerRepository(ctx, &artifacts.GetContainerRepositoryArgs{
//				RepositoryId: oci_artifacts_repository.Test_repository.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupContainerRepository(ctx *pulumi.Context, args *LookupContainerRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupContainerRepositoryResult, error) {
	var rv LookupContainerRepositoryResult
	err := ctx.Invoke("oci:Artifacts/getContainerRepository:getContainerRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRepository.
type LookupContainerRepositoryArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getContainerRepository.
type LookupContainerRepositoryResult struct {
	// Total storage size in GBs that will be charged.
	BillableSizeInGbs string `pulumi:"billableSizeInGbs"`
	// The OCID of the compartment in which the container repository exists.
	CompartmentId string `pulumi:"compartmentId"`
	// The id of the user or principal that created the resource.
	CreatedBy string `pulumi:"createdBy"`
	// The container repository name.
	DisplayName string `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
	Id string `pulumi:"id"`
	// Total number of images.
	ImageCount int `pulumi:"imageCount"`
	// Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable bool `pulumi:"isImmutable"`
	// Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic bool `pulumi:"isPublic"`
	// Total number of layers.
	LayerCount int `pulumi:"layerCount"`
	// Total storage in bytes consumed by layers.
	LayersSizeInBytes string `pulumi:"layersSizeInBytes"`
	// Container repository readme.
	Readmes      []GetContainerRepositoryReadme `pulumi:"readmes"`
	RepositoryId string                         `pulumi:"repositoryId"`
	// The current state of the container repository.
	State string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated string `pulumi:"timeCreated"`
	// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
	TimeLastPushed string `pulumi:"timeLastPushed"`
}

func LookupContainerRepositoryOutput(ctx *pulumi.Context, args LookupContainerRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerRepositoryResult, error) {
			args := v.(LookupContainerRepositoryArgs)
			r, err := LookupContainerRepository(ctx, &args, opts...)
			var s LookupContainerRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContainerRepositoryResultOutput)
}

// A collection of arguments for invoking getContainerRepository.
type LookupContainerRepositoryOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (LookupContainerRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRepository.
type LookupContainerRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryResult)(nil)).Elem()
}

func (o LookupContainerRepositoryResultOutput) ToLookupContainerRepositoryResultOutput() LookupContainerRepositoryResultOutput {
	return o
}

func (o LookupContainerRepositoryResultOutput) ToLookupContainerRepositoryResultOutputWithContext(ctx context.Context) LookupContainerRepositoryResultOutput {
	return o
}

// Total storage size in GBs that will be charged.
func (o LookupContainerRepositoryResultOutput) BillableSizeInGbs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.BillableSizeInGbs }).(pulumi.StringOutput)
}

// The OCID of the compartment in which the container repository exists.
func (o LookupContainerRepositoryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The id of the user or principal that created the resource.
func (o LookupContainerRepositoryResultOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// The container repository name.
func (o LookupContainerRepositoryResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID`
func (o LookupContainerRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Total number of images.
func (o LookupContainerRepositoryResultOutput) ImageCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) int { return v.ImageCount }).(pulumi.IntOutput)
}

// Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
func (o LookupContainerRepositoryResultOutput) IsImmutable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) bool { return v.IsImmutable }).(pulumi.BoolOutput)
}

// Whether the repository is public. A public repository allows unauthenticated access.
func (o LookupContainerRepositoryResultOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) bool { return v.IsPublic }).(pulumi.BoolOutput)
}

// Total number of layers.
func (o LookupContainerRepositoryResultOutput) LayerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) int { return v.LayerCount }).(pulumi.IntOutput)
}

// Total storage in bytes consumed by layers.
func (o LookupContainerRepositoryResultOutput) LayersSizeInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.LayersSizeInBytes }).(pulumi.StringOutput)
}

// Container repository readme.
func (o LookupContainerRepositoryResultOutput) Readmes() GetContainerRepositoryReadmeArrayOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) []GetContainerRepositoryReadme { return v.Readmes }).(GetContainerRepositoryReadmeArrayOutput)
}

func (o LookupContainerRepositoryResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The current state of the container repository.
func (o LookupContainerRepositoryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.State }).(pulumi.StringOutput)
}

// An RFC 3339 timestamp indicating when the repository was created.
func (o LookupContainerRepositoryResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
func (o LookupContainerRepositoryResultOutput) TimeLastPushed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryResult) string { return v.TimeLastPushed }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRepositoryResultOutput{})
}
