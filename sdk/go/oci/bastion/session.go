// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bastion

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Session resource in Oracle Cloud Infrastructure Bastion service.
//
// Creates a new session in a bastion. A bastion session lets authorized users connect to a target resource for a predetermined amount of time. The Bastion service recognizes two types of sessions, managed SSH sessions and SSH port forwarding sessions. Managed SSH sessions require that the target resource has an OpenSSH server and the Oracle Cloud Agent both running.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Bastion"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Bastion.NewSession(ctx, "testSession", &Bastion.SessionArgs{
// 			BastionId: pulumi.Any(oci_bastion_bastion.Test_bastion.Id),
// 			KeyDetails: &bastion.SessionKeyDetailsArgs{
// 				PublicKeyContent: pulumi.Any(_var.Session_key_details_public_key_content),
// 			},
// 			TargetResourceDetails: &bastion.SessionTargetResourceDetailsArgs{
// 				SessionType:                           pulumi.Any(_var.Session_target_resource_details_session_type),
// 				TargetResourceId:                      pulumi.Any(oci_bastion_target_resource.Test_target_resource.Id),
// 				TargetResourceOperatingSystemUserName: pulumi.Any(oci_identity_user.Test_user.Name),
// 				TargetResourcePort:                    pulumi.Any(_var.Session_target_resource_details_target_resource_port),
// 				TargetResourcePrivateIpAddress:        pulumi.Any(_var.Session_target_resource_details_target_resource_private_ip_address),
// 			},
// 			DisplayName:         pulumi.Any(_var.Session_display_name),
// 			KeyType:             pulumi.Any(_var.Session_key_type),
// 			SessionTtlInSeconds: pulumi.Any(_var.Session_session_ttl_in_seconds),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Sessions can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:Bastion/session:Session test_session "id"
// ```
type Session struct {
	pulumi.CustomResourceState

	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringOutput `pulumi:"bastionId"`
	// The name of the bastion that is hosting this session.
	BastionName pulumi.StringOutput `pulumi:"bastionName"`
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo pulumi.StringOutput `pulumi:"bastionPublicHostKeyInfo"`
	// The username that the session uses to connect to the target resource.
	BastionUserName pulumi.StringOutput `pulumi:"bastionUserName"`
	// (Updatable) The name of the session.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails SessionKeyDetailsOutput `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// A message describing the current session state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntOutput `pulumi:"sessionTtlInSeconds"`
	// The connection message for the session.
	SshMetadata pulumi.MapOutput `pulumi:"sshMetadata"`
	// The current state of the session.
	State pulumi.StringOutput `pulumi:"state"`
	// Details about a bastion session's target resource.
	TargetResourceDetails SessionTargetResourceDetailsOutput `pulumi:"targetResourceDetails"`
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewSession registers a new resource with the given unique name, arguments, and options.
func NewSession(ctx *pulumi.Context,
	name string, args *SessionArgs, opts ...pulumi.ResourceOption) (*Session, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BastionId == nil {
		return nil, errors.New("invalid value for required argument 'BastionId'")
	}
	if args.KeyDetails == nil {
		return nil, errors.New("invalid value for required argument 'KeyDetails'")
	}
	if args.TargetResourceDetails == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceDetails'")
	}
	var resource Session
	err := ctx.RegisterResource("oci:Bastion/session:Session", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSession gets an existing Session resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionState, opts ...pulumi.ResourceOption) (*Session, error) {
	var resource Session
	err := ctx.ReadResource("oci:Bastion/session:Session", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Session resources.
type sessionState struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId *string `pulumi:"bastionId"`
	// The name of the bastion that is hosting this session.
	BastionName *string `pulumi:"bastionName"`
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo *string `pulumi:"bastionPublicHostKeyInfo"`
	// The username that the session uses to connect to the target resource.
	BastionUserName *string `pulumi:"bastionUserName"`
	// (Updatable) The name of the session.
	DisplayName *string `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails *SessionKeyDetails `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType *string `pulumi:"keyType"`
	// A message describing the current session state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds *int `pulumi:"sessionTtlInSeconds"`
	// The connection message for the session.
	SshMetadata map[string]interface{} `pulumi:"sshMetadata"`
	// The current state of the session.
	State *string `pulumi:"state"`
	// Details about a bastion session's target resource.
	TargetResourceDetails *SessionTargetResourceDetails `pulumi:"targetResourceDetails"`
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type SessionState struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringPtrInput
	// The name of the bastion that is hosting this session.
	BastionName pulumi.StringPtrInput
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo pulumi.StringPtrInput
	// The username that the session uses to connect to the target resource.
	BastionUserName pulumi.StringPtrInput
	// (Updatable) The name of the session.
	DisplayName pulumi.StringPtrInput
	// Public key details for a bastion session.
	KeyDetails SessionKeyDetailsPtrInput
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringPtrInput
	// A message describing the current session state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntPtrInput
	// The connection message for the session.
	SshMetadata pulumi.MapInput
	// The current state of the session.
	State pulumi.StringPtrInput
	// Details about a bastion session's target resource.
	TargetResourceDetails SessionTargetResourceDetailsPtrInput
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated pulumi.StringPtrInput
}

func (SessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionState)(nil)).Elem()
}

type sessionArgs struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId string `pulumi:"bastionId"`
	// (Updatable) The name of the session.
	DisplayName *string `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails SessionKeyDetails `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType *string `pulumi:"keyType"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds *int `pulumi:"sessionTtlInSeconds"`
	// Details about a bastion session's target resource.
	TargetResourceDetails SessionTargetResourceDetails `pulumi:"targetResourceDetails"`
}

// The set of arguments for constructing a Session resource.
type SessionArgs struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringInput
	// (Updatable) The name of the session.
	DisplayName pulumi.StringPtrInput
	// Public key details for a bastion session.
	KeyDetails SessionKeyDetailsInput
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringPtrInput
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntPtrInput
	// Details about a bastion session's target resource.
	TargetResourceDetails SessionTargetResourceDetailsInput
}

func (SessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionArgs)(nil)).Elem()
}

type SessionInput interface {
	pulumi.Input

	ToSessionOutput() SessionOutput
	ToSessionOutputWithContext(ctx context.Context) SessionOutput
}

func (*Session) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (i *Session) ToSessionOutput() SessionOutput {
	return i.ToSessionOutputWithContext(context.Background())
}

func (i *Session) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionOutput)
}

// SessionArrayInput is an input type that accepts SessionArray and SessionArrayOutput values.
// You can construct a concrete instance of `SessionArrayInput` via:
//
//          SessionArray{ SessionArgs{...} }
type SessionArrayInput interface {
	pulumi.Input

	ToSessionArrayOutput() SessionArrayOutput
	ToSessionArrayOutputWithContext(context.Context) SessionArrayOutput
}

type SessionArray []SessionInput

func (SessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Session)(nil)).Elem()
}

func (i SessionArray) ToSessionArrayOutput() SessionArrayOutput {
	return i.ToSessionArrayOutputWithContext(context.Background())
}

func (i SessionArray) ToSessionArrayOutputWithContext(ctx context.Context) SessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionArrayOutput)
}

// SessionMapInput is an input type that accepts SessionMap and SessionMapOutput values.
// You can construct a concrete instance of `SessionMapInput` via:
//
//          SessionMap{ "key": SessionArgs{...} }
type SessionMapInput interface {
	pulumi.Input

	ToSessionMapOutput() SessionMapOutput
	ToSessionMapOutputWithContext(context.Context) SessionMapOutput
}

type SessionMap map[string]SessionInput

func (SessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Session)(nil)).Elem()
}

func (i SessionMap) ToSessionMapOutput() SessionMapOutput {
	return i.ToSessionMapOutputWithContext(context.Background())
}

func (i SessionMap) ToSessionMapOutputWithContext(ctx context.Context) SessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionMapOutput)
}

type SessionOutput struct{ *pulumi.OutputState }

func (SessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (o SessionOutput) ToSessionOutput() SessionOutput {
	return o
}

func (o SessionOutput) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return o
}

type SessionArrayOutput struct{ *pulumi.OutputState }

func (SessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Session)(nil)).Elem()
}

func (o SessionArrayOutput) ToSessionArrayOutput() SessionArrayOutput {
	return o
}

func (o SessionArrayOutput) ToSessionArrayOutputWithContext(ctx context.Context) SessionArrayOutput {
	return o
}

func (o SessionArrayOutput) Index(i pulumi.IntInput) SessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Session {
		return vs[0].([]*Session)[vs[1].(int)]
	}).(SessionOutput)
}

type SessionMapOutput struct{ *pulumi.OutputState }

func (SessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Session)(nil)).Elem()
}

func (o SessionMapOutput) ToSessionMapOutput() SessionMapOutput {
	return o
}

func (o SessionMapOutput) ToSessionMapOutputWithContext(ctx context.Context) SessionMapOutput {
	return o
}

func (o SessionMapOutput) MapIndex(k pulumi.StringInput) SessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Session {
		return vs[0].(map[string]*Session)[vs[1].(string)]
	}).(SessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionInput)(nil)).Elem(), &Session{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionArrayInput)(nil)).Elem(), SessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionMapInput)(nil)).Elem(), SessionMap{})
	pulumi.RegisterOutputType(SessionOutput{})
	pulumi.RegisterOutputType(SessionArrayOutput{})
	pulumi.RegisterOutputType(SessionMapOutput{})
}
