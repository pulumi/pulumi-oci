// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigdataservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Bds Instance Operation Certificate Managements Management resource in Oracle Cloud Infrastructure Big Data Service service.
//
// Configuring TLS/SSL for various ODH services running on the BDS cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/bigdataservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigdataservice.NewBdsInstanceOperationCertificateManagementsManagement(ctx, "test_bds_instance_operation_certificate_managements_management", &bigdataservice.BdsInstanceOperationCertificateManagementsManagementArgs{
//				BdsInstanceId:                        pulumi.Any(testBdsInstance.Id),
//				ClusterAdminPassword:                 pulumi.Any(bdsInstanceOperationCertificateManagementsManagementClusterAdminPassword),
//				Services:                             pulumi.Any(bdsInstanceOperationCertificateManagementsManagementServices),
//				EnableOperationCertificateManagement: pulumi.Any(enableOperationCertificateManagement),
//				RenewOperationCertificateManagement:  pulumi.Any(renewOperationCertificateManagement),
//				HostCertDetails: bigdataservice.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArray{
//					&bigdataservice.BdsInstanceOperationCertificateManagementsManagementHostCertDetailArgs{
//						Certificate: pulumi.Any(bdsInstanceOperationCertificateManagementsManagementHostCertDetailsCertificate),
//						HostName:    pulumi.Any(bdsInstanceOperationCertificateManagementsManagementHostCertDetailsHostName),
//						PrivateKey:  pulumi.Any(bdsInstanceOperationCertificateManagementsManagementHostCertDetailsPrivateKey),
//					},
//				},
//				RootCertificate:   pulumi.Any(bdsInstanceOperationCertificateManagementsManagementRootCertificate),
//				ServerKeyPassword: pulumi.Any(bdsInstanceOperationCertificateManagementsManagementServerKeyPassword),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BdsInstanceOperationCertificateManagementsManagement struct {
	pulumi.CustomResourceState

	// The OCID of the cluster.
	BdsInstanceId pulumi.StringOutput `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringOutput `pulumi:"clusterAdminPassword"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	EnableOperationCertificateManagement pulumi.BoolOutput `pulumi:"enableOperationCertificateManagement"`
	// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
	HostCertDetails BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayOutput `pulumi:"hostCertDetails"`
	// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RenewOperationCertificateManagement pulumi.BoolOutput `pulumi:"renewOperationCertificateManagement"`
	// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
	RootCertificate pulumi.StringOutput `pulumi:"rootCertificate"`
	// Base-64 encoded password for CA certificate's private key. This value can be empty.
	ServerKeyPassword pulumi.StringOutput `pulumi:"serverKeyPassword"`
	// List of services for which certificate needs to be enabled.
	Services pulumi.StringArrayOutput `pulumi:"services"`
}

// NewBdsInstanceOperationCertificateManagementsManagement registers a new resource with the given unique name, arguments, and options.
func NewBdsInstanceOperationCertificateManagementsManagement(ctx *pulumi.Context,
	name string, args *BdsInstanceOperationCertificateManagementsManagementArgs, opts ...pulumi.ResourceOption) (*BdsInstanceOperationCertificateManagementsManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BdsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'BdsInstanceId'")
	}
	if args.ClusterAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'ClusterAdminPassword'")
	}
	if args.EnableOperationCertificateManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableOperationCertificateManagement'")
	}
	if args.RenewOperationCertificateManagement == nil {
		return nil, errors.New("invalid value for required argument 'RenewOperationCertificateManagement'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.ClusterAdminPassword != nil {
		args.ClusterAdminPassword = pulumi.ToSecret(args.ClusterAdminPassword).(pulumi.StringInput)
	}
	if args.ServerKeyPassword != nil {
		args.ServerKeyPassword = pulumi.ToSecret(args.ServerKeyPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterAdminPassword",
		"serverKeyPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BdsInstanceOperationCertificateManagementsManagement
	err := ctx.RegisterResource("oci:BigDataService/bdsInstanceOperationCertificateManagementsManagement:BdsInstanceOperationCertificateManagementsManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBdsInstanceOperationCertificateManagementsManagement gets an existing BdsInstanceOperationCertificateManagementsManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBdsInstanceOperationCertificateManagementsManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BdsInstanceOperationCertificateManagementsManagementState, opts ...pulumi.ResourceOption) (*BdsInstanceOperationCertificateManagementsManagement, error) {
	var resource BdsInstanceOperationCertificateManagementsManagement
	err := ctx.ReadResource("oci:BigDataService/bdsInstanceOperationCertificateManagementsManagement:BdsInstanceOperationCertificateManagementsManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BdsInstanceOperationCertificateManagementsManagement resources.
type bdsInstanceOperationCertificateManagementsManagementState struct {
	// The OCID of the cluster.
	BdsInstanceId *string `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword *string `pulumi:"clusterAdminPassword"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	EnableOperationCertificateManagement *bool `pulumi:"enableOperationCertificateManagement"`
	// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
	HostCertDetails []BdsInstanceOperationCertificateManagementsManagementHostCertDetail `pulumi:"hostCertDetails"`
	// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RenewOperationCertificateManagement *bool `pulumi:"renewOperationCertificateManagement"`
	// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
	RootCertificate *string `pulumi:"rootCertificate"`
	// Base-64 encoded password for CA certificate's private key. This value can be empty.
	ServerKeyPassword *string `pulumi:"serverKeyPassword"`
	// List of services for which certificate needs to be enabled.
	Services []string `pulumi:"services"`
}

type BdsInstanceOperationCertificateManagementsManagementState struct {
	// The OCID of the cluster.
	BdsInstanceId pulumi.StringPtrInput
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringPtrInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	EnableOperationCertificateManagement pulumi.BoolPtrInput
	// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
	HostCertDetails BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayInput
	// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RenewOperationCertificateManagement pulumi.BoolPtrInput
	// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
	RootCertificate pulumi.StringPtrInput
	// Base-64 encoded password for CA certificate's private key. This value can be empty.
	ServerKeyPassword pulumi.StringPtrInput
	// List of services for which certificate needs to be enabled.
	Services pulumi.StringArrayInput
}

func (BdsInstanceOperationCertificateManagementsManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*bdsInstanceOperationCertificateManagementsManagementState)(nil)).Elem()
}

type bdsInstanceOperationCertificateManagementsManagementArgs struct {
	// The OCID of the cluster.
	BdsInstanceId string `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword string `pulumi:"clusterAdminPassword"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	EnableOperationCertificateManagement bool `pulumi:"enableOperationCertificateManagement"`
	// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
	HostCertDetails []BdsInstanceOperationCertificateManagementsManagementHostCertDetail `pulumi:"hostCertDetails"`
	// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RenewOperationCertificateManagement bool `pulumi:"renewOperationCertificateManagement"`
	// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
	RootCertificate *string `pulumi:"rootCertificate"`
	// Base-64 encoded password for CA certificate's private key. This value can be empty.
	ServerKeyPassword *string `pulumi:"serverKeyPassword"`
	// List of services for which certificate needs to be enabled.
	Services []string `pulumi:"services"`
}

// The set of arguments for constructing a BdsInstanceOperationCertificateManagementsManagement resource.
type BdsInstanceOperationCertificateManagementsManagementArgs struct {
	// The OCID of the cluster.
	BdsInstanceId pulumi.StringInput
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	EnableOperationCertificateManagement pulumi.BoolInput
	// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
	HostCertDetails BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayInput
	// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RenewOperationCertificateManagement pulumi.BoolInput
	// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
	RootCertificate pulumi.StringPtrInput
	// Base-64 encoded password for CA certificate's private key. This value can be empty.
	ServerKeyPassword pulumi.StringPtrInput
	// List of services for which certificate needs to be enabled.
	Services pulumi.StringArrayInput
}

func (BdsInstanceOperationCertificateManagementsManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bdsInstanceOperationCertificateManagementsManagementArgs)(nil)).Elem()
}

type BdsInstanceOperationCertificateManagementsManagementInput interface {
	pulumi.Input

	ToBdsInstanceOperationCertificateManagementsManagementOutput() BdsInstanceOperationCertificateManagementsManagementOutput
	ToBdsInstanceOperationCertificateManagementsManagementOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementOutput
}

func (*BdsInstanceOperationCertificateManagementsManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (i *BdsInstanceOperationCertificateManagementsManagement) ToBdsInstanceOperationCertificateManagementsManagementOutput() BdsInstanceOperationCertificateManagementsManagementOutput {
	return i.ToBdsInstanceOperationCertificateManagementsManagementOutputWithContext(context.Background())
}

func (i *BdsInstanceOperationCertificateManagementsManagement) ToBdsInstanceOperationCertificateManagementsManagementOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceOperationCertificateManagementsManagementOutput)
}

// BdsInstanceOperationCertificateManagementsManagementArrayInput is an input type that accepts BdsInstanceOperationCertificateManagementsManagementArray and BdsInstanceOperationCertificateManagementsManagementArrayOutput values.
// You can construct a concrete instance of `BdsInstanceOperationCertificateManagementsManagementArrayInput` via:
//
//	BdsInstanceOperationCertificateManagementsManagementArray{ BdsInstanceOperationCertificateManagementsManagementArgs{...} }
type BdsInstanceOperationCertificateManagementsManagementArrayInput interface {
	pulumi.Input

	ToBdsInstanceOperationCertificateManagementsManagementArrayOutput() BdsInstanceOperationCertificateManagementsManagementArrayOutput
	ToBdsInstanceOperationCertificateManagementsManagementArrayOutputWithContext(context.Context) BdsInstanceOperationCertificateManagementsManagementArrayOutput
}

type BdsInstanceOperationCertificateManagementsManagementArray []BdsInstanceOperationCertificateManagementsManagementInput

func (BdsInstanceOperationCertificateManagementsManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (i BdsInstanceOperationCertificateManagementsManagementArray) ToBdsInstanceOperationCertificateManagementsManagementArrayOutput() BdsInstanceOperationCertificateManagementsManagementArrayOutput {
	return i.ToBdsInstanceOperationCertificateManagementsManagementArrayOutputWithContext(context.Background())
}

func (i BdsInstanceOperationCertificateManagementsManagementArray) ToBdsInstanceOperationCertificateManagementsManagementArrayOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceOperationCertificateManagementsManagementArrayOutput)
}

// BdsInstanceOperationCertificateManagementsManagementMapInput is an input type that accepts BdsInstanceOperationCertificateManagementsManagementMap and BdsInstanceOperationCertificateManagementsManagementMapOutput values.
// You can construct a concrete instance of `BdsInstanceOperationCertificateManagementsManagementMapInput` via:
//
//	BdsInstanceOperationCertificateManagementsManagementMap{ "key": BdsInstanceOperationCertificateManagementsManagementArgs{...} }
type BdsInstanceOperationCertificateManagementsManagementMapInput interface {
	pulumi.Input

	ToBdsInstanceOperationCertificateManagementsManagementMapOutput() BdsInstanceOperationCertificateManagementsManagementMapOutput
	ToBdsInstanceOperationCertificateManagementsManagementMapOutputWithContext(context.Context) BdsInstanceOperationCertificateManagementsManagementMapOutput
}

type BdsInstanceOperationCertificateManagementsManagementMap map[string]BdsInstanceOperationCertificateManagementsManagementInput

func (BdsInstanceOperationCertificateManagementsManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (i BdsInstanceOperationCertificateManagementsManagementMap) ToBdsInstanceOperationCertificateManagementsManagementMapOutput() BdsInstanceOperationCertificateManagementsManagementMapOutput {
	return i.ToBdsInstanceOperationCertificateManagementsManagementMapOutputWithContext(context.Background())
}

func (i BdsInstanceOperationCertificateManagementsManagementMap) ToBdsInstanceOperationCertificateManagementsManagementMapOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceOperationCertificateManagementsManagementMapOutput)
}

type BdsInstanceOperationCertificateManagementsManagementOutput struct{ *pulumi.OutputState }

func (BdsInstanceOperationCertificateManagementsManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (o BdsInstanceOperationCertificateManagementsManagementOutput) ToBdsInstanceOperationCertificateManagementsManagementOutput() BdsInstanceOperationCertificateManagementsManagementOutput {
	return o
}

func (o BdsInstanceOperationCertificateManagementsManagementOutput) ToBdsInstanceOperationCertificateManagementsManagementOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementOutput {
	return o
}

// The OCID of the cluster.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) BdsInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.StringOutput {
		return v.BdsInstanceId
	}).(pulumi.StringOutput)
}

// Base-64 encoded password for the cluster admin user.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) ClusterAdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.StringOutput {
		return v.ClusterAdminPassword
	}).(pulumi.StringOutput)
}

// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) EnableOperationCertificateManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.BoolOutput {
		return v.EnableOperationCertificateManagement
	}).(pulumi.BoolOutput)
}

// List of leaf certificates to use for services on each host. If custom host certificate is provided the root certificate becomes required.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) HostCertDetails() BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayOutput {
		return v.HostCertDetails
	}).(BdsInstanceOperationCertificateManagementsManagementHostCertDetailArrayOutput)
}

// (Updatable) A required field when set to `true` calls renew action and when set to `false` defaults to enable_operation_certificate_management's value action.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o BdsInstanceOperationCertificateManagementsManagementOutput) RenewOperationCertificateManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.BoolOutput {
		return v.RenewOperationCertificateManagement
	}).(pulumi.BoolOutput)
}

// Plain text certificate/s in order, separated by new line character. If not provided in request a self-signed root certificate is generated inside the cluster. In case hostCertDetails is provided, root certificate is mandatory.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) RootCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.StringOutput {
		return v.RootCertificate
	}).(pulumi.StringOutput)
}

// Base-64 encoded password for CA certificate's private key. This value can be empty.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) ServerKeyPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.StringOutput {
		return v.ServerKeyPassword
	}).(pulumi.StringOutput)
}

// List of services for which certificate needs to be enabled.
func (o BdsInstanceOperationCertificateManagementsManagementOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BdsInstanceOperationCertificateManagementsManagement) pulumi.StringArrayOutput {
		return v.Services
	}).(pulumi.StringArrayOutput)
}

type BdsInstanceOperationCertificateManagementsManagementArrayOutput struct{ *pulumi.OutputState }

func (BdsInstanceOperationCertificateManagementsManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (o BdsInstanceOperationCertificateManagementsManagementArrayOutput) ToBdsInstanceOperationCertificateManagementsManagementArrayOutput() BdsInstanceOperationCertificateManagementsManagementArrayOutput {
	return o
}

func (o BdsInstanceOperationCertificateManagementsManagementArrayOutput) ToBdsInstanceOperationCertificateManagementsManagementArrayOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementArrayOutput {
	return o
}

func (o BdsInstanceOperationCertificateManagementsManagementArrayOutput) Index(i pulumi.IntInput) BdsInstanceOperationCertificateManagementsManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BdsInstanceOperationCertificateManagementsManagement {
		return vs[0].([]*BdsInstanceOperationCertificateManagementsManagement)[vs[1].(int)]
	}).(BdsInstanceOperationCertificateManagementsManagementOutput)
}

type BdsInstanceOperationCertificateManagementsManagementMapOutput struct{ *pulumi.OutputState }

func (BdsInstanceOperationCertificateManagementsManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BdsInstanceOperationCertificateManagementsManagement)(nil)).Elem()
}

func (o BdsInstanceOperationCertificateManagementsManagementMapOutput) ToBdsInstanceOperationCertificateManagementsManagementMapOutput() BdsInstanceOperationCertificateManagementsManagementMapOutput {
	return o
}

func (o BdsInstanceOperationCertificateManagementsManagementMapOutput) ToBdsInstanceOperationCertificateManagementsManagementMapOutputWithContext(ctx context.Context) BdsInstanceOperationCertificateManagementsManagementMapOutput {
	return o
}

func (o BdsInstanceOperationCertificateManagementsManagementMapOutput) MapIndex(k pulumi.StringInput) BdsInstanceOperationCertificateManagementsManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BdsInstanceOperationCertificateManagementsManagement {
		return vs[0].(map[string]*BdsInstanceOperationCertificateManagementsManagement)[vs[1].(string)]
	}).(BdsInstanceOperationCertificateManagementsManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceOperationCertificateManagementsManagementInput)(nil)).Elem(), &BdsInstanceOperationCertificateManagementsManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceOperationCertificateManagementsManagementArrayInput)(nil)).Elem(), BdsInstanceOperationCertificateManagementsManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceOperationCertificateManagementsManagementMapInput)(nil)).Elem(), BdsInstanceOperationCertificateManagementsManagementMap{})
	pulumi.RegisterOutputType(BdsInstanceOperationCertificateManagementsManagementOutput{})
	pulumi.RegisterOutputType(BdsInstanceOperationCertificateManagementsManagementArrayOutput{})
	pulumi.RegisterOutputType(BdsInstanceOperationCertificateManagementsManagementMapOutput{})
}
