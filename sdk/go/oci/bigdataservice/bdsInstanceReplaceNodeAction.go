// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bigdataservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource replaces the node with the given hostname, in Oracle Cloud Infrastructure Big Data Service cluster.
//
// Replace the node with the given host name in the cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/bigdataservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bigdataservice.NewBdsInstanceReplaceNodeAction(ctx, "test_bds_instance_replace_node_action", &bigdataservice.BdsInstanceReplaceNodeActionArgs{
//				BdsInstanceId:        pulumi.Any(testBdsInstance.Id),
//				NodeHostName:         pulumi.Any(bdsInstanceReplaceNodeAction.NodeHostName),
//				NodeBackupId:         pulumi.Any(bdsInstanceReplaceNodeAction.NodeBackupId),
//				ClusterAdminPassword: pulumi.Any(testBdsInstance.ClusterAdminPassword),
//				Shape:                pulumi.Any(shape),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BdsInstanceReplaceNodeAction struct {
	pulumi.CustomResourceState

	// The OCID of the cluster.
	BdsInstanceId pulumi.StringOutput `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringOutput `pulumi:"clusterAdminPassword"`
	// The id of the nodeBackup to use for replacing the node.
	NodeBackupId pulumi.StringOutput `pulumi:"nodeBackupId"`
	// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
	NodeHostName pulumi.StringOutput `pulumi:"nodeHostName"`
	// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Shape pulumi.StringPtrOutput `pulumi:"shape"`
}

// NewBdsInstanceReplaceNodeAction registers a new resource with the given unique name, arguments, and options.
func NewBdsInstanceReplaceNodeAction(ctx *pulumi.Context,
	name string, args *BdsInstanceReplaceNodeActionArgs, opts ...pulumi.ResourceOption) (*BdsInstanceReplaceNodeAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BdsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'BdsInstanceId'")
	}
	if args.ClusterAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'ClusterAdminPassword'")
	}
	if args.NodeBackupId == nil {
		return nil, errors.New("invalid value for required argument 'NodeBackupId'")
	}
	if args.NodeHostName == nil {
		return nil, errors.New("invalid value for required argument 'NodeHostName'")
	}
	if args.ClusterAdminPassword != nil {
		args.ClusterAdminPassword = pulumi.ToSecret(args.ClusterAdminPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterAdminPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BdsInstanceReplaceNodeAction
	err := ctx.RegisterResource("oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBdsInstanceReplaceNodeAction gets an existing BdsInstanceReplaceNodeAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBdsInstanceReplaceNodeAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BdsInstanceReplaceNodeActionState, opts ...pulumi.ResourceOption) (*BdsInstanceReplaceNodeAction, error) {
	var resource BdsInstanceReplaceNodeAction
	err := ctx.ReadResource("oci:BigDataService/bdsInstanceReplaceNodeAction:BdsInstanceReplaceNodeAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BdsInstanceReplaceNodeAction resources.
type bdsInstanceReplaceNodeActionState struct {
	// The OCID of the cluster.
	BdsInstanceId *string `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword *string `pulumi:"clusterAdminPassword"`
	// The id of the nodeBackup to use for replacing the node.
	NodeBackupId *string `pulumi:"nodeBackupId"`
	// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
	NodeHostName *string `pulumi:"nodeHostName"`
	// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Shape *string `pulumi:"shape"`
}

type BdsInstanceReplaceNodeActionState struct {
	// The OCID of the cluster.
	BdsInstanceId pulumi.StringPtrInput
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringPtrInput
	// The id of the nodeBackup to use for replacing the node.
	NodeBackupId pulumi.StringPtrInput
	// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
	NodeHostName pulumi.StringPtrInput
	// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Shape pulumi.StringPtrInput
}

func (BdsInstanceReplaceNodeActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bdsInstanceReplaceNodeActionState)(nil)).Elem()
}

type bdsInstanceReplaceNodeActionArgs struct {
	// The OCID of the cluster.
	BdsInstanceId string `pulumi:"bdsInstanceId"`
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword string `pulumi:"clusterAdminPassword"`
	// The id of the nodeBackup to use for replacing the node.
	NodeBackupId string `pulumi:"nodeBackupId"`
	// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
	NodeHostName string `pulumi:"nodeHostName"`
	// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Shape *string `pulumi:"shape"`
}

// The set of arguments for constructing a BdsInstanceReplaceNodeAction resource.
type BdsInstanceReplaceNodeActionArgs struct {
	// The OCID of the cluster.
	BdsInstanceId pulumi.StringInput
	// Base-64 encoded password for the cluster admin user.
	ClusterAdminPassword pulumi.StringInput
	// The id of the nodeBackup to use for replacing the node.
	NodeBackupId pulumi.StringInput
	// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
	NodeHostName pulumi.StringInput
	// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Shape pulumi.StringPtrInput
}

func (BdsInstanceReplaceNodeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bdsInstanceReplaceNodeActionArgs)(nil)).Elem()
}

type BdsInstanceReplaceNodeActionInput interface {
	pulumi.Input

	ToBdsInstanceReplaceNodeActionOutput() BdsInstanceReplaceNodeActionOutput
	ToBdsInstanceReplaceNodeActionOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionOutput
}

func (*BdsInstanceReplaceNodeAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (i *BdsInstanceReplaceNodeAction) ToBdsInstanceReplaceNodeActionOutput() BdsInstanceReplaceNodeActionOutput {
	return i.ToBdsInstanceReplaceNodeActionOutputWithContext(context.Background())
}

func (i *BdsInstanceReplaceNodeAction) ToBdsInstanceReplaceNodeActionOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceReplaceNodeActionOutput)
}

// BdsInstanceReplaceNodeActionArrayInput is an input type that accepts BdsInstanceReplaceNodeActionArray and BdsInstanceReplaceNodeActionArrayOutput values.
// You can construct a concrete instance of `BdsInstanceReplaceNodeActionArrayInput` via:
//
//	BdsInstanceReplaceNodeActionArray{ BdsInstanceReplaceNodeActionArgs{...} }
type BdsInstanceReplaceNodeActionArrayInput interface {
	pulumi.Input

	ToBdsInstanceReplaceNodeActionArrayOutput() BdsInstanceReplaceNodeActionArrayOutput
	ToBdsInstanceReplaceNodeActionArrayOutputWithContext(context.Context) BdsInstanceReplaceNodeActionArrayOutput
}

type BdsInstanceReplaceNodeActionArray []BdsInstanceReplaceNodeActionInput

func (BdsInstanceReplaceNodeActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (i BdsInstanceReplaceNodeActionArray) ToBdsInstanceReplaceNodeActionArrayOutput() BdsInstanceReplaceNodeActionArrayOutput {
	return i.ToBdsInstanceReplaceNodeActionArrayOutputWithContext(context.Background())
}

func (i BdsInstanceReplaceNodeActionArray) ToBdsInstanceReplaceNodeActionArrayOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceReplaceNodeActionArrayOutput)
}

// BdsInstanceReplaceNodeActionMapInput is an input type that accepts BdsInstanceReplaceNodeActionMap and BdsInstanceReplaceNodeActionMapOutput values.
// You can construct a concrete instance of `BdsInstanceReplaceNodeActionMapInput` via:
//
//	BdsInstanceReplaceNodeActionMap{ "key": BdsInstanceReplaceNodeActionArgs{...} }
type BdsInstanceReplaceNodeActionMapInput interface {
	pulumi.Input

	ToBdsInstanceReplaceNodeActionMapOutput() BdsInstanceReplaceNodeActionMapOutput
	ToBdsInstanceReplaceNodeActionMapOutputWithContext(context.Context) BdsInstanceReplaceNodeActionMapOutput
}

type BdsInstanceReplaceNodeActionMap map[string]BdsInstanceReplaceNodeActionInput

func (BdsInstanceReplaceNodeActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (i BdsInstanceReplaceNodeActionMap) ToBdsInstanceReplaceNodeActionMapOutput() BdsInstanceReplaceNodeActionMapOutput {
	return i.ToBdsInstanceReplaceNodeActionMapOutputWithContext(context.Background())
}

func (i BdsInstanceReplaceNodeActionMap) ToBdsInstanceReplaceNodeActionMapOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BdsInstanceReplaceNodeActionMapOutput)
}

type BdsInstanceReplaceNodeActionOutput struct{ *pulumi.OutputState }

func (BdsInstanceReplaceNodeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (o BdsInstanceReplaceNodeActionOutput) ToBdsInstanceReplaceNodeActionOutput() BdsInstanceReplaceNodeActionOutput {
	return o
}

func (o BdsInstanceReplaceNodeActionOutput) ToBdsInstanceReplaceNodeActionOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionOutput {
	return o
}

// The OCID of the cluster.
func (o BdsInstanceReplaceNodeActionOutput) BdsInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceReplaceNodeAction) pulumi.StringOutput { return v.BdsInstanceId }).(pulumi.StringOutput)
}

// Base-64 encoded password for the cluster admin user.
func (o BdsInstanceReplaceNodeActionOutput) ClusterAdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceReplaceNodeAction) pulumi.StringOutput { return v.ClusterAdminPassword }).(pulumi.StringOutput)
}

// The id of the nodeBackup to use for replacing the node.
func (o BdsInstanceReplaceNodeActionOutput) NodeBackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceReplaceNodeAction) pulumi.StringOutput { return v.NodeBackupId }).(pulumi.StringOutput)
}

// Host name of the node to replace. MASTER, UTILITY and EDGE node are only supported types
func (o BdsInstanceReplaceNodeActionOutput) NodeHostName() pulumi.StringOutput {
	return o.ApplyT(func(v *BdsInstanceReplaceNodeAction) pulumi.StringOutput { return v.NodeHostName }).(pulumi.StringOutput)
}

// Shape of the new vm when replacing the node. If not provided, BDS will attempt to replace the node with the shape of current node.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o BdsInstanceReplaceNodeActionOutput) Shape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BdsInstanceReplaceNodeAction) pulumi.StringPtrOutput { return v.Shape }).(pulumi.StringPtrOutput)
}

type BdsInstanceReplaceNodeActionArrayOutput struct{ *pulumi.OutputState }

func (BdsInstanceReplaceNodeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (o BdsInstanceReplaceNodeActionArrayOutput) ToBdsInstanceReplaceNodeActionArrayOutput() BdsInstanceReplaceNodeActionArrayOutput {
	return o
}

func (o BdsInstanceReplaceNodeActionArrayOutput) ToBdsInstanceReplaceNodeActionArrayOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionArrayOutput {
	return o
}

func (o BdsInstanceReplaceNodeActionArrayOutput) Index(i pulumi.IntInput) BdsInstanceReplaceNodeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BdsInstanceReplaceNodeAction {
		return vs[0].([]*BdsInstanceReplaceNodeAction)[vs[1].(int)]
	}).(BdsInstanceReplaceNodeActionOutput)
}

type BdsInstanceReplaceNodeActionMapOutput struct{ *pulumi.OutputState }

func (BdsInstanceReplaceNodeActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BdsInstanceReplaceNodeAction)(nil)).Elem()
}

func (o BdsInstanceReplaceNodeActionMapOutput) ToBdsInstanceReplaceNodeActionMapOutput() BdsInstanceReplaceNodeActionMapOutput {
	return o
}

func (o BdsInstanceReplaceNodeActionMapOutput) ToBdsInstanceReplaceNodeActionMapOutputWithContext(ctx context.Context) BdsInstanceReplaceNodeActionMapOutput {
	return o
}

func (o BdsInstanceReplaceNodeActionMapOutput) MapIndex(k pulumi.StringInput) BdsInstanceReplaceNodeActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BdsInstanceReplaceNodeAction {
		return vs[0].(map[string]*BdsInstanceReplaceNodeAction)[vs[1].(string)]
	}).(BdsInstanceReplaceNodeActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceReplaceNodeActionInput)(nil)).Elem(), &BdsInstanceReplaceNodeAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceReplaceNodeActionArrayInput)(nil)).Elem(), BdsInstanceReplaceNodeActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BdsInstanceReplaceNodeActionMapInput)(nil)).Elem(), BdsInstanceReplaceNodeActionMap{})
	pulumi.RegisterOutputType(BdsInstanceReplaceNodeActionOutput{})
	pulumi.RegisterOutputType(BdsInstanceReplaceNodeActionArrayOutput{})
	pulumi.RegisterOutputType(BdsInstanceReplaceNodeActionMapOutput{})
}
