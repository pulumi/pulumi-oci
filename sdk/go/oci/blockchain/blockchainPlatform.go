// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockchain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Blockchain Platform resource in Oracle Cloud Infrastructure Blockchain service.
//
// Creates a new Blockchain Platform.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Blockchain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Blockchain.NewBlockchainPlatform(ctx, "testBlockchainPlatform", &Blockchain.BlockchainPlatformArgs{
//				CompartmentId:     pulumi.Any(_var.Compartment_id),
//				ComputeShape:      pulumi.Any(_var.Blockchain_platform_compute_shape),
//				DisplayName:       pulumi.Any(_var.Blockchain_platform_display_name),
//				IdcsAccessToken:   pulumi.Any(_var.Blockchain_platform_idcs_access_token),
//				PlatformRole:      pulumi.Any(_var.Blockchain_platform_platform_role),
//				CaCertArchiveText: pulumi.Any(_var.Blockchain_platform_ca_cert_archive_text),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description:     pulumi.Any(_var.Blockchain_platform_description),
//				FederatedUserId: pulumi.Any(oci_identity_user.Test_user.Id),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				IsByol:          pulumi.Any(_var.Blockchain_platform_is_byol),
//				PlatformVersion: pulumi.Any(_var.Blockchain_platform_platform_version),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BlockchainPlatforms can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Blockchain/blockchainPlatform:BlockchainPlatform test_blockchain_platform "id"
//
// ```
type BlockchainPlatform struct {
	pulumi.CustomResourceState

	// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
	CaCertArchiveText pulumi.StringOutput `pulumi:"caCertArchiveText"`
	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Blockchain Platform component details.
	ComponentDetails BlockchainPlatformComponentDetailArrayOutput `pulumi:"componentDetails"`
	// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
	ComputeShape pulumi.StringOutput `pulumi:"computeShape"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Platform Instance Description
	Description pulumi.StringOutput `pulumi:"description"`
	// Platform Instance Display name, can be renamed
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Identifier for a federated user
	FederatedUserId pulumi.StringOutput `pulumi:"federatedUserId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// List of OcpuUtilization for all hosts
	HostOcpuUtilizationInfos BlockchainPlatformHostOcpuUtilizationInfoArrayOutput `pulumi:"hostOcpuUtilizationInfos"`
	// IDCS access token with Identity Domain Administrator role
	IdcsAccessToken pulumi.StringOutput `pulumi:"idcsAccessToken"`
	// Bring your own license
	IsByol pulumi.BoolOutput `pulumi:"isByol"`
	// True for multi-AD blockchain plaforms, false for single-AD
	IsMultiAd pulumi.BoolOutput `pulumi:"isMultiAd"`
	// An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
	LoadBalancerShape pulumi.StringOutput `pulumi:"loadBalancerShape"`
	// Role of platform - founder or participant
	PlatformRole pulumi.StringOutput `pulumi:"platformRole"`
	// Type of Platform shape - DEFAULT or CUSTOM
	PlatformShapeType pulumi.StringOutput `pulumi:"platformShapeType"`
	// Platform version
	PlatformVersion pulumi.StringOutput `pulumi:"platformVersion"`
	// Number of replicas of service components like Rest Proxy, CA and Console
	Replicas BlockchainPlatformReplicasOutput `pulumi:"replicas"`
	// Service endpoint URL, valid post-provisioning
	ServiceEndpoint pulumi.StringOutput `pulumi:"serviceEndpoint"`
	// The version of the Platform Instance.
	ServiceVersion pulumi.StringOutput `pulumi:"serviceVersion"`
	// The current state of the Platform Instance.
	State pulumi.StringOutput `pulumi:"state"`
	// Storage size in TBs
	StorageSizeInTbs pulumi.Float64Output `pulumi:"storageSizeInTbs"`
	// Storage used in TBs
	StorageUsedInTbs pulumi.Float64Output `pulumi:"storageUsedInTbs"`
	// The time the the Platform Instance was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the Platform Instance was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// Number of total OCPUs allocated to the platform cluster
	TotalOcpuCapacity pulumi.IntOutput `pulumi:"totalOcpuCapacity"`
}

// NewBlockchainPlatform registers a new resource with the given unique name, arguments, and options.
func NewBlockchainPlatform(ctx *pulumi.Context,
	name string, args *BlockchainPlatformArgs, opts ...pulumi.ResourceOption) (*BlockchainPlatform, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ComputeShape == nil {
		return nil, errors.New("invalid value for required argument 'ComputeShape'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IdcsAccessToken == nil {
		return nil, errors.New("invalid value for required argument 'IdcsAccessToken'")
	}
	if args.PlatformRole == nil {
		return nil, errors.New("invalid value for required argument 'PlatformRole'")
	}
	var resource BlockchainPlatform
	err := ctx.RegisterResource("oci:Blockchain/blockchainPlatform:BlockchainPlatform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockchainPlatform gets an existing BlockchainPlatform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockchainPlatform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockchainPlatformState, opts ...pulumi.ResourceOption) (*BlockchainPlatform, error) {
	var resource BlockchainPlatform
	err := ctx.ReadResource("oci:Blockchain/blockchainPlatform:BlockchainPlatform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockchainPlatform resources.
type blockchainPlatformState struct {
	// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
	CaCertArchiveText *string `pulumi:"caCertArchiveText"`
	// (Updatable) Compartment Identifier
	CompartmentId *string `pulumi:"compartmentId"`
	// Blockchain Platform component details.
	ComponentDetails []BlockchainPlatformComponentDetail `pulumi:"componentDetails"`
	// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
	ComputeShape *string `pulumi:"computeShape"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Platform Instance Description
	Description *string `pulumi:"description"`
	// Platform Instance Display name, can be renamed
	DisplayName *string `pulumi:"displayName"`
	// Identifier for a federated user
	FederatedUserId *string `pulumi:"federatedUserId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// List of OcpuUtilization for all hosts
	HostOcpuUtilizationInfos []BlockchainPlatformHostOcpuUtilizationInfo `pulumi:"hostOcpuUtilizationInfos"`
	// IDCS access token with Identity Domain Administrator role
	IdcsAccessToken *string `pulumi:"idcsAccessToken"`
	// Bring your own license
	IsByol *bool `pulumi:"isByol"`
	// True for multi-AD blockchain plaforms, false for single-AD
	IsMultiAd *bool `pulumi:"isMultiAd"`
	// An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
	LoadBalancerShape *string `pulumi:"loadBalancerShape"`
	// Role of platform - founder or participant
	PlatformRole *string `pulumi:"platformRole"`
	// Type of Platform shape - DEFAULT or CUSTOM
	PlatformShapeType *string `pulumi:"platformShapeType"`
	// Platform version
	PlatformVersion *string `pulumi:"platformVersion"`
	// Number of replicas of service components like Rest Proxy, CA and Console
	Replicas *BlockchainPlatformReplicas `pulumi:"replicas"`
	// Service endpoint URL, valid post-provisioning
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The version of the Platform Instance.
	ServiceVersion *string `pulumi:"serviceVersion"`
	// The current state of the Platform Instance.
	State *string `pulumi:"state"`
	// Storage size in TBs
	StorageSizeInTbs *float64 `pulumi:"storageSizeInTbs"`
	// Storage used in TBs
	StorageUsedInTbs *float64 `pulumi:"storageUsedInTbs"`
	// The time the the Platform Instance was created. An RFC3339 formatted datetime string
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the Platform Instance was updated. An RFC3339 formatted datetime string
	TimeUpdated *string `pulumi:"timeUpdated"`
	// Number of total OCPUs allocated to the platform cluster
	TotalOcpuCapacity *int `pulumi:"totalOcpuCapacity"`
}

type BlockchainPlatformState struct {
	// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
	CaCertArchiveText pulumi.StringPtrInput
	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringPtrInput
	// Blockchain Platform component details.
	ComponentDetails BlockchainPlatformComponentDetailArrayInput
	// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
	ComputeShape pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Platform Instance Description
	Description pulumi.StringPtrInput
	// Platform Instance Display name, can be renamed
	DisplayName pulumi.StringPtrInput
	// Identifier for a federated user
	FederatedUserId pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// List of OcpuUtilization for all hosts
	HostOcpuUtilizationInfos BlockchainPlatformHostOcpuUtilizationInfoArrayInput
	// IDCS access token with Identity Domain Administrator role
	IdcsAccessToken pulumi.StringPtrInput
	// Bring your own license
	IsByol pulumi.BoolPtrInput
	// True for multi-AD blockchain plaforms, false for single-AD
	IsMultiAd pulumi.BoolPtrInput
	// An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
	LoadBalancerShape pulumi.StringPtrInput
	// Role of platform - founder or participant
	PlatformRole pulumi.StringPtrInput
	// Type of Platform shape - DEFAULT or CUSTOM
	PlatformShapeType pulumi.StringPtrInput
	// Platform version
	PlatformVersion pulumi.StringPtrInput
	// Number of replicas of service components like Rest Proxy, CA and Console
	Replicas BlockchainPlatformReplicasPtrInput
	// Service endpoint URL, valid post-provisioning
	ServiceEndpoint pulumi.StringPtrInput
	// The version of the Platform Instance.
	ServiceVersion pulumi.StringPtrInput
	// The current state of the Platform Instance.
	State pulumi.StringPtrInput
	// Storage size in TBs
	StorageSizeInTbs pulumi.Float64PtrInput
	// Storage used in TBs
	StorageUsedInTbs pulumi.Float64PtrInput
	// The time the the Platform Instance was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringPtrInput
	// The time the Platform Instance was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringPtrInput
	// Number of total OCPUs allocated to the platform cluster
	TotalOcpuCapacity pulumi.IntPtrInput
}

func (BlockchainPlatformState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainPlatformState)(nil)).Elem()
}

type blockchainPlatformArgs struct {
	// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
	CaCertArchiveText *string `pulumi:"caCertArchiveText"`
	// (Updatable) Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
	ComputeShape string `pulumi:"computeShape"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Platform Instance Description
	Description *string `pulumi:"description"`
	// Platform Instance Display name, can be renamed
	DisplayName string `pulumi:"displayName"`
	// Identifier for a federated user
	FederatedUserId *string `pulumi:"federatedUserId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// IDCS access token with Identity Domain Administrator role
	IdcsAccessToken string `pulumi:"idcsAccessToken"`
	// Bring your own license
	IsByol *bool `pulumi:"isByol"`
	// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
	LoadBalancerShape *string `pulumi:"loadBalancerShape"`
	// Role of platform - founder or participant
	PlatformRole string `pulumi:"platformRole"`
	// Platform version
	PlatformVersion *string `pulumi:"platformVersion"`
	// Number of replicas of service components like Rest Proxy, CA and Console
	Replicas *BlockchainPlatformReplicas `pulumi:"replicas"`
	// Storage size in TBs
	StorageSizeInTbs *float64 `pulumi:"storageSizeInTbs"`
	// Number of total OCPUs allocated to the platform cluster
	TotalOcpuCapacity *int `pulumi:"totalOcpuCapacity"`
}

// The set of arguments for constructing a BlockchainPlatform resource.
type BlockchainPlatformArgs struct {
	// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
	CaCertArchiveText pulumi.StringPtrInput
	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringInput
	// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
	ComputeShape pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Platform Instance Description
	Description pulumi.StringPtrInput
	// Platform Instance Display name, can be renamed
	DisplayName pulumi.StringInput
	// Identifier for a federated user
	FederatedUserId pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// IDCS access token with Identity Domain Administrator role
	IdcsAccessToken pulumi.StringInput
	// Bring your own license
	IsByol pulumi.BoolPtrInput
	// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
	LoadBalancerShape pulumi.StringPtrInput
	// Role of platform - founder or participant
	PlatformRole pulumi.StringInput
	// Platform version
	PlatformVersion pulumi.StringPtrInput
	// Number of replicas of service components like Rest Proxy, CA and Console
	Replicas BlockchainPlatformReplicasPtrInput
	// Storage size in TBs
	StorageSizeInTbs pulumi.Float64PtrInput
	// Number of total OCPUs allocated to the platform cluster
	TotalOcpuCapacity pulumi.IntPtrInput
}

func (BlockchainPlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainPlatformArgs)(nil)).Elem()
}

type BlockchainPlatformInput interface {
	pulumi.Input

	ToBlockchainPlatformOutput() BlockchainPlatformOutput
	ToBlockchainPlatformOutputWithContext(ctx context.Context) BlockchainPlatformOutput
}

func (*BlockchainPlatform) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainPlatform)(nil)).Elem()
}

func (i *BlockchainPlatform) ToBlockchainPlatformOutput() BlockchainPlatformOutput {
	return i.ToBlockchainPlatformOutputWithContext(context.Background())
}

func (i *BlockchainPlatform) ToBlockchainPlatformOutputWithContext(ctx context.Context) BlockchainPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainPlatformOutput)
}

// BlockchainPlatformArrayInput is an input type that accepts BlockchainPlatformArray and BlockchainPlatformArrayOutput values.
// You can construct a concrete instance of `BlockchainPlatformArrayInput` via:
//
//	BlockchainPlatformArray{ BlockchainPlatformArgs{...} }
type BlockchainPlatformArrayInput interface {
	pulumi.Input

	ToBlockchainPlatformArrayOutput() BlockchainPlatformArrayOutput
	ToBlockchainPlatformArrayOutputWithContext(context.Context) BlockchainPlatformArrayOutput
}

type BlockchainPlatformArray []BlockchainPlatformInput

func (BlockchainPlatformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockchainPlatform)(nil)).Elem()
}

func (i BlockchainPlatformArray) ToBlockchainPlatformArrayOutput() BlockchainPlatformArrayOutput {
	return i.ToBlockchainPlatformArrayOutputWithContext(context.Background())
}

func (i BlockchainPlatformArray) ToBlockchainPlatformArrayOutputWithContext(ctx context.Context) BlockchainPlatformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainPlatformArrayOutput)
}

// BlockchainPlatformMapInput is an input type that accepts BlockchainPlatformMap and BlockchainPlatformMapOutput values.
// You can construct a concrete instance of `BlockchainPlatformMapInput` via:
//
//	BlockchainPlatformMap{ "key": BlockchainPlatformArgs{...} }
type BlockchainPlatformMapInput interface {
	pulumi.Input

	ToBlockchainPlatformMapOutput() BlockchainPlatformMapOutput
	ToBlockchainPlatformMapOutputWithContext(context.Context) BlockchainPlatformMapOutput
}

type BlockchainPlatformMap map[string]BlockchainPlatformInput

func (BlockchainPlatformMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockchainPlatform)(nil)).Elem()
}

func (i BlockchainPlatformMap) ToBlockchainPlatformMapOutput() BlockchainPlatformMapOutput {
	return i.ToBlockchainPlatformMapOutputWithContext(context.Background())
}

func (i BlockchainPlatformMap) ToBlockchainPlatformMapOutputWithContext(ctx context.Context) BlockchainPlatformMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainPlatformMapOutput)
}

type BlockchainPlatformOutput struct{ *pulumi.OutputState }

func (BlockchainPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainPlatform)(nil)).Elem()
}

func (o BlockchainPlatformOutput) ToBlockchainPlatformOutput() BlockchainPlatformOutput {
	return o
}

func (o BlockchainPlatformOutput) ToBlockchainPlatformOutputWithContext(ctx context.Context) BlockchainPlatformOutput {
	return o
}

// Base64 encoded text in ASCII character set of a Thirdparty CA Certificates archive file. The Archive file is a zip file containing third part CA Certificates, the ca key and certificate files used when issuing enrollment certificates (ECerts) and transaction certificates (TCerts). The chainfile (if it exists) contains the certificate chain which should be trusted for this CA, where the 1st in the chain is always the root CA certificate. File list in zip file [ca-cert.pem,ca-key.pem,ca-chain.pem(optional)].
func (o BlockchainPlatformOutput) CaCertArchiveText() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.CaCertArchiveText }).(pulumi.StringOutput)
}

// (Updatable) Compartment Identifier
func (o BlockchainPlatformOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Blockchain Platform component details.
func (o BlockchainPlatformOutput) ComponentDetails() BlockchainPlatformComponentDetailArrayOutput {
	return o.ApplyT(func(v *BlockchainPlatform) BlockchainPlatformComponentDetailArrayOutput { return v.ComponentDetails }).(BlockchainPlatformComponentDetailArrayOutput)
}

// Compute shape - STANDARD or ENTERPRISE_SMALL or ENTERPRISE_MEDIUM or ENTERPRISE_LARGE or ENTERPRISE_EXTRA_LARGE
func (o BlockchainPlatformOutput) ComputeShape() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.ComputeShape }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o BlockchainPlatformOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Platform Instance Description
func (o BlockchainPlatformOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Platform Instance Display name, can be renamed
func (o BlockchainPlatformOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Identifier for a federated user
func (o BlockchainPlatformOutput) FederatedUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.FederatedUserId }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o BlockchainPlatformOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// List of OcpuUtilization for all hosts
func (o BlockchainPlatformOutput) HostOcpuUtilizationInfos() BlockchainPlatformHostOcpuUtilizationInfoArrayOutput {
	return o.ApplyT(func(v *BlockchainPlatform) BlockchainPlatformHostOcpuUtilizationInfoArrayOutput {
		return v.HostOcpuUtilizationInfos
	}).(BlockchainPlatformHostOcpuUtilizationInfoArrayOutput)
}

// IDCS access token with Identity Domain Administrator role
func (o BlockchainPlatformOutput) IdcsAccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.IdcsAccessToken }).(pulumi.StringOutput)
}

// Bring your own license
func (o BlockchainPlatformOutput) IsByol() pulumi.BoolOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.BoolOutput { return v.IsByol }).(pulumi.BoolOutput)
}

// True for multi-AD blockchain plaforms, false for single-AD
func (o BlockchainPlatformOutput) IsMultiAd() pulumi.BoolOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.BoolOutput { return v.IsMultiAd }).(pulumi.BoolOutput)
}

// An message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o BlockchainPlatformOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) Type of Load Balancer shape - LB_100_MBPS or LB_400_MBPS. Default is LB_100_MBPS.
func (o BlockchainPlatformOutput) LoadBalancerShape() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.LoadBalancerShape }).(pulumi.StringOutput)
}

// Role of platform - founder or participant
func (o BlockchainPlatformOutput) PlatformRole() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.PlatformRole }).(pulumi.StringOutput)
}

// Type of Platform shape - DEFAULT or CUSTOM
func (o BlockchainPlatformOutput) PlatformShapeType() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.PlatformShapeType }).(pulumi.StringOutput)
}

// Platform version
func (o BlockchainPlatformOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.PlatformVersion }).(pulumi.StringOutput)
}

// Number of replicas of service components like Rest Proxy, CA and Console
func (o BlockchainPlatformOutput) Replicas() BlockchainPlatformReplicasOutput {
	return o.ApplyT(func(v *BlockchainPlatform) BlockchainPlatformReplicasOutput { return v.Replicas }).(BlockchainPlatformReplicasOutput)
}

// Service endpoint URL, valid post-provisioning
func (o BlockchainPlatformOutput) ServiceEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.ServiceEndpoint }).(pulumi.StringOutput)
}

// The version of the Platform Instance.
func (o BlockchainPlatformOutput) ServiceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.ServiceVersion }).(pulumi.StringOutput)
}

// The current state of the Platform Instance.
func (o BlockchainPlatformOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Storage size in TBs
func (o BlockchainPlatformOutput) StorageSizeInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.Float64Output { return v.StorageSizeInTbs }).(pulumi.Float64Output)
}

// Storage used in TBs
func (o BlockchainPlatformOutput) StorageUsedInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.Float64Output { return v.StorageUsedInTbs }).(pulumi.Float64Output)
}

// The time the the Platform Instance was created. An RFC3339 formatted datetime string
func (o BlockchainPlatformOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Platform Instance was updated. An RFC3339 formatted datetime string
func (o BlockchainPlatformOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Number of total OCPUs allocated to the platform cluster
func (o BlockchainPlatformOutput) TotalOcpuCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockchainPlatform) pulumi.IntOutput { return v.TotalOcpuCapacity }).(pulumi.IntOutput)
}

type BlockchainPlatformArrayOutput struct{ *pulumi.OutputState }

func (BlockchainPlatformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockchainPlatform)(nil)).Elem()
}

func (o BlockchainPlatformArrayOutput) ToBlockchainPlatformArrayOutput() BlockchainPlatformArrayOutput {
	return o
}

func (o BlockchainPlatformArrayOutput) ToBlockchainPlatformArrayOutputWithContext(ctx context.Context) BlockchainPlatformArrayOutput {
	return o
}

func (o BlockchainPlatformArrayOutput) Index(i pulumi.IntInput) BlockchainPlatformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockchainPlatform {
		return vs[0].([]*BlockchainPlatform)[vs[1].(int)]
	}).(BlockchainPlatformOutput)
}

type BlockchainPlatformMapOutput struct{ *pulumi.OutputState }

func (BlockchainPlatformMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockchainPlatform)(nil)).Elem()
}

func (o BlockchainPlatformMapOutput) ToBlockchainPlatformMapOutput() BlockchainPlatformMapOutput {
	return o
}

func (o BlockchainPlatformMapOutput) ToBlockchainPlatformMapOutputWithContext(ctx context.Context) BlockchainPlatformMapOutput {
	return o
}

func (o BlockchainPlatformMapOutput) MapIndex(k pulumi.StringInput) BlockchainPlatformOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockchainPlatform {
		return vs[0].(map[string]*BlockchainPlatform)[vs[1].(string)]
	}).(BlockchainPlatformOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainPlatformInput)(nil)).Elem(), &BlockchainPlatform{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainPlatformArrayInput)(nil)).Elem(), BlockchainPlatformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainPlatformMapInput)(nil)).Elem(), BlockchainPlatformMap{})
	pulumi.RegisterOutputType(BlockchainPlatformOutput{})
	pulumi.RegisterOutputType(BlockchainPlatformArrayOutput{})
	pulumi.RegisterOutputType(BlockchainPlatformMapOutput{})
}
