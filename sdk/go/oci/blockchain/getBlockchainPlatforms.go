// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockchain

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Blockchain Platforms in Oracle Cloud Infrastructure Blockchain service.
//
// # Returns a list Blockchain Platform Instances in a compartment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/blockchain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := blockchain.GetBlockchainPlatforms(ctx, &blockchain.GetBlockchainPlatformsArgs{
//				CompartmentId: compartmentId,
//				DisplayName:   pulumi.StringRef(blockchainPlatformDisplayName),
//				State:         pulumi.StringRef(blockchainPlatformState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBlockchainPlatforms(ctx *pulumi.Context, args *GetBlockchainPlatformsArgs, opts ...pulumi.InvokeOption) (*GetBlockchainPlatformsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBlockchainPlatformsResult
	err := ctx.Invoke("oci:Blockchain/getBlockchainPlatforms:getBlockchainPlatforms", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBlockchainPlatforms.
type GetBlockchainPlatformsArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Example: `My new resource`
	DisplayName *string                        `pulumi:"displayName"`
	Filters     []GetBlockchainPlatformsFilter `pulumi:"filters"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getBlockchainPlatforms.
type GetBlockchainPlatformsResult struct {
	// The list of blockchain_platform_collection.
	BlockchainPlatformCollections []GetBlockchainPlatformsBlockchainPlatformCollection `pulumi:"blockchainPlatformCollections"`
	// Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// Platform Instance Display name, can be renamed
	DisplayName *string                        `pulumi:"displayName"`
	Filters     []GetBlockchainPlatformsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The current state of the Platform Instance.
	State *string `pulumi:"state"`
}

func GetBlockchainPlatformsOutput(ctx *pulumi.Context, args GetBlockchainPlatformsOutputArgs, opts ...pulumi.InvokeOption) GetBlockchainPlatformsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetBlockchainPlatformsResultOutput, error) {
			args := v.(GetBlockchainPlatformsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Blockchain/getBlockchainPlatforms:getBlockchainPlatforms", args, GetBlockchainPlatformsResultOutput{}, options).(GetBlockchainPlatformsResultOutput), nil
		}).(GetBlockchainPlatformsResultOutput)
}

// A collection of arguments for invoking getBlockchainPlatforms.
type GetBlockchainPlatformsOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Example: `My new resource`
	DisplayName pulumi.StringPtrInput                  `pulumi:"displayName"`
	Filters     GetBlockchainPlatformsFilterArrayInput `pulumi:"filters"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetBlockchainPlatformsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBlockchainPlatformsArgs)(nil)).Elem()
}

// A collection of values returned by getBlockchainPlatforms.
type GetBlockchainPlatformsResultOutput struct{ *pulumi.OutputState }

func (GetBlockchainPlatformsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBlockchainPlatformsResult)(nil)).Elem()
}

func (o GetBlockchainPlatformsResultOutput) ToGetBlockchainPlatformsResultOutput() GetBlockchainPlatformsResultOutput {
	return o
}

func (o GetBlockchainPlatformsResultOutput) ToGetBlockchainPlatformsResultOutputWithContext(ctx context.Context) GetBlockchainPlatformsResultOutput {
	return o
}

// The list of blockchain_platform_collection.
func (o GetBlockchainPlatformsResultOutput) BlockchainPlatformCollections() GetBlockchainPlatformsBlockchainPlatformCollectionArrayOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) []GetBlockchainPlatformsBlockchainPlatformCollection {
		return v.BlockchainPlatformCollections
	}).(GetBlockchainPlatformsBlockchainPlatformCollectionArrayOutput)
}

// Compartment Identifier
func (o GetBlockchainPlatformsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Platform Instance Display name, can be renamed
func (o GetBlockchainPlatformsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetBlockchainPlatformsResultOutput) Filters() GetBlockchainPlatformsFilterArrayOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) []GetBlockchainPlatformsFilter { return v.Filters }).(GetBlockchainPlatformsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBlockchainPlatformsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The current state of the Platform Instance.
func (o GetBlockchainPlatformsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBlockchainPlatformsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBlockchainPlatformsResultOutput{})
}
