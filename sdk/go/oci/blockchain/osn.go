// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package blockchain

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Osn resource in Oracle Cloud Infrastructure Blockchain service.
//
// # Create Blockchain Platform Osn
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Blockchain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Blockchain.NewOsn(ctx, "testOsn", &Blockchain.OsnArgs{
//				Ad:                   pulumi.Any(_var.Osn_ad),
//				BlockchainPlatformId: pulumi.Any(oci_blockchain_blockchain_platform.Test_blockchain_platform.Id),
//				OcpuAllocationParam: &blockchain.OsnOcpuAllocationParamArgs{
//					OcpuAllocationNumber: pulumi.Any(_var.Osn_ocpu_allocation_param_ocpu_allocation_number),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Osns can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Blockchain/osn:Osn test_osn "blockchainPlatforms/{blockchainPlatformId}/osns/{osnId}"
// ```
type Osn struct {
	pulumi.CustomResourceState

	// Availability Domain to place new OSN
	Ad pulumi.StringOutput `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringOutput `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam OsnOcpuAllocationParamOutput `pulumi:"ocpuAllocationParam"`
	// OSN identifier
	OsnKey pulumi.StringOutput `pulumi:"osnKey"`
	// The current state of the OSN.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewOsn registers a new resource with the given unique name, arguments, and options.
func NewOsn(ctx *pulumi.Context,
	name string, args *OsnArgs, opts ...pulumi.ResourceOption) (*Osn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ad == nil {
		return nil, errors.New("invalid value for required argument 'Ad'")
	}
	if args.BlockchainPlatformId == nil {
		return nil, errors.New("invalid value for required argument 'BlockchainPlatformId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Osn
	err := ctx.RegisterResource("oci:Blockchain/osn:Osn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsn gets an existing Osn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsnState, opts ...pulumi.ResourceOption) (*Osn, error) {
	var resource Osn
	err := ctx.ReadResource("oci:Blockchain/osn:Osn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Osn resources.
type osnState struct {
	// Availability Domain to place new OSN
	Ad *string `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId *string `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam *OsnOcpuAllocationParam `pulumi:"ocpuAllocationParam"`
	// OSN identifier
	OsnKey *string `pulumi:"osnKey"`
	// The current state of the OSN.
	State *string `pulumi:"state"`
}

type OsnState struct {
	// Availability Domain to place new OSN
	Ad pulumi.StringPtrInput
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringPtrInput
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam OsnOcpuAllocationParamPtrInput
	// OSN identifier
	OsnKey pulumi.StringPtrInput
	// The current state of the OSN.
	State pulumi.StringPtrInput
}

func (OsnState) ElementType() reflect.Type {
	return reflect.TypeOf((*osnState)(nil)).Elem()
}

type osnArgs struct {
	// Availability Domain to place new OSN
	Ad string `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId string `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam *OsnOcpuAllocationParam `pulumi:"ocpuAllocationParam"`
}

// The set of arguments for constructing a Osn resource.
type OsnArgs struct {
	// Availability Domain to place new OSN
	Ad pulumi.StringInput
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringInput
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam OsnOcpuAllocationParamPtrInput
}

func (OsnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osnArgs)(nil)).Elem()
}

type OsnInput interface {
	pulumi.Input

	ToOsnOutput() OsnOutput
	ToOsnOutputWithContext(ctx context.Context) OsnOutput
}

func (*Osn) ElementType() reflect.Type {
	return reflect.TypeOf((**Osn)(nil)).Elem()
}

func (i *Osn) ToOsnOutput() OsnOutput {
	return i.ToOsnOutputWithContext(context.Background())
}

func (i *Osn) ToOsnOutputWithContext(ctx context.Context) OsnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsnOutput)
}

// OsnArrayInput is an input type that accepts OsnArray and OsnArrayOutput values.
// You can construct a concrete instance of `OsnArrayInput` via:
//
//	OsnArray{ OsnArgs{...} }
type OsnArrayInput interface {
	pulumi.Input

	ToOsnArrayOutput() OsnArrayOutput
	ToOsnArrayOutputWithContext(context.Context) OsnArrayOutput
}

type OsnArray []OsnInput

func (OsnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Osn)(nil)).Elem()
}

func (i OsnArray) ToOsnArrayOutput() OsnArrayOutput {
	return i.ToOsnArrayOutputWithContext(context.Background())
}

func (i OsnArray) ToOsnArrayOutputWithContext(ctx context.Context) OsnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsnArrayOutput)
}

// OsnMapInput is an input type that accepts OsnMap and OsnMapOutput values.
// You can construct a concrete instance of `OsnMapInput` via:
//
//	OsnMap{ "key": OsnArgs{...} }
type OsnMapInput interface {
	pulumi.Input

	ToOsnMapOutput() OsnMapOutput
	ToOsnMapOutputWithContext(context.Context) OsnMapOutput
}

type OsnMap map[string]OsnInput

func (OsnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Osn)(nil)).Elem()
}

func (i OsnMap) ToOsnMapOutput() OsnMapOutput {
	return i.ToOsnMapOutputWithContext(context.Background())
}

func (i OsnMap) ToOsnMapOutputWithContext(ctx context.Context) OsnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsnMapOutput)
}

type OsnOutput struct{ *pulumi.OutputState }

func (OsnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Osn)(nil)).Elem()
}

func (o OsnOutput) ToOsnOutput() OsnOutput {
	return o
}

func (o OsnOutput) ToOsnOutputWithContext(ctx context.Context) OsnOutput {
	return o
}

// Availability Domain to place new OSN
func (o OsnOutput) Ad() pulumi.StringOutput {
	return o.ApplyT(func(v *Osn) pulumi.StringOutput { return v.Ad }).(pulumi.StringOutput)
}

// Unique service identifier.
func (o OsnOutput) BlockchainPlatformId() pulumi.StringOutput {
	return o.ApplyT(func(v *Osn) pulumi.StringOutput { return v.BlockchainPlatformId }).(pulumi.StringOutput)
}

// (Updatable) OCPU allocation parameter
func (o OsnOutput) OcpuAllocationParam() OsnOcpuAllocationParamOutput {
	return o.ApplyT(func(v *Osn) OsnOcpuAllocationParamOutput { return v.OcpuAllocationParam }).(OsnOcpuAllocationParamOutput)
}

// OSN identifier
func (o OsnOutput) OsnKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Osn) pulumi.StringOutput { return v.OsnKey }).(pulumi.StringOutput)
}

// The current state of the OSN.
func (o OsnOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Osn) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type OsnArrayOutput struct{ *pulumi.OutputState }

func (OsnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Osn)(nil)).Elem()
}

func (o OsnArrayOutput) ToOsnArrayOutput() OsnArrayOutput {
	return o
}

func (o OsnArrayOutput) ToOsnArrayOutputWithContext(ctx context.Context) OsnArrayOutput {
	return o
}

func (o OsnArrayOutput) Index(i pulumi.IntInput) OsnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Osn {
		return vs[0].([]*Osn)[vs[1].(int)]
	}).(OsnOutput)
}

type OsnMapOutput struct{ *pulumi.OutputState }

func (OsnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Osn)(nil)).Elem()
}

func (o OsnMapOutput) ToOsnMapOutput() OsnMapOutput {
	return o
}

func (o OsnMapOutput) ToOsnMapOutputWithContext(ctx context.Context) OsnMapOutput {
	return o
}

func (o OsnMapOutput) MapIndex(k pulumi.StringInput) OsnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Osn {
		return vs[0].(map[string]*Osn)[vs[1].(string)]
	}).(OsnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OsnInput)(nil)).Elem(), &Osn{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsnArrayInput)(nil)).Elem(), OsnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OsnMapInput)(nil)).Elem(), OsnMap{})
	pulumi.RegisterOutputType(OsnOutput{})
	pulumi.RegisterOutputType(OsnArrayOutput{})
	pulumi.RegisterOutputType(OsnMapOutput{})
}
