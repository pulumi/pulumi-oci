// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package budget

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Budget resource in Oracle Cloud Infrastructure Budget service.
//
// Gets a budget by the identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Budget"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Budget.GetBudget(ctx, &budget.GetBudgetArgs{
//				BudgetId: testBudgetOciBudgetBudget.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupBudget(ctx *pulumi.Context, args *LookupBudgetArgs, opts ...pulumi.InvokeOption) (*LookupBudgetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBudgetResult
	err := ctx.Invoke("oci:Budget/getBudget:getBudget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBudget.
type LookupBudgetArgs struct {
	// The unique budget OCID.
	BudgetId string `pulumi:"budgetId"`
}

// A collection of values returned by getBudget.
type LookupBudgetResult struct {
	// The actual spend in currency for the current budget cycle.
	ActualSpend float64 `pulumi:"actualSpend"`
	// The total number of alert rules in the budget.
	AlertRuleCount int `pulumi:"alertRuleCount"`
	// The amount of the budget, expressed in the currency of the customer's rate card.
	Amount   int    `pulumi:"amount"`
	BudgetId string `pulumi:"budgetId"`
	// The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
	BudgetProcessingPeriodStartOffset int `pulumi:"budgetProcessingPeriodStartOffset"`
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The description of the budget.
	Description string `pulumi:"description"`
	// The display name of the budget. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
	EndDate string `pulumi:"endDate"`
	// The forecasted spend in currency by the end of the current budget cycle.
	ForecastedSpend float64 `pulumi:"forecastedSpend"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the budget.
	Id string `pulumi:"id"`
	// The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
	ProcessingPeriodType string `pulumi:"processingPeriodType"`
	// The reset period for the budget.
	ResetPeriod string `pulumi:"resetPeriod"`
	// The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
	StartDate string `pulumi:"startDate"`
	// The current state of the budget.
	State string `pulumi:"state"`
	// This is DEPRECATED. For backwards compatability, the property is populated when the targetType is "COMPARTMENT", and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
	//
	// Deprecated: The 'target_compartment_id' field has been deprecated. Please use 'targets' instead.
	TargetCompartmentId string `pulumi:"targetCompartmentId"`
	// The type of target on which the budget is applied.
	TargetType string `pulumi:"targetType"`
	// The list of targets on which the budget is applied. If the targetType is "COMPARTMENT", the targets contain the list of compartment OCIDs. If the targetType is "TAG", the targets contain the list of cost tracking tag identifiers in the form of "{tagNamespace}.{tagKey}.{tagValue}".
	Targets []string `pulumi:"targets"`
	// The time that the budget was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time that the budget spend was last computed.
	TimeSpendComputed string `pulumi:"timeSpendComputed"`
	// The time that the budget was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
	// The version of the budget. Starts from 1 and increments by 1.
	Version int `pulumi:"version"`
}

func LookupBudgetOutput(ctx *pulumi.Context, args LookupBudgetOutputArgs, opts ...pulumi.InvokeOption) LookupBudgetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBudgetResult, error) {
			args := v.(LookupBudgetArgs)
			r, err := LookupBudget(ctx, &args, opts...)
			var s LookupBudgetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBudgetResultOutput)
}

// A collection of arguments for invoking getBudget.
type LookupBudgetOutputArgs struct {
	// The unique budget OCID.
	BudgetId pulumi.StringInput `pulumi:"budgetId"`
}

func (LookupBudgetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBudgetArgs)(nil)).Elem()
}

// A collection of values returned by getBudget.
type LookupBudgetResultOutput struct{ *pulumi.OutputState }

func (LookupBudgetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBudgetResult)(nil)).Elem()
}

func (o LookupBudgetResultOutput) ToLookupBudgetResultOutput() LookupBudgetResultOutput {
	return o
}

func (o LookupBudgetResultOutput) ToLookupBudgetResultOutputWithContext(ctx context.Context) LookupBudgetResultOutput {
	return o
}

// The actual spend in currency for the current budget cycle.
func (o LookupBudgetResultOutput) ActualSpend() pulumi.Float64Output {
	return o.ApplyT(func(v LookupBudgetResult) float64 { return v.ActualSpend }).(pulumi.Float64Output)
}

// The total number of alert rules in the budget.
func (o LookupBudgetResultOutput) AlertRuleCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBudgetResult) int { return v.AlertRuleCount }).(pulumi.IntOutput)
}

// The amount of the budget, expressed in the currency of the customer's rate card.
func (o LookupBudgetResultOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBudgetResult) int { return v.Amount }).(pulumi.IntOutput)
}

func (o LookupBudgetResultOutput) BudgetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.BudgetId }).(pulumi.StringOutput)
}

// The number of days offset from the first day of the month, at which the budget processing period starts. In months that have fewer days than this value, processing will begin on the last day of that month. For example, for a value of 12, processing starts every month on the 12th at midnight.
func (o LookupBudgetResultOutput) BudgetProcessingPeriodStartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBudgetResult) int { return v.BudgetProcessingPeriodStartOffset }).(pulumi.IntOutput)
}

// The OCID of the compartment.
func (o LookupBudgetResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o LookupBudgetResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupBudgetResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The description of the budget.
func (o LookupBudgetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.Description }).(pulumi.StringOutput)
}

// The display name of the budget. Avoid entering confidential information.
func (o LookupBudgetResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The time when the one-time budget concludes. For example, - `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
func (o LookupBudgetResultOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.EndDate }).(pulumi.StringOutput)
}

// The forecasted spend in currency by the end of the current budget cycle.
func (o LookupBudgetResultOutput) ForecastedSpend() pulumi.Float64Output {
	return o.ApplyT(func(v LookupBudgetResult) float64 { return v.ForecastedSpend }).(pulumi.Float64Output)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupBudgetResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupBudgetResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the budget.
func (o LookupBudgetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the budget processing period. Valid values are INVOICE, MONTH, and SINGLE_USE.
func (o LookupBudgetResultOutput) ProcessingPeriodType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.ProcessingPeriodType }).(pulumi.StringOutput)
}

// The reset period for the budget.
func (o LookupBudgetResultOutput) ResetPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.ResetPeriod }).(pulumi.StringOutput)
}

// The date when the one-time budget begins. For example, `2023-03-23`. The date-time format conforms to RFC 3339, and will be truncated to the starting point of the date provided after being converted to UTC time.
func (o LookupBudgetResultOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.StartDate }).(pulumi.StringOutput)
}

// The current state of the budget.
func (o LookupBudgetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.State }).(pulumi.StringOutput)
}

// This is DEPRECATED. For backwards compatability, the property is populated when the targetType is "COMPARTMENT", and targets contain the specific target compartment OCID. For all other scenarios, this property will be left empty.
//
// Deprecated: The 'target_compartment_id' field has been deprecated. Please use 'targets' instead.
func (o LookupBudgetResultOutput) TargetCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TargetCompartmentId }).(pulumi.StringOutput)
}

// The type of target on which the budget is applied.
func (o LookupBudgetResultOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TargetType }).(pulumi.StringOutput)
}

// The list of targets on which the budget is applied. If the targetType is "COMPARTMENT", the targets contain the list of compartment OCIDs. If the targetType is "TAG", the targets contain the list of cost tracking tag identifiers in the form of "{tagNamespace}.{tagKey}.{tagValue}".
func (o LookupBudgetResultOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBudgetResult) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// The time that the budget was created.
func (o LookupBudgetResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time that the budget spend was last computed.
func (o LookupBudgetResultOutput) TimeSpendComputed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimeSpendComputed }).(pulumi.StringOutput)
}

// The time that the budget was updated.
func (o LookupBudgetResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBudgetResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The version of the budget. Starts from 1 and increments by 1.
func (o LookupBudgetResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBudgetResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBudgetResultOutput{})
}
