// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatesmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Certificate resource in Oracle Cloud Infrastructure Certificates Management service.
//
// Gets details about the specified certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/certificatesmanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := certificatesmanagement.GetCertificate(ctx, &certificatesmanagement.GetCertificateArgs{
//				CertificateId: testCertificateOciCertificatesManagementCertificate.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("oci:CertificatesManagement/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// The OCID of the certificate.
	CertificateId string `pulumi:"certificateId"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	CertificateConfigs []GetCertificateCertificateConfig `pulumi:"certificateConfigs"`
	// The OCID of the certificate.
	CertificateId string `pulumi:"certificateId"`
	// The name of the profile used to create the certificate, which depends on the type of certificate you need.
	CertificateProfileType string `pulumi:"certificateProfileType"`
	// The details of the certificate revocation list (CRL).
	CertificateRevocationListDetails []GetCertificateCertificateRevocationListDetail `pulumi:"certificateRevocationListDetails"`
	// A list of rules that control how the certificate is used and managed.
	CertificateRules []GetCertificateCertificateRule `pulumi:"certificateRules"`
	// The OCID of the compartment where you want to create the certificate.
	CompartmentId string `pulumi:"compartmentId"`
	// The origin of the certificate.
	ConfigType string `pulumi:"configType"`
	// The details of the certificate version. This object does not contain the certificate contents.
	CurrentVersions []GetCertificateCurrentVersion `pulumi:"currentVersions"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A brief description of the certificate. Avoid entering confidential information.
	Description string `pulumi:"description"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the certificate.
	Id string `pulumi:"id"`
	// The OCID of the certificate authority (CA) that issued the certificate.
	IssuerCertificateAuthorityId string `pulumi:"issuerCertificateAuthorityId"`
	// The algorithm used to create key pairs.
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// Additional information about the current lifecycle state of the certificate.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	Name string `pulumi:"name"`
	// The algorithm used to sign the public key certificate.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// The current lifecycle state of the certificate.
	State string `pulumi:"state"`
	// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
	Subjects []GetCertificateSubject `pulumi:"subjects"`
	// A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
	// An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion string `pulumi:"timeOfDeletion"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateResultOutput, error) {
			args := v.(LookupCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:CertificatesManagement/getCertificate:getCertificate", args, LookupCertificateResultOutput{}, options).(LookupCertificateResultOutput), nil
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// The OCID of the certificate.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) CertificateConfigs() GetCertificateCertificateConfigArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateCertificateConfig { return v.CertificateConfigs }).(GetCertificateCertificateConfigArrayOutput)
}

// The OCID of the certificate.
func (o LookupCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The name of the profile used to create the certificate, which depends on the type of certificate you need.
func (o LookupCertificateResultOutput) CertificateProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateProfileType }).(pulumi.StringOutput)
}

// The details of the certificate revocation list (CRL).
func (o LookupCertificateResultOutput) CertificateRevocationListDetails() GetCertificateCertificateRevocationListDetailArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateCertificateRevocationListDetail {
		return v.CertificateRevocationListDetails
	}).(GetCertificateCertificateRevocationListDetailArrayOutput)
}

// A list of rules that control how the certificate is used and managed.
func (o LookupCertificateResultOutput) CertificateRules() GetCertificateCertificateRuleArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateCertificateRule { return v.CertificateRules }).(GetCertificateCertificateRuleArrayOutput)
}

// The OCID of the compartment where you want to create the certificate.
func (o LookupCertificateResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The origin of the certificate.
func (o LookupCertificateResultOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ConfigType }).(pulumi.StringOutput)
}

// The details of the certificate version. This object does not contain the certificate contents.
func (o LookupCertificateResultOutput) CurrentVersions() GetCertificateCurrentVersionArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateCurrentVersion { return v.CurrentVersions }).(GetCertificateCurrentVersionArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o LookupCertificateResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A brief description of the certificate. Avoid entering confidential information.
func (o LookupCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o LookupCertificateResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The OCID of the certificate.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OCID of the certificate authority (CA) that issued the certificate.
func (o LookupCertificateResultOutput) IssuerCertificateAuthorityId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.IssuerCertificateAuthorityId }).(pulumi.StringOutput)
}

// The algorithm used to create key pairs.
func (o LookupCertificateResultOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// Additional information about the current lifecycle state of the certificate.
func (o LookupCertificateResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
func (o LookupCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The algorithm used to sign the public key certificate.
func (o LookupCertificateResultOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// The current lifecycle state of the certificate.
func (o LookupCertificateResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.State }).(pulumi.StringOutput)
}

// The subject of the certificate, which is a distinguished name that identifies the entity that owns the public key in the certificate.
func (o LookupCertificateResultOutput) Subjects() GetCertificateSubjectArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateSubject { return v.Subjects }).(GetCertificateSubjectArrayOutput)
}

// A property indicating when the certificate was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o LookupCertificateResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// An optional property indicating when to delete the certificate version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
func (o LookupCertificateResultOutput) TimeOfDeletion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.TimeOfDeletion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
