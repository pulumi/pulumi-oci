// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatesmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Certificate Versions in Oracle Cloud Infrastructure Certificates Management service.
//
// Lists all certificate versions for the specified certificate.
// Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the result set to a single item that matches the specified version number.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/CertificatesManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CertificatesManagement.GetCertificateVersions(ctx, &certificatesmanagement.GetCertificateVersionsArgs{
//				CertificateId: testCertificate.Id,
//				VersionNumber: pulumi.StringRef(certificateVersionVersionNumber),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCertificateVersions(ctx *pulumi.Context, args *GetCertificateVersionsArgs, opts ...pulumi.InvokeOption) (*GetCertificateVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCertificateVersionsResult
	err := ctx.Invoke("oci:CertificatesManagement/getCertificateVersions:getCertificateVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificateVersions.
type GetCertificateVersionsArgs struct {
	// The OCID of the certificate.
	CertificateId string                         `pulumi:"certificateId"`
	Filters       []GetCertificateVersionsFilter `pulumi:"filters"`
	// A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
	VersionNumber *string `pulumi:"versionNumber"`
}

// A collection of values returned by getCertificateVersions.
type GetCertificateVersionsResult struct {
	// The OCID of the certificate.
	CertificateId string `pulumi:"certificateId"`
	// The list of certificate_version_collection.
	CertificateVersionCollections []GetCertificateVersionsCertificateVersionCollection `pulumi:"certificateVersionCollections"`
	Filters                       []GetCertificateVersionsFilter                       `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The version number of the certificate.
	VersionNumber *string `pulumi:"versionNumber"`
}

func GetCertificateVersionsOutput(ctx *pulumi.Context, args GetCertificateVersionsOutputArgs, opts ...pulumi.InvokeOption) GetCertificateVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCertificateVersionsResult, error) {
			args := v.(GetCertificateVersionsArgs)
			r, err := GetCertificateVersions(ctx, &args, opts...)
			var s GetCertificateVersionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCertificateVersionsResultOutput)
}

// A collection of arguments for invoking getCertificateVersions.
type GetCertificateVersionsOutputArgs struct {
	// The OCID of the certificate.
	CertificateId pulumi.StringInput                     `pulumi:"certificateId"`
	Filters       GetCertificateVersionsFilterArrayInput `pulumi:"filters"`
	// A filter that returns only resources that match the specified version number. The default value is 0, which means that this filter is not applied.
	VersionNumber pulumi.StringPtrInput `pulumi:"versionNumber"`
}

func (GetCertificateVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getCertificateVersions.
type GetCertificateVersionsResultOutput struct{ *pulumi.OutputState }

func (GetCertificateVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateVersionsResult)(nil)).Elem()
}

func (o GetCertificateVersionsResultOutput) ToGetCertificateVersionsResultOutput() GetCertificateVersionsResultOutput {
	return o
}

func (o GetCertificateVersionsResultOutput) ToGetCertificateVersionsResultOutputWithContext(ctx context.Context) GetCertificateVersionsResultOutput {
	return o
}

// The OCID of the certificate.
func (o GetCertificateVersionsResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateVersionsResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The list of certificate_version_collection.
func (o GetCertificateVersionsResultOutput) CertificateVersionCollections() GetCertificateVersionsCertificateVersionCollectionArrayOutput {
	return o.ApplyT(func(v GetCertificateVersionsResult) []GetCertificateVersionsCertificateVersionCollection {
		return v.CertificateVersionCollections
	}).(GetCertificateVersionsCertificateVersionCollectionArrayOutput)
}

func (o GetCertificateVersionsResultOutput) Filters() GetCertificateVersionsFilterArrayOutput {
	return o.ApplyT(func(v GetCertificateVersionsResult) []GetCertificateVersionsFilter { return v.Filters }).(GetCertificateVersionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCertificateVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The version number of the certificate.
func (o GetCertificateVersionsResultOutput) VersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificateVersionsResult) *string { return v.VersionNumber }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCertificateVersionsResultOutput{})
}
