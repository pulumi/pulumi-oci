// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package certificatesmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Certificates in Oracle Cloud Infrastructure Certificates Management service.
//
// Lists all certificates that match the query parameters.
// Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/CertificatesManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CertificatesManagement.GetCertificates(ctx, &certificatesmanagement.GetCertificatesArgs{
//				CertificateId:                pulumi.StringRef(oci_certificates_management_certificate.Test_certificate.Id),
//				CompartmentId:                pulumi.StringRef(_var.Compartment_id),
//				IssuerCertificateAuthorityId: pulumi.StringRef(oci_certificates_management_certificate_authority.Test_certificate_authority.Id),
//				Name:                         pulumi.StringRef(_var.Certificate_name),
//				State:                        pulumi.StringRef(_var.Certificate_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetCertificates(ctx *pulumi.Context, args *GetCertificatesArgs, opts ...pulumi.InvokeOption) (*GetCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCertificatesResult
	err := ctx.Invoke("oci:CertificatesManagement/getCertificates:getCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesArgs struct {
	// The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
	CertificateId *string `pulumi:"certificateId"`
	// A filter that returns only resources that match the given compartment OCID.
	CompartmentId *string                 `pulumi:"compartmentId"`
	Filters       []GetCertificatesFilter `pulumi:"filters"`
	// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
	IssuerCertificateAuthorityId *string `pulumi:"issuerCertificateAuthorityId"`
	// A filter that returns only resources that match the specified name.
	Name *string `pulumi:"name"`
	// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getCertificates.
type GetCertificatesResult struct {
	// The list of certificate_collection.
	CertificateCollections []GetCertificatesCertificateCollection `pulumi:"certificateCollections"`
	// The OCID of the certificate.
	CertificateId *string `pulumi:"certificateId"`
	// The OCID of the compartment where you want to create the certificate.
	CompartmentId *string                 `pulumi:"compartmentId"`
	Filters       []GetCertificatesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The OCID of the certificate authority (CA) that issued the certificate.
	IssuerCertificateAuthorityId *string `pulumi:"issuerCertificateAuthorityId"`
	// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
	Name *string `pulumi:"name"`
	// The current lifecycle state of the certificate.
	State *string `pulumi:"state"`
}

func GetCertificatesOutput(ctx *pulumi.Context, args GetCertificatesOutputArgs, opts ...pulumi.InvokeOption) GetCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCertificatesResult, error) {
			args := v.(GetCertificatesArgs)
			r, err := GetCertificates(ctx, &args, opts...)
			var s GetCertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCertificatesResultOutput)
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesOutputArgs struct {
	// The OCID of the certificate. If the parameter is set to null, the service lists all certificates.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// A filter that returns only resources that match the given compartment OCID.
	CompartmentId pulumi.StringPtrInput           `pulumi:"compartmentId"`
	Filters       GetCertificatesFilterArrayInput `pulumi:"filters"`
	// The OCID of the certificate authority (CA). If the parameter is set to null, the service lists all CAs.
	IssuerCertificateAuthorityId pulumi.StringPtrInput `pulumi:"issuerCertificateAuthorityId"`
	// A filter that returns only resources that match the specified name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter that returns only resources that match the given lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getCertificates.
type GetCertificatesResultOutput struct{ *pulumi.OutputState }

func (GetCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesResult)(nil)).Elem()
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutput() GetCertificatesResultOutput {
	return o
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutputWithContext(ctx context.Context) GetCertificatesResultOutput {
	return o
}

// The list of certificate_collection.
func (o GetCertificatesResultOutput) CertificateCollections() GetCertificatesCertificateCollectionArrayOutput {
	return o.ApplyT(func(v GetCertificatesResult) []GetCertificatesCertificateCollection { return v.CertificateCollections }).(GetCertificatesCertificateCollectionArrayOutput)
}

// The OCID of the certificate.
func (o GetCertificatesResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// The OCID of the compartment where you want to create the certificate.
func (o GetCertificatesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetCertificatesResultOutput) Filters() GetCertificatesFilterArrayOutput {
	return o.ApplyT(func(v GetCertificatesResult) []GetCertificatesFilter { return v.Filters }).(GetCertificatesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OCID of the certificate authority (CA) that issued the certificate.
func (o GetCertificatesResultOutput) IssuerCertificateAuthorityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.IssuerCertificateAuthorityId }).(pulumi.StringPtrOutput)
}

// A user-friendly name for the certificate. Names are unique within a compartment. Avoid entering confidential information. Valid characters are uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
func (o GetCertificatesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current lifecycle state of the certificate.
func (o GetCertificatesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCertificatesResultOutput{})
}
