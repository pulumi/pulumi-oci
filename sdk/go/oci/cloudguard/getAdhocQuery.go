// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Adhoc Query resource in Oracle Cloud Infrastructure Cloud Guard service.
//
// Returns an adhoc query identified by adhocQueryId.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetAdhocQuery(ctx, &cloudguard.GetAdhocQueryArgs{
//				AdhocQueryId: testAdhocQueryOciCloudGuardAdhocQuery.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAdhocQuery(ctx *pulumi.Context, args *LookupAdhocQueryArgs, opts ...pulumi.InvokeOption) (*LookupAdhocQueryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAdhocQueryResult
	err := ctx.Invoke("oci:CloudGuard/getAdhocQuery:getAdhocQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAdhocQuery.
type LookupAdhocQueryArgs struct {
	// Adhoc query OCID.
	AdhocQueryId string `pulumi:"adhocQueryId"`
}

// A collection of values returned by getAdhocQuery.
type LookupAdhocQueryResult struct {
	// Detailed information about the adhoc query.
	AdhocQueryDetails []GetAdhocQueryAdhocQueryDetail `pulumi:"adhocQueryDetails"`
	AdhocQueryId      string                          `pulumi:"adhocQueryId"`
	// Instance level status for each region
	AdhocQueryRegionalDetails []GetAdhocQueryAdhocQueryRegionalDetail `pulumi:"adhocQueryRegionalDetails"`
	// Compartment OCID of the adhoc query
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Error message to show on UI in case of failure
	ErrorMessage string `pulumi:"errorMessage"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// OCID for the adhoc query
	Id string `pulumi:"id"`
	// The current lifecycle state of the resource.
	State string `pulumi:"state"`
	// Status of the adhoc query
	Status string `pulumi:"status"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The date and time the adhoc query was created. Format defined by RFC3339.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the adhoc query was updated. Format defined by RFC3339.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupAdhocQueryOutput(ctx *pulumi.Context, args LookupAdhocQueryOutputArgs, opts ...pulumi.InvokeOption) LookupAdhocQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAdhocQueryResult, error) {
			args := v.(LookupAdhocQueryArgs)
			r, err := LookupAdhocQuery(ctx, &args, opts...)
			var s LookupAdhocQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAdhocQueryResultOutput)
}

// A collection of arguments for invoking getAdhocQuery.
type LookupAdhocQueryOutputArgs struct {
	// Adhoc query OCID.
	AdhocQueryId pulumi.StringInput `pulumi:"adhocQueryId"`
}

func (LookupAdhocQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdhocQueryArgs)(nil)).Elem()
}

// A collection of values returned by getAdhocQuery.
type LookupAdhocQueryResultOutput struct{ *pulumi.OutputState }

func (LookupAdhocQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdhocQueryResult)(nil)).Elem()
}

func (o LookupAdhocQueryResultOutput) ToLookupAdhocQueryResultOutput() LookupAdhocQueryResultOutput {
	return o
}

func (o LookupAdhocQueryResultOutput) ToLookupAdhocQueryResultOutputWithContext(ctx context.Context) LookupAdhocQueryResultOutput {
	return o
}

// Detailed information about the adhoc query.
func (o LookupAdhocQueryResultOutput) AdhocQueryDetails() GetAdhocQueryAdhocQueryDetailArrayOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) []GetAdhocQueryAdhocQueryDetail { return v.AdhocQueryDetails }).(GetAdhocQueryAdhocQueryDetailArrayOutput)
}

func (o LookupAdhocQueryResultOutput) AdhocQueryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.AdhocQueryId }).(pulumi.StringOutput)
}

// Instance level status for each region
func (o LookupAdhocQueryResultOutput) AdhocQueryRegionalDetails() GetAdhocQueryAdhocQueryRegionalDetailArrayOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) []GetAdhocQueryAdhocQueryRegionalDetail {
		return v.AdhocQueryRegionalDetails
	}).(GetAdhocQueryAdhocQueryRegionalDetailArrayOutput)
}

// Compartment OCID of the adhoc query
func (o LookupAdhocQueryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupAdhocQueryResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Error message to show on UI in case of failure
func (o LookupAdhocQueryResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupAdhocQueryResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// OCID for the adhoc query
func (o LookupAdhocQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

// The current lifecycle state of the resource.
func (o LookupAdhocQueryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.State }).(pulumi.StringOutput)
}

// Status of the adhoc query
func (o LookupAdhocQueryResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.Status }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupAdhocQueryResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The date and time the adhoc query was created. Format defined by RFC3339.
func (o LookupAdhocQueryResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the adhoc query was updated. Format defined by RFC3339.
func (o LookupAdhocQueryResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdhocQueryResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAdhocQueryResultOutput{})
}
