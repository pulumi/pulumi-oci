// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Data Source Event resource in Oracle Cloud Infrastructure Cloud Guard service.
//
// # Returns a list of events from CloudGuard DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetDataSourceEvent(ctx, &cloudguard.GetDataSourceEventArgs{
//				DataSourceId: oci_cloud_guard_data_source.Test_data_source.Id,
//				Region:       pulumi.StringRef(_var.Data_source_event_region),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDataSourceEvent(ctx *pulumi.Context, args *GetDataSourceEventArgs, opts ...pulumi.InvokeOption) (*GetDataSourceEventResult, error) {
	var rv GetDataSourceEventResult
	err := ctx.Invoke("oci:CloudGuard/getDataSourceEvent:getDataSourceEvent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataSourceEvent.
type GetDataSourceEventArgs struct {
	// DataSource OCID
	DataSourceId string `pulumi:"dataSourceId"`
	// A filter to return only resource their region matches the given region.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getDataSourceEvent.
type GetDataSourceEventResult struct {
	// Attached data Source
	DataSourceId string `pulumi:"dataSourceId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of event related to a DataSource
	Items []GetDataSourceEventItem `pulumi:"items"`
	// Data source event region
	Region *string `pulumi:"region"`
}

func GetDataSourceEventOutput(ctx *pulumi.Context, args GetDataSourceEventOutputArgs, opts ...pulumi.InvokeOption) GetDataSourceEventResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDataSourceEventResult, error) {
			args := v.(GetDataSourceEventArgs)
			r, err := GetDataSourceEvent(ctx, &args, opts...)
			var s GetDataSourceEventResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDataSourceEventResultOutput)
}

// A collection of arguments for invoking getDataSourceEvent.
type GetDataSourceEventOutputArgs struct {
	// DataSource OCID
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// A filter to return only resource their region matches the given region.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetDataSourceEventOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceEventArgs)(nil)).Elem()
}

// A collection of values returned by getDataSourceEvent.
type GetDataSourceEventResultOutput struct{ *pulumi.OutputState }

func (GetDataSourceEventResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceEventResult)(nil)).Elem()
}

func (o GetDataSourceEventResultOutput) ToGetDataSourceEventResultOutput() GetDataSourceEventResultOutput {
	return o
}

func (o GetDataSourceEventResultOutput) ToGetDataSourceEventResultOutputWithContext(ctx context.Context) GetDataSourceEventResultOutput {
	return o
}

// Attached data Source
func (o GetDataSourceEventResultOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceEventResult) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDataSourceEventResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceEventResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of event related to a DataSource
func (o GetDataSourceEventResultOutput) Items() GetDataSourceEventItemArrayOutput {
	return o.ApplyT(func(v GetDataSourceEventResult) []GetDataSourceEventItem { return v.Items }).(GetDataSourceEventItemArrayOutput)
}

// Data source event region
func (o GetDataSourceEventResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourceEventResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDataSourceEventResultOutput{})
}
