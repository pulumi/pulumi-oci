// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Data Source Events in Oracle Cloud Infrastructure Cloud Guard service.
//
// # Returns a list of events from CloudGuard DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetDataSourceEvents(ctx, &cloudguard.GetDataSourceEventsArgs{
//				DataSourceId: oci_cloud_guard_data_source.Test_data_source.Id,
//				Region:       pulumi.StringRef(_var.Data_source_event_region),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDataSourceEvents(ctx *pulumi.Context, args *GetDataSourceEventsArgs, opts ...pulumi.InvokeOption) (*GetDataSourceEventsResult, error) {
	var rv GetDataSourceEventsResult
	err := ctx.Invoke("oci:CloudGuard/getDataSourceEvents:getDataSourceEvents", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataSourceEvents.
type GetDataSourceEventsArgs struct {
	// DataSource OCID
	DataSourceId string                      `pulumi:"dataSourceId"`
	Filters      []GetDataSourceEventsFilter `pulumi:"filters"`
	// A filter to return only resource their region matches the given region.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getDataSourceEvents.
type GetDataSourceEventsResult struct {
	// The list of data_source_event_collection.
	DataSourceEventCollections []GetDataSourceEventsDataSourceEventCollection `pulumi:"dataSourceEventCollections"`
	// Attached data Source
	DataSourceId string                      `pulumi:"dataSourceId"`
	Filters      []GetDataSourceEventsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Data source event region
	Region *string `pulumi:"region"`
}

func GetDataSourceEventsOutput(ctx *pulumi.Context, args GetDataSourceEventsOutputArgs, opts ...pulumi.InvokeOption) GetDataSourceEventsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDataSourceEventsResult, error) {
			args := v.(GetDataSourceEventsArgs)
			r, err := GetDataSourceEvents(ctx, &args, opts...)
			var s GetDataSourceEventsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDataSourceEventsResultOutput)
}

// A collection of arguments for invoking getDataSourceEvents.
type GetDataSourceEventsOutputArgs struct {
	// DataSource OCID
	DataSourceId pulumi.StringInput                  `pulumi:"dataSourceId"`
	Filters      GetDataSourceEventsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resource their region matches the given region.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetDataSourceEventsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceEventsArgs)(nil)).Elem()
}

// A collection of values returned by getDataSourceEvents.
type GetDataSourceEventsResultOutput struct{ *pulumi.OutputState }

func (GetDataSourceEventsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourceEventsResult)(nil)).Elem()
}

func (o GetDataSourceEventsResultOutput) ToGetDataSourceEventsResultOutput() GetDataSourceEventsResultOutput {
	return o
}

func (o GetDataSourceEventsResultOutput) ToGetDataSourceEventsResultOutputWithContext(ctx context.Context) GetDataSourceEventsResultOutput {
	return o
}

// The list of data_source_event_collection.
func (o GetDataSourceEventsResultOutput) DataSourceEventCollections() GetDataSourceEventsDataSourceEventCollectionArrayOutput {
	return o.ApplyT(func(v GetDataSourceEventsResult) []GetDataSourceEventsDataSourceEventCollection {
		return v.DataSourceEventCollections
	}).(GetDataSourceEventsDataSourceEventCollectionArrayOutput)
}

// Attached data Source
func (o GetDataSourceEventsResultOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceEventsResult) string { return v.DataSourceId }).(pulumi.StringOutput)
}

func (o GetDataSourceEventsResultOutput) Filters() GetDataSourceEventsFilterArrayOutput {
	return o.ApplyT(func(v GetDataSourceEventsResult) []GetDataSourceEventsFilter { return v.Filters }).(GetDataSourceEventsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDataSourceEventsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourceEventsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Data source event region
func (o GetDataSourceEventsResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourceEventsResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDataSourceEventsResultOutput{})
}
