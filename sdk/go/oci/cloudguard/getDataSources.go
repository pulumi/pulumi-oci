// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Data Sources in Oracle Cloud Infrastructure Cloud Guard service.
//
// Returns a list of all data sources (DataSource resources) for a compartment
// identified by compartmentId. List is returned in a DataSourceCollection resource
// with page of DataSourceSummary resources.
//
// The ListAdhocQueries operation returns only the adhoc queries in 'compartmentId' passed.
// The list does not include any subcompartments of the compartmentId passed.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform ListAdhocQueries on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetDataSources(ctx, &cloudguard.GetDataSourcesArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(dataSourceAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(dataSourceCompartmentIdInSubtree),
//				DataSourceFeedProvider: pulumi.StringRef(dataSourceDataSourceFeedProvider),
//				DisplayName:            pulumi.StringRef(dataSourceDisplayName),
//				LoggingQueryType:       pulumi.StringRef(dataSourceLoggingQueryType),
//				State:                  pulumi.StringRef(dataSourceState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDataSources(ctx *pulumi.Context, args *GetDataSourcesArgs, opts ...pulumi.InvokeOption) (*GetDataSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDataSourcesResult
	err := ctx.Invoke("oci:CloudGuard/getDataSources:getDataSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataSources.
type GetDataSourcesArgs struct {
	// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
	DataSourceFeedProvider *string `pulumi:"dataSourceFeedProvider"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                `pulumi:"displayName"`
	Filters     []GetDataSourcesFilter `pulumi:"filters"`
	// A filter to return only resources where their query type matches the given LoggingQueryType.
	LoggingQueryType *string `pulumi:"loggingQueryType"`
	// The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
	State *string `pulumi:"state"`
}

// A collection of values returned by getDataSources.
type GetDataSourcesResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// Compartment OCID of data source
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The list of data_source_collection.
	DataSourceCollections []GetDataSourcesDataSourceCollection `pulumi:"dataSourceCollections"`
	// Possible type of dataSourceFeed Provider(LoggingQuery)
	DataSourceFeedProvider *string `pulumi:"dataSourceFeedProvider"`
	// Display name of the data source
	DisplayName *string                `pulumi:"displayName"`
	Filters     []GetDataSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Type of logging query for data source (Sighting/Insight)
	LoggingQueryType *string `pulumi:"loggingQueryType"`
	// The current lifecycle state of the resource.
	State *string `pulumi:"state"`
}

func GetDataSourcesOutput(ctx *pulumi.Context, args GetDataSourcesOutputArgs, opts ...pulumi.InvokeOption) GetDataSourcesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDataSourcesResultOutput, error) {
			args := v.(GetDataSourcesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:CloudGuard/getDataSources:getDataSources", args, GetDataSourcesResultOutput{}, options).(GetDataSourcesResultOutput), nil
		}).(GetDataSourcesResultOutput)
}

// A collection of arguments for invoking getDataSources.
type GetDataSourcesOutputArgs struct {
	// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources when their feed provider matches the given feed provider (`DataSourceFeedProvider` resource).
	DataSourceFeedProvider pulumi.StringPtrInput `pulumi:"dataSourceFeedProvider"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput          `pulumi:"displayName"`
	Filters     GetDataSourcesFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources where their query type matches the given LoggingQueryType.
	LoggingQueryType pulumi.StringPtrInput `pulumi:"loggingQueryType"`
	// The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetDataSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getDataSources.
type GetDataSourcesResultOutput struct{ *pulumi.OutputState }

func (GetDataSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataSourcesResult)(nil)).Elem()
}

func (o GetDataSourcesResultOutput) ToGetDataSourcesResultOutput() GetDataSourcesResultOutput {
	return o
}

func (o GetDataSourcesResultOutput) ToGetDataSourcesResultOutputWithContext(ctx context.Context) GetDataSourcesResultOutput {
	return o
}

func (o GetDataSourcesResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Compartment OCID of data source
func (o GetDataSourcesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourcesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetDataSourcesResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// The list of data_source_collection.
func (o GetDataSourcesResultOutput) DataSourceCollections() GetDataSourcesDataSourceCollectionArrayOutput {
	return o.ApplyT(func(v GetDataSourcesResult) []GetDataSourcesDataSourceCollection { return v.DataSourceCollections }).(GetDataSourcesDataSourceCollectionArrayOutput)
}

// Possible type of dataSourceFeed Provider(LoggingQuery)
func (o GetDataSourcesResultOutput) DataSourceFeedProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *string { return v.DataSourceFeedProvider }).(pulumi.StringPtrOutput)
}

// Display name of the data source
func (o GetDataSourcesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetDataSourcesResultOutput) Filters() GetDataSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetDataSourcesResult) []GetDataSourcesFilter { return v.Filters }).(GetDataSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDataSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Type of logging query for data source (Sighting/Insight)
func (o GetDataSourcesResultOutput) LoggingQueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *string { return v.LoggingQueryType }).(pulumi.StringPtrOutput)
}

// The current lifecycle state of the resource.
func (o GetDataSourcesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataSourcesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDataSourcesResultOutput{})
}
