// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Targets in Oracle Cloud Infrastructure Cloud Guard service.
//
// Returns a list of targets (TargetCollection resource with page of TargetSummary
// resources) for the target identified by compartmentId. By default, only the target
// associated with the compartment is returned. Setting compartmentIdInSubtree to true
// returns the entire hierarchy of targets in subcompartments.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform ListTargets on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all targets in compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetGuardTargets(ctx, &cloudguard.GetGuardTargetsArgs{
//				CompartmentId:                     compartmentId,
//				AccessLevel:                       pulumi.StringRef(targetAccessLevel),
//				CompartmentIdInSubtree:            pulumi.BoolRef(targetCompartmentIdInSubtree),
//				DisplayName:                       pulumi.StringRef(targetDisplayName),
//				IsNonSecurityZoneTargetsOnlyQuery: pulumi.BoolRef(targetIsNonSecurityZoneTargetsOnlyQuery),
//				State:                             pulumi.StringRef(targetState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGuardTargets(ctx *pulumi.Context, args *GetGuardTargetsArgs, opts ...pulumi.InvokeOption) (*GetGuardTargetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGuardTargetsResult
	err := ctx.Invoke("oci:CloudGuard/getGuardTargets:getGuardTargets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGuardTargets.
type GetGuardTargetsArgs struct {
	// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                 `pulumi:"displayName"`
	Filters     []GetGuardTargetsFilter `pulumi:"filters"`
	// Default is false. When set to true, only the targets that would be deleted as part of security zone creation will be returned.
	IsNonSecurityZoneTargetsOnlyQuery *bool `pulumi:"isNonSecurityZoneTargetsOnlyQuery"`
	// The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
	State *string `pulumi:"state"`
}

// A collection of values returned by getGuardTargets.
type GetGuardTargetsResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// Compartment OCID
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// Responder rule display name
	DisplayName *string                 `pulumi:"displayName"`
	Filters     []GetGuardTargetsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                                string `pulumi:"id"`
	IsNonSecurityZoneTargetsOnlyQuery *bool  `pulumi:"isNonSecurityZoneTargetsOnlyQuery"`
	// The current lifecycle state of the responder rule
	State *string `pulumi:"state"`
	// The list of target_collection.
	TargetCollections []GetGuardTargetsTargetCollection `pulumi:"targetCollections"`
}

func GetGuardTargetsOutput(ctx *pulumi.Context, args GetGuardTargetsOutputArgs, opts ...pulumi.InvokeOption) GetGuardTargetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGuardTargetsResultOutput, error) {
			args := v.(GetGuardTargetsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetGuardTargetsResult
			secret, err := ctx.InvokePackageRaw("oci:CloudGuard/getGuardTargets:getGuardTargets", args, &rv, "", opts...)
			if err != nil {
				return GetGuardTargetsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetGuardTargetsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetGuardTargetsResultOutput), nil
			}
			return output, nil
		}).(GetGuardTargetsResultOutput)
}

// A collection of arguments for invoking getGuardTargets.
type GetGuardTargetsOutputArgs struct {
	// Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`. Setting this to `ACCESSIBLE` returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to `RESTRICTED` permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the setting of `accessLevel`.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput           `pulumi:"displayName"`
	Filters     GetGuardTargetsFilterArrayInput `pulumi:"filters"`
	// Default is false. When set to true, only the targets that would be deleted as part of security zone creation will be returned.
	IsNonSecurityZoneTargetsOnlyQuery pulumi.BoolPtrInput `pulumi:"isNonSecurityZoneTargetsOnlyQuery"`
	// The field lifecycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetGuardTargetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGuardTargetsArgs)(nil)).Elem()
}

// A collection of values returned by getGuardTargets.
type GetGuardTargetsResultOutput struct{ *pulumi.OutputState }

func (GetGuardTargetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGuardTargetsResult)(nil)).Elem()
}

func (o GetGuardTargetsResultOutput) ToGetGuardTargetsResultOutput() GetGuardTargetsResultOutput {
	return o
}

func (o GetGuardTargetsResultOutput) ToGetGuardTargetsResultOutputWithContext(ctx context.Context) GetGuardTargetsResultOutput {
	return o
}

func (o GetGuardTargetsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// Compartment OCID
func (o GetGuardTargetsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetGuardTargetsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// Responder rule display name
func (o GetGuardTargetsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetGuardTargetsResultOutput) Filters() GetGuardTargetsFilterArrayOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) []GetGuardTargetsFilter { return v.Filters }).(GetGuardTargetsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGuardTargetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGuardTargetsResultOutput) IsNonSecurityZoneTargetsOnlyQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) *bool { return v.IsNonSecurityZoneTargetsOnlyQuery }).(pulumi.BoolPtrOutput)
}

// The current lifecycle state of the responder rule
func (o GetGuardTargetsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The list of target_collection.
func (o GetGuardTargetsResultOutput) TargetCollections() GetGuardTargetsTargetCollectionArrayOutput {
	return o.ApplyT(func(v GetGuardTargetsResult) []GetGuardTargetsTargetCollection { return v.TargetCollections }).(GetGuardTargetsTargetCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGuardTargetsResultOutput{})
}
