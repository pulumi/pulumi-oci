// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Problem Entities in Oracle Cloud Infrastructure Cloud Guard service.
//
// Returns a list of entities for a CloudGuard Problem
// Returns a list of entities for a problem.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.GetProblemEntities(ctx, &cloudguard.GetProblemEntitiesArgs{
//				ProblemId: testProblem.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProblemEntities(ctx *pulumi.Context, args *GetProblemEntitiesArgs, opts ...pulumi.InvokeOption) (*GetProblemEntitiesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProblemEntitiesResult
	err := ctx.Invoke("oci:CloudGuard/getProblemEntities:getProblemEntities", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProblemEntities.
type GetProblemEntitiesArgs struct {
	Filters []GetProblemEntitiesFilter `pulumi:"filters"`
	// OCID of the problem.
	ProblemId string `pulumi:"problemId"`
}

// A collection of values returned by getProblemEntities.
type GetProblemEntitiesResult struct {
	Filters []GetProblemEntitiesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of problem_entity_collection.
	ProblemEntityCollections []GetProblemEntitiesProblemEntityCollection `pulumi:"problemEntityCollections"`
	// Attached problem ID
	ProblemId string `pulumi:"problemId"`
}

func GetProblemEntitiesOutput(ctx *pulumi.Context, args GetProblemEntitiesOutputArgs, opts ...pulumi.InvokeOption) GetProblemEntitiesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProblemEntitiesResult, error) {
			args := v.(GetProblemEntitiesArgs)
			r, err := GetProblemEntities(ctx, &args, opts...)
			var s GetProblemEntitiesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProblemEntitiesResultOutput)
}

// A collection of arguments for invoking getProblemEntities.
type GetProblemEntitiesOutputArgs struct {
	Filters GetProblemEntitiesFilterArrayInput `pulumi:"filters"`
	// OCID of the problem.
	ProblemId pulumi.StringInput `pulumi:"problemId"`
}

func (GetProblemEntitiesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProblemEntitiesArgs)(nil)).Elem()
}

// A collection of values returned by getProblemEntities.
type GetProblemEntitiesResultOutput struct{ *pulumi.OutputState }

func (GetProblemEntitiesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProblemEntitiesResult)(nil)).Elem()
}

func (o GetProblemEntitiesResultOutput) ToGetProblemEntitiesResultOutput() GetProblemEntitiesResultOutput {
	return o
}

func (o GetProblemEntitiesResultOutput) ToGetProblemEntitiesResultOutputWithContext(ctx context.Context) GetProblemEntitiesResultOutput {
	return o
}

func (o GetProblemEntitiesResultOutput) Filters() GetProblemEntitiesFilterArrayOutput {
	return o.ApplyT(func(v GetProblemEntitiesResult) []GetProblemEntitiesFilter { return v.Filters }).(GetProblemEntitiesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProblemEntitiesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProblemEntitiesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of problem_entity_collection.
func (o GetProblemEntitiesResultOutput) ProblemEntityCollections() GetProblemEntitiesProblemEntityCollectionArrayOutput {
	return o.ApplyT(func(v GetProblemEntitiesResult) []GetProblemEntitiesProblemEntityCollection {
		return v.ProblemEntityCollections
	}).(GetProblemEntitiesProblemEntityCollectionArrayOutput)
}

// Attached problem ID
func (o GetProblemEntitiesResultOutput) ProblemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProblemEntitiesResult) string { return v.ProblemId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProblemEntitiesResultOutput{})
}
