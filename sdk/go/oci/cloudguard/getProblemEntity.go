// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Problem Entity resource in Oracle Cloud Infrastructure Cloud Guard service.
//
// # Returns a list of entities for a CloudGuard Problem
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/cloudguard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudguard.GetProblemEntity(ctx, &cloudguard.GetProblemEntityArgs{
//				ProblemId: testProblem.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProblemEntity(ctx *pulumi.Context, args *GetProblemEntityArgs, opts ...pulumi.InvokeOption) (*GetProblemEntityResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProblemEntityResult
	err := ctx.Invoke("oci:CloudGuard/getProblemEntity:getProblemEntity", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProblemEntity.
type GetProblemEntityArgs struct {
	// OCId of the problem.
	ProblemId string `pulumi:"problemId"`
}

// A collection of values returned by getProblemEntity.
type GetProblemEntityResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of problem entities summaries related to a data source.
	Items []GetProblemEntityItem `pulumi:"items"`
	// Attached problem id
	ProblemId string `pulumi:"problemId"`
}

func GetProblemEntityOutput(ctx *pulumi.Context, args GetProblemEntityOutputArgs, opts ...pulumi.InvokeOption) GetProblemEntityResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProblemEntityResultOutput, error) {
			args := v.(GetProblemEntityArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:CloudGuard/getProblemEntity:getProblemEntity", args, GetProblemEntityResultOutput{}, options).(GetProblemEntityResultOutput), nil
		}).(GetProblemEntityResultOutput)
}

// A collection of arguments for invoking getProblemEntity.
type GetProblemEntityOutputArgs struct {
	// OCId of the problem.
	ProblemId pulumi.StringInput `pulumi:"problemId"`
}

func (GetProblemEntityOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProblemEntityArgs)(nil)).Elem()
}

// A collection of values returned by getProblemEntity.
type GetProblemEntityResultOutput struct{ *pulumi.OutputState }

func (GetProblemEntityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProblemEntityResult)(nil)).Elem()
}

func (o GetProblemEntityResultOutput) ToGetProblemEntityResultOutput() GetProblemEntityResultOutput {
	return o
}

func (o GetProblemEntityResultOutput) ToGetProblemEntityResultOutputWithContext(ctx context.Context) GetProblemEntityResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetProblemEntityResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProblemEntityResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of problem entities summaries related to a data source.
func (o GetProblemEntityResultOutput) Items() GetProblemEntityItemArrayOutput {
	return o.ApplyT(func(v GetProblemEntityResult) []GetProblemEntityItem { return v.Items }).(GetProblemEntityItemArrayOutput)
}

// Attached problem id
func (o GetProblemEntityResultOutput) ProblemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProblemEntityResult) string { return v.ProblemId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProblemEntityResultOutput{})
}
