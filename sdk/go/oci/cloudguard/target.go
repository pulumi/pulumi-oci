// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudguard

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Target resource in Oracle Cloud Infrastructure Cloud Guard service.
//
// # Creates a new Target
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/CloudGuard"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudGuard.NewTarget(ctx, "testTarget", &CloudGuard.TargetArgs{
//				CompartmentId:      pulumi.Any(_var.Compartment_id),
//				DisplayName:        pulumi.Any(_var.Target_display_name),
//				TargetResourceId:   pulumi.Any(oci_cloud_guard_target_resource.Test_target_resource.Id),
//				TargetResourceType: pulumi.Any(_var.Target_target_resource_type),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Target_description),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				State: pulumi.Any(_var.Target_state),
//				TargetDetectorRecipes: cloudguard.TargetTargetDetectorRecipeArray{
//					&cloudguard.TargetTargetDetectorRecipeArgs{
//						DetectorRecipeId: pulumi.Any(oci_cloud_guard_detector_recipe.Test_detector_recipe.Id),
//						DetectorRules: cloudguard.TargetTargetDetectorRecipeDetectorRuleArray{
//							&cloudguard.TargetTargetDetectorRecipeDetectorRuleArgs{
//								Details: &cloudguard.TargetTargetDetectorRecipeDetectorRuleDetailsArgs{
//									ConditionGroups: cloudguard.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroupArray{
//										&cloudguard.TargetTargetDetectorRecipeDetectorRuleDetailsConditionGroupArgs{
//											CompartmentId: pulumi.Any(_var.Compartment_id),
//											Condition:     pulumi.Any(_var.Target_target_detector_recipes_detector_rules_details_condition_groups_condition),
//										},
//									},
//								},
//								DetectorRuleId: pulumi.Any(oci_events_rule.Test_rule.Id),
//							},
//						},
//					},
//				},
//				TargetResponderRecipes: cloudguard.TargetTargetResponderRecipeArray{
//					&cloudguard.TargetTargetResponderRecipeArgs{
//						ResponderRecipeId: pulumi.Any(oci_cloud_guard_responder_recipe.Test_responder_recipe.Id),
//						ResponderRules: cloudguard.TargetTargetResponderRecipeResponderRuleArray{
//							&cloudguard.TargetTargetResponderRecipeResponderRuleArgs{
//								Details: &cloudguard.TargetTargetResponderRecipeResponderRuleDetailsArgs{
//									Condition: pulumi.Any(_var.Target_target_responder_recipes_responder_rules_details_condition),
//									Configurations: cloudguard.TargetTargetResponderRecipeResponderRuleDetailsConfigurationArray{
//										&cloudguard.TargetTargetResponderRecipeResponderRuleDetailsConfigurationArgs{
//											ConfigKey: pulumi.Any(_var.Target_target_responder_recipes_responder_rules_details_configurations_config_key),
//											Name:      pulumi.Any(_var.Target_target_responder_recipes_responder_rules_details_configurations_name),
//											Value:     pulumi.Any(_var.Target_target_responder_recipes_responder_rules_details_configurations_value),
//										},
//									},
//									Mode: pulumi.Any(_var.Target_target_responder_recipes_responder_rules_details_mode),
//								},
//								ResponderRuleId: pulumi.Any(oci_events_rule.Test_rule.Id),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Targets can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:CloudGuard/target:Target test_target "id"
//
// ```
type Target struct {
	pulumi.CustomResourceState

	// (Updatable) compartment associated with condition
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The target description.
	//
	// Avoid entering confidential information.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) DetectorTemplate identifier.
	//
	// Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// Avoid entering confidential information.
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// List of inherited compartments
	InheritedByCompartments pulumi.StringArrayOutput `pulumi:"inheritedByCompartments"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails pulumi.StringOutput `pulumi:"lifecyleDetails"`
	// Total number of recipes attached to target
	RecipeCount pulumi.IntOutput `pulumi:"recipeCount"`
	// (Updatable) The current state of the DetectorRule.
	State pulumi.StringOutput `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// Details specific to the target type.
	TargetDetails TargetTargetDetailArrayOutput `pulumi:"targetDetails"`
	// (Updatable) List of detector recipes to associate with target
	TargetDetectorRecipes TargetTargetDetectorRecipeArrayOutput `pulumi:"targetDetectorRecipes"`
	// Resource ID which the target uses to monitor
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
	// possible type of targets(COMPARTMENT/FACLOUD)
	TargetResourceType pulumi.StringOutput `pulumi:"targetResourceType"`
	// (Updatable) List of responder recipes to associate with target
	TargetResponderRecipes TargetTargetResponderRecipeArrayOutput `pulumi:"targetResponderRecipes"`
	// The date and time the target was created. Format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the target was updated. Format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewTarget registers a new resource with the given unique name, arguments, and options.
func NewTarget(ctx *pulumi.Context,
	name string, args *TargetArgs, opts ...pulumi.ResourceOption) (*Target, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	if args.TargetResourceType == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceType'")
	}
	var resource Target
	err := ctx.RegisterResource("oci:CloudGuard/target:Target", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTarget gets an existing Target resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetState, opts ...pulumi.ResourceOption) (*Target, error) {
	var resource Target
	err := ctx.ReadResource("oci:CloudGuard/target:Target", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Target resources.
type targetState struct {
	// (Updatable) compartment associated with condition
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The target description.
	//
	// Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) DetectorTemplate identifier.
	//
	// Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// Avoid entering confidential information.
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// List of inherited compartments
	InheritedByCompartments []string `pulumi:"inheritedByCompartments"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails *string `pulumi:"lifecyleDetails"`
	// Total number of recipes attached to target
	RecipeCount *int `pulumi:"recipeCount"`
	// (Updatable) The current state of the DetectorRule.
	State *string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Details specific to the target type.
	TargetDetails []TargetTargetDetail `pulumi:"targetDetails"`
	// (Updatable) List of detector recipes to associate with target
	TargetDetectorRecipes []TargetTargetDetectorRecipe `pulumi:"targetDetectorRecipes"`
	// Resource ID which the target uses to monitor
	TargetResourceId *string `pulumi:"targetResourceId"`
	// possible type of targets(COMPARTMENT/FACLOUD)
	TargetResourceType *string `pulumi:"targetResourceType"`
	// (Updatable) List of responder recipes to associate with target
	TargetResponderRecipes []TargetTargetResponderRecipe `pulumi:"targetResponderRecipes"`
	// The date and time the target was created. Format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the target was updated. Format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type TargetState struct {
	// (Updatable) compartment associated with condition
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// The target description.
	//
	// Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) DetectorTemplate identifier.
	//
	// Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// Avoid entering confidential information.
	FreeformTags pulumi.MapInput
	// List of inherited compartments
	InheritedByCompartments pulumi.StringArrayInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails pulumi.StringPtrInput
	// Total number of recipes attached to target
	RecipeCount pulumi.IntPtrInput
	// (Updatable) The current state of the DetectorRule.
	State pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// Details specific to the target type.
	TargetDetails TargetTargetDetailArrayInput
	// (Updatable) List of detector recipes to associate with target
	TargetDetectorRecipes TargetTargetDetectorRecipeArrayInput
	// Resource ID which the target uses to monitor
	TargetResourceId pulumi.StringPtrInput
	// possible type of targets(COMPARTMENT/FACLOUD)
	TargetResourceType pulumi.StringPtrInput
	// (Updatable) List of responder recipes to associate with target
	TargetResponderRecipes TargetTargetResponderRecipeArrayInput
	// The date and time the target was created. Format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the target was updated. Format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (TargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetState)(nil)).Elem()
}

type targetArgs struct {
	// (Updatable) compartment associated with condition
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The target description.
	//
	// Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) DetectorTemplate identifier.
	//
	// Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// Avoid entering confidential information.
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The current state of the DetectorRule.
	State *string `pulumi:"state"`
	// (Updatable) List of detector recipes to associate with target
	TargetDetectorRecipes []TargetTargetDetectorRecipe `pulumi:"targetDetectorRecipes"`
	// Resource ID which the target uses to monitor
	TargetResourceId string `pulumi:"targetResourceId"`
	// possible type of targets(COMPARTMENT/FACLOUD)
	TargetResourceType string `pulumi:"targetResourceType"`
	// (Updatable) List of responder recipes to associate with target
	TargetResponderRecipes []TargetTargetResponderRecipe `pulumi:"targetResponderRecipes"`
}

// The set of arguments for constructing a Target resource.
type TargetArgs struct {
	// (Updatable) compartment associated with condition
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// The target description.
	//
	// Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) DetectorTemplate identifier.
	//
	// Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	//
	// Avoid entering confidential information.
	FreeformTags pulumi.MapInput
	// (Updatable) The current state of the DetectorRule.
	State pulumi.StringPtrInput
	// (Updatable) List of detector recipes to associate with target
	TargetDetectorRecipes TargetTargetDetectorRecipeArrayInput
	// Resource ID which the target uses to monitor
	TargetResourceId pulumi.StringInput
	// possible type of targets(COMPARTMENT/FACLOUD)
	TargetResourceType pulumi.StringInput
	// (Updatable) List of responder recipes to associate with target
	TargetResponderRecipes TargetTargetResponderRecipeArrayInput
}

func (TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetArgs)(nil)).Elem()
}

type TargetInput interface {
	pulumi.Input

	ToTargetOutput() TargetOutput
	ToTargetOutputWithContext(ctx context.Context) TargetOutput
}

func (*Target) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (i *Target) ToTargetOutput() TargetOutput {
	return i.ToTargetOutputWithContext(context.Background())
}

func (i *Target) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput)
}

// TargetArrayInput is an input type that accepts TargetArray and TargetArrayOutput values.
// You can construct a concrete instance of `TargetArrayInput` via:
//
//	TargetArray{ TargetArgs{...} }
type TargetArrayInput interface {
	pulumi.Input

	ToTargetArrayOutput() TargetArrayOutput
	ToTargetArrayOutputWithContext(context.Context) TargetArrayOutput
}

type TargetArray []TargetInput

func (TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (i TargetArray) ToTargetArrayOutput() TargetArrayOutput {
	return i.ToTargetArrayOutputWithContext(context.Background())
}

func (i TargetArray) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetArrayOutput)
}

// TargetMapInput is an input type that accepts TargetMap and TargetMapOutput values.
// You can construct a concrete instance of `TargetMapInput` via:
//
//	TargetMap{ "key": TargetArgs{...} }
type TargetMapInput interface {
	pulumi.Input

	ToTargetMapOutput() TargetMapOutput
	ToTargetMapOutputWithContext(context.Context) TargetMapOutput
}

type TargetMap map[string]TargetInput

func (TargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (i TargetMap) ToTargetMapOutput() TargetMapOutput {
	return i.ToTargetMapOutputWithContext(context.Background())
}

func (i TargetMap) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetMapOutput)
}

type TargetOutput struct{ *pulumi.OutputState }

func (TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (o TargetOutput) ToTargetOutput() TargetOutput {
	return o
}

func (o TargetOutput) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return o
}

// (Updatable) compartment associated with condition
func (o TargetOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o TargetOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Target) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// The target description.
//
// Avoid entering confidential information.
func (o TargetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) DetectorTemplate identifier.
//
// Avoid entering confidential information.
func (o TargetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
//
// Avoid entering confidential information.
func (o TargetOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Target) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// List of inherited compartments
func (o TargetOutput) InheritedByCompartments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Target) pulumi.StringArrayOutput { return v.InheritedByCompartments }).(pulumi.StringArrayOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o TargetOutput) LifecyleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.LifecyleDetails }).(pulumi.StringOutput)
}

// Total number of recipes attached to target
func (o TargetOutput) RecipeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Target) pulumi.IntOutput { return v.RecipeCount }).(pulumi.IntOutput)
}

// (Updatable) The current state of the DetectorRule.
func (o TargetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). System tags can be viewed by users, but can only be created by the system.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o TargetOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Target) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// Details specific to the target type.
func (o TargetOutput) TargetDetails() TargetTargetDetailArrayOutput {
	return o.ApplyT(func(v *Target) TargetTargetDetailArrayOutput { return v.TargetDetails }).(TargetTargetDetailArrayOutput)
}

// (Updatable) List of detector recipes to associate with target
func (o TargetOutput) TargetDetectorRecipes() TargetTargetDetectorRecipeArrayOutput {
	return o.ApplyT(func(v *Target) TargetTargetDetectorRecipeArrayOutput { return v.TargetDetectorRecipes }).(TargetTargetDetectorRecipeArrayOutput)
}

// Resource ID which the target uses to monitor
func (o TargetOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

// possible type of targets(COMPARTMENT/FACLOUD)
func (o TargetOutput) TargetResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TargetResourceType }).(pulumi.StringOutput)
}

// (Updatable) List of responder recipes to associate with target
func (o TargetOutput) TargetResponderRecipes() TargetTargetResponderRecipeArrayOutput {
	return o.ApplyT(func(v *Target) TargetTargetResponderRecipeArrayOutput { return v.TargetResponderRecipes }).(TargetTargetResponderRecipeArrayOutput)
}

// The date and time the target was created. Format defined by RFC3339.
func (o TargetOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the target was updated. Format defined by RFC3339.
func (o TargetOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type TargetArrayOutput struct{ *pulumi.OutputState }

func (TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (o TargetArrayOutput) ToTargetArrayOutput() TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) Index(i pulumi.IntInput) TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Target {
		return vs[0].([]*Target)[vs[1].(int)]
	}).(TargetOutput)
}

type TargetMapOutput struct{ *pulumi.OutputState }

func (TargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (o TargetMapOutput) ToTargetMapOutput() TargetMapOutput {
	return o
}

func (o TargetMapOutput) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return o
}

func (o TargetMapOutput) MapIndex(k pulumi.StringInput) TargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Target {
		return vs[0].(map[string]*Target)[vs[1].(string)]
	}).(TargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetInput)(nil)).Elem(), &Target{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetArrayInput)(nil)).Elem(), TargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetMapInput)(nil)).Elem(), TargetMap{})
	pulumi.RegisterOutputType(TargetOutput{})
	pulumi.RegisterOutputType(TargetArrayOutput{})
	pulumi.RegisterOutputType(TargetMapOutput{})
}
