// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package computeinstanceagent

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Instance Available Plugins in Oracle Cloud Infrastructure Compute Instance Agent service.
//
// The API to get the list of plugins that are available.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ComputeInstanceAgent"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ComputeInstanceAgent.GetInstanceAvailablePlugin(ctx, &computeinstanceagent.GetInstanceAvailablePluginArgs{
//				OsName:    _var.Instance_available_plugin_os_name,
//				OsVersion: _var.Instance_available_plugin_os_version,
//				Name:      pulumi.StringRef(_var.Instance_available_plugin_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInstanceAvailablePlugin(ctx *pulumi.Context, args *GetInstanceAvailablePluginArgs, opts ...pulumi.InvokeOption) (*GetInstanceAvailablePluginResult, error) {
	var rv GetInstanceAvailablePluginResult
	err := ctx.Invoke("oci:ComputeInstanceAgent/getInstanceAvailablePlugin:getInstanceAvailablePlugin", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceAvailablePlugin.
type GetInstanceAvailablePluginArgs struct {
	CompartmentId string                             `pulumi:"compartmentId"`
	Filters       []GetInstanceAvailablePluginFilter `pulumi:"filters"`
	// The plugin name
	Name *string `pulumi:"name"`
	// The OS for which the plugin is supported. Examples of OperatingSystemQueryParam:OperatingSystemVersionQueryParam are as follows: 'CentOS' '6.10' , 'CentOS Linux' '7', 'CentOS Linux' '8', 'Oracle Linux Server' '6.10', 'Oracle Linux Server' '8.0', 'Red Hat Enterprise Linux Server' '7.8', 'Windows' '10', 'Windows' '2008ServerR2', 'Windows' '2012ServerR2', 'Windows' '7', 'Windows' '8.1'
	OsName string `pulumi:"osName"`
	// The OS version for which the plugin is supported.
	OsVersion string `pulumi:"osVersion"`
}

// A collection of values returned by getInstanceAvailablePlugin.
type GetInstanceAvailablePluginResult struct {
	// The list of available_plugins.
	AvailablePlugins []GetInstanceAvailablePluginAvailablePlugin `pulumi:"availablePlugins"`
	CompartmentId    string                                      `pulumi:"compartmentId"`
	Filters          []GetInstanceAvailablePluginFilter          `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The plugin name
	Name      *string `pulumi:"name"`
	OsName    string  `pulumi:"osName"`
	OsVersion string  `pulumi:"osVersion"`
}

func GetInstanceAvailablePluginOutput(ctx *pulumi.Context, args GetInstanceAvailablePluginOutputArgs, opts ...pulumi.InvokeOption) GetInstanceAvailablePluginResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstanceAvailablePluginResult, error) {
			args := v.(GetInstanceAvailablePluginArgs)
			r, err := GetInstanceAvailablePlugin(ctx, &args, opts...)
			var s GetInstanceAvailablePluginResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstanceAvailablePluginResultOutput)
}

// A collection of arguments for invoking getInstanceAvailablePlugin.
type GetInstanceAvailablePluginOutputArgs struct {
	CompartmentId pulumi.StringInput                         `pulumi:"compartmentId"`
	Filters       GetInstanceAvailablePluginFilterArrayInput `pulumi:"filters"`
	// The plugin name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The OS for which the plugin is supported. Examples of OperatingSystemQueryParam:OperatingSystemVersionQueryParam are as follows: 'CentOS' '6.10' , 'CentOS Linux' '7', 'CentOS Linux' '8', 'Oracle Linux Server' '6.10', 'Oracle Linux Server' '8.0', 'Red Hat Enterprise Linux Server' '7.8', 'Windows' '10', 'Windows' '2008ServerR2', 'Windows' '2012ServerR2', 'Windows' '7', 'Windows' '8.1'
	OsName pulumi.StringInput `pulumi:"osName"`
	// The OS version for which the plugin is supported.
	OsVersion pulumi.StringInput `pulumi:"osVersion"`
}

func (GetInstanceAvailablePluginOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAvailablePluginArgs)(nil)).Elem()
}

// A collection of values returned by getInstanceAvailablePlugin.
type GetInstanceAvailablePluginResultOutput struct{ *pulumi.OutputState }

func (GetInstanceAvailablePluginResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceAvailablePluginResult)(nil)).Elem()
}

func (o GetInstanceAvailablePluginResultOutput) ToGetInstanceAvailablePluginResultOutput() GetInstanceAvailablePluginResultOutput {
	return o
}

func (o GetInstanceAvailablePluginResultOutput) ToGetInstanceAvailablePluginResultOutputWithContext(ctx context.Context) GetInstanceAvailablePluginResultOutput {
	return o
}

// The list of available_plugins.
func (o GetInstanceAvailablePluginResultOutput) AvailablePlugins() GetInstanceAvailablePluginAvailablePluginArrayOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) []GetInstanceAvailablePluginAvailablePlugin {
		return v.AvailablePlugins
	}).(GetInstanceAvailablePluginAvailablePluginArrayOutput)
}

func (o GetInstanceAvailablePluginResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetInstanceAvailablePluginResultOutput) Filters() GetInstanceAvailablePluginFilterArrayOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) []GetInstanceAvailablePluginFilter { return v.Filters }).(GetInstanceAvailablePluginFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceAvailablePluginResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) string { return v.Id }).(pulumi.StringOutput)
}

// The plugin name
func (o GetInstanceAvailablePluginResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetInstanceAvailablePluginResultOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) string { return v.OsName }).(pulumi.StringOutput)
}

func (o GetInstanceAvailablePluginResultOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceAvailablePluginResult) string { return v.OsVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceAvailablePluginResultOutput{})
}
