// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
//
// Creates a container instance and deploys the containers on it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/containerengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containerengine.NewContainerInstance(ctx, "test_container_instance", &containerengine.ContainerInstanceArgs{
//				AvailabilityDomain: pulumi.Any(containerInstanceAvailabilityDomain),
//				CompartmentId:      pulumi.Any(compartmentId),
//				Containers: containerengine.ContainerInstanceContainerArray{
//					&containerengine.ContainerInstanceContainerArgs{
//						ImageUrl:             pulumi.Any(containerInstanceContainersImageUrl),
//						Arguments:            pulumi.Any(containerInstanceContainersArguments),
//						Commands:             pulumi.Any(containerInstanceContainersCommand),
//						DefinedTags:          pulumi.Any(containerInstanceContainersDefinedTags),
//						DisplayName:          pulumi.Any(containerInstanceContainersDisplayName),
//						EnvironmentVariables: pulumi.Any(containerInstanceContainersEnvironmentVariables),
//						FreeformTags:         pulumi.Any(containerInstanceContainersFreeformTags),
//						HealthChecks: containerengine.ContainerInstanceContainerHealthCheckArray{
//							&containerengine.ContainerInstanceContainerHealthCheckArgs{
//								HealthCheckType:  pulumi.Any(containerInstanceContainersHealthChecksHealthCheckType),
//								FailureAction:    pulumi.Any(containerInstanceContainersHealthChecksFailureAction),
//								FailureThreshold: pulumi.Any(containerInstanceContainersHealthChecksFailureThreshold),
//								Headers: containerengine.ContainerInstanceContainerHealthCheckHeaderArray{
//									&containerengine.ContainerInstanceContainerHealthCheckHeaderArgs{
//										Name:  pulumi.Any(containerInstanceContainersHealthChecksHeadersName),
//										Value: pulumi.Any(containerInstanceContainersHealthChecksHeadersValue),
//									},
//								},
//								InitialDelayInSeconds: pulumi.Any(containerInstanceContainersHealthChecksInitialDelayInSeconds),
//								IntervalInSeconds:     pulumi.Any(containerInstanceContainersHealthChecksIntervalInSeconds),
//								Name:                  pulumi.Any(containerInstanceContainersHealthChecksName),
//								Path:                  pulumi.Any(containerInstanceContainersHealthChecksPath),
//								Port:                  pulumi.Any(containerInstanceContainersHealthChecksPort),
//								SuccessThreshold:      pulumi.Any(containerInstanceContainersHealthChecksSuccessThreshold),
//								TimeoutInSeconds:      pulumi.Any(containerInstanceContainersHealthChecksTimeoutInSeconds),
//							},
//						},
//						IsResourcePrincipalDisabled: pulumi.Any(containerInstanceContainersIsResourcePrincipalDisabled),
//						ResourceConfig: &containerengine.ContainerInstanceContainerResourceConfigArgs{
//							MemoryLimitInGbs: pulumi.Any(containerInstanceContainersResourceConfigMemoryLimitInGbs),
//							VcpusLimit:       pulumi.Any(containerInstanceContainersResourceConfigVcpusLimit),
//						},
//						SecurityContext: &containerengine.ContainerInstanceContainerSecurityContextArgs{
//							Capabilities: &containerengine.ContainerInstanceContainerSecurityContextCapabilitiesArgs{
//								AddCapabilities:  pulumi.Any(containerInstanceContainersSecurityContextCapabilitiesAddCapabilities),
//								DropCapabilities: pulumi.Any(containerInstanceContainersSecurityContextCapabilitiesDropCapabilities),
//							},
//							IsNonRootUserCheckEnabled: pulumi.Any(containerInstanceContainersSecurityContextIsNonRootUserCheckEnabled),
//							IsRootFileSystemReadonly:  pulumi.Any(containerInstanceContainersSecurityContextIsRootFileSystemReadonly),
//							RunAsGroup:                pulumi.Any(containerInstanceContainersSecurityContextRunAsGroup),
//							RunAsUser:                 pulumi.Any(containerInstanceContainersSecurityContextRunAsUser),
//							SecurityContextType:       pulumi.Any(containerInstanceContainersSecurityContextSecurityContextType),
//						},
//						VolumeMounts: containerengine.ContainerInstanceContainerVolumeMountArray{
//							&containerengine.ContainerInstanceContainerVolumeMountArgs{
//								MountPath:  pulumi.Any(containerInstanceContainersVolumeMountsMountPath),
//								VolumeName: pulumi.Any(containerInstanceContainersVolumeMountsVolumeName),
//								IsReadOnly: pulumi.Any(containerInstanceContainersVolumeMountsIsReadOnly),
//								Partition:  pulumi.Any(containerInstanceContainersVolumeMountsPartition),
//								SubPath:    pulumi.Any(containerInstanceContainersVolumeMountsSubPath),
//							},
//						},
//						WorkingDirectory: pulumi.Any(containerInstanceContainersWorkingDirectory),
//					},
//				},
//				Shape: pulumi.Any(containerInstanceShape),
//				ShapeConfig: &containerengine.ContainerInstanceShapeConfigArgs{
//					Ocpus:       pulumi.Any(containerInstanceShapeConfigOcpus),
//					MemoryInGbs: pulumi.Any(containerInstanceShapeConfigMemoryInGbs),
//				},
//				Vnics: containerengine.ContainerInstanceVnicArray{
//					&containerengine.ContainerInstanceVnicArgs{
//						SubnetId:            pulumi.Any(testSubnet.Id),
//						DefinedTags:         pulumi.Any(containerInstanceVnicsDefinedTags),
//						DisplayName:         pulumi.Any(containerInstanceVnicsDisplayName),
//						FreeformTags:        pulumi.Any(containerInstanceVnicsFreeformTags),
//						HostnameLabel:       pulumi.Any(containerInstanceVnicsHostnameLabel),
//						IsPublicIpAssigned:  pulumi.Any(containerInstanceVnicsIsPublicIpAssigned),
//						NsgIds:              pulumi.Any(containerInstanceVnicsNsgIds),
//						PrivateIp:           pulumi.Any(containerInstanceVnicsPrivateIp),
//						SkipSourceDestCheck: pulumi.Any(containerInstanceVnicsSkipSourceDestCheck),
//					},
//				},
//				ContainerRestartPolicy: pulumi.Any(containerInstanceContainerRestartPolicy),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				DisplayName: pulumi.Any(containerInstanceDisplayName),
//				DnsConfig: &containerengine.ContainerInstanceDnsConfigArgs{
//					Nameservers: pulumi.Any(containerInstanceDnsConfigNameservers),
//					Options:     pulumi.Any(containerInstanceDnsConfigOptions),
//					Searches:    pulumi.Any(containerInstanceDnsConfigSearches),
//				},
//				FaultDomain: pulumi.Any(containerInstanceFaultDomain),
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				GracefulShutdownTimeoutInSeconds: pulumi.Any(containerInstanceGracefulShutdownTimeoutInSeconds),
//				ImagePullSecrets: containerengine.ContainerInstanceImagePullSecretArray{
//					&containerengine.ContainerInstanceImagePullSecretArgs{
//						RegistryEndpoint: pulumi.Any(containerInstanceImagePullSecretsRegistryEndpoint),
//						SecretType:       pulumi.Any(containerInstanceImagePullSecretsSecretType),
//						Password:         pulumi.Any(containerInstanceImagePullSecretsPassword),
//						SecretId:         pulumi.Any(testSecret.Id),
//						Username:         pulumi.Any(containerInstanceImagePullSecretsUsername),
//					},
//				},
//				Volumes: containerengine.ContainerInstanceVolumeArray{
//					&containerengine.ContainerInstanceVolumeArgs{
//						Name:         pulumi.Any(containerInstanceVolumesName),
//						VolumeType:   pulumi.Any(containerInstanceVolumesVolumeType),
//						BackingStore: pulumi.Any(containerInstanceVolumesBackingStore),
//						Configs: containerengine.ContainerInstanceVolumeConfigArray{
//							&containerengine.ContainerInstanceVolumeConfigArgs{
//								Data:     pulumi.Any(containerInstanceVolumesConfigsData),
//								FileName: pulumi.Any(containerInstanceVolumesConfigsFileName),
//								Path:     pulumi.Any(containerInstanceVolumesConfigsPath),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ContainerInstances can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:ContainerEngine/containerInstance:ContainerInstance test_container_instance "id"
// ```
type ContainerInstance struct {
	pulumi.CustomResourceState

	// The availability domain where the container instance runs.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// (Updatable) The compartment OCID.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The number of containers on the container instance.
	ContainerCount pulumi.IntOutput `pulumi:"containerCount"`
	// Container restart policy
	ContainerRestartPolicy pulumi.StringOutput `pulumi:"containerRestartPolicy"`
	// The containers to create on this container instance.
	Containers ContainerInstanceContainerArrayOutput `pulumi:"containers"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
	DnsConfig ContainerInstanceDnsConfigOutput `pulumi:"dnsConfig"`
	// The fault domain where the container instance runs.
	FaultDomain pulumi.StringOutput `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
	GracefulShutdownTimeoutInSeconds pulumi.StringOutput `pulumi:"gracefulShutdownTimeoutInSeconds"`
	// The image pulls secrets so you can access private registry to pull container images.
	ImagePullSecrets ContainerInstanceImagePullSecretArrayOutput `pulumi:"imagePullSecrets"`
	// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The shape of the container instance. The shape determines the resources available to the container instance.
	Shape pulumi.StringOutput `pulumi:"shape"`
	// The size and amount of resources available to the container instance.
	ShapeConfig ContainerInstanceShapeConfigOutput `pulumi:"shapeConfig"`
	// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The networks available to containers on this container instance.
	Vnics ContainerInstanceVnicArrayOutput `pulumi:"vnics"`
	// The number of volumes that are attached to the container instance.
	VolumeCount pulumi.IntOutput `pulumi:"volumeCount"`
	// A volume is a directory with data that is accessible across multiple containers in a container instance.
	//
	// You can attach up to 32 volumes to single container instance.
	Volumes ContainerInstanceVolumeArrayOutput `pulumi:"volumes"`
}

// NewContainerInstance registers a new resource with the given unique name, arguments, and options.
func NewContainerInstance(ctx *pulumi.Context,
	name string, args *ContainerInstanceArgs, opts ...pulumi.ResourceOption) (*ContainerInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityDomain == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityDomain'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Containers == nil {
		return nil, errors.New("invalid value for required argument 'Containers'")
	}
	if args.Shape == nil {
		return nil, errors.New("invalid value for required argument 'Shape'")
	}
	if args.ShapeConfig == nil {
		return nil, errors.New("invalid value for required argument 'ShapeConfig'")
	}
	if args.Vnics == nil {
		return nil, errors.New("invalid value for required argument 'Vnics'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerInstance
	err := ctx.RegisterResource("oci:ContainerEngine/containerInstance:ContainerInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerInstance gets an existing ContainerInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerInstanceState, opts ...pulumi.ResourceOption) (*ContainerInstance, error) {
	var resource ContainerInstance
	err := ctx.ReadResource("oci:ContainerEngine/containerInstance:ContainerInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerInstance resources.
type containerInstanceState struct {
	// The availability domain where the container instance runs.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// (Updatable) The compartment OCID.
	CompartmentId *string `pulumi:"compartmentId"`
	// The number of containers on the container instance.
	ContainerCount *int `pulumi:"containerCount"`
	// Container restart policy
	ContainerRestartPolicy *string `pulumi:"containerRestartPolicy"`
	// The containers to create on this container instance.
	Containers []ContainerInstanceContainer `pulumi:"containers"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
	DisplayName *string `pulumi:"displayName"`
	// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
	DnsConfig *ContainerInstanceDnsConfig `pulumi:"dnsConfig"`
	// The fault domain where the container instance runs.
	FaultDomain *string `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
	GracefulShutdownTimeoutInSeconds *string `pulumi:"gracefulShutdownTimeoutInSeconds"`
	// The image pulls secrets so you can access private registry to pull container images.
	ImagePullSecrets []ContainerInstanceImagePullSecret `pulumi:"imagePullSecrets"`
	// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The shape of the container instance. The shape determines the resources available to the container instance.
	Shape *string `pulumi:"shape"`
	// The size and amount of resources available to the container instance.
	ShapeConfig *ContainerInstanceShapeConfig `pulumi:"shapeConfig"`
	// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The networks available to containers on this container instance.
	Vnics []ContainerInstanceVnic `pulumi:"vnics"`
	// The number of volumes that are attached to the container instance.
	VolumeCount *int `pulumi:"volumeCount"`
	// A volume is a directory with data that is accessible across multiple containers in a container instance.
	//
	// You can attach up to 32 volumes to single container instance.
	Volumes []ContainerInstanceVolume `pulumi:"volumes"`
}

type ContainerInstanceState struct {
	// The availability domain where the container instance runs.
	AvailabilityDomain pulumi.StringPtrInput
	// (Updatable) The compartment OCID.
	CompartmentId pulumi.StringPtrInput
	// The number of containers on the container instance.
	ContainerCount pulumi.IntPtrInput
	// Container restart policy
	ContainerRestartPolicy pulumi.StringPtrInput
	// The containers to create on this container instance.
	Containers ContainerInstanceContainerArrayInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
	DefinedTags pulumi.StringMapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
	DisplayName pulumi.StringPtrInput
	// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
	DnsConfig ContainerInstanceDnsConfigPtrInput
	// The fault domain where the container instance runs.
	FaultDomain pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
	GracefulShutdownTimeoutInSeconds pulumi.StringPtrInput
	// The image pulls secrets so you can access private registry to pull container images.
	ImagePullSecrets ContainerInstanceImagePullSecretArrayInput
	// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
	LifecycleDetails pulumi.StringPtrInput
	// The shape of the container instance. The shape determines the resources available to the container instance.
	Shape pulumi.StringPtrInput
	// The size and amount of resources available to the container instance.
	ShapeConfig ContainerInstanceShapeConfigPtrInput
	// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
	SystemTags pulumi.StringMapInput
	// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
	// The networks available to containers on this container instance.
	Vnics ContainerInstanceVnicArrayInput
	// The number of volumes that are attached to the container instance.
	VolumeCount pulumi.IntPtrInput
	// A volume is a directory with data that is accessible across multiple containers in a container instance.
	//
	// You can attach up to 32 volumes to single container instance.
	Volumes ContainerInstanceVolumeArrayInput
}

func (ContainerInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerInstanceState)(nil)).Elem()
}

type containerInstanceArgs struct {
	// The availability domain where the container instance runs.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// (Updatable) The compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Container restart policy
	ContainerRestartPolicy *string `pulumi:"containerRestartPolicy"`
	// The containers to create on this container instance.
	Containers []ContainerInstanceContainer `pulumi:"containers"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
	DisplayName *string `pulumi:"displayName"`
	// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
	DnsConfig *ContainerInstanceDnsConfig `pulumi:"dnsConfig"`
	// The fault domain where the container instance runs.
	FaultDomain *string `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
	GracefulShutdownTimeoutInSeconds *string `pulumi:"gracefulShutdownTimeoutInSeconds"`
	// The image pulls secrets so you can access private registry to pull container images.
	ImagePullSecrets []ContainerInstanceImagePullSecret `pulumi:"imagePullSecrets"`
	// The shape of the container instance. The shape determines the resources available to the container instance.
	Shape string `pulumi:"shape"`
	// The size and amount of resources available to the container instance.
	ShapeConfig ContainerInstanceShapeConfig `pulumi:"shapeConfig"`
	// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	State *string `pulumi:"state"`
	// The networks available to containers on this container instance.
	Vnics []ContainerInstanceVnic `pulumi:"vnics"`
	// A volume is a directory with data that is accessible across multiple containers in a container instance.
	//
	// You can attach up to 32 volumes to single container instance.
	Volumes []ContainerInstanceVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a ContainerInstance resource.
type ContainerInstanceArgs struct {
	// The availability domain where the container instance runs.
	AvailabilityDomain pulumi.StringInput
	// (Updatable) The compartment OCID.
	CompartmentId pulumi.StringInput
	// Container restart policy
	ContainerRestartPolicy pulumi.StringPtrInput
	// The containers to create on this container instance.
	Containers ContainerInstanceContainerArrayInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
	DefinedTags pulumi.StringMapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
	DisplayName pulumi.StringPtrInput
	// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
	DnsConfig ContainerInstanceDnsConfigPtrInput
	// The fault domain where the container instance runs.
	FaultDomain pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
	GracefulShutdownTimeoutInSeconds pulumi.StringPtrInput
	// The image pulls secrets so you can access private registry to pull container images.
	ImagePullSecrets ContainerInstanceImagePullSecretArrayInput
	// The shape of the container instance. The shape determines the resources available to the container instance.
	Shape pulumi.StringInput
	// The size and amount of resources available to the container instance.
	ShapeConfig ContainerInstanceShapeConfigInput
	// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	State pulumi.StringPtrInput
	// The networks available to containers on this container instance.
	Vnics ContainerInstanceVnicArrayInput
	// A volume is a directory with data that is accessible across multiple containers in a container instance.
	//
	// You can attach up to 32 volumes to single container instance.
	Volumes ContainerInstanceVolumeArrayInput
}

func (ContainerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerInstanceArgs)(nil)).Elem()
}

type ContainerInstanceInput interface {
	pulumi.Input

	ToContainerInstanceOutput() ContainerInstanceOutput
	ToContainerInstanceOutputWithContext(ctx context.Context) ContainerInstanceOutput
}

func (*ContainerInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstance)(nil)).Elem()
}

func (i *ContainerInstance) ToContainerInstanceOutput() ContainerInstanceOutput {
	return i.ToContainerInstanceOutputWithContext(context.Background())
}

func (i *ContainerInstance) ToContainerInstanceOutputWithContext(ctx context.Context) ContainerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceOutput)
}

// ContainerInstanceArrayInput is an input type that accepts ContainerInstanceArray and ContainerInstanceArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceArrayInput` via:
//
//	ContainerInstanceArray{ ContainerInstanceArgs{...} }
type ContainerInstanceArrayInput interface {
	pulumi.Input

	ToContainerInstanceArrayOutput() ContainerInstanceArrayOutput
	ToContainerInstanceArrayOutputWithContext(context.Context) ContainerInstanceArrayOutput
}

type ContainerInstanceArray []ContainerInstanceInput

func (ContainerInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerInstance)(nil)).Elem()
}

func (i ContainerInstanceArray) ToContainerInstanceArrayOutput() ContainerInstanceArrayOutput {
	return i.ToContainerInstanceArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceArray) ToContainerInstanceArrayOutputWithContext(ctx context.Context) ContainerInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceArrayOutput)
}

// ContainerInstanceMapInput is an input type that accepts ContainerInstanceMap and ContainerInstanceMapOutput values.
// You can construct a concrete instance of `ContainerInstanceMapInput` via:
//
//	ContainerInstanceMap{ "key": ContainerInstanceArgs{...} }
type ContainerInstanceMapInput interface {
	pulumi.Input

	ToContainerInstanceMapOutput() ContainerInstanceMapOutput
	ToContainerInstanceMapOutputWithContext(context.Context) ContainerInstanceMapOutput
}

type ContainerInstanceMap map[string]ContainerInstanceInput

func (ContainerInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerInstance)(nil)).Elem()
}

func (i ContainerInstanceMap) ToContainerInstanceMapOutput() ContainerInstanceMapOutput {
	return i.ToContainerInstanceMapOutputWithContext(context.Background())
}

func (i ContainerInstanceMap) ToContainerInstanceMapOutputWithContext(ctx context.Context) ContainerInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceMapOutput)
}

type ContainerInstanceOutput struct{ *pulumi.OutputState }

func (ContainerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstance)(nil)).Elem()
}

func (o ContainerInstanceOutput) ToContainerInstanceOutput() ContainerInstanceOutput {
	return o
}

func (o ContainerInstanceOutput) ToContainerInstanceOutputWithContext(ctx context.Context) ContainerInstanceOutput {
	return o
}

// The availability domain where the container instance runs.
func (o ContainerInstanceOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// (Updatable) The compartment OCID.
func (o ContainerInstanceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The number of containers on the container instance.
func (o ContainerInstanceOutput) ContainerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.IntOutput { return v.ContainerCount }).(pulumi.IntOutput)
}

// Container restart policy
func (o ContainerInstanceOutput) ContainerRestartPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.ContainerRestartPolicy }).(pulumi.StringOutput)
}

// The containers to create on this container instance.
func (o ContainerInstanceOutput) Containers() ContainerInstanceContainerArrayOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceContainerArrayOutput { return v.Containers }).(ContainerInstanceContainerArrayOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`.
func (o ContainerInstanceOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information. If you don't provide a name, a name is generated automatically.
func (o ContainerInstanceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Allow customers to define DNS settings for containers. If this is not provided, the containers use the default DNS settings of the subnet.
func (o ContainerInstanceOutput) DnsConfig() ContainerInstanceDnsConfigOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceDnsConfigOutput { return v.DnsConfig }).(ContainerInstanceDnsConfigOutput)
}

// The fault domain where the container instance runs.
func (o ContainerInstanceOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.FaultDomain }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ContainerInstanceOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted.
func (o ContainerInstanceOutput) GracefulShutdownTimeoutInSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.GracefulShutdownTimeoutInSeconds }).(pulumi.StringOutput)
}

// The image pulls secrets so you can access private registry to pull container images.
func (o ContainerInstanceOutput) ImagePullSecrets() ContainerInstanceImagePullSecretArrayOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceImagePullSecretArrayOutput { return v.ImagePullSecrets }).(ContainerInstanceImagePullSecretArrayOutput)
}

// A message that describes the current state of the container in more detail. Can be used to provide actionable information.
func (o ContainerInstanceOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The shape of the container instance. The shape determines the resources available to the container instance.
func (o ContainerInstanceOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.Shape }).(pulumi.StringOutput)
}

// The size and amount of resources available to the container instance.
func (o ContainerInstanceOutput) ShapeConfig() ContainerInstanceShapeConfigOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceShapeConfigOutput { return v.ShapeConfig }).(ContainerInstanceShapeConfigOutput)
}

// (Updatable) The target state for the Container Instance. Could be set to `ACTIVE` or `INACTIVE`.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ContainerInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`.
func (o ContainerInstanceOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o ContainerInstanceOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o ContainerInstanceOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The networks available to containers on this container instance.
func (o ContainerInstanceOutput) Vnics() ContainerInstanceVnicArrayOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceVnicArrayOutput { return v.Vnics }).(ContainerInstanceVnicArrayOutput)
}

// The number of volumes that are attached to the container instance.
func (o ContainerInstanceOutput) VolumeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerInstance) pulumi.IntOutput { return v.VolumeCount }).(pulumi.IntOutput)
}

// A volume is a directory with data that is accessible across multiple containers in a container instance.
//
// You can attach up to 32 volumes to single container instance.
func (o ContainerInstanceOutput) Volumes() ContainerInstanceVolumeArrayOutput {
	return o.ApplyT(func(v *ContainerInstance) ContainerInstanceVolumeArrayOutput { return v.Volumes }).(ContainerInstanceVolumeArrayOutput)
}

type ContainerInstanceArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerInstance)(nil)).Elem()
}

func (o ContainerInstanceArrayOutput) ToContainerInstanceArrayOutput() ContainerInstanceArrayOutput {
	return o
}

func (o ContainerInstanceArrayOutput) ToContainerInstanceArrayOutputWithContext(ctx context.Context) ContainerInstanceArrayOutput {
	return o
}

func (o ContainerInstanceArrayOutput) Index(i pulumi.IntInput) ContainerInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerInstance {
		return vs[0].([]*ContainerInstance)[vs[1].(int)]
	}).(ContainerInstanceOutput)
}

type ContainerInstanceMapOutput struct{ *pulumi.OutputState }

func (ContainerInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerInstance)(nil)).Elem()
}

func (o ContainerInstanceMapOutput) ToContainerInstanceMapOutput() ContainerInstanceMapOutput {
	return o
}

func (o ContainerInstanceMapOutput) ToContainerInstanceMapOutputWithContext(ctx context.Context) ContainerInstanceMapOutput {
	return o
}

func (o ContainerInstanceMapOutput) MapIndex(k pulumi.StringInput) ContainerInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerInstance {
		return vs[0].(map[string]*ContainerInstance)[vs[1].(string)]
	}).(ContainerInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInput)(nil)).Elem(), &ContainerInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceArrayInput)(nil)).Elem(), ContainerInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceMapInput)(nil)).Elem(), ContainerInstanceMap{})
	pulumi.RegisterOutputType(ContainerInstanceOutput{})
	pulumi.RegisterOutputType(ContainerInstanceArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceMapOutput{})
}
