// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerengine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Addon resource in Oracle Cloud Infrastructure Container Engine service.
//
// Get the specified addon for a cluster.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ContainerEngine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ContainerEngine.GetAddon(ctx, &containerengine.GetAddonArgs{
//				AddonName: oci_containerengine_addon.Test_addon.Name,
//				ClusterId: oci_containerengine_cluster.Test_cluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupAddon(ctx *pulumi.Context, args *LookupAddonArgs, opts ...pulumi.InvokeOption) (*LookupAddonResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAddonResult
	err := ctx.Invoke("oci:ContainerEngine/getAddon:getAddon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddon.
type LookupAddonArgs struct {
	// The name of the addon.
	AddonName string `pulumi:"addonName"`
	// The OCID of the cluster.
	ClusterId string `pulumi:"clusterId"`
}

// A collection of values returned by getAddon.
type LookupAddonResult struct {
	// The error info of the addon.
	AddonErrors []GetAddonAddonError `pulumi:"addonErrors"`
	// The name of the addon.
	AddonName string `pulumi:"addonName"`
	ClusterId string `pulumi:"clusterId"`
	// Addon configuration details.
	Configurations []GetAddonConfiguration `pulumi:"configurations"`
	// current installed version of the addon
	CurrentInstalledVersion      string `pulumi:"currentInstalledVersion"`
	Id                           string `pulumi:"id"`
	RemoveAddonResourcesOnDelete bool   `pulumi:"removeAddonResourcesOnDelete"`
	// The state of the addon.
	State string `pulumi:"state"`
	// The time the cluster was created.
	TimeCreated string `pulumi:"timeCreated"`
	// selected addon version, or null indicates autoUpdate
	Version string `pulumi:"version"`
}

func LookupAddonOutput(ctx *pulumi.Context, args LookupAddonOutputArgs, opts ...pulumi.InvokeOption) LookupAddonResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAddonResult, error) {
			args := v.(LookupAddonArgs)
			r, err := LookupAddon(ctx, &args, opts...)
			var s LookupAddonResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAddonResultOutput)
}

// A collection of arguments for invoking getAddon.
type LookupAddonOutputArgs struct {
	// The name of the addon.
	AddonName pulumi.StringInput `pulumi:"addonName"`
	// The OCID of the cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
}

func (LookupAddonOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonArgs)(nil)).Elem()
}

// A collection of values returned by getAddon.
type LookupAddonResultOutput struct{ *pulumi.OutputState }

func (LookupAddonResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonResult)(nil)).Elem()
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutput() LookupAddonResultOutput {
	return o
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutputWithContext(ctx context.Context) LookupAddonResultOutput {
	return o
}

// The error info of the addon.
func (o LookupAddonResultOutput) AddonErrors() GetAddonAddonErrorArrayOutput {
	return o.ApplyT(func(v LookupAddonResult) []GetAddonAddonError { return v.AddonErrors }).(GetAddonAddonErrorArrayOutput)
}

// The name of the addon.
func (o LookupAddonResultOutput) AddonName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.AddonName }).(pulumi.StringOutput)
}

func (o LookupAddonResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Addon configuration details.
func (o LookupAddonResultOutput) Configurations() GetAddonConfigurationArrayOutput {
	return o.ApplyT(func(v LookupAddonResult) []GetAddonConfiguration { return v.Configurations }).(GetAddonConfigurationArrayOutput)
}

// current installed version of the addon
func (o LookupAddonResultOutput) CurrentInstalledVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.CurrentInstalledVersion }).(pulumi.StringOutput)
}

func (o LookupAddonResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAddonResultOutput) RemoveAddonResourcesOnDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAddonResult) bool { return v.RemoveAddonResourcesOnDelete }).(pulumi.BoolOutput)
}

// The state of the addon.
func (o LookupAddonResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.State }).(pulumi.StringOutput)
}

// The time the cluster was created.
func (o LookupAddonResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// selected addon version, or null indicates autoUpdate
func (o LookupAddonResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAddonResultOutput{})
}
