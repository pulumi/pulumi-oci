// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerengine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Addons in Oracle Cloud Infrastructure Container Engine service.
//
// List addon for a provisioned cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/containerengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containerengine.GetAddons(ctx, &containerengine.GetAddonsArgs{
//				ClusterId: testCluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAddons(ctx *pulumi.Context, args *GetAddonsArgs, opts ...pulumi.InvokeOption) (*GetAddonsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAddonsResult
	err := ctx.Invoke("oci:ContainerEngine/getAddons:getAddons", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddons.
type GetAddonsArgs struct {
	// The OCID of the cluster.
	ClusterId string            `pulumi:"clusterId"`
	Filters   []GetAddonsFilter `pulumi:"filters"`
}

// A collection of values returned by getAddons.
type GetAddonsResult struct {
	// The list of addons.
	Addons    []GetAddonsAddon  `pulumi:"addons"`
	ClusterId string            `pulumi:"clusterId"`
	Filters   []GetAddonsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetAddonsOutput(ctx *pulumi.Context, args GetAddonsOutputArgs, opts ...pulumi.InvokeOption) GetAddonsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAddonsResultOutput, error) {
			args := v.(GetAddonsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:ContainerEngine/getAddons:getAddons", args, GetAddonsResultOutput{}, options).(GetAddonsResultOutput), nil
		}).(GetAddonsResultOutput)
}

// A collection of arguments for invoking getAddons.
type GetAddonsOutputArgs struct {
	// The OCID of the cluster.
	ClusterId pulumi.StringInput        `pulumi:"clusterId"`
	Filters   GetAddonsFilterArrayInput `pulumi:"filters"`
}

func (GetAddonsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonsArgs)(nil)).Elem()
}

// A collection of values returned by getAddons.
type GetAddonsResultOutput struct{ *pulumi.OutputState }

func (GetAddonsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonsResult)(nil)).Elem()
}

func (o GetAddonsResultOutput) ToGetAddonsResultOutput() GetAddonsResultOutput {
	return o
}

func (o GetAddonsResultOutput) ToGetAddonsResultOutputWithContext(ctx context.Context) GetAddonsResultOutput {
	return o
}

// The list of addons.
func (o GetAddonsResultOutput) Addons() GetAddonsAddonArrayOutput {
	return o.ApplyT(func(v GetAddonsResult) []GetAddonsAddon { return v.Addons }).(GetAddonsAddonArrayOutput)
}

func (o GetAddonsResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonsResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o GetAddonsResultOutput) Filters() GetAddonsFilterArrayOutput {
	return o.ApplyT(func(v GetAddonsResult) []GetAddonsFilter { return v.Filters }).(GetAddonsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAddonsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAddonsResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAddonsResultOutput{})
}
