// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerengine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Virtual Node Pool resource in Oracle Cloud Infrastructure Container Engine service.
//
// Create a new virtual node pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/containerengine"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := containerengine.NewVirtualNodePool(ctx, "test_virtual_node_pool", &containerengine.VirtualNodePoolArgs{
//				ClusterId:     pulumi.Any(testCluster.Id),
//				CompartmentId: pulumi.Any(compartmentId),
//				DisplayName:   pulumi.Any(virtualNodePoolDisplayName),
//				PlacementConfigurations: containerengine.VirtualNodePoolPlacementConfigurationArray{
//					&containerengine.VirtualNodePoolPlacementConfigurationArgs{
//						AvailabilityDomain: pulumi.Any(virtualNodePoolPlacementConfigurationsAvailabilityDomain),
//						FaultDomains:       pulumi.Any(virtualNodePoolPlacementConfigurationsFaultDomain),
//						SubnetId:           pulumi.Any(testSubnet.Id),
//					},
//				},
//				DefinedTags: pulumi.StringMap{
//					"Operations.CostCenter": pulumi.String("42"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"Department": pulumi.String("Finance"),
//				},
//				InitialVirtualNodeLabels: containerengine.VirtualNodePoolInitialVirtualNodeLabelArray{
//					&containerengine.VirtualNodePoolInitialVirtualNodeLabelArgs{
//						Key:   pulumi.Any(virtualNodePoolInitialVirtualNodeLabelsKey),
//						Value: pulumi.Any(virtualNodePoolInitialVirtualNodeLabelsValue),
//					},
//				},
//				NsgIds: pulumi.Any(virtualNodePoolNsgIds),
//				PodConfiguration: &containerengine.VirtualNodePoolPodConfigurationArgs{
//					Shape:    pulumi.Any(virtualNodePoolPodConfigurationShape),
//					SubnetId: pulumi.Any(testSubnet.Id),
//					NsgIds:   pulumi.Any(virtualNodePoolPodConfigurationNsgIds),
//				},
//				Size: pulumi.Any(virtualNodePoolSize),
//				Taints: containerengine.VirtualNodePoolTaintArray{
//					&containerengine.VirtualNodePoolTaintArgs{
//						Effect: pulumi.Any(virtualNodePoolTaintsEffect),
//						Key:    pulumi.Any(virtualNodePoolTaintsKey),
//						Value:  pulumi.Any(virtualNodePoolTaintsValue),
//					},
//				},
//				VirtualNodeTags: &containerengine.VirtualNodePoolVirtualNodeTagsArgs{
//					DefinedTags: pulumi.StringMap{
//						"Operations.CostCenter": pulumi.String("42"),
//					},
//					FreeformTags: pulumi.StringMap{
//						"Department": pulumi.String("Finance"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VirtualNodePools can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:ContainerEngine/virtualNodePool:VirtualNodePool test_virtual_node_pool "id"
// ```
type VirtualNodePool struct {
	pulumi.CustomResourceState

	// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Compartment of the virtual node pool.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) Display name of the virtual node pool. This is a non-unique value.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
	InitialVirtualNodeLabels VirtualNodePoolInitialVirtualNodeLabelArrayOutput `pulumi:"initialVirtualNodeLabels"`
	// The version of Kubernetes running on the nodes in the node pool.
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// Details about the state of the Virtual Node Pool.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
	NsgIds pulumi.StringArrayOutput `pulumi:"nsgIds"`
	// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
	PlacementConfigurations VirtualNodePoolPlacementConfigurationArrayOutput `pulumi:"placementConfigurations"`
	// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
	PodConfiguration VirtualNodePoolPodConfigurationOutput `pulumi:"podConfiguration"`
	// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
	Size pulumi.IntOutput `pulumi:"size"`
	// The state of the Virtual Node Pool.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
	Taints VirtualNodePoolTaintArrayOutput `pulumi:"taints"`
	// The time the virtual node pool was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the virtual node pool was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
	VirtualNodeTags VirtualNodePoolVirtualNodeTagsOutput `pulumi:"virtualNodeTags"`
}

// NewVirtualNodePool registers a new resource with the given unique name, arguments, and options.
func NewVirtualNodePool(ctx *pulumi.Context,
	name string, args *VirtualNodePoolArgs, opts ...pulumi.ResourceOption) (*VirtualNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PlacementConfigurations == nil {
		return nil, errors.New("invalid value for required argument 'PlacementConfigurations'")
	}
	if args.PodConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'PodConfiguration'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualNodePool
	err := ctx.RegisterResource("oci:ContainerEngine/virtualNodePool:VirtualNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNodePool gets an existing VirtualNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNodePoolState, opts ...pulumi.ResourceOption) (*VirtualNodePool, error) {
	var resource VirtualNodePool
	err := ctx.ReadResource("oci:ContainerEngine/virtualNodePool:VirtualNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNodePool resources.
type virtualNodePoolState struct {
	// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Compartment of the virtual node pool.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Display name of the virtual node pool. This is a non-unique value.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
	InitialVirtualNodeLabels []VirtualNodePoolInitialVirtualNodeLabel `pulumi:"initialVirtualNodeLabels"`
	// The version of Kubernetes running on the nodes in the node pool.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// Details about the state of the Virtual Node Pool.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
	NsgIds []string `pulumi:"nsgIds"`
	// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
	PlacementConfigurations []VirtualNodePoolPlacementConfiguration `pulumi:"placementConfigurations"`
	// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
	PodConfiguration *VirtualNodePoolPodConfiguration `pulumi:"podConfiguration"`
	// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
	Size *int `pulumi:"size"`
	// The state of the Virtual Node Pool.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
	Taints []VirtualNodePoolTaint `pulumi:"taints"`
	// The time the virtual node pool was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the virtual node pool was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
	VirtualNodeTags *VirtualNodePoolVirtualNodeTags `pulumi:"virtualNodeTags"`
}

type VirtualNodePoolState struct {
	// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
	ClusterId pulumi.StringPtrInput
	// Compartment of the virtual node pool.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Display name of the virtual node pool. This is a non-unique value.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
	InitialVirtualNodeLabels VirtualNodePoolInitialVirtualNodeLabelArrayInput
	// The version of Kubernetes running on the nodes in the node pool.
	KubernetesVersion pulumi.StringPtrInput
	// Details about the state of the Virtual Node Pool.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
	NsgIds pulumi.StringArrayInput
	// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
	PlacementConfigurations VirtualNodePoolPlacementConfigurationArrayInput
	// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
	PodConfiguration VirtualNodePoolPodConfigurationPtrInput
	// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
	Size pulumi.IntPtrInput
	// The state of the Virtual Node Pool.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
	Taints VirtualNodePoolTaintArrayInput
	// The time the virtual node pool was created.
	TimeCreated pulumi.StringPtrInput
	// The time the virtual node pool was updated.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
	VirtualNodeTags VirtualNodePoolVirtualNodeTagsPtrInput
}

func (VirtualNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNodePoolState)(nil)).Elem()
}

type virtualNodePoolArgs struct {
	// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
	ClusterId string `pulumi:"clusterId"`
	// Compartment of the virtual node pool.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Display name of the virtual node pool. This is a non-unique value.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
	InitialVirtualNodeLabels []VirtualNodePoolInitialVirtualNodeLabel `pulumi:"initialVirtualNodeLabels"`
	// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
	NsgIds []string `pulumi:"nsgIds"`
	// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
	PlacementConfigurations []VirtualNodePoolPlacementConfiguration `pulumi:"placementConfigurations"`
	// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
	PodConfiguration VirtualNodePoolPodConfiguration `pulumi:"podConfiguration"`
	// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
	Size int `pulumi:"size"`
	// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
	Taints []VirtualNodePoolTaint `pulumi:"taints"`
	// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
	VirtualNodeTags *VirtualNodePoolVirtualNodeTags `pulumi:"virtualNodeTags"`
}

// The set of arguments for constructing a VirtualNodePool resource.
type VirtualNodePoolArgs struct {
	// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
	ClusterId pulumi.StringInput
	// Compartment of the virtual node pool.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Display name of the virtual node pool. This is a non-unique value.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
	InitialVirtualNodeLabels VirtualNodePoolInitialVirtualNodeLabelArrayInput
	// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
	NsgIds pulumi.StringArrayInput
	// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
	PlacementConfigurations VirtualNodePoolPlacementConfigurationArrayInput
	// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
	PodConfiguration VirtualNodePoolPodConfigurationInput
	// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
	Size pulumi.IntInput
	// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
	Taints VirtualNodePoolTaintArrayInput
	// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
	VirtualNodeTags VirtualNodePoolVirtualNodeTagsPtrInput
}

func (VirtualNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNodePoolArgs)(nil)).Elem()
}

type VirtualNodePoolInput interface {
	pulumi.Input

	ToVirtualNodePoolOutput() VirtualNodePoolOutput
	ToVirtualNodePoolOutputWithContext(ctx context.Context) VirtualNodePoolOutput
}

func (*VirtualNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodePool)(nil)).Elem()
}

func (i *VirtualNodePool) ToVirtualNodePoolOutput() VirtualNodePoolOutput {
	return i.ToVirtualNodePoolOutputWithContext(context.Background())
}

func (i *VirtualNodePool) ToVirtualNodePoolOutputWithContext(ctx context.Context) VirtualNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodePoolOutput)
}

// VirtualNodePoolArrayInput is an input type that accepts VirtualNodePoolArray and VirtualNodePoolArrayOutput values.
// You can construct a concrete instance of `VirtualNodePoolArrayInput` via:
//
//	VirtualNodePoolArray{ VirtualNodePoolArgs{...} }
type VirtualNodePoolArrayInput interface {
	pulumi.Input

	ToVirtualNodePoolArrayOutput() VirtualNodePoolArrayOutput
	ToVirtualNodePoolArrayOutputWithContext(context.Context) VirtualNodePoolArrayOutput
}

type VirtualNodePoolArray []VirtualNodePoolInput

func (VirtualNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNodePool)(nil)).Elem()
}

func (i VirtualNodePoolArray) ToVirtualNodePoolArrayOutput() VirtualNodePoolArrayOutput {
	return i.ToVirtualNodePoolArrayOutputWithContext(context.Background())
}

func (i VirtualNodePoolArray) ToVirtualNodePoolArrayOutputWithContext(ctx context.Context) VirtualNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodePoolArrayOutput)
}

// VirtualNodePoolMapInput is an input type that accepts VirtualNodePoolMap and VirtualNodePoolMapOutput values.
// You can construct a concrete instance of `VirtualNodePoolMapInput` via:
//
//	VirtualNodePoolMap{ "key": VirtualNodePoolArgs{...} }
type VirtualNodePoolMapInput interface {
	pulumi.Input

	ToVirtualNodePoolMapOutput() VirtualNodePoolMapOutput
	ToVirtualNodePoolMapOutputWithContext(context.Context) VirtualNodePoolMapOutput
}

type VirtualNodePoolMap map[string]VirtualNodePoolInput

func (VirtualNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNodePool)(nil)).Elem()
}

func (i VirtualNodePoolMap) ToVirtualNodePoolMapOutput() VirtualNodePoolMapOutput {
	return i.ToVirtualNodePoolMapOutputWithContext(context.Background())
}

func (i VirtualNodePoolMap) ToVirtualNodePoolMapOutputWithContext(ctx context.Context) VirtualNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNodePoolMapOutput)
}

type VirtualNodePoolOutput struct{ *pulumi.OutputState }

func (VirtualNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNodePool)(nil)).Elem()
}

func (o VirtualNodePoolOutput) ToVirtualNodePoolOutput() VirtualNodePoolOutput {
	return o
}

func (o VirtualNodePoolOutput) ToVirtualNodePoolOutputWithContext(ctx context.Context) VirtualNodePoolOutput {
	return o
}

// The cluster the virtual node pool is associated with. A virtual node pool can only be associated with one cluster.
func (o VirtualNodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Compartment of the virtual node pool.
func (o VirtualNodePoolOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o VirtualNodePoolOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) Display name of the virtual node pool. This is a non-unique value.
func (o VirtualNodePoolOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o VirtualNodePoolOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) Initial labels that will be added to the Kubernetes Virtual Node object when it registers.
func (o VirtualNodePoolOutput) InitialVirtualNodeLabels() VirtualNodePoolInitialVirtualNodeLabelArrayOutput {
	return o.ApplyT(func(v *VirtualNodePool) VirtualNodePoolInitialVirtualNodeLabelArrayOutput {
		return v.InitialVirtualNodeLabels
	}).(VirtualNodePoolInitialVirtualNodeLabelArrayOutput)
}

// The version of Kubernetes running on the nodes in the node pool.
func (o VirtualNodePoolOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// Details about the state of the Virtual Node Pool.
func (o VirtualNodePoolOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) List of network security group id's applied to the Virtual Node VNIC.
func (o VirtualNodePoolOutput) NsgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringArrayOutput { return v.NsgIds }).(pulumi.StringArrayOutput)
}

// (Updatable) The list of placement configurations which determines where Virtual Nodes will be provisioned across as it relates to the subnet and availability domains. The size attribute determines how many we evenly spread across these placement configurations
func (o VirtualNodePoolOutput) PlacementConfigurations() VirtualNodePoolPlacementConfigurationArrayOutput {
	return o.ApplyT(func(v *VirtualNodePool) VirtualNodePoolPlacementConfigurationArrayOutput {
		return v.PlacementConfigurations
	}).(VirtualNodePoolPlacementConfigurationArrayOutput)
}

// (Updatable) The pod configuration for pods run on virtual nodes of this virtual node pool.
func (o VirtualNodePoolOutput) PodConfiguration() VirtualNodePoolPodConfigurationOutput {
	return o.ApplyT(func(v *VirtualNodePool) VirtualNodePoolPodConfigurationOutput { return v.PodConfiguration }).(VirtualNodePoolPodConfigurationOutput)
}

// (Updatable) The number of Virtual Nodes that should be in the Virtual Node Pool. The placement configurations determine where these virtual nodes are placed.
func (o VirtualNodePoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The state of the Virtual Node Pool.
func (o VirtualNodePoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o VirtualNodePoolOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// (Updatable) A taint is a collection of <key, value, effect>. These taints will be applied to the Virtual Nodes of this Virtual Node Pool for Kubernetes scheduling.
func (o VirtualNodePoolOutput) Taints() VirtualNodePoolTaintArrayOutput {
	return o.ApplyT(func(v *VirtualNodePool) VirtualNodePoolTaintArrayOutput { return v.Taints }).(VirtualNodePoolTaintArrayOutput)
}

// The time the virtual node pool was created.
func (o VirtualNodePoolOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the virtual node pool was updated.
func (o VirtualNodePoolOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNodePool) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) The tags associated to the virtual nodes in this virtual node pool.
func (o VirtualNodePoolOutput) VirtualNodeTags() VirtualNodePoolVirtualNodeTagsOutput {
	return o.ApplyT(func(v *VirtualNodePool) VirtualNodePoolVirtualNodeTagsOutput { return v.VirtualNodeTags }).(VirtualNodePoolVirtualNodeTagsOutput)
}

type VirtualNodePoolArrayOutput struct{ *pulumi.OutputState }

func (VirtualNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualNodePool)(nil)).Elem()
}

func (o VirtualNodePoolArrayOutput) ToVirtualNodePoolArrayOutput() VirtualNodePoolArrayOutput {
	return o
}

func (o VirtualNodePoolArrayOutput) ToVirtualNodePoolArrayOutputWithContext(ctx context.Context) VirtualNodePoolArrayOutput {
	return o
}

func (o VirtualNodePoolArrayOutput) Index(i pulumi.IntInput) VirtualNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualNodePool {
		return vs[0].([]*VirtualNodePool)[vs[1].(int)]
	}).(VirtualNodePoolOutput)
}

type VirtualNodePoolMapOutput struct{ *pulumi.OutputState }

func (VirtualNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualNodePool)(nil)).Elem()
}

func (o VirtualNodePoolMapOutput) ToVirtualNodePoolMapOutput() VirtualNodePoolMapOutput {
	return o
}

func (o VirtualNodePoolMapOutput) ToVirtualNodePoolMapOutputWithContext(ctx context.Context) VirtualNodePoolMapOutput {
	return o
}

func (o VirtualNodePoolMapOutput) MapIndex(k pulumi.StringInput) VirtualNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualNodePool {
		return vs[0].(map[string]*VirtualNodePool)[vs[1].(string)]
	}).(VirtualNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNodePoolInput)(nil)).Elem(), &VirtualNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNodePoolArrayInput)(nil)).Elem(), VirtualNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNodePoolMapInput)(nil)).Elem(), VirtualNodePoolMap{})
	pulumi.RegisterOutputType(VirtualNodePoolOutput{})
	pulumi.RegisterOutputType(VirtualNodePoolArrayOutput{})
	pulumi.RegisterOutputType(VirtualNodePoolMapOutput{})
}
