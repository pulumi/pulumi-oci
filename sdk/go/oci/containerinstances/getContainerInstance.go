// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerinstances

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Container Instance resource in Oracle Cloud Infrastructure Container Instances service.
//
// # Gets a ContainerInstance by identifier
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/ContainerInstances"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ContainerInstances.GetContainerInstance(ctx, &containerinstances.GetContainerInstanceArgs{
//				ContainerInstanceId: oci_container_instances_container_instance.Test_container_instance.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetContainerInstance(ctx *pulumi.Context, args *GetContainerInstanceArgs, opts ...pulumi.InvokeOption) (*GetContainerInstanceResult, error) {
	var rv GetContainerInstanceResult
	err := ctx.Invoke("oci:ContainerInstances/getContainerInstance:getContainerInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerInstance.
type GetContainerInstanceArgs struct {
	// The system-generated unique identifier for the ContainerInstance.
	ContainerInstanceId string `pulumi:"containerInstanceId"`
}

// A collection of values returned by getContainerInstance.
type GetContainerInstanceResult struct {
	// Availability Domain where the ContainerInstance is running.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// The number of containers on this Instance
	ContainerCount      int    `pulumi:"containerCount"`
	ContainerInstanceId string `pulumi:"containerInstanceId"`
	// The container restart policy is applied for all containers in container instance.
	ContainerRestartPolicy string `pulumi:"containerRestartPolicy"`
	// The Containers on this Instance
	Containers []GetContainerInstanceContainer `pulumi:"containers"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Display name for the ContainerInstance. Can be renamed.
	DisplayName string `pulumi:"displayName"`
	// DNS settings for containers.
	DnsConfigs []GetContainerInstanceDnsConfig `pulumi:"dnsConfigs"`
	// Fault Domain where the ContainerInstance is running.
	FaultDomain string `pulumi:"faultDomain"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Duration in seconds processes within a Container have to gracefully terminate. This applies whenever a Container must be halted, such as when the Container Instance is deleted. Processes will first be sent a termination signal. After this timeout is reached, the processes will be sent a termination signal.
	GracefulShutdownTimeoutInSeconds string `pulumi:"gracefulShutdownTimeoutInSeconds"`
	// Unique identifier that is immutable on creation
	Id string `pulumi:"id"`
	// The image pull secrets for accessing private registry to pull images for containers
	ImagePullSecrets []GetContainerInstanceImagePullSecret `pulumi:"imagePullSecrets"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The shape of the Container Instance. The shape determines the resources available to the Container Instance.
	Shape string `pulumi:"shape"`
	// The shape configuration for a Container Instance. The shape configuration determines the resources allocated to the Instance and it's containers.
	ShapeConfigs []GetContainerInstanceShapeConfig `pulumi:"shapeConfigs"`
	// The current state of the ContainerInstance.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the the ContainerInstance was created. An RFC3339 formatted datetime string
	TimeCreated string `pulumi:"timeCreated"`
	// The time the ContainerInstance was updated. An RFC3339 formatted datetime string
	TimeUpdated string `pulumi:"timeUpdated"`
	// The virtual networks available to containers running on this Container Instance.
	Vnics []GetContainerInstanceVnic `pulumi:"vnics"`
	// The number of volumes that attached to this Instance
	VolumeCount int `pulumi:"volumeCount"`
	// A Volume represents a directory with data that is accessible across multiple containers in a ContainerInstance.
	Volumes []GetContainerInstanceVolume `pulumi:"volumes"`
}

func GetContainerInstanceOutput(ctx *pulumi.Context, args GetContainerInstanceOutputArgs, opts ...pulumi.InvokeOption) GetContainerInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetContainerInstanceResult, error) {
			args := v.(GetContainerInstanceArgs)
			r, err := GetContainerInstance(ctx, &args, opts...)
			var s GetContainerInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetContainerInstanceResultOutput)
}

// A collection of arguments for invoking getContainerInstance.
type GetContainerInstanceOutputArgs struct {
	// The system-generated unique identifier for the ContainerInstance.
	ContainerInstanceId pulumi.StringInput `pulumi:"containerInstanceId"`
}

func (GetContainerInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getContainerInstance.
type GetContainerInstanceResultOutput struct{ *pulumi.OutputState }

func (GetContainerInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainerInstanceResult)(nil)).Elem()
}

func (o GetContainerInstanceResultOutput) ToGetContainerInstanceResultOutput() GetContainerInstanceResultOutput {
	return o
}

func (o GetContainerInstanceResultOutput) ToGetContainerInstanceResultOutputWithContext(ctx context.Context) GetContainerInstanceResultOutput {
	return o
}

// Availability Domain where the ContainerInstance is running.
func (o GetContainerInstanceResultOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// Compartment Identifier
func (o GetContainerInstanceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The number of containers on this Instance
func (o GetContainerInstanceResultOutput) ContainerCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) int { return v.ContainerCount }).(pulumi.IntOutput)
}

func (o GetContainerInstanceResultOutput) ContainerInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.ContainerInstanceId }).(pulumi.StringOutput)
}

// The container restart policy is applied for all containers in container instance.
func (o GetContainerInstanceResultOutput) ContainerRestartPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.ContainerRestartPolicy }).(pulumi.StringOutput)
}

// The Containers on this Instance
func (o GetContainerInstanceResultOutput) Containers() GetContainerInstanceContainerArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceContainer { return v.Containers }).(GetContainerInstanceContainerArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetContainerInstanceResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Display name for the ContainerInstance. Can be renamed.
func (o GetContainerInstanceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// DNS settings for containers.
func (o GetContainerInstanceResultOutput) DnsConfigs() GetContainerInstanceDnsConfigArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceDnsConfig { return v.DnsConfigs }).(GetContainerInstanceDnsConfigArrayOutput)
}

// Fault Domain where the ContainerInstance is running.
func (o GetContainerInstanceResultOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.FaultDomain }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetContainerInstanceResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Duration in seconds processes within a Container have to gracefully terminate. This applies whenever a Container must be halted, such as when the Container Instance is deleted. Processes will first be sent a termination signal. After this timeout is reached, the processes will be sent a termination signal.
func (o GetContainerInstanceResultOutput) GracefulShutdownTimeoutInSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.GracefulShutdownTimeoutInSeconds }).(pulumi.StringOutput)
}

// Unique identifier that is immutable on creation
func (o GetContainerInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image pull secrets for accessing private registry to pull images for containers
func (o GetContainerInstanceResultOutput) ImagePullSecrets() GetContainerInstanceImagePullSecretArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceImagePullSecret { return v.ImagePullSecrets }).(GetContainerInstanceImagePullSecretArrayOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o GetContainerInstanceResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The shape of the Container Instance. The shape determines the resources available to the Container Instance.
func (o GetContainerInstanceResultOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.Shape }).(pulumi.StringOutput)
}

// The shape configuration for a Container Instance. The shape configuration determines the resources allocated to the Instance and it's containers.
func (o GetContainerInstanceResultOutput) ShapeConfigs() GetContainerInstanceShapeConfigArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceShapeConfig { return v.ShapeConfigs }).(GetContainerInstanceShapeConfigArrayOutput)
}

// The current state of the ContainerInstance.
func (o GetContainerInstanceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetContainerInstanceResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the the ContainerInstance was created. An RFC3339 formatted datetime string
func (o GetContainerInstanceResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the ContainerInstance was updated. An RFC3339 formatted datetime string
func (o GetContainerInstanceResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The virtual networks available to containers running on this Container Instance.
func (o GetContainerInstanceResultOutput) Vnics() GetContainerInstanceVnicArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceVnic { return v.Vnics }).(GetContainerInstanceVnicArrayOutput)
}

// The number of volumes that attached to this Instance
func (o GetContainerInstanceResultOutput) VolumeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) int { return v.VolumeCount }).(pulumi.IntOutput)
}

// A Volume represents a directory with data that is accessible across multiple containers in a ContainerInstance.
func (o GetContainerInstanceResultOutput) Volumes() GetContainerInstanceVolumeArrayOutput {
	return o.ApplyT(func(v GetContainerInstanceResult) []GetContainerInstanceVolume { return v.Volumes }).(GetContainerInstanceVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContainerInstanceResultOutput{})
}
