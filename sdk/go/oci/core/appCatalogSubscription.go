// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the App Catalog Subscription resource in Oracle Cloud Infrastructure Core service.
//
// Create a subscription for listing resource version for a compartment. It will take some time to propagate to all regions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.NewAppCatalogSubscription(ctx, "testAppCatalogSubscription", &Core.AppCatalogSubscriptionArgs{
//				CompartmentId:          pulumi.Any(_var.Compartment_id),
//				ListingId:              pulumi.Any(data.Oci_core_app_catalog_listing.Test_listing.Id),
//				ListingResourceVersion: pulumi.Any(_var.App_catalog_subscription_listing_resource_version),
//				OracleTermsOfUseLink:   pulumi.Any(_var.App_catalog_subscription_oracle_terms_of_use_link),
//				Signature:              pulumi.Any(_var.App_catalog_subscription_signature),
//				TimeRetrieved:          pulumi.Any(_var.App_catalog_subscription_time_retrieved),
//				EulaLink:               pulumi.Any(_var.App_catalog_subscription_eula_link),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AppCatalogSubscriptions can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Core/appCatalogSubscription:AppCatalogSubscription test_app_catalog_subscription "compartmentId/{compartmentId}/listingId/{listingId}/listingResourceVersion/{listingResourceVersion}"
//
// ```
type AppCatalogSubscription struct {
	pulumi.CustomResourceState

	// The compartmentID for the subscription.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// EULA link
	EulaLink pulumi.StringPtrOutput `pulumi:"eulaLink"`
	// The OCID of the listing.
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// Listing resource id.
	ListingResourceId pulumi.StringOutput `pulumi:"listingResourceId"`
	// Listing resource version.
	ListingResourceVersion pulumi.StringOutput `pulumi:"listingResourceVersion"`
	// Oracle TOU link
	OracleTermsOfUseLink pulumi.StringOutput `pulumi:"oracleTermsOfUseLink"`
	// Name of the publisher who published this listing.
	PublisherName pulumi.StringOutput `pulumi:"publisherName"`
	// A generated signature for this listing resource version retrieved the agreements API.
	Signature pulumi.StringOutput `pulumi:"signature"`
	// The short summary to the listing.
	Summary pulumi.StringOutput `pulumi:"summary"`
	// Date and time at which the subscription was created, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time the agreements were retrieved, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeRetrieved pulumi.StringOutput `pulumi:"timeRetrieved"`
}

// NewAppCatalogSubscription registers a new resource with the given unique name, arguments, and options.
func NewAppCatalogSubscription(ctx *pulumi.Context,
	name string, args *AppCatalogSubscriptionArgs, opts ...pulumi.ResourceOption) (*AppCatalogSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.ListingResourceVersion == nil {
		return nil, errors.New("invalid value for required argument 'ListingResourceVersion'")
	}
	if args.OracleTermsOfUseLink == nil {
		return nil, errors.New("invalid value for required argument 'OracleTermsOfUseLink'")
	}
	if args.Signature == nil {
		return nil, errors.New("invalid value for required argument 'Signature'")
	}
	if args.TimeRetrieved == nil {
		return nil, errors.New("invalid value for required argument 'TimeRetrieved'")
	}
	var resource AppCatalogSubscription
	err := ctx.RegisterResource("oci:Core/appCatalogSubscription:AppCatalogSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppCatalogSubscription gets an existing AppCatalogSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppCatalogSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppCatalogSubscriptionState, opts ...pulumi.ResourceOption) (*AppCatalogSubscription, error) {
	var resource AppCatalogSubscription
	err := ctx.ReadResource("oci:Core/appCatalogSubscription:AppCatalogSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppCatalogSubscription resources.
type appCatalogSubscriptionState struct {
	// The compartmentID for the subscription.
	CompartmentId *string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// EULA link
	EulaLink *string `pulumi:"eulaLink"`
	// The OCID of the listing.
	ListingId *string `pulumi:"listingId"`
	// Listing resource id.
	ListingResourceId *string `pulumi:"listingResourceId"`
	// Listing resource version.
	ListingResourceVersion *string `pulumi:"listingResourceVersion"`
	// Oracle TOU link
	OracleTermsOfUseLink *string `pulumi:"oracleTermsOfUseLink"`
	// Name of the publisher who published this listing.
	PublisherName *string `pulumi:"publisherName"`
	// A generated signature for this listing resource version retrieved the agreements API.
	Signature *string `pulumi:"signature"`
	// The short summary to the listing.
	Summary *string `pulumi:"summary"`
	// Date and time at which the subscription was created, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time the agreements were retrieved, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeRetrieved *string `pulumi:"timeRetrieved"`
}

type AppCatalogSubscriptionState struct {
	// The compartmentID for the subscription.
	CompartmentId pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// EULA link
	EulaLink pulumi.StringPtrInput
	// The OCID of the listing.
	ListingId pulumi.StringPtrInput
	// Listing resource id.
	ListingResourceId pulumi.StringPtrInput
	// Listing resource version.
	ListingResourceVersion pulumi.StringPtrInput
	// Oracle TOU link
	OracleTermsOfUseLink pulumi.StringPtrInput
	// Name of the publisher who published this listing.
	PublisherName pulumi.StringPtrInput
	// A generated signature for this listing resource version retrieved the agreements API.
	Signature pulumi.StringPtrInput
	// The short summary to the listing.
	Summary pulumi.StringPtrInput
	// Date and time at which the subscription was created, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time the agreements were retrieved, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeRetrieved pulumi.StringPtrInput
}

func (AppCatalogSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*appCatalogSubscriptionState)(nil)).Elem()
}

type appCatalogSubscriptionArgs struct {
	// The compartmentID for the subscription.
	CompartmentId string `pulumi:"compartmentId"`
	// EULA link
	EulaLink *string `pulumi:"eulaLink"`
	// The OCID of the listing.
	ListingId string `pulumi:"listingId"`
	// Listing resource version.
	ListingResourceVersion string `pulumi:"listingResourceVersion"`
	// Oracle TOU link
	OracleTermsOfUseLink string `pulumi:"oracleTermsOfUseLink"`
	// A generated signature for this listing resource version retrieved the agreements API.
	Signature string `pulumi:"signature"`
	// Date and time the agreements were retrieved, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeRetrieved string `pulumi:"timeRetrieved"`
}

// The set of arguments for constructing a AppCatalogSubscription resource.
type AppCatalogSubscriptionArgs struct {
	// The compartmentID for the subscription.
	CompartmentId pulumi.StringInput
	// EULA link
	EulaLink pulumi.StringPtrInput
	// The OCID of the listing.
	ListingId pulumi.StringInput
	// Listing resource version.
	ListingResourceVersion pulumi.StringInput
	// Oracle TOU link
	OracleTermsOfUseLink pulumi.StringInput
	// A generated signature for this listing resource version retrieved the agreements API.
	Signature pulumi.StringInput
	// Date and time the agreements were retrieved, in [RFC3339](https://tools.ietf.org/html/rfc3339) format. Example: `2018-03-20T12:32:53.532Z`
	TimeRetrieved pulumi.StringInput
}

func (AppCatalogSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appCatalogSubscriptionArgs)(nil)).Elem()
}

type AppCatalogSubscriptionInput interface {
	pulumi.Input

	ToAppCatalogSubscriptionOutput() AppCatalogSubscriptionOutput
	ToAppCatalogSubscriptionOutputWithContext(ctx context.Context) AppCatalogSubscriptionOutput
}

func (*AppCatalogSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCatalogSubscription)(nil)).Elem()
}

func (i *AppCatalogSubscription) ToAppCatalogSubscriptionOutput() AppCatalogSubscriptionOutput {
	return i.ToAppCatalogSubscriptionOutputWithContext(context.Background())
}

func (i *AppCatalogSubscription) ToAppCatalogSubscriptionOutputWithContext(ctx context.Context) AppCatalogSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCatalogSubscriptionOutput)
}

// AppCatalogSubscriptionArrayInput is an input type that accepts AppCatalogSubscriptionArray and AppCatalogSubscriptionArrayOutput values.
// You can construct a concrete instance of `AppCatalogSubscriptionArrayInput` via:
//
//	AppCatalogSubscriptionArray{ AppCatalogSubscriptionArgs{...} }
type AppCatalogSubscriptionArrayInput interface {
	pulumi.Input

	ToAppCatalogSubscriptionArrayOutput() AppCatalogSubscriptionArrayOutput
	ToAppCatalogSubscriptionArrayOutputWithContext(context.Context) AppCatalogSubscriptionArrayOutput
}

type AppCatalogSubscriptionArray []AppCatalogSubscriptionInput

func (AppCatalogSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCatalogSubscription)(nil)).Elem()
}

func (i AppCatalogSubscriptionArray) ToAppCatalogSubscriptionArrayOutput() AppCatalogSubscriptionArrayOutput {
	return i.ToAppCatalogSubscriptionArrayOutputWithContext(context.Background())
}

func (i AppCatalogSubscriptionArray) ToAppCatalogSubscriptionArrayOutputWithContext(ctx context.Context) AppCatalogSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCatalogSubscriptionArrayOutput)
}

// AppCatalogSubscriptionMapInput is an input type that accepts AppCatalogSubscriptionMap and AppCatalogSubscriptionMapOutput values.
// You can construct a concrete instance of `AppCatalogSubscriptionMapInput` via:
//
//	AppCatalogSubscriptionMap{ "key": AppCatalogSubscriptionArgs{...} }
type AppCatalogSubscriptionMapInput interface {
	pulumi.Input

	ToAppCatalogSubscriptionMapOutput() AppCatalogSubscriptionMapOutput
	ToAppCatalogSubscriptionMapOutputWithContext(context.Context) AppCatalogSubscriptionMapOutput
}

type AppCatalogSubscriptionMap map[string]AppCatalogSubscriptionInput

func (AppCatalogSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCatalogSubscription)(nil)).Elem()
}

func (i AppCatalogSubscriptionMap) ToAppCatalogSubscriptionMapOutput() AppCatalogSubscriptionMapOutput {
	return i.ToAppCatalogSubscriptionMapOutputWithContext(context.Background())
}

func (i AppCatalogSubscriptionMap) ToAppCatalogSubscriptionMapOutputWithContext(ctx context.Context) AppCatalogSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppCatalogSubscriptionMapOutput)
}

type AppCatalogSubscriptionOutput struct{ *pulumi.OutputState }

func (AppCatalogSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppCatalogSubscription)(nil)).Elem()
}

func (o AppCatalogSubscriptionOutput) ToAppCatalogSubscriptionOutput() AppCatalogSubscriptionOutput {
	return o
}

func (o AppCatalogSubscriptionOutput) ToAppCatalogSubscriptionOutputWithContext(ctx context.Context) AppCatalogSubscriptionOutput {
	return o
}

type AppCatalogSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (AppCatalogSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppCatalogSubscription)(nil)).Elem()
}

func (o AppCatalogSubscriptionArrayOutput) ToAppCatalogSubscriptionArrayOutput() AppCatalogSubscriptionArrayOutput {
	return o
}

func (o AppCatalogSubscriptionArrayOutput) ToAppCatalogSubscriptionArrayOutputWithContext(ctx context.Context) AppCatalogSubscriptionArrayOutput {
	return o
}

func (o AppCatalogSubscriptionArrayOutput) Index(i pulumi.IntInput) AppCatalogSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppCatalogSubscription {
		return vs[0].([]*AppCatalogSubscription)[vs[1].(int)]
	}).(AppCatalogSubscriptionOutput)
}

type AppCatalogSubscriptionMapOutput struct{ *pulumi.OutputState }

func (AppCatalogSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppCatalogSubscription)(nil)).Elem()
}

func (o AppCatalogSubscriptionMapOutput) ToAppCatalogSubscriptionMapOutput() AppCatalogSubscriptionMapOutput {
	return o
}

func (o AppCatalogSubscriptionMapOutput) ToAppCatalogSubscriptionMapOutputWithContext(ctx context.Context) AppCatalogSubscriptionMapOutput {
	return o
}

func (o AppCatalogSubscriptionMapOutput) MapIndex(k pulumi.StringInput) AppCatalogSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppCatalogSubscription {
		return vs[0].(map[string]*AppCatalogSubscription)[vs[1].(string)]
	}).(AppCatalogSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppCatalogSubscriptionInput)(nil)).Elem(), &AppCatalogSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCatalogSubscriptionArrayInput)(nil)).Elem(), AppCatalogSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppCatalogSubscriptionMapInput)(nil)).Elem(), AppCatalogSubscriptionMap{})
	pulumi.RegisterOutputType(AppCatalogSubscriptionOutput{})
	pulumi.RegisterOutputType(AppCatalogSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(AppCatalogSubscriptionMapOutput{})
}
