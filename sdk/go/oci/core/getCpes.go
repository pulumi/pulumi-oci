// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Cpes in Oracle Cloud Infrastructure Core service.
//
// Lists the customer-premises equipment objects (CPEs) in the specified compartment.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.GetCpes(ctx, &core.GetCpesArgs{
//				CompartmentId: compartmentId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetCpes(ctx *pulumi.Context, args *GetCpesArgs, opts ...pulumi.InvokeOption) (*GetCpesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCpesResult
	err := ctx.Invoke("oci:Core/getCpes:getCpes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCpes.
type GetCpesArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string          `pulumi:"compartmentId"`
	Filters       []GetCpesFilter `pulumi:"filters"`
}

// A collection of values returned by getCpes.
type GetCpesResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the CPE.
	CompartmentId string `pulumi:"compartmentId"`
	// The list of cpes.
	Cpes    []GetCpesCpe    `pulumi:"cpes"`
	Filters []GetCpesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetCpesOutput(ctx *pulumi.Context, args GetCpesOutputArgs, opts ...pulumi.InvokeOption) GetCpesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCpesResult, error) {
			args := v.(GetCpesArgs)
			r, err := GetCpes(ctx, &args, opts...)
			var s GetCpesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCpesResultOutput)
}

// A collection of arguments for invoking getCpes.
type GetCpesOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput      `pulumi:"compartmentId"`
	Filters       GetCpesFilterArrayInput `pulumi:"filters"`
}

func (GetCpesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCpesArgs)(nil)).Elem()
}

// A collection of values returned by getCpes.
type GetCpesResultOutput struct{ *pulumi.OutputState }

func (GetCpesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCpesResult)(nil)).Elem()
}

func (o GetCpesResultOutput) ToGetCpesResultOutput() GetCpesResultOutput {
	return o
}

func (o GetCpesResultOutput) ToGetCpesResultOutputWithContext(ctx context.Context) GetCpesResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the CPE.
func (o GetCpesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCpesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The list of cpes.
func (o GetCpesResultOutput) Cpes() GetCpesCpeArrayOutput {
	return o.ApplyT(func(v GetCpesResult) []GetCpesCpe { return v.Cpes }).(GetCpesCpeArrayOutput)
}

func (o GetCpesResultOutput) Filters() GetCpesFilterArrayOutput {
	return o.ApplyT(func(v GetCpesResult) []GetCpesFilter { return v.Filters }).(GetCpesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCpesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCpesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCpesResultOutput{})
}
