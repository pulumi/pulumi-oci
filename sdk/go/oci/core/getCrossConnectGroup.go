// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Cross Connect Group resource in Oracle Cloud Infrastructure Core service.
//
// Gets the specified cross-connect group's information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.GetCrossConnectGroup(ctx, &core.GetCrossConnectGroupArgs{
//				CrossConnectGroupId: testCrossConnectGroupOciCoreCrossConnectGroup.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCrossConnectGroup(ctx *pulumi.Context, args *LookupCrossConnectGroupArgs, opts ...pulumi.InvokeOption) (*LookupCrossConnectGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCrossConnectGroupResult
	err := ctx.Invoke("oci:Core/getCrossConnectGroup:getCrossConnectGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossConnectGroup.
type LookupCrossConnectGroupArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
	CrossConnectGroupId string `pulumi:"crossConnectGroupId"`
}

// A collection of values returned by getCrossConnectGroup.
type LookupCrossConnectGroupResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the cross-connect group.
	CompartmentId       string `pulumi:"compartmentId"`
	CrossConnectGroupId string `pulumi:"crossConnectGroupId"`
	// A reference name or identifier for the physical fiber connection that this cross-connect group uses.
	CustomerReferenceName string `pulumi:"customerReferenceName"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The cross-connect group's Oracle ID (OCID).
	Id string `pulumi:"id"`
	// Properties used for MACsec (if capable).
	MacsecProperties []GetCrossConnectGroupMacsecProperty `pulumi:"macsecProperties"`
	// The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
	OciLogicalDeviceName string `pulumi:"ociLogicalDeviceName"`
	// The FastConnect device that terminates the physical connection.
	OciPhysicalDeviceName string `pulumi:"ociPhysicalDeviceName"`
	// The cross-connect group's current state.
	State string `pulumi:"state"`
	// The date and time the cross-connect group was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
}

func LookupCrossConnectGroupOutput(ctx *pulumi.Context, args LookupCrossConnectGroupOutputArgs, opts ...pulumi.InvokeOption) LookupCrossConnectGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCrossConnectGroupResultOutput, error) {
			args := v.(LookupCrossConnectGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Core/getCrossConnectGroup:getCrossConnectGroup", args, LookupCrossConnectGroupResultOutput{}, options).(LookupCrossConnectGroupResultOutput), nil
		}).(LookupCrossConnectGroupResultOutput)
}

// A collection of arguments for invoking getCrossConnectGroup.
type LookupCrossConnectGroupOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect group.
	CrossConnectGroupId pulumi.StringInput `pulumi:"crossConnectGroupId"`
}

func (LookupCrossConnectGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrossConnectGroupArgs)(nil)).Elem()
}

// A collection of values returned by getCrossConnectGroup.
type LookupCrossConnectGroupResultOutput struct{ *pulumi.OutputState }

func (LookupCrossConnectGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCrossConnectGroupResult)(nil)).Elem()
}

func (o LookupCrossConnectGroupResultOutput) ToLookupCrossConnectGroupResultOutput() LookupCrossConnectGroupResultOutput {
	return o
}

func (o LookupCrossConnectGroupResultOutput) ToLookupCrossConnectGroupResultOutputWithContext(ctx context.Context) LookupCrossConnectGroupResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the cross-connect group.
func (o LookupCrossConnectGroupResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o LookupCrossConnectGroupResultOutput) CrossConnectGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.CrossConnectGroupId }).(pulumi.StringOutput)
}

// A reference name or identifier for the physical fiber connection that this cross-connect group uses.
func (o LookupCrossConnectGroupResultOutput) CustomerReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.CustomerReferenceName }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o LookupCrossConnectGroupResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o LookupCrossConnectGroupResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupCrossConnectGroupResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The cross-connect group's Oracle ID (OCID).
func (o LookupCrossConnectGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Properties used for MACsec (if capable).
func (o LookupCrossConnectGroupResultOutput) MacsecProperties() GetCrossConnectGroupMacsecPropertyArrayOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) []GetCrossConnectGroupMacsecProperty { return v.MacsecProperties }).(GetCrossConnectGroupMacsecPropertyArrayOutput)
}

// The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
func (o LookupCrossConnectGroupResultOutput) OciLogicalDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.OciLogicalDeviceName }).(pulumi.StringOutput)
}

// The FastConnect device that terminates the physical connection.
func (o LookupCrossConnectGroupResultOutput) OciPhysicalDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.OciPhysicalDeviceName }).(pulumi.StringOutput)
}

// The cross-connect group's current state.
func (o LookupCrossConnectGroupResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the cross-connect group was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o LookupCrossConnectGroupResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCrossConnectGroupResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCrossConnectGroupResultOutput{})
}
