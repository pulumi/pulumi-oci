// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Cross Connect Groups in Oracle Cloud Infrastructure Core service.
//
// Lists the cross-connect groups in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.GetCrossConnectGroups(ctx, &core.GetCrossConnectGroupsArgs{
//				CompartmentId: compartmentId,
//				DisplayName:   pulumi.StringRef(crossConnectGroupDisplayName),
//				State:         pulumi.StringRef(crossConnectGroupState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCrossConnectGroups(ctx *pulumi.Context, args *GetCrossConnectGroupsArgs, opts ...pulumi.InvokeOption) (*GetCrossConnectGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCrossConnectGroupsResult
	err := ctx.Invoke("oci:Core/getCrossConnectGroups:getCrossConnectGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossConnectGroups.
type GetCrossConnectGroupsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetCrossConnectGroupsFilter `pulumi:"filters"`
	// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getCrossConnectGroups.
type GetCrossConnectGroupsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the cross-connect group.
	CompartmentId string `pulumi:"compartmentId"`
	// The list of cross_connect_groups.
	CrossConnectGroups []GetCrossConnectGroupsCrossConnectGroup `pulumi:"crossConnectGroups"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetCrossConnectGroupsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The cross-connect group's current state.
	State *string `pulumi:"state"`
}

func GetCrossConnectGroupsOutput(ctx *pulumi.Context, args GetCrossConnectGroupsOutputArgs, opts ...pulumi.InvokeOption) GetCrossConnectGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCrossConnectGroupsResult, error) {
			args := v.(GetCrossConnectGroupsArgs)
			r, err := GetCrossConnectGroups(ctx, &args, opts...)
			var s GetCrossConnectGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCrossConnectGroupsResultOutput)
}

// A collection of arguments for invoking getCrossConnectGroups.
type GetCrossConnectGroupsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName pulumi.StringPtrInput                 `pulumi:"displayName"`
	Filters     GetCrossConnectGroupsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetCrossConnectGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossConnectGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getCrossConnectGroups.
type GetCrossConnectGroupsResultOutput struct{ *pulumi.OutputState }

func (GetCrossConnectGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossConnectGroupsResult)(nil)).Elem()
}

func (o GetCrossConnectGroupsResultOutput) ToGetCrossConnectGroupsResultOutput() GetCrossConnectGroupsResultOutput {
	return o
}

func (o GetCrossConnectGroupsResultOutput) ToGetCrossConnectGroupsResultOutputWithContext(ctx context.Context) GetCrossConnectGroupsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the cross-connect group.
func (o GetCrossConnectGroupsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The list of cross_connect_groups.
func (o GetCrossConnectGroupsResultOutput) CrossConnectGroups() GetCrossConnectGroupsCrossConnectGroupArrayOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) []GetCrossConnectGroupsCrossConnectGroup {
		return v.CrossConnectGroups
	}).(GetCrossConnectGroupsCrossConnectGroupArrayOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetCrossConnectGroupsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetCrossConnectGroupsResultOutput) Filters() GetCrossConnectGroupsFilterArrayOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) []GetCrossConnectGroupsFilter { return v.Filters }).(GetCrossConnectGroupsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCrossConnectGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The cross-connect group's current state.
func (o GetCrossConnectGroupsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossConnectGroupsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCrossConnectGroupsResultOutput{})
}
