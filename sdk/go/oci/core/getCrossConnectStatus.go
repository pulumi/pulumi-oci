// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Cross Connect Status resource in Oracle Cloud Infrastructure Core service.
//
// Gets the status of the specified cross-connect.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.GetCrossConnectStatus(ctx, &core.GetCrossConnectStatusArgs{
//				CrossConnectId: oci_core_cross_connect.Test_cross_connect.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCrossConnectStatus(ctx *pulumi.Context, args *GetCrossConnectStatusArgs, opts ...pulumi.InvokeOption) (*GetCrossConnectStatusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCrossConnectStatusResult
	err := ctx.Invoke("oci:Core/getCrossConnectStatus:getCrossConnectStatus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossConnectStatus.
type GetCrossConnectStatusArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
	CrossConnectId string `pulumi:"crossConnectId"`
}

// A collection of values returned by getCrossConnectStatus.
type GetCrossConnectStatusResult struct {
	// The OCID of the cross-connect.
	CrossConnectId string `pulumi:"crossConnectId"`
	// Encryption status of the CrossConnect
	EncryptionStatus string `pulumi:"encryptionStatus"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether Oracle's side of the interface is up or down.
	InterfaceState string `pulumi:"interfaceState"`
	// The light level of the cross-connect (in dBm).  Example: `14.0`
	LightLevelIndBm float64 `pulumi:"lightLevelIndBm"`
	// Status indicator corresponding to the light level.
	// * **NO_LIGHT:** No measurable light
	// * **LOW_WARN:** There's measurable light but it's too low
	// * **HIGH_WARN:** Light level is too high
	// * **BAD:** There's measurable light but the signal-to-noise ratio is bad
	// * **GOOD:** Good light level
	LightLevelIndicator string `pulumi:"lightLevelIndicator"`
}

func GetCrossConnectStatusOutput(ctx *pulumi.Context, args GetCrossConnectStatusOutputArgs, opts ...pulumi.InvokeOption) GetCrossConnectStatusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCrossConnectStatusResult, error) {
			args := v.(GetCrossConnectStatusArgs)
			r, err := GetCrossConnectStatus(ctx, &args, opts...)
			var s GetCrossConnectStatusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCrossConnectStatusResultOutput)
}

// A collection of arguments for invoking getCrossConnectStatus.
type GetCrossConnectStatusOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the cross-connect.
	CrossConnectId pulumi.StringInput `pulumi:"crossConnectId"`
}

func (GetCrossConnectStatusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossConnectStatusArgs)(nil)).Elem()
}

// A collection of values returned by getCrossConnectStatus.
type GetCrossConnectStatusResultOutput struct{ *pulumi.OutputState }

func (GetCrossConnectStatusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossConnectStatusResult)(nil)).Elem()
}

func (o GetCrossConnectStatusResultOutput) ToGetCrossConnectStatusResultOutput() GetCrossConnectStatusResultOutput {
	return o
}

func (o GetCrossConnectStatusResultOutput) ToGetCrossConnectStatusResultOutputWithContext(ctx context.Context) GetCrossConnectStatusResultOutput {
	return o
}

// The OCID of the cross-connect.
func (o GetCrossConnectStatusResultOutput) CrossConnectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectStatusResult) string { return v.CrossConnectId }).(pulumi.StringOutput)
}

// Encryption status of the CrossConnect
func (o GetCrossConnectStatusResultOutput) EncryptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectStatusResult) string { return v.EncryptionStatus }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCrossConnectStatusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectStatusResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether Oracle's side of the interface is up or down.
func (o GetCrossConnectStatusResultOutput) InterfaceState() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectStatusResult) string { return v.InterfaceState }).(pulumi.StringOutput)
}

// The light level of the cross-connect (in dBm).  Example: `14.0`
func (o GetCrossConnectStatusResultOutput) LightLevelIndBm() pulumi.Float64Output {
	return o.ApplyT(func(v GetCrossConnectStatusResult) float64 { return v.LightLevelIndBm }).(pulumi.Float64Output)
}

// Status indicator corresponding to the light level.
// * **NO_LIGHT:** No measurable light
// * **LOW_WARN:** There's measurable light but it's too low
// * **HIGH_WARN:** Light level is too high
// * **BAD:** There's measurable light but the signal-to-noise ratio is bad
// * **GOOD:** Good light level
func (o GetCrossConnectStatusResultOutput) LightLevelIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossConnectStatusResult) string { return v.LightLevelIndicator }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCrossConnectStatusResultOutput{})
}
