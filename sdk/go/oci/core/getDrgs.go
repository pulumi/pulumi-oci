// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Drgs in Oracle Cloud Infrastructure Core service.
//
// Lists the DRGs in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.GetDrgs(ctx, &core.GetDrgsArgs{
//				CompartmentId: _var.Compartment_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDrgs(ctx *pulumi.Context, args *GetDrgsArgs, opts ...pulumi.InvokeOption) (*GetDrgsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDrgsResult
	err := ctx.Invoke("oci:Core/getDrgs:getDrgs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDrgs.
type GetDrgsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string          `pulumi:"compartmentId"`
	Filters       []GetDrgsFilter `pulumi:"filters"`
}

// A collection of values returned by getDrgs.
type GetDrgsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the DRG.
	CompartmentId string `pulumi:"compartmentId"`
	// The list of drgs.
	Drgs    []GetDrgsDrg    `pulumi:"drgs"`
	Filters []GetDrgsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetDrgsOutput(ctx *pulumi.Context, args GetDrgsOutputArgs, opts ...pulumi.InvokeOption) GetDrgsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDrgsResult, error) {
			args := v.(GetDrgsArgs)
			r, err := GetDrgs(ctx, &args, opts...)
			var s GetDrgsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDrgsResultOutput)
}

// A collection of arguments for invoking getDrgs.
type GetDrgsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput      `pulumi:"compartmentId"`
	Filters       GetDrgsFilterArrayInput `pulumi:"filters"`
}

func (GetDrgsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDrgsArgs)(nil)).Elem()
}

// A collection of values returned by getDrgs.
type GetDrgsResultOutput struct{ *pulumi.OutputState }

func (GetDrgsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDrgsResult)(nil)).Elem()
}

func (o GetDrgsResultOutput) ToGetDrgsResultOutput() GetDrgsResultOutput {
	return o
}

func (o GetDrgsResultOutput) ToGetDrgsResultOutputWithContext(ctx context.Context) GetDrgsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the DRG.
func (o GetDrgsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDrgsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The list of drgs.
func (o GetDrgsResultOutput) Drgs() GetDrgsDrgArrayOutput {
	return o.ApplyT(func(v GetDrgsResult) []GetDrgsDrg { return v.Drgs }).(GetDrgsDrgArrayOutput)
}

func (o GetDrgsResultOutput) Filters() GetDrgsFilterArrayOutput {
	return o.ApplyT(func(v GetDrgsResult) []GetDrgsFilter { return v.Filters }).(GetDrgsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDrgsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDrgsResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDrgsResultOutput{})
}
