// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Volume Backups in Oracle Cloud Infrastructure Core service.
//
// Lists the volume backups in the specified compartment. You can filter the results by volume.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.GetVolumeBackups(ctx, &core.GetVolumeBackupsArgs{
//				CompartmentId:        compartmentId,
//				DisplayName:          pulumi.StringRef(volumeBackupDisplayName),
//				SourceVolumeBackupId: pulumi.StringRef(testVolumeBackup.Id),
//				State:                pulumi.StringRef(volumeBackupState),
//				VolumeId:             pulumi.StringRef(testVolume.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVolumeBackups(ctx *pulumi.Context, args *GetVolumeBackupsArgs, opts ...pulumi.InvokeOption) (*GetVolumeBackupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeBackupsResult
	err := ctx.Invoke("oci:Core/getVolumeBackups:getVolumeBackups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeBackups.
type GetVolumeBackupsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName *string                  `pulumi:"displayName"`
	Filters     []GetVolumeBackupsFilter `pulumi:"filters"`
	// A filter to return only resources that originated from the given source volume backup.
	SourceVolumeBackupId *string `pulumi:"sourceVolumeBackupId"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
	// The OCID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

// A collection of values returned by getVolumeBackups.
type GetVolumeBackupsResult struct {
	// The OCID of the compartment that contains the volume backup.
	CompartmentId string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                  `pulumi:"displayName"`
	Filters     []GetVolumeBackupsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The OCID of the source volume backup.
	SourceVolumeBackupId *string `pulumi:"sourceVolumeBackupId"`
	// The current state of a volume backup.
	State *string `pulumi:"state"`
	// The list of volume_backups.
	VolumeBackups []GetVolumeBackupsVolumeBackup `pulumi:"volumeBackups"`
	// The OCID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

func GetVolumeBackupsOutput(ctx *pulumi.Context, args GetVolumeBackupsOutputArgs, opts ...pulumi.InvokeOption) GetVolumeBackupsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVolumeBackupsResultOutput, error) {
			args := v.(GetVolumeBackupsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Core/getVolumeBackups:getVolumeBackups", args, GetVolumeBackupsResultOutput{}, options).(GetVolumeBackupsResultOutput), nil
		}).(GetVolumeBackupsResultOutput)
}

// A collection of arguments for invoking getVolumeBackups.
type GetVolumeBackupsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName pulumi.StringPtrInput            `pulumi:"displayName"`
	Filters     GetVolumeBackupsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that originated from the given source volume backup.
	SourceVolumeBackupId pulumi.StringPtrInput `pulumi:"sourceVolumeBackupId"`
	// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The OCID of the volume.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (GetVolumeBackupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeBackupsArgs)(nil)).Elem()
}

// A collection of values returned by getVolumeBackups.
type GetVolumeBackupsResultOutput struct{ *pulumi.OutputState }

func (GetVolumeBackupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeBackupsResult)(nil)).Elem()
}

func (o GetVolumeBackupsResultOutput) ToGetVolumeBackupsResultOutput() GetVolumeBackupsResultOutput {
	return o
}

func (o GetVolumeBackupsResultOutput) ToGetVolumeBackupsResultOutputWithContext(ctx context.Context) GetVolumeBackupsResultOutput {
	return o
}

// The OCID of the compartment that contains the volume backup.
func (o GetVolumeBackupsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetVolumeBackupsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetVolumeBackupsResultOutput) Filters() GetVolumeBackupsFilterArrayOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) []GetVolumeBackupsFilter { return v.Filters }).(GetVolumeBackupsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumeBackupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The OCID of the source volume backup.
func (o GetVolumeBackupsResultOutput) SourceVolumeBackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) *string { return v.SourceVolumeBackupId }).(pulumi.StringPtrOutput)
}

// The current state of a volume backup.
func (o GetVolumeBackupsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The list of volume_backups.
func (o GetVolumeBackupsResultOutput) VolumeBackups() GetVolumeBackupsVolumeBackupArrayOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) []GetVolumeBackupsVolumeBackup { return v.VolumeBackups }).(GetVolumeBackupsVolumeBackupArrayOutput)
}

// The OCID of the volume.
func (o GetVolumeBackupsResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeBackupsResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeBackupsResultOutput{})
}
