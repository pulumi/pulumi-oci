// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ip Sec Connection Tunnel Management resource in Oracle Cloud Infrastructure Core service.
//
// Updates the specified tunnel. This operation lets you change tunnel attributes such as the
// routing type (BGP dynamic routing or static routing). Here are some important notes:
//
//     * If you change the tunnel's routing type or BGP session configuration, the tunnel will go
//     down while it's reprovisioned.
//
//     * If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
//     BGP session configuration attributes have been set (bgpSessionConfig).
//
//     * If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
//     IPSecConnection already has at least one valid CIDR
//     static route.
//
// ** IMPORTANT **
// Destroying `the Core.IpsecConnectionTunnelManagement` leaves the resource in its existing state. It will not destroy the tunnel and it will not return the tunnel to its default values.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Core.NewIpsecConnectionTunnelManagement(ctx, "testIpSecConnectionTunnel", &Core.IpsecConnectionTunnelManagementArgs{
// 			IpsecId:  pulumi.Any(oci_core_ipsec.Test_ipsec.Id),
// 			TunnelId: pulumi.Any(data.Oci_core_ipsec_connection_tunnels.Test_ip_sec_connection_tunnels.Ip_sec_connection_tunnels[0].Id),
// 			Routing:  pulumi.Any(_var.Ip_sec_connection_tunnel_management_routing),
// 			BgpSessionInfos: core.IpsecConnectionTunnelManagementBgpSessionInfoArray{
// 				&core.IpsecConnectionTunnelManagementBgpSessionInfoArgs{
// 					CustomerBgpAsn:      pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_customer_bgp_asn),
// 					CustomerInterfaceIp: pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_customer_interface_ip),
// 					OracleInterfaceIp:   pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_oracle_interface_ip),
// 				},
// 			},
// 			DisplayName: pulumi.Any(_var.Ip_sec_connection_tunnel_management_display_name),
// 			EncryptionDomainConfig: &core.IpsecConnectionTunnelManagementEncryptionDomainConfigArgs{
// 				CpeTrafficSelectors:    pulumi.Any(_var.Ip_sec_connection_tunnel_management_encryption_domain_config_cpe_traffic_selector),
// 				OracleTrafficSelectors: pulumi.Any(_var.Ip_sec_connection_tunnel_management_encryption_domain_config_oracle_traffic_selector),
// 			},
// 			SharedSecret: pulumi.Any(_var.Ip_sec_connection_tunnel_management_shared_secret),
// 			IkeVersion:   pulumi.String("V1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IpsecConnectionTunnelManagement struct {
	pulumi.CustomResourceState

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos IpsecConnectionTunnelManagementBgpSessionInfoArrayOutput `pulumi:"bgpSessionInfos"`
	// The OCID of the compartment containing the tunnel.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp pulumi.StringOutput `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName     pulumi.StringOutput                                 `pulumi:"displayName"`
	DpdConfigs      IpsecConnectionTunnelManagementDpdConfigArrayOutput `pulumi:"dpdConfigs"`
	DpdMode         pulumi.StringOutput                                 `pulumi:"dpdMode"`
	DpdTimeoutInSec pulumi.IntOutput                                    `pulumi:"dpdTimeoutInSec"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigOutput `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringOutput `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId               pulumi.StringOutput                                      `pulumi:"ipsecId"`
	NatTranslationEnabled pulumi.StringOutput                                      `pulumi:"natTranslationEnabled"`
	OracleCanInitiate     pulumi.StringOutput                                      `pulumi:"oracleCanInitiate"`
	PhaseOneDetails       IpsecConnectionTunnelManagementPhaseOneDetailArrayOutput `pulumi:"phaseOneDetails"`
	PhaseTwoDetails       IpsecConnectionTunnelManagementPhaseTwoDetailArrayOutput `pulumi:"phaseTwoDetails"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringOutput `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringOutput `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringOutput `pulumi:"state"`
	// The tunnel's current state.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringOutput `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringOutput `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringOutput `pulumi:"vpnIp"`
}

// NewIpsecConnectionTunnelManagement registers a new resource with the given unique name, arguments, and options.
func NewIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, args *IpsecConnectionTunnelManagementArgs, opts ...pulumi.ResourceOption) (*IpsecConnectionTunnelManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpsecId == nil {
		return nil, errors.New("invalid value for required argument 'IpsecId'")
	}
	if args.Routing == nil {
		return nil, errors.New("invalid value for required argument 'Routing'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	var resource IpsecConnectionTunnelManagement
	err := ctx.RegisterResource("oci:Core/ipsecConnectionTunnelManagement:IpsecConnectionTunnelManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsecConnectionTunnelManagement gets an existing IpsecConnectionTunnelManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsecConnectionTunnelManagementState, opts ...pulumi.ResourceOption) (*IpsecConnectionTunnelManagement, error) {
	var resource IpsecConnectionTunnelManagement
	err := ctx.ReadResource("oci:Core/ipsecConnectionTunnelManagement:IpsecConnectionTunnelManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsecConnectionTunnelManagement resources.
type ipsecConnectionTunnelManagementState struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos []IpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfos"`
	// The OCID of the compartment containing the tunnel.
	CompartmentId *string `pulumi:"compartmentId"`
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp *string `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName     *string                                    `pulumi:"displayName"`
	DpdConfigs      []IpsecConnectionTunnelManagementDpdConfig `pulumi:"dpdConfigs"`
	DpdMode         *string                                    `pulumi:"dpdMode"`
	DpdTimeoutInSec *int                                       `pulumi:"dpdTimeoutInSec"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *IpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId               *string                                         `pulumi:"ipsecId"`
	NatTranslationEnabled *string                                         `pulumi:"natTranslationEnabled"`
	OracleCanInitiate     *string                                         `pulumi:"oracleCanInitiate"`
	PhaseOneDetails       []IpsecConnectionTunnelManagementPhaseOneDetail `pulumi:"phaseOneDetails"`
	PhaseTwoDetails       []IpsecConnectionTunnelManagementPhaseTwoDetail `pulumi:"phaseTwoDetails"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State *string `pulumi:"state"`
	// The tunnel's current state.
	Status *string `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated *string `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId *string `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp *string `pulumi:"vpnIp"`
}

type IpsecConnectionTunnelManagementState struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos IpsecConnectionTunnelManagementBgpSessionInfoArrayInput
	// The OCID of the compartment containing the tunnel.
	CompartmentId pulumi.StringPtrInput
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName     pulumi.StringPtrInput
	DpdConfigs      IpsecConnectionTunnelManagementDpdConfigArrayInput
	DpdMode         pulumi.StringPtrInput
	DpdTimeoutInSec pulumi.IntPtrInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId               pulumi.StringPtrInput
	NatTranslationEnabled pulumi.StringPtrInput
	OracleCanInitiate     pulumi.StringPtrInput
	PhaseOneDetails       IpsecConnectionTunnelManagementPhaseOneDetailArrayInput
	PhaseTwoDetails       IpsecConnectionTunnelManagementPhaseTwoDetailArrayInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringPtrInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringPtrInput
	// The tunnel's current state.
	Status pulumi.StringPtrInput
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringPtrInput
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringPtrInput
}

func (IpsecConnectionTunnelManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecConnectionTunnelManagementState)(nil)).Elem()
}

type ipsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos []IpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfos"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                                    `pulumi:"displayName"`
	DpdConfigs  []IpsecConnectionTunnelManagementDpdConfig `pulumi:"dpdConfigs"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *IpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId string `pulumi:"ipsecId"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId string `pulumi:"tunnelId"`
}

// The set of arguments for constructing a IpsecConnectionTunnelManagement resource.
type IpsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos IpsecConnectionTunnelManagementBgpSessionInfoArrayInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	DpdConfigs  IpsecConnectionTunnelManagementDpdConfigArrayInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringInput
}

func (IpsecConnectionTunnelManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecConnectionTunnelManagementArgs)(nil)).Elem()
}

type IpsecConnectionTunnelManagementInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput
	ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput
}

func (*IpsecConnectionTunnelManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i *IpsecConnectionTunnelManagement) ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput {
	return i.ToIpsecConnectionTunnelManagementOutputWithContext(context.Background())
}

func (i *IpsecConnectionTunnelManagement) ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementOutput)
}

// IpsecConnectionTunnelManagementArrayInput is an input type that accepts IpsecConnectionTunnelManagementArray and IpsecConnectionTunnelManagementArrayOutput values.
// You can construct a concrete instance of `IpsecConnectionTunnelManagementArrayInput` via:
//
//          IpsecConnectionTunnelManagementArray{ IpsecConnectionTunnelManagementArgs{...} }
type IpsecConnectionTunnelManagementArrayInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput
	ToIpsecConnectionTunnelManagementArrayOutputWithContext(context.Context) IpsecConnectionTunnelManagementArrayOutput
}

type IpsecConnectionTunnelManagementArray []IpsecConnectionTunnelManagementInput

func (IpsecConnectionTunnelManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i IpsecConnectionTunnelManagementArray) ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput {
	return i.ToIpsecConnectionTunnelManagementArrayOutputWithContext(context.Background())
}

func (i IpsecConnectionTunnelManagementArray) ToIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementArrayOutput)
}

// IpsecConnectionTunnelManagementMapInput is an input type that accepts IpsecConnectionTunnelManagementMap and IpsecConnectionTunnelManagementMapOutput values.
// You can construct a concrete instance of `IpsecConnectionTunnelManagementMapInput` via:
//
//          IpsecConnectionTunnelManagementMap{ "key": IpsecConnectionTunnelManagementArgs{...} }
type IpsecConnectionTunnelManagementMapInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput
	ToIpsecConnectionTunnelManagementMapOutputWithContext(context.Context) IpsecConnectionTunnelManagementMapOutput
}

type IpsecConnectionTunnelManagementMap map[string]IpsecConnectionTunnelManagementInput

func (IpsecConnectionTunnelManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i IpsecConnectionTunnelManagementMap) ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput {
	return i.ToIpsecConnectionTunnelManagementMapOutputWithContext(context.Background())
}

func (i IpsecConnectionTunnelManagementMap) ToIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementMapOutput)
}

type IpsecConnectionTunnelManagementOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementOutput) ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput {
	return o
}

func (o IpsecConnectionTunnelManagementOutput) ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput {
	return o
}

type IpsecConnectionTunnelManagementArrayOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementArrayOutput) ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o IpsecConnectionTunnelManagementArrayOutput) ToIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o IpsecConnectionTunnelManagementArrayOutput) Index(i pulumi.IntInput) IpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsecConnectionTunnelManagement {
		return vs[0].([]*IpsecConnectionTunnelManagement)[vs[1].(int)]
	}).(IpsecConnectionTunnelManagementOutput)
}

type IpsecConnectionTunnelManagementMapOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementMapOutput) ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o IpsecConnectionTunnelManagementMapOutput) ToIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o IpsecConnectionTunnelManagementMapOutput) MapIndex(k pulumi.StringInput) IpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsecConnectionTunnelManagement {
		return vs[0].(map[string]*IpsecConnectionTunnelManagement)[vs[1].(string)]
	}).(IpsecConnectionTunnelManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementInput)(nil)).Elem(), &IpsecConnectionTunnelManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementArrayInput)(nil)).Elem(), IpsecConnectionTunnelManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementMapInput)(nil)).Elem(), IpsecConnectionTunnelManagementMap{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementOutput{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementArrayOutput{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementMapOutput{})
}
