// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ip Sec Connection Tunnel Management resource in Oracle Cloud Infrastructure Core service.
//
// Updates the specified tunnel. This operation lets you change tunnel attributes such as the
// routing type (BGP dynamic routing or static routing). Here are some important notes:
//
//   - If you change the tunnel's routing type or BGP session configuration, the tunnel will go
//     down while it's reprovisioned.
//
//   - If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
//     BGP session configuration attributes have been set (bgpSessionConfig).
//
//   - If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
//     IPSecConnection already has at least one valid CIDR
//     static route.
//
// ** IMPORTANT **
// Destroying the `Core.IpsecConnectionTunnelManagement` leaves the resource in its existing state. It will not destroy the tunnel and it will not return the tunnel to its default values.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.NewIpsecConnectionTunnelManagement(ctx, "test_ip_sec_connection_tunnel", &core.IpsecConnectionTunnelManagementArgs{
//				IpsecId:  pulumi.Any(testIpsec.Id),
//				TunnelId: pulumi.Any(testIpSecConnectionTunnels.IpSecConnectionTunnels[0].Id),
//				Routing:  pulumi.Any(ipSecConnectionTunnelManagementRouting),
//				BgpSessionInfo: &core.IpsecConnectionTunnelManagementBgpSessionInfoArgs{
//					CustomerBgpAsn:      pulumi.Any(ipSecConnectionTunnelManagementBgpSessionInfoCustomerBgpAsn),
//					CustomerInterfaceIp: pulumi.Any(ipSecConnectionTunnelManagementBgpSessionInfoCustomerInterfaceIp),
//					OracleInterfaceIp:   pulumi.Any(ipSecConnectionTunnelManagementBgpSessionInfoOracleInterfaceIp),
//				},
//				DisplayName: pulumi.Any(ipSecConnectionTunnelManagementDisplayName),
//				EncryptionDomainConfig: &core.IpsecConnectionTunnelManagementEncryptionDomainConfigArgs{
//					CpeTrafficSelectors:    pulumi.Any(ipSecConnectionTunnelManagementEncryptionDomainConfigCpeTrafficSelector),
//					OracleTrafficSelectors: pulumi.Any(ipSecConnectionTunnelManagementEncryptionDomainConfigOracleTrafficSelector),
//				},
//				SharedSecret: pulumi.Any(ipSecConnectionTunnelManagementSharedSecret),
//				IkeVersion:   pulumi.String("V1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpsecConnectionTunnelManagement struct {
	pulumi.CustomResourceState

	// The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
	AssociatedVirtualCircuits pulumi.StringArrayOutput `pulumi:"associatedVirtualCircuits"`
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	//
	// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
	BgpSessionInfo IpsecConnectionTunnelManagementBgpSessionInfoOutput `pulumi:"bgpSessionInfo"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The IP address of the CPE device's VPN headend.  Example: `203.0.113.22`
	CpeIp pulumi.StringOutput `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput                                 `pulumi:"displayName"`
	DpdConfigs  IpsecConnectionTunnelManagementDpdConfigArrayOutput `pulumi:"dpdConfigs"`
	// Dead peer detection (DPD) mode set on the Oracle side of the connection.
	DpdMode pulumi.StringOutput `pulumi:"dpdMode"`
	// DPD timeout in seconds.
	DpdTimeoutInSec pulumi.IntOutput `pulumi:"dpdTimeoutInSec"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigOutput `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringOutput `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringOutput `pulumi:"ipsecId"`
	// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	//
	// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
	//
	// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
	NatTranslationEnabled pulumi.StringOutput `pulumi:"natTranslationEnabled"`
	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
	OracleCanInitiate pulumi.StringOutput `pulumi:"oracleCanInitiate"`
	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	//
	// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
	PhaseOneDetails IpsecConnectionTunnelManagementPhaseOneDetailsOutput `pulumi:"phaseOneDetails"`
	// Configuration details for IPSec phase two configuration parameters.
	//
	// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
	PhaseTwoDetails IpsecConnectionTunnelManagementPhaseTwoDetailsOutput `pulumi:"phaseTwoDetails"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringOutput `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringOutput `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringOutput `pulumi:"state"`
	// The tunnel's current state.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringOutput `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringOutput `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringOutput `pulumi:"vpnIp"`
}

// NewIpsecConnectionTunnelManagement registers a new resource with the given unique name, arguments, and options.
func NewIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, args *IpsecConnectionTunnelManagementArgs, opts ...pulumi.ResourceOption) (*IpsecConnectionTunnelManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpsecId == nil {
		return nil, errors.New("invalid value for required argument 'IpsecId'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	if args.SharedSecret != nil {
		args.SharedSecret = pulumi.ToSecret(args.SharedSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpsecConnectionTunnelManagement
	err := ctx.RegisterResource("oci:Core/ipsecConnectionTunnelManagement:IpsecConnectionTunnelManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsecConnectionTunnelManagement gets an existing IpsecConnectionTunnelManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsecConnectionTunnelManagementState, opts ...pulumi.ResourceOption) (*IpsecConnectionTunnelManagement, error) {
	var resource IpsecConnectionTunnelManagement
	err := ctx.ReadResource("oci:Core/ipsecConnectionTunnelManagement:IpsecConnectionTunnelManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsecConnectionTunnelManagement resources.
type ipsecConnectionTunnelManagementState struct {
	// The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
	AssociatedVirtualCircuits []string `pulumi:"associatedVirtualCircuits"`
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	//
	// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
	BgpSessionInfo *IpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfo"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
	CompartmentId *string `pulumi:"compartmentId"`
	// The IP address of the CPE device's VPN headend.  Example: `203.0.113.22`
	CpeIp *string `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                                    `pulumi:"displayName"`
	DpdConfigs  []IpsecConnectionTunnelManagementDpdConfig `pulumi:"dpdConfigs"`
	// Dead peer detection (DPD) mode set on the Oracle side of the connection.
	DpdMode *string `pulumi:"dpdMode"`
	// DPD timeout in seconds.
	DpdTimeoutInSec *int `pulumi:"dpdTimeoutInSec"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *IpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId *string `pulumi:"ipsecId"`
	// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	//
	// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
	//
	// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
	NatTranslationEnabled *string `pulumi:"natTranslationEnabled"`
	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
	OracleCanInitiate *string `pulumi:"oracleCanInitiate"`
	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	//
	// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
	PhaseOneDetails *IpsecConnectionTunnelManagementPhaseOneDetails `pulumi:"phaseOneDetails"`
	// Configuration details for IPSec phase two configuration parameters.
	//
	// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
	PhaseTwoDetails *IpsecConnectionTunnelManagementPhaseTwoDetails `pulumi:"phaseTwoDetails"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State *string `pulumi:"state"`
	// The tunnel's current state.
	Status *string `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated *string `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId *string `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp *string `pulumi:"vpnIp"`
}

type IpsecConnectionTunnelManagementState struct {
	// The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
	AssociatedVirtualCircuits pulumi.StringArrayInput
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	//
	// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
	BgpSessionInfo IpsecConnectionTunnelManagementBgpSessionInfoPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
	CompartmentId pulumi.StringPtrInput
	// The IP address of the CPE device's VPN headend.  Example: `203.0.113.22`
	CpeIp pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	DpdConfigs  IpsecConnectionTunnelManagementDpdConfigArrayInput
	// Dead peer detection (DPD) mode set on the Oracle side of the connection.
	DpdMode pulumi.StringPtrInput
	// DPD timeout in seconds.
	DpdTimeoutInSec pulumi.IntPtrInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringPtrInput
	// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	//
	// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
	//
	// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
	NatTranslationEnabled pulumi.StringPtrInput
	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
	OracleCanInitiate pulumi.StringPtrInput
	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	//
	// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
	PhaseOneDetails IpsecConnectionTunnelManagementPhaseOneDetailsPtrInput
	// Configuration details for IPSec phase two configuration parameters.
	//
	// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
	PhaseTwoDetails IpsecConnectionTunnelManagementPhaseTwoDetailsPtrInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringPtrInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringPtrInput
	// The tunnel's current state.
	Status pulumi.StringPtrInput
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringPtrInput
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringPtrInput
}

func (IpsecConnectionTunnelManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecConnectionTunnelManagementState)(nil)).Elem()
}

type ipsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	//
	// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
	BgpSessionInfo *IpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfo"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                                    `pulumi:"displayName"`
	DpdConfigs  []IpsecConnectionTunnelManagementDpdConfig `pulumi:"dpdConfigs"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *IpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId string `pulumi:"ipsecId"`
	// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	//
	// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
	//
	// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
	NatTranslationEnabled *string `pulumi:"natTranslationEnabled"`
	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
	OracleCanInitiate *string `pulumi:"oracleCanInitiate"`
	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	//
	// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
	PhaseOneDetails *IpsecConnectionTunnelManagementPhaseOneDetails `pulumi:"phaseOneDetails"`
	// Configuration details for IPSec phase two configuration parameters.
	//
	// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
	PhaseTwoDetails *IpsecConnectionTunnelManagementPhaseTwoDetails `pulumi:"phaseTwoDetails"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId string `pulumi:"tunnelId"`
}

// The set of arguments for constructing a IpsecConnectionTunnelManagement resource.
type IpsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	//
	// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
	BgpSessionInfo IpsecConnectionTunnelManagementBgpSessionInfoPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	DpdConfigs  IpsecConnectionTunnelManagementDpdConfigArrayInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig IpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringInput
	// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	//
	// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
	//
	// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
	NatTranslationEnabled pulumi.StringPtrInput
	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
	OracleCanInitiate pulumi.StringPtrInput
	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	//
	// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
	PhaseOneDetails IpsecConnectionTunnelManagementPhaseOneDetailsPtrInput
	// Configuration details for IPSec phase two configuration parameters.
	//
	// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
	PhaseTwoDetails IpsecConnectionTunnelManagementPhaseTwoDetailsPtrInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringPtrInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringInput
}

func (IpsecConnectionTunnelManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecConnectionTunnelManagementArgs)(nil)).Elem()
}

type IpsecConnectionTunnelManagementInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput
	ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput
}

func (*IpsecConnectionTunnelManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i *IpsecConnectionTunnelManagement) ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput {
	return i.ToIpsecConnectionTunnelManagementOutputWithContext(context.Background())
}

func (i *IpsecConnectionTunnelManagement) ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementOutput)
}

// IpsecConnectionTunnelManagementArrayInput is an input type that accepts IpsecConnectionTunnelManagementArray and IpsecConnectionTunnelManagementArrayOutput values.
// You can construct a concrete instance of `IpsecConnectionTunnelManagementArrayInput` via:
//
//	IpsecConnectionTunnelManagementArray{ IpsecConnectionTunnelManagementArgs{...} }
type IpsecConnectionTunnelManagementArrayInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput
	ToIpsecConnectionTunnelManagementArrayOutputWithContext(context.Context) IpsecConnectionTunnelManagementArrayOutput
}

type IpsecConnectionTunnelManagementArray []IpsecConnectionTunnelManagementInput

func (IpsecConnectionTunnelManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i IpsecConnectionTunnelManagementArray) ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput {
	return i.ToIpsecConnectionTunnelManagementArrayOutputWithContext(context.Background())
}

func (i IpsecConnectionTunnelManagementArray) ToIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementArrayOutput)
}

// IpsecConnectionTunnelManagementMapInput is an input type that accepts IpsecConnectionTunnelManagementMap and IpsecConnectionTunnelManagementMapOutput values.
// You can construct a concrete instance of `IpsecConnectionTunnelManagementMapInput` via:
//
//	IpsecConnectionTunnelManagementMap{ "key": IpsecConnectionTunnelManagementArgs{...} }
type IpsecConnectionTunnelManagementMapInput interface {
	pulumi.Input

	ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput
	ToIpsecConnectionTunnelManagementMapOutputWithContext(context.Context) IpsecConnectionTunnelManagementMapOutput
}

type IpsecConnectionTunnelManagementMap map[string]IpsecConnectionTunnelManagementInput

func (IpsecConnectionTunnelManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i IpsecConnectionTunnelManagementMap) ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput {
	return i.ToIpsecConnectionTunnelManagementMapOutputWithContext(context.Background())
}

func (i IpsecConnectionTunnelManagementMap) ToIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecConnectionTunnelManagementMapOutput)
}

type IpsecConnectionTunnelManagementOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementOutput) ToIpsecConnectionTunnelManagementOutput() IpsecConnectionTunnelManagementOutput {
	return o
}

func (o IpsecConnectionTunnelManagementOutput) ToIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementOutput {
	return o
}

// The list of virtual circuit [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)s over which your network can reach this tunnel.
func (o IpsecConnectionTunnelManagementOutput) AssociatedVirtualCircuits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringArrayOutput { return v.AssociatedVirtualCircuits }).(pulumi.StringArrayOutput)
}

// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
//
// If the tunnel instead uses static routing, you may optionally provide this object and set an IP address for one or both ends of the IPSec tunnel for the purposes of troubleshooting or monitoring the tunnel.
func (o IpsecConnectionTunnelManagementOutput) BgpSessionInfo() IpsecConnectionTunnelManagementBgpSessionInfoOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) IpsecConnectionTunnelManagementBgpSessionInfoOutput {
		return v.BgpSessionInfo
	}).(IpsecConnectionTunnelManagementBgpSessionInfoOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the tunnel.
func (o IpsecConnectionTunnelManagementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The IP address of the CPE device's VPN headend.  Example: `203.0.113.22`
func (o IpsecConnectionTunnelManagementOutput) CpeIp() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.CpeIp }).(pulumi.StringOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o IpsecConnectionTunnelManagementOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o IpsecConnectionTunnelManagementOutput) DpdConfigs() IpsecConnectionTunnelManagementDpdConfigArrayOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) IpsecConnectionTunnelManagementDpdConfigArrayOutput {
		return v.DpdConfigs
	}).(IpsecConnectionTunnelManagementDpdConfigArrayOutput)
}

// Dead peer detection (DPD) mode set on the Oracle side of the connection.
func (o IpsecConnectionTunnelManagementOutput) DpdMode() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.DpdMode }).(pulumi.StringOutput)
}

// DPD timeout in seconds.
func (o IpsecConnectionTunnelManagementOutput) DpdTimeoutInSec() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.IntOutput { return v.DpdTimeoutInSec }).(pulumi.IntOutput)
}

// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
func (o IpsecConnectionTunnelManagementOutput) EncryptionDomainConfig() IpsecConnectionTunnelManagementEncryptionDomainConfigOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) IpsecConnectionTunnelManagementEncryptionDomainConfigOutput {
		return v.EncryptionDomainConfig
	}).(IpsecConnectionTunnelManagementEncryptionDomainConfigOutput)
}

// Internet Key Exchange protocol version.
func (o IpsecConnectionTunnelManagementOutput) IkeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.IkeVersion }).(pulumi.StringOutput)
}

// The OCID of the IPSec connection.
func (o IpsecConnectionTunnelManagementOutput) IpsecId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.IpsecId }).(pulumi.StringOutput)
}

// By default (the `AUTO` setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
//
// The `ENABLED` option sets the IKE protocol to use port 4500 instead of 500 and forces encapsulating traffic with the ESP protocol inside UDP packets.
//
// The `DISABLED` option directs IKE to completely refuse to negotiate NAT-T even if it senses there may be a NAT device in use.
func (o IpsecConnectionTunnelManagementOutput) NatTranslationEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.NatTranslationEnabled }).(pulumi.StringOutput)
}

// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (`RESPONDER_ONLY`), or both respond to and initiate requests (`INITIATOR_OR_RESPONDER`).
func (o IpsecConnectionTunnelManagementOutput) OracleCanInitiate() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.OracleCanInitiate }).(pulumi.StringOutput)
}

// Configuration details for IKE phase one (ISAKMP) configuration parameters.
//
// See [PhaseOneConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseOneConfigDetails) for allowed values but note naming scheme follows [TunnelPhaseOneDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseOneDetails).
func (o IpsecConnectionTunnelManagementOutput) PhaseOneDetails() IpsecConnectionTunnelManagementPhaseOneDetailsOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) IpsecConnectionTunnelManagementPhaseOneDetailsOutput {
		return v.PhaseOneDetails
	}).(IpsecConnectionTunnelManagementPhaseOneDetailsOutput)
}

// Configuration details for IPSec phase two configuration parameters.
//
// See [PhaseTwoConfigDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/PhaseTwoConfigDetails) for allowed values, but note naming scheme follows [TunnelPhaseTwoDetails](https://docs.oracle.com/en-us/iaas/api/#/en/iaas/20160918/datatypes/TunnelPhaseTwoDetails).
func (o IpsecConnectionTunnelManagementOutput) PhaseTwoDetails() IpsecConnectionTunnelManagementPhaseTwoDetailsOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) IpsecConnectionTunnelManagementPhaseTwoDetailsOutput {
		return v.PhaseTwoDetails
	}).(IpsecConnectionTunnelManagementPhaseTwoDetailsOutput)
}

// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
func (o IpsecConnectionTunnelManagementOutput) Routing() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.Routing }).(pulumi.StringOutput)
}

// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
func (o IpsecConnectionTunnelManagementOutput) SharedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.SharedSecret }).(pulumi.StringOutput)
}

// The IPSec connection's tunnel's lifecycle state.
func (o IpsecConnectionTunnelManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The tunnel's current state.
func (o IpsecConnectionTunnelManagementOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o IpsecConnectionTunnelManagementOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o IpsecConnectionTunnelManagementOutput) TimeStatusUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.TimeStatusUpdated }).(pulumi.StringOutput)
}

// The OCID of the IPSec connection's tunnel.
func (o IpsecConnectionTunnelManagementOutput) TunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.TunnelId }).(pulumi.StringOutput)
}

// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
func (o IpsecConnectionTunnelManagementOutput) VpnIp() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsecConnectionTunnelManagement) pulumi.StringOutput { return v.VpnIp }).(pulumi.StringOutput)
}

type IpsecConnectionTunnelManagementArrayOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementArrayOutput) ToIpsecConnectionTunnelManagementArrayOutput() IpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o IpsecConnectionTunnelManagementArrayOutput) ToIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o IpsecConnectionTunnelManagementArrayOutput) Index(i pulumi.IntInput) IpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsecConnectionTunnelManagement {
		return vs[0].([]*IpsecConnectionTunnelManagement)[vs[1].(int)]
	}).(IpsecConnectionTunnelManagementOutput)
}

type IpsecConnectionTunnelManagementMapOutput struct{ *pulumi.OutputState }

func (IpsecConnectionTunnelManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecConnectionTunnelManagement)(nil)).Elem()
}

func (o IpsecConnectionTunnelManagementMapOutput) ToIpsecConnectionTunnelManagementMapOutput() IpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o IpsecConnectionTunnelManagementMapOutput) ToIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) IpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o IpsecConnectionTunnelManagementMapOutput) MapIndex(k pulumi.StringInput) IpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsecConnectionTunnelManagement {
		return vs[0].(map[string]*IpsecConnectionTunnelManagement)[vs[1].(string)]
	}).(IpsecConnectionTunnelManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementInput)(nil)).Elem(), &IpsecConnectionTunnelManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementArrayInput)(nil)).Elem(), IpsecConnectionTunnelManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecConnectionTunnelManagementMapInput)(nil)).Elem(), IpsecConnectionTunnelManagementMap{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementOutput{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementArrayOutput{})
	pulumi.RegisterOutputType(IpsecConnectionTunnelManagementMapOutput{})
}
