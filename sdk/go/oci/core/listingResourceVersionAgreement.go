// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ListingResourceVersionAgreement struct {
	pulumi.CustomResourceState

	EulaLink               pulumi.StringOutput `pulumi:"eulaLink"`
	ListingId              pulumi.StringOutput `pulumi:"listingId"`
	ListingResourceVersion pulumi.StringOutput `pulumi:"listingResourceVersion"`
	OracleTermsOfUseLink   pulumi.StringOutput `pulumi:"oracleTermsOfUseLink"`
	Signature              pulumi.StringOutput `pulumi:"signature"`
	TimeRetrieved          pulumi.StringOutput `pulumi:"timeRetrieved"`
}

// NewListingResourceVersionAgreement registers a new resource with the given unique name, arguments, and options.
func NewListingResourceVersionAgreement(ctx *pulumi.Context,
	name string, args *ListingResourceVersionAgreementArgs, opts ...pulumi.ResourceOption) (*ListingResourceVersionAgreement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.ListingResourceVersion == nil {
		return nil, errors.New("invalid value for required argument 'ListingResourceVersion'")
	}
	var resource ListingResourceVersionAgreement
	err := ctx.RegisterResource("oci:Core/listingResourceVersionAgreement:ListingResourceVersionAgreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListingResourceVersionAgreement gets an existing ListingResourceVersionAgreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListingResourceVersionAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingResourceVersionAgreementState, opts ...pulumi.ResourceOption) (*ListingResourceVersionAgreement, error) {
	var resource ListingResourceVersionAgreement
	err := ctx.ReadResource("oci:Core/listingResourceVersionAgreement:ListingResourceVersionAgreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListingResourceVersionAgreement resources.
type listingResourceVersionAgreementState struct {
	EulaLink               *string `pulumi:"eulaLink"`
	ListingId              *string `pulumi:"listingId"`
	ListingResourceVersion *string `pulumi:"listingResourceVersion"`
	OracleTermsOfUseLink   *string `pulumi:"oracleTermsOfUseLink"`
	Signature              *string `pulumi:"signature"`
	TimeRetrieved          *string `pulumi:"timeRetrieved"`
}

type ListingResourceVersionAgreementState struct {
	EulaLink               pulumi.StringPtrInput
	ListingId              pulumi.StringPtrInput
	ListingResourceVersion pulumi.StringPtrInput
	OracleTermsOfUseLink   pulumi.StringPtrInput
	Signature              pulumi.StringPtrInput
	TimeRetrieved          pulumi.StringPtrInput
}

func (ListingResourceVersionAgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingResourceVersionAgreementState)(nil)).Elem()
}

type listingResourceVersionAgreementArgs struct {
	ListingId              string `pulumi:"listingId"`
	ListingResourceVersion string `pulumi:"listingResourceVersion"`
}

// The set of arguments for constructing a ListingResourceVersionAgreement resource.
type ListingResourceVersionAgreementArgs struct {
	ListingId              pulumi.StringInput
	ListingResourceVersion pulumi.StringInput
}

func (ListingResourceVersionAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingResourceVersionAgreementArgs)(nil)).Elem()
}

type ListingResourceVersionAgreementInput interface {
	pulumi.Input

	ToListingResourceVersionAgreementOutput() ListingResourceVersionAgreementOutput
	ToListingResourceVersionAgreementOutputWithContext(ctx context.Context) ListingResourceVersionAgreementOutput
}

func (*ListingResourceVersionAgreement) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingResourceVersionAgreement)(nil)).Elem()
}

func (i *ListingResourceVersionAgreement) ToListingResourceVersionAgreementOutput() ListingResourceVersionAgreementOutput {
	return i.ToListingResourceVersionAgreementOutputWithContext(context.Background())
}

func (i *ListingResourceVersionAgreement) ToListingResourceVersionAgreementOutputWithContext(ctx context.Context) ListingResourceVersionAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingResourceVersionAgreementOutput)
}

// ListingResourceVersionAgreementArrayInput is an input type that accepts ListingResourceVersionAgreementArray and ListingResourceVersionAgreementArrayOutput values.
// You can construct a concrete instance of `ListingResourceVersionAgreementArrayInput` via:
//
//	ListingResourceVersionAgreementArray{ ListingResourceVersionAgreementArgs{...} }
type ListingResourceVersionAgreementArrayInput interface {
	pulumi.Input

	ToListingResourceVersionAgreementArrayOutput() ListingResourceVersionAgreementArrayOutput
	ToListingResourceVersionAgreementArrayOutputWithContext(context.Context) ListingResourceVersionAgreementArrayOutput
}

type ListingResourceVersionAgreementArray []ListingResourceVersionAgreementInput

func (ListingResourceVersionAgreementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingResourceVersionAgreement)(nil)).Elem()
}

func (i ListingResourceVersionAgreementArray) ToListingResourceVersionAgreementArrayOutput() ListingResourceVersionAgreementArrayOutput {
	return i.ToListingResourceVersionAgreementArrayOutputWithContext(context.Background())
}

func (i ListingResourceVersionAgreementArray) ToListingResourceVersionAgreementArrayOutputWithContext(ctx context.Context) ListingResourceVersionAgreementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingResourceVersionAgreementArrayOutput)
}

// ListingResourceVersionAgreementMapInput is an input type that accepts ListingResourceVersionAgreementMap and ListingResourceVersionAgreementMapOutput values.
// You can construct a concrete instance of `ListingResourceVersionAgreementMapInput` via:
//
//	ListingResourceVersionAgreementMap{ "key": ListingResourceVersionAgreementArgs{...} }
type ListingResourceVersionAgreementMapInput interface {
	pulumi.Input

	ToListingResourceVersionAgreementMapOutput() ListingResourceVersionAgreementMapOutput
	ToListingResourceVersionAgreementMapOutputWithContext(context.Context) ListingResourceVersionAgreementMapOutput
}

type ListingResourceVersionAgreementMap map[string]ListingResourceVersionAgreementInput

func (ListingResourceVersionAgreementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingResourceVersionAgreement)(nil)).Elem()
}

func (i ListingResourceVersionAgreementMap) ToListingResourceVersionAgreementMapOutput() ListingResourceVersionAgreementMapOutput {
	return i.ToListingResourceVersionAgreementMapOutputWithContext(context.Background())
}

func (i ListingResourceVersionAgreementMap) ToListingResourceVersionAgreementMapOutputWithContext(ctx context.Context) ListingResourceVersionAgreementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingResourceVersionAgreementMapOutput)
}

type ListingResourceVersionAgreementOutput struct{ *pulumi.OutputState }

func (ListingResourceVersionAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingResourceVersionAgreement)(nil)).Elem()
}

func (o ListingResourceVersionAgreementOutput) ToListingResourceVersionAgreementOutput() ListingResourceVersionAgreementOutput {
	return o
}

func (o ListingResourceVersionAgreementOutput) ToListingResourceVersionAgreementOutputWithContext(ctx context.Context) ListingResourceVersionAgreementOutput {
	return o
}

func (o ListingResourceVersionAgreementOutput) EulaLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.EulaLink }).(pulumi.StringOutput)
}

func (o ListingResourceVersionAgreementOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.ListingId }).(pulumi.StringOutput)
}

func (o ListingResourceVersionAgreementOutput) ListingResourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.ListingResourceVersion }).(pulumi.StringOutput)
}

func (o ListingResourceVersionAgreementOutput) OracleTermsOfUseLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.OracleTermsOfUseLink }).(pulumi.StringOutput)
}

func (o ListingResourceVersionAgreementOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.Signature }).(pulumi.StringOutput)
}

func (o ListingResourceVersionAgreementOutput) TimeRetrieved() pulumi.StringOutput {
	return o.ApplyT(func(v *ListingResourceVersionAgreement) pulumi.StringOutput { return v.TimeRetrieved }).(pulumi.StringOutput)
}

type ListingResourceVersionAgreementArrayOutput struct{ *pulumi.OutputState }

func (ListingResourceVersionAgreementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingResourceVersionAgreement)(nil)).Elem()
}

func (o ListingResourceVersionAgreementArrayOutput) ToListingResourceVersionAgreementArrayOutput() ListingResourceVersionAgreementArrayOutput {
	return o
}

func (o ListingResourceVersionAgreementArrayOutput) ToListingResourceVersionAgreementArrayOutputWithContext(ctx context.Context) ListingResourceVersionAgreementArrayOutput {
	return o
}

func (o ListingResourceVersionAgreementArrayOutput) Index(i pulumi.IntInput) ListingResourceVersionAgreementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListingResourceVersionAgreement {
		return vs[0].([]*ListingResourceVersionAgreement)[vs[1].(int)]
	}).(ListingResourceVersionAgreementOutput)
}

type ListingResourceVersionAgreementMapOutput struct{ *pulumi.OutputState }

func (ListingResourceVersionAgreementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingResourceVersionAgreement)(nil)).Elem()
}

func (o ListingResourceVersionAgreementMapOutput) ToListingResourceVersionAgreementMapOutput() ListingResourceVersionAgreementMapOutput {
	return o
}

func (o ListingResourceVersionAgreementMapOutput) ToListingResourceVersionAgreementMapOutputWithContext(ctx context.Context) ListingResourceVersionAgreementMapOutput {
	return o
}

func (o ListingResourceVersionAgreementMapOutput) MapIndex(k pulumi.StringInput) ListingResourceVersionAgreementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListingResourceVersionAgreement {
		return vs[0].(map[string]*ListingResourceVersionAgreement)[vs[1].(string)]
	}).(ListingResourceVersionAgreementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingResourceVersionAgreementInput)(nil)).Elem(), &ListingResourceVersionAgreement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingResourceVersionAgreementArrayInput)(nil)).Elem(), ListingResourceVersionAgreementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingResourceVersionAgreementMapInput)(nil)).Elem(), ListingResourceVersionAgreementMap{})
	pulumi.RegisterOutputType(ListingResourceVersionAgreementOutput{})
	pulumi.RegisterOutputType(ListingResourceVersionAgreementArrayOutput{})
	pulumi.RegisterOutputType(ListingResourceVersionAgreementMapOutput{})
}
