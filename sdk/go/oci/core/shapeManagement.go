// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Shape Management resource in Oracle Cloud Infrastructure Core service.
//
// Add/Remove the specified shape from the compatible shapes list for the image.
type ShapeManagement struct {
	pulumi.CustomResourceState

	// The OCID of the compartment containing the image.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID of the Image to which the shape should be added.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The compatible shape that is to be added to the compatible shapes list for the image.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
}

// NewShapeManagement registers a new resource with the given unique name, arguments, and options.
func NewShapeManagement(ctx *pulumi.Context,
	name string, args *ShapeManagementArgs, opts ...pulumi.ResourceOption) (*ShapeManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	var resource ShapeManagement
	err := ctx.RegisterResource("oci:Core/shapeManagement:ShapeManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShapeManagement gets an existing ShapeManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShapeManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShapeManagementState, opts ...pulumi.ResourceOption) (*ShapeManagement, error) {
	var resource ShapeManagement
	err := ctx.ReadResource("oci:Core/shapeManagement:ShapeManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShapeManagement resources.
type shapeManagementState struct {
	// The OCID of the compartment containing the image.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the Image to which the shape should be added.
	ImageId *string `pulumi:"imageId"`
	// The compatible shape that is to be added to the compatible shapes list for the image.
	ShapeName *string `pulumi:"shapeName"`
}

type ShapeManagementState struct {
	// The OCID of the compartment containing the image.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the Image to which the shape should be added.
	ImageId pulumi.StringPtrInput
	// The compatible shape that is to be added to the compatible shapes list for the image.
	ShapeName pulumi.StringPtrInput
}

func (ShapeManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*shapeManagementState)(nil)).Elem()
}

type shapeManagementArgs struct {
	// The OCID of the compartment containing the image.
	CompartmentId string `pulumi:"compartmentId"`
	// The OCID of the Image to which the shape should be added.
	ImageId string `pulumi:"imageId"`
	// The compatible shape that is to be added to the compatible shapes list for the image.
	ShapeName string `pulumi:"shapeName"`
}

// The set of arguments for constructing a ShapeManagement resource.
type ShapeManagementArgs struct {
	// The OCID of the compartment containing the image.
	CompartmentId pulumi.StringInput
	// The OCID of the Image to which the shape should be added.
	ImageId pulumi.StringInput
	// The compatible shape that is to be added to the compatible shapes list for the image.
	ShapeName pulumi.StringInput
}

func (ShapeManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shapeManagementArgs)(nil)).Elem()
}

type ShapeManagementInput interface {
	pulumi.Input

	ToShapeManagementOutput() ShapeManagementOutput
	ToShapeManagementOutputWithContext(ctx context.Context) ShapeManagementOutput
}

func (*ShapeManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ShapeManagement)(nil)).Elem()
}

func (i *ShapeManagement) ToShapeManagementOutput() ShapeManagementOutput {
	return i.ToShapeManagementOutputWithContext(context.Background())
}

func (i *ShapeManagement) ToShapeManagementOutputWithContext(ctx context.Context) ShapeManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShapeManagementOutput)
}

// ShapeManagementArrayInput is an input type that accepts ShapeManagementArray and ShapeManagementArrayOutput values.
// You can construct a concrete instance of `ShapeManagementArrayInput` via:
//
//          ShapeManagementArray{ ShapeManagementArgs{...} }
type ShapeManagementArrayInput interface {
	pulumi.Input

	ToShapeManagementArrayOutput() ShapeManagementArrayOutput
	ToShapeManagementArrayOutputWithContext(context.Context) ShapeManagementArrayOutput
}

type ShapeManagementArray []ShapeManagementInput

func (ShapeManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShapeManagement)(nil)).Elem()
}

func (i ShapeManagementArray) ToShapeManagementArrayOutput() ShapeManagementArrayOutput {
	return i.ToShapeManagementArrayOutputWithContext(context.Background())
}

func (i ShapeManagementArray) ToShapeManagementArrayOutputWithContext(ctx context.Context) ShapeManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShapeManagementArrayOutput)
}

// ShapeManagementMapInput is an input type that accepts ShapeManagementMap and ShapeManagementMapOutput values.
// You can construct a concrete instance of `ShapeManagementMapInput` via:
//
//          ShapeManagementMap{ "key": ShapeManagementArgs{...} }
type ShapeManagementMapInput interface {
	pulumi.Input

	ToShapeManagementMapOutput() ShapeManagementMapOutput
	ToShapeManagementMapOutputWithContext(context.Context) ShapeManagementMapOutput
}

type ShapeManagementMap map[string]ShapeManagementInput

func (ShapeManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShapeManagement)(nil)).Elem()
}

func (i ShapeManagementMap) ToShapeManagementMapOutput() ShapeManagementMapOutput {
	return i.ToShapeManagementMapOutputWithContext(context.Background())
}

func (i ShapeManagementMap) ToShapeManagementMapOutputWithContext(ctx context.Context) ShapeManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShapeManagementMapOutput)
}

type ShapeManagementOutput struct{ *pulumi.OutputState }

func (ShapeManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShapeManagement)(nil)).Elem()
}

func (o ShapeManagementOutput) ToShapeManagementOutput() ShapeManagementOutput {
	return o
}

func (o ShapeManagementOutput) ToShapeManagementOutputWithContext(ctx context.Context) ShapeManagementOutput {
	return o
}

type ShapeManagementArrayOutput struct{ *pulumi.OutputState }

func (ShapeManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShapeManagement)(nil)).Elem()
}

func (o ShapeManagementArrayOutput) ToShapeManagementArrayOutput() ShapeManagementArrayOutput {
	return o
}

func (o ShapeManagementArrayOutput) ToShapeManagementArrayOutputWithContext(ctx context.Context) ShapeManagementArrayOutput {
	return o
}

func (o ShapeManagementArrayOutput) Index(i pulumi.IntInput) ShapeManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShapeManagement {
		return vs[0].([]*ShapeManagement)[vs[1].(int)]
	}).(ShapeManagementOutput)
}

type ShapeManagementMapOutput struct{ *pulumi.OutputState }

func (ShapeManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShapeManagement)(nil)).Elem()
}

func (o ShapeManagementMapOutput) ToShapeManagementMapOutput() ShapeManagementMapOutput {
	return o
}

func (o ShapeManagementMapOutput) ToShapeManagementMapOutputWithContext(ctx context.Context) ShapeManagementMapOutput {
	return o
}

func (o ShapeManagementMapOutput) MapIndex(k pulumi.StringInput) ShapeManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShapeManagement {
		return vs[0].(map[string]*ShapeManagement)[vs[1].(string)]
	}).(ShapeManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShapeManagementInput)(nil)).Elem(), &ShapeManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShapeManagementArrayInput)(nil)).Elem(), ShapeManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShapeManagementMapInput)(nil)).Elem(), ShapeManagementMap{})
	pulumi.RegisterOutputType(ShapeManagementOutput{})
	pulumi.RegisterOutputType(ShapeManagementArrayOutput{})
	pulumi.RegisterOutputType(ShapeManagementMapOutput{})
}
