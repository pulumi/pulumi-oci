// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Volume Attachment resource in Oracle Cloud Infrastructure Core service.
//
// Attaches the specified storage volume to the specified instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Core.NewVolumeAttachment(ctx, "testVolumeAttachment", &Core.VolumeAttachmentArgs{
//				AttachmentType:                 pulumi.Any(_var.Volume_attachment_attachment_type),
//				InstanceId:                     pulumi.Any(oci_core_instance.Test_instance.Id),
//				VolumeId:                       pulumi.Any(oci_core_volume.Test_volume.Id),
//				Device:                         pulumi.Any(_var.Volume_attachment_device),
//				DisplayName:                    pulumi.Any(_var.Volume_attachment_display_name),
//				EncryptionInTransitType:        pulumi.Any(_var.Volume_attachment_encryption_in_transit_type),
//				IsAgentAutoIscsiLoginEnabled:   pulumi.Any(_var.Volume_attachment_is_agent_auto_iscsi_login_enabled),
//				IsPvEncryptionInTransitEnabled: pulumi.Any(_var.Volume_attachment_is_pv_encryption_in_transit_enabled),
//				IsReadOnly:                     pulumi.Any(_var.Volume_attachment_is_read_only),
//				IsShareable:                    pulumi.Any(_var.Volume_attachment_is_shareable),
//				UseChap:                        pulumi.Any(_var.Volume_attachment_use_chap),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VolumeAttachments can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Core/volumeAttachment:VolumeAttachment test_volume_attachment "id"
//
// ```
type VolumeAttachment struct {
	pulumi.CustomResourceState

	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType pulumi.StringOutput `pulumi:"attachmentType"`
	// The availability domain of an instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the "CHAP password".)
	ChapSecret pulumi.StringOutput `pulumi:"chapSecret"`
	// The volume's system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See [RFC 1994](https://tools.ietf.org/html/rfc1994) for more on CHAP.  Example: `ocid1.volume.oc1.phx.<unique_ID>`
	ChapUsername pulumi.StringOutput `pulumi:"chapUsername"`
	// The OCID of the compartment.
	//
	// Deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The device name. To retrieve a list of devices for a given instance, see [ListInstanceDevices](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Device/ListInstanceDevices).
	Device pulumi.StringOutput `pulumi:"device"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType pulumi.StringOutput `pulumi:"encryptionInTransitType"`
	// The OCID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The volume's iSCSI IP address.  Example: `169.254.2.2`
	Ipv4 pulumi.StringOutput `pulumi:"ipv4"`
	// The target volume's iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
	Iqn pulumi.StringOutput `pulumi:"iqn"`
	// Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoIscsiLoginEnabled pulumi.BoolOutput `pulumi:"isAgentAutoIscsiLoginEnabled"`
	// Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
	IsMultipath pulumi.BoolOutput `pulumi:"isMultipath"`
	// Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled pulumi.BoolOutput `pulumi:"isPvEncryptionInTransitEnabled"`
	// Whether the attachment was created in read-only mode.
	IsReadOnly pulumi.BoolOutput `pulumi:"isReadOnly"`
	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable pulumi.BoolOutput `pulumi:"isShareable"`
	// The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
	IscsiLoginState pulumi.StringOutput `pulumi:"iscsiLoginState"`
	// A list of secondary multipath devices
	MultipathDevices VolumeAttachmentMultipathDeviceArrayOutput `pulumi:"multipathDevices"`
	// The volume's iSCSI port, usually port 860 or 3260.  Example: `3260`
	Port pulumi.IntOutput `pulumi:"port"`
	// The current state of the volume attachment.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap pulumi.BoolOutput `pulumi:"useChap"`
	// The OCID of the volume.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolumeAttachment registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttachment(ctx *pulumi.Context,
	name string, args *VolumeAttachmentArgs, opts ...pulumi.ResourceOption) (*VolumeAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachmentType == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	var resource VolumeAttachment
	err := ctx.RegisterResource("oci:Core/volumeAttachment:VolumeAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAttachment gets an existing VolumeAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeAttachmentState, opts ...pulumi.ResourceOption) (*VolumeAttachment, error) {
	var resource VolumeAttachment
	err := ctx.ReadResource("oci:Core/volumeAttachment:VolumeAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeAttachment resources.
type volumeAttachmentState struct {
	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType *string `pulumi:"attachmentType"`
	// The availability domain of an instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the "CHAP password".)
	ChapSecret *string `pulumi:"chapSecret"`
	// The volume's system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See [RFC 1994](https://tools.ietf.org/html/rfc1994) for more on CHAP.  Example: `ocid1.volume.oc1.phx.<unique_ID>`
	ChapUsername *string `pulumi:"chapUsername"`
	// The OCID of the compartment.
	//
	// Deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.
	CompartmentId *string `pulumi:"compartmentId"`
	// The device name. To retrieve a list of devices for a given instance, see [ListInstanceDevices](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Device/ListInstanceDevices).
	Device *string `pulumi:"device"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType *string `pulumi:"encryptionInTransitType"`
	// The OCID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The volume's iSCSI IP address.  Example: `169.254.2.2`
	Ipv4 *string `pulumi:"ipv4"`
	// The target volume's iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
	Iqn *string `pulumi:"iqn"`
	// Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoIscsiLoginEnabled *bool `pulumi:"isAgentAutoIscsiLoginEnabled"`
	// Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
	IsMultipath *bool `pulumi:"isMultipath"`
	// Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled *bool `pulumi:"isPvEncryptionInTransitEnabled"`
	// Whether the attachment was created in read-only mode.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable *bool `pulumi:"isShareable"`
	// The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
	IscsiLoginState *string `pulumi:"iscsiLoginState"`
	// A list of secondary multipath devices
	MultipathDevices []VolumeAttachmentMultipathDevice `pulumi:"multipathDevices"`
	// The volume's iSCSI port, usually port 860 or 3260.  Example: `3260`
	Port *int `pulumi:"port"`
	// The current state of the volume attachment.
	State *string `pulumi:"state"`
	// The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap *bool `pulumi:"useChap"`
	// The OCID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumeAttachmentState struct {
	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType pulumi.StringPtrInput
	// The availability domain of an instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain pulumi.StringPtrInput
	// The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the "CHAP password".)
	ChapSecret pulumi.StringPtrInput
	// The volume's system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See [RFC 1994](https://tools.ietf.org/html/rfc1994) for more on CHAP.  Example: `ocid1.volume.oc1.phx.<unique_ID>`
	ChapUsername pulumi.StringPtrInput
	// The OCID of the compartment.
	//
	// Deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.
	CompartmentId pulumi.StringPtrInput
	// The device name. To retrieve a list of devices for a given instance, see [ListInstanceDevices](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Device/ListInstanceDevices).
	Device pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType pulumi.StringPtrInput
	// The OCID of the instance.
	InstanceId pulumi.StringPtrInput
	// The volume's iSCSI IP address.  Example: `169.254.2.2`
	Ipv4 pulumi.StringPtrInput
	// The target volume's iSCSI Qualified Name in the format defined by [RFC 3720](https://tools.ietf.org/html/rfc3720#page-32).  Example: `iqn.2015-12.com.oracleiaas:40b7ee03-883f-46c6-a951-63d2841d2195`
	Iqn pulumi.StringPtrInput
	// Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoIscsiLoginEnabled pulumi.BoolPtrInput
	// Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
	IsMultipath pulumi.BoolPtrInput
	// Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled pulumi.BoolPtrInput
	// Whether the attachment was created in read-only mode.
	IsReadOnly pulumi.BoolPtrInput
	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable pulumi.BoolPtrInput
	// The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
	IscsiLoginState pulumi.StringPtrInput
	// A list of secondary multipath devices
	MultipathDevices VolumeAttachmentMultipathDeviceArrayInput
	// The volume's iSCSI port, usually port 860 or 3260.  Example: `3260`
	Port pulumi.IntPtrInput
	// The current state of the volume attachment.
	State pulumi.StringPtrInput
	// The date and time the volume was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap pulumi.BoolPtrInput
	// The OCID of the volume.
	VolumeId pulumi.StringPtrInput
}

func (VolumeAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachmentState)(nil)).Elem()
}

type volumeAttachmentArgs struct {
	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType string `pulumi:"attachmentType"`
	// The OCID of the compartment.
	//
	// Deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.
	CompartmentId *string `pulumi:"compartmentId"`
	// The device name. To retrieve a list of devices for a given instance, see [ListInstanceDevices](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Device/ListInstanceDevices).
	Device *string `pulumi:"device"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType *string `pulumi:"encryptionInTransitType"`
	// The OCID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoIscsiLoginEnabled *bool `pulumi:"isAgentAutoIscsiLoginEnabled"`
	// Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled *bool `pulumi:"isPvEncryptionInTransitEnabled"`
	// Whether the attachment was created in read-only mode.
	IsReadOnly *bool `pulumi:"isReadOnly"`
	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable *bool `pulumi:"isShareable"`
	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap *bool `pulumi:"useChap"`
	// The OCID of the volume.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeAttachment resource.
type VolumeAttachmentArgs struct {
	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType pulumi.StringInput
	// The OCID of the compartment.
	//
	// Deprecated: The 'compartment_id' field has been deprecated and may be removed in a future version. Do not use this field.
	CompartmentId pulumi.StringPtrInput
	// The device name. To retrieve a list of devices for a given instance, see [ListInstanceDevices](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Device/ListInstanceDevices).
	Device pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType pulumi.StringPtrInput
	// The OCID of the instance.
	InstanceId pulumi.StringInput
	// Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoIscsiLoginEnabled pulumi.BoolPtrInput
	// Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled pulumi.BoolPtrInput
	// Whether the attachment was created in read-only mode.
	IsReadOnly pulumi.BoolPtrInput
	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable pulumi.BoolPtrInput
	// Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap pulumi.BoolPtrInput
	// The OCID of the volume.
	VolumeId pulumi.StringInput
}

func (VolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachmentArgs)(nil)).Elem()
}

type VolumeAttachmentInput interface {
	pulumi.Input

	ToVolumeAttachmentOutput() VolumeAttachmentOutput
	ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput
}

func (*VolumeAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachment)(nil)).Elem()
}

func (i *VolumeAttachment) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return i.ToVolumeAttachmentOutputWithContext(context.Background())
}

func (i *VolumeAttachment) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentOutput)
}

// VolumeAttachmentArrayInput is an input type that accepts VolumeAttachmentArray and VolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentArrayInput` via:
//
//	VolumeAttachmentArray{ VolumeAttachmentArgs{...} }
type VolumeAttachmentArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput
	ToVolumeAttachmentArrayOutputWithContext(context.Context) VolumeAttachmentArrayOutput
}

type VolumeAttachmentArray []VolumeAttachmentInput

func (VolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return i.ToVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentArrayOutput)
}

// VolumeAttachmentMapInput is an input type that accepts VolumeAttachmentMap and VolumeAttachmentMapOutput values.
// You can construct a concrete instance of `VolumeAttachmentMapInput` via:
//
//	VolumeAttachmentMap{ "key": VolumeAttachmentArgs{...} }
type VolumeAttachmentMapInput interface {
	pulumi.Input

	ToVolumeAttachmentMapOutput() VolumeAttachmentMapOutput
	ToVolumeAttachmentMapOutputWithContext(context.Context) VolumeAttachmentMapOutput
}

type VolumeAttachmentMap map[string]VolumeAttachmentInput

func (VolumeAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentMap) ToVolumeAttachmentMapOutput() VolumeAttachmentMapOutput {
	return i.ToVolumeAttachmentMapOutputWithContext(context.Background())
}

func (i VolumeAttachmentMap) ToVolumeAttachmentMapOutputWithContext(ctx context.Context) VolumeAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentMapOutput)
}

type VolumeAttachmentOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return o
}

type VolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeAttachment {
		return vs[0].([]*VolumeAttachment)[vs[1].(int)]
	}).(VolumeAttachmentOutput)
}

type VolumeAttachmentMapOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentMapOutput) ToVolumeAttachmentMapOutput() VolumeAttachmentMapOutput {
	return o
}

func (o VolumeAttachmentMapOutput) ToVolumeAttachmentMapOutputWithContext(ctx context.Context) VolumeAttachmentMapOutput {
	return o
}

func (o VolumeAttachmentMapOutput) MapIndex(k pulumi.StringInput) VolumeAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeAttachment {
		return vs[0].(map[string]*VolumeAttachment)[vs[1].(string)]
	}).(VolumeAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentInput)(nil)).Elem(), &VolumeAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentArrayInput)(nil)).Elem(), VolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentMapInput)(nil)).Elem(), VolumeAttachmentMap{})
	pulumi.RegisterOutputType(VolumeAttachmentOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentMapOutput{})
}
