// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Autonomous Database Instance Wallet Management resource in Oracle Cloud Infrastructure Database service.
//
// Updates the wallet for the specified Autonomous Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.NewAutonomousDatabaseInstanceWalletManagement(ctx, "testAutonomousDatabaseInstanceWalletManagement", &Database.AutonomousDatabaseInstanceWalletManagementArgs{
//				AutonomousDatabaseId: pulumi.Any(oci_database_autonomous_database.Test_autonomous_database.Id),
//				GracePeriod:          pulumi.Any(_var.Autonomous_database_instance_wallet_management_grace_period),
//				ShouldRotate:         pulumi.Any(_var.Autonomous_database_instance_wallet_management_should_rotate),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type AutonomousDatabaseInstanceWalletManagement struct {
	pulumi.CustomResourceState

	// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	AutonomousDatabaseId pulumi.StringOutput `pulumi:"autonomousDatabaseId"`
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntOutput `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	ShouldRotate pulumi.BoolPtrOutput `pulumi:"shouldRotate"`
	// The current lifecycle state of the Autonomous Database wallet.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the wallet was last rotated.
	TimeRotated pulumi.StringOutput `pulumi:"timeRotated"`
}

// NewAutonomousDatabaseInstanceWalletManagement registers a new resource with the given unique name, arguments, and options.
func NewAutonomousDatabaseInstanceWalletManagement(ctx *pulumi.Context,
	name string, args *AutonomousDatabaseInstanceWalletManagementArgs, opts ...pulumi.ResourceOption) (*AutonomousDatabaseInstanceWalletManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutonomousDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'AutonomousDatabaseId'")
	}
	var resource AutonomousDatabaseInstanceWalletManagement
	err := ctx.RegisterResource("oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutonomousDatabaseInstanceWalletManagement gets an existing AutonomousDatabaseInstanceWalletManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutonomousDatabaseInstanceWalletManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutonomousDatabaseInstanceWalletManagementState, opts ...pulumi.ResourceOption) (*AutonomousDatabaseInstanceWalletManagement, error) {
	var resource AutonomousDatabaseInstanceWalletManagement
	err := ctx.ReadResource("oci:Database/autonomousDatabaseInstanceWalletManagement:AutonomousDatabaseInstanceWalletManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutonomousDatabaseInstanceWalletManagement resources.
type autonomousDatabaseInstanceWalletManagementState struct {
	// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	AutonomousDatabaseId *string `pulumi:"autonomousDatabaseId"`
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod *int `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	ShouldRotate *bool `pulumi:"shouldRotate"`
	// The current lifecycle state of the Autonomous Database wallet.
	State *string `pulumi:"state"`
	// The date and time the wallet was last rotated.
	TimeRotated *string `pulumi:"timeRotated"`
}

type AutonomousDatabaseInstanceWalletManagementState struct {
	// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	AutonomousDatabaseId pulumi.StringPtrInput
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntPtrInput
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	ShouldRotate pulumi.BoolPtrInput
	// The current lifecycle state of the Autonomous Database wallet.
	State pulumi.StringPtrInput
	// The date and time the wallet was last rotated.
	TimeRotated pulumi.StringPtrInput
}

func (AutonomousDatabaseInstanceWalletManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*autonomousDatabaseInstanceWalletManagementState)(nil)).Elem()
}

type autonomousDatabaseInstanceWalletManagementArgs struct {
	// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	AutonomousDatabaseId string `pulumi:"autonomousDatabaseId"`
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod *int `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	ShouldRotate *bool `pulumi:"shouldRotate"`
}

// The set of arguments for constructing a AutonomousDatabaseInstanceWalletManagement resource.
type AutonomousDatabaseInstanceWalletManagementArgs struct {
	// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	AutonomousDatabaseId pulumi.StringInput
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntPtrInput
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	ShouldRotate pulumi.BoolPtrInput
}

func (AutonomousDatabaseInstanceWalletManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autonomousDatabaseInstanceWalletManagementArgs)(nil)).Elem()
}

type AutonomousDatabaseInstanceWalletManagementInput interface {
	pulumi.Input

	ToAutonomousDatabaseInstanceWalletManagementOutput() AutonomousDatabaseInstanceWalletManagementOutput
	ToAutonomousDatabaseInstanceWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementOutput
}

func (*AutonomousDatabaseInstanceWalletManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (i *AutonomousDatabaseInstanceWalletManagement) ToAutonomousDatabaseInstanceWalletManagementOutput() AutonomousDatabaseInstanceWalletManagementOutput {
	return i.ToAutonomousDatabaseInstanceWalletManagementOutputWithContext(context.Background())
}

func (i *AutonomousDatabaseInstanceWalletManagement) ToAutonomousDatabaseInstanceWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseInstanceWalletManagementOutput)
}

// AutonomousDatabaseInstanceWalletManagementArrayInput is an input type that accepts AutonomousDatabaseInstanceWalletManagementArray and AutonomousDatabaseInstanceWalletManagementArrayOutput values.
// You can construct a concrete instance of `AutonomousDatabaseInstanceWalletManagementArrayInput` via:
//
//	AutonomousDatabaseInstanceWalletManagementArray{ AutonomousDatabaseInstanceWalletManagementArgs{...} }
type AutonomousDatabaseInstanceWalletManagementArrayInput interface {
	pulumi.Input

	ToAutonomousDatabaseInstanceWalletManagementArrayOutput() AutonomousDatabaseInstanceWalletManagementArrayOutput
	ToAutonomousDatabaseInstanceWalletManagementArrayOutputWithContext(context.Context) AutonomousDatabaseInstanceWalletManagementArrayOutput
}

type AutonomousDatabaseInstanceWalletManagementArray []AutonomousDatabaseInstanceWalletManagementInput

func (AutonomousDatabaseInstanceWalletManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (i AutonomousDatabaseInstanceWalletManagementArray) ToAutonomousDatabaseInstanceWalletManagementArrayOutput() AutonomousDatabaseInstanceWalletManagementArrayOutput {
	return i.ToAutonomousDatabaseInstanceWalletManagementArrayOutputWithContext(context.Background())
}

func (i AutonomousDatabaseInstanceWalletManagementArray) ToAutonomousDatabaseInstanceWalletManagementArrayOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseInstanceWalletManagementArrayOutput)
}

// AutonomousDatabaseInstanceWalletManagementMapInput is an input type that accepts AutonomousDatabaseInstanceWalletManagementMap and AutonomousDatabaseInstanceWalletManagementMapOutput values.
// You can construct a concrete instance of `AutonomousDatabaseInstanceWalletManagementMapInput` via:
//
//	AutonomousDatabaseInstanceWalletManagementMap{ "key": AutonomousDatabaseInstanceWalletManagementArgs{...} }
type AutonomousDatabaseInstanceWalletManagementMapInput interface {
	pulumi.Input

	ToAutonomousDatabaseInstanceWalletManagementMapOutput() AutonomousDatabaseInstanceWalletManagementMapOutput
	ToAutonomousDatabaseInstanceWalletManagementMapOutputWithContext(context.Context) AutonomousDatabaseInstanceWalletManagementMapOutput
}

type AutonomousDatabaseInstanceWalletManagementMap map[string]AutonomousDatabaseInstanceWalletManagementInput

func (AutonomousDatabaseInstanceWalletManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (i AutonomousDatabaseInstanceWalletManagementMap) ToAutonomousDatabaseInstanceWalletManagementMapOutput() AutonomousDatabaseInstanceWalletManagementMapOutput {
	return i.ToAutonomousDatabaseInstanceWalletManagementMapOutputWithContext(context.Background())
}

func (i AutonomousDatabaseInstanceWalletManagementMap) ToAutonomousDatabaseInstanceWalletManagementMapOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseInstanceWalletManagementMapOutput)
}

type AutonomousDatabaseInstanceWalletManagementOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseInstanceWalletManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseInstanceWalletManagementOutput) ToAutonomousDatabaseInstanceWalletManagementOutput() AutonomousDatabaseInstanceWalletManagementOutput {
	return o
}

func (o AutonomousDatabaseInstanceWalletManagementOutput) ToAutonomousDatabaseInstanceWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementOutput {
	return o
}

// (Updatable) The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o AutonomousDatabaseInstanceWalletManagementOutput) AutonomousDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutonomousDatabaseInstanceWalletManagement) pulumi.StringOutput { return v.AutonomousDatabaseId }).(pulumi.StringOutput)
}

// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
func (o AutonomousDatabaseInstanceWalletManagementOutput) GracePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *AutonomousDatabaseInstanceWalletManagement) pulumi.IntOutput { return v.GracePeriod }).(pulumi.IntOutput)
}

// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
func (o AutonomousDatabaseInstanceWalletManagementOutput) ShouldRotate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutonomousDatabaseInstanceWalletManagement) pulumi.BoolPtrOutput { return v.ShouldRotate }).(pulumi.BoolPtrOutput)
}

// The current lifecycle state of the Autonomous Database wallet.
func (o AutonomousDatabaseInstanceWalletManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AutonomousDatabaseInstanceWalletManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the wallet was last rotated.
func (o AutonomousDatabaseInstanceWalletManagementOutput) TimeRotated() pulumi.StringOutput {
	return o.ApplyT(func(v *AutonomousDatabaseInstanceWalletManagement) pulumi.StringOutput { return v.TimeRotated }).(pulumi.StringOutput)
}

type AutonomousDatabaseInstanceWalletManagementArrayOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseInstanceWalletManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseInstanceWalletManagementArrayOutput) ToAutonomousDatabaseInstanceWalletManagementArrayOutput() AutonomousDatabaseInstanceWalletManagementArrayOutput {
	return o
}

func (o AutonomousDatabaseInstanceWalletManagementArrayOutput) ToAutonomousDatabaseInstanceWalletManagementArrayOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementArrayOutput {
	return o
}

func (o AutonomousDatabaseInstanceWalletManagementArrayOutput) Index(i pulumi.IntInput) AutonomousDatabaseInstanceWalletManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutonomousDatabaseInstanceWalletManagement {
		return vs[0].([]*AutonomousDatabaseInstanceWalletManagement)[vs[1].(int)]
	}).(AutonomousDatabaseInstanceWalletManagementOutput)
}

type AutonomousDatabaseInstanceWalletManagementMapOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseInstanceWalletManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutonomousDatabaseInstanceWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseInstanceWalletManagementMapOutput) ToAutonomousDatabaseInstanceWalletManagementMapOutput() AutonomousDatabaseInstanceWalletManagementMapOutput {
	return o
}

func (o AutonomousDatabaseInstanceWalletManagementMapOutput) ToAutonomousDatabaseInstanceWalletManagementMapOutputWithContext(ctx context.Context) AutonomousDatabaseInstanceWalletManagementMapOutput {
	return o
}

func (o AutonomousDatabaseInstanceWalletManagementMapOutput) MapIndex(k pulumi.StringInput) AutonomousDatabaseInstanceWalletManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutonomousDatabaseInstanceWalletManagement {
		return vs[0].(map[string]*AutonomousDatabaseInstanceWalletManagement)[vs[1].(string)]
	}).(AutonomousDatabaseInstanceWalletManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseInstanceWalletManagementInput)(nil)).Elem(), &AutonomousDatabaseInstanceWalletManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseInstanceWalletManagementArrayInput)(nil)).Elem(), AutonomousDatabaseInstanceWalletManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseInstanceWalletManagementMapInput)(nil)).Elem(), AutonomousDatabaseInstanceWalletManagementMap{})
	pulumi.RegisterOutputType(AutonomousDatabaseInstanceWalletManagementOutput{})
	pulumi.RegisterOutputType(AutonomousDatabaseInstanceWalletManagementArrayOutput{})
	pulumi.RegisterOutputType(AutonomousDatabaseInstanceWalletManagementMapOutput{})
}
