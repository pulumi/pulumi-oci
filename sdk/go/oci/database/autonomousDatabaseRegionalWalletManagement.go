// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Autonomous Database Regional Wallet Management resource in Oracle Cloud Infrastructure Database service.
//
// Updates the Autonomous Database regional wallet.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.NewAutonomousDatabaseRegionalWalletManagement(ctx, "testAutonomousDatabaseRegionalWalletManagement", &Database.AutonomousDatabaseRegionalWalletManagementArgs{
//				GracePeriod:  pulumi.Any(_var.Autonomous_database_regional_wallet_management_grace_period),
//				ShouldRotate: pulumi.Any(_var.Autonomous_database_regional_wallet_management_should_rotate),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type AutonomousDatabaseRegionalWalletManagement struct {
	pulumi.CustomResourceState

	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntOutput `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ShouldRotate pulumi.BoolPtrOutput `pulumi:"shouldRotate"`
	// The current lifecycle state of the Autonomous Database wallet.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the wallet was last rotated.
	TimeRotated pulumi.StringOutput `pulumi:"timeRotated"`
}

// NewAutonomousDatabaseRegionalWalletManagement registers a new resource with the given unique name, arguments, and options.
func NewAutonomousDatabaseRegionalWalletManagement(ctx *pulumi.Context,
	name string, args *AutonomousDatabaseRegionalWalletManagementArgs, opts ...pulumi.ResourceOption) (*AutonomousDatabaseRegionalWalletManagement, error) {
	if args == nil {
		args = &AutonomousDatabaseRegionalWalletManagementArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutonomousDatabaseRegionalWalletManagement
	err := ctx.RegisterResource("oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutonomousDatabaseRegionalWalletManagement gets an existing AutonomousDatabaseRegionalWalletManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutonomousDatabaseRegionalWalletManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutonomousDatabaseRegionalWalletManagementState, opts ...pulumi.ResourceOption) (*AutonomousDatabaseRegionalWalletManagement, error) {
	var resource AutonomousDatabaseRegionalWalletManagement
	err := ctx.ReadResource("oci:Database/autonomousDatabaseRegionalWalletManagement:AutonomousDatabaseRegionalWalletManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutonomousDatabaseRegionalWalletManagement resources.
type autonomousDatabaseRegionalWalletManagementState struct {
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod *int `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ShouldRotate *bool `pulumi:"shouldRotate"`
	// The current lifecycle state of the Autonomous Database wallet.
	State *string `pulumi:"state"`
	// The date and time the wallet was last rotated.
	TimeRotated *string `pulumi:"timeRotated"`
}

type AutonomousDatabaseRegionalWalletManagementState struct {
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntPtrInput
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ShouldRotate pulumi.BoolPtrInput
	// The current lifecycle state of the Autonomous Database wallet.
	State pulumi.StringPtrInput
	// The date and time the wallet was last rotated.
	TimeRotated pulumi.StringPtrInput
}

func (AutonomousDatabaseRegionalWalletManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*autonomousDatabaseRegionalWalletManagementState)(nil)).Elem()
}

type autonomousDatabaseRegionalWalletManagementArgs struct {
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod *int `pulumi:"gracePeriod"`
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ShouldRotate *bool `pulumi:"shouldRotate"`
}

// The set of arguments for constructing a AutonomousDatabaseRegionalWalletManagement resource.
type AutonomousDatabaseRegionalWalletManagementArgs struct {
	// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
	GracePeriod pulumi.IntPtrInput
	// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ShouldRotate pulumi.BoolPtrInput
}

func (AutonomousDatabaseRegionalWalletManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autonomousDatabaseRegionalWalletManagementArgs)(nil)).Elem()
}

type AutonomousDatabaseRegionalWalletManagementInput interface {
	pulumi.Input

	ToAutonomousDatabaseRegionalWalletManagementOutput() AutonomousDatabaseRegionalWalletManagementOutput
	ToAutonomousDatabaseRegionalWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementOutput
}

func (*AutonomousDatabaseRegionalWalletManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (i *AutonomousDatabaseRegionalWalletManagement) ToAutonomousDatabaseRegionalWalletManagementOutput() AutonomousDatabaseRegionalWalletManagementOutput {
	return i.ToAutonomousDatabaseRegionalWalletManagementOutputWithContext(context.Background())
}

func (i *AutonomousDatabaseRegionalWalletManagement) ToAutonomousDatabaseRegionalWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseRegionalWalletManagementOutput)
}

func (i *AutonomousDatabaseRegionalWalletManagement) ToOutput(ctx context.Context) pulumix.Output[*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: i.ToAutonomousDatabaseRegionalWalletManagementOutputWithContext(ctx).OutputState,
	}
}

// AutonomousDatabaseRegionalWalletManagementArrayInput is an input type that accepts AutonomousDatabaseRegionalWalletManagementArray and AutonomousDatabaseRegionalWalletManagementArrayOutput values.
// You can construct a concrete instance of `AutonomousDatabaseRegionalWalletManagementArrayInput` via:
//
//	AutonomousDatabaseRegionalWalletManagementArray{ AutonomousDatabaseRegionalWalletManagementArgs{...} }
type AutonomousDatabaseRegionalWalletManagementArrayInput interface {
	pulumi.Input

	ToAutonomousDatabaseRegionalWalletManagementArrayOutput() AutonomousDatabaseRegionalWalletManagementArrayOutput
	ToAutonomousDatabaseRegionalWalletManagementArrayOutputWithContext(context.Context) AutonomousDatabaseRegionalWalletManagementArrayOutput
}

type AutonomousDatabaseRegionalWalletManagementArray []AutonomousDatabaseRegionalWalletManagementInput

func (AutonomousDatabaseRegionalWalletManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (i AutonomousDatabaseRegionalWalletManagementArray) ToAutonomousDatabaseRegionalWalletManagementArrayOutput() AutonomousDatabaseRegionalWalletManagementArrayOutput {
	return i.ToAutonomousDatabaseRegionalWalletManagementArrayOutputWithContext(context.Background())
}

func (i AutonomousDatabaseRegionalWalletManagementArray) ToAutonomousDatabaseRegionalWalletManagementArrayOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseRegionalWalletManagementArrayOutput)
}

func (i AutonomousDatabaseRegionalWalletManagementArray) ToOutput(ctx context.Context) pulumix.Output[[]*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[[]*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: i.ToAutonomousDatabaseRegionalWalletManagementArrayOutputWithContext(ctx).OutputState,
	}
}

// AutonomousDatabaseRegionalWalletManagementMapInput is an input type that accepts AutonomousDatabaseRegionalWalletManagementMap and AutonomousDatabaseRegionalWalletManagementMapOutput values.
// You can construct a concrete instance of `AutonomousDatabaseRegionalWalletManagementMapInput` via:
//
//	AutonomousDatabaseRegionalWalletManagementMap{ "key": AutonomousDatabaseRegionalWalletManagementArgs{...} }
type AutonomousDatabaseRegionalWalletManagementMapInput interface {
	pulumi.Input

	ToAutonomousDatabaseRegionalWalletManagementMapOutput() AutonomousDatabaseRegionalWalletManagementMapOutput
	ToAutonomousDatabaseRegionalWalletManagementMapOutputWithContext(context.Context) AutonomousDatabaseRegionalWalletManagementMapOutput
}

type AutonomousDatabaseRegionalWalletManagementMap map[string]AutonomousDatabaseRegionalWalletManagementInput

func (AutonomousDatabaseRegionalWalletManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (i AutonomousDatabaseRegionalWalletManagementMap) ToAutonomousDatabaseRegionalWalletManagementMapOutput() AutonomousDatabaseRegionalWalletManagementMapOutput {
	return i.ToAutonomousDatabaseRegionalWalletManagementMapOutputWithContext(context.Background())
}

func (i AutonomousDatabaseRegionalWalletManagementMap) ToAutonomousDatabaseRegionalWalletManagementMapOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutonomousDatabaseRegionalWalletManagementMapOutput)
}

func (i AutonomousDatabaseRegionalWalletManagementMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[map[string]*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: i.ToAutonomousDatabaseRegionalWalletManagementMapOutputWithContext(ctx).OutputState,
	}
}

type AutonomousDatabaseRegionalWalletManagementOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseRegionalWalletManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseRegionalWalletManagementOutput) ToAutonomousDatabaseRegionalWalletManagementOutput() AutonomousDatabaseRegionalWalletManagementOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementOutput) ToAutonomousDatabaseRegionalWalletManagementOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementOutput) ToOutput(ctx context.Context) pulumix.Output[*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: o.OutputState,
	}
}

// (Updatable) The number of hours that the old wallet can be used after it has been rotated. The old wallet will no longer be valid after the number of hours in the wallet rotation grace period has passed. During the grace period, both the old wallet and the current wallet can be used.
func (o AutonomousDatabaseRegionalWalletManagementOutput) GracePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *AutonomousDatabaseRegionalWalletManagement) pulumi.IntOutput { return v.GracePeriod }).(pulumi.IntOutput)
}

// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o AutonomousDatabaseRegionalWalletManagementOutput) ShouldRotate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutonomousDatabaseRegionalWalletManagement) pulumi.BoolPtrOutput { return v.ShouldRotate }).(pulumi.BoolPtrOutput)
}

// The current lifecycle state of the Autonomous Database wallet.
func (o AutonomousDatabaseRegionalWalletManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AutonomousDatabaseRegionalWalletManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the wallet was last rotated.
func (o AutonomousDatabaseRegionalWalletManagementOutput) TimeRotated() pulumi.StringOutput {
	return o.ApplyT(func(v *AutonomousDatabaseRegionalWalletManagement) pulumi.StringOutput { return v.TimeRotated }).(pulumi.StringOutput)
}

type AutonomousDatabaseRegionalWalletManagementArrayOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseRegionalWalletManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseRegionalWalletManagementArrayOutput) ToAutonomousDatabaseRegionalWalletManagementArrayOutput() AutonomousDatabaseRegionalWalletManagementArrayOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementArrayOutput) ToAutonomousDatabaseRegionalWalletManagementArrayOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementArrayOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[[]*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: o.OutputState,
	}
}

func (o AutonomousDatabaseRegionalWalletManagementArrayOutput) Index(i pulumi.IntInput) AutonomousDatabaseRegionalWalletManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutonomousDatabaseRegionalWalletManagement {
		return vs[0].([]*AutonomousDatabaseRegionalWalletManagement)[vs[1].(int)]
	}).(AutonomousDatabaseRegionalWalletManagementOutput)
}

type AutonomousDatabaseRegionalWalletManagementMapOutput struct{ *pulumi.OutputState }

func (AutonomousDatabaseRegionalWalletManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutonomousDatabaseRegionalWalletManagement)(nil)).Elem()
}

func (o AutonomousDatabaseRegionalWalletManagementMapOutput) ToAutonomousDatabaseRegionalWalletManagementMapOutput() AutonomousDatabaseRegionalWalletManagementMapOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementMapOutput) ToAutonomousDatabaseRegionalWalletManagementMapOutputWithContext(ctx context.Context) AutonomousDatabaseRegionalWalletManagementMapOutput {
	return o
}

func (o AutonomousDatabaseRegionalWalletManagementMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AutonomousDatabaseRegionalWalletManagement] {
	return pulumix.Output[map[string]*AutonomousDatabaseRegionalWalletManagement]{
		OutputState: o.OutputState,
	}
}

func (o AutonomousDatabaseRegionalWalletManagementMapOutput) MapIndex(k pulumi.StringInput) AutonomousDatabaseRegionalWalletManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutonomousDatabaseRegionalWalletManagement {
		return vs[0].(map[string]*AutonomousDatabaseRegionalWalletManagement)[vs[1].(string)]
	}).(AutonomousDatabaseRegionalWalletManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseRegionalWalletManagementInput)(nil)).Elem(), &AutonomousDatabaseRegionalWalletManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseRegionalWalletManagementArrayInput)(nil)).Elem(), AutonomousDatabaseRegionalWalletManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutonomousDatabaseRegionalWalletManagementMapInput)(nil)).Elem(), AutonomousDatabaseRegionalWalletManagementMap{})
	pulumi.RegisterOutputType(AutonomousDatabaseRegionalWalletManagementOutput{})
	pulumi.RegisterOutputType(AutonomousDatabaseRegionalWalletManagementArrayOutput{})
	pulumi.RegisterOutputType(AutonomousDatabaseRegionalWalletManagementMapOutput{})
}
