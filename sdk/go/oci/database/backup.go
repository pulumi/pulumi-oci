// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Backup resource in Oracle Cloud Infrastructure Database service.
//
// Creates a new backup in the specified database based on the request parameters you provide. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.NewBackup(ctx, "test_backup", &database.BackupArgs{
//				DatabaseId:  pulumi.Any(testDatabase.Id),
//				DisplayName: pulumi.Any(backupDisplayName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backups can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Database/backup:Backup test_backup "id"
// ```
type Backup struct {
	pulumi.CustomResourceState

	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain    pulumi.StringOutput `pulumi:"availabilityDomain"`
	BackupDestinationType pulumi.StringOutput `pulumi:"backupDestinationType"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The Oracle Database Edition that applies to all the databases on the DB system. Exadata DB systems and 2-node RAC DB systems require ENTERPRISE_EDITION_EXTREME_PERFORMANCE.
	DatabaseEdition pulumi.StringOutput `pulumi:"databaseEdition"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs pulumi.Float64Output `pulumi:"databaseSizeInGbs"`
	// The user-friendly name for the backup. The name does not have to be unique.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Types of providers supported for managing database encryption keys
	EncryptionKeyLocationDetails BackupEncryptionKeyLocationDetailArrayOutput `pulumi:"encryptionKeyLocationDetails"`
	IsUsingOracleManagedKeys     pulumi.BoolOutput                            `pulumi:"isUsingOracleManagedKeys"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store of Oracle Vault.
	KeyStoreId pulumi.StringOutput `pulumi:"keyStoreId"`
	// The wallet name for Oracle Key Vault.
	KeyStoreWalletName pulumi.StringOutput `pulumi:"keyStoreWalletName"`
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
	KmsKeyVersionId pulumi.StringOutput `pulumi:"kmsKeyVersionId"`
	// Additional information about the current lifecycle state.
	LifecycleDetails       pulumi.StringOutput      `pulumi:"lifecycleDetails"`
	RetentionPeriodInDays  pulumi.IntOutput         `pulumi:"retentionPeriodInDays"`
	RetentionPeriodInYears pulumi.IntOutput         `pulumi:"retentionPeriodInYears"`
	SecondaryKmsKeyIds     pulumi.StringArrayOutput `pulumi:"secondaryKmsKeyIds"`
	// Shape of the backup's source database.
	Shape pulumi.StringOutput `pulumi:"shape"`
	// The current state of the backup.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the backup was completed.
	TimeEnded           pulumi.StringOutput `pulumi:"timeEnded"`
	TimeExpiryScheduled pulumi.StringOutput `pulumi:"timeExpiryScheduled"`
	// The date and time the backup started.
	TimeStarted pulumi.StringOutput `pulumi:"timeStarted"`
	// The type of backup.
	Type pulumi.StringOutput `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
	// Version of the backup's source database
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backup
	err := ctx.RegisterResource("oci:Database/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("oci:Database/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain    *string `pulumi:"availabilityDomain"`
	BackupDestinationType *string `pulumi:"backupDestinationType"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The Oracle Database Edition that applies to all the databases on the DB system. Exadata DB systems and 2-node RAC DB systems require ENTERPRISE_EDITION_EXTREME_PERFORMANCE.
	DatabaseEdition *string `pulumi:"databaseEdition"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId *string `pulumi:"databaseId"`
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs *float64 `pulumi:"databaseSizeInGbs"`
	// The user-friendly name for the backup. The name does not have to be unique.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DisplayName *string `pulumi:"displayName"`
	// Types of providers supported for managing database encryption keys
	EncryptionKeyLocationDetails []BackupEncryptionKeyLocationDetail `pulumi:"encryptionKeyLocationDetails"`
	IsUsingOracleManagedKeys     *bool                               `pulumi:"isUsingOracleManagedKeys"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store of Oracle Vault.
	KeyStoreId *string `pulumi:"keyStoreId"`
	// The wallet name for Oracle Key Vault.
	KeyStoreWalletName *string `pulumi:"keyStoreWalletName"`
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
	KmsKeyVersionId *string `pulumi:"kmsKeyVersionId"`
	// Additional information about the current lifecycle state.
	LifecycleDetails       *string  `pulumi:"lifecycleDetails"`
	RetentionPeriodInDays  *int     `pulumi:"retentionPeriodInDays"`
	RetentionPeriodInYears *int     `pulumi:"retentionPeriodInYears"`
	SecondaryKmsKeyIds     []string `pulumi:"secondaryKmsKeyIds"`
	// Shape of the backup's source database.
	Shape *string `pulumi:"shape"`
	// The current state of the backup.
	State *string `pulumi:"state"`
	// The date and time the backup was completed.
	TimeEnded           *string `pulumi:"timeEnded"`
	TimeExpiryScheduled *string `pulumi:"timeExpiryScheduled"`
	// The date and time the backup started.
	TimeStarted *string `pulumi:"timeStarted"`
	// The type of backup.
	Type *string `pulumi:"type"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
	VaultId *string `pulumi:"vaultId"`
	// Version of the backup's source database
	Version *string `pulumi:"version"`
}

type BackupState struct {
	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain    pulumi.StringPtrInput
	BackupDestinationType pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The Oracle Database Edition that applies to all the databases on the DB system. Exadata DB systems and 2-node RAC DB systems require ENTERPRISE_EDITION_EXTREME_PERFORMANCE.
	DatabaseEdition pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringPtrInput
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs pulumi.Float64PtrInput
	// The user-friendly name for the backup. The name does not have to be unique.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DisplayName pulumi.StringPtrInput
	// Types of providers supported for managing database encryption keys
	EncryptionKeyLocationDetails BackupEncryptionKeyLocationDetailArrayInput
	IsUsingOracleManagedKeys     pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store of Oracle Vault.
	KeyStoreId pulumi.StringPtrInput
	// The wallet name for Oracle Key Vault.
	KeyStoreWalletName pulumi.StringPtrInput
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId pulumi.StringPtrInput
	// The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
	KmsKeyVersionId pulumi.StringPtrInput
	// Additional information about the current lifecycle state.
	LifecycleDetails       pulumi.StringPtrInput
	RetentionPeriodInDays  pulumi.IntPtrInput
	RetentionPeriodInYears pulumi.IntPtrInput
	SecondaryKmsKeyIds     pulumi.StringArrayInput
	// Shape of the backup's source database.
	Shape pulumi.StringPtrInput
	// The current state of the backup.
	State pulumi.StringPtrInput
	// The date and time the backup was completed.
	TimeEnded           pulumi.StringPtrInput
	TimeExpiryScheduled pulumi.StringPtrInput
	// The date and time the backup started.
	TimeStarted pulumi.StringPtrInput
	// The type of backup.
	Type pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
	VaultId pulumi.StringPtrInput
	// Version of the backup's source database
	Version pulumi.StringPtrInput
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId string `pulumi:"databaseId"`
	// The user-friendly name for the backup. The name does not have to be unique.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DisplayName            string `pulumi:"displayName"`
	RetentionPeriodInDays  *int   `pulumi:"retentionPeriodInDays"`
	RetentionPeriodInYears *int   `pulumi:"retentionPeriodInYears"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringInput
	// The user-friendly name for the backup. The name does not have to be unique.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DisplayName            pulumi.StringInput
	RetentionPeriodInDays  pulumi.IntPtrInput
	RetentionPeriodInYears pulumi.IntPtrInput
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(ctx context.Context) BackupOutput
}

func (*Backup) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *Backup) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i *Backup) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

// BackupArrayInput is an input type that accepts BackupArray and BackupArrayOutput values.
// You can construct a concrete instance of `BackupArrayInput` via:
//
//	BackupArray{ BackupArgs{...} }
type BackupArrayInput interface {
	pulumi.Input

	ToBackupArrayOutput() BackupArrayOutput
	ToBackupArrayOutputWithContext(context.Context) BackupArrayOutput
}

type BackupArray []BackupInput

func (BackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (i BackupArray) ToBackupArrayOutput() BackupArrayOutput {
	return i.ToBackupArrayOutputWithContext(context.Background())
}

func (i BackupArray) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupArrayOutput)
}

// BackupMapInput is an input type that accepts BackupMap and BackupMapOutput values.
// You can construct a concrete instance of `BackupMapInput` via:
//
//	BackupMap{ "key": BackupArgs{...} }
type BackupMapInput interface {
	pulumi.Input

	ToBackupMapOutput() BackupMapOutput
	ToBackupMapOutputWithContext(context.Context) BackupMapOutput
}

type BackupMap map[string]BackupInput

func (BackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (i BackupMap) ToBackupMapOutput() BackupMapOutput {
	return i.ToBackupMapOutputWithContext(context.Background())
}

func (i BackupMap) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMapOutput)
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

// The name of the availability domain where the database backup is stored.
func (o BackupOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

func (o BackupOutput) BackupDestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupDestinationType }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o BackupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The Oracle Database Edition that applies to all the databases on the DB system. Exadata DB systems and 2-node RAC DB systems require ENTERPRISE_EDITION_EXTREME_PERFORMANCE.
func (o BackupOutput) DatabaseEdition() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.DatabaseEdition }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
func (o BackupOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The size of the database in gigabytes at the time the backup was taken.
func (o BackupOutput) DatabaseSizeInGbs() pulumi.Float64Output {
	return o.ApplyT(func(v *Backup) pulumi.Float64Output { return v.DatabaseSizeInGbs }).(pulumi.Float64Output)
}

// The user-friendly name for the backup. The name does not have to be unique.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o BackupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Types of providers supported for managing database encryption keys
func (o BackupOutput) EncryptionKeyLocationDetails() BackupEncryptionKeyLocationDetailArrayOutput {
	return o.ApplyT(func(v *Backup) BackupEncryptionKeyLocationDetailArrayOutput { return v.EncryptionKeyLocationDetails }).(BackupEncryptionKeyLocationDetailArrayOutput)
}

func (o BackupOutput) IsUsingOracleManagedKeys() pulumi.BoolOutput {
	return o.ApplyT(func(v *Backup) pulumi.BoolOutput { return v.IsUsingOracleManagedKeys }).(pulumi.BoolOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the key store of Oracle Vault.
func (o BackupOutput) KeyStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.KeyStoreId }).(pulumi.StringOutput)
}

// The wallet name for Oracle Key Vault.
func (o BackupOutput) KeyStoreWalletName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.KeyStoreWalletName }).(pulumi.StringOutput)
}

// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
func (o BackupOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
func (o BackupOutput) KmsKeyVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.KmsKeyVersionId }).(pulumi.StringOutput)
}

// Additional information about the current lifecycle state.
func (o BackupOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

func (o BackupOutput) RetentionPeriodInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Backup) pulumi.IntOutput { return v.RetentionPeriodInDays }).(pulumi.IntOutput)
}

func (o BackupOutput) RetentionPeriodInYears() pulumi.IntOutput {
	return o.ApplyT(func(v *Backup) pulumi.IntOutput { return v.RetentionPeriodInYears }).(pulumi.IntOutput)
}

func (o BackupOutput) SecondaryKmsKeyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringArrayOutput { return v.SecondaryKmsKeyIds }).(pulumi.StringArrayOutput)
}

// Shape of the backup's source database.
func (o BackupOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Shape }).(pulumi.StringOutput)
}

// The current state of the backup.
func (o BackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the backup was completed.
func (o BackupOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.TimeEnded }).(pulumi.StringOutput)
}

func (o BackupOutput) TimeExpiryScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.TimeExpiryScheduled }).(pulumi.StringOutput)
}

// The date and time the backup started.
func (o BackupOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.TimeStarted }).(pulumi.StringOutput)
}

// The type of backup.
func (o BackupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
func (o BackupOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

// Version of the backup's source database
func (o BackupOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].([]*Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type BackupMapOutput struct{ *pulumi.OutputState }

func (BackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (o BackupMapOutput) ToBackupMapOutput() BackupMapOutput {
	return o
}

func (o BackupMapOutput) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return o
}

func (o BackupMapOutput) MapIndex(k pulumi.StringInput) BackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].(map[string]*Backup)[vs[1].(string)]
	}).(BackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInput)(nil)).Elem(), &Backup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupArrayInput)(nil)).Elem(), BackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupMapInput)(nil)).Elem(), BackupMap{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(BackupMapOutput{})
}
