// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Database Management resource in Oracle Cloud Infrastructure Database service.
//
// Enable / Update / Disable database management for the specified Oracle Database instance.
//
// Database Management requires `USER_NAME`, `PASSWORD_SECRET_ID` and `PRIVATE_END_POINT_ID`.
// `database.0.database_management_config` is updated to appropriate managementType and managementStatus for the specified Oracle Database instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.NewCloudDatabaseManagement(ctx, "test", &Database.CloudDatabaseManagementArgs{
//				DatabaseId:        pulumi.Any(oci_database_database.Test_database.Id),
//				ManagementType:    pulumi.Any(_var.Database_cloud_database_management_details_management_type),
//				PrivateEndPointId: pulumi.Any(_var.Database_cloud_database_management_details_private_end_point_id),
//				ServiceName:       pulumi.Any(_var.Database_cloud_database_management_details_service_name),
//				Credentialdetails: &database.CloudDatabaseManagementCredentialdetailsArgs{
//					UserName:         pulumi.Any(_var.Database_cloud_database_management_details_user_name),
//					PasswordSecretId: pulumi.Any(_var.Database_cloud_database_management_details_password_secret_id),
//				},
//				EnableManagement: pulumi.Any(_var.Database_cloud_database_management_details_enable_management),
//				Port:             pulumi.Any(_var.Cloud_database_management_port),
//				Protocol:         pulumi.Any(_var.Cloud_database_management_protocol),
//				Role:             pulumi.Any(_var.Cloud_database_management_role),
//				SslSecretId:      pulumi.Any(oci_vault_secret.Test_secret.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type CloudDatabaseManagement struct {
	pulumi.CustomResourceState

	Credentialdetails CloudDatabaseManagementCredentialdetailsOutput `pulumi:"credentialdetails"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// (Updatable) Use this flag to enable/disable database management
	EnableManagement pulumi.BoolOutput `pulumi:"enableManagement"`
	// (Updatable) Specifies database management type
	// enum:
	ManagementType pulumi.StringOutput `pulumi:"managementType"`
	// The port used to connect to the database.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringOutput `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The role of the user that will be connecting to the database.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringPtrOutput `pulumi:"sslSecretId"`
}

// NewCloudDatabaseManagement registers a new resource with the given unique name, arguments, and options.
func NewCloudDatabaseManagement(ctx *pulumi.Context,
	name string, args *CloudDatabaseManagementArgs, opts ...pulumi.ResourceOption) (*CloudDatabaseManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentialdetails == nil {
		return nil, errors.New("invalid value for required argument 'Credentialdetails'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.EnableManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableManagement'")
	}
	if args.ManagementType == nil {
		return nil, errors.New("invalid value for required argument 'ManagementType'")
	}
	if args.PrivateEndPointId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateEndPointId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	var resource CloudDatabaseManagement
	err := ctx.RegisterResource("oci:Database/cloudDatabaseManagement:CloudDatabaseManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudDatabaseManagement gets an existing CloudDatabaseManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudDatabaseManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudDatabaseManagementState, opts ...pulumi.ResourceOption) (*CloudDatabaseManagement, error) {
	var resource CloudDatabaseManagement
	err := ctx.ReadResource("oci:Database/cloudDatabaseManagement:CloudDatabaseManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudDatabaseManagement resources.
type cloudDatabaseManagementState struct {
	Credentialdetails *CloudDatabaseManagementCredentialdetails `pulumi:"credentialdetails"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId *string `pulumi:"databaseId"`
	// (Updatable) Use this flag to enable/disable database management
	EnableManagement *bool `pulumi:"enableManagement"`
	// (Updatable) Specifies database management type
	// enum:
	ManagementType *string `pulumi:"managementType"`
	// The port used to connect to the database.
	Port *int `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId *string `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol *string `pulumi:"protocol"`
	// The role of the user that will be connecting to the database.
	Role *string `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName *string `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId *string `pulumi:"sslSecretId"`
}

type CloudDatabaseManagementState struct {
	Credentialdetails CloudDatabaseManagementCredentialdetailsPtrInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId pulumi.StringPtrInput
	// (Updatable) Use this flag to enable/disable database management
	EnableManagement pulumi.BoolPtrInput
	// (Updatable) Specifies database management type
	// enum:
	ManagementType pulumi.StringPtrInput
	// The port used to connect to the database.
	Port pulumi.IntPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringPtrInput
	// Protocol used by the database connection.
	Protocol pulumi.StringPtrInput
	// The role of the user that will be connecting to the database.
	Role pulumi.StringPtrInput
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringPtrInput
}

func (CloudDatabaseManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudDatabaseManagementState)(nil)).Elem()
}

type cloudDatabaseManagementArgs struct {
	Credentialdetails CloudDatabaseManagementCredentialdetails `pulumi:"credentialdetails"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId string `pulumi:"databaseId"`
	// (Updatable) Use this flag to enable/disable database management
	EnableManagement bool `pulumi:"enableManagement"`
	// (Updatable) Specifies database management type
	// enum:
	ManagementType string `pulumi:"managementType"`
	// The port used to connect to the database.
	Port *int `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId string `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol *string `pulumi:"protocol"`
	// The role of the user that will be connecting to the database.
	Role *string `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName string `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId *string `pulumi:"sslSecretId"`
}

// The set of arguments for constructing a CloudDatabaseManagement resource.
type CloudDatabaseManagementArgs struct {
	Credentialdetails CloudDatabaseManagementCredentialdetailsInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId pulumi.StringInput
	// (Updatable) Use this flag to enable/disable database management
	EnableManagement pulumi.BoolInput
	// (Updatable) Specifies database management type
	// enum:
	ManagementType pulumi.StringInput
	// The port used to connect to the database.
	Port pulumi.IntPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringInput
	// Protocol used by the database connection.
	Protocol pulumi.StringPtrInput
	// The role of the user that will be connecting to the database.
	Role pulumi.StringPtrInput
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringPtrInput
}

func (CloudDatabaseManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudDatabaseManagementArgs)(nil)).Elem()
}

type CloudDatabaseManagementInput interface {
	pulumi.Input

	ToCloudDatabaseManagementOutput() CloudDatabaseManagementOutput
	ToCloudDatabaseManagementOutputWithContext(ctx context.Context) CloudDatabaseManagementOutput
}

func (*CloudDatabaseManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudDatabaseManagement)(nil)).Elem()
}

func (i *CloudDatabaseManagement) ToCloudDatabaseManagementOutput() CloudDatabaseManagementOutput {
	return i.ToCloudDatabaseManagementOutputWithContext(context.Background())
}

func (i *CloudDatabaseManagement) ToCloudDatabaseManagementOutputWithContext(ctx context.Context) CloudDatabaseManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudDatabaseManagementOutput)
}

// CloudDatabaseManagementArrayInput is an input type that accepts CloudDatabaseManagementArray and CloudDatabaseManagementArrayOutput values.
// You can construct a concrete instance of `CloudDatabaseManagementArrayInput` via:
//
//	CloudDatabaseManagementArray{ CloudDatabaseManagementArgs{...} }
type CloudDatabaseManagementArrayInput interface {
	pulumi.Input

	ToCloudDatabaseManagementArrayOutput() CloudDatabaseManagementArrayOutput
	ToCloudDatabaseManagementArrayOutputWithContext(context.Context) CloudDatabaseManagementArrayOutput
}

type CloudDatabaseManagementArray []CloudDatabaseManagementInput

func (CloudDatabaseManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudDatabaseManagement)(nil)).Elem()
}

func (i CloudDatabaseManagementArray) ToCloudDatabaseManagementArrayOutput() CloudDatabaseManagementArrayOutput {
	return i.ToCloudDatabaseManagementArrayOutputWithContext(context.Background())
}

func (i CloudDatabaseManagementArray) ToCloudDatabaseManagementArrayOutputWithContext(ctx context.Context) CloudDatabaseManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudDatabaseManagementArrayOutput)
}

// CloudDatabaseManagementMapInput is an input type that accepts CloudDatabaseManagementMap and CloudDatabaseManagementMapOutput values.
// You can construct a concrete instance of `CloudDatabaseManagementMapInput` via:
//
//	CloudDatabaseManagementMap{ "key": CloudDatabaseManagementArgs{...} }
type CloudDatabaseManagementMapInput interface {
	pulumi.Input

	ToCloudDatabaseManagementMapOutput() CloudDatabaseManagementMapOutput
	ToCloudDatabaseManagementMapOutputWithContext(context.Context) CloudDatabaseManagementMapOutput
}

type CloudDatabaseManagementMap map[string]CloudDatabaseManagementInput

func (CloudDatabaseManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudDatabaseManagement)(nil)).Elem()
}

func (i CloudDatabaseManagementMap) ToCloudDatabaseManagementMapOutput() CloudDatabaseManagementMapOutput {
	return i.ToCloudDatabaseManagementMapOutputWithContext(context.Background())
}

func (i CloudDatabaseManagementMap) ToCloudDatabaseManagementMapOutputWithContext(ctx context.Context) CloudDatabaseManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudDatabaseManagementMapOutput)
}

type CloudDatabaseManagementOutput struct{ *pulumi.OutputState }

func (CloudDatabaseManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudDatabaseManagement)(nil)).Elem()
}

func (o CloudDatabaseManagementOutput) ToCloudDatabaseManagementOutput() CloudDatabaseManagementOutput {
	return o
}

func (o CloudDatabaseManagementOutput) ToCloudDatabaseManagementOutputWithContext(ctx context.Context) CloudDatabaseManagementOutput {
	return o
}

func (o CloudDatabaseManagementOutput) Credentialdetails() CloudDatabaseManagementCredentialdetailsOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) CloudDatabaseManagementCredentialdetailsOutput {
		return v.Credentialdetails
	}).(CloudDatabaseManagementCredentialdetailsOutput)
}

// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o CloudDatabaseManagementOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Updatable) Use this flag to enable/disable database management
func (o CloudDatabaseManagementOutput) EnableManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.BoolOutput { return v.EnableManagement }).(pulumi.BoolOutput)
}

// (Updatable) Specifies database management type
// enum:
func (o CloudDatabaseManagementOutput) ManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringOutput { return v.ManagementType }).(pulumi.StringOutput)
}

// The port used to connect to the database.
func (o CloudDatabaseManagementOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
func (o CloudDatabaseManagementOutput) PrivateEndPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringOutput { return v.PrivateEndPointId }).(pulumi.StringOutput)
}

// Protocol used by the database connection.
func (o CloudDatabaseManagementOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The role of the user that will be connecting to the database.
func (o CloudDatabaseManagementOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// The name of the Oracle Database service that will be used to connect to the database.
func (o CloudDatabaseManagementOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
func (o CloudDatabaseManagementOutput) SslSecretId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudDatabaseManagement) pulumi.StringPtrOutput { return v.SslSecretId }).(pulumi.StringPtrOutput)
}

type CloudDatabaseManagementArrayOutput struct{ *pulumi.OutputState }

func (CloudDatabaseManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudDatabaseManagement)(nil)).Elem()
}

func (o CloudDatabaseManagementArrayOutput) ToCloudDatabaseManagementArrayOutput() CloudDatabaseManagementArrayOutput {
	return o
}

func (o CloudDatabaseManagementArrayOutput) ToCloudDatabaseManagementArrayOutputWithContext(ctx context.Context) CloudDatabaseManagementArrayOutput {
	return o
}

func (o CloudDatabaseManagementArrayOutput) Index(i pulumi.IntInput) CloudDatabaseManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudDatabaseManagement {
		return vs[0].([]*CloudDatabaseManagement)[vs[1].(int)]
	}).(CloudDatabaseManagementOutput)
}

type CloudDatabaseManagementMapOutput struct{ *pulumi.OutputState }

func (CloudDatabaseManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudDatabaseManagement)(nil)).Elem()
}

func (o CloudDatabaseManagementMapOutput) ToCloudDatabaseManagementMapOutput() CloudDatabaseManagementMapOutput {
	return o
}

func (o CloudDatabaseManagementMapOutput) ToCloudDatabaseManagementMapOutputWithContext(ctx context.Context) CloudDatabaseManagementMapOutput {
	return o
}

func (o CloudDatabaseManagementMapOutput) MapIndex(k pulumi.StringInput) CloudDatabaseManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudDatabaseManagement {
		return vs[0].(map[string]*CloudDatabaseManagement)[vs[1].(string)]
	}).(CloudDatabaseManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudDatabaseManagementInput)(nil)).Elem(), &CloudDatabaseManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudDatabaseManagementArrayInput)(nil)).Elem(), CloudDatabaseManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudDatabaseManagementMapInput)(nil)).Elem(), CloudDatabaseManagementMap{})
	pulumi.RegisterOutputType(CloudDatabaseManagementOutput{})
	pulumi.RegisterOutputType(CloudDatabaseManagementArrayOutput{})
	pulumi.RegisterOutputType(CloudDatabaseManagementMapOutput{})
}
