// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Exadata Infrastructure Configure Exascale Management resource in Oracle Cloud Infrastructure Database service.
//
// Configures Exascale on Exadata infrastructure resource. Applies to Exadata Cloud@Customer instances only.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.NewExadataInfrastructureConfigureExascaleManagement(ctx, "test_exadata_infrastructure_configure_exascale_management", &database.ExadataInfrastructureConfigureExascaleManagementArgs{
//				ExadataInfrastructureId: pulumi.Any(testExadataInfrastructure.Id),
//				TotalStorageInGbs:       pulumi.Any(exadataInfrastructureConfigureExascaleManagementTotalStorageInGbs),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExadataInfrastructureConfigureExascaleManagement can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Database/exadataInfrastructureConfigureExascaleManagement:ExadataInfrastructureConfigureExascaleManagement test_exadata_infrastructure_configure_exascale_management "id"
// ```
type ExadataInfrastructureConfigureExascaleManagement struct {
	pulumi.CustomResourceState

	// The requested number of additional storage servers activated for the Exadata infrastructure.
	ActivatedStorageCount pulumi.IntOutput `pulumi:"activatedStorageCount"`
	// The requested number of additional compute servers for the Exadata infrastructure.
	AdditionalComputeCount pulumi.IntOutput `pulumi:"additionalComputeCount"`
	// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
	AdditionalComputeSystemModel pulumi.StringOutput `pulumi:"additionalComputeSystemModel"`
	// The requested number of additional storage servers for the Exadata infrastructure.
	AdditionalStorageCount pulumi.IntOutput `pulumi:"additionalStorageCount"`
	// The CIDR block for the Exadata administration network.
	AdminNetworkCidr pulumi.StringOutput `pulumi:"adminNetworkCidr"`
	// The name of the availability domain that the Exadata infrastructure is located in.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The IP address for the first control plane server.
	CloudControlPlaneServer1 pulumi.StringOutput `pulumi:"cloudControlPlaneServer1"`
	// The IP address for the second control plane server.
	CloudControlPlaneServer2 pulumi.StringOutput `pulumi:"cloudControlPlaneServer2"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The number of compute servers for the Exadata infrastructure.
	ComputeCount pulumi.IntOutput `pulumi:"computeCount"`
	// The list of contacts for the Exadata infrastructure.
	Contacts ExadataInfrastructureConfigureExascaleManagementContactArrayOutput `pulumi:"contacts"`
	// The corporate network proxy for access to the control plane network.
	CorporateProxy pulumi.StringOutput `pulumi:"corporateProxy"`
	// The number of enabled CPU cores.
	CpusEnabled pulumi.IntOutput `pulumi:"cpusEnabled"`
	// The CSI Number of the Exadata infrastructure.
	CsiNumber pulumi.StringOutput `pulumi:"csiNumber"`
	// Size, in terabytes, of the DATA disk group.
	DataStorageSizeInTbs pulumi.Float64Output `pulumi:"dataStorageSizeInTbs"`
	// The local node storage allocated in GBs.
	DbNodeStorageSizeInGbs pulumi.IntOutput `pulumi:"dbNodeStorageSizeInGbs"`
	// The software version of the database servers (dom0) in the Exadata infrastructure.
	DbServerVersion pulumi.StringOutput `pulumi:"dbServerVersion"`
	// Details of the file system configuration of the Exadata infrastructure.
	DefinedFileSystemConfigurations ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArrayOutput `pulumi:"definedFileSystemConfigurations"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The list of DNS server IP addresses. Maximum of 3 allowed.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId pulumi.StringOutput `pulumi:"exadataInfrastructureId"`
	// The exascale config response details for the Exadata Cloud@Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud@Customer instances and Exadata Cloud Service instances.
	ExascaleConfigs ExadataInfrastructureConfigureExascaleManagementExascaleConfigArrayOutput `pulumi:"exascaleConfigs"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The gateway for the control plane network.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The CIDR block for the Exadata InfiniBand interconnect.
	InfiniBandNetworkCidr pulumi.StringOutput `pulumi:"infiniBandNetworkCidr"`
	// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
	IsCpsOfflineReportEnabled pulumi.BoolOutput `pulumi:"isCpsOfflineReportEnabled"`
	// Indicates if deployment is Multi-Rack or not.
	IsMultiRackDeployment pulumi.BoolOutput `pulumi:"isMultiRackDeployment"`
	// If true, the infrastructure is using granular maintenance scheduling preference.
	IsSchedulingPolicyAssociated pulumi.BoolOutput `pulumi:"isSchedulingPolicyAssociated"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
	MaintenanceSloStatus pulumi.StringOutput `pulumi:"maintenanceSloStatus"`
	// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
	MaintenanceWindows ExadataInfrastructureConfigureExascaleManagementMaintenanceWindowArrayOutput `pulumi:"maintenanceWindows"`
	// The total number of CPU cores available.
	MaxCpuCount pulumi.IntOutput `pulumi:"maxCpuCount"`
	// The total available DATA disk group size.
	MaxDataStorageInTbs pulumi.Float64Output `pulumi:"maxDataStorageInTbs"`
	// The total local node storage available in GBs.
	MaxDbNodeStorageInGbs pulumi.IntOutput `pulumi:"maxDbNodeStorageInGbs"`
	// The total memory available in GBs.
	MaxMemoryInGbs pulumi.IntOutput `pulumi:"maxMemoryInGbs"`
	// The memory allocated in GBs.
	MemorySizeInGbs pulumi.IntOutput `pulumi:"memorySizeInGbs"`
	// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
	MonthlyDbServerVersion pulumi.StringOutput `pulumi:"monthlyDbServerVersion"`
	// The base64 encoded Multi-Rack configuration json file.
	MultiRackConfigurationFile pulumi.StringOutput `pulumi:"multiRackConfigurationFile"`
	// The netmask for the control plane network.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
	NetworkBondingModeDetails ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetailArrayOutput `pulumi:"networkBondingModeDetails"`
	// The list of NTP server IP addresses. Maximum of 3 allowed.
	NtpServers pulumi.StringArrayOutput `pulumi:"ntpServers"`
	// The serial number for the Exadata infrastructure.
	RackSerialNumber pulumi.StringOutput `pulumi:"rackSerialNumber"`
	// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
	Shape pulumi.StringOutput `pulumi:"shape"`
	// The current lifecycle state of the Exadata infrastructure.
	State pulumi.StringOutput `pulumi:"state"`
	// The number of Exadata storage servers for the Exadata infrastructure.
	StorageCount pulumi.IntOutput `pulumi:"storageCount"`
	// The software version of the storage servers (cells) in the Exadata infrastructure.
	StorageServerVersion pulumi.StringOutput `pulumi:"storageServerVersion"`
	// The date and time the Exadata infrastructure was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// Storage size needed for Exascale in GBs.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TotalStorageInGbs pulumi.IntOutput `pulumi:"totalStorageInGbs"`
}

// NewExadataInfrastructureConfigureExascaleManagement registers a new resource with the given unique name, arguments, and options.
func NewExadataInfrastructureConfigureExascaleManagement(ctx *pulumi.Context,
	name string, args *ExadataInfrastructureConfigureExascaleManagementArgs, opts ...pulumi.ResourceOption) (*ExadataInfrastructureConfigureExascaleManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExadataInfrastructureId == nil {
		return nil, errors.New("invalid value for required argument 'ExadataInfrastructureId'")
	}
	if args.TotalStorageInGbs == nil {
		return nil, errors.New("invalid value for required argument 'TotalStorageInGbs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExadataInfrastructureConfigureExascaleManagement
	err := ctx.RegisterResource("oci:Database/exadataInfrastructureConfigureExascaleManagement:ExadataInfrastructureConfigureExascaleManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExadataInfrastructureConfigureExascaleManagement gets an existing ExadataInfrastructureConfigureExascaleManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExadataInfrastructureConfigureExascaleManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExadataInfrastructureConfigureExascaleManagementState, opts ...pulumi.ResourceOption) (*ExadataInfrastructureConfigureExascaleManagement, error) {
	var resource ExadataInfrastructureConfigureExascaleManagement
	err := ctx.ReadResource("oci:Database/exadataInfrastructureConfigureExascaleManagement:ExadataInfrastructureConfigureExascaleManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExadataInfrastructureConfigureExascaleManagement resources.
type exadataInfrastructureConfigureExascaleManagementState struct {
	// The requested number of additional storage servers activated for the Exadata infrastructure.
	ActivatedStorageCount *int `pulumi:"activatedStorageCount"`
	// The requested number of additional compute servers for the Exadata infrastructure.
	AdditionalComputeCount *int `pulumi:"additionalComputeCount"`
	// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
	AdditionalComputeSystemModel *string `pulumi:"additionalComputeSystemModel"`
	// The requested number of additional storage servers for the Exadata infrastructure.
	AdditionalStorageCount *int `pulumi:"additionalStorageCount"`
	// The CIDR block for the Exadata administration network.
	AdminNetworkCidr *string `pulumi:"adminNetworkCidr"`
	// The name of the availability domain that the Exadata infrastructure is located in.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The IP address for the first control plane server.
	CloudControlPlaneServer1 *string `pulumi:"cloudControlPlaneServer1"`
	// The IP address for the second control plane server.
	CloudControlPlaneServer2 *string `pulumi:"cloudControlPlaneServer2"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The number of compute servers for the Exadata infrastructure.
	ComputeCount *int `pulumi:"computeCount"`
	// The list of contacts for the Exadata infrastructure.
	Contacts []ExadataInfrastructureConfigureExascaleManagementContact `pulumi:"contacts"`
	// The corporate network proxy for access to the control plane network.
	CorporateProxy *string `pulumi:"corporateProxy"`
	// The number of enabled CPU cores.
	CpusEnabled *int `pulumi:"cpusEnabled"`
	// The CSI Number of the Exadata infrastructure.
	CsiNumber *string `pulumi:"csiNumber"`
	// Size, in terabytes, of the DATA disk group.
	DataStorageSizeInTbs *float64 `pulumi:"dataStorageSizeInTbs"`
	// The local node storage allocated in GBs.
	DbNodeStorageSizeInGbs *int `pulumi:"dbNodeStorageSizeInGbs"`
	// The software version of the database servers (dom0) in the Exadata infrastructure.
	DbServerVersion *string `pulumi:"dbServerVersion"`
	// Details of the file system configuration of the Exadata infrastructure.
	DefinedFileSystemConfigurations []ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfiguration `pulumi:"definedFileSystemConfigurations"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The list of DNS server IP addresses. Maximum of 3 allowed.
	DnsServers []string `pulumi:"dnsServers"`
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId *string `pulumi:"exadataInfrastructureId"`
	// The exascale config response details for the Exadata Cloud@Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud@Customer instances and Exadata Cloud Service instances.
	ExascaleConfigs []ExadataInfrastructureConfigureExascaleManagementExascaleConfig `pulumi:"exascaleConfigs"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The gateway for the control plane network.
	Gateway *string `pulumi:"gateway"`
	// The CIDR block for the Exadata InfiniBand interconnect.
	InfiniBandNetworkCidr *string `pulumi:"infiniBandNetworkCidr"`
	// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
	IsCpsOfflineReportEnabled *bool `pulumi:"isCpsOfflineReportEnabled"`
	// Indicates if deployment is Multi-Rack or not.
	IsMultiRackDeployment *bool `pulumi:"isMultiRackDeployment"`
	// If true, the infrastructure is using granular maintenance scheduling preference.
	IsSchedulingPolicyAssociated *bool `pulumi:"isSchedulingPolicyAssociated"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
	MaintenanceSloStatus *string `pulumi:"maintenanceSloStatus"`
	// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
	MaintenanceWindows []ExadataInfrastructureConfigureExascaleManagementMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The total number of CPU cores available.
	MaxCpuCount *int `pulumi:"maxCpuCount"`
	// The total available DATA disk group size.
	MaxDataStorageInTbs *float64 `pulumi:"maxDataStorageInTbs"`
	// The total local node storage available in GBs.
	MaxDbNodeStorageInGbs *int `pulumi:"maxDbNodeStorageInGbs"`
	// The total memory available in GBs.
	MaxMemoryInGbs *int `pulumi:"maxMemoryInGbs"`
	// The memory allocated in GBs.
	MemorySizeInGbs *int `pulumi:"memorySizeInGbs"`
	// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
	MonthlyDbServerVersion *string `pulumi:"monthlyDbServerVersion"`
	// The base64 encoded Multi-Rack configuration json file.
	MultiRackConfigurationFile *string `pulumi:"multiRackConfigurationFile"`
	// The netmask for the control plane network.
	Netmask *string `pulumi:"netmask"`
	// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
	NetworkBondingModeDetails []ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetail `pulumi:"networkBondingModeDetails"`
	// The list of NTP server IP addresses. Maximum of 3 allowed.
	NtpServers []string `pulumi:"ntpServers"`
	// The serial number for the Exadata infrastructure.
	RackSerialNumber *string `pulumi:"rackSerialNumber"`
	// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
	Shape *string `pulumi:"shape"`
	// The current lifecycle state of the Exadata infrastructure.
	State *string `pulumi:"state"`
	// The number of Exadata storage servers for the Exadata infrastructure.
	StorageCount *int `pulumi:"storageCount"`
	// The software version of the storage servers (cells) in the Exadata infrastructure.
	StorageServerVersion *string `pulumi:"storageServerVersion"`
	// The date and time the Exadata infrastructure was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone *string `pulumi:"timeZone"`
	// Storage size needed for Exascale in GBs.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TotalStorageInGbs *int `pulumi:"totalStorageInGbs"`
}

type ExadataInfrastructureConfigureExascaleManagementState struct {
	// The requested number of additional storage servers activated for the Exadata infrastructure.
	ActivatedStorageCount pulumi.IntPtrInput
	// The requested number of additional compute servers for the Exadata infrastructure.
	AdditionalComputeCount pulumi.IntPtrInput
	// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
	AdditionalComputeSystemModel pulumi.StringPtrInput
	// The requested number of additional storage servers for the Exadata infrastructure.
	AdditionalStorageCount pulumi.IntPtrInput
	// The CIDR block for the Exadata administration network.
	AdminNetworkCidr pulumi.StringPtrInput
	// The name of the availability domain that the Exadata infrastructure is located in.
	AvailabilityDomain pulumi.StringPtrInput
	// The IP address for the first control plane server.
	CloudControlPlaneServer1 pulumi.StringPtrInput
	// The IP address for the second control plane server.
	CloudControlPlaneServer2 pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The number of compute servers for the Exadata infrastructure.
	ComputeCount pulumi.IntPtrInput
	// The list of contacts for the Exadata infrastructure.
	Contacts ExadataInfrastructureConfigureExascaleManagementContactArrayInput
	// The corporate network proxy for access to the control plane network.
	CorporateProxy pulumi.StringPtrInput
	// The number of enabled CPU cores.
	CpusEnabled pulumi.IntPtrInput
	// The CSI Number of the Exadata infrastructure.
	CsiNumber pulumi.StringPtrInput
	// Size, in terabytes, of the DATA disk group.
	DataStorageSizeInTbs pulumi.Float64PtrInput
	// The local node storage allocated in GBs.
	DbNodeStorageSizeInGbs pulumi.IntPtrInput
	// The software version of the database servers (dom0) in the Exadata infrastructure.
	DbServerVersion pulumi.StringPtrInput
	// Details of the file system configuration of the Exadata infrastructure.
	DefinedFileSystemConfigurations ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArrayInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// The list of DNS server IP addresses. Maximum of 3 allowed.
	DnsServers pulumi.StringArrayInput
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId pulumi.StringPtrInput
	// The exascale config response details for the Exadata Cloud@Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud@Customer instances and Exadata Cloud Service instances.
	ExascaleConfigs ExadataInfrastructureConfigureExascaleManagementExascaleConfigArrayInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// The gateway for the control plane network.
	Gateway pulumi.StringPtrInput
	// The CIDR block for the Exadata InfiniBand interconnect.
	InfiniBandNetworkCidr pulumi.StringPtrInput
	// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
	IsCpsOfflineReportEnabled pulumi.BoolPtrInput
	// Indicates if deployment is Multi-Rack or not.
	IsMultiRackDeployment pulumi.BoolPtrInput
	// If true, the infrastructure is using granular maintenance scheduling preference.
	IsSchedulingPolicyAssociated pulumi.BoolPtrInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
	MaintenanceSloStatus pulumi.StringPtrInput
	// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
	MaintenanceWindows ExadataInfrastructureConfigureExascaleManagementMaintenanceWindowArrayInput
	// The total number of CPU cores available.
	MaxCpuCount pulumi.IntPtrInput
	// The total available DATA disk group size.
	MaxDataStorageInTbs pulumi.Float64PtrInput
	// The total local node storage available in GBs.
	MaxDbNodeStorageInGbs pulumi.IntPtrInput
	// The total memory available in GBs.
	MaxMemoryInGbs pulumi.IntPtrInput
	// The memory allocated in GBs.
	MemorySizeInGbs pulumi.IntPtrInput
	// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
	MonthlyDbServerVersion pulumi.StringPtrInput
	// The base64 encoded Multi-Rack configuration json file.
	MultiRackConfigurationFile pulumi.StringPtrInput
	// The netmask for the control plane network.
	Netmask pulumi.StringPtrInput
	// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
	NetworkBondingModeDetails ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetailArrayInput
	// The list of NTP server IP addresses. Maximum of 3 allowed.
	NtpServers pulumi.StringArrayInput
	// The serial number for the Exadata infrastructure.
	RackSerialNumber pulumi.StringPtrInput
	// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
	Shape pulumi.StringPtrInput
	// The current lifecycle state of the Exadata infrastructure.
	State pulumi.StringPtrInput
	// The number of Exadata storage servers for the Exadata infrastructure.
	StorageCount pulumi.IntPtrInput
	// The software version of the storage servers (cells) in the Exadata infrastructure.
	StorageServerVersion pulumi.StringPtrInput
	// The date and time the Exadata infrastructure was created.
	TimeCreated pulumi.StringPtrInput
	// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone pulumi.StringPtrInput
	// Storage size needed for Exascale in GBs.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TotalStorageInGbs pulumi.IntPtrInput
}

func (ExadataInfrastructureConfigureExascaleManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*exadataInfrastructureConfigureExascaleManagementState)(nil)).Elem()
}

type exadataInfrastructureConfigureExascaleManagementArgs struct {
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId string `pulumi:"exadataInfrastructureId"`
	// Storage size needed for Exascale in GBs.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TotalStorageInGbs int `pulumi:"totalStorageInGbs"`
}

// The set of arguments for constructing a ExadataInfrastructureConfigureExascaleManagement resource.
type ExadataInfrastructureConfigureExascaleManagementArgs struct {
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId pulumi.StringInput
	// Storage size needed for Exascale in GBs.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TotalStorageInGbs pulumi.IntInput
}

func (ExadataInfrastructureConfigureExascaleManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exadataInfrastructureConfigureExascaleManagementArgs)(nil)).Elem()
}

type ExadataInfrastructureConfigureExascaleManagementInput interface {
	pulumi.Input

	ToExadataInfrastructureConfigureExascaleManagementOutput() ExadataInfrastructureConfigureExascaleManagementOutput
	ToExadataInfrastructureConfigureExascaleManagementOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementOutput
}

func (*ExadataInfrastructureConfigureExascaleManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (i *ExadataInfrastructureConfigureExascaleManagement) ToExadataInfrastructureConfigureExascaleManagementOutput() ExadataInfrastructureConfigureExascaleManagementOutput {
	return i.ToExadataInfrastructureConfigureExascaleManagementOutputWithContext(context.Background())
}

func (i *ExadataInfrastructureConfigureExascaleManagement) ToExadataInfrastructureConfigureExascaleManagementOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExadataInfrastructureConfigureExascaleManagementOutput)
}

// ExadataInfrastructureConfigureExascaleManagementArrayInput is an input type that accepts ExadataInfrastructureConfigureExascaleManagementArray and ExadataInfrastructureConfigureExascaleManagementArrayOutput values.
// You can construct a concrete instance of `ExadataInfrastructureConfigureExascaleManagementArrayInput` via:
//
//	ExadataInfrastructureConfigureExascaleManagementArray{ ExadataInfrastructureConfigureExascaleManagementArgs{...} }
type ExadataInfrastructureConfigureExascaleManagementArrayInput interface {
	pulumi.Input

	ToExadataInfrastructureConfigureExascaleManagementArrayOutput() ExadataInfrastructureConfigureExascaleManagementArrayOutput
	ToExadataInfrastructureConfigureExascaleManagementArrayOutputWithContext(context.Context) ExadataInfrastructureConfigureExascaleManagementArrayOutput
}

type ExadataInfrastructureConfigureExascaleManagementArray []ExadataInfrastructureConfigureExascaleManagementInput

func (ExadataInfrastructureConfigureExascaleManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (i ExadataInfrastructureConfigureExascaleManagementArray) ToExadataInfrastructureConfigureExascaleManagementArrayOutput() ExadataInfrastructureConfigureExascaleManagementArrayOutput {
	return i.ToExadataInfrastructureConfigureExascaleManagementArrayOutputWithContext(context.Background())
}

func (i ExadataInfrastructureConfigureExascaleManagementArray) ToExadataInfrastructureConfigureExascaleManagementArrayOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExadataInfrastructureConfigureExascaleManagementArrayOutput)
}

// ExadataInfrastructureConfigureExascaleManagementMapInput is an input type that accepts ExadataInfrastructureConfigureExascaleManagementMap and ExadataInfrastructureConfigureExascaleManagementMapOutput values.
// You can construct a concrete instance of `ExadataInfrastructureConfigureExascaleManagementMapInput` via:
//
//	ExadataInfrastructureConfigureExascaleManagementMap{ "key": ExadataInfrastructureConfigureExascaleManagementArgs{...} }
type ExadataInfrastructureConfigureExascaleManagementMapInput interface {
	pulumi.Input

	ToExadataInfrastructureConfigureExascaleManagementMapOutput() ExadataInfrastructureConfigureExascaleManagementMapOutput
	ToExadataInfrastructureConfigureExascaleManagementMapOutputWithContext(context.Context) ExadataInfrastructureConfigureExascaleManagementMapOutput
}

type ExadataInfrastructureConfigureExascaleManagementMap map[string]ExadataInfrastructureConfigureExascaleManagementInput

func (ExadataInfrastructureConfigureExascaleManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (i ExadataInfrastructureConfigureExascaleManagementMap) ToExadataInfrastructureConfigureExascaleManagementMapOutput() ExadataInfrastructureConfigureExascaleManagementMapOutput {
	return i.ToExadataInfrastructureConfigureExascaleManagementMapOutputWithContext(context.Background())
}

func (i ExadataInfrastructureConfigureExascaleManagementMap) ToExadataInfrastructureConfigureExascaleManagementMapOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExadataInfrastructureConfigureExascaleManagementMapOutput)
}

type ExadataInfrastructureConfigureExascaleManagementOutput struct{ *pulumi.OutputState }

func (ExadataInfrastructureConfigureExascaleManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (o ExadataInfrastructureConfigureExascaleManagementOutput) ToExadataInfrastructureConfigureExascaleManagementOutput() ExadataInfrastructureConfigureExascaleManagementOutput {
	return o
}

func (o ExadataInfrastructureConfigureExascaleManagementOutput) ToExadataInfrastructureConfigureExascaleManagementOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementOutput {
	return o
}

// The requested number of additional storage servers activated for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) ActivatedStorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput {
		return v.ActivatedStorageCount
	}).(pulumi.IntOutput)
}

// The requested number of additional compute servers for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) AdditionalComputeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput {
		return v.AdditionalComputeCount
	}).(pulumi.IntOutput)
}

// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
func (o ExadataInfrastructureConfigureExascaleManagementOutput) AdditionalComputeSystemModel() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.AdditionalComputeSystemModel
	}).(pulumi.StringOutput)
}

// The requested number of additional storage servers for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) AdditionalStorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput {
		return v.AdditionalStorageCount
	}).(pulumi.IntOutput)
}

// The CIDR block for the Exadata administration network.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) AdminNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.AdminNetworkCidr
	}).(pulumi.StringOutput)
}

// The name of the availability domain that the Exadata infrastructure is located in.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.AvailabilityDomain
	}).(pulumi.StringOutput)
}

// The IP address for the first control plane server.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CloudControlPlaneServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.CloudControlPlaneServer1
	}).(pulumi.StringOutput)
}

// The IP address for the second control plane server.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CloudControlPlaneServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.CloudControlPlaneServer2
	}).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The number of compute servers for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) ComputeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.ComputeCount }).(pulumi.IntOutput)
}

// The list of contacts for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) Contacts() ExadataInfrastructureConfigureExascaleManagementContactArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) ExadataInfrastructureConfigureExascaleManagementContactArrayOutput {
		return v.Contacts
	}).(ExadataInfrastructureConfigureExascaleManagementContactArrayOutput)
}

// The corporate network proxy for access to the control plane network.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CorporateProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.CorporateProxy }).(pulumi.StringOutput)
}

// The number of enabled CPU cores.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CpusEnabled() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.CpusEnabled }).(pulumi.IntOutput)
}

// The CSI Number of the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) CsiNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.CsiNumber }).(pulumi.StringOutput)
}

// Size, in terabytes, of the DATA disk group.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DataStorageSizeInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.Float64Output {
		return v.DataStorageSizeInTbs
	}).(pulumi.Float64Output)
}

// The local node storage allocated in GBs.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DbNodeStorageSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput {
		return v.DbNodeStorageSizeInGbs
	}).(pulumi.IntOutput)
}

// The software version of the database servers (dom0) in the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DbServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.DbServerVersion
	}).(pulumi.StringOutput)
}

// Details of the file system configuration of the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DefinedFileSystemConfigurations() ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArrayOutput {
		return v.DefinedFileSystemConfigurations
	}).(ExadataInfrastructureConfigureExascaleManagementDefinedFileSystemConfigurationArrayOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The list of DNS server IP addresses. Maximum of 3 allowed.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringArrayOutput {
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o ExadataInfrastructureConfigureExascaleManagementOutput) ExadataInfrastructureId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.ExadataInfrastructureId
	}).(pulumi.StringOutput)
}

// The exascale config response details for the Exadata Cloud@Customer infrastructure or cloud Exadata infrastructure . Applies to both Exadata Cloud@Customer instances and Exadata Cloud Service instances.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) ExascaleConfigs() ExadataInfrastructureConfigureExascaleManagementExascaleConfigArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) ExadataInfrastructureConfigureExascaleManagementExascaleConfigArrayOutput {
		return v.ExascaleConfigs
	}).(ExadataInfrastructureConfigureExascaleManagementExascaleConfigArrayOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o ExadataInfrastructureConfigureExascaleManagementOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringMapOutput {
		return v.FreeformTags
	}).(pulumi.StringMapOutput)
}

// The gateway for the control plane network.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// The CIDR block for the Exadata InfiniBand interconnect.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) InfiniBandNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.InfiniBandNetworkCidr
	}).(pulumi.StringOutput)
}

// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) IsCpsOfflineReportEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.BoolOutput {
		return v.IsCpsOfflineReportEnabled
	}).(pulumi.BoolOutput)
}

// Indicates if deployment is Multi-Rack or not.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) IsMultiRackDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.BoolOutput {
		return v.IsMultiRackDeployment
	}).(pulumi.BoolOutput)
}

// If true, the infrastructure is using granular maintenance scheduling preference.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) IsSchedulingPolicyAssociated() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.BoolOutput {
		return v.IsSchedulingPolicyAssociated
	}).(pulumi.BoolOutput)
}

// Additional information about the current lifecycle state.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.LifecycleDetails
	}).(pulumi.StringOutput)
}

// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaintenanceSloStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.MaintenanceSloStatus
	}).(pulumi.StringOutput)
}

// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaintenanceWindows() ExadataInfrastructureConfigureExascaleManagementMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) ExadataInfrastructureConfigureExascaleManagementMaintenanceWindowArrayOutput {
		return v.MaintenanceWindows
	}).(ExadataInfrastructureConfigureExascaleManagementMaintenanceWindowArrayOutput)
}

// The total number of CPU cores available.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaxCpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.MaxCpuCount }).(pulumi.IntOutput)
}

// The total available DATA disk group size.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaxDataStorageInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.Float64Output {
		return v.MaxDataStorageInTbs
	}).(pulumi.Float64Output)
}

// The total local node storage available in GBs.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaxDbNodeStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput {
		return v.MaxDbNodeStorageInGbs
	}).(pulumi.IntOutput)
}

// The total memory available in GBs.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MaxMemoryInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.MaxMemoryInGbs }).(pulumi.IntOutput)
}

// The memory allocated in GBs.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MemorySizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.MemorySizeInGbs }).(pulumi.IntOutput)
}

// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MonthlyDbServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.MonthlyDbServerVersion
	}).(pulumi.StringOutput)
}

// The base64 encoded Multi-Rack configuration json file.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) MultiRackConfigurationFile() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.MultiRackConfigurationFile
	}).(pulumi.StringOutput)
}

// The netmask for the control plane network.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) NetworkBondingModeDetails() ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetailArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetailArrayOutput {
		return v.NetworkBondingModeDetails
	}).(ExadataInfrastructureConfigureExascaleManagementNetworkBondingModeDetailArrayOutput)
}

// The list of NTP server IP addresses. Maximum of 3 allowed.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringArrayOutput {
		return v.NtpServers
	}).(pulumi.StringArrayOutput)
}

// The serial number for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) RackSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.RackSerialNumber
	}).(pulumi.StringOutput)
}

// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.Shape }).(pulumi.StringOutput)
}

// The current lifecycle state of the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The number of Exadata storage servers for the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) StorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.StorageCount }).(pulumi.IntOutput)
}

// The software version of the storage servers (cells) in the Exadata infrastructure.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) StorageServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput {
		return v.StorageServerVersion
	}).(pulumi.StringOutput)
}

// The date and time the Exadata infrastructure was created.
func (o ExadataInfrastructureConfigureExascaleManagementOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
func (o ExadataInfrastructureConfigureExascaleManagementOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// Storage size needed for Exascale in GBs.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ExadataInfrastructureConfigureExascaleManagementOutput) TotalStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *ExadataInfrastructureConfigureExascaleManagement) pulumi.IntOutput { return v.TotalStorageInGbs }).(pulumi.IntOutput)
}

type ExadataInfrastructureConfigureExascaleManagementArrayOutput struct{ *pulumi.OutputState }

func (ExadataInfrastructureConfigureExascaleManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (o ExadataInfrastructureConfigureExascaleManagementArrayOutput) ToExadataInfrastructureConfigureExascaleManagementArrayOutput() ExadataInfrastructureConfigureExascaleManagementArrayOutput {
	return o
}

func (o ExadataInfrastructureConfigureExascaleManagementArrayOutput) ToExadataInfrastructureConfigureExascaleManagementArrayOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementArrayOutput {
	return o
}

func (o ExadataInfrastructureConfigureExascaleManagementArrayOutput) Index(i pulumi.IntInput) ExadataInfrastructureConfigureExascaleManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExadataInfrastructureConfigureExascaleManagement {
		return vs[0].([]*ExadataInfrastructureConfigureExascaleManagement)[vs[1].(int)]
	}).(ExadataInfrastructureConfigureExascaleManagementOutput)
}

type ExadataInfrastructureConfigureExascaleManagementMapOutput struct{ *pulumi.OutputState }

func (ExadataInfrastructureConfigureExascaleManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExadataInfrastructureConfigureExascaleManagement)(nil)).Elem()
}

func (o ExadataInfrastructureConfigureExascaleManagementMapOutput) ToExadataInfrastructureConfigureExascaleManagementMapOutput() ExadataInfrastructureConfigureExascaleManagementMapOutput {
	return o
}

func (o ExadataInfrastructureConfigureExascaleManagementMapOutput) ToExadataInfrastructureConfigureExascaleManagementMapOutputWithContext(ctx context.Context) ExadataInfrastructureConfigureExascaleManagementMapOutput {
	return o
}

func (o ExadataInfrastructureConfigureExascaleManagementMapOutput) MapIndex(k pulumi.StringInput) ExadataInfrastructureConfigureExascaleManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExadataInfrastructureConfigureExascaleManagement {
		return vs[0].(map[string]*ExadataInfrastructureConfigureExascaleManagement)[vs[1].(string)]
	}).(ExadataInfrastructureConfigureExascaleManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExadataInfrastructureConfigureExascaleManagementInput)(nil)).Elem(), &ExadataInfrastructureConfigureExascaleManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExadataInfrastructureConfigureExascaleManagementArrayInput)(nil)).Elem(), ExadataInfrastructureConfigureExascaleManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExadataInfrastructureConfigureExascaleManagementMapInput)(nil)).Elem(), ExadataInfrastructureConfigureExascaleManagementMap{})
	pulumi.RegisterOutputType(ExadataInfrastructureConfigureExascaleManagementOutput{})
	pulumi.RegisterOutputType(ExadataInfrastructureConfigureExascaleManagementArrayOutput{})
	pulumi.RegisterOutputType(ExadataInfrastructureConfigureExascaleManagementMapOutput{})
}
