// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Execution Window resource in Oracle Cloud Infrastructure Database service.
//
// Creates an execution window resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.NewExecutionWindow(ctx, "test_execution_window", &database.ExecutionWindowArgs{
//				CompartmentId:        pulumi.Any(compartmentId),
//				ExecutionResourceId:  pulumi.Any(testResource.Id),
//				TimeScheduled:        pulumi.Any(executionWindowTimeScheduled),
//				WindowDurationInMins: pulumi.Any(executionWindowWindowDurationInMins),
//				DefinedTags:          pulumi.Any(executionWindowDefinedTags),
//				FreeformTags: pulumi.StringMap{
//					"Department": pulumi.String("Finance"),
//				},
//				IsEnforcedDuration: pulumi.Any(executionWindowIsEnforcedDuration),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExecutionWindows can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Database/executionWindow:ExecutionWindow test_execution_window "id"
// ```
type ExecutionWindow struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// Description of the execution window.
	Description pulumi.StringOutput `pulumi:"description"`
	// The user-friendly name for the execution window. The name does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The estimated time of the execution window in minutes.
	EstimatedTimeInMins pulumi.IntOutput `pulumi:"estimatedTimeInMins"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId pulumi.StringOutput `pulumi:"executionResourceId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration pulumi.BoolOutput `pulumi:"isEnforcedDuration"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
	LifecycleSubstate pulumi.StringOutput `pulumi:"lifecycleSubstate"`
	// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the execution window was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time that the execution window ended.
	TimeEnded pulumi.StringOutput `pulumi:"timeEnded"`
	// (Updatable) The scheduled start date and time of the execution window.
	TimeScheduled pulumi.StringOutput `pulumi:"timeScheduled"`
	// The date and time that the execution window was started.
	TimeStarted pulumi.StringOutput `pulumi:"timeStarted"`
	// The last date and time that the execution window was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The total time taken by corresponding resource activity in minutes.
	TotalTimeTakenInMins pulumi.IntOutput `pulumi:"totalTimeTakenInMins"`
	// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WindowDurationInMins pulumi.IntOutput `pulumi:"windowDurationInMins"`
	// The execution window is of PLANNED or UNPLANNED type.
	WindowType pulumi.StringOutput `pulumi:"windowType"`
}

// NewExecutionWindow registers a new resource with the given unique name, arguments, and options.
func NewExecutionWindow(ctx *pulumi.Context,
	name string, args *ExecutionWindowArgs, opts ...pulumi.ResourceOption) (*ExecutionWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ExecutionResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionResourceId'")
	}
	if args.TimeScheduled == nil {
		return nil, errors.New("invalid value for required argument 'TimeScheduled'")
	}
	if args.WindowDurationInMins == nil {
		return nil, errors.New("invalid value for required argument 'WindowDurationInMins'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExecutionWindow
	err := ctx.RegisterResource("oci:Database/executionWindow:ExecutionWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecutionWindow gets an existing ExecutionWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecutionWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecutionWindowState, opts ...pulumi.ResourceOption) (*ExecutionWindow, error) {
	var resource ExecutionWindow
	err := ctx.ReadResource("oci:Database/executionWindow:ExecutionWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExecutionWindow resources.
type executionWindowState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Description of the execution window.
	Description *string `pulumi:"description"`
	// The user-friendly name for the execution window. The name does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The estimated time of the execution window in minutes.
	EstimatedTimeInMins *int `pulumi:"estimatedTimeInMins"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId *string `pulumi:"executionResourceId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration *bool `pulumi:"isEnforcedDuration"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
	LifecycleSubstate *string `pulumi:"lifecycleSubstate"`
	// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
	State *string `pulumi:"state"`
	// The date and time the execution window was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time that the execution window ended.
	TimeEnded *string `pulumi:"timeEnded"`
	// (Updatable) The scheduled start date and time of the execution window.
	TimeScheduled *string `pulumi:"timeScheduled"`
	// The date and time that the execution window was started.
	TimeStarted *string `pulumi:"timeStarted"`
	// The last date and time that the execution window was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The total time taken by corresponding resource activity in minutes.
	TotalTimeTakenInMins *int `pulumi:"totalTimeTakenInMins"`
	// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WindowDurationInMins *int `pulumi:"windowDurationInMins"`
	// The execution window is of PLANNED or UNPLANNED type.
	WindowType *string `pulumi:"windowType"`
}

type ExecutionWindowState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// Description of the execution window.
	Description pulumi.StringPtrInput
	// The user-friendly name for the execution window. The name does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// The estimated time of the execution window in minutes.
	EstimatedTimeInMins pulumi.IntPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration pulumi.BoolPtrInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
	LifecycleSubstate pulumi.StringPtrInput
	// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
	State pulumi.StringPtrInput
	// The date and time the execution window was created.
	TimeCreated pulumi.StringPtrInput
	// The date and time that the execution window ended.
	TimeEnded pulumi.StringPtrInput
	// (Updatable) The scheduled start date and time of the execution window.
	TimeScheduled pulumi.StringPtrInput
	// The date and time that the execution window was started.
	TimeStarted pulumi.StringPtrInput
	// The last date and time that the execution window was updated.
	TimeUpdated pulumi.StringPtrInput
	// The total time taken by corresponding resource activity in minutes.
	TotalTimeTakenInMins pulumi.IntPtrInput
	// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WindowDurationInMins pulumi.IntPtrInput
	// The execution window is of PLANNED or UNPLANNED type.
	WindowType pulumi.StringPtrInput
}

func (ExecutionWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*executionWindowState)(nil)).Elem()
}

type executionWindowArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId string `pulumi:"executionResourceId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration *bool `pulumi:"isEnforcedDuration"`
	// (Updatable) The scheduled start date and time of the execution window.
	TimeScheduled string `pulumi:"timeScheduled"`
	// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WindowDurationInMins int `pulumi:"windowDurationInMins"`
}

// The set of arguments for constructing a ExecutionWindow resource.
type ExecutionWindowArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration pulumi.BoolPtrInput
	// (Updatable) The scheduled start date and time of the execution window.
	TimeScheduled pulumi.StringInput
	// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WindowDurationInMins pulumi.IntInput
}

func (ExecutionWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executionWindowArgs)(nil)).Elem()
}

type ExecutionWindowInput interface {
	pulumi.Input

	ToExecutionWindowOutput() ExecutionWindowOutput
	ToExecutionWindowOutputWithContext(ctx context.Context) ExecutionWindowOutput
}

func (*ExecutionWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionWindow)(nil)).Elem()
}

func (i *ExecutionWindow) ToExecutionWindowOutput() ExecutionWindowOutput {
	return i.ToExecutionWindowOutputWithContext(context.Background())
}

func (i *ExecutionWindow) ToExecutionWindowOutputWithContext(ctx context.Context) ExecutionWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionWindowOutput)
}

// ExecutionWindowArrayInput is an input type that accepts ExecutionWindowArray and ExecutionWindowArrayOutput values.
// You can construct a concrete instance of `ExecutionWindowArrayInput` via:
//
//	ExecutionWindowArray{ ExecutionWindowArgs{...} }
type ExecutionWindowArrayInput interface {
	pulumi.Input

	ToExecutionWindowArrayOutput() ExecutionWindowArrayOutput
	ToExecutionWindowArrayOutputWithContext(context.Context) ExecutionWindowArrayOutput
}

type ExecutionWindowArray []ExecutionWindowInput

func (ExecutionWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExecutionWindow)(nil)).Elem()
}

func (i ExecutionWindowArray) ToExecutionWindowArrayOutput() ExecutionWindowArrayOutput {
	return i.ToExecutionWindowArrayOutputWithContext(context.Background())
}

func (i ExecutionWindowArray) ToExecutionWindowArrayOutputWithContext(ctx context.Context) ExecutionWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionWindowArrayOutput)
}

// ExecutionWindowMapInput is an input type that accepts ExecutionWindowMap and ExecutionWindowMapOutput values.
// You can construct a concrete instance of `ExecutionWindowMapInput` via:
//
//	ExecutionWindowMap{ "key": ExecutionWindowArgs{...} }
type ExecutionWindowMapInput interface {
	pulumi.Input

	ToExecutionWindowMapOutput() ExecutionWindowMapOutput
	ToExecutionWindowMapOutputWithContext(context.Context) ExecutionWindowMapOutput
}

type ExecutionWindowMap map[string]ExecutionWindowInput

func (ExecutionWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExecutionWindow)(nil)).Elem()
}

func (i ExecutionWindowMap) ToExecutionWindowMapOutput() ExecutionWindowMapOutput {
	return i.ToExecutionWindowMapOutputWithContext(context.Background())
}

func (i ExecutionWindowMap) ToExecutionWindowMapOutputWithContext(ctx context.Context) ExecutionWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionWindowMapOutput)
}

type ExecutionWindowOutput struct{ *pulumi.OutputState }

func (ExecutionWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionWindow)(nil)).Elem()
}

func (o ExecutionWindowOutput) ToExecutionWindowOutput() ExecutionWindowOutput {
	return o
}

func (o ExecutionWindowOutput) ToExecutionWindowOutputWithContext(ctx context.Context) ExecutionWindowOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o ExecutionWindowOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o ExecutionWindowOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Description of the execution window.
func (o ExecutionWindowOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The user-friendly name for the execution window. The name does not need to be unique.
func (o ExecutionWindowOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The estimated time of the execution window in minutes.
func (o ExecutionWindowOutput) EstimatedTimeInMins() pulumi.IntOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.IntOutput { return v.EstimatedTimeInMins }).(pulumi.IntOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
func (o ExecutionWindowOutput) ExecutionResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.ExecutionResourceId }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o ExecutionWindowOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
func (o ExecutionWindowOutput) IsEnforcedDuration() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.BoolOutput { return v.IsEnforcedDuration }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycle state.
func (o ExecutionWindowOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
func (o ExecutionWindowOutput) LifecycleSubstate() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.LifecycleSubstate }).(pulumi.StringOutput)
}

// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
func (o ExecutionWindowOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the execution window was created.
func (o ExecutionWindowOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time that the execution window ended.
func (o ExecutionWindowOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.TimeEnded }).(pulumi.StringOutput)
}

// (Updatable) The scheduled start date and time of the execution window.
func (o ExecutionWindowOutput) TimeScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.TimeScheduled }).(pulumi.StringOutput)
}

// The date and time that the execution window was started.
func (o ExecutionWindowOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.TimeStarted }).(pulumi.StringOutput)
}

// The last date and time that the execution window was updated.
func (o ExecutionWindowOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The total time taken by corresponding resource activity in minutes.
func (o ExecutionWindowOutput) TotalTimeTakenInMins() pulumi.IntOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.IntOutput { return v.TotalTimeTakenInMins }).(pulumi.IntOutput)
}

// (Updatable) Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ExecutionWindowOutput) WindowDurationInMins() pulumi.IntOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.IntOutput { return v.WindowDurationInMins }).(pulumi.IntOutput)
}

// The execution window is of PLANNED or UNPLANNED type.
func (o ExecutionWindowOutput) WindowType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecutionWindow) pulumi.StringOutput { return v.WindowType }).(pulumi.StringOutput)
}

type ExecutionWindowArrayOutput struct{ *pulumi.OutputState }

func (ExecutionWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExecutionWindow)(nil)).Elem()
}

func (o ExecutionWindowArrayOutput) ToExecutionWindowArrayOutput() ExecutionWindowArrayOutput {
	return o
}

func (o ExecutionWindowArrayOutput) ToExecutionWindowArrayOutputWithContext(ctx context.Context) ExecutionWindowArrayOutput {
	return o
}

func (o ExecutionWindowArrayOutput) Index(i pulumi.IntInput) ExecutionWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExecutionWindow {
		return vs[0].([]*ExecutionWindow)[vs[1].(int)]
	}).(ExecutionWindowOutput)
}

type ExecutionWindowMapOutput struct{ *pulumi.OutputState }

func (ExecutionWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExecutionWindow)(nil)).Elem()
}

func (o ExecutionWindowMapOutput) ToExecutionWindowMapOutput() ExecutionWindowMapOutput {
	return o
}

func (o ExecutionWindowMapOutput) ToExecutionWindowMapOutputWithContext(ctx context.Context) ExecutionWindowMapOutput {
	return o
}

func (o ExecutionWindowMapOutput) MapIndex(k pulumi.StringInput) ExecutionWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExecutionWindow {
		return vs[0].(map[string]*ExecutionWindow)[vs[1].(string)]
	}).(ExecutionWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionWindowInput)(nil)).Elem(), &ExecutionWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionWindowArrayInput)(nil)).Elem(), ExecutionWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionWindowMapInput)(nil)).Elem(), ExecutionWindowMap{})
	pulumi.RegisterOutputType(ExecutionWindowOutput{})
	pulumi.RegisterOutputType(ExecutionWindowArrayOutput{})
	pulumi.RegisterOutputType(ExecutionWindowMapOutput{})
}
