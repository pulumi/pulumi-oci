// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External Container Database Management resource in Oracle Cloud Infrastructure Database service.
//
// Enables Database Management Service for the external container database.
// For more information about the Database Management Service, see
// [Database Management Service](https://docs.cloud.oracle.com/iaas/Content/ExternalDatabase/Concepts/databasemanagementservice.htm).
//
// ## Import
//
// Import is not supported for this resource.
type ExternalContainerDatabaseManagement struct {
	pulumi.CustomResourceState

	EnableManagement pulumi.BoolOutput `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringOutput `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringOutput `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
}

// NewExternalContainerDatabaseManagement registers a new resource with the given unique name, arguments, and options.
func NewExternalContainerDatabaseManagement(ctx *pulumi.Context,
	name string, args *ExternalContainerDatabaseManagementArgs, opts ...pulumi.ResourceOption) (*ExternalContainerDatabaseManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableManagement'")
	}
	if args.ExternalContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalContainerDatabaseId'")
	}
	if args.ExternalDatabaseConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalDatabaseConnectorId'")
	}
	var resource ExternalContainerDatabaseManagement
	err := ctx.RegisterResource("oci:Database/externalContainerDatabaseManagement:ExternalContainerDatabaseManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalContainerDatabaseManagement gets an existing ExternalContainerDatabaseManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalContainerDatabaseManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalContainerDatabaseManagementState, opts ...pulumi.ResourceOption) (*ExternalContainerDatabaseManagement, error) {
	var resource ExternalContainerDatabaseManagement
	err := ctx.ReadResource("oci:Database/externalContainerDatabaseManagement:ExternalContainerDatabaseManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalContainerDatabaseManagement resources.
type externalContainerDatabaseManagementState struct {
	EnableManagement *bool `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId *string `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId *string `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

type ExternalContainerDatabaseManagementState struct {
	EnableManagement pulumi.BoolPtrInput
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringPtrInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (ExternalContainerDatabaseManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalContainerDatabaseManagementState)(nil)).Elem()
}

type externalContainerDatabaseManagementArgs struct {
	EnableManagement bool `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId string `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId string `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

// The set of arguments for constructing a ExternalContainerDatabaseManagement resource.
type ExternalContainerDatabaseManagementArgs struct {
	EnableManagement pulumi.BoolInput
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (ExternalContainerDatabaseManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalContainerDatabaseManagementArgs)(nil)).Elem()
}

type ExternalContainerDatabaseManagementInput interface {
	pulumi.Input

	ToExternalContainerDatabaseManagementOutput() ExternalContainerDatabaseManagementOutput
	ToExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementOutput
}

func (*ExternalContainerDatabaseManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (i *ExternalContainerDatabaseManagement) ToExternalContainerDatabaseManagementOutput() ExternalContainerDatabaseManagementOutput {
	return i.ToExternalContainerDatabaseManagementOutputWithContext(context.Background())
}

func (i *ExternalContainerDatabaseManagement) ToExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalContainerDatabaseManagementOutput)
}

// ExternalContainerDatabaseManagementArrayInput is an input type that accepts ExternalContainerDatabaseManagementArray and ExternalContainerDatabaseManagementArrayOutput values.
// You can construct a concrete instance of `ExternalContainerDatabaseManagementArrayInput` via:
//
//	ExternalContainerDatabaseManagementArray{ ExternalContainerDatabaseManagementArgs{...} }
type ExternalContainerDatabaseManagementArrayInput interface {
	pulumi.Input

	ToExternalContainerDatabaseManagementArrayOutput() ExternalContainerDatabaseManagementArrayOutput
	ToExternalContainerDatabaseManagementArrayOutputWithContext(context.Context) ExternalContainerDatabaseManagementArrayOutput
}

type ExternalContainerDatabaseManagementArray []ExternalContainerDatabaseManagementInput

func (ExternalContainerDatabaseManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (i ExternalContainerDatabaseManagementArray) ToExternalContainerDatabaseManagementArrayOutput() ExternalContainerDatabaseManagementArrayOutput {
	return i.ToExternalContainerDatabaseManagementArrayOutputWithContext(context.Background())
}

func (i ExternalContainerDatabaseManagementArray) ToExternalContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalContainerDatabaseManagementArrayOutput)
}

// ExternalContainerDatabaseManagementMapInput is an input type that accepts ExternalContainerDatabaseManagementMap and ExternalContainerDatabaseManagementMapOutput values.
// You can construct a concrete instance of `ExternalContainerDatabaseManagementMapInput` via:
//
//	ExternalContainerDatabaseManagementMap{ "key": ExternalContainerDatabaseManagementArgs{...} }
type ExternalContainerDatabaseManagementMapInput interface {
	pulumi.Input

	ToExternalContainerDatabaseManagementMapOutput() ExternalContainerDatabaseManagementMapOutput
	ToExternalContainerDatabaseManagementMapOutputWithContext(context.Context) ExternalContainerDatabaseManagementMapOutput
}

type ExternalContainerDatabaseManagementMap map[string]ExternalContainerDatabaseManagementInput

func (ExternalContainerDatabaseManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (i ExternalContainerDatabaseManagementMap) ToExternalContainerDatabaseManagementMapOutput() ExternalContainerDatabaseManagementMapOutput {
	return i.ToExternalContainerDatabaseManagementMapOutputWithContext(context.Background())
}

func (i ExternalContainerDatabaseManagementMap) ToExternalContainerDatabaseManagementMapOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalContainerDatabaseManagementMapOutput)
}

type ExternalContainerDatabaseManagementOutput struct{ *pulumi.OutputState }

func (ExternalContainerDatabaseManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalContainerDatabaseManagementOutput) ToExternalContainerDatabaseManagementOutput() ExternalContainerDatabaseManagementOutput {
	return o
}

func (o ExternalContainerDatabaseManagementOutput) ToExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementOutput {
	return o
}

func (o ExternalContainerDatabaseManagementOutput) EnableManagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExternalContainerDatabaseManagement) pulumi.BoolOutput { return v.EnableManagement }).(pulumi.BoolOutput)
}

// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o ExternalContainerDatabaseManagementOutput) ExternalContainerDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalContainerDatabaseManagement) pulumi.StringOutput { return v.ExternalContainerDatabaseId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
func (o ExternalContainerDatabaseManagementOutput) ExternalDatabaseConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalContainerDatabaseManagement) pulumi.StringOutput { return v.ExternalDatabaseConnectorId }).(pulumi.StringOutput)
}

// The Oracle license model that applies to the external database. Required only for enabling database management.
func (o ExternalContainerDatabaseManagementOutput) LicenseModel() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalContainerDatabaseManagement) pulumi.StringOutput { return v.LicenseModel }).(pulumi.StringOutput)
}

type ExternalContainerDatabaseManagementArrayOutput struct{ *pulumi.OutputState }

func (ExternalContainerDatabaseManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalContainerDatabaseManagementArrayOutput) ToExternalContainerDatabaseManagementArrayOutput() ExternalContainerDatabaseManagementArrayOutput {
	return o
}

func (o ExternalContainerDatabaseManagementArrayOutput) ToExternalContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementArrayOutput {
	return o
}

func (o ExternalContainerDatabaseManagementArrayOutput) Index(i pulumi.IntInput) ExternalContainerDatabaseManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalContainerDatabaseManagement {
		return vs[0].([]*ExternalContainerDatabaseManagement)[vs[1].(int)]
	}).(ExternalContainerDatabaseManagementOutput)
}

type ExternalContainerDatabaseManagementMapOutput struct{ *pulumi.OutputState }

func (ExternalContainerDatabaseManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalContainerDatabaseManagementMapOutput) ToExternalContainerDatabaseManagementMapOutput() ExternalContainerDatabaseManagementMapOutput {
	return o
}

func (o ExternalContainerDatabaseManagementMapOutput) ToExternalContainerDatabaseManagementMapOutputWithContext(ctx context.Context) ExternalContainerDatabaseManagementMapOutput {
	return o
}

func (o ExternalContainerDatabaseManagementMapOutput) MapIndex(k pulumi.StringInput) ExternalContainerDatabaseManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalContainerDatabaseManagement {
		return vs[0].(map[string]*ExternalContainerDatabaseManagement)[vs[1].(string)]
	}).(ExternalContainerDatabaseManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalContainerDatabaseManagementInput)(nil)).Elem(), &ExternalContainerDatabaseManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalContainerDatabaseManagementArrayInput)(nil)).Elem(), ExternalContainerDatabaseManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalContainerDatabaseManagementMapInput)(nil)).Elem(), ExternalContainerDatabaseManagementMap{})
	pulumi.RegisterOutputType(ExternalContainerDatabaseManagementOutput{})
	pulumi.RegisterOutputType(ExternalContainerDatabaseManagementArrayOutput{})
	pulumi.RegisterOutputType(ExternalContainerDatabaseManagementMapOutput{})
}
