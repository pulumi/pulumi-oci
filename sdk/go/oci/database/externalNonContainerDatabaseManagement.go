// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External Non Container Database Management resource in Oracle Cloud Infrastructure Database service.
//
// Enable Database Management Service for the external non-container database.
// For more information about the Database Management Service, see
// [Database Management Service](https://docs.cloud.oracle.com/iaas/Content/ExternalDatabase/Concepts/databasemanagementservice.htm).
//
// ## Import
//
// Import is not supported for this resource.
type ExternalNonContainerDatabaseManagement struct {
	pulumi.CustomResourceState

	EnableManagement pulumi.BoolOutput `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringOutput `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringOutput `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
}

// NewExternalNonContainerDatabaseManagement registers a new resource with the given unique name, arguments, and options.
func NewExternalNonContainerDatabaseManagement(ctx *pulumi.Context,
	name string, args *ExternalNonContainerDatabaseManagementArgs, opts ...pulumi.ResourceOption) (*ExternalNonContainerDatabaseManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableManagement'")
	}
	if args.ExternalDatabaseConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalDatabaseConnectorId'")
	}
	if args.ExternalNonContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalNonContainerDatabaseId'")
	}
	var resource ExternalNonContainerDatabaseManagement
	err := ctx.RegisterResource("oci:Database/externalNonContainerDatabaseManagement:ExternalNonContainerDatabaseManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalNonContainerDatabaseManagement gets an existing ExternalNonContainerDatabaseManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalNonContainerDatabaseManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalNonContainerDatabaseManagementState, opts ...pulumi.ResourceOption) (*ExternalNonContainerDatabaseManagement, error) {
	var resource ExternalNonContainerDatabaseManagement
	err := ctx.ReadResource("oci:Database/externalNonContainerDatabaseManagement:ExternalNonContainerDatabaseManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalNonContainerDatabaseManagement resources.
type externalNonContainerDatabaseManagementState struct {
	EnableManagement *bool `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId *string `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId *string `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

type ExternalNonContainerDatabaseManagementState struct {
	EnableManagement pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringPtrInput
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringPtrInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (ExternalNonContainerDatabaseManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNonContainerDatabaseManagementState)(nil)).Elem()
}

type externalNonContainerDatabaseManagementArgs struct {
	EnableManagement bool `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId string `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId string `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

// The set of arguments for constructing a ExternalNonContainerDatabaseManagement resource.
type ExternalNonContainerDatabaseManagementArgs struct {
	EnableManagement pulumi.BoolInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringInput
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (ExternalNonContainerDatabaseManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalNonContainerDatabaseManagementArgs)(nil)).Elem()
}

type ExternalNonContainerDatabaseManagementInput interface {
	pulumi.Input

	ToExternalNonContainerDatabaseManagementOutput() ExternalNonContainerDatabaseManagementOutput
	ToExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementOutput
}

func (*ExternalNonContainerDatabaseManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (i *ExternalNonContainerDatabaseManagement) ToExternalNonContainerDatabaseManagementOutput() ExternalNonContainerDatabaseManagementOutput {
	return i.ToExternalNonContainerDatabaseManagementOutputWithContext(context.Background())
}

func (i *ExternalNonContainerDatabaseManagement) ToExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNonContainerDatabaseManagementOutput)
}

// ExternalNonContainerDatabaseManagementArrayInput is an input type that accepts ExternalNonContainerDatabaseManagementArray and ExternalNonContainerDatabaseManagementArrayOutput values.
// You can construct a concrete instance of `ExternalNonContainerDatabaseManagementArrayInput` via:
//
//	ExternalNonContainerDatabaseManagementArray{ ExternalNonContainerDatabaseManagementArgs{...} }
type ExternalNonContainerDatabaseManagementArrayInput interface {
	pulumi.Input

	ToExternalNonContainerDatabaseManagementArrayOutput() ExternalNonContainerDatabaseManagementArrayOutput
	ToExternalNonContainerDatabaseManagementArrayOutputWithContext(context.Context) ExternalNonContainerDatabaseManagementArrayOutput
}

type ExternalNonContainerDatabaseManagementArray []ExternalNonContainerDatabaseManagementInput

func (ExternalNonContainerDatabaseManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (i ExternalNonContainerDatabaseManagementArray) ToExternalNonContainerDatabaseManagementArrayOutput() ExternalNonContainerDatabaseManagementArrayOutput {
	return i.ToExternalNonContainerDatabaseManagementArrayOutputWithContext(context.Background())
}

func (i ExternalNonContainerDatabaseManagementArray) ToExternalNonContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNonContainerDatabaseManagementArrayOutput)
}

// ExternalNonContainerDatabaseManagementMapInput is an input type that accepts ExternalNonContainerDatabaseManagementMap and ExternalNonContainerDatabaseManagementMapOutput values.
// You can construct a concrete instance of `ExternalNonContainerDatabaseManagementMapInput` via:
//
//	ExternalNonContainerDatabaseManagementMap{ "key": ExternalNonContainerDatabaseManagementArgs{...} }
type ExternalNonContainerDatabaseManagementMapInput interface {
	pulumi.Input

	ToExternalNonContainerDatabaseManagementMapOutput() ExternalNonContainerDatabaseManagementMapOutput
	ToExternalNonContainerDatabaseManagementMapOutputWithContext(context.Context) ExternalNonContainerDatabaseManagementMapOutput
}

type ExternalNonContainerDatabaseManagementMap map[string]ExternalNonContainerDatabaseManagementInput

func (ExternalNonContainerDatabaseManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (i ExternalNonContainerDatabaseManagementMap) ToExternalNonContainerDatabaseManagementMapOutput() ExternalNonContainerDatabaseManagementMapOutput {
	return i.ToExternalNonContainerDatabaseManagementMapOutputWithContext(context.Background())
}

func (i ExternalNonContainerDatabaseManagementMap) ToExternalNonContainerDatabaseManagementMapOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalNonContainerDatabaseManagementMapOutput)
}

type ExternalNonContainerDatabaseManagementOutput struct{ *pulumi.OutputState }

func (ExternalNonContainerDatabaseManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalNonContainerDatabaseManagementOutput) ToExternalNonContainerDatabaseManagementOutput() ExternalNonContainerDatabaseManagementOutput {
	return o
}

func (o ExternalNonContainerDatabaseManagementOutput) ToExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementOutput {
	return o
}

type ExternalNonContainerDatabaseManagementArrayOutput struct{ *pulumi.OutputState }

func (ExternalNonContainerDatabaseManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalNonContainerDatabaseManagementArrayOutput) ToExternalNonContainerDatabaseManagementArrayOutput() ExternalNonContainerDatabaseManagementArrayOutput {
	return o
}

func (o ExternalNonContainerDatabaseManagementArrayOutput) ToExternalNonContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementArrayOutput {
	return o
}

func (o ExternalNonContainerDatabaseManagementArrayOutput) Index(i pulumi.IntInput) ExternalNonContainerDatabaseManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalNonContainerDatabaseManagement {
		return vs[0].([]*ExternalNonContainerDatabaseManagement)[vs[1].(int)]
	}).(ExternalNonContainerDatabaseManagementOutput)
}

type ExternalNonContainerDatabaseManagementMapOutput struct{ *pulumi.OutputState }

func (ExternalNonContainerDatabaseManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (o ExternalNonContainerDatabaseManagementMapOutput) ToExternalNonContainerDatabaseManagementMapOutput() ExternalNonContainerDatabaseManagementMapOutput {
	return o
}

func (o ExternalNonContainerDatabaseManagementMapOutput) ToExternalNonContainerDatabaseManagementMapOutputWithContext(ctx context.Context) ExternalNonContainerDatabaseManagementMapOutput {
	return o
}

func (o ExternalNonContainerDatabaseManagementMapOutput) MapIndex(k pulumi.StringInput) ExternalNonContainerDatabaseManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalNonContainerDatabaseManagement {
		return vs[0].(map[string]*ExternalNonContainerDatabaseManagement)[vs[1].(string)]
	}).(ExternalNonContainerDatabaseManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNonContainerDatabaseManagementInput)(nil)).Elem(), &ExternalNonContainerDatabaseManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNonContainerDatabaseManagementArrayInput)(nil)).Elem(), ExternalNonContainerDatabaseManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalNonContainerDatabaseManagementMapInput)(nil)).Elem(), ExternalNonContainerDatabaseManagementMap{})
	pulumi.RegisterOutputType(ExternalNonContainerDatabaseManagementOutput{})
	pulumi.RegisterOutputType(ExternalNonContainerDatabaseManagementArrayOutput{})
	pulumi.RegisterOutputType(ExternalNonContainerDatabaseManagementMapOutput{})
}
