// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Database Pdb Conversion History Entry resource in Oracle Cloud Infrastructure Database service.
//
// Gets the details of operations performed to convert the specified database from non-container (non-CDB) to pluggable (PDB).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.GetDatabasePdbConversionHistoryEntry(ctx, &database.GetDatabasePdbConversionHistoryEntryArgs{
//				DatabaseId:                  oci_database_database.Test_database.Id,
//				PdbConversionHistoryEntryId: oci_database_pdb_conversion_history_entry.Test_pdb_conversion_history_entry.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDatabasePdbConversionHistoryEntry(ctx *pulumi.Context, args *GetDatabasePdbConversionHistoryEntryArgs, opts ...pulumi.InvokeOption) (*GetDatabasePdbConversionHistoryEntryResult, error) {
	var rv GetDatabasePdbConversionHistoryEntryResult
	err := ctx.Invoke("oci:Database/getDatabasePdbConversionHistoryEntry:getDatabasePdbConversionHistoryEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabasePdbConversionHistoryEntry.
type GetDatabasePdbConversionHistoryEntryArgs struct {
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId string `pulumi:"databaseId"`
	// The database conversion history [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PdbConversionHistoryEntryId string `pulumi:"pdbConversionHistoryEntryId"`
}

// A collection of values returned by getDatabasePdbConversionHistoryEntry.
type GetDatabasePdbConversionHistoryEntryResult struct {
	// The operations used to convert a non-container database to a pluggable database.
	// * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
	// * Use `CONVERT` to convert a non-container database into a pluggable database.
	// * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
	// * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
	Action string `pulumi:"action"`
	// Additional container database parameter.
	AdditionalCdbParams string `pulumi:"additionalCdbParams"`
	// The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
	CdbName    string `pulumi:"cdbName"`
	DatabaseId string `pulumi:"databaseId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Additional information about the current lifecycle state for the conversion operation.
	LifecycleDetails            string `pulumi:"lifecycleDetails"`
	PdbConversionHistoryEntryId string `pulumi:"pdbConversionHistoryEntryId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	SourceDatabaseId string `pulumi:"sourceDatabaseId"`
	// Status of an operation performed during the conversion of a non-container database to a pluggable database.
	State string `pulumi:"state"`
	// The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
	// * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
	Target string `pulumi:"target"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	TargetDatabaseId string `pulumi:"targetDatabaseId"`
	// The date and time when the database conversion operation ended.
	TimeEnded string `pulumi:"timeEnded"`
	// The date and time when the database conversion operation started.
	TimeStarted string `pulumi:"timeStarted"`
}

func GetDatabasePdbConversionHistoryEntryOutput(ctx *pulumi.Context, args GetDatabasePdbConversionHistoryEntryOutputArgs, opts ...pulumi.InvokeOption) GetDatabasePdbConversionHistoryEntryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDatabasePdbConversionHistoryEntryResult, error) {
			args := v.(GetDatabasePdbConversionHistoryEntryArgs)
			r, err := GetDatabasePdbConversionHistoryEntry(ctx, &args, opts...)
			var s GetDatabasePdbConversionHistoryEntryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDatabasePdbConversionHistoryEntryResultOutput)
}

// A collection of arguments for invoking getDatabasePdbConversionHistoryEntry.
type GetDatabasePdbConversionHistoryEntryOutputArgs struct {
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// The database conversion history [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PdbConversionHistoryEntryId pulumi.StringInput `pulumi:"pdbConversionHistoryEntryId"`
}

func (GetDatabasePdbConversionHistoryEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasePdbConversionHistoryEntryArgs)(nil)).Elem()
}

// A collection of values returned by getDatabasePdbConversionHistoryEntry.
type GetDatabasePdbConversionHistoryEntryResultOutput struct{ *pulumi.OutputState }

func (GetDatabasePdbConversionHistoryEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasePdbConversionHistoryEntryResult)(nil)).Elem()
}

func (o GetDatabasePdbConversionHistoryEntryResultOutput) ToGetDatabasePdbConversionHistoryEntryResultOutput() GetDatabasePdbConversionHistoryEntryResultOutput {
	return o
}

func (o GetDatabasePdbConversionHistoryEntryResultOutput) ToGetDatabasePdbConversionHistoryEntryResultOutputWithContext(ctx context.Context) GetDatabasePdbConversionHistoryEntryResultOutput {
	return o
}

// The operations used to convert a non-container database to a pluggable database.
// * Use `PRECHECK` to run a pre-check operation on non-container database prior to converting it into a pluggable database.
// * Use `CONVERT` to convert a non-container database into a pluggable database.
// * Use `SYNC` if the non-container database was manually converted into a pluggable database using the dbcli command-line utility. Databases may need to be converted manually if the CONVERT action fails when converting a non-container database using the API.
// * Use `SYNC_ROLLBACK` if the conversion of a non-container database into a pluggable database was manually rolled back using the dbcli command line utility. Conversions may need to be manually rolled back if the CONVERT action fails when converting a non-container database using the API.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.Action }).(pulumi.StringOutput)
}

// Additional container database parameter.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) AdditionalCdbParams() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.AdditionalCdbParams }).(pulumi.StringOutput)
}

// The database name. The name must begin with an alphabetic character and can contain a maximum of 8 alphanumeric characters. Special characters are not permitted. The database name must be unique in the tenancy.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) CdbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.CdbName }).(pulumi.StringOutput)
}

func (o GetDatabasePdbConversionHistoryEntryResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Additional information about the current lifecycle state for the conversion operation.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

func (o GetDatabasePdbConversionHistoryEntryResultOutput) PdbConversionHistoryEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.PdbConversionHistoryEntryId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) SourceDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.SourceDatabaseId }).(pulumi.StringOutput)
}

// Status of an operation performed during the conversion of a non-container database to a pluggable database.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.State }).(pulumi.StringOutput)
}

// The target container database of the pluggable database created by the database conversion operation. Currently, the database conversion operation only supports creating the pluggable database in a new container database.
// * Use `NEW_DATABASE` to specify that the pluggable database be created within a new container database in the same database home.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.Target }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) TargetDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.TargetDatabaseId }).(pulumi.StringOutput)
}

// The date and time when the database conversion operation ended.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.TimeEnded }).(pulumi.StringOutput)
}

// The date and time when the database conversion operation started.
func (o GetDatabasePdbConversionHistoryEntryResultOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePdbConversionHistoryEntryResult) string { return v.TimeStarted }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabasePdbConversionHistoryEntryResultOutput{})
}
