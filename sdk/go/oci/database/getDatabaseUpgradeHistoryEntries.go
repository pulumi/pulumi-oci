// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Database Upgrade History Entries in Oracle Cloud Infrastructure Database service.
//
// Gets the upgrade history for a specified database in a bare metal or virtual machine DB system.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetDatabaseUpgradeHistoryEntries(ctx, &database.GetDatabaseUpgradeHistoryEntriesArgs{
//				DatabaseId:    testDatabase.Id,
//				State:         pulumi.StringRef(databaseUpgradeHistoryEntryState),
//				UpgradeAction: pulumi.StringRef(databaseUpgradeHistoryEntryUpgradeAction),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDatabaseUpgradeHistoryEntries(ctx *pulumi.Context, args *GetDatabaseUpgradeHistoryEntriesArgs, opts ...pulumi.InvokeOption) (*GetDatabaseUpgradeHistoryEntriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatabaseUpgradeHistoryEntriesResult
	err := ctx.Invoke("oci:Database/getDatabaseUpgradeHistoryEntries:getDatabaseUpgradeHistoryEntries", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseUpgradeHistoryEntries.
type GetDatabaseUpgradeHistoryEntriesArgs struct {
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId string                                   `pulumi:"databaseId"`
	Filters    []GetDatabaseUpgradeHistoryEntriesFilter `pulumi:"filters"`
	// A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
	State *string `pulumi:"state"`
	// A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
	UpgradeAction *string `pulumi:"upgradeAction"`
}

// A collection of values returned by getDatabaseUpgradeHistoryEntries.
type GetDatabaseUpgradeHistoryEntriesResult struct {
	DatabaseId string `pulumi:"databaseId"`
	// The list of database_upgrade_history_entries.
	DatabaseUpgradeHistoryEntries []GetDatabaseUpgradeHistoryEntriesDatabaseUpgradeHistoryEntry `pulumi:"databaseUpgradeHistoryEntries"`
	Filters                       []GetDatabaseUpgradeHistoryEntriesFilter                      `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
	State         *string `pulumi:"state"`
	UpgradeAction *string `pulumi:"upgradeAction"`
}

func GetDatabaseUpgradeHistoryEntriesOutput(ctx *pulumi.Context, args GetDatabaseUpgradeHistoryEntriesOutputArgs, opts ...pulumi.InvokeOption) GetDatabaseUpgradeHistoryEntriesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatabaseUpgradeHistoryEntriesResultOutput, error) {
			args := v.(GetDatabaseUpgradeHistoryEntriesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getDatabaseUpgradeHistoryEntries:getDatabaseUpgradeHistoryEntries", args, GetDatabaseUpgradeHistoryEntriesResultOutput{}, options).(GetDatabaseUpgradeHistoryEntriesResultOutput), nil
		}).(GetDatabaseUpgradeHistoryEntriesResultOutput)
}

// A collection of arguments for invoking getDatabaseUpgradeHistoryEntries.
type GetDatabaseUpgradeHistoryEntriesOutputArgs struct {
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DatabaseId pulumi.StringInput                               `pulumi:"databaseId"`
	Filters    GetDatabaseUpgradeHistoryEntriesFilterArrayInput `pulumi:"filters"`
	// A filter to return only upgradeHistoryEntries that match the given lifecycle state exactly.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return only upgradeHistoryEntries that match the specified Upgrade Action.
	UpgradeAction pulumi.StringPtrInput `pulumi:"upgradeAction"`
}

func (GetDatabaseUpgradeHistoryEntriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseUpgradeHistoryEntriesArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseUpgradeHistoryEntries.
type GetDatabaseUpgradeHistoryEntriesResultOutput struct{ *pulumi.OutputState }

func (GetDatabaseUpgradeHistoryEntriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseUpgradeHistoryEntriesResult)(nil)).Elem()
}

func (o GetDatabaseUpgradeHistoryEntriesResultOutput) ToGetDatabaseUpgradeHistoryEntriesResultOutput() GetDatabaseUpgradeHistoryEntriesResultOutput {
	return o
}

func (o GetDatabaseUpgradeHistoryEntriesResultOutput) ToGetDatabaseUpgradeHistoryEntriesResultOutputWithContext(ctx context.Context) GetDatabaseUpgradeHistoryEntriesResultOutput {
	return o
}

func (o GetDatabaseUpgradeHistoryEntriesResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// The list of database_upgrade_history_entries.
func (o GetDatabaseUpgradeHistoryEntriesResultOutput) DatabaseUpgradeHistoryEntries() GetDatabaseUpgradeHistoryEntriesDatabaseUpgradeHistoryEntryArrayOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) []GetDatabaseUpgradeHistoryEntriesDatabaseUpgradeHistoryEntry {
		return v.DatabaseUpgradeHistoryEntries
	}).(GetDatabaseUpgradeHistoryEntriesDatabaseUpgradeHistoryEntryArrayOutput)
}

func (o GetDatabaseUpgradeHistoryEntriesResultOutput) Filters() GetDatabaseUpgradeHistoryEntriesFilterArrayOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) []GetDatabaseUpgradeHistoryEntriesFilter {
		return v.Filters
	}).(GetDatabaseUpgradeHistoryEntriesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatabaseUpgradeHistoryEntriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Status of database upgrade history SUCCEEDED|IN_PROGRESS|FAILED.
func (o GetDatabaseUpgradeHistoryEntriesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o GetDatabaseUpgradeHistoryEntriesResultOutput) UpgradeAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabaseUpgradeHistoryEntriesResult) *string { return v.UpgradeAction }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabaseUpgradeHistoryEntriesResultOutput{})
}
