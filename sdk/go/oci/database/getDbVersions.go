// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Db Versions in Oracle Cloud Infrastructure Database service.
//
// Gets a list of supported Oracle Database versions.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.GetDbVersions(ctx, &database.GetDbVersionsArgs{
//				CompartmentId:                    _var.Compartment_id,
//				DbSystemId:                       pulumi.StringRef(oci_database_db_system.Test_db_system.Id),
//				DbSystemShape:                    pulumi.StringRef(_var.Db_version_db_system_shape),
//				IsDatabaseSoftwareImageSupported: pulumi.BoolRef(_var.Db_version_is_database_software_image_supported),
//				IsUpgradeSupported:               pulumi.BoolRef(_var.Db_version_is_upgrade_supported),
//				StorageManagement:                pulumi.StringRef(_var.Db_version_storage_management),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDbVersions(ctx *pulumi.Context, args *GetDbVersionsArgs, opts ...pulumi.InvokeOption) (*GetDbVersionsResult, error) {
	var rv GetDbVersionsResult
	err := ctx.Invoke("oci:Database/getDbVersions:getDbVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbVersions.
type GetDbVersionsArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
	DbSystemId *string `pulumi:"dbSystemId"`
	// If provided, filters the results to the set of database versions which are supported for the given shape.
	DbSystemShape *string               `pulumi:"dbSystemShape"`
	Filters       []GetDbVersionsFilter `pulumi:"filters"`
	// If true, filters the results to the set of Oracle Database versions that are supported for Oracle Cloud Infrastructure database software images.
	IsDatabaseSoftwareImageSupported *bool `pulumi:"isDatabaseSoftwareImageSupported"`
	// If provided, filters the results to the set of database versions which are supported for Upgrade.
	IsUpgradeSupported *bool `pulumi:"isUpgradeSupported"`
	// The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
	// * ASM specifies Oracle Automatic Storage Management
	// * LVM specifies logical volume manager, sometimes called logical disk manager.
	StorageManagement *string `pulumi:"storageManagement"`
}

// A collection of values returned by getDbVersions.
type GetDbVersionsResult struct {
	CompartmentId string  `pulumi:"compartmentId"`
	DbSystemId    *string `pulumi:"dbSystemId"`
	DbSystemShape *string `pulumi:"dbSystemShape"`
	// The list of db_versions.
	DbVersions []GetDbVersionsDbVersion `pulumi:"dbVersions"`
	Filters    []GetDbVersionsFilter    `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                               string `pulumi:"id"`
	IsDatabaseSoftwareImageSupported *bool  `pulumi:"isDatabaseSoftwareImageSupported"`
	// True if this version of the Oracle Database software is supported for Upgrade.
	IsUpgradeSupported *bool   `pulumi:"isUpgradeSupported"`
	StorageManagement  *string `pulumi:"storageManagement"`
}

func GetDbVersionsOutput(ctx *pulumi.Context, args GetDbVersionsOutputArgs, opts ...pulumi.InvokeOption) GetDbVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDbVersionsResult, error) {
			args := v.(GetDbVersionsArgs)
			r, err := GetDbVersions(ctx, &args, opts...)
			var s GetDbVersionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDbVersionsResultOutput)
}

// A collection of arguments for invoking getDbVersions.
type GetDbVersionsOutputArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The DB system [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). If provided, filters the results to the set of database versions which are supported for the DB system.
	DbSystemId pulumi.StringPtrInput `pulumi:"dbSystemId"`
	// If provided, filters the results to the set of database versions which are supported for the given shape.
	DbSystemShape pulumi.StringPtrInput         `pulumi:"dbSystemShape"`
	Filters       GetDbVersionsFilterArrayInput `pulumi:"filters"`
	// If true, filters the results to the set of Oracle Database versions that are supported for Oracle Cloud Infrastructure database software images.
	IsDatabaseSoftwareImageSupported pulumi.BoolPtrInput `pulumi:"isDatabaseSoftwareImageSupported"`
	// If provided, filters the results to the set of database versions which are supported for Upgrade.
	IsUpgradeSupported pulumi.BoolPtrInput `pulumi:"isUpgradeSupported"`
	// The DB system storage management option. Used to list database versions available for that storage manager. Valid values are `ASM` and `LVM`.
	// * ASM specifies Oracle Automatic Storage Management
	// * LVM specifies logical volume manager, sometimes called logical disk manager.
	StorageManagement pulumi.StringPtrInput `pulumi:"storageManagement"`
}

func (GetDbVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getDbVersions.
type GetDbVersionsResultOutput struct{ *pulumi.OutputState }

func (GetDbVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbVersionsResult)(nil)).Elem()
}

func (o GetDbVersionsResultOutput) ToGetDbVersionsResultOutput() GetDbVersionsResultOutput {
	return o
}

func (o GetDbVersionsResultOutput) ToGetDbVersionsResultOutputWithContext(ctx context.Context) GetDbVersionsResultOutput {
	return o
}

func (o GetDbVersionsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbVersionsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetDbVersionsResultOutput) DbSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbVersionsResult) *string { return v.DbSystemId }).(pulumi.StringPtrOutput)
}

func (o GetDbVersionsResultOutput) DbSystemShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbVersionsResult) *string { return v.DbSystemShape }).(pulumi.StringPtrOutput)
}

// The list of db_versions.
func (o GetDbVersionsResultOutput) DbVersions() GetDbVersionsDbVersionArrayOutput {
	return o.ApplyT(func(v GetDbVersionsResult) []GetDbVersionsDbVersion { return v.DbVersions }).(GetDbVersionsDbVersionArrayOutput)
}

func (o GetDbVersionsResultOutput) Filters() GetDbVersionsFilterArrayOutput {
	return o.ApplyT(func(v GetDbVersionsResult) []GetDbVersionsFilter { return v.Filters }).(GetDbVersionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDbVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDbVersionsResultOutput) IsDatabaseSoftwareImageSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDbVersionsResult) *bool { return v.IsDatabaseSoftwareImageSupported }).(pulumi.BoolPtrOutput)
}

// True if this version of the Oracle Database software is supported for Upgrade.
func (o GetDbVersionsResultOutput) IsUpgradeSupported() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDbVersionsResult) *bool { return v.IsUpgradeSupported }).(pulumi.BoolPtrOutput)
}

func (o GetDbVersionsResultOutput) StorageManagement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbVersionsResult) *string { return v.StorageManagement }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDbVersionsResultOutput{})
}
