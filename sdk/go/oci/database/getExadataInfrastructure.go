// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Exadata Infrastructure resource in Oracle Cloud Infrastructure Database service.
//
// Gets information about the specified Exadata infrastructure. Applies to Exadata Cloud@Customer instances only.
// To get information on an Exadata Cloud Service infrastructure resource, use the  [GetCloudExadataInfrastructure](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/CloudExadataInfrastructure/GetCloudExadataInfrastructure) operation.
func LookupExadataInfrastructure(ctx *pulumi.Context, args *LookupExadataInfrastructureArgs, opts ...pulumi.InvokeOption) (*LookupExadataInfrastructureResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupExadataInfrastructureResult
	err := ctx.Invoke("oci:Database/getExadataInfrastructure:getExadataInfrastructure", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExadataInfrastructure.
type LookupExadataInfrastructureArgs struct {
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId string `pulumi:"exadataInfrastructureId"`
}

// A collection of values returned by getExadataInfrastructure.
type LookupExadataInfrastructureResult struct {
	// The requested number of additional storage servers activated for the Exadata infrastructure.
	ActivatedStorageCount int    `pulumi:"activatedStorageCount"`
	ActivationFile        string `pulumi:"activationFile"`
	// The requested number of additional compute servers for the Exadata infrastructure.
	AdditionalComputeCount int `pulumi:"additionalComputeCount"`
	// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
	AdditionalComputeSystemModel string `pulumi:"additionalComputeSystemModel"`
	// The requested number of additional storage servers for the Exadata infrastructure.
	AdditionalStorageCount int `pulumi:"additionalStorageCount"`
	// The CIDR block for the Exadata administration network.
	AdminNetworkCidr string `pulumi:"adminNetworkCidr"`
	// The name of the availability domain that the Exadata infrastructure is located in.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// The IP address for the first control plane server.
	CloudControlPlaneServer1 string `pulumi:"cloudControlPlaneServer1"`
	// The IP address for the second control plane server.
	CloudControlPlaneServer2 string `pulumi:"cloudControlPlaneServer2"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The number of compute servers for the Exadata infrastructure.
	ComputeCount int `pulumi:"computeCount"`
	// The list of contacts for the Exadata infrastructure.
	Contacts []GetExadataInfrastructureContact `pulumi:"contacts"`
	// The corporate network proxy for access to the control plane network.
	CorporateProxy string `pulumi:"corporateProxy"`
	// The number of enabled CPU cores.
	CpusEnabled int  `pulumi:"cpusEnabled"`
	CreateAsync bool `pulumi:"createAsync"`
	// The CSI Number of the Exadata infrastructure.
	CsiNumber string `pulumi:"csiNumber"`
	// Size, in terabytes, of the DATA disk group.
	DataStorageSizeInTbs float64 `pulumi:"dataStorageSizeInTbs"`
	// The local node storage allocated in GBs.
	DbNodeStorageSizeInGbs int `pulumi:"dbNodeStorageSizeInGbs"`
	// The software version of the database servers (dom0) in the Exadata infrastructure.
	DbServerVersion string `pulumi:"dbServerVersion"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
	DisplayName string `pulumi:"displayName"`
	// The list of DNS server IP addresses. Maximum of 3 allowed.
	DnsServers              []string `pulumi:"dnsServers"`
	ExadataInfrastructureId string   `pulumi:"exadataInfrastructureId"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The gateway for the control plane network.
	Gateway string `pulumi:"gateway"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
	Id string `pulumi:"id"`
	// The CIDR block for the Exadata InfiniBand interconnect.
	InfiniBandNetworkCidr string `pulumi:"infiniBandNetworkCidr"`
	// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
	IsCpsOfflineReportEnabled bool `pulumi:"isCpsOfflineReportEnabled"`
	// Indicates if deployment is Multi-Rack or not.
	IsMultiRackDeployment bool `pulumi:"isMultiRackDeployment"`
	// Additional information about the current lifecycle state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
	MaintenanceSloStatus string `pulumi:"maintenanceSloStatus"`
	// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
	MaintenanceWindows []GetExadataInfrastructureMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The total number of CPU cores available.
	MaxCpuCount int `pulumi:"maxCpuCount"`
	// The total available DATA disk group size.
	MaxDataStorageInTbs float64 `pulumi:"maxDataStorageInTbs"`
	// The total local node storage available in GBs.
	MaxDbNodeStorageInGbs int `pulumi:"maxDbNodeStorageInGbs"`
	// The total memory available in GBs.
	MaxMemoryInGbs int `pulumi:"maxMemoryInGbs"`
	// The memory allocated in GBs.
	MemorySizeInGbs int `pulumi:"memorySizeInGbs"`
	// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
	MonthlyDbServerVersion string `pulumi:"monthlyDbServerVersion"`
	// The base64 encoded Multi-Rack configuration json file.
	MultiRackConfigurationFile string `pulumi:"multiRackConfigurationFile"`
	// The netmask for the control plane network.
	Netmask string `pulumi:"netmask"`
	// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
	NetworkBondingModeDetails []GetExadataInfrastructureNetworkBondingModeDetail `pulumi:"networkBondingModeDetails"`
	// The list of NTP server IP addresses. Maximum of 3 allowed.
	NtpServers []string `pulumi:"ntpServers"`
	// The serial number for the Exadata infrastructure.
	RackSerialNumber string `pulumi:"rackSerialNumber"`
	// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
	Shape string `pulumi:"shape"`
	// The current lifecycle state of the Exadata infrastructure.
	State string `pulumi:"state"`
	// The number of Exadata storage servers for the Exadata infrastructure.
	StorageCount int `pulumi:"storageCount"`
	// The software version of the storage servers (cells) in the Exadata infrastructure.
	StorageServerVersion string `pulumi:"storageServerVersion"`
	// The date and time the Exadata infrastructure was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
	TimeZone string `pulumi:"timeZone"`
}

func LookupExadataInfrastructureOutput(ctx *pulumi.Context, args LookupExadataInfrastructureOutputArgs, opts ...pulumi.InvokeOption) LookupExadataInfrastructureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExadataInfrastructureResult, error) {
			args := v.(LookupExadataInfrastructureArgs)
			r, err := LookupExadataInfrastructure(ctx, &args, opts...)
			var s LookupExadataInfrastructureResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupExadataInfrastructureResultOutput)
}

// A collection of arguments for invoking getExadataInfrastructure.
type LookupExadataInfrastructureOutputArgs struct {
	// The Exadata infrastructure [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExadataInfrastructureId pulumi.StringInput `pulumi:"exadataInfrastructureId"`
}

func (LookupExadataInfrastructureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExadataInfrastructureArgs)(nil)).Elem()
}

// A collection of values returned by getExadataInfrastructure.
type LookupExadataInfrastructureResultOutput struct{ *pulumi.OutputState }

func (LookupExadataInfrastructureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExadataInfrastructureResult)(nil)).Elem()
}

func (o LookupExadataInfrastructureResultOutput) ToLookupExadataInfrastructureResultOutput() LookupExadataInfrastructureResultOutput {
	return o
}

func (o LookupExadataInfrastructureResultOutput) ToLookupExadataInfrastructureResultOutputWithContext(ctx context.Context) LookupExadataInfrastructureResultOutput {
	return o
}

// The requested number of additional storage servers activated for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) ActivatedStorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.ActivatedStorageCount }).(pulumi.IntOutput)
}

func (o LookupExadataInfrastructureResultOutput) ActivationFile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.ActivationFile }).(pulumi.StringOutput)
}

// The requested number of additional compute servers for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) AdditionalComputeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.AdditionalComputeCount }).(pulumi.IntOutput)
}

// Oracle Exadata System Model specification. The system model determines the amount of compute or storage server resources available for use. For more information, please see [System and Shape Configuration Options] (https://docs.oracle.com/en/engineered-systems/exadata-cloud-at-customer/ecccm/ecc-system-config-options.html#GUID-9E090174-5C57-4EB1-9243-B470F9F10D6B)
func (o LookupExadataInfrastructureResultOutput) AdditionalComputeSystemModel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.AdditionalComputeSystemModel }).(pulumi.StringOutput)
}

// The requested number of additional storage servers for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) AdditionalStorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.AdditionalStorageCount }).(pulumi.IntOutput)
}

// The CIDR block for the Exadata administration network.
func (o LookupExadataInfrastructureResultOutput) AdminNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.AdminNetworkCidr }).(pulumi.StringOutput)
}

// The name of the availability domain that the Exadata infrastructure is located in.
func (o LookupExadataInfrastructureResultOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The IP address for the first control plane server.
func (o LookupExadataInfrastructureResultOutput) CloudControlPlaneServer1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.CloudControlPlaneServer1 }).(pulumi.StringOutput)
}

// The IP address for the second control plane server.
func (o LookupExadataInfrastructureResultOutput) CloudControlPlaneServer2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.CloudControlPlaneServer2 }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o LookupExadataInfrastructureResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The number of compute servers for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) ComputeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.ComputeCount }).(pulumi.IntOutput)
}

// The list of contacts for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) Contacts() GetExadataInfrastructureContactArrayOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) []GetExadataInfrastructureContact { return v.Contacts }).(GetExadataInfrastructureContactArrayOutput)
}

// The corporate network proxy for access to the control plane network.
func (o LookupExadataInfrastructureResultOutput) CorporateProxy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.CorporateProxy }).(pulumi.StringOutput)
}

// The number of enabled CPU cores.
func (o LookupExadataInfrastructureResultOutput) CpusEnabled() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.CpusEnabled }).(pulumi.IntOutput)
}

func (o LookupExadataInfrastructureResultOutput) CreateAsync() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) bool { return v.CreateAsync }).(pulumi.BoolOutput)
}

// The CSI Number of the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) CsiNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.CsiNumber }).(pulumi.StringOutput)
}

// Size, in terabytes, of the DATA disk group.
func (o LookupExadataInfrastructureResultOutput) DataStorageSizeInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) float64 { return v.DataStorageSizeInTbs }).(pulumi.Float64Output)
}

// The local node storage allocated in GBs.
func (o LookupExadataInfrastructureResultOutput) DbNodeStorageSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.DbNodeStorageSizeInGbs }).(pulumi.IntOutput)
}

// The software version of the database servers (dom0) in the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) DbServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.DbServerVersion }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupExadataInfrastructureResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The user-friendly name for the Exadata Cloud@Customer infrastructure. The name does not need to be unique.
func (o LookupExadataInfrastructureResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The list of DNS server IP addresses. Maximum of 3 allowed.
func (o LookupExadataInfrastructureResultOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

func (o LookupExadataInfrastructureResultOutput) ExadataInfrastructureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.ExadataInfrastructureId }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupExadataInfrastructureResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The gateway for the control plane network.
func (o LookupExadataInfrastructureResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.Gateway }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.Id }).(pulumi.StringOutput)
}

// The CIDR block for the Exadata InfiniBand interconnect.
func (o LookupExadataInfrastructureResultOutput) InfiniBandNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.InfiniBandNetworkCidr }).(pulumi.StringOutput)
}

// Indicates whether cps offline diagnostic report is enabled for this Exadata infrastructure. This will allow a customer to quickly check status themselves and fix problems on their end, saving time and frustration for both Oracle and the customer when they find the CPS in a disconnected state.You can enable offline diagnostic report during Exadata infrastructure provisioning. You can also disable or enable it at any time using the UpdateExadatainfrastructure API.
func (o LookupExadataInfrastructureResultOutput) IsCpsOfflineReportEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) bool { return v.IsCpsOfflineReportEnabled }).(pulumi.BoolOutput)
}

// Indicates if deployment is Multi-Rack or not.
func (o LookupExadataInfrastructureResultOutput) IsMultiRackDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) bool { return v.IsMultiRackDeployment }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycle state.
func (o LookupExadataInfrastructureResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// A field to capture ‘Maintenance SLO Status’ for the Exadata infrastructure with values ‘OK’, ‘DEGRADED’. Default is ‘OK’ when the infrastructure is provisioned.
func (o LookupExadataInfrastructureResultOutput) MaintenanceSloStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.MaintenanceSloStatus }).(pulumi.StringOutput)
}

// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
func (o LookupExadataInfrastructureResultOutput) MaintenanceWindows() GetExadataInfrastructureMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) []GetExadataInfrastructureMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetExadataInfrastructureMaintenanceWindowArrayOutput)
}

// The total number of CPU cores available.
func (o LookupExadataInfrastructureResultOutput) MaxCpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.MaxCpuCount }).(pulumi.IntOutput)
}

// The total available DATA disk group size.
func (o LookupExadataInfrastructureResultOutput) MaxDataStorageInTbs() pulumi.Float64Output {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) float64 { return v.MaxDataStorageInTbs }).(pulumi.Float64Output)
}

// The total local node storage available in GBs.
func (o LookupExadataInfrastructureResultOutput) MaxDbNodeStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.MaxDbNodeStorageInGbs }).(pulumi.IntOutput)
}

// The total memory available in GBs.
func (o LookupExadataInfrastructureResultOutput) MaxMemoryInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.MaxMemoryInGbs }).(pulumi.IntOutput)
}

// The memory allocated in GBs.
func (o LookupExadataInfrastructureResultOutput) MemorySizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.MemorySizeInGbs }).(pulumi.IntOutput)
}

// The monthly software version of the database servers (dom0) in the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) MonthlyDbServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.MonthlyDbServerVersion }).(pulumi.StringOutput)
}

// The base64 encoded Multi-Rack configuration json file.
func (o LookupExadataInfrastructureResultOutput) MultiRackConfigurationFile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.MultiRackConfigurationFile }).(pulumi.StringOutput)
}

// The netmask for the control plane network.
func (o LookupExadataInfrastructureResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// Details of bonding mode for Client and Backup and DR networks of an Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) NetworkBondingModeDetails() GetExadataInfrastructureNetworkBondingModeDetailArrayOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) []GetExadataInfrastructureNetworkBondingModeDetail {
		return v.NetworkBondingModeDetails
	}).(GetExadataInfrastructureNetworkBondingModeDetailArrayOutput)
}

// The list of NTP server IP addresses. Maximum of 3 allowed.
func (o LookupExadataInfrastructureResultOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) []string { return v.NtpServers }).(pulumi.StringArrayOutput)
}

// The serial number for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) RackSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.RackSerialNumber }).(pulumi.StringOutput)
}

// The shape of the Exadata infrastructure. The shape determines the amount of CPU, storage, and memory resources allocated to the instance.
func (o LookupExadataInfrastructureResultOutput) Shape() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.Shape }).(pulumi.StringOutput)
}

// The current lifecycle state of the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.State }).(pulumi.StringOutput)
}

// The number of Exadata storage servers for the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) StorageCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) int { return v.StorageCount }).(pulumi.IntOutput)
}

// The software version of the storage servers (cells) in the Exadata infrastructure.
func (o LookupExadataInfrastructureResultOutput) StorageServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.StorageServerVersion }).(pulumi.StringOutput)
}

// The date and time the Exadata infrastructure was created.
func (o LookupExadataInfrastructureResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time zone of the Exadata infrastructure. For details, see [Exadata Infrastructure Time Zones](https://docs.cloud.oracle.com/iaas/Content/Database/References/timezones.htm).
func (o LookupExadataInfrastructureResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExadataInfrastructureResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExadataInfrastructureResultOutput{})
}
