// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Execution Window resource in Oracle Cloud Infrastructure Database service.
//
// Gets information about the specified execution window.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetExecutionWindow(ctx, &database.GetExecutionWindowArgs{
//				ExecutionWindowId: testExecutionWindowOciDatabaseExecutionWindow.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupExecutionWindow(ctx *pulumi.Context, args *LookupExecutionWindowArgs, opts ...pulumi.InvokeOption) (*LookupExecutionWindowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupExecutionWindowResult
	err := ctx.Invoke("oci:Database/getExecutionWindow:getExecutionWindow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExecutionWindow.
type LookupExecutionWindowArgs struct {
	// The execution window [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExecutionWindowId string `pulumi:"executionWindowId"`
}

// A collection of values returned by getExecutionWindow.
type LookupExecutionWindowResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Description of the execution window.
	Description string `pulumi:"description"`
	// The user-friendly name for the execution window. The name does not need to be unique.
	DisplayName string `pulumi:"displayName"`
	// The estimated time of the execution window in minutes.
	EstimatedTimeInMins int `pulumi:"estimatedTimeInMins"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
	ExecutionResourceId string `pulumi:"executionResourceId"`
	ExecutionWindowId   string `pulumi:"executionWindowId"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution window.
	Id string `pulumi:"id"`
	// Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
	IsEnforcedDuration bool `pulumi:"isEnforcedDuration"`
	// Additional information about the current lifecycle state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
	LifecycleSubstate string `pulumi:"lifecycleSubstate"`
	// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
	State string `pulumi:"state"`
	// The date and time the execution window was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time that the execution window ended.
	TimeEnded string `pulumi:"timeEnded"`
	// The scheduled start date and time of the execution window.
	TimeScheduled string `pulumi:"timeScheduled"`
	// The date and time that the execution window was started.
	TimeStarted string `pulumi:"timeStarted"`
	// The last date and time that the execution window was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
	// The total time taken by corresponding resource activity in minutes.
	TotalTimeTakenInMins int `pulumi:"totalTimeTakenInMins"`
	// Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
	WindowDurationInMins int `pulumi:"windowDurationInMins"`
	// The execution window is of PLANNED or UNPLANNED type.
	WindowType string `pulumi:"windowType"`
}

func LookupExecutionWindowOutput(ctx *pulumi.Context, args LookupExecutionWindowOutputArgs, opts ...pulumi.InvokeOption) LookupExecutionWindowResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupExecutionWindowResultOutput, error) {
			args := v.(LookupExecutionWindowArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getExecutionWindow:getExecutionWindow", args, LookupExecutionWindowResultOutput{}, options).(LookupExecutionWindowResultOutput), nil
		}).(LookupExecutionWindowResultOutput)
}

// A collection of arguments for invoking getExecutionWindow.
type LookupExecutionWindowOutputArgs struct {
	// The execution window [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExecutionWindowId pulumi.StringInput `pulumi:"executionWindowId"`
}

func (LookupExecutionWindowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionWindowArgs)(nil)).Elem()
}

// A collection of values returned by getExecutionWindow.
type LookupExecutionWindowResultOutput struct{ *pulumi.OutputState }

func (LookupExecutionWindowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionWindowResult)(nil)).Elem()
}

func (o LookupExecutionWindowResultOutput) ToLookupExecutionWindowResultOutput() LookupExecutionWindowResultOutput {
	return o
}

func (o LookupExecutionWindowResultOutput) ToLookupExecutionWindowResultOutputWithContext(ctx context.Context) LookupExecutionWindowResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o LookupExecutionWindowResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupExecutionWindowResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Description of the execution window.
func (o LookupExecutionWindowResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.Description }).(pulumi.StringOutput)
}

// The user-friendly name for the execution window. The name does not need to be unique.
func (o LookupExecutionWindowResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The estimated time of the execution window in minutes.
func (o LookupExecutionWindowResultOutput) EstimatedTimeInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) int { return v.EstimatedTimeInMins }).(pulumi.IntOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution resource the execution window belongs to.
func (o LookupExecutionWindowResultOutput) ExecutionResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.ExecutionResourceId }).(pulumi.StringOutput)
}

func (o LookupExecutionWindowResultOutput) ExecutionWindowId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.ExecutionWindowId }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupExecutionWindowResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the execution window.
func (o LookupExecutionWindowResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
func (o LookupExecutionWindowResultOutput) IsEnforcedDuration() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) bool { return v.IsEnforcedDuration }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycle state.
func (o LookupExecutionWindowResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The current sub-state of the execution window. Valid states are DURATION_EXCEEDED, MAINTENANCE_IN_PROGRESS and WAITING.
func (o LookupExecutionWindowResultOutput) LifecycleSubstate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.LifecycleSubstate }).(pulumi.StringOutput)
}

// The current state of the Schedule Policy. Valid states are CREATED, SCHEDULED, IN_PROGRESS, FAILED, CANCELED, UPDATING, DELETED, SUCCEEDED and PARTIAL_SUCCESS.
func (o LookupExecutionWindowResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the execution window was created.
func (o LookupExecutionWindowResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time that the execution window ended.
func (o LookupExecutionWindowResultOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.TimeEnded }).(pulumi.StringOutput)
}

// The scheduled start date and time of the execution window.
func (o LookupExecutionWindowResultOutput) TimeScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.TimeScheduled }).(pulumi.StringOutput)
}

// The date and time that the execution window was started.
func (o LookupExecutionWindowResultOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.TimeStarted }).(pulumi.StringOutput)
}

// The last date and time that the execution window was updated.
func (o LookupExecutionWindowResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The total time taken by corresponding resource activity in minutes.
func (o LookupExecutionWindowResultOutput) TotalTimeTakenInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) int { return v.TotalTimeTakenInMins }).(pulumi.IntOutput)
}

// Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
func (o LookupExecutionWindowResultOutput) WindowDurationInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) int { return v.WindowDurationInMins }).(pulumi.IntOutput)
}

// The execution window is of PLANNED or UNPLANNED type.
func (o LookupExecutionWindowResultOutput) WindowType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionWindowResult) string { return v.WindowType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExecutionWindowResultOutput{})
}
