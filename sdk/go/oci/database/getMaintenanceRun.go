// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Maintenance Run resource in Oracle Cloud Infrastructure Database service.
//
// Gets information about the specified maintenance run.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetMaintenanceRun(ctx, &database.GetMaintenanceRunArgs{
//				MaintenanceRunId: testMaintenanceRunOciDatabaseMaintenanceRun.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMaintenanceRun(ctx *pulumi.Context, args *LookupMaintenanceRunArgs, opts ...pulumi.InvokeOption) (*LookupMaintenanceRunResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMaintenanceRunResult
	err := ctx.Invoke("oci:Database/getMaintenanceRun:getMaintenanceRun", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMaintenanceRun.
type LookupMaintenanceRunArgs struct {
	// The maintenance run OCID.
	MaintenanceRunId string `pulumi:"maintenanceRunId"`
}

// A collection of values returned by getMaintenanceRun.
type LookupMaintenanceRunResult struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
	CurrentCustomActionTimeoutInMins int `pulumi:"currentCustomActionTimeoutInMins"`
	// The name of the current infrastruture component that is getting patched.
	CurrentPatchingComponent string `pulumi:"currentPatchingComponent"`
	// Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
	CustomActionTimeoutInMins int `pulumi:"customActionTimeoutInMins"`
	// The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
	DatabaseSoftwareImageId string `pulumi:"databaseSoftwareImageId"`
	// Description of the maintenance run.
	Description string `pulumi:"description"`
	// The user-friendly name for the maintenance run.
	DisplayName string `pulumi:"displayName"`
	// The estimated start time of the next infrastruture component patching operation.
	EstimatedComponentPatchingStartTime string `pulumi:"estimatedComponentPatchingStartTime"`
	// The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
	EstimatedPatchingTimes []GetMaintenanceRunEstimatedPatchingTime `pulumi:"estimatedPatchingTimes"`
	// The OCID of the maintenance run.
	Id string `pulumi:"id"`
	// If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
	IsCustomActionTimeoutEnabled bool `pulumi:"isCustomActionTimeoutEnabled"`
	// Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
	IsDstFileUpdateEnabled bool `pulumi:"isDstFileUpdateEnabled"`
	// If `FALSE`, the maintenance run doesn't support granular maintenance.
	IsMaintenanceRunGranular bool `pulumi:"isMaintenanceRunGranular"`
	// Additional information about the current lifecycle state.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	MaintenanceRunId string `pulumi:"maintenanceRunId"`
	// Maintenance sub-type.
	MaintenanceSubtype string `pulumi:"maintenanceSubtype"`
	// Maintenance type.
	MaintenanceType string `pulumi:"maintenanceType"`
	// Contain the patch failure count.
	PatchFailureCount int `pulumi:"patchFailureCount"`
	// The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
	PatchId   string `pulumi:"patchId"`
	PatchType string `pulumi:"patchType"`
	// The time when the patching operation ended.
	PatchingEndTime string `pulumi:"patchingEndTime"`
	// Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode string `pulumi:"patchingMode"`
	// The time when the patching operation started.
	PatchingStartTime string `pulumi:"patchingStartTime"`
	// The status of the patching operation.
	PatchingStatus string `pulumi:"patchingStatus"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
	PeerMaintenanceRunId string `pulumi:"peerMaintenanceRunId"`
	// The list of OCIDs for the maintenance runs associated with their Autonomous Data Guard peer container databases.
	PeerMaintenanceRunIds []string `pulumi:"peerMaintenanceRunIds"`
	// The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
	State string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	SystemTags map[string]string `pulumi:"systemTags"`
	// The target software version for the database server patching operation.
	TargetDbServerVersion string `pulumi:"targetDbServerVersion"`
	// The ID of the target resource on which the maintenance run occurs.
	TargetResourceId string `pulumi:"targetResourceId"`
	// The type of the target resource on which the maintenance run occurs.
	TargetResourceType string `pulumi:"targetResourceType"`
	// The target Cell version that is to be patched to.
	TargetStorageServerVersion string `pulumi:"targetStorageServerVersion"`
	// The date and time the maintenance run was completed.
	TimeEnded string `pulumi:"timeEnded"`
	// The date and time the maintenance run is scheduled to occur.
	TimeScheduled string `pulumi:"timeScheduled"`
	// The date and time the maintenance run starts.
	TimeStarted string `pulumi:"timeStarted"`
	// The total time taken by corresponding resource activity in minutes.
	TotalTimeTakenInMins int `pulumi:"totalTimeTakenInMins"`
}

func LookupMaintenanceRunOutput(ctx *pulumi.Context, args LookupMaintenanceRunOutputArgs, opts ...pulumi.InvokeOption) LookupMaintenanceRunResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMaintenanceRunResultOutput, error) {
			args := v.(LookupMaintenanceRunArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getMaintenanceRun:getMaintenanceRun", args, LookupMaintenanceRunResultOutput{}, options).(LookupMaintenanceRunResultOutput), nil
		}).(LookupMaintenanceRunResultOutput)
}

// A collection of arguments for invoking getMaintenanceRun.
type LookupMaintenanceRunOutputArgs struct {
	// The maintenance run OCID.
	MaintenanceRunId pulumi.StringInput `pulumi:"maintenanceRunId"`
}

func (LookupMaintenanceRunOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMaintenanceRunArgs)(nil)).Elem()
}

// A collection of values returned by getMaintenanceRun.
type LookupMaintenanceRunResultOutput struct{ *pulumi.OutputState }

func (LookupMaintenanceRunResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMaintenanceRunResult)(nil)).Elem()
}

func (o LookupMaintenanceRunResultOutput) ToLookupMaintenanceRunResultOutput() LookupMaintenanceRunResultOutput {
	return o
}

func (o LookupMaintenanceRunResultOutput) ToLookupMaintenanceRunResultOutputWithContext(ctx context.Context) LookupMaintenanceRunResultOutput {
	return o
}

// The OCID of the compartment.
func (o LookupMaintenanceRunResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Extend current custom action timeout between the current database servers during waiting state, from 0 (zero) to 30 minutes.
func (o LookupMaintenanceRunResultOutput) CurrentCustomActionTimeoutInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) int { return v.CurrentCustomActionTimeoutInMins }).(pulumi.IntOutput)
}

// The name of the current infrastruture component that is getting patched.
func (o LookupMaintenanceRunResultOutput) CurrentPatchingComponent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.CurrentPatchingComponent }).(pulumi.StringOutput)
}

// Determines the amount of time the system will wait before the start of each database server patching operation. Specify a number of minutes, from 15 to 120.
func (o LookupMaintenanceRunResultOutput) CustomActionTimeoutInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) int { return v.CustomActionTimeoutInMins }).(pulumi.IntOutput)
}

// The Autonomous Database Software Image [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm)
func (o LookupMaintenanceRunResultOutput) DatabaseSoftwareImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.DatabaseSoftwareImageId }).(pulumi.StringOutput)
}

// Description of the maintenance run.
func (o LookupMaintenanceRunResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.Description }).(pulumi.StringOutput)
}

// The user-friendly name for the maintenance run.
func (o LookupMaintenanceRunResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The estimated start time of the next infrastruture component patching operation.
func (o LookupMaintenanceRunResultOutput) EstimatedComponentPatchingStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.EstimatedComponentPatchingStartTime }).(pulumi.StringOutput)
}

// The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching).
func (o LookupMaintenanceRunResultOutput) EstimatedPatchingTimes() GetMaintenanceRunEstimatedPatchingTimeArrayOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) []GetMaintenanceRunEstimatedPatchingTime {
		return v.EstimatedPatchingTimes
	}).(GetMaintenanceRunEstimatedPatchingTimeArrayOutput)
}

// The OCID of the maintenance run.
func (o LookupMaintenanceRunResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.Id }).(pulumi.StringOutput)
}

// If true, enables the configuration of a custom action timeout (waiting period) between database servers patching operations.
func (o LookupMaintenanceRunResultOutput) IsCustomActionTimeoutEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) bool { return v.IsCustomActionTimeoutEnabled }).(pulumi.BoolOutput)
}

// Indicates if an automatic DST Time Zone file update is enabled for the Autonomous Container Database. If enabled along with Release Update, patching will be done in a Non-Rolling manner.
func (o LookupMaintenanceRunResultOutput) IsDstFileUpdateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) bool { return v.IsDstFileUpdateEnabled }).(pulumi.BoolOutput)
}

// If `FALSE`, the maintenance run doesn't support granular maintenance.
func (o LookupMaintenanceRunResultOutput) IsMaintenanceRunGranular() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) bool { return v.IsMaintenanceRunGranular }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycle state.
func (o LookupMaintenanceRunResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

func (o LookupMaintenanceRunResultOutput) MaintenanceRunId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.MaintenanceRunId }).(pulumi.StringOutput)
}

// Maintenance sub-type.
func (o LookupMaintenanceRunResultOutput) MaintenanceSubtype() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.MaintenanceSubtype }).(pulumi.StringOutput)
}

// Maintenance type.
func (o LookupMaintenanceRunResultOutput) MaintenanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.MaintenanceType }).(pulumi.StringOutput)
}

// Contain the patch failure count.
func (o LookupMaintenanceRunResultOutput) PatchFailureCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) int { return v.PatchFailureCount }).(pulumi.IntOutput)
}

// The unique identifier of the patch. The identifier string includes the patch type, the Oracle Database version, and the patch creation date (using the format YYMMDD). For example, the identifier `ru_patch_19.9.0.0_201030` is used for an RU patch for Oracle Database 19.9.0.0 that was released October 30, 2020.
func (o LookupMaintenanceRunResultOutput) PatchId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchId }).(pulumi.StringOutput)
}

func (o LookupMaintenanceRunResultOutput) PatchType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchType }).(pulumi.StringOutput)
}

// The time when the patching operation ended.
func (o LookupMaintenanceRunResultOutput) PatchingEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchingEndTime }).(pulumi.StringOutput)
}

// Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
func (o LookupMaintenanceRunResultOutput) PatchingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchingMode }).(pulumi.StringOutput)
}

// The time when the patching operation started.
func (o LookupMaintenanceRunResultOutput) PatchingStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchingStartTime }).(pulumi.StringOutput)
}

// The status of the patching operation.
func (o LookupMaintenanceRunResultOutput) PatchingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PatchingStatus }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
func (o LookupMaintenanceRunResultOutput) PeerMaintenanceRunId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.PeerMaintenanceRunId }).(pulumi.StringOutput)
}

// The list of OCIDs for the maintenance runs associated with their Autonomous Data Guard peer container databases.
func (o LookupMaintenanceRunResultOutput) PeerMaintenanceRunIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) []string { return v.PeerMaintenanceRunIds }).(pulumi.StringArrayOutput)
}

// The current state of the maintenance run. For Autonomous Database Serverless instances, valid states are IN_PROGRESS, SUCCEEDED, and FAILED.
func (o LookupMaintenanceRunResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupMaintenanceRunResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The target software version for the database server patching operation.
func (o LookupMaintenanceRunResultOutput) TargetDbServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TargetDbServerVersion }).(pulumi.StringOutput)
}

// The ID of the target resource on which the maintenance run occurs.
func (o LookupMaintenanceRunResultOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TargetResourceId }).(pulumi.StringOutput)
}

// The type of the target resource on which the maintenance run occurs.
func (o LookupMaintenanceRunResultOutput) TargetResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TargetResourceType }).(pulumi.StringOutput)
}

// The target Cell version that is to be patched to.
func (o LookupMaintenanceRunResultOutput) TargetStorageServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TargetStorageServerVersion }).(pulumi.StringOutput)
}

// The date and time the maintenance run was completed.
func (o LookupMaintenanceRunResultOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TimeEnded }).(pulumi.StringOutput)
}

// The date and time the maintenance run is scheduled to occur.
func (o LookupMaintenanceRunResultOutput) TimeScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TimeScheduled }).(pulumi.StringOutput)
}

// The date and time the maintenance run starts.
func (o LookupMaintenanceRunResultOutput) TimeStarted() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) string { return v.TimeStarted }).(pulumi.StringOutput)
}

// The total time taken by corresponding resource activity in minutes.
func (o LookupMaintenanceRunResultOutput) TotalTimeTakenInMins() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMaintenanceRunResult) int { return v.TotalTimeTakenInMins }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMaintenanceRunResultOutput{})
}
