// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed Database Preferred Credential resource in Oracle Cloud Infrastructure Database Management service.
//
// Gets the preferred credential details for a Managed Database based on credentialName.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetManagedPreferredCredential(ctx, &database.GetManagedPreferredCredentialArgs{
//				CredentialName:    managedDatabasePreferredCredentialCredentialName,
//				ManagedDatabaseId: testManagedDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedPreferredCredential(ctx *pulumi.Context, args *GetManagedPreferredCredentialArgs, opts ...pulumi.InvokeOption) (*GetManagedPreferredCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedPreferredCredentialResult
	err := ctx.Invoke("oci:Database/getManagedPreferredCredential:getManagedPreferredCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedPreferredCredential.
type GetManagedPreferredCredentialArgs struct {
	// The name of the preferred credential.
	CredentialName string `pulumi:"credentialName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Named Credential that contains the database user password metadata.
	NamedCredentialId *string `pulumi:"namedCredentialId"`
}

// A collection of values returned by getManagedPreferredCredential.
type GetManagedPreferredCredentialResult struct {
	// The name of the preferred credential.
	CredentialName string `pulumi:"credentialName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the preferred credential is accessible.
	IsAccessible      bool   `pulumi:"isAccessible"`
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Named Credential that contains the database user password metadata.
	NamedCredentialId string `pulumi:"namedCredentialId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
	PasswordSecretId string `pulumi:"passwordSecretId"`
	// The role of the database user.
	Role string `pulumi:"role"`
	// The status of the preferred credential.
	Status string `pulumi:"status"`
	// The type of preferred credential. Only 'BASIC' is supported currently.
	Type string `pulumi:"type"`
	// The user name used to connect to the database.
	UserName string `pulumi:"userName"`
}

func GetManagedPreferredCredentialOutput(ctx *pulumi.Context, args GetManagedPreferredCredentialOutputArgs, opts ...pulumi.InvokeOption) GetManagedPreferredCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedPreferredCredentialResultOutput, error) {
			args := v.(GetManagedPreferredCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getManagedPreferredCredential:getManagedPreferredCredential", args, GetManagedPreferredCredentialResultOutput{}, options).(GetManagedPreferredCredentialResultOutput), nil
		}).(GetManagedPreferredCredentialResultOutput)
}

// A collection of arguments for invoking getManagedPreferredCredential.
type GetManagedPreferredCredentialOutputArgs struct {
	// The name of the preferred credential.
	CredentialName pulumi.StringInput `pulumi:"credentialName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Named Credential that contains the database user password metadata.
	NamedCredentialId pulumi.StringPtrInput `pulumi:"namedCredentialId"`
}

func (GetManagedPreferredCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedPreferredCredentialArgs)(nil)).Elem()
}

// A collection of values returned by getManagedPreferredCredential.
type GetManagedPreferredCredentialResultOutput struct{ *pulumi.OutputState }

func (GetManagedPreferredCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedPreferredCredentialResult)(nil)).Elem()
}

func (o GetManagedPreferredCredentialResultOutput) ToGetManagedPreferredCredentialResultOutput() GetManagedPreferredCredentialResultOutput {
	return o
}

func (o GetManagedPreferredCredentialResultOutput) ToGetManagedPreferredCredentialResultOutputWithContext(ctx context.Context) GetManagedPreferredCredentialResultOutput {
	return o
}

// The name of the preferred credential.
func (o GetManagedPreferredCredentialResultOutput) CredentialName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.CredentialName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedPreferredCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the preferred credential is accessible.
func (o GetManagedPreferredCredentialResultOutput) IsAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) bool { return v.IsAccessible }).(pulumi.BoolOutput)
}

func (o GetManagedPreferredCredentialResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Named Credential that contains the database user password metadata.
func (o GetManagedPreferredCredentialResultOutput) NamedCredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.NamedCredentialId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Vault service secret that contains the database user password.
func (o GetManagedPreferredCredentialResultOutput) PasswordSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.PasswordSecretId }).(pulumi.StringOutput)
}

// The role of the database user.
func (o GetManagedPreferredCredentialResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.Role }).(pulumi.StringOutput)
}

// The status of the preferred credential.
func (o GetManagedPreferredCredentialResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of preferred credential. Only 'BASIC' is supported currently.
func (o GetManagedPreferredCredentialResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the database.
func (o GetManagedPreferredCredentialResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedPreferredCredentialResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedPreferredCredentialResultOutput{})
}
