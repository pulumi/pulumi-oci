// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Pluggable Database Snapshots in Oracle Cloud Infrastructure Database service.
//
// Gets a list of the Exadata Pluggable Database Snapshots in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetPluggableDatabaseSnapshots(ctx, &database.GetPluggableDatabaseSnapshotsArgs{
//				ClusterId:           pulumi.StringRef(testCluster.Id),
//				CompartmentId:       pulumi.StringRef(compartmentId),
//				Name:                pulumi.StringRef(pluggableDatabaseSnapshotName),
//				PluggableDatabaseId: pulumi.StringRef(testPluggableDatabase.Id),
//				State:               pulumi.StringRef(pluggableDatabaseSnapshotState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPluggableDatabaseSnapshots(ctx *pulumi.Context, args *GetPluggableDatabaseSnapshotsArgs, opts ...pulumi.InvokeOption) (*GetPluggableDatabaseSnapshotsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPluggableDatabaseSnapshotsResult
	err := ctx.Invoke("oci:Database/getPluggableDatabaseSnapshots:getPluggableDatabaseSnapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPluggableDatabaseSnapshots.
type GetPluggableDatabaseSnapshotsArgs struct {
	// A filter to return only Exadata Database Node Snapshots that match the given VM cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string                               `pulumi:"compartmentId"`
	Filters       []GetPluggableDatabaseSnapshotsFilter `pulumi:"filters"`
	// A filter to return only resources that match the entire name given. The match is not case sensitive.
	Name *string `pulumi:"name"`
	// A filter to return only Exadata Pluggable Database Snapshots that match the given database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId *string `pulumi:"pluggableDatabaseId"`
	// A filter to return only Exadata Pluggable Database Snapshots that match the given lifecycle state exactly.
	State *string `pulumi:"state"`
}

// A collection of values returned by getPluggableDatabaseSnapshots.
type GetPluggableDatabaseSnapshotsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string                               `pulumi:"compartmentId"`
	Filters       []GetPluggableDatabaseSnapshotsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	PluggableDatabaseId *string `pulumi:"pluggableDatabaseId"`
	// The list of pluggable_database_snapshots.
	PluggableDatabaseSnapshots []GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshot `pulumi:"pluggableDatabaseSnapshots"`
	// The current state of the Exadata Pluggable Database Snapshot.
	State *string `pulumi:"state"`
}

func GetPluggableDatabaseSnapshotsOutput(ctx *pulumi.Context, args GetPluggableDatabaseSnapshotsOutputArgs, opts ...pulumi.InvokeOption) GetPluggableDatabaseSnapshotsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPluggableDatabaseSnapshotsResultOutput, error) {
			args := v.(GetPluggableDatabaseSnapshotsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getPluggableDatabaseSnapshots:getPluggableDatabaseSnapshots", args, GetPluggableDatabaseSnapshotsResultOutput{}, options).(GetPluggableDatabaseSnapshotsResultOutput), nil
		}).(GetPluggableDatabaseSnapshotsResultOutput)
}

// A collection of arguments for invoking getPluggableDatabaseSnapshots.
type GetPluggableDatabaseSnapshotsOutputArgs struct {
	// A filter to return only Exadata Database Node Snapshots that match the given VM cluster.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput                         `pulumi:"compartmentId"`
	Filters       GetPluggableDatabaseSnapshotsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the entire name given. The match is not case sensitive.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to return only Exadata Pluggable Database Snapshots that match the given database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringPtrInput `pulumi:"pluggableDatabaseId"`
	// A filter to return only Exadata Pluggable Database Snapshots that match the given lifecycle state exactly.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetPluggableDatabaseSnapshotsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluggableDatabaseSnapshotsArgs)(nil)).Elem()
}

// A collection of values returned by getPluggableDatabaseSnapshots.
type GetPluggableDatabaseSnapshotsResultOutput struct{ *pulumi.OutputState }

func (GetPluggableDatabaseSnapshotsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluggableDatabaseSnapshotsResult)(nil)).Elem()
}

func (o GetPluggableDatabaseSnapshotsResultOutput) ToGetPluggableDatabaseSnapshotsResultOutput() GetPluggableDatabaseSnapshotsResultOutput {
	return o
}

func (o GetPluggableDatabaseSnapshotsResultOutput) ToGetPluggableDatabaseSnapshotsResultOutputWithContext(ctx context.Context) GetPluggableDatabaseSnapshotsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
func (o GetPluggableDatabaseSnapshotsResultOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetPluggableDatabaseSnapshotsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetPluggableDatabaseSnapshotsResultOutput) Filters() GetPluggableDatabaseSnapshotsFilterArrayOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) []GetPluggableDatabaseSnapshotsFilter { return v.Filters }).(GetPluggableDatabaseSnapshotsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPluggableDatabaseSnapshotsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The user-friendly name for the Database Snapshot. The name should be unique.
func (o GetPluggableDatabaseSnapshotsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
func (o GetPluggableDatabaseSnapshotsResultOutput) PluggableDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) *string { return v.PluggableDatabaseId }).(pulumi.StringPtrOutput)
}

// The list of pluggable_database_snapshots.
func (o GetPluggableDatabaseSnapshotsResultOutput) PluggableDatabaseSnapshots() GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshotArrayOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) []GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshot {
		return v.PluggableDatabaseSnapshots
	}).(GetPluggableDatabaseSnapshotsPluggableDatabaseSnapshotArrayOutput)
}

// The current state of the Exadata Pluggable Database Snapshot.
func (o GetPluggableDatabaseSnapshotsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabaseSnapshotsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPluggableDatabaseSnapshotsResultOutput{})
}
