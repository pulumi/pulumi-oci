// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Pluggable Databases in Oracle Cloud Infrastructure Database service.
//
// Gets a list of the pluggable databases in a database or compartment. You must provide either a `databaseId` or `compartmentId` value.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetPluggableDatabases(ctx, &database.GetPluggableDatabasesArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				DatabaseId:    pulumi.StringRef(testDatabase.Id),
//				PdbName:       pulumi.StringRef(pluggableDatabasePdbName),
//				State:         pulumi.StringRef(pluggableDatabaseState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPluggableDatabases(ctx *pulumi.Context, args *GetPluggableDatabasesArgs, opts ...pulumi.InvokeOption) (*GetPluggableDatabasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPluggableDatabasesResult
	err := ctx.Invoke("oci:Database/getPluggableDatabases:getPluggableDatabases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPluggableDatabases.
type GetPluggableDatabasesArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId *string                       `pulumi:"databaseId"`
	Filters    []GetPluggableDatabasesFilter `pulumi:"filters"`
	// A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
	PdbName *string `pulumi:"pdbName"`
	// A filter to return only resources that match the given lifecycle state exactly.
	State *string `pulumi:"state"`
}

// A collection of values returned by getPluggableDatabases.
type GetPluggableDatabasesResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string                       `pulumi:"compartmentId"`
	DatabaseId    *string                       `pulumi:"databaseId"`
	Filters       []GetPluggableDatabasesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName *string `pulumi:"pdbName"`
	// The list of pluggable_databases.
	PluggableDatabases []GetPluggableDatabasesPluggableDatabase `pulumi:"pluggableDatabases"`
	// The current state of the pluggable database.
	State *string `pulumi:"state"`
}

func GetPluggableDatabasesOutput(ctx *pulumi.Context, args GetPluggableDatabasesOutputArgs, opts ...pulumi.InvokeOption) GetPluggableDatabasesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPluggableDatabasesResultOutput, error) {
			args := v.(GetPluggableDatabasesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getPluggableDatabases:getPluggableDatabases", args, GetPluggableDatabasesResultOutput{}, options).(GetPluggableDatabasesResultOutput), nil
		}).(GetPluggableDatabasesResultOutput)
}

// A collection of arguments for invoking getPluggableDatabases.
type GetPluggableDatabasesOutputArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringPtrInput                 `pulumi:"databaseId"`
	Filters    GetPluggableDatabasesFilterArrayInput `pulumi:"filters"`
	// A filter to return only pluggable databases that match the entire name given. The match is not case sensitive.
	PdbName pulumi.StringPtrInput `pulumi:"pdbName"`
	// A filter to return only resources that match the given lifecycle state exactly.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetPluggableDatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluggableDatabasesArgs)(nil)).Elem()
}

// A collection of values returned by getPluggableDatabases.
type GetPluggableDatabasesResultOutput struct{ *pulumi.OutputState }

func (GetPluggableDatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPluggableDatabasesResult)(nil)).Elem()
}

func (o GetPluggableDatabasesResultOutput) ToGetPluggableDatabasesResultOutput() GetPluggableDatabasesResultOutput {
	return o
}

func (o GetPluggableDatabasesResultOutput) ToGetPluggableDatabasesResultOutputWithContext(ctx context.Context) GetPluggableDatabasesResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetPluggableDatabasesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetPluggableDatabasesResultOutput) DatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) *string { return v.DatabaseId }).(pulumi.StringPtrOutput)
}

func (o GetPluggableDatabasesResultOutput) Filters() GetPluggableDatabasesFilterArrayOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) []GetPluggableDatabasesFilter { return v.Filters }).(GetPluggableDatabasesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPluggableDatabasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
func (o GetPluggableDatabasesResultOutput) PdbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) *string { return v.PdbName }).(pulumi.StringPtrOutput)
}

// The list of pluggable_databases.
func (o GetPluggableDatabasesResultOutput) PluggableDatabases() GetPluggableDatabasesPluggableDatabaseArrayOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) []GetPluggableDatabasesPluggableDatabase {
		return v.PluggableDatabases
	}).(GetPluggableDatabasesPluggableDatabaseArrayOutput)
}

// The current state of the pluggable database.
func (o GetPluggableDatabasesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPluggableDatabasesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPluggableDatabasesResultOutput{})
}
