// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Scheduling Policy resource in Oracle Cloud Infrastructure Database service.
//
// Gets information about the specified Scheduling Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetSchedulingPolicy(ctx, &database.GetSchedulingPolicyArgs{
//				SchedulingPolicyId: testSchedulingPolicyOciDatabaseSchedulingPolicy.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSchedulingPolicy(ctx *pulumi.Context, args *LookupSchedulingPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSchedulingPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchedulingPolicyResult
	err := ctx.Invoke("oci:Database/getSchedulingPolicy:getSchedulingPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchedulingPolicy.
type LookupSchedulingPolicyArgs struct {
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId string `pulumi:"schedulingPolicyId"`
}

// A collection of values returned by getSchedulingPolicy.
type LookupSchedulingPolicyResult struct {
	// The cadence period.
	Cadence string `pulumi:"cadence"`
	// Start of the month to be followed during the cadence period.
	CadenceStartMonths []GetSchedulingPolicyCadenceStartMonth `pulumi:"cadenceStartMonths"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The user-friendly name for the Scheduling Policy. The name does not need to be unique.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
	Id string `pulumi:"id"`
	// Additional information about the current lifecycle state.
	LifecycleDetails   string `pulumi:"lifecycleDetails"`
	SchedulingPolicyId string `pulumi:"schedulingPolicyId"`
	// The current state of the Scheduling Policy. Valid states are CREATING, NEEDS_ATTENTION, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
	State string `pulumi:"state"`
	// The date and time the Scheduling Policy was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time of the next scheduling window associated with the schedulingPolicy is planned to start.
	TimeNextWindowStarts string `pulumi:"timeNextWindowStarts"`
	// The last date and time that the Scheduling Policy was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupSchedulingPolicyOutput(ctx *pulumi.Context, args LookupSchedulingPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSchedulingPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSchedulingPolicyResultOutput, error) {
			args := v.(LookupSchedulingPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getSchedulingPolicy:getSchedulingPolicy", args, LookupSchedulingPolicyResultOutput{}, options).(LookupSchedulingPolicyResultOutput), nil
		}).(LookupSchedulingPolicyResultOutput)
}

// A collection of arguments for invoking getSchedulingPolicy.
type LookupSchedulingPolicyOutputArgs struct {
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId pulumi.StringInput `pulumi:"schedulingPolicyId"`
}

func (LookupSchedulingPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchedulingPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getSchedulingPolicy.
type LookupSchedulingPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSchedulingPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchedulingPolicyResult)(nil)).Elem()
}

func (o LookupSchedulingPolicyResultOutput) ToLookupSchedulingPolicyResultOutput() LookupSchedulingPolicyResultOutput {
	return o
}

func (o LookupSchedulingPolicyResultOutput) ToLookupSchedulingPolicyResultOutputWithContext(ctx context.Context) LookupSchedulingPolicyResultOutput {
	return o
}

// The cadence period.
func (o LookupSchedulingPolicyResultOutput) Cadence() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.Cadence }).(pulumi.StringOutput)
}

// Start of the month to be followed during the cadence period.
func (o LookupSchedulingPolicyResultOutput) CadenceStartMonths() GetSchedulingPolicyCadenceStartMonthArrayOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) []GetSchedulingPolicyCadenceStartMonth {
		return v.CadenceStartMonths
	}).(GetSchedulingPolicyCadenceStartMonthArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o LookupSchedulingPolicyResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupSchedulingPolicyResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The user-friendly name for the Scheduling Policy. The name does not need to be unique.
func (o LookupSchedulingPolicyResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o LookupSchedulingPolicyResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
func (o LookupSchedulingPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Additional information about the current lifecycle state.
func (o LookupSchedulingPolicyResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

func (o LookupSchedulingPolicyResultOutput) SchedulingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.SchedulingPolicyId }).(pulumi.StringOutput)
}

// The current state of the Scheduling Policy. Valid states are CREATING, NEEDS_ATTENTION, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
func (o LookupSchedulingPolicyResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the Scheduling Policy was created.
func (o LookupSchedulingPolicyResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time of the next scheduling window associated with the schedulingPolicy is planned to start.
func (o LookupSchedulingPolicyResultOutput) TimeNextWindowStarts() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.TimeNextWindowStarts }).(pulumi.StringOutput)
}

// The last date and time that the Scheduling Policy was updated.
func (o LookupSchedulingPolicyResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchedulingPolicyResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchedulingPolicyResultOutput{})
}
