// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Scheduling Policy Scheduling Windows in Oracle Cloud Infrastructure Database service.
//
// Lists the Scheduling Window resources in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.GetSchedulingPolicySchedulingWindows(ctx, &database.GetSchedulingPolicySchedulingWindowsArgs{
//				SchedulingPolicyId: testSchedulingPolicy.Id,
//				CompartmentId:      pulumi.StringRef(compartmentId),
//				DisplayName:        pulumi.StringRef(schedulingPolicySchedulingWindowDisplayName),
//				State:              pulumi.StringRef(schedulingPolicySchedulingWindowState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSchedulingPolicySchedulingWindows(ctx *pulumi.Context, args *GetSchedulingPolicySchedulingWindowsArgs, opts ...pulumi.InvokeOption) (*GetSchedulingPolicySchedulingWindowsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSchedulingPolicySchedulingWindowsResult
	err := ctx.Invoke("oci:Database/getSchedulingPolicySchedulingWindows:getSchedulingPolicySchedulingWindows", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchedulingPolicySchedulingWindows.
type GetSchedulingPolicySchedulingWindowsArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given. The match is not case sensitive.
	DisplayName *string                                      `pulumi:"displayName"`
	Filters     []GetSchedulingPolicySchedulingWindowsFilter `pulumi:"filters"`
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId string `pulumi:"schedulingPolicyId"`
	// A filter to return only resources that match the given lifecycle state exactly.
	State *string `pulumi:"state"`
}

// A collection of values returned by getSchedulingPolicySchedulingWindows.
type GetSchedulingPolicySchedulingWindowsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The user-friendly name for the Scheduling Window. The name does not need to be unique.
	DisplayName *string                                      `pulumi:"displayName"`
	Filters     []GetSchedulingPolicySchedulingWindowsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
	SchedulingPolicyId string `pulumi:"schedulingPolicyId"`
	// The list of scheduling_windows.
	SchedulingWindows []GetSchedulingPolicySchedulingWindowsSchedulingWindow `pulumi:"schedulingWindows"`
	// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
	State *string `pulumi:"state"`
}

func GetSchedulingPolicySchedulingWindowsOutput(ctx *pulumi.Context, args GetSchedulingPolicySchedulingWindowsOutputArgs, opts ...pulumi.InvokeOption) GetSchedulingPolicySchedulingWindowsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSchedulingPolicySchedulingWindowsResultOutput, error) {
			args := v.(GetSchedulingPolicySchedulingWindowsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Database/getSchedulingPolicySchedulingWindows:getSchedulingPolicySchedulingWindows", args, GetSchedulingPolicySchedulingWindowsResultOutput{}, options).(GetSchedulingPolicySchedulingWindowsResultOutput), nil
		}).(GetSchedulingPolicySchedulingWindowsResultOutput)
}

// A collection of arguments for invoking getSchedulingPolicySchedulingWindows.
type GetSchedulingPolicySchedulingWindowsOutputArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given. The match is not case sensitive.
	DisplayName pulumi.StringPtrInput                                `pulumi:"displayName"`
	Filters     GetSchedulingPolicySchedulingWindowsFilterArrayInput `pulumi:"filters"`
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId pulumi.StringInput `pulumi:"schedulingPolicyId"`
	// A filter to return only resources that match the given lifecycle state exactly.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetSchedulingPolicySchedulingWindowsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicySchedulingWindowsArgs)(nil)).Elem()
}

// A collection of values returned by getSchedulingPolicySchedulingWindows.
type GetSchedulingPolicySchedulingWindowsResultOutput struct{ *pulumi.OutputState }

func (GetSchedulingPolicySchedulingWindowsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulingPolicySchedulingWindowsResult)(nil)).Elem()
}

func (o GetSchedulingPolicySchedulingWindowsResultOutput) ToGetSchedulingPolicySchedulingWindowsResultOutput() GetSchedulingPolicySchedulingWindowsResultOutput {
	return o
}

func (o GetSchedulingPolicySchedulingWindowsResultOutput) ToGetSchedulingPolicySchedulingWindowsResultOutputWithContext(ctx context.Context) GetSchedulingPolicySchedulingWindowsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// The user-friendly name for the Scheduling Window. The name does not need to be unique.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSchedulingPolicySchedulingWindowsResultOutput) Filters() GetSchedulingPolicySchedulingWindowsFilterArrayOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) []GetSchedulingPolicySchedulingWindowsFilter {
		return v.Filters
	}).(GetSchedulingPolicySchedulingWindowsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Scheduling Policy.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) SchedulingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) string { return v.SchedulingPolicyId }).(pulumi.StringOutput)
}

// The list of scheduling_windows.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) SchedulingWindows() GetSchedulingPolicySchedulingWindowsSchedulingWindowArrayOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) []GetSchedulingPolicySchedulingWindowsSchedulingWindow {
		return v.SchedulingWindows
	}).(GetSchedulingPolicySchedulingWindowsSchedulingWindowArrayOutput)
}

// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
func (o GetSchedulingPolicySchedulingWindowsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSchedulingPolicySchedulingWindowsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSchedulingPolicySchedulingWindowsResultOutput{})
}
