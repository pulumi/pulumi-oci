// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Pluggable Database Pluggabledatabasemanagements Management resource in Oracle Cloud Infrastructure Database service.
//
// Enables the Database Management service for an Oracle Pluggable Database located in Oracle Cloud Infrastructure. This service allows the pluggable database to access tools including Metrics and Performance hub. Database Management is enabled at the pluggable database (PDB) level.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Database.NewPluggableDatabaseManagementsManagement(ctx, "testPluggableDatabasePluggabledatabasemanagementsManagement", &Database.PluggableDatabaseManagementsManagementArgs{
//				PluggableDatabaseId:               pulumi.Any(oci_database_pluggable_database.Test_pluggable_database.Id),
//				EnablePluggabledatabasemanagement: pulumi.Any(_var.Enable_pluggabledatabasemanagement),
//				CredentialDetails: &database.PluggableDatabaseManagementsManagementCredentialDetailsArgs{
//					PasswordSecretId: pulumi.Any(oci_vault_secret.Test_secret.Id),
//					UserName:         pulumi.Any(oci_identity_user.Test_user.Name),
//				},
//				PrivateEndPointId: pulumi.Any(oci_database_private_end_point.Test_private_end_point.Id),
//				ServiceName:       pulumi.Any(oci_core_service.Test_service.Name),
//				Port:              pulumi.Any(_var.Pluggable_database_pluggabledatabasemanagements_management_port),
//				Protocol:          pulumi.Any(_var.Pluggable_database_pluggabledatabasemanagements_management_protocol),
//				Role:              pulumi.Any(_var.Pluggable_database_pluggabledatabasemanagements_management_role),
//				SslSecretId:       pulumi.Any(oci_vault_secret.Test_secret.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PluggableDatabaseManagementsManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings PluggableDatabaseManagementsManagementConnectionStringArrayOutput `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId pulumi.StringOutput `pulumi:"containerDatabaseId"`
	// Data for the credential used to connect to the database.
	CredentialDetails PluggableDatabaseManagementsManagementCredentialDetailsOutput `pulumi:"credentialDetails"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnablePluggabledatabasemanagement pulumi.BoolOutput `pulumi:"enablePluggabledatabasemanagement"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolOutput `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringOutput `pulumi:"openMode"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringOutput `pulumi:"pdbName"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringOutput `pulumi:"pluggableDatabaseId"`
	// The configuration of the Pluggable Database Management service.
	PluggableDatabaseManagementConfigs PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArrayOutput `pulumi:"pluggableDatabaseManagementConfigs"`
	// The port used to connect to the pluggable database.
	Port pulumi.IntOutput `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringOutput `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The role of the user that will be connecting to the pluggable database.
	Role pulumi.StringOutput `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringOutput `pulumi:"sslSecretId"`
	// The current state of the pluggable database.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewPluggableDatabaseManagementsManagement registers a new resource with the given unique name, arguments, and options.
func NewPluggableDatabaseManagementsManagement(ctx *pulumi.Context,
	name string, args *PluggableDatabaseManagementsManagementArgs, opts ...pulumi.ResourceOption) (*PluggableDatabaseManagementsManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialDetails == nil {
		return nil, errors.New("invalid value for required argument 'CredentialDetails'")
	}
	if args.EnablePluggabledatabasemanagement == nil {
		return nil, errors.New("invalid value for required argument 'EnablePluggabledatabasemanagement'")
	}
	if args.PluggableDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'PluggableDatabaseId'")
	}
	if args.PrivateEndPointId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateEndPointId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PluggableDatabaseManagementsManagement
	err := ctx.RegisterResource("oci:Database/pluggableDatabaseManagementsManagement:PluggableDatabaseManagementsManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluggableDatabaseManagementsManagement gets an existing PluggableDatabaseManagementsManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluggableDatabaseManagementsManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluggableDatabaseManagementsManagementState, opts ...pulumi.ResourceOption) (*PluggableDatabaseManagementsManagement, error) {
	var resource PluggableDatabaseManagementsManagement
	err := ctx.ReadResource("oci:Database/pluggableDatabaseManagementsManagement:PluggableDatabaseManagementsManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluggableDatabaseManagementsManagement resources.
type pluggableDatabaseManagementsManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings []PluggableDatabaseManagementsManagementConnectionString `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId *string `pulumi:"containerDatabaseId"`
	// Data for the credential used to connect to the database.
	CredentialDetails *PluggableDatabaseManagementsManagementCredentialDetails `pulumi:"credentialDetails"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnablePluggabledatabasemanagement *bool `pulumi:"enablePluggabledatabasemanagement"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted *bool `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode *string `pulumi:"openMode"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName *string `pulumi:"pdbName"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId *string `pulumi:"pluggableDatabaseId"`
	// The configuration of the Pluggable Database Management service.
	PluggableDatabaseManagementConfigs []PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfig `pulumi:"pluggableDatabaseManagementConfigs"`
	// The port used to connect to the pluggable database.
	Port *int `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId *string `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol *string `pulumi:"protocol"`
	// The role of the user that will be connecting to the pluggable database.
	Role *string `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName *string `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId *string `pulumi:"sslSecretId"`
	// The current state of the pluggable database.
	State *string `pulumi:"state"`
	// The date and time the pluggable database was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type PluggableDatabaseManagementsManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings PluggableDatabaseManagementsManagementConnectionStringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId pulumi.StringPtrInput
	// Data for the credential used to connect to the database.
	CredentialDetails PluggableDatabaseManagementsManagementCredentialDetailsPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnablePluggabledatabasemanagement pulumi.BoolPtrInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolPtrInput
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringPtrInput
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringPtrInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringPtrInput
	// The configuration of the Pluggable Database Management service.
	PluggableDatabaseManagementConfigs PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArrayInput
	// The port used to connect to the pluggable database.
	Port pulumi.IntPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringPtrInput
	// Protocol used by the database connection.
	Protocol pulumi.StringPtrInput
	// The role of the user that will be connecting to the pluggable database.
	Role pulumi.StringPtrInput
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringPtrInput
	// The current state of the pluggable database.
	State pulumi.StringPtrInput
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringPtrInput
}

func (PluggableDatabaseManagementsManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseManagementsManagementState)(nil)).Elem()
}

type pluggableDatabaseManagementsManagementArgs struct {
	// Data for the credential used to connect to the database.
	CredentialDetails PluggableDatabaseManagementsManagementCredentialDetails `pulumi:"credentialDetails"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnablePluggabledatabasemanagement bool `pulumi:"enablePluggabledatabasemanagement"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId string `pulumi:"pluggableDatabaseId"`
	// The port used to connect to the pluggable database.
	Port *int `pulumi:"port"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId string `pulumi:"privateEndPointId"`
	// Protocol used by the database connection.
	Protocol *string `pulumi:"protocol"`
	// The role of the user that will be connecting to the pluggable database.
	Role *string `pulumi:"role"`
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName string `pulumi:"serviceName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId *string `pulumi:"sslSecretId"`
}

// The set of arguments for constructing a PluggableDatabaseManagementsManagement resource.
type PluggableDatabaseManagementsManagementArgs struct {
	// Data for the credential used to connect to the database.
	CredentialDetails PluggableDatabaseManagementsManagementCredentialDetailsInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnablePluggabledatabasemanagement pulumi.BoolInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringInput
	// The port used to connect to the pluggable database.
	Port pulumi.IntPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
	PrivateEndPointId pulumi.StringInput
	// Protocol used by the database connection.
	Protocol pulumi.StringPtrInput
	// The role of the user that will be connecting to the pluggable database.
	Role pulumi.StringPtrInput
	// The name of the Oracle Database service that will be used to connect to the database.
	ServiceName pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
	SslSecretId pulumi.StringPtrInput
}

func (PluggableDatabaseManagementsManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseManagementsManagementArgs)(nil)).Elem()
}

type PluggableDatabaseManagementsManagementInput interface {
	pulumi.Input

	ToPluggableDatabaseManagementsManagementOutput() PluggableDatabaseManagementsManagementOutput
	ToPluggableDatabaseManagementsManagementOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementOutput
}

func (*PluggableDatabaseManagementsManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (i *PluggableDatabaseManagementsManagement) ToPluggableDatabaseManagementsManagementOutput() PluggableDatabaseManagementsManagementOutput {
	return i.ToPluggableDatabaseManagementsManagementOutputWithContext(context.Background())
}

func (i *PluggableDatabaseManagementsManagement) ToPluggableDatabaseManagementsManagementOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseManagementsManagementOutput)
}

func (i *PluggableDatabaseManagementsManagement) ToOutput(ctx context.Context) pulumix.Output[*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[*PluggableDatabaseManagementsManagement]{
		OutputState: i.ToPluggableDatabaseManagementsManagementOutputWithContext(ctx).OutputState,
	}
}

// PluggableDatabaseManagementsManagementArrayInput is an input type that accepts PluggableDatabaseManagementsManagementArray and PluggableDatabaseManagementsManagementArrayOutput values.
// You can construct a concrete instance of `PluggableDatabaseManagementsManagementArrayInput` via:
//
//	PluggableDatabaseManagementsManagementArray{ PluggableDatabaseManagementsManagementArgs{...} }
type PluggableDatabaseManagementsManagementArrayInput interface {
	pulumi.Input

	ToPluggableDatabaseManagementsManagementArrayOutput() PluggableDatabaseManagementsManagementArrayOutput
	ToPluggableDatabaseManagementsManagementArrayOutputWithContext(context.Context) PluggableDatabaseManagementsManagementArrayOutput
}

type PluggableDatabaseManagementsManagementArray []PluggableDatabaseManagementsManagementInput

func (PluggableDatabaseManagementsManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (i PluggableDatabaseManagementsManagementArray) ToPluggableDatabaseManagementsManagementArrayOutput() PluggableDatabaseManagementsManagementArrayOutput {
	return i.ToPluggableDatabaseManagementsManagementArrayOutputWithContext(context.Background())
}

func (i PluggableDatabaseManagementsManagementArray) ToPluggableDatabaseManagementsManagementArrayOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseManagementsManagementArrayOutput)
}

func (i PluggableDatabaseManagementsManagementArray) ToOutput(ctx context.Context) pulumix.Output[[]*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[[]*PluggableDatabaseManagementsManagement]{
		OutputState: i.ToPluggableDatabaseManagementsManagementArrayOutputWithContext(ctx).OutputState,
	}
}

// PluggableDatabaseManagementsManagementMapInput is an input type that accepts PluggableDatabaseManagementsManagementMap and PluggableDatabaseManagementsManagementMapOutput values.
// You can construct a concrete instance of `PluggableDatabaseManagementsManagementMapInput` via:
//
//	PluggableDatabaseManagementsManagementMap{ "key": PluggableDatabaseManagementsManagementArgs{...} }
type PluggableDatabaseManagementsManagementMapInput interface {
	pulumi.Input

	ToPluggableDatabaseManagementsManagementMapOutput() PluggableDatabaseManagementsManagementMapOutput
	ToPluggableDatabaseManagementsManagementMapOutputWithContext(context.Context) PluggableDatabaseManagementsManagementMapOutput
}

type PluggableDatabaseManagementsManagementMap map[string]PluggableDatabaseManagementsManagementInput

func (PluggableDatabaseManagementsManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (i PluggableDatabaseManagementsManagementMap) ToPluggableDatabaseManagementsManagementMapOutput() PluggableDatabaseManagementsManagementMapOutput {
	return i.ToPluggableDatabaseManagementsManagementMapOutputWithContext(context.Background())
}

func (i PluggableDatabaseManagementsManagementMap) ToPluggableDatabaseManagementsManagementMapOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseManagementsManagementMapOutput)
}

func (i PluggableDatabaseManagementsManagementMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[map[string]*PluggableDatabaseManagementsManagement]{
		OutputState: i.ToPluggableDatabaseManagementsManagementMapOutputWithContext(ctx).OutputState,
	}
}

type PluggableDatabaseManagementsManagementOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseManagementsManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (o PluggableDatabaseManagementsManagementOutput) ToPluggableDatabaseManagementsManagementOutput() PluggableDatabaseManagementsManagementOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementOutput) ToPluggableDatabaseManagementsManagementOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementOutput) ToOutput(ctx context.Context) pulumix.Output[*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[*PluggableDatabaseManagementsManagement]{
		OutputState: o.OutputState,
	}
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o PluggableDatabaseManagementsManagementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Connection strings to connect to an Oracle Pluggable Database.
func (o PluggableDatabaseManagementsManagementOutput) ConnectionStrings() PluggableDatabaseManagementsManagementConnectionStringArrayOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) PluggableDatabaseManagementsManagementConnectionStringArrayOutput {
		return v.ConnectionStrings
	}).(PluggableDatabaseManagementsManagementConnectionStringArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
func (o PluggableDatabaseManagementsManagementOutput) ContainerDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.ContainerDatabaseId }).(pulumi.StringOutput)
}

// Data for the credential used to connect to the database.
func (o PluggableDatabaseManagementsManagementOutput) CredentialDetails() PluggableDatabaseManagementsManagementCredentialDetailsOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) PluggableDatabaseManagementsManagementCredentialDetailsOutput {
		return v.CredentialDetails
	}).(PluggableDatabaseManagementsManagementCredentialDetailsOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o PluggableDatabaseManagementsManagementOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PluggableDatabaseManagementsManagementOutput) EnablePluggabledatabasemanagement() pulumi.BoolOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.BoolOutput {
		return v.EnablePluggabledatabasemanagement
	}).(pulumi.BoolOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o PluggableDatabaseManagementsManagementOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
func (o PluggableDatabaseManagementsManagementOutput) IsRestricted() pulumi.BoolOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.BoolOutput { return v.IsRestricted }).(pulumi.BoolOutput)
}

// Detailed message for the lifecycle state.
func (o PluggableDatabaseManagementsManagementOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
func (o PluggableDatabaseManagementsManagementOutput) OpenMode() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.OpenMode }).(pulumi.StringOutput)
}

// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
func (o PluggableDatabaseManagementsManagementOutput) PdbName() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.PdbName }).(pulumi.StringOutput)
}

// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o PluggableDatabaseManagementsManagementOutput) PluggableDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.PluggableDatabaseId }).(pulumi.StringOutput)
}

// The configuration of the Pluggable Database Management service.
func (o PluggableDatabaseManagementsManagementOutput) PluggableDatabaseManagementConfigs() PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArrayOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArrayOutput {
		return v.PluggableDatabaseManagementConfigs
	}).(PluggableDatabaseManagementsManagementPluggableDatabaseManagementConfigArrayOutput)
}

// The port used to connect to the pluggable database.
func (o PluggableDatabaseManagementsManagementOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint.
func (o PluggableDatabaseManagementsManagementOutput) PrivateEndPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.PrivateEndPointId }).(pulumi.StringOutput)
}

// Protocol used by the database connection.
func (o PluggableDatabaseManagementsManagementOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The role of the user that will be connecting to the pluggable database.
func (o PluggableDatabaseManagementsManagementOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The name of the Oracle Database service that will be used to connect to the database.
func (o PluggableDatabaseManagementsManagementOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [secret](https://docs.cloud.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts).
func (o PluggableDatabaseManagementsManagementOutput) SslSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.SslSecretId }).(pulumi.StringOutput)
}

// The current state of the pluggable database.
func (o PluggableDatabaseManagementsManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the pluggable database was created.
func (o PluggableDatabaseManagementsManagementOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseManagementsManagement) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

type PluggableDatabaseManagementsManagementArrayOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseManagementsManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (o PluggableDatabaseManagementsManagementArrayOutput) ToPluggableDatabaseManagementsManagementArrayOutput() PluggableDatabaseManagementsManagementArrayOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementArrayOutput) ToPluggableDatabaseManagementsManagementArrayOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementArrayOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[[]*PluggableDatabaseManagementsManagement]{
		OutputState: o.OutputState,
	}
}

func (o PluggableDatabaseManagementsManagementArrayOutput) Index(i pulumi.IntInput) PluggableDatabaseManagementsManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PluggableDatabaseManagementsManagement {
		return vs[0].([]*PluggableDatabaseManagementsManagement)[vs[1].(int)]
	}).(PluggableDatabaseManagementsManagementOutput)
}

type PluggableDatabaseManagementsManagementMapOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseManagementsManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluggableDatabaseManagementsManagement)(nil)).Elem()
}

func (o PluggableDatabaseManagementsManagementMapOutput) ToPluggableDatabaseManagementsManagementMapOutput() PluggableDatabaseManagementsManagementMapOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementMapOutput) ToPluggableDatabaseManagementsManagementMapOutputWithContext(ctx context.Context) PluggableDatabaseManagementsManagementMapOutput {
	return o
}

func (o PluggableDatabaseManagementsManagementMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PluggableDatabaseManagementsManagement] {
	return pulumix.Output[map[string]*PluggableDatabaseManagementsManagement]{
		OutputState: o.OutputState,
	}
}

func (o PluggableDatabaseManagementsManagementMapOutput) MapIndex(k pulumi.StringInput) PluggableDatabaseManagementsManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PluggableDatabaseManagementsManagement {
		return vs[0].(map[string]*PluggableDatabaseManagementsManagement)[vs[1].(string)]
	}).(PluggableDatabaseManagementsManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseManagementsManagementInput)(nil)).Elem(), &PluggableDatabaseManagementsManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseManagementsManagementArrayInput)(nil)).Elem(), PluggableDatabaseManagementsManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseManagementsManagementMapInput)(nil)).Elem(), PluggableDatabaseManagementsManagementMap{})
	pulumi.RegisterOutputType(PluggableDatabaseManagementsManagementOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseManagementsManagementArrayOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseManagementsManagementMapOutput{})
}
