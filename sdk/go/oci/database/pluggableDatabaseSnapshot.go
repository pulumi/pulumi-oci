// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Pluggable Database Snapshot resource in Oracle Cloud Infrastructure Database service.
//
// # Creates a Pluggable Database Snapshot
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.NewPluggableDatabaseSnapshot(ctx, "test_pluggable_database_snapshot", &database.PluggableDatabaseSnapshotArgs{
//				Name:                pulumi.Any(pluggableDatabaseSnapshotName),
//				PluggableDatabaseId: pulumi.Any(testPluggableDatabase.Id),
//				DefinedTags:         pulumi.Any(pluggableDatabaseSnapshotDefinedTags),
//				FreeformTags: pulumi.StringMap{
//					"Department": pulumi.String("Finance"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PluggableDatabaseSnapshots can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Database/pluggableDatabaseSnapshot:PluggableDatabaseSnapshot test_pluggable_database_snapshot "id"
// ```
type PluggableDatabaseSnapshot struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state of the Exadata Pluggable Database Snapshot.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PluggableDatabaseId pulumi.StringOutput `pulumi:"pluggableDatabaseId"`
	// The current state of the Exadata Pluggable Database Snapshot.
	State pulumi.StringOutput `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time that the Exadata Pluggable Database Snapshot was created, as expressed in RFC 3339 format. For example: 2023-06-27T21:10:29Z
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewPluggableDatabaseSnapshot registers a new resource with the given unique name, arguments, and options.
func NewPluggableDatabaseSnapshot(ctx *pulumi.Context,
	name string, args *PluggableDatabaseSnapshotArgs, opts ...pulumi.ResourceOption) (*PluggableDatabaseSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PluggableDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'PluggableDatabaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PluggableDatabaseSnapshot
	err := ctx.RegisterResource("oci:Database/pluggableDatabaseSnapshot:PluggableDatabaseSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluggableDatabaseSnapshot gets an existing PluggableDatabaseSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluggableDatabaseSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluggableDatabaseSnapshotState, opts ...pulumi.ResourceOption) (*PluggableDatabaseSnapshot, error) {
	var resource PluggableDatabaseSnapshot
	err := ctx.ReadResource("oci:Database/pluggableDatabaseSnapshot:PluggableDatabaseSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluggableDatabaseSnapshot resources.
type pluggableDatabaseSnapshotState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state of the Exadata Pluggable Database Snapshot.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PluggableDatabaseId *string `pulumi:"pluggableDatabaseId"`
	// The current state of the Exadata Pluggable Database Snapshot.
	State *string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time that the Exadata Pluggable Database Snapshot was created, as expressed in RFC 3339 format. For example: 2023-06-27T21:10:29Z
	TimeCreated *string `pulumi:"timeCreated"`
}

type PluggableDatabaseSnapshotState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
	ClusterId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// Additional information about the current lifecycle state of the Exadata Pluggable Database Snapshot.
	LifecycleDetails pulumi.StringPtrInput
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PluggableDatabaseId pulumi.StringPtrInput
	// The current state of the Exadata Pluggable Database Snapshot.
	State pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	SystemTags pulumi.StringMapInput
	// The date and time that the Exadata Pluggable Database Snapshot was created, as expressed in RFC 3339 format. For example: 2023-06-27T21:10:29Z
	TimeCreated pulumi.StringPtrInput
}

func (PluggableDatabaseSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseSnapshotState)(nil)).Elem()
}

type pluggableDatabaseSnapshotArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PluggableDatabaseId string `pulumi:"pluggableDatabaseId"`
}

// The set of arguments for constructing a PluggableDatabaseSnapshot resource.
type PluggableDatabaseSnapshotArgs struct {
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// The user-friendly name for the Database Snapshot. The name should be unique.
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	PluggableDatabaseId pulumi.StringInput
}

func (PluggableDatabaseSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluggableDatabaseSnapshotArgs)(nil)).Elem()
}

type PluggableDatabaseSnapshotInput interface {
	pulumi.Input

	ToPluggableDatabaseSnapshotOutput() PluggableDatabaseSnapshotOutput
	ToPluggableDatabaseSnapshotOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotOutput
}

func (*PluggableDatabaseSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabaseSnapshot)(nil)).Elem()
}

func (i *PluggableDatabaseSnapshot) ToPluggableDatabaseSnapshotOutput() PluggableDatabaseSnapshotOutput {
	return i.ToPluggableDatabaseSnapshotOutputWithContext(context.Background())
}

func (i *PluggableDatabaseSnapshot) ToPluggableDatabaseSnapshotOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseSnapshotOutput)
}

// PluggableDatabaseSnapshotArrayInput is an input type that accepts PluggableDatabaseSnapshotArray and PluggableDatabaseSnapshotArrayOutput values.
// You can construct a concrete instance of `PluggableDatabaseSnapshotArrayInput` via:
//
//	PluggableDatabaseSnapshotArray{ PluggableDatabaseSnapshotArgs{...} }
type PluggableDatabaseSnapshotArrayInput interface {
	pulumi.Input

	ToPluggableDatabaseSnapshotArrayOutput() PluggableDatabaseSnapshotArrayOutput
	ToPluggableDatabaseSnapshotArrayOutputWithContext(context.Context) PluggableDatabaseSnapshotArrayOutput
}

type PluggableDatabaseSnapshotArray []PluggableDatabaseSnapshotInput

func (PluggableDatabaseSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluggableDatabaseSnapshot)(nil)).Elem()
}

func (i PluggableDatabaseSnapshotArray) ToPluggableDatabaseSnapshotArrayOutput() PluggableDatabaseSnapshotArrayOutput {
	return i.ToPluggableDatabaseSnapshotArrayOutputWithContext(context.Background())
}

func (i PluggableDatabaseSnapshotArray) ToPluggableDatabaseSnapshotArrayOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseSnapshotArrayOutput)
}

// PluggableDatabaseSnapshotMapInput is an input type that accepts PluggableDatabaseSnapshotMap and PluggableDatabaseSnapshotMapOutput values.
// You can construct a concrete instance of `PluggableDatabaseSnapshotMapInput` via:
//
//	PluggableDatabaseSnapshotMap{ "key": PluggableDatabaseSnapshotArgs{...} }
type PluggableDatabaseSnapshotMapInput interface {
	pulumi.Input

	ToPluggableDatabaseSnapshotMapOutput() PluggableDatabaseSnapshotMapOutput
	ToPluggableDatabaseSnapshotMapOutputWithContext(context.Context) PluggableDatabaseSnapshotMapOutput
}

type PluggableDatabaseSnapshotMap map[string]PluggableDatabaseSnapshotInput

func (PluggableDatabaseSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluggableDatabaseSnapshot)(nil)).Elem()
}

func (i PluggableDatabaseSnapshotMap) ToPluggableDatabaseSnapshotMapOutput() PluggableDatabaseSnapshotMapOutput {
	return i.ToPluggableDatabaseSnapshotMapOutputWithContext(context.Background())
}

func (i PluggableDatabaseSnapshotMap) ToPluggableDatabaseSnapshotMapOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluggableDatabaseSnapshotMapOutput)
}

type PluggableDatabaseSnapshotOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluggableDatabaseSnapshot)(nil)).Elem()
}

func (o PluggableDatabaseSnapshotOutput) ToPluggableDatabaseSnapshotOutput() PluggableDatabaseSnapshotOutput {
	return o
}

func (o PluggableDatabaseSnapshotOutput) ToPluggableDatabaseSnapshotOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VM cluster.
func (o PluggableDatabaseSnapshotOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o PluggableDatabaseSnapshotOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o PluggableDatabaseSnapshotOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o PluggableDatabaseSnapshotOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Additional information about the current lifecycle state of the Exadata Pluggable Database Snapshot.
func (o PluggableDatabaseSnapshotOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The user-friendly name for the Database Snapshot. The name should be unique.
func (o PluggableDatabaseSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata Pluggable Database.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PluggableDatabaseSnapshotOutput) PluggableDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.PluggableDatabaseId }).(pulumi.StringOutput)
}

// The current state of the Exadata Pluggable Database Snapshot.
func (o PluggableDatabaseSnapshotOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o PluggableDatabaseSnapshotOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time that the Exadata Pluggable Database Snapshot was created, as expressed in RFC 3339 format. For example: 2023-06-27T21:10:29Z
func (o PluggableDatabaseSnapshotOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *PluggableDatabaseSnapshot) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

type PluggableDatabaseSnapshotArrayOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluggableDatabaseSnapshot)(nil)).Elem()
}

func (o PluggableDatabaseSnapshotArrayOutput) ToPluggableDatabaseSnapshotArrayOutput() PluggableDatabaseSnapshotArrayOutput {
	return o
}

func (o PluggableDatabaseSnapshotArrayOutput) ToPluggableDatabaseSnapshotArrayOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotArrayOutput {
	return o
}

func (o PluggableDatabaseSnapshotArrayOutput) Index(i pulumi.IntInput) PluggableDatabaseSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PluggableDatabaseSnapshot {
		return vs[0].([]*PluggableDatabaseSnapshot)[vs[1].(int)]
	}).(PluggableDatabaseSnapshotOutput)
}

type PluggableDatabaseSnapshotMapOutput struct{ *pulumi.OutputState }

func (PluggableDatabaseSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluggableDatabaseSnapshot)(nil)).Elem()
}

func (o PluggableDatabaseSnapshotMapOutput) ToPluggableDatabaseSnapshotMapOutput() PluggableDatabaseSnapshotMapOutput {
	return o
}

func (o PluggableDatabaseSnapshotMapOutput) ToPluggableDatabaseSnapshotMapOutputWithContext(ctx context.Context) PluggableDatabaseSnapshotMapOutput {
	return o
}

func (o PluggableDatabaseSnapshotMapOutput) MapIndex(k pulumi.StringInput) PluggableDatabaseSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PluggableDatabaseSnapshot {
		return vs[0].(map[string]*PluggableDatabaseSnapshot)[vs[1].(string)]
	}).(PluggableDatabaseSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseSnapshotInput)(nil)).Elem(), &PluggableDatabaseSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseSnapshotArrayInput)(nil)).Elem(), PluggableDatabaseSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluggableDatabaseSnapshotMapInput)(nil)).Elem(), PluggableDatabaseSnapshotMap{})
	pulumi.RegisterOutputType(PluggableDatabaseSnapshotOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseSnapshotArrayOutput{})
	pulumi.RegisterOutputType(PluggableDatabaseSnapshotMapOutput{})
}
