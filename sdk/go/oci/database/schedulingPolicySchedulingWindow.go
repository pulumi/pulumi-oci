// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Scheduling Policy Scheduling Window resource in Oracle Cloud Infrastructure Database service.
//
// Creates a Scheduling Window resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/database"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := database.NewSchedulingPolicySchedulingWindow(ctx, "test_scheduling_policy_scheduling_window", &database.SchedulingPolicySchedulingWindowArgs{
//				SchedulingPolicyId: pulumi.Any(testSchedulingPolicy.Id),
//				WindowPreference: &database.SchedulingPolicySchedulingWindowWindowPreferenceArgs{
//					DaysOfWeeks: database.SchedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekArray{
//						&database.SchedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekArgs{
//							Name: pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceDaysOfWeekName),
//						},
//					},
//					Duration:           pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceDuration),
//					IsEnforcedDuration: pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceIsEnforcedDuration),
//					StartTime:          pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceStartTime),
//					WeeksOfMonths:      pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceWeeksOfMonth),
//					Months: database.SchedulingPolicySchedulingWindowWindowPreferenceMonthArray{
//						&database.SchedulingPolicySchedulingWindowWindowPreferenceMonthArgs{
//							Name: pulumi.Any(schedulingPolicySchedulingWindowWindowPreferenceMonthsName),
//						},
//					},
//				},
//				CompartmentId: pulumi.Any(compartmentId),
//				DefinedTags:   pulumi.Any(schedulingPolicySchedulingWindowDefinedTags),
//				FreeformTags: pulumi.StringMap{
//					"Department": pulumi.String("Finance"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SchedulingPolicySchedulingWindows can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Database/schedulingPolicySchedulingWindow:SchedulingPolicySchedulingWindow test_scheduling_policy_scheduling_window "schedulingPolicies/{schedulingPolicyId}/schedulingWindows/{schedulingWindowId}"
// ```
type SchedulingPolicySchedulingWindow struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// The user-friendly name for the Scheduling Window. The name does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId pulumi.StringOutput `pulumi:"schedulingPolicyId"`
	// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the Scheduling Window was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time of the next upcoming window associated within the schedulingWindow is planned to start.
	TimeNextSchedulingWindowStarts pulumi.StringOutput `pulumi:"timeNextSchedulingWindowStarts"`
	// The last date and time that the Scheduling Window was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) The Single Scheduling Window details.
	WindowPreference SchedulingPolicySchedulingWindowWindowPreferenceOutput `pulumi:"windowPreference"`
}

// NewSchedulingPolicySchedulingWindow registers a new resource with the given unique name, arguments, and options.
func NewSchedulingPolicySchedulingWindow(ctx *pulumi.Context,
	name string, args *SchedulingPolicySchedulingWindowArgs, opts ...pulumi.ResourceOption) (*SchedulingPolicySchedulingWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SchedulingPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SchedulingPolicyId'")
	}
	if args.WindowPreference == nil {
		return nil, errors.New("invalid value for required argument 'WindowPreference'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchedulingPolicySchedulingWindow
	err := ctx.RegisterResource("oci:Database/schedulingPolicySchedulingWindow:SchedulingPolicySchedulingWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedulingPolicySchedulingWindow gets an existing SchedulingPolicySchedulingWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedulingPolicySchedulingWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchedulingPolicySchedulingWindowState, opts ...pulumi.ResourceOption) (*SchedulingPolicySchedulingWindow, error) {
	var resource SchedulingPolicySchedulingWindow
	err := ctx.ReadResource("oci:Database/schedulingPolicySchedulingWindow:SchedulingPolicySchedulingWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchedulingPolicySchedulingWindow resources.
type schedulingPolicySchedulingWindowState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The user-friendly name for the Scheduling Window. The name does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId *string `pulumi:"schedulingPolicyId"`
	// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
	State *string `pulumi:"state"`
	// The date and time the Scheduling Window was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time of the next upcoming window associated within the schedulingWindow is planned to start.
	TimeNextSchedulingWindowStarts *string `pulumi:"timeNextSchedulingWindowStarts"`
	// The last date and time that the Scheduling Window was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) The Single Scheduling Window details.
	WindowPreference *SchedulingPolicySchedulingWindowWindowPreference `pulumi:"windowPreference"`
}

type SchedulingPolicySchedulingWindowState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// The user-friendly name for the Scheduling Window. The name does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId pulumi.StringPtrInput
	// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
	State pulumi.StringPtrInput
	// The date and time the Scheduling Window was created.
	TimeCreated pulumi.StringPtrInput
	// The date and time of the next upcoming window associated within the schedulingWindow is planned to start.
	TimeNextSchedulingWindowStarts pulumi.StringPtrInput
	// The last date and time that the Scheduling Window was updated.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) The Single Scheduling Window details.
	WindowPreference SchedulingPolicySchedulingWindowWindowPreferencePtrInput
}

func (SchedulingPolicySchedulingWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicySchedulingWindowState)(nil)).Elem()
}

type schedulingPolicySchedulingWindowArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId string `pulumi:"schedulingPolicyId"`
	// (Updatable) The Single Scheduling Window details.
	WindowPreference SchedulingPolicySchedulingWindowWindowPreference `pulumi:"windowPreference"`
}

// The set of arguments for constructing a SchedulingPolicySchedulingWindow resource.
type SchedulingPolicySchedulingWindowArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.StringMapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.StringMapInput
	// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	SchedulingPolicyId pulumi.StringInput
	// (Updatable) The Single Scheduling Window details.
	WindowPreference SchedulingPolicySchedulingWindowWindowPreferenceInput
}

func (SchedulingPolicySchedulingWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schedulingPolicySchedulingWindowArgs)(nil)).Elem()
}

type SchedulingPolicySchedulingWindowInput interface {
	pulumi.Input

	ToSchedulingPolicySchedulingWindowOutput() SchedulingPolicySchedulingWindowOutput
	ToSchedulingPolicySchedulingWindowOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowOutput
}

func (*SchedulingPolicySchedulingWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (i *SchedulingPolicySchedulingWindow) ToSchedulingPolicySchedulingWindowOutput() SchedulingPolicySchedulingWindowOutput {
	return i.ToSchedulingPolicySchedulingWindowOutputWithContext(context.Background())
}

func (i *SchedulingPolicySchedulingWindow) ToSchedulingPolicySchedulingWindowOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicySchedulingWindowOutput)
}

// SchedulingPolicySchedulingWindowArrayInput is an input type that accepts SchedulingPolicySchedulingWindowArray and SchedulingPolicySchedulingWindowArrayOutput values.
// You can construct a concrete instance of `SchedulingPolicySchedulingWindowArrayInput` via:
//
//	SchedulingPolicySchedulingWindowArray{ SchedulingPolicySchedulingWindowArgs{...} }
type SchedulingPolicySchedulingWindowArrayInput interface {
	pulumi.Input

	ToSchedulingPolicySchedulingWindowArrayOutput() SchedulingPolicySchedulingWindowArrayOutput
	ToSchedulingPolicySchedulingWindowArrayOutputWithContext(context.Context) SchedulingPolicySchedulingWindowArrayOutput
}

type SchedulingPolicySchedulingWindowArray []SchedulingPolicySchedulingWindowInput

func (SchedulingPolicySchedulingWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (i SchedulingPolicySchedulingWindowArray) ToSchedulingPolicySchedulingWindowArrayOutput() SchedulingPolicySchedulingWindowArrayOutput {
	return i.ToSchedulingPolicySchedulingWindowArrayOutputWithContext(context.Background())
}

func (i SchedulingPolicySchedulingWindowArray) ToSchedulingPolicySchedulingWindowArrayOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicySchedulingWindowArrayOutput)
}

// SchedulingPolicySchedulingWindowMapInput is an input type that accepts SchedulingPolicySchedulingWindowMap and SchedulingPolicySchedulingWindowMapOutput values.
// You can construct a concrete instance of `SchedulingPolicySchedulingWindowMapInput` via:
//
//	SchedulingPolicySchedulingWindowMap{ "key": SchedulingPolicySchedulingWindowArgs{...} }
type SchedulingPolicySchedulingWindowMapInput interface {
	pulumi.Input

	ToSchedulingPolicySchedulingWindowMapOutput() SchedulingPolicySchedulingWindowMapOutput
	ToSchedulingPolicySchedulingWindowMapOutputWithContext(context.Context) SchedulingPolicySchedulingWindowMapOutput
}

type SchedulingPolicySchedulingWindowMap map[string]SchedulingPolicySchedulingWindowInput

func (SchedulingPolicySchedulingWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (i SchedulingPolicySchedulingWindowMap) ToSchedulingPolicySchedulingWindowMapOutput() SchedulingPolicySchedulingWindowMapOutput {
	return i.ToSchedulingPolicySchedulingWindowMapOutputWithContext(context.Background())
}

func (i SchedulingPolicySchedulingWindowMap) ToSchedulingPolicySchedulingWindowMapOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPolicySchedulingWindowMapOutput)
}

type SchedulingPolicySchedulingWindowOutput struct{ *pulumi.OutputState }

func (SchedulingPolicySchedulingWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (o SchedulingPolicySchedulingWindowOutput) ToSchedulingPolicySchedulingWindowOutput() SchedulingPolicySchedulingWindowOutput {
	return o
}

func (o SchedulingPolicySchedulingWindowOutput) ToSchedulingPolicySchedulingWindowOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o SchedulingPolicySchedulingWindowOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o SchedulingPolicySchedulingWindowOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The user-friendly name for the Scheduling Window. The name does not need to be unique.
func (o SchedulingPolicySchedulingWindowOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o SchedulingPolicySchedulingWindowOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Additional information about the current lifecycle state.
func (o SchedulingPolicySchedulingWindowOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The Scheduling Policy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o SchedulingPolicySchedulingWindowOutput) SchedulingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.SchedulingPolicyId }).(pulumi.StringOutput)
}

// The current state of the Scheduling Window. Valid states are CREATING, ACTIVE, UPDATING, FAILED, DELETING and DELETED.
func (o SchedulingPolicySchedulingWindowOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the Scheduling Window was created.
func (o SchedulingPolicySchedulingWindowOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time of the next upcoming window associated within the schedulingWindow is planned to start.
func (o SchedulingPolicySchedulingWindowOutput) TimeNextSchedulingWindowStarts() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.TimeNextSchedulingWindowStarts }).(pulumi.StringOutput)
}

// The last date and time that the Scheduling Window was updated.
func (o SchedulingPolicySchedulingWindowOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) The Single Scheduling Window details.
func (o SchedulingPolicySchedulingWindowOutput) WindowPreference() SchedulingPolicySchedulingWindowWindowPreferenceOutput {
	return o.ApplyT(func(v *SchedulingPolicySchedulingWindow) SchedulingPolicySchedulingWindowWindowPreferenceOutput {
		return v.WindowPreference
	}).(SchedulingPolicySchedulingWindowWindowPreferenceOutput)
}

type SchedulingPolicySchedulingWindowArrayOutput struct{ *pulumi.OutputState }

func (SchedulingPolicySchedulingWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (o SchedulingPolicySchedulingWindowArrayOutput) ToSchedulingPolicySchedulingWindowArrayOutput() SchedulingPolicySchedulingWindowArrayOutput {
	return o
}

func (o SchedulingPolicySchedulingWindowArrayOutput) ToSchedulingPolicySchedulingWindowArrayOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowArrayOutput {
	return o
}

func (o SchedulingPolicySchedulingWindowArrayOutput) Index(i pulumi.IntInput) SchedulingPolicySchedulingWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchedulingPolicySchedulingWindow {
		return vs[0].([]*SchedulingPolicySchedulingWindow)[vs[1].(int)]
	}).(SchedulingPolicySchedulingWindowOutput)
}

type SchedulingPolicySchedulingWindowMapOutput struct{ *pulumi.OutputState }

func (SchedulingPolicySchedulingWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchedulingPolicySchedulingWindow)(nil)).Elem()
}

func (o SchedulingPolicySchedulingWindowMapOutput) ToSchedulingPolicySchedulingWindowMapOutput() SchedulingPolicySchedulingWindowMapOutput {
	return o
}

func (o SchedulingPolicySchedulingWindowMapOutput) ToSchedulingPolicySchedulingWindowMapOutputWithContext(ctx context.Context) SchedulingPolicySchedulingWindowMapOutput {
	return o
}

func (o SchedulingPolicySchedulingWindowMapOutput) MapIndex(k pulumi.StringInput) SchedulingPolicySchedulingWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchedulingPolicySchedulingWindow {
		return vs[0].(map[string]*SchedulingPolicySchedulingWindow)[vs[1].(string)]
	}).(SchedulingPolicySchedulingWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicySchedulingWindowInput)(nil)).Elem(), &SchedulingPolicySchedulingWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicySchedulingWindowArrayInput)(nil)).Elem(), SchedulingPolicySchedulingWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingPolicySchedulingWindowMapInput)(nil)).Elem(), SchedulingPolicySchedulingWindowMap{})
	pulumi.RegisterOutputType(SchedulingPolicySchedulingWindowOutput{})
	pulumi.RegisterOutputType(SchedulingPolicySchedulingWindowArrayOutput{})
	pulumi.RegisterOutputType(SchedulingPolicySchedulingWindowMapOutput{})
}
