// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External My Sql Database resource in Oracle Cloud Infrastructure Database Management service.
//
// Creates an external MySQL database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.NewExternalMySqlDatabase(ctx, "test_external_my_sql_database", &databasemanagement.ExternalMySqlDatabaseArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				DbName:        pulumi.Any(externalMySqlDatabaseDbName),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExternalMySqlDatabases can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DatabaseManagement/externalMySqlDatabase:ExternalMySqlDatabase test_external_my_sql_database "id"
// ```
type ExternalMySqlDatabase struct {
	pulumi.CustomResourceState

	// OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Name of the External MySQL Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// OCID of External MySQL Database.
	ExternalDatabaseId pulumi.StringOutput `pulumi:"externalDatabaseId"`
}

// NewExternalMySqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewExternalMySqlDatabase(ctx *pulumi.Context,
	name string, args *ExternalMySqlDatabaseArgs, opts ...pulumi.ResourceOption) (*ExternalMySqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalMySqlDatabase
	err := ctx.RegisterResource("oci:DatabaseManagement/externalMySqlDatabase:ExternalMySqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalMySqlDatabase gets an existing ExternalMySqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalMySqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalMySqlDatabaseState, opts ...pulumi.ResourceOption) (*ExternalMySqlDatabase, error) {
	var resource ExternalMySqlDatabase
	err := ctx.ReadResource("oci:DatabaseManagement/externalMySqlDatabase:ExternalMySqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalMySqlDatabase resources.
type externalMySqlDatabaseState struct {
	// OCID of compartment for the External MySQL Database.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Name of the External MySQL Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DbName *string `pulumi:"dbName"`
	// OCID of External MySQL Database.
	ExternalDatabaseId *string `pulumi:"externalDatabaseId"`
}

type ExternalMySqlDatabaseState struct {
	// OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Name of the External MySQL Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DbName pulumi.StringPtrInput
	// OCID of External MySQL Database.
	ExternalDatabaseId pulumi.StringPtrInput
}

func (ExternalMySqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalMySqlDatabaseState)(nil)).Elem()
}

type externalMySqlDatabaseArgs struct {
	// OCID of compartment for the External MySQL Database.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Name of the External MySQL Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DbName string `pulumi:"dbName"`
}

// The set of arguments for constructing a ExternalMySqlDatabase resource.
type ExternalMySqlDatabaseArgs struct {
	// OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringInput
	// (Updatable) Name of the External MySQL Database.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	DbName pulumi.StringInput
}

func (ExternalMySqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalMySqlDatabaseArgs)(nil)).Elem()
}

type ExternalMySqlDatabaseInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseOutput() ExternalMySqlDatabaseOutput
	ToExternalMySqlDatabaseOutputWithContext(ctx context.Context) ExternalMySqlDatabaseOutput
}

func (*ExternalMySqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMySqlDatabase)(nil)).Elem()
}

func (i *ExternalMySqlDatabase) ToExternalMySqlDatabaseOutput() ExternalMySqlDatabaseOutput {
	return i.ToExternalMySqlDatabaseOutputWithContext(context.Background())
}

func (i *ExternalMySqlDatabase) ToExternalMySqlDatabaseOutputWithContext(ctx context.Context) ExternalMySqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseOutput)
}

// ExternalMySqlDatabaseArrayInput is an input type that accepts ExternalMySqlDatabaseArray and ExternalMySqlDatabaseArrayOutput values.
// You can construct a concrete instance of `ExternalMySqlDatabaseArrayInput` via:
//
//	ExternalMySqlDatabaseArray{ ExternalMySqlDatabaseArgs{...} }
type ExternalMySqlDatabaseArrayInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseArrayOutput() ExternalMySqlDatabaseArrayOutput
	ToExternalMySqlDatabaseArrayOutputWithContext(context.Context) ExternalMySqlDatabaseArrayOutput
}

type ExternalMySqlDatabaseArray []ExternalMySqlDatabaseInput

func (ExternalMySqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalMySqlDatabase)(nil)).Elem()
}

func (i ExternalMySqlDatabaseArray) ToExternalMySqlDatabaseArrayOutput() ExternalMySqlDatabaseArrayOutput {
	return i.ToExternalMySqlDatabaseArrayOutputWithContext(context.Background())
}

func (i ExternalMySqlDatabaseArray) ToExternalMySqlDatabaseArrayOutputWithContext(ctx context.Context) ExternalMySqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseArrayOutput)
}

// ExternalMySqlDatabaseMapInput is an input type that accepts ExternalMySqlDatabaseMap and ExternalMySqlDatabaseMapOutput values.
// You can construct a concrete instance of `ExternalMySqlDatabaseMapInput` via:
//
//	ExternalMySqlDatabaseMap{ "key": ExternalMySqlDatabaseArgs{...} }
type ExternalMySqlDatabaseMapInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseMapOutput() ExternalMySqlDatabaseMapOutput
	ToExternalMySqlDatabaseMapOutputWithContext(context.Context) ExternalMySqlDatabaseMapOutput
}

type ExternalMySqlDatabaseMap map[string]ExternalMySqlDatabaseInput

func (ExternalMySqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalMySqlDatabase)(nil)).Elem()
}

func (i ExternalMySqlDatabaseMap) ToExternalMySqlDatabaseMapOutput() ExternalMySqlDatabaseMapOutput {
	return i.ToExternalMySqlDatabaseMapOutputWithContext(context.Background())
}

func (i ExternalMySqlDatabaseMap) ToExternalMySqlDatabaseMapOutputWithContext(ctx context.Context) ExternalMySqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseMapOutput)
}

type ExternalMySqlDatabaseOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMySqlDatabase)(nil)).Elem()
}

func (o ExternalMySqlDatabaseOutput) ToExternalMySqlDatabaseOutput() ExternalMySqlDatabaseOutput {
	return o
}

func (o ExternalMySqlDatabaseOutput) ToExternalMySqlDatabaseOutputWithContext(ctx context.Context) ExternalMySqlDatabaseOutput {
	return o
}

// OCID of compartment for the External MySQL Database.
func (o ExternalMySqlDatabaseOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabase) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Name of the External MySQL Database.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ExternalMySqlDatabaseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabase) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// OCID of External MySQL Database.
func (o ExternalMySqlDatabaseOutput) ExternalDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabase) pulumi.StringOutput { return v.ExternalDatabaseId }).(pulumi.StringOutput)
}

type ExternalMySqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalMySqlDatabase)(nil)).Elem()
}

func (o ExternalMySqlDatabaseArrayOutput) ToExternalMySqlDatabaseArrayOutput() ExternalMySqlDatabaseArrayOutput {
	return o
}

func (o ExternalMySqlDatabaseArrayOutput) ToExternalMySqlDatabaseArrayOutputWithContext(ctx context.Context) ExternalMySqlDatabaseArrayOutput {
	return o
}

func (o ExternalMySqlDatabaseArrayOutput) Index(i pulumi.IntInput) ExternalMySqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalMySqlDatabase {
		return vs[0].([]*ExternalMySqlDatabase)[vs[1].(int)]
	}).(ExternalMySqlDatabaseOutput)
}

type ExternalMySqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalMySqlDatabase)(nil)).Elem()
}

func (o ExternalMySqlDatabaseMapOutput) ToExternalMySqlDatabaseMapOutput() ExternalMySqlDatabaseMapOutput {
	return o
}

func (o ExternalMySqlDatabaseMapOutput) ToExternalMySqlDatabaseMapOutputWithContext(ctx context.Context) ExternalMySqlDatabaseMapOutput {
	return o
}

func (o ExternalMySqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) ExternalMySqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalMySqlDatabase {
		return vs[0].(map[string]*ExternalMySqlDatabase)[vs[1].(string)]
	}).(ExternalMySqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseInput)(nil)).Elem(), &ExternalMySqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseArrayInput)(nil)).Elem(), ExternalMySqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseMapInput)(nil)).Elem(), ExternalMySqlDatabaseMap{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseOutput{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseMapOutput{})
}
