// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External My Sql Database Connector resource in Oracle Cloud Infrastructure Database Management service.
//
// Creates an external MySQL connector resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.NewExternalMySqlDatabaseConnector(ctx, "test_external_my_sql_database_connector", &databasemanagement.ExternalMySqlDatabaseConnectorArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				ConnectorDetails: &databasemanagement.ExternalMySqlDatabaseConnectorConnectorDetailsArgs{
//					CredentialType:     pulumi.Any(externalMySqlDatabaseConnectorConnectorDetailsCredentialType),
//					DisplayName:        pulumi.Any(externalMySqlDatabaseConnectorConnectorDetailsDisplayName),
//					ExternalDatabaseId: pulumi.Any(testExternalDatabase.Id),
//					HostName:           pulumi.Any(externalMySqlDatabaseConnectorConnectorDetailsHostName),
//					MacsAgentId:        pulumi.Any(testAgent.Id),
//					NetworkProtocol:    pulumi.Any(externalMySqlDatabaseConnectorConnectorDetailsNetworkProtocol),
//					Port:               pulumi.Any(externalMySqlDatabaseConnectorConnectorDetailsPort),
//					SslSecretId:        pulumi.Any(testSecret.Id),
//				},
//				IsTestConnectionParam: pulumi.Any(externalMySqlDatabaseConnectorIsTestConnectionParam),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ExternalMySqlDatabaseConnectors can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector test_external_my_sql_database_connector "id"
// ```
type ExternalMySqlDatabaseConnector struct {
	pulumi.CustomResourceState

	// Oracle Cloud Infrastructure Services associated with this connector.
	AssociatedServices pulumi.StringOutput `pulumi:"associatedServices"`
	// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	CheckConnectionStatusTrigger pulumi.IntPtrOutput `pulumi:"checkConnectionStatusTrigger"`
	// (Updatable) OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Connection Status
	ConnectionStatus pulumi.StringOutput `pulumi:"connectionStatus"`
	// (Updatable) Create Details of external database connector.
	ConnectorDetails ExternalMySqlDatabaseConnectorConnectorDetailsOutput `pulumi:"connectorDetails"`
	// Connector Type.
	ConnectorType pulumi.StringOutput `pulumi:"connectorType"`
	// Credential type used to connect to database.
	CredentialType pulumi.StringOutput `pulumi:"credentialType"`
	// OCID of MySQL Database resource
	ExternalDatabaseId pulumi.StringOutput `pulumi:"externalDatabaseId"`
	// Host name for Connector.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Parameter indicating whether database connection needs to be tested.
	IsTestConnectionParam pulumi.BoolOutput `pulumi:"isTestConnectionParam"`
	// Agent Id of the MACS agent.
	MacsAgentId pulumi.StringOutput `pulumi:"macsAgentId"`
	// External MySQL Database Connector Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network Protocol.
	NetworkProtocol pulumi.StringOutput `pulumi:"networkProtocol"`
	// Connector port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Name of MySQL Database.
	SourceDatabase pulumi.StringOutput `pulumi:"sourceDatabase"`
	// Type of MySQL Database.
	SourceDatabaseType pulumi.StringOutput `pulumi:"sourceDatabaseType"`
	// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretId pulumi.StringOutput `pulumi:"sslSecretId"`
	// Name of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretName pulumi.StringOutput `pulumi:"sslSecretName"`
	// Indicates lifecycle  state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// Time when connection status was last updated.
	TimeConnectionStatusUpdated pulumi.StringOutput `pulumi:"timeConnectionStatusUpdated"`
	// Connector creation time.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Connector update time.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewExternalMySqlDatabaseConnector registers a new resource with the given unique name, arguments, and options.
func NewExternalMySqlDatabaseConnector(ctx *pulumi.Context,
	name string, args *ExternalMySqlDatabaseConnectorArgs, opts ...pulumi.ResourceOption) (*ExternalMySqlDatabaseConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ConnectorDetails == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorDetails'")
	}
	if args.IsTestConnectionParam == nil {
		return nil, errors.New("invalid value for required argument 'IsTestConnectionParam'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExternalMySqlDatabaseConnector
	err := ctx.RegisterResource("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExternalMySqlDatabaseConnector gets an existing ExternalMySqlDatabaseConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExternalMySqlDatabaseConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExternalMySqlDatabaseConnectorState, opts ...pulumi.ResourceOption) (*ExternalMySqlDatabaseConnector, error) {
	var resource ExternalMySqlDatabaseConnector
	err := ctx.ReadResource("oci:DatabaseManagement/externalMySqlDatabaseConnector:ExternalMySqlDatabaseConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExternalMySqlDatabaseConnector resources.
type externalMySqlDatabaseConnectorState struct {
	// Oracle Cloud Infrastructure Services associated with this connector.
	AssociatedServices *string `pulumi:"associatedServices"`
	// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	CheckConnectionStatusTrigger *int `pulumi:"checkConnectionStatusTrigger"`
	// (Updatable) OCID of compartment for the External MySQL Database.
	CompartmentId *string `pulumi:"compartmentId"`
	// Connection Status
	ConnectionStatus *string `pulumi:"connectionStatus"`
	// (Updatable) Create Details of external database connector.
	ConnectorDetails *ExternalMySqlDatabaseConnectorConnectorDetails `pulumi:"connectorDetails"`
	// Connector Type.
	ConnectorType *string `pulumi:"connectorType"`
	// Credential type used to connect to database.
	CredentialType *string `pulumi:"credentialType"`
	// OCID of MySQL Database resource
	ExternalDatabaseId *string `pulumi:"externalDatabaseId"`
	// Host name for Connector.
	HostName *string `pulumi:"hostName"`
	// Parameter indicating whether database connection needs to be tested.
	IsTestConnectionParam *bool `pulumi:"isTestConnectionParam"`
	// Agent Id of the MACS agent.
	MacsAgentId *string `pulumi:"macsAgentId"`
	// External MySQL Database Connector Name.
	Name *string `pulumi:"name"`
	// Network Protocol.
	NetworkProtocol *string `pulumi:"networkProtocol"`
	// Connector port.
	Port *int `pulumi:"port"`
	// Name of MySQL Database.
	SourceDatabase *string `pulumi:"sourceDatabase"`
	// Type of MySQL Database.
	SourceDatabaseType *string `pulumi:"sourceDatabaseType"`
	// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretId *string `pulumi:"sslSecretId"`
	// Name of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretName *string `pulumi:"sslSecretName"`
	// Indicates lifecycle  state of the resource.
	State *string `pulumi:"state"`
	// Time when connection status was last updated.
	TimeConnectionStatusUpdated *string `pulumi:"timeConnectionStatusUpdated"`
	// Connector creation time.
	TimeCreated *string `pulumi:"timeCreated"`
	// Connector update time.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ExternalMySqlDatabaseConnectorState struct {
	// Oracle Cloud Infrastructure Services associated with this connector.
	AssociatedServices pulumi.StringPtrInput
	// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	CheckConnectionStatusTrigger pulumi.IntPtrInput
	// (Updatable) OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringPtrInput
	// Connection Status
	ConnectionStatus pulumi.StringPtrInput
	// (Updatable) Create Details of external database connector.
	ConnectorDetails ExternalMySqlDatabaseConnectorConnectorDetailsPtrInput
	// Connector Type.
	ConnectorType pulumi.StringPtrInput
	// Credential type used to connect to database.
	CredentialType pulumi.StringPtrInput
	// OCID of MySQL Database resource
	ExternalDatabaseId pulumi.StringPtrInput
	// Host name for Connector.
	HostName pulumi.StringPtrInput
	// Parameter indicating whether database connection needs to be tested.
	IsTestConnectionParam pulumi.BoolPtrInput
	// Agent Id of the MACS agent.
	MacsAgentId pulumi.StringPtrInput
	// External MySQL Database Connector Name.
	Name pulumi.StringPtrInput
	// Network Protocol.
	NetworkProtocol pulumi.StringPtrInput
	// Connector port.
	Port pulumi.IntPtrInput
	// Name of MySQL Database.
	SourceDatabase pulumi.StringPtrInput
	// Type of MySQL Database.
	SourceDatabaseType pulumi.StringPtrInput
	// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretId pulumi.StringPtrInput
	// Name of the SSL secret, if TCPS with SSL is used to connect to database.
	SslSecretName pulumi.StringPtrInput
	// Indicates lifecycle  state of the resource.
	State pulumi.StringPtrInput
	// Time when connection status was last updated.
	TimeConnectionStatusUpdated pulumi.StringPtrInput
	// Connector creation time.
	TimeCreated pulumi.StringPtrInput
	// Connector update time.
	TimeUpdated pulumi.StringPtrInput
}

func (ExternalMySqlDatabaseConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*externalMySqlDatabaseConnectorState)(nil)).Elem()
}

type externalMySqlDatabaseConnectorArgs struct {
	// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	CheckConnectionStatusTrigger *int `pulumi:"checkConnectionStatusTrigger"`
	// (Updatable) OCID of compartment for the External MySQL Database.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Create Details of external database connector.
	ConnectorDetails ExternalMySqlDatabaseConnectorConnectorDetails `pulumi:"connectorDetails"`
	// Parameter indicating whether database connection needs to be tested.
	IsTestConnectionParam bool `pulumi:"isTestConnectionParam"`
}

// The set of arguments for constructing a ExternalMySqlDatabaseConnector resource.
type ExternalMySqlDatabaseConnectorArgs struct {
	// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	CheckConnectionStatusTrigger pulumi.IntPtrInput
	// (Updatable) OCID of compartment for the External MySQL Database.
	CompartmentId pulumi.StringInput
	// (Updatable) Create Details of external database connector.
	ConnectorDetails ExternalMySqlDatabaseConnectorConnectorDetailsInput
	// Parameter indicating whether database connection needs to be tested.
	IsTestConnectionParam pulumi.BoolInput
}

func (ExternalMySqlDatabaseConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*externalMySqlDatabaseConnectorArgs)(nil)).Elem()
}

type ExternalMySqlDatabaseConnectorInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseConnectorOutput() ExternalMySqlDatabaseConnectorOutput
	ToExternalMySqlDatabaseConnectorOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorOutput
}

func (*ExternalMySqlDatabaseConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (i *ExternalMySqlDatabaseConnector) ToExternalMySqlDatabaseConnectorOutput() ExternalMySqlDatabaseConnectorOutput {
	return i.ToExternalMySqlDatabaseConnectorOutputWithContext(context.Background())
}

func (i *ExternalMySqlDatabaseConnector) ToExternalMySqlDatabaseConnectorOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseConnectorOutput)
}

// ExternalMySqlDatabaseConnectorArrayInput is an input type that accepts ExternalMySqlDatabaseConnectorArray and ExternalMySqlDatabaseConnectorArrayOutput values.
// You can construct a concrete instance of `ExternalMySqlDatabaseConnectorArrayInput` via:
//
//	ExternalMySqlDatabaseConnectorArray{ ExternalMySqlDatabaseConnectorArgs{...} }
type ExternalMySqlDatabaseConnectorArrayInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseConnectorArrayOutput() ExternalMySqlDatabaseConnectorArrayOutput
	ToExternalMySqlDatabaseConnectorArrayOutputWithContext(context.Context) ExternalMySqlDatabaseConnectorArrayOutput
}

type ExternalMySqlDatabaseConnectorArray []ExternalMySqlDatabaseConnectorInput

func (ExternalMySqlDatabaseConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (i ExternalMySqlDatabaseConnectorArray) ToExternalMySqlDatabaseConnectorArrayOutput() ExternalMySqlDatabaseConnectorArrayOutput {
	return i.ToExternalMySqlDatabaseConnectorArrayOutputWithContext(context.Background())
}

func (i ExternalMySqlDatabaseConnectorArray) ToExternalMySqlDatabaseConnectorArrayOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseConnectorArrayOutput)
}

// ExternalMySqlDatabaseConnectorMapInput is an input type that accepts ExternalMySqlDatabaseConnectorMap and ExternalMySqlDatabaseConnectorMapOutput values.
// You can construct a concrete instance of `ExternalMySqlDatabaseConnectorMapInput` via:
//
//	ExternalMySqlDatabaseConnectorMap{ "key": ExternalMySqlDatabaseConnectorArgs{...} }
type ExternalMySqlDatabaseConnectorMapInput interface {
	pulumi.Input

	ToExternalMySqlDatabaseConnectorMapOutput() ExternalMySqlDatabaseConnectorMapOutput
	ToExternalMySqlDatabaseConnectorMapOutputWithContext(context.Context) ExternalMySqlDatabaseConnectorMapOutput
}

type ExternalMySqlDatabaseConnectorMap map[string]ExternalMySqlDatabaseConnectorInput

func (ExternalMySqlDatabaseConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (i ExternalMySqlDatabaseConnectorMap) ToExternalMySqlDatabaseConnectorMapOutput() ExternalMySqlDatabaseConnectorMapOutput {
	return i.ToExternalMySqlDatabaseConnectorMapOutputWithContext(context.Background())
}

func (i ExternalMySqlDatabaseConnectorMap) ToExternalMySqlDatabaseConnectorMapOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalMySqlDatabaseConnectorMapOutput)
}

type ExternalMySqlDatabaseConnectorOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (o ExternalMySqlDatabaseConnectorOutput) ToExternalMySqlDatabaseConnectorOutput() ExternalMySqlDatabaseConnectorOutput {
	return o
}

func (o ExternalMySqlDatabaseConnectorOutput) ToExternalMySqlDatabaseConnectorOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorOutput {
	return o
}

// Oracle Cloud Infrastructure Services associated with this connector.
func (o ExternalMySqlDatabaseConnectorOutput) AssociatedServices() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.AssociatedServices }).(pulumi.StringOutput)
}

// (Updatable) An optional property when incremented triggers Check Connection Status. Could be set to any integer value.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ExternalMySqlDatabaseConnectorOutput) CheckConnectionStatusTrigger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.IntPtrOutput { return v.CheckConnectionStatusTrigger }).(pulumi.IntPtrOutput)
}

// (Updatable) OCID of compartment for the External MySQL Database.
func (o ExternalMySqlDatabaseConnectorOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Connection Status
func (o ExternalMySqlDatabaseConnectorOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// (Updatable) Create Details of external database connector.
func (o ExternalMySqlDatabaseConnectorOutput) ConnectorDetails() ExternalMySqlDatabaseConnectorConnectorDetailsOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) ExternalMySqlDatabaseConnectorConnectorDetailsOutput {
		return v.ConnectorDetails
	}).(ExternalMySqlDatabaseConnectorConnectorDetailsOutput)
}

// Connector Type.
func (o ExternalMySqlDatabaseConnectorOutput) ConnectorType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.ConnectorType }).(pulumi.StringOutput)
}

// Credential type used to connect to database.
func (o ExternalMySqlDatabaseConnectorOutput) CredentialType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.CredentialType }).(pulumi.StringOutput)
}

// OCID of MySQL Database resource
func (o ExternalMySqlDatabaseConnectorOutput) ExternalDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.ExternalDatabaseId }).(pulumi.StringOutput)
}

// Host name for Connector.
func (o ExternalMySqlDatabaseConnectorOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// Parameter indicating whether database connection needs to be tested.
func (o ExternalMySqlDatabaseConnectorOutput) IsTestConnectionParam() pulumi.BoolOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.BoolOutput { return v.IsTestConnectionParam }).(pulumi.BoolOutput)
}

// Agent Id of the MACS agent.
func (o ExternalMySqlDatabaseConnectorOutput) MacsAgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.MacsAgentId }).(pulumi.StringOutput)
}

// External MySQL Database Connector Name.
func (o ExternalMySqlDatabaseConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network Protocol.
func (o ExternalMySqlDatabaseConnectorOutput) NetworkProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.NetworkProtocol }).(pulumi.StringOutput)
}

// Connector port.
func (o ExternalMySqlDatabaseConnectorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Name of MySQL Database.
func (o ExternalMySqlDatabaseConnectorOutput) SourceDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.SourceDatabase }).(pulumi.StringOutput)
}

// Type of MySQL Database.
func (o ExternalMySqlDatabaseConnectorOutput) SourceDatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.SourceDatabaseType }).(pulumi.StringOutput)
}

// OCID of the SSL secret, if TCPS with SSL is used to connect to database.
func (o ExternalMySqlDatabaseConnectorOutput) SslSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.SslSecretId }).(pulumi.StringOutput)
}

// Name of the SSL secret, if TCPS with SSL is used to connect to database.
func (o ExternalMySqlDatabaseConnectorOutput) SslSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.SslSecretName }).(pulumi.StringOutput)
}

// Indicates lifecycle  state of the resource.
func (o ExternalMySqlDatabaseConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Time when connection status was last updated.
func (o ExternalMySqlDatabaseConnectorOutput) TimeConnectionStatusUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.TimeConnectionStatusUpdated }).(pulumi.StringOutput)
}

// Connector creation time.
func (o ExternalMySqlDatabaseConnectorOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Connector update time.
func (o ExternalMySqlDatabaseConnectorOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ExternalMySqlDatabaseConnector) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ExternalMySqlDatabaseConnectorArrayOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (o ExternalMySqlDatabaseConnectorArrayOutput) ToExternalMySqlDatabaseConnectorArrayOutput() ExternalMySqlDatabaseConnectorArrayOutput {
	return o
}

func (o ExternalMySqlDatabaseConnectorArrayOutput) ToExternalMySqlDatabaseConnectorArrayOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorArrayOutput {
	return o
}

func (o ExternalMySqlDatabaseConnectorArrayOutput) Index(i pulumi.IntInput) ExternalMySqlDatabaseConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExternalMySqlDatabaseConnector {
		return vs[0].([]*ExternalMySqlDatabaseConnector)[vs[1].(int)]
	}).(ExternalMySqlDatabaseConnectorOutput)
}

type ExternalMySqlDatabaseConnectorMapOutput struct{ *pulumi.OutputState }

func (ExternalMySqlDatabaseConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExternalMySqlDatabaseConnector)(nil)).Elem()
}

func (o ExternalMySqlDatabaseConnectorMapOutput) ToExternalMySqlDatabaseConnectorMapOutput() ExternalMySqlDatabaseConnectorMapOutput {
	return o
}

func (o ExternalMySqlDatabaseConnectorMapOutput) ToExternalMySqlDatabaseConnectorMapOutputWithContext(ctx context.Context) ExternalMySqlDatabaseConnectorMapOutput {
	return o
}

func (o ExternalMySqlDatabaseConnectorMapOutput) MapIndex(k pulumi.StringInput) ExternalMySqlDatabaseConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExternalMySqlDatabaseConnector {
		return vs[0].(map[string]*ExternalMySqlDatabaseConnector)[vs[1].(string)]
	}).(ExternalMySqlDatabaseConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseConnectorInput)(nil)).Elem(), &ExternalMySqlDatabaseConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseConnectorArrayInput)(nil)).Elem(), ExternalMySqlDatabaseConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalMySqlDatabaseConnectorMapInput)(nil)).Elem(), ExternalMySqlDatabaseConnectorMap{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseConnectorOutput{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseConnectorArrayOutput{})
	pulumi.RegisterOutputType(ExternalMySqlDatabaseConnectorMapOutput{})
}
