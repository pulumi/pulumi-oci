// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific External Exadata Storage Server Iorm Plan resource in Oracle Cloud Infrastructure Database Management service.
//
// Get the IORM plan from the specific Exadata storage server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.GetExternalExadataStorageServerIormPlan(ctx, &databasemanagement.GetExternalExadataStorageServerIormPlanArgs{
//				ExternalExadataStorageServerId: testExternalExadataStorageServer.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetExternalExadataStorageServerIormPlan(ctx *pulumi.Context, args *GetExternalExadataStorageServerIormPlanArgs, opts ...pulumi.InvokeOption) (*GetExternalExadataStorageServerIormPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetExternalExadataStorageServerIormPlanResult
	err := ctx.Invoke("oci:DatabaseManagement/getExternalExadataStorageServerIormPlan:getExternalExadataStorageServerIormPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExternalExadataStorageServerIormPlan.
type GetExternalExadataStorageServerIormPlanArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
	ExternalExadataStorageServerId string `pulumi:"externalExadataStorageServerId"`
}

// A collection of values returned by getExternalExadataStorageServerIormPlan.
type GetExternalExadataStorageServerIormPlanResult struct {
	// The resource allocation directives must all use the share attribute, or they must all use the level and allocation attributes. If you use the share attribute to allocate I/O resources, then the database plan can have a maximum of 1024 directives. If you use the level and allocation attributes to allocate I/O resources, then the database plan can have a maximum of 32 directives. Only one directive is allowed for each database name and each profile name.
	DbPlans                        []GetExternalExadataStorageServerIormPlanDbPlan `pulumi:"dbPlans"`
	ExternalExadataStorageServerId string                                          `pulumi:"externalExadataStorageServerId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The objective of the IORM plan.
	PlanObjective string `pulumi:"planObjective"`
	// The status of the IORM plan.
	PlanStatus string `pulumi:"planStatus"`
}

func GetExternalExadataStorageServerIormPlanOutput(ctx *pulumi.Context, args GetExternalExadataStorageServerIormPlanOutputArgs, opts ...pulumi.InvokeOption) GetExternalExadataStorageServerIormPlanResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetExternalExadataStorageServerIormPlanResultOutput, error) {
			args := v.(GetExternalExadataStorageServerIormPlanArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getExternalExadataStorageServerIormPlan:getExternalExadataStorageServerIormPlan", args, GetExternalExadataStorageServerIormPlanResultOutput{}, options).(GetExternalExadataStorageServerIormPlanResultOutput), nil
		}).(GetExternalExadataStorageServerIormPlanResultOutput)
}

// A collection of arguments for invoking getExternalExadataStorageServerIormPlan.
type GetExternalExadataStorageServerIormPlanOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
	ExternalExadataStorageServerId pulumi.StringInput `pulumi:"externalExadataStorageServerId"`
}

func (GetExternalExadataStorageServerIormPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalExadataStorageServerIormPlanArgs)(nil)).Elem()
}

// A collection of values returned by getExternalExadataStorageServerIormPlan.
type GetExternalExadataStorageServerIormPlanResultOutput struct{ *pulumi.OutputState }

func (GetExternalExadataStorageServerIormPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalExadataStorageServerIormPlanResult)(nil)).Elem()
}

func (o GetExternalExadataStorageServerIormPlanResultOutput) ToGetExternalExadataStorageServerIormPlanResultOutput() GetExternalExadataStorageServerIormPlanResultOutput {
	return o
}

func (o GetExternalExadataStorageServerIormPlanResultOutput) ToGetExternalExadataStorageServerIormPlanResultOutputWithContext(ctx context.Context) GetExternalExadataStorageServerIormPlanResultOutput {
	return o
}

// The resource allocation directives must all use the share attribute, or they must all use the level and allocation attributes. If you use the share attribute to allocate I/O resources, then the database plan can have a maximum of 1024 directives. If you use the level and allocation attributes to allocate I/O resources, then the database plan can have a maximum of 32 directives. Only one directive is allowed for each database name and each profile name.
func (o GetExternalExadataStorageServerIormPlanResultOutput) DbPlans() GetExternalExadataStorageServerIormPlanDbPlanArrayOutput {
	return o.ApplyT(func(v GetExternalExadataStorageServerIormPlanResult) []GetExternalExadataStorageServerIormPlanDbPlan {
		return v.DbPlans
	}).(GetExternalExadataStorageServerIormPlanDbPlanArrayOutput)
}

func (o GetExternalExadataStorageServerIormPlanResultOutput) ExternalExadataStorageServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalExadataStorageServerIormPlanResult) string { return v.ExternalExadataStorageServerId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetExternalExadataStorageServerIormPlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalExadataStorageServerIormPlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// The objective of the IORM plan.
func (o GetExternalExadataStorageServerIormPlanResultOutput) PlanObjective() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalExadataStorageServerIormPlanResult) string { return v.PlanObjective }).(pulumi.StringOutput)
}

// The status of the IORM plan.
func (o GetExternalExadataStorageServerIormPlanResultOutput) PlanStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalExadataStorageServerIormPlanResult) string { return v.PlanStatus }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetExternalExadataStorageServerIormPlanResultOutput{})
}
