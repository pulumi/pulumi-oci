// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed Database User resource in Oracle Cloud Infrastructure Database Management service.
//
// Gets the details of the user specified by managedDatabaseId and userName.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.GetManagedDatabaseUser(ctx, &databasemanagement.GetManagedDatabaseUserArgs{
//				ManagedDatabaseId:    testManagedDatabase.Id,
//				UserName:             testUser.Name,
//				OpcNamedCredentialId: pulumi.StringRef(managedDatabaseUserOpcNamedCredentialId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedDatabaseUser(ctx *pulumi.Context, args *GetManagedDatabaseUserArgs, opts ...pulumi.InvokeOption) (*GetManagedDatabaseUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedDatabaseUserResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedDatabaseUser:getManagedDatabaseUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedDatabaseUser.
type GetManagedDatabaseUserArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// The OCID of the Named Credential.
	OpcNamedCredentialId *string `pulumi:"opcNamedCredentialId"`
	// The name of the user whose details are to be viewed.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getManagedDatabaseUser.
type GetManagedDatabaseUserResult struct {
	// In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
	AllShared string `pulumi:"allShared"`
	// The authentication mechanism for the user.
	Authentication string `pulumi:"authentication"`
	// Indicates whether a given user is common(Y) or local(N).
	Common string `pulumi:"common"`
	// The initial resource consumer group for the User.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// The default collation for the user schema.
	DefaultCollation string `pulumi:"defaultCollation"`
	// The default tablespace for data.
	DefaultTablespace string `pulumi:"defaultTablespace"`
	// Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
	EditionsEnabled string `pulumi:"editionsEnabled"`
	// The external name of the user.
	ExternalName string `pulumi:"externalName"`
	// In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
	ExternalShared string `pulumi:"externalShared"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
	Implicit string `pulumi:"implicit"`
	// Indicates whether the user definition is inherited from another container (YES) or not (NO).
	Inherited string `pulumi:"inherited"`
	// The default local temporary tablespace for the user.
	LocalTempTablespace string `pulumi:"localTempTablespace"`
	ManagedDatabaseId   string `pulumi:"managedDatabaseId"`
	// The name of the User.
	Name                 string  `pulumi:"name"`
	OpcNamedCredentialId *string `pulumi:"opcNamedCredentialId"`
	// Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
	OracleMaintained string `pulumi:"oracleMaintained"`
	// The list of existing versions of the password hashes (also known as "verifiers") for the account.
	PasswordVersions string `pulumi:"passwordVersions"`
	// The profile name of the user.
	Profile string `pulumi:"profile"`
	// Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the "connect through" privilege for this account).
	ProxyConnect string `pulumi:"proxyConnect"`
	// The status of the user account.
	Status string `pulumi:"status"`
	// The name of the default tablespace for temporary tables or the name of a tablespace group.
	TempTablespace string `pulumi:"tempTablespace"`
	// The date and time the user was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time of the expiration of the user account.
	TimeExpiring string `pulumi:"timeExpiring"`
	// The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
	TimeLastLogin string `pulumi:"timeLastLogin"`
	// The date the account was locked, if the status of the account is LOCKED.
	TimeLocked string `pulumi:"timeLocked"`
	// The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
	TimePasswordChanged string `pulumi:"timePasswordChanged"`
	UserName            string `pulumi:"userName"`
}

func GetManagedDatabaseUserOutput(ctx *pulumi.Context, args GetManagedDatabaseUserOutputArgs, opts ...pulumi.InvokeOption) GetManagedDatabaseUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedDatabaseUserResultOutput, error) {
			args := v.(GetManagedDatabaseUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getManagedDatabaseUser:getManagedDatabaseUser", args, GetManagedDatabaseUserResultOutput{}, options).(GetManagedDatabaseUserResultOutput), nil
		}).(GetManagedDatabaseUserResultOutput)
}

// A collection of arguments for invoking getManagedDatabaseUser.
type GetManagedDatabaseUserOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// The OCID of the Named Credential.
	OpcNamedCredentialId pulumi.StringPtrInput `pulumi:"opcNamedCredentialId"`
	// The name of the user whose details are to be viewed.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetManagedDatabaseUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserArgs)(nil)).Elem()
}

// A collection of values returned by getManagedDatabaseUser.
type GetManagedDatabaseUserResultOutput struct{ *pulumi.OutputState }

func (GetManagedDatabaseUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserResult)(nil)).Elem()
}

func (o GetManagedDatabaseUserResultOutput) ToGetManagedDatabaseUserResultOutput() GetManagedDatabaseUserResultOutput {
	return o
}

func (o GetManagedDatabaseUserResultOutput) ToGetManagedDatabaseUserResultOutputWithContext(ctx context.Context) GetManagedDatabaseUserResultOutput {
	return o
}

// In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
func (o GetManagedDatabaseUserResultOutput) AllShared() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.AllShared }).(pulumi.StringOutput)
}

// The authentication mechanism for the user.
func (o GetManagedDatabaseUserResultOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Authentication }).(pulumi.StringOutput)
}

// Indicates whether a given user is common(Y) or local(N).
func (o GetManagedDatabaseUserResultOutput) Common() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Common }).(pulumi.StringOutput)
}

// The initial resource consumer group for the User.
func (o GetManagedDatabaseUserResultOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// The default collation for the user schema.
func (o GetManagedDatabaseUserResultOutput) DefaultCollation() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.DefaultCollation }).(pulumi.StringOutput)
}

// The default tablespace for data.
func (o GetManagedDatabaseUserResultOutput) DefaultTablespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.DefaultTablespace }).(pulumi.StringOutput)
}

// Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
func (o GetManagedDatabaseUserResultOutput) EditionsEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.EditionsEnabled }).(pulumi.StringOutput)
}

// The external name of the user.
func (o GetManagedDatabaseUserResultOutput) ExternalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.ExternalName }).(pulumi.StringOutput)
}

// In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
func (o GetManagedDatabaseUserResultOutput) ExternalShared() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.ExternalShared }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedDatabaseUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
func (o GetManagedDatabaseUserResultOutput) Implicit() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Implicit }).(pulumi.StringOutput)
}

// Indicates whether the user definition is inherited from another container (YES) or not (NO).
func (o GetManagedDatabaseUserResultOutput) Inherited() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Inherited }).(pulumi.StringOutput)
}

// The default local temporary tablespace for the user.
func (o GetManagedDatabaseUserResultOutput) LocalTempTablespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.LocalTempTablespace }).(pulumi.StringOutput)
}

func (o GetManagedDatabaseUserResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The name of the User.
func (o GetManagedDatabaseUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetManagedDatabaseUserResultOutput) OpcNamedCredentialId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) *string { return v.OpcNamedCredentialId }).(pulumi.StringPtrOutput)
}

// Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
func (o GetManagedDatabaseUserResultOutput) OracleMaintained() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.OracleMaintained }).(pulumi.StringOutput)
}

// The list of existing versions of the password hashes (also known as "verifiers") for the account.
func (o GetManagedDatabaseUserResultOutput) PasswordVersions() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.PasswordVersions }).(pulumi.StringOutput)
}

// The profile name of the user.
func (o GetManagedDatabaseUserResultOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Profile }).(pulumi.StringOutput)
}

// Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the "connect through" privilege for this account).
func (o GetManagedDatabaseUserResultOutput) ProxyConnect() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.ProxyConnect }).(pulumi.StringOutput)
}

// The status of the user account.
func (o GetManagedDatabaseUserResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.Status }).(pulumi.StringOutput)
}

// The name of the default tablespace for temporary tables or the name of a tablespace group.
func (o GetManagedDatabaseUserResultOutput) TempTablespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TempTablespace }).(pulumi.StringOutput)
}

// The date and time the user was created.
func (o GetManagedDatabaseUserResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time of the expiration of the user account.
func (o GetManagedDatabaseUserResultOutput) TimeExpiring() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TimeExpiring }).(pulumi.StringOutput)
}

// The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
func (o GetManagedDatabaseUserResultOutput) TimeLastLogin() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TimeLastLogin }).(pulumi.StringOutput)
}

// The date the account was locked, if the status of the account is LOCKED.
func (o GetManagedDatabaseUserResultOutput) TimeLocked() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TimeLocked }).(pulumi.StringOutput)
}

// The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
func (o GetManagedDatabaseUserResultOutput) TimePasswordChanged() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.TimePasswordChanged }).(pulumi.StringOutput)
}

func (o GetManagedDatabaseUserResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedDatabaseUserResultOutput{})
}
