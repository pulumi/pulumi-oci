// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed Database User Data Access Containers in Oracle Cloud Infrastructure Database Management service.
//
// Gets the list of containers for a specific user. This is only applicable if ALL_CONTAINERS !='Y'.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DatabaseManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DatabaseManagement.GetManagedDatabaseUserDataAccessContainers(ctx, &databasemanagement.GetManagedDatabaseUserDataAccessContainersArgs{
//				ManagedDatabaseId: oci_database_management_managed_database.Test_managed_database.Id,
//				UserName:          oci_identity_user.Test_user.Name,
//				Name:              pulumi.StringRef(_var.Managed_database_user_data_access_container_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedDatabaseUserDataAccessContainers(ctx *pulumi.Context, args *GetManagedDatabaseUserDataAccessContainersArgs, opts ...pulumi.InvokeOption) (*GetManagedDatabaseUserDataAccessContainersResult, error) {
	var rv GetManagedDatabaseUserDataAccessContainersResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedDatabaseUserDataAccessContainers:getManagedDatabaseUserDataAccessContainers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedDatabaseUserDataAccessContainers.
type GetManagedDatabaseUserDataAccessContainersArgs struct {
	Filters []GetManagedDatabaseUserDataAccessContainersFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name *string `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getManagedDatabaseUserDataAccessContainers.
type GetManagedDatabaseUserDataAccessContainersResult struct {
	// The list of data_access_container_collection.
	DataAccessContainerCollections []GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollection `pulumi:"dataAccessContainerCollections"`
	Filters                        []GetManagedDatabaseUserDataAccessContainersFilter                        `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// The name of the container included in the attribute.
	Name     *string `pulumi:"name"`
	UserName string  `pulumi:"userName"`
}

func GetManagedDatabaseUserDataAccessContainersOutput(ctx *pulumi.Context, args GetManagedDatabaseUserDataAccessContainersOutputArgs, opts ...pulumi.InvokeOption) GetManagedDatabaseUserDataAccessContainersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedDatabaseUserDataAccessContainersResult, error) {
			args := v.(GetManagedDatabaseUserDataAccessContainersArgs)
			r, err := GetManagedDatabaseUserDataAccessContainers(ctx, &args, opts...)
			var s GetManagedDatabaseUserDataAccessContainersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedDatabaseUserDataAccessContainersResultOutput)
}

// A collection of arguments for invoking getManagedDatabaseUserDataAccessContainers.
type GetManagedDatabaseUserDataAccessContainersOutputArgs struct {
	Filters GetManagedDatabaseUserDataAccessContainersFilterArrayInput `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetManagedDatabaseUserDataAccessContainersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserDataAccessContainersArgs)(nil)).Elem()
}

// A collection of values returned by getManagedDatabaseUserDataAccessContainers.
type GetManagedDatabaseUserDataAccessContainersResultOutput struct{ *pulumi.OutputState }

func (GetManagedDatabaseUserDataAccessContainersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserDataAccessContainersResult)(nil)).Elem()
}

func (o GetManagedDatabaseUserDataAccessContainersResultOutput) ToGetManagedDatabaseUserDataAccessContainersResultOutput() GetManagedDatabaseUserDataAccessContainersResultOutput {
	return o
}

func (o GetManagedDatabaseUserDataAccessContainersResultOutput) ToGetManagedDatabaseUserDataAccessContainersResultOutputWithContext(ctx context.Context) GetManagedDatabaseUserDataAccessContainersResultOutput {
	return o
}

// The list of data_access_container_collection.
func (o GetManagedDatabaseUserDataAccessContainersResultOutput) DataAccessContainerCollections() GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionArrayOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) []GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollection {
		return v.DataAccessContainerCollections
	}).(GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionArrayOutput)
}

func (o GetManagedDatabaseUserDataAccessContainersResultOutput) Filters() GetManagedDatabaseUserDataAccessContainersFilterArrayOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) []GetManagedDatabaseUserDataAccessContainersFilter {
		return v.Filters
	}).(GetManagedDatabaseUserDataAccessContainersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedDatabaseUserDataAccessContainersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedDatabaseUserDataAccessContainersResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The name of the container included in the attribute.
func (o GetManagedDatabaseUserDataAccessContainersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetManagedDatabaseUserDataAccessContainersResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserDataAccessContainersResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedDatabaseUserDataAccessContainersResultOutput{})
}
