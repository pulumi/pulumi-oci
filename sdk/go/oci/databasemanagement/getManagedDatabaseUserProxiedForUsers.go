// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the list of Managed Database User Proxied For Users in Oracle Cloud Infrastructure Database Management service.
//
// Gets the list of users on whose behalf the current user acts as proxy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DatabaseManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DatabaseManagement.GetManagedDatabaseUserProxiedForUsers(ctx, &databasemanagement.GetManagedDatabaseUserProxiedForUsersArgs{
//				ManagedDatabaseId: oci_database_management_managed_database.Test_managed_database.Id,
//				UserName:          oci_identity_user.Test_user.Name,
//				Name:              pulumi.StringRef(_var.Managed_database_user_proxied_for_user_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedDatabaseUserProxiedForUsers(ctx *pulumi.Context, args *GetManagedDatabaseUserProxiedForUsersArgs, opts ...pulumi.InvokeOption) (*GetManagedDatabaseUserProxiedForUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedDatabaseUserProxiedForUsersResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedDatabaseUserProxiedForUsers:getManagedDatabaseUserProxiedForUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedDatabaseUserProxiedForUsers.
type GetManagedDatabaseUserProxiedForUsersArgs struct {
	Filters []GetManagedDatabaseUserProxiedForUsersFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name *string `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getManagedDatabaseUserProxiedForUsers.
type GetManagedDatabaseUserProxiedForUsersResult struct {
	Filters []GetManagedDatabaseUserProxiedForUsersFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// The name of a proxy user or the name of the client user.
	Name *string `pulumi:"name"`
	// The list of proxied_for_user_collection.
	ProxiedForUserCollections []GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection `pulumi:"proxiedForUserCollections"`
	UserName                  string                                                          `pulumi:"userName"`
}

func GetManagedDatabaseUserProxiedForUsersOutput(ctx *pulumi.Context, args GetManagedDatabaseUserProxiedForUsersOutputArgs, opts ...pulumi.InvokeOption) GetManagedDatabaseUserProxiedForUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedDatabaseUserProxiedForUsersResult, error) {
			args := v.(GetManagedDatabaseUserProxiedForUsersArgs)
			r, err := GetManagedDatabaseUserProxiedForUsers(ctx, &args, opts...)
			var s GetManagedDatabaseUserProxiedForUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedDatabaseUserProxiedForUsersResultOutput)
}

// A collection of arguments for invoking getManagedDatabaseUserProxiedForUsers.
type GetManagedDatabaseUserProxiedForUsersOutputArgs struct {
	Filters GetManagedDatabaseUserProxiedForUsersFilterArrayInput `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetManagedDatabaseUserProxiedForUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserProxiedForUsersArgs)(nil)).Elem()
}

// A collection of values returned by getManagedDatabaseUserProxiedForUsers.
type GetManagedDatabaseUserProxiedForUsersResultOutput struct{ *pulumi.OutputState }

func (GetManagedDatabaseUserProxiedForUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserProxiedForUsersResult)(nil)).Elem()
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) ToGetManagedDatabaseUserProxiedForUsersResultOutput() GetManagedDatabaseUserProxiedForUsersResultOutput {
	return o
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) ToGetManagedDatabaseUserProxiedForUsersResultOutputWithContext(ctx context.Context) GetManagedDatabaseUserProxiedForUsersResultOutput {
	return o
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetManagedDatabaseUserProxiedForUsersResult] {
	return pulumix.Output[GetManagedDatabaseUserProxiedForUsersResult]{
		OutputState: o.OutputState,
	}
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) Filters() GetManagedDatabaseUserProxiedForUsersFilterArrayOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) []GetManagedDatabaseUserProxiedForUsersFilter {
		return v.Filters
	}).(GetManagedDatabaseUserProxiedForUsersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedDatabaseUserProxiedForUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The name of a proxy user or the name of the client user.
func (o GetManagedDatabaseUserProxiedForUsersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of proxied_for_user_collection.
func (o GetManagedDatabaseUserProxiedForUsersResultOutput) ProxiedForUserCollections() GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionArrayOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) []GetManagedDatabaseUserProxiedForUsersProxiedForUserCollection {
		return v.ProxiedForUserCollections
	}).(GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionArrayOutput)
}

func (o GetManagedDatabaseUserProxiedForUsersResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserProxiedForUsersResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedDatabaseUserProxiedForUsersResultOutput{})
}
