// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed Database User Role resource in Oracle Cloud Infrastructure Database Management service.
//
// Gets the list of roles granted to a specific user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DatabaseManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DatabaseManagement.GetManagedDatabaseUserRole(ctx, &databasemanagement.GetManagedDatabaseUserRoleArgs{
//				ManagedDatabaseId: testManagedDatabase.Id,
//				UserName:          testUser.Name,
//				Name:              pulumi.StringRef(managedDatabaseUserRoleName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedDatabaseUserRole(ctx *pulumi.Context, args *GetManagedDatabaseUserRoleArgs, opts ...pulumi.InvokeOption) (*GetManagedDatabaseUserRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedDatabaseUserRoleResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedDatabaseUserRole:getManagedDatabaseUserRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedDatabaseUserRole.
type GetManagedDatabaseUserRoleArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name *string `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getManagedDatabaseUserRole.
type GetManagedDatabaseUserRoleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An array of roles.
	Items             []GetManagedDatabaseUserRoleItem `pulumi:"items"`
	ManagedDatabaseId string                           `pulumi:"managedDatabaseId"`
	// The name of the role granted to the user.
	Name     *string `pulumi:"name"`
	UserName string  `pulumi:"userName"`
}

func GetManagedDatabaseUserRoleOutput(ctx *pulumi.Context, args GetManagedDatabaseUserRoleOutputArgs, opts ...pulumi.InvokeOption) GetManagedDatabaseUserRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedDatabaseUserRoleResultOutput, error) {
			args := v.(GetManagedDatabaseUserRoleArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetManagedDatabaseUserRoleResult
			secret, err := ctx.InvokePackageRaw("oci:DatabaseManagement/getManagedDatabaseUserRole:getManagedDatabaseUserRole", args, &rv, "", opts...)
			if err != nil {
				return GetManagedDatabaseUserRoleResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetManagedDatabaseUserRoleResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetManagedDatabaseUserRoleResultOutput), nil
			}
			return output, nil
		}).(GetManagedDatabaseUserRoleResultOutput)
}

// A collection of arguments for invoking getManagedDatabaseUserRole.
type GetManagedDatabaseUserRoleOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetManagedDatabaseUserRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserRoleArgs)(nil)).Elem()
}

// A collection of values returned by getManagedDatabaseUserRole.
type GetManagedDatabaseUserRoleResultOutput struct{ *pulumi.OutputState }

func (GetManagedDatabaseUserRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabaseUserRoleResult)(nil)).Elem()
}

func (o GetManagedDatabaseUserRoleResultOutput) ToGetManagedDatabaseUserRoleResultOutput() GetManagedDatabaseUserRoleResultOutput {
	return o
}

func (o GetManagedDatabaseUserRoleResultOutput) ToGetManagedDatabaseUserRoleResultOutputWithContext(ctx context.Context) GetManagedDatabaseUserRoleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedDatabaseUserRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// An array of roles.
func (o GetManagedDatabaseUserRoleResultOutput) Items() GetManagedDatabaseUserRoleItemArrayOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserRoleResult) []GetManagedDatabaseUserRoleItem { return v.Items }).(GetManagedDatabaseUserRoleItemArrayOutput)
}

func (o GetManagedDatabaseUserRoleResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserRoleResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The name of the role granted to the user.
func (o GetManagedDatabaseUserRoleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserRoleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetManagedDatabaseUserRoleResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabaseUserRoleResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedDatabaseUserRoleResultOutput{})
}
