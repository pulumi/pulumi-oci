// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed Databases User Proxy User resource in Oracle Cloud Infrastructure Database Management service.
//
// Gets the list of proxy users for the current user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DatabaseManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DatabaseManagement.GetManagedDatabasesUserProxyUser(ctx, &databasemanagement.GetManagedDatabasesUserProxyUserArgs{
//				ManagedDatabaseId: testManagedDatabase.Id,
//				UserName:          testUser.Name,
//				Name:              pulumi.StringRef(managedDatabasesUserProxyUserName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedDatabasesUserProxyUser(ctx *pulumi.Context, args *GetManagedDatabasesUserProxyUserArgs, opts ...pulumi.InvokeOption) (*GetManagedDatabasesUserProxyUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedDatabasesUserProxyUserResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedDatabasesUserProxyUser:getManagedDatabasesUserProxyUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedDatabasesUserProxyUser.
type GetManagedDatabasesUserProxyUserArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId string `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name *string `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName string `pulumi:"userName"`
}

// A collection of values returned by getManagedDatabasesUserProxyUser.
type GetManagedDatabasesUserProxyUserResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An array of user resources.
	Items             []GetManagedDatabasesUserProxyUserItem `pulumi:"items"`
	ManagedDatabaseId string                                 `pulumi:"managedDatabaseId"`
	// The name of a proxy user or the name of the client user.
	Name     *string `pulumi:"name"`
	UserName string  `pulumi:"userName"`
}

func GetManagedDatabasesUserProxyUserOutput(ctx *pulumi.Context, args GetManagedDatabasesUserProxyUserOutputArgs, opts ...pulumi.InvokeOption) GetManagedDatabasesUserProxyUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedDatabasesUserProxyUserResultOutput, error) {
			args := v.(GetManagedDatabasesUserProxyUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getManagedDatabasesUserProxyUser:getManagedDatabasesUserProxyUser", args, GetManagedDatabasesUserProxyUserResultOutput{}, options).(GetManagedDatabasesUserProxyUserResultOutput), nil
		}).(GetManagedDatabasesUserProxyUserResultOutput)
}

// A collection of arguments for invoking getManagedDatabasesUserProxyUser.
type GetManagedDatabasesUserProxyUserOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
	ManagedDatabaseId pulumi.StringInput `pulumi:"managedDatabaseId"`
	// A filter to return only resources that match the entire name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the user whose details are to be viewed.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetManagedDatabasesUserProxyUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabasesUserProxyUserArgs)(nil)).Elem()
}

// A collection of values returned by getManagedDatabasesUserProxyUser.
type GetManagedDatabasesUserProxyUserResultOutput struct{ *pulumi.OutputState }

func (GetManagedDatabasesUserProxyUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedDatabasesUserProxyUserResult)(nil)).Elem()
}

func (o GetManagedDatabasesUserProxyUserResultOutput) ToGetManagedDatabasesUserProxyUserResultOutput() GetManagedDatabasesUserProxyUserResultOutput {
	return o
}

func (o GetManagedDatabasesUserProxyUserResultOutput) ToGetManagedDatabasesUserProxyUserResultOutputWithContext(ctx context.Context) GetManagedDatabasesUserProxyUserResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedDatabasesUserProxyUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabasesUserProxyUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// An array of user resources.
func (o GetManagedDatabasesUserProxyUserResultOutput) Items() GetManagedDatabasesUserProxyUserItemArrayOutput {
	return o.ApplyT(func(v GetManagedDatabasesUserProxyUserResult) []GetManagedDatabasesUserProxyUserItem { return v.Items }).(GetManagedDatabasesUserProxyUserItemArrayOutput)
}

func (o GetManagedDatabasesUserProxyUserResultOutput) ManagedDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabasesUserProxyUserResult) string { return v.ManagedDatabaseId }).(pulumi.StringOutput)
}

// The name of a proxy user or the name of the client user.
func (o GetManagedDatabasesUserProxyUserResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedDatabasesUserProxyUserResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetManagedDatabasesUserProxyUserResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedDatabasesUserProxyUserResult) string { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedDatabasesUserProxyUserResultOutput{})
}
