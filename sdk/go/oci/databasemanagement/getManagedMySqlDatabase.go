// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed My Sql Database resource in Oracle Cloud Infrastructure Database Management service.
//
// Retrieves General Information for given MySQL Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.GetManagedMySqlDatabase(ctx, &databasemanagement.GetManagedMySqlDatabaseArgs{
//				ManagedMySqlDatabaseId: testManagedMySqlDatabaseOciDatabaseManagementManagedMySqlDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedMySqlDatabase(ctx *pulumi.Context, args *GetManagedMySqlDatabaseArgs, opts ...pulumi.InvokeOption) (*GetManagedMySqlDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedMySqlDatabaseResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedMySqlDatabase:getManagedMySqlDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedMySqlDatabase.
type GetManagedMySqlDatabaseArgs struct {
	// The OCID of ManagedMySqlDatabase.
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
}

// A collection of values returned by getManagedMySqlDatabase.
type GetManagedMySqlDatabaseResult struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The type of the MySQL Database. Indicates whether the database is external or MDS.
	DatabaseType string `pulumi:"databaseType"`
	// The name of the MySQL Database.
	DbName string `pulumi:"dbName"`
	// The version of the MySQL Database.
	DbVersion string `pulumi:"dbVersion"`
	// The name of the HeatWave cluster.
	HeatWaveClusterDisplayName string `pulumi:"heatWaveClusterDisplayName"`
	// The total memory belonging to the HeatWave cluster in GBs.
	HeatWaveMemorySize int `pulumi:"heatWaveMemorySize"`
	// The shape of the nodes in the HeatWave cluster.
	HeatWaveNodeShape string `pulumi:"heatWaveNodeShape"`
	// The information about individual HeatWave nodes in the cluster.
	HeatWaveNodes []GetManagedMySqlDatabaseHeatWaveNode `pulumi:"heatWaveNodes"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the HeatWave cluster is active or not.
	IsHeatWaveActive bool `pulumi:"isHeatWaveActive"`
	// Indicates whether HeatWave is enabled for the MySQL Database System or not.
	IsHeatWaveEnabled bool `pulumi:"isHeatWaveEnabled"`
	// Indicates whether HeatWave Lakehouse is enabled for the MySQL Database System or not.
	IsLakehouseEnabled     bool   `pulumi:"isLakehouseEnabled"`
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
	// Indicates database management status.
	ManagementState string `pulumi:"managementState"`
	// The name of the Managed MySQL Database.
	Name string `pulumi:"name"`
	// Indicates lifecycle  state of the resource.
	State string `pulumi:"state"`
	// The date and time the HeatWave node was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the Managed MySQL Database was created.
	TimeCreatedHeatWave string `pulumi:"timeCreatedHeatWave"`
	// The date and time the Managed MySQL Database was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func GetManagedMySqlDatabaseOutput(ctx *pulumi.Context, args GetManagedMySqlDatabaseOutputArgs, opts ...pulumi.InvokeOption) GetManagedMySqlDatabaseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedMySqlDatabaseResultOutput, error) {
			args := v.(GetManagedMySqlDatabaseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getManagedMySqlDatabase:getManagedMySqlDatabase", args, GetManagedMySqlDatabaseResultOutput{}, options).(GetManagedMySqlDatabaseResultOutput), nil
		}).(GetManagedMySqlDatabaseResultOutput)
}

// A collection of arguments for invoking getManagedMySqlDatabase.
type GetManagedMySqlDatabaseOutputArgs struct {
	// The OCID of ManagedMySqlDatabase.
	ManagedMySqlDatabaseId pulumi.StringInput `pulumi:"managedMySqlDatabaseId"`
}

func (GetManagedMySqlDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getManagedMySqlDatabase.
type GetManagedMySqlDatabaseResultOutput struct{ *pulumi.OutputState }

func (GetManagedMySqlDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseResult)(nil)).Elem()
}

func (o GetManagedMySqlDatabaseResultOutput) ToGetManagedMySqlDatabaseResultOutput() GetManagedMySqlDatabaseResultOutput {
	return o
}

func (o GetManagedMySqlDatabaseResultOutput) ToGetManagedMySqlDatabaseResultOutputWithContext(ctx context.Context) GetManagedMySqlDatabaseResultOutput {
	return o
}

// The OCID of the compartment.
func (o GetManagedMySqlDatabaseResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The type of the MySQL Database. Indicates whether the database is external or MDS.
func (o GetManagedMySqlDatabaseResultOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// The name of the MySQL Database.
func (o GetManagedMySqlDatabaseResultOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.DbName }).(pulumi.StringOutput)
}

// The version of the MySQL Database.
func (o GetManagedMySqlDatabaseResultOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.DbVersion }).(pulumi.StringOutput)
}

// The name of the HeatWave cluster.
func (o GetManagedMySqlDatabaseResultOutput) HeatWaveClusterDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.HeatWaveClusterDisplayName }).(pulumi.StringOutput)
}

// The total memory belonging to the HeatWave cluster in GBs.
func (o GetManagedMySqlDatabaseResultOutput) HeatWaveMemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) int { return v.HeatWaveMemorySize }).(pulumi.IntOutput)
}

// The shape of the nodes in the HeatWave cluster.
func (o GetManagedMySqlDatabaseResultOutput) HeatWaveNodeShape() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.HeatWaveNodeShape }).(pulumi.StringOutput)
}

// The information about individual HeatWave nodes in the cluster.
func (o GetManagedMySqlDatabaseResultOutput) HeatWaveNodes() GetManagedMySqlDatabaseHeatWaveNodeArrayOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) []GetManagedMySqlDatabaseHeatWaveNode { return v.HeatWaveNodes }).(GetManagedMySqlDatabaseHeatWaveNodeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedMySqlDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the HeatWave cluster is active or not.
func (o GetManagedMySqlDatabaseResultOutput) IsHeatWaveActive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) bool { return v.IsHeatWaveActive }).(pulumi.BoolOutput)
}

// Indicates whether HeatWave is enabled for the MySQL Database System or not.
func (o GetManagedMySqlDatabaseResultOutput) IsHeatWaveEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) bool { return v.IsHeatWaveEnabled }).(pulumi.BoolOutput)
}

// Indicates whether HeatWave Lakehouse is enabled for the MySQL Database System or not.
func (o GetManagedMySqlDatabaseResultOutput) IsLakehouseEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) bool { return v.IsLakehouseEnabled }).(pulumi.BoolOutput)
}

func (o GetManagedMySqlDatabaseResultOutput) ManagedMySqlDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.ManagedMySqlDatabaseId }).(pulumi.StringOutput)
}

// Indicates database management status.
func (o GetManagedMySqlDatabaseResultOutput) ManagementState() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.ManagementState }).(pulumi.StringOutput)
}

// The name of the Managed MySQL Database.
func (o GetManagedMySqlDatabaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates lifecycle  state of the resource.
func (o GetManagedMySqlDatabaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the HeatWave node was created.
func (o GetManagedMySqlDatabaseResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the Managed MySQL Database was created.
func (o GetManagedMySqlDatabaseResultOutput) TimeCreatedHeatWave() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.TimeCreatedHeatWave }).(pulumi.StringOutput)
}

// The date and time the Managed MySQL Database was updated.
func (o GetManagedMySqlDatabaseResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedMySqlDatabaseResultOutput{})
}
