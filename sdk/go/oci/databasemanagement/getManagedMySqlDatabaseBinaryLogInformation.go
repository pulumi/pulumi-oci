// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Managed My Sql Database Binary Log Information resource in Oracle Cloud Infrastructure Database Management service.
//
// Retrieves information pertaining to binary log of a specific MySQL server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.GetManagedMySqlDatabaseBinaryLogInformation(ctx, &databasemanagement.GetManagedMySqlDatabaseBinaryLogInformationArgs{
//				ManagedMySqlDatabaseId: testManagedMySqlDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedMySqlDatabaseBinaryLogInformation(ctx *pulumi.Context, args *GetManagedMySqlDatabaseBinaryLogInformationArgs, opts ...pulumi.InvokeOption) (*GetManagedMySqlDatabaseBinaryLogInformationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedMySqlDatabaseBinaryLogInformationResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedMySqlDatabaseBinaryLogInformation:getManagedMySqlDatabaseBinaryLogInformation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedMySqlDatabaseBinaryLogInformation.
type GetManagedMySqlDatabaseBinaryLogInformationArgs struct {
	// The OCID of the Managed MySQL Database.
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
}

// A collection of values returned by getManagedMySqlDatabaseBinaryLogInformation.
type GetManagedMySqlDatabaseBinaryLogInformationResult struct {
	// Indicates whether compression is enabled for transactions written to binary log files on this server.
	BinaryLogCompression string `pulumi:"binaryLogCompression"`
	// The compression ratio for binary log expressed as a percentage.
	BinaryLogCompressionPercent int `pulumi:"binaryLogCompressionPercent"`
	// The binary logging format used by this server.
	BinaryLogFormat string `pulumi:"binaryLogFormat"`
	// The name of the binary log file.
	BinaryLogName string `pulumi:"binaryLogName"`
	// The position within the binary log file.
	BinaryLogPosition string `pulumi:"binaryLogPosition"`
	// Status of binary logging on this server.
	BinaryLogging string `pulumi:"binaryLogging"`
	// The provider-assigned unique ID for this managed resource.
	Id                     string `pulumi:"id"`
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
}

func GetManagedMySqlDatabaseBinaryLogInformationOutput(ctx *pulumi.Context, args GetManagedMySqlDatabaseBinaryLogInformationOutputArgs, opts ...pulumi.InvokeOption) GetManagedMySqlDatabaseBinaryLogInformationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedMySqlDatabaseBinaryLogInformationResultOutput, error) {
			args := v.(GetManagedMySqlDatabaseBinaryLogInformationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getManagedMySqlDatabaseBinaryLogInformation:getManagedMySqlDatabaseBinaryLogInformation", args, GetManagedMySqlDatabaseBinaryLogInformationResultOutput{}, options).(GetManagedMySqlDatabaseBinaryLogInformationResultOutput), nil
		}).(GetManagedMySqlDatabaseBinaryLogInformationResultOutput)
}

// A collection of arguments for invoking getManagedMySqlDatabaseBinaryLogInformation.
type GetManagedMySqlDatabaseBinaryLogInformationOutputArgs struct {
	// The OCID of the Managed MySQL Database.
	ManagedMySqlDatabaseId pulumi.StringInput `pulumi:"managedMySqlDatabaseId"`
}

func (GetManagedMySqlDatabaseBinaryLogInformationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseBinaryLogInformationArgs)(nil)).Elem()
}

// A collection of values returned by getManagedMySqlDatabaseBinaryLogInformation.
type GetManagedMySqlDatabaseBinaryLogInformationResultOutput struct{ *pulumi.OutputState }

func (GetManagedMySqlDatabaseBinaryLogInformationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseBinaryLogInformationResult)(nil)).Elem()
}

func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) ToGetManagedMySqlDatabaseBinaryLogInformationResultOutput() GetManagedMySqlDatabaseBinaryLogInformationResultOutput {
	return o
}

func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) ToGetManagedMySqlDatabaseBinaryLogInformationResultOutputWithContext(ctx context.Context) GetManagedMySqlDatabaseBinaryLogInformationResultOutput {
	return o
}

// Indicates whether compression is enabled for transactions written to binary log files on this server.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogCompression() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.BinaryLogCompression }).(pulumi.StringOutput)
}

// The compression ratio for binary log expressed as a percentage.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogCompressionPercent() pulumi.IntOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) int { return v.BinaryLogCompressionPercent }).(pulumi.IntOutput)
}

// The binary logging format used by this server.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.BinaryLogFormat }).(pulumi.StringOutput)
}

// The name of the binary log file.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogName() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.BinaryLogName }).(pulumi.StringOutput)
}

// The position within the binary log file.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogPosition() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.BinaryLogPosition }).(pulumi.StringOutput)
}

// Status of binary logging on this server.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) BinaryLogging() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.BinaryLogging }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedMySqlDatabaseBinaryLogInformationResultOutput) ManagedMySqlDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseBinaryLogInformationResult) string { return v.ManagedMySqlDatabaseId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedMySqlDatabaseBinaryLogInformationResultOutput{})
}
