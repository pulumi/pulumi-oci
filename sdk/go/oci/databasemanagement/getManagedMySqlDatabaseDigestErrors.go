// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed My Sql Database Digest Errors in Oracle Cloud Infrastructure Database Management service.
//
// Retrieves any potential errors for a given digest.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/databasemanagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := databasemanagement.GetManagedMySqlDatabaseDigestErrors(ctx, &databasemanagement.GetManagedMySqlDatabaseDigestErrorsArgs{
//				Digest:                 managedMySqlDatabaseDigestErrorDigest,
//				ManagedMySqlDatabaseId: testManagedMySqlDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedMySqlDatabaseDigestErrors(ctx *pulumi.Context, args *GetManagedMySqlDatabaseDigestErrorsArgs, opts ...pulumi.InvokeOption) (*GetManagedMySqlDatabaseDigestErrorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedMySqlDatabaseDigestErrorsResult
	err := ctx.Invoke("oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedMySqlDatabaseDigestErrors.
type GetManagedMySqlDatabaseDigestErrorsArgs struct {
	// The digest of a MySQL normalized query.
	Digest  string                                      `pulumi:"digest"`
	Filters []GetManagedMySqlDatabaseDigestErrorsFilter `pulumi:"filters"`
	// The OCID of the Managed MySQL Database.
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
}

// A collection of values returned by getManagedMySqlDatabaseDigestErrors.
type GetManagedMySqlDatabaseDigestErrorsResult struct {
	Digest  string                                      `pulumi:"digest"`
	Filters []GetManagedMySqlDatabaseDigestErrorsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                     string `pulumi:"id"`
	ManagedMySqlDatabaseId string `pulumi:"managedMySqlDatabaseId"`
	// The list of my_sql_digest_errors_collection.
	MySqlDigestErrorsCollections []GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection `pulumi:"mySqlDigestErrorsCollections"`
}

func GetManagedMySqlDatabaseDigestErrorsOutput(ctx *pulumi.Context, args GetManagedMySqlDatabaseDigestErrorsOutputArgs, opts ...pulumi.InvokeOption) GetManagedMySqlDatabaseDigestErrorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetManagedMySqlDatabaseDigestErrorsResultOutput, error) {
			args := v.(GetManagedMySqlDatabaseDigestErrorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DatabaseManagement/getManagedMySqlDatabaseDigestErrors:getManagedMySqlDatabaseDigestErrors", args, GetManagedMySqlDatabaseDigestErrorsResultOutput{}, options).(GetManagedMySqlDatabaseDigestErrorsResultOutput), nil
		}).(GetManagedMySqlDatabaseDigestErrorsResultOutput)
}

// A collection of arguments for invoking getManagedMySqlDatabaseDigestErrors.
type GetManagedMySqlDatabaseDigestErrorsOutputArgs struct {
	// The digest of a MySQL normalized query.
	Digest  pulumi.StringInput                                  `pulumi:"digest"`
	Filters GetManagedMySqlDatabaseDigestErrorsFilterArrayInput `pulumi:"filters"`
	// The OCID of the Managed MySQL Database.
	ManagedMySqlDatabaseId pulumi.StringInput `pulumi:"managedMySqlDatabaseId"`
}

func (GetManagedMySqlDatabaseDigestErrorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseDigestErrorsArgs)(nil)).Elem()
}

// A collection of values returned by getManagedMySqlDatabaseDigestErrors.
type GetManagedMySqlDatabaseDigestErrorsResultOutput struct{ *pulumi.OutputState }

func (GetManagedMySqlDatabaseDigestErrorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedMySqlDatabaseDigestErrorsResult)(nil)).Elem()
}

func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) ToGetManagedMySqlDatabaseDigestErrorsResultOutput() GetManagedMySqlDatabaseDigestErrorsResultOutput {
	return o
}

func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) ToGetManagedMySqlDatabaseDigestErrorsResultOutputWithContext(ctx context.Context) GetManagedMySqlDatabaseDigestErrorsResultOutput {
	return o
}

func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseDigestErrorsResult) string { return v.Digest }).(pulumi.StringOutput)
}

func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) Filters() GetManagedMySqlDatabaseDigestErrorsFilterArrayOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseDigestErrorsResult) []GetManagedMySqlDatabaseDigestErrorsFilter {
		return v.Filters
	}).(GetManagedMySqlDatabaseDigestErrorsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseDigestErrorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) ManagedMySqlDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseDigestErrorsResult) string { return v.ManagedMySqlDatabaseId }).(pulumi.StringOutput)
}

// The list of my_sql_digest_errors_collection.
func (o GetManagedMySqlDatabaseDigestErrorsResultOutput) MySqlDigestErrorsCollections() GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollectionArrayOutput {
	return o.ApplyT(func(v GetManagedMySqlDatabaseDigestErrorsResult) []GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollection {
		return v.MySqlDigestErrorsCollections
	}).(GetManagedMySqlDatabaseDigestErrorsMySqlDigestErrorsCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedMySqlDatabaseDigestErrorsResultOutput{})
}
