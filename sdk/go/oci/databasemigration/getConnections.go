// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databasemigration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DatabaseMigration"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DatabaseMigration.GetConnections(ctx, &databasemigration.GetConnectionsArgs{
//				CompartmentId:      compartmentId,
//				ConnectionTypes:    connectionConnectionType,
//				DisplayName:        pulumi.StringRef(connectionDisplayName),
//				SourceConnectionId: pulumi.StringRef(testConnection.Id),
//				State:              pulumi.StringRef(connectionState),
//				TechnologyTypes:    connectionTechnologyType,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetConnections(ctx *pulumi.Context, args *GetConnectionsArgs, opts ...pulumi.InvokeOption) (*GetConnectionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConnectionsResult
	err := ctx.Invoke("oci:DatabaseMigration/getConnections:getConnections", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnections.
type GetConnectionsArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// The array of connection types.
	ConnectionTypes []string `pulumi:"connectionTypes"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                `pulumi:"displayName"`
	Filters     []GetConnectionsFilter `pulumi:"filters"`
	// The OCID of the source database connection.
	SourceConnectionId *string `pulumi:"sourceConnectionId"`
	// The current state of the Database Migration Deployment.
	State *string `pulumi:"state"`
	// The array of technology types.
	TechnologyTypes []string `pulumi:"technologyTypes"`
}

// A collection of values returned by getConnections.
type GetConnectionsResult struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The list of connection_collection.
	ConnectionCollections []GetConnectionsConnectionCollection `pulumi:"connectionCollections"`
	// Defines the type of connection. For example, ORACLE.
	ConnectionTypes []string `pulumi:"connectionTypes"`
	// A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
	DisplayName *string                `pulumi:"displayName"`
	Filters     []GetConnectionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	SourceConnectionId *string `pulumi:"sourceConnectionId"`
	// The Connection's current lifecycle state.
	State *string `pulumi:"state"`
	// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
	TechnologyTypes []string `pulumi:"technologyTypes"`
}

func GetConnectionsOutput(ctx *pulumi.Context, args GetConnectionsOutputArgs, opts ...pulumi.InvokeOption) GetConnectionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetConnectionsResultOutput, error) {
			args := v.(GetConnectionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetConnectionsResult
			secret, err := ctx.InvokePackageRaw("oci:DatabaseMigration/getConnections:getConnections", args, &rv, "", opts...)
			if err != nil {
				return GetConnectionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetConnectionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetConnectionsResultOutput), nil
			}
			return output, nil
		}).(GetConnectionsResultOutput)
}

// A collection of arguments for invoking getConnections.
type GetConnectionsOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The array of connection types.
	ConnectionTypes pulumi.StringArrayInput `pulumi:"connectionTypes"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput          `pulumi:"displayName"`
	Filters     GetConnectionsFilterArrayInput `pulumi:"filters"`
	// The OCID of the source database connection.
	SourceConnectionId pulumi.StringPtrInput `pulumi:"sourceConnectionId"`
	// The current state of the Database Migration Deployment.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The array of technology types.
	TechnologyTypes pulumi.StringArrayInput `pulumi:"technologyTypes"`
}

func (GetConnectionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionsArgs)(nil)).Elem()
}

// A collection of values returned by getConnections.
type GetConnectionsResultOutput struct{ *pulumi.OutputState }

func (GetConnectionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionsResult)(nil)).Elem()
}

func (o GetConnectionsResultOutput) ToGetConnectionsResultOutput() GetConnectionsResultOutput {
	return o
}

func (o GetConnectionsResultOutput) ToGetConnectionsResultOutputWithContext(ctx context.Context) GetConnectionsResultOutput {
	return o
}

// The OCID of the compartment.
func (o GetConnectionsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The list of connection_collection.
func (o GetConnectionsResultOutput) ConnectionCollections() GetConnectionsConnectionCollectionArrayOutput {
	return o.ApplyT(func(v GetConnectionsResult) []GetConnectionsConnectionCollection { return v.ConnectionCollections }).(GetConnectionsConnectionCollectionArrayOutput)
}

// Defines the type of connection. For example, ORACLE.
func (o GetConnectionsResultOutput) ConnectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetConnectionsResult) []string { return v.ConnectionTypes }).(pulumi.StringArrayOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
func (o GetConnectionsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetConnectionsResultOutput) Filters() GetConnectionsFilterArrayOutput {
	return o.ApplyT(func(v GetConnectionsResult) []GetConnectionsFilter { return v.Filters }).(GetConnectionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetConnectionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConnectionsResultOutput) SourceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionsResult) *string { return v.SourceConnectionId }).(pulumi.StringPtrOutput)
}

// The Connection's current lifecycle state.
func (o GetConnectionsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The type of MySQL source or target connection. Example: OCI_MYSQL represents Oracle Cloud Infrastructure MySQL HeatWave Database Service
func (o GetConnectionsResultOutput) TechnologyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetConnectionsResult) []string { return v.TechnologyTypes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConnectionsResultOutput{})
}
