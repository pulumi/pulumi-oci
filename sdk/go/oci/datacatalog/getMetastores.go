// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datacatalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Metastores in Oracle Cloud Infrastructure Data Catalog service.
//
// Returns a list of all metastores in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataCatalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataCatalog.GetMetastores(ctx, &datacatalog.GetMetastoresArgs{
//				CompartmentId: _var.Compartment_id,
//				DisplayName:   pulumi.StringRef(_var.Metastore_display_name),
//				State:         pulumi.StringRef(_var.Metastore_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMetastores(ctx *pulumi.Context, args *GetMetastoresArgs, opts ...pulumi.InvokeOption) (*GetMetastoresResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMetastoresResult
	err := ctx.Invoke("oci:DataCatalog/getMetastores:getMetastores", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMetastores.
type GetMetastoresArgs struct {
	// The OCID of the compartment where you want to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given. The match is not case sensitive.
	DisplayName *string               `pulumi:"displayName"`
	Filters     []GetMetastoresFilter `pulumi:"filters"`
	// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getMetastores.
type GetMetastoresResult struct {
	// OCID of the compartment which holds the metastore.
	CompartmentId string `pulumi:"compartmentId"`
	// Mutable name of the metastore.
	DisplayName *string               `pulumi:"displayName"`
	Filters     []GetMetastoresFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id *string `pulumi:"id"`
	// The list of metastores.
	Metastores []GetMetastoresMetastore `pulumi:"metastores"`
	// The current state of the metastore.
	State *string `pulumi:"state"`
}

func GetMetastoresOutput(ctx *pulumi.Context, args GetMetastoresOutputArgs, opts ...pulumi.InvokeOption) GetMetastoresResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMetastoresResult, error) {
			args := v.(GetMetastoresArgs)
			r, err := GetMetastores(ctx, &args, opts...)
			var s GetMetastoresResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMetastoresResultOutput)
}

// A collection of arguments for invoking getMetastores.
type GetMetastoresOutputArgs struct {
	// The OCID of the compartment where you want to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given. The match is not case sensitive.
	DisplayName pulumi.StringPtrInput         `pulumi:"displayName"`
	Filters     GetMetastoresFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetMetastoresOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetastoresArgs)(nil)).Elem()
}

// A collection of values returned by getMetastores.
type GetMetastoresResultOutput struct{ *pulumi.OutputState }

func (GetMetastoresResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetastoresResult)(nil)).Elem()
}

func (o GetMetastoresResultOutput) ToGetMetastoresResultOutput() GetMetastoresResultOutput {
	return o
}

func (o GetMetastoresResultOutput) ToGetMetastoresResultOutputWithContext(ctx context.Context) GetMetastoresResultOutput {
	return o
}

// OCID of the compartment which holds the metastore.
func (o GetMetastoresResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetastoresResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Mutable name of the metastore.
func (o GetMetastoresResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetastoresResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetMetastoresResultOutput) Filters() GetMetastoresFilterArrayOutput {
	return o.ApplyT(func(v GetMetastoresResult) []GetMetastoresFilter { return v.Filters }).(GetMetastoresFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMetastoresResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetastoresResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of metastores.
func (o GetMetastoresResultOutput) Metastores() GetMetastoresMetastoreArrayOutput {
	return o.ApplyT(func(v GetMetastoresResult) []GetMetastoresMetastore { return v.Metastores }).(GetMetastoresMetastoreArrayOutput)
}

// The current state of the metastore.
func (o GetMetastoresResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetastoresResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMetastoresResultOutput{})
}
