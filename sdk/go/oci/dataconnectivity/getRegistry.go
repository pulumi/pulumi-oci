// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dataconnectivity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Registry resource in Oracle Cloud Infrastructure Data Connectivity service.
//
// Gets a Data Connectivity Management Registry by identifier
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataConnectivity"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := DataConnectivity.GetRegistry(ctx, &dataconnectivity.GetRegistryArgs{
// 			RegistryId: oci_data_connectivity_registry.Test_registry.Id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRegistry(ctx *pulumi.Context, args *LookupRegistryArgs, opts ...pulumi.InvokeOption) (*LookupRegistryResult, error) {
	var rv LookupRegistryResult
	err := ctx.Invoke("oci:DataConnectivity/getRegistry:getRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryArgs struct {
	// The registry Ocid.
	RegistryId string `pulumi:"registryId"`
}

// A collection of values returned by getRegistry.
type LookupRegistryResult struct {
	// Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Registry description
	Description string `pulumi:"description"`
	// Data Connectivity Management Registry display name, registries can be renamed
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier that is immutable on creation
	Id         string `pulumi:"id"`
	RegistryId string `pulumi:"registryId"`
	// Lifecycle states for registries in Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined UPDATING - The resource is being updated and may not be usable until all changes are commited DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons DELETED  - The resource has been deleted and isn't available FAILED   - The resource is in a failed state due to validation or other errors
	State string `pulumi:"state"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	StateMessage string `pulumi:"stateMessage"`
	// The time the Data Connectivity Management Registry was created. An RFC3339 formatted datetime string
	TimeCreated string `pulumi:"timeCreated"`
	// The time the Data Connectivity Management Registry was updated. An RFC3339 formatted datetime string
	TimeUpdated string `pulumi:"timeUpdated"`
	// Name of the user who updated the DCMS Registry.
	UpdatedBy string `pulumi:"updatedBy"`
}

func LookupRegistryOutput(ctx *pulumi.Context, args LookupRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegistryResult, error) {
			args := v.(LookupRegistryArgs)
			r, err := LookupRegistry(ctx, &args, opts...)
			var s LookupRegistryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegistryResultOutput)
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryOutputArgs struct {
	// The registry Ocid.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
}

func (LookupRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getRegistry.
type LookupRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryResult)(nil)).Elem()
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutput() LookupRegistryResultOutput {
	return o
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutputWithContext(ctx context.Context) LookupRegistryResultOutput {
	return o
}

// Compartment Identifier
func (o LookupRegistryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupRegistryResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupRegistryResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Registry description
func (o LookupRegistryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Description }).(pulumi.StringOutput)
}

// Data Connectivity Management Registry display name, registries can be renamed
func (o LookupRegistryResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupRegistryResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupRegistryResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique identifier that is immutable on creation
func (o LookupRegistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

// Lifecycle states for registries in Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined UPDATING - The resource is being updated and may not be usable until all changes are commited DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons DELETED  - The resource has been deleted and isn't available FAILED   - The resource is in a failed state due to validation or other errors
func (o LookupRegistryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.State }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o LookupRegistryResultOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.StateMessage }).(pulumi.StringOutput)
}

// The time the Data Connectivity Management Registry was created. An RFC3339 formatted datetime string
func (o LookupRegistryResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the Data Connectivity Management Registry was updated. An RFC3339 formatted datetime string
func (o LookupRegistryResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Name of the user who updated the DCMS Registry.
func (o LookupRegistryResultOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.UpdatedBy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryResultOutput{})
}
