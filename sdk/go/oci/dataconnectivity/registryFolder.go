// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataconnectivity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.
//
// Creates a folder under a specified registry.
//
// ## Import
//
// RegistryFolders can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:DataConnectivity/registryFolder:RegistryFolder test_registry_folder "registries/{registryId}/folders/{folderKey}"
//
// ```
type RegistryFolder struct {
	pulumi.CustomResourceState

	// (Updatable) The list of data assets that belong to the folder.
	DataAssets RegistryFolderDataAssetArrayOutput `pulumi:"dataAssets"`
	// (Updatable) User-defined description of the folder.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
	Key pulumi.StringOutput `pulumi:"key"`
	// (Updatable) The type of the folder.
	ModelType pulumi.StringOutput `pulumi:"modelType"`
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringOutput `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntOutput `pulumi:"objectStatus"`
	// (Updatable) The version of the object that is used to track changes in the object instance.
	ObjectVersion pulumi.IntOutput `pulumi:"objectVersion"`
	// (Updatable) A reference to the parent object.
	ParentRef RegistryFolderParentRefOutput `pulumi:"parentRef"`
	// The registry OCID.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
}

// NewRegistryFolder registers a new resource with the given unique name, arguments, and options.
func NewRegistryFolder(ctx *pulumi.Context,
	name string, args *RegistryFolderArgs, opts ...pulumi.ResourceOption) (*RegistryFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	var resource RegistryFolder
	err := ctx.RegisterResource("oci:DataConnectivity/registryFolder:RegistryFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryFolder gets an existing RegistryFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryFolderState, opts ...pulumi.ResourceOption) (*RegistryFolder, error) {
	var resource RegistryFolder
	err := ctx.ReadResource("oci:DataConnectivity/registryFolder:RegistryFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryFolder resources.
type registryFolderState struct {
	// (Updatable) The list of data assets that belong to the folder.
	DataAssets []RegistryFolderDataAsset `pulumi:"dataAssets"`
	// (Updatable) User-defined description of the folder.
	Description *string `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
	Identifier *string `pulumi:"identifier"`
	// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
	Key *string `pulumi:"key"`
	// (Updatable) The type of the folder.
	ModelType *string `pulumi:"modelType"`
	// (Updatable) The model version of an object.
	ModelVersion *string `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name *string `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus *int `pulumi:"objectStatus"`
	// (Updatable) The version of the object that is used to track changes in the object instance.
	ObjectVersion *int `pulumi:"objectVersion"`
	// (Updatable) A reference to the parent object.
	ParentRef *RegistryFolderParentRef `pulumi:"parentRef"`
	// The registry OCID.
	RegistryId *string `pulumi:"registryId"`
}

type RegistryFolderState struct {
	// (Updatable) The list of data assets that belong to the folder.
	DataAssets RegistryFolderDataAssetArrayInput
	// (Updatable) User-defined description of the folder.
	Description pulumi.StringPtrInput
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringPtrInput
	// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
	Key pulumi.StringPtrInput
	// (Updatable) The type of the folder.
	ModelType pulumi.StringPtrInput
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringPtrInput
	// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringPtrInput
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntPtrInput
	// (Updatable) The version of the object that is used to track changes in the object instance.
	ObjectVersion pulumi.IntPtrInput
	// (Updatable) A reference to the parent object.
	ParentRef RegistryFolderParentRefPtrInput
	// The registry OCID.
	RegistryId pulumi.StringPtrInput
}

func (RegistryFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryFolderState)(nil)).Elem()
}

type registryFolderArgs struct {
	// (Updatable) The list of data assets that belong to the folder.
	DataAssets []RegistryFolderDataAsset `pulumi:"dataAssets"`
	// (Updatable) User-defined description of the folder.
	Description *string `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
	Identifier string `pulumi:"identifier"`
	// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
	Key *string `pulumi:"key"`
	// (Updatable) The type of the folder.
	ModelType *string `pulumi:"modelType"`
	// (Updatable) The model version of an object.
	ModelVersion *string `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name *string `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus *int `pulumi:"objectStatus"`
	// (Updatable) The version of the object that is used to track changes in the object instance.
	ObjectVersion *int `pulumi:"objectVersion"`
	// (Updatable) A reference to the parent object.
	ParentRef *RegistryFolderParentRef `pulumi:"parentRef"`
	// The registry OCID.
	RegistryId string `pulumi:"registryId"`
}

// The set of arguments for constructing a RegistryFolder resource.
type RegistryFolderArgs struct {
	// (Updatable) The list of data assets that belong to the folder.
	DataAssets RegistryFolderDataAssetArrayInput
	// (Updatable) User-defined description of the folder.
	Description pulumi.StringPtrInput
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringInput
	// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
	Key pulumi.StringPtrInput
	// (Updatable) The type of the folder.
	ModelType pulumi.StringPtrInput
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringPtrInput
	// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringPtrInput
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntPtrInput
	// (Updatable) The version of the object that is used to track changes in the object instance.
	ObjectVersion pulumi.IntPtrInput
	// (Updatable) A reference to the parent object.
	ParentRef RegistryFolderParentRefPtrInput
	// The registry OCID.
	RegistryId pulumi.StringInput
}

func (RegistryFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryFolderArgs)(nil)).Elem()
}

type RegistryFolderInput interface {
	pulumi.Input

	ToRegistryFolderOutput() RegistryFolderOutput
	ToRegistryFolderOutputWithContext(ctx context.Context) RegistryFolderOutput
}

func (*RegistryFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFolder)(nil)).Elem()
}

func (i *RegistryFolder) ToRegistryFolderOutput() RegistryFolderOutput {
	return i.ToRegistryFolderOutputWithContext(context.Background())
}

func (i *RegistryFolder) ToRegistryFolderOutputWithContext(ctx context.Context) RegistryFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFolderOutput)
}

// RegistryFolderArrayInput is an input type that accepts RegistryFolderArray and RegistryFolderArrayOutput values.
// You can construct a concrete instance of `RegistryFolderArrayInput` via:
//
//	RegistryFolderArray{ RegistryFolderArgs{...} }
type RegistryFolderArrayInput interface {
	pulumi.Input

	ToRegistryFolderArrayOutput() RegistryFolderArrayOutput
	ToRegistryFolderArrayOutputWithContext(context.Context) RegistryFolderArrayOutput
}

type RegistryFolderArray []RegistryFolderInput

func (RegistryFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryFolder)(nil)).Elem()
}

func (i RegistryFolderArray) ToRegistryFolderArrayOutput() RegistryFolderArrayOutput {
	return i.ToRegistryFolderArrayOutputWithContext(context.Background())
}

func (i RegistryFolderArray) ToRegistryFolderArrayOutputWithContext(ctx context.Context) RegistryFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFolderArrayOutput)
}

// RegistryFolderMapInput is an input type that accepts RegistryFolderMap and RegistryFolderMapOutput values.
// You can construct a concrete instance of `RegistryFolderMapInput` via:
//
//	RegistryFolderMap{ "key": RegistryFolderArgs{...} }
type RegistryFolderMapInput interface {
	pulumi.Input

	ToRegistryFolderMapOutput() RegistryFolderMapOutput
	ToRegistryFolderMapOutputWithContext(context.Context) RegistryFolderMapOutput
}

type RegistryFolderMap map[string]RegistryFolderInput

func (RegistryFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryFolder)(nil)).Elem()
}

func (i RegistryFolderMap) ToRegistryFolderMapOutput() RegistryFolderMapOutput {
	return i.ToRegistryFolderMapOutputWithContext(context.Background())
}

func (i RegistryFolderMap) ToRegistryFolderMapOutputWithContext(ctx context.Context) RegistryFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryFolderMapOutput)
}

type RegistryFolderOutput struct{ *pulumi.OutputState }

func (RegistryFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryFolder)(nil)).Elem()
}

func (o RegistryFolderOutput) ToRegistryFolderOutput() RegistryFolderOutput {
	return o
}

func (o RegistryFolderOutput) ToRegistryFolderOutputWithContext(ctx context.Context) RegistryFolderOutput {
	return o
}

// (Updatable) The list of data assets that belong to the folder.
func (o RegistryFolderOutput) DataAssets() RegistryFolderDataAssetArrayOutput {
	return o.ApplyT(func(v *RegistryFolder) RegistryFolderDataAssetArrayOutput { return v.DataAssets }).(RegistryFolderDataAssetArrayOutput)
}

// (Updatable) User-defined description of the folder.
func (o RegistryFolderOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
func (o RegistryFolderOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
func (o RegistryFolderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// (Updatable) The type of the folder.
func (o RegistryFolderOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.ModelType }).(pulumi.StringOutput)
}

// (Updatable) The model version of an object.
func (o RegistryFolderOutput) ModelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.ModelVersion }).(pulumi.StringOutput)
}

// (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
func (o RegistryFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
func (o RegistryFolderOutput) ObjectStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.IntOutput { return v.ObjectStatus }).(pulumi.IntOutput)
}

// (Updatable) The version of the object that is used to track changes in the object instance.
func (o RegistryFolderOutput) ObjectVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.IntOutput { return v.ObjectVersion }).(pulumi.IntOutput)
}

// (Updatable) A reference to the parent object.
func (o RegistryFolderOutput) ParentRef() RegistryFolderParentRefOutput {
	return o.ApplyT(func(v *RegistryFolder) RegistryFolderParentRefOutput { return v.ParentRef }).(RegistryFolderParentRefOutput)
}

// The registry OCID.
func (o RegistryFolderOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryFolder) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

type RegistryFolderArrayOutput struct{ *pulumi.OutputState }

func (RegistryFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryFolder)(nil)).Elem()
}

func (o RegistryFolderArrayOutput) ToRegistryFolderArrayOutput() RegistryFolderArrayOutput {
	return o
}

func (o RegistryFolderArrayOutput) ToRegistryFolderArrayOutputWithContext(ctx context.Context) RegistryFolderArrayOutput {
	return o
}

func (o RegistryFolderArrayOutput) Index(i pulumi.IntInput) RegistryFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryFolder {
		return vs[0].([]*RegistryFolder)[vs[1].(int)]
	}).(RegistryFolderOutput)
}

type RegistryFolderMapOutput struct{ *pulumi.OutputState }

func (RegistryFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryFolder)(nil)).Elem()
}

func (o RegistryFolderMapOutput) ToRegistryFolderMapOutput() RegistryFolderMapOutput {
	return o
}

func (o RegistryFolderMapOutput) ToRegistryFolderMapOutputWithContext(ctx context.Context) RegistryFolderMapOutput {
	return o
}

func (o RegistryFolderMapOutput) MapIndex(k pulumi.StringInput) RegistryFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryFolder {
		return vs[0].(map[string]*RegistryFolder)[vs[1].(string)]
	}).(RegistryFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFolderInput)(nil)).Elem(), &RegistryFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFolderArrayInput)(nil)).Elem(), RegistryFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryFolderMapInput)(nil)).Elem(), RegistryFolderMap{})
	pulumi.RegisterOutputType(RegistryFolderOutput{})
	pulumi.RegisterOutputType(RegistryFolderArrayOutput{})
	pulumi.RegisterOutputType(RegistryFolderMapOutput{})
}
