// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Run Statement resource in Oracle Cloud Infrastructure Data Flow service.
//
// Executes a statement for a Session run.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataFlow"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataFlow.NewRunStatement(ctx, "test_run_statement", &DataFlow.RunStatementArgs{
//				Code:  pulumi.Any(runStatementCode),
//				RunId: pulumi.Any(testRun.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RunStatements can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataFlow/runStatement:RunStatement test_run_statement "runs/{runId}/statements/{statementId}"
// ```
type RunStatement struct {
	pulumi.CustomResourceState

	// The statement code to execute. Example: `println(sc.version)`
	Code pulumi.StringOutput `pulumi:"code"`
	// The execution output of a statement.
	Outputs RunStatementOutputTypeArrayOutput `pulumi:"outputs"`
	// The execution progress.
	Progress pulumi.Float64Output `pulumi:"progress"`
	// The unique ID for the run
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RunId pulumi.StringOutput `pulumi:"runId"`
	// The current state of this statement.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
	TimeCompleted pulumi.StringOutput `pulumi:"timeCompleted"`
	// The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewRunStatement registers a new resource with the given unique name, arguments, and options.
func NewRunStatement(ctx *pulumi.Context,
	name string, args *RunStatementArgs, opts ...pulumi.ResourceOption) (*RunStatement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Code == nil {
		return nil, errors.New("invalid value for required argument 'Code'")
	}
	if args.RunId == nil {
		return nil, errors.New("invalid value for required argument 'RunId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RunStatement
	err := ctx.RegisterResource("oci:DataFlow/runStatement:RunStatement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunStatement gets an existing RunStatement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunStatement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunStatementState, opts ...pulumi.ResourceOption) (*RunStatement, error) {
	var resource RunStatement
	err := ctx.ReadResource("oci:DataFlow/runStatement:RunStatement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RunStatement resources.
type runStatementState struct {
	// The statement code to execute. Example: `println(sc.version)`
	Code *string `pulumi:"code"`
	// The execution output of a statement.
	Outputs []RunStatementOutputType `pulumi:"outputs"`
	// The execution progress.
	Progress *float64 `pulumi:"progress"`
	// The unique ID for the run
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RunId *string `pulumi:"runId"`
	// The current state of this statement.
	State *string `pulumi:"state"`
	// The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
	TimeCompleted *string `pulumi:"timeCompleted"`
	// The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type RunStatementState struct {
	// The statement code to execute. Example: `println(sc.version)`
	Code pulumi.StringPtrInput
	// The execution output of a statement.
	Outputs RunStatementOutputTypeArrayInput
	// The execution progress.
	Progress pulumi.Float64PtrInput
	// The unique ID for the run
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RunId pulumi.StringPtrInput
	// The current state of this statement.
	State pulumi.StringPtrInput
	// The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
	TimeCompleted pulumi.StringPtrInput
	// The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (RunStatementState) ElementType() reflect.Type {
	return reflect.TypeOf((*runStatementState)(nil)).Elem()
}

type runStatementArgs struct {
	// The statement code to execute. Example: `println(sc.version)`
	Code string `pulumi:"code"`
	// The unique ID for the run
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RunId string `pulumi:"runId"`
}

// The set of arguments for constructing a RunStatement resource.
type RunStatementArgs struct {
	// The statement code to execute. Example: `println(sc.version)`
	Code pulumi.StringInput
	// The unique ID for the run
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RunId pulumi.StringInput
}

func (RunStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runStatementArgs)(nil)).Elem()
}

type RunStatementInput interface {
	pulumi.Input

	ToRunStatementOutput() RunStatementOutput
	ToRunStatementOutputWithContext(ctx context.Context) RunStatementOutput
}

func (*RunStatement) ElementType() reflect.Type {
	return reflect.TypeOf((**RunStatement)(nil)).Elem()
}

func (i *RunStatement) ToRunStatementOutput() RunStatementOutput {
	return i.ToRunStatementOutputWithContext(context.Background())
}

func (i *RunStatement) ToRunStatementOutputWithContext(ctx context.Context) RunStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunStatementOutput)
}

// RunStatementArrayInput is an input type that accepts RunStatementArray and RunStatementArrayOutput values.
// You can construct a concrete instance of `RunStatementArrayInput` via:
//
//	RunStatementArray{ RunStatementArgs{...} }
type RunStatementArrayInput interface {
	pulumi.Input

	ToRunStatementArrayOutput() RunStatementArrayOutput
	ToRunStatementArrayOutputWithContext(context.Context) RunStatementArrayOutput
}

type RunStatementArray []RunStatementInput

func (RunStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunStatement)(nil)).Elem()
}

func (i RunStatementArray) ToRunStatementArrayOutput() RunStatementArrayOutput {
	return i.ToRunStatementArrayOutputWithContext(context.Background())
}

func (i RunStatementArray) ToRunStatementArrayOutputWithContext(ctx context.Context) RunStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunStatementArrayOutput)
}

// RunStatementMapInput is an input type that accepts RunStatementMap and RunStatementMapOutput values.
// You can construct a concrete instance of `RunStatementMapInput` via:
//
//	RunStatementMap{ "key": RunStatementArgs{...} }
type RunStatementMapInput interface {
	pulumi.Input

	ToRunStatementMapOutput() RunStatementMapOutput
	ToRunStatementMapOutputWithContext(context.Context) RunStatementMapOutput
}

type RunStatementMap map[string]RunStatementInput

func (RunStatementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunStatement)(nil)).Elem()
}

func (i RunStatementMap) ToRunStatementMapOutput() RunStatementMapOutput {
	return i.ToRunStatementMapOutputWithContext(context.Background())
}

func (i RunStatementMap) ToRunStatementMapOutputWithContext(ctx context.Context) RunStatementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunStatementMapOutput)
}

type RunStatementOutput struct{ *pulumi.OutputState }

func (RunStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunStatement)(nil)).Elem()
}

func (o RunStatementOutput) ToRunStatementOutput() RunStatementOutput {
	return o
}

func (o RunStatementOutput) ToRunStatementOutputWithContext(ctx context.Context) RunStatementOutput {
	return o
}

// The statement code to execute. Example: `println(sc.version)`
func (o RunStatementOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v *RunStatement) pulumi.StringOutput { return v.Code }).(pulumi.StringOutput)
}

// The execution output of a statement.
func (o RunStatementOutput) Outputs() RunStatementOutputTypeArrayOutput {
	return o.ApplyT(func(v *RunStatement) RunStatementOutputTypeArrayOutput { return v.Outputs }).(RunStatementOutputTypeArrayOutput)
}

// The execution progress.
func (o RunStatementOutput) Progress() pulumi.Float64Output {
	return o.ApplyT(func(v *RunStatement) pulumi.Float64Output { return v.Progress }).(pulumi.Float64Output)
}

// The unique ID for the run
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RunStatementOutput) RunId() pulumi.StringOutput {
	return o.ApplyT(func(v *RunStatement) pulumi.StringOutput { return v.RunId }).(pulumi.StringOutput)
}

// The current state of this statement.
func (o RunStatementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RunStatement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time a statement execution was completed, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2022-05-31T21:10:29.600Z`
func (o RunStatementOutput) TimeCompleted() pulumi.StringOutput {
	return o.ApplyT(func(v *RunStatement) pulumi.StringOutput { return v.TimeCompleted }).(pulumi.StringOutput)
}

// The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
func (o RunStatementOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *RunStatement) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

type RunStatementArrayOutput struct{ *pulumi.OutputState }

func (RunStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunStatement)(nil)).Elem()
}

func (o RunStatementArrayOutput) ToRunStatementArrayOutput() RunStatementArrayOutput {
	return o
}

func (o RunStatementArrayOutput) ToRunStatementArrayOutputWithContext(ctx context.Context) RunStatementArrayOutput {
	return o
}

func (o RunStatementArrayOutput) Index(i pulumi.IntInput) RunStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RunStatement {
		return vs[0].([]*RunStatement)[vs[1].(int)]
	}).(RunStatementOutput)
}

type RunStatementMapOutput struct{ *pulumi.OutputState }

func (RunStatementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunStatement)(nil)).Elem()
}

func (o RunStatementMapOutput) ToRunStatementMapOutput() RunStatementMapOutput {
	return o
}

func (o RunStatementMapOutput) ToRunStatementMapOutputWithContext(ctx context.Context) RunStatementMapOutput {
	return o
}

func (o RunStatementMapOutput) MapIndex(k pulumi.StringInput) RunStatementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RunStatement {
		return vs[0].(map[string]*RunStatement)[vs[1].(string)]
	}).(RunStatementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RunStatementInput)(nil)).Elem(), &RunStatement{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunStatementArrayInput)(nil)).Elem(), RunStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunStatementMapInput)(nil)).Elem(), RunStatementMap{})
	pulumi.RegisterOutputType(RunStatementOutput{})
	pulumi.RegisterOutputType(RunStatementArrayOutput{})
	pulumi.RegisterOutputType(RunStatementMapOutput{})
}
