// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataintegration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Workspace Applications in Oracle Cloud Infrastructure Data Integration service.
//
// Retrieves a list of applications and provides options to filter the list.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataIntegration"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataIntegration.GetWorkspaceApplications(ctx, &dataintegration.GetWorkspaceApplicationsArgs{
//				WorkspaceId:  oci_dataintegration_workspace.Test_workspace.Id,
//				Fields:       _var.Workspace_application_fields,
//				Identifiers:  _var.Workspace_application_identifier,
//				Name:         pulumi.StringRef(_var.Workspace_application_name),
//				NameContains: pulumi.StringRef(_var.Workspace_application_name_contains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetWorkspaceApplications(ctx *pulumi.Context, args *GetWorkspaceApplicationsArgs, opts ...pulumi.InvokeOption) (*GetWorkspaceApplicationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetWorkspaceApplicationsResult
	err := ctx.Invoke("oci:DataIntegration/getWorkspaceApplications:getWorkspaceApplications", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspaceApplications.
type GetWorkspaceApplicationsArgs struct {
	// Specifies the fields to get for an object.
	Fields  []string                         `pulumi:"fields"`
	Filters []GetWorkspaceApplicationsFilter `pulumi:"filters"`
	// Used to filter by the identifier of the published object.
	Identifiers []string `pulumi:"identifiers"`
	// Used to filter by the name of the object.
	Name *string `pulumi:"name"`
	// This parameter can be used to filter objects by the names that match partially or fully with the given value.
	NameContains *string `pulumi:"nameContains"`
	// The workspace ID.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspaceApplications.
type GetWorkspaceApplicationsResult struct {
	// The list of application_summary_collection.
	ApplicationSummaryCollections []GetWorkspaceApplicationsApplicationSummaryCollection `pulumi:"applicationSummaryCollections"`
	Fields                        []string                                               `pulumi:"fields"`
	Filters                       []GetWorkspaceApplicationsFilter                       `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifiers []string `pulumi:"identifiers"`
	// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name         *string `pulumi:"name"`
	NameContains *string `pulumi:"nameContains"`
	// The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
	WorkspaceId string `pulumi:"workspaceId"`
}

func GetWorkspaceApplicationsOutput(ctx *pulumi.Context, args GetWorkspaceApplicationsOutputArgs, opts ...pulumi.InvokeOption) GetWorkspaceApplicationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetWorkspaceApplicationsResult, error) {
			args := v.(GetWorkspaceApplicationsArgs)
			r, err := GetWorkspaceApplications(ctx, &args, opts...)
			var s GetWorkspaceApplicationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetWorkspaceApplicationsResultOutput)
}

// A collection of arguments for invoking getWorkspaceApplications.
type GetWorkspaceApplicationsOutputArgs struct {
	// Specifies the fields to get for an object.
	Fields  pulumi.StringArrayInput                  `pulumi:"fields"`
	Filters GetWorkspaceApplicationsFilterArrayInput `pulumi:"filters"`
	// Used to filter by the identifier of the published object.
	Identifiers pulumi.StringArrayInput `pulumi:"identifiers"`
	// Used to filter by the name of the object.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This parameter can be used to filter objects by the names that match partially or fully with the given value.
	NameContains pulumi.StringPtrInput `pulumi:"nameContains"`
	// The workspace ID.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (GetWorkspaceApplicationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceApplicationsArgs)(nil)).Elem()
}

// A collection of values returned by getWorkspaceApplications.
type GetWorkspaceApplicationsResultOutput struct{ *pulumi.OutputState }

func (GetWorkspaceApplicationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceApplicationsResult)(nil)).Elem()
}

func (o GetWorkspaceApplicationsResultOutput) ToGetWorkspaceApplicationsResultOutput() GetWorkspaceApplicationsResultOutput {
	return o
}

func (o GetWorkspaceApplicationsResultOutput) ToGetWorkspaceApplicationsResultOutputWithContext(ctx context.Context) GetWorkspaceApplicationsResultOutput {
	return o
}

// The list of application_summary_collection.
func (o GetWorkspaceApplicationsResultOutput) ApplicationSummaryCollections() GetWorkspaceApplicationsApplicationSummaryCollectionArrayOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) []GetWorkspaceApplicationsApplicationSummaryCollection {
		return v.ApplicationSummaryCollections
	}).(GetWorkspaceApplicationsApplicationSummaryCollectionArrayOutput)
}

func (o GetWorkspaceApplicationsResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o GetWorkspaceApplicationsResultOutput) Filters() GetWorkspaceApplicationsFilterArrayOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) []GetWorkspaceApplicationsFilter { return v.Filters }).(GetWorkspaceApplicationsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetWorkspaceApplicationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
func (o GetWorkspaceApplicationsResultOutput) Identifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) []string { return v.Identifiers }).(pulumi.StringArrayOutput)
}

// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
func (o GetWorkspaceApplicationsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetWorkspaceApplicationsResultOutput) NameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) *string { return v.NameContains }).(pulumi.StringPtrOutput)
}

// The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
func (o GetWorkspaceApplicationsResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceApplicationsResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetWorkspaceApplicationsResultOutput{})
}
