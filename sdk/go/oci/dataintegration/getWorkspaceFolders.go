// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataintegration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Workspace Folders in Oracle Cloud Infrastructure Data Integration service.
//
// Retrieves a list of folders in a project and provides options to filter the list.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/dataintegration"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dataintegration.GetWorkspaceFolders(ctx, &dataintegration.GetWorkspaceFoldersArgs{
//				WorkspaceId:   testWorkspace.Id,
//				AggregatorKey: pulumi.StringRef(workspaceFolderAggregatorKey),
//				Fields:        workspaceFolderFields,
//				Identifiers:   workspaceFolderIdentifier,
//				Name:          pulumi.StringRef(workspaceFolderName),
//				NameContains:  pulumi.StringRef(workspaceFolderNameContains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetWorkspaceFolders(ctx *pulumi.Context, args *GetWorkspaceFoldersArgs, opts ...pulumi.InvokeOption) (*GetWorkspaceFoldersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetWorkspaceFoldersResult
	err := ctx.Invoke("oci:DataIntegration/getWorkspaceFolders:getWorkspaceFolders", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspaceFolders.
type GetWorkspaceFoldersArgs struct {
	// Used to filter by the project or the folder object.
	AggregatorKey *string `pulumi:"aggregatorKey"`
	// Specifies the fields to get for an object.
	Fields  []string                    `pulumi:"fields"`
	Filters []GetWorkspaceFoldersFilter `pulumi:"filters"`
	// Used to filter by the identifier of the object.
	Identifiers []string `pulumi:"identifiers"`
	// Used to filter by the name of the object.
	Name *string `pulumi:"name"`
	// This parameter can be used to filter objects by the names that match partially or fully with the given value.
	NameContains *string `pulumi:"nameContains"`
	// The workspace ID.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getWorkspaceFolders.
type GetWorkspaceFoldersResult struct {
	// The owning object key for this object.
	AggregatorKey *string                     `pulumi:"aggregatorKey"`
	Fields        []string                    `pulumi:"fields"`
	Filters       []GetWorkspaceFoldersFilter `pulumi:"filters"`
	// The list of folder_summary_collection.
	FolderSummaryCollections []GetWorkspaceFoldersFolderSummaryCollection `pulumi:"folderSummaryCollections"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The identifier of the aggregator.
	Identifiers []string `pulumi:"identifiers"`
	// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name         *string `pulumi:"name"`
	NameContains *string `pulumi:"nameContains"`
	WorkspaceId  string  `pulumi:"workspaceId"`
}

func GetWorkspaceFoldersOutput(ctx *pulumi.Context, args GetWorkspaceFoldersOutputArgs, opts ...pulumi.InvokeOption) GetWorkspaceFoldersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetWorkspaceFoldersResultOutput, error) {
			args := v.(GetWorkspaceFoldersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataIntegration/getWorkspaceFolders:getWorkspaceFolders", args, GetWorkspaceFoldersResultOutput{}, options).(GetWorkspaceFoldersResultOutput), nil
		}).(GetWorkspaceFoldersResultOutput)
}

// A collection of arguments for invoking getWorkspaceFolders.
type GetWorkspaceFoldersOutputArgs struct {
	// Used to filter by the project or the folder object.
	AggregatorKey pulumi.StringPtrInput `pulumi:"aggregatorKey"`
	// Specifies the fields to get for an object.
	Fields  pulumi.StringArrayInput             `pulumi:"fields"`
	Filters GetWorkspaceFoldersFilterArrayInput `pulumi:"filters"`
	// Used to filter by the identifier of the object.
	Identifiers pulumi.StringArrayInput `pulumi:"identifiers"`
	// Used to filter by the name of the object.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This parameter can be used to filter objects by the names that match partially or fully with the given value.
	NameContains pulumi.StringPtrInput `pulumi:"nameContains"`
	// The workspace ID.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (GetWorkspaceFoldersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceFoldersArgs)(nil)).Elem()
}

// A collection of values returned by getWorkspaceFolders.
type GetWorkspaceFoldersResultOutput struct{ *pulumi.OutputState }

func (GetWorkspaceFoldersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceFoldersResult)(nil)).Elem()
}

func (o GetWorkspaceFoldersResultOutput) ToGetWorkspaceFoldersResultOutput() GetWorkspaceFoldersResultOutput {
	return o
}

func (o GetWorkspaceFoldersResultOutput) ToGetWorkspaceFoldersResultOutputWithContext(ctx context.Context) GetWorkspaceFoldersResultOutput {
	return o
}

// The owning object key for this object.
func (o GetWorkspaceFoldersResultOutput) AggregatorKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) *string { return v.AggregatorKey }).(pulumi.StringPtrOutput)
}

func (o GetWorkspaceFoldersResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o GetWorkspaceFoldersResultOutput) Filters() GetWorkspaceFoldersFilterArrayOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) []GetWorkspaceFoldersFilter { return v.Filters }).(GetWorkspaceFoldersFilterArrayOutput)
}

// The list of folder_summary_collection.
func (o GetWorkspaceFoldersResultOutput) FolderSummaryCollections() GetWorkspaceFoldersFolderSummaryCollectionArrayOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) []GetWorkspaceFoldersFolderSummaryCollection {
		return v.FolderSummaryCollections
	}).(GetWorkspaceFoldersFolderSummaryCollectionArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetWorkspaceFoldersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the aggregator.
func (o GetWorkspaceFoldersResultOutput) Identifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) []string { return v.Identifiers }).(pulumi.StringArrayOutput)
}

// Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
func (o GetWorkspaceFoldersResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetWorkspaceFoldersResultOutput) NameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) *string { return v.NameContains }).(pulumi.StringPtrOutput)
}

func (o GetWorkspaceFoldersResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceFoldersResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetWorkspaceFoldersResultOutput{})
}
