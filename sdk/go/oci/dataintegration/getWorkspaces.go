// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataintegration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the list of Workspaces in Oracle Cloud Infrastructure Data Integration service.
//
// Retrieves a list of Data Integration workspaces.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataIntegration"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataIntegration.GetWorkspaces(ctx, &dataintegration.GetWorkspacesArgs{
//				CompartmentId: _var.Compartment_id,
//				Name:          pulumi.StringRef(_var.Workspace_name),
//				State:         pulumi.StringRef(_var.Workspace_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetWorkspaces(ctx *pulumi.Context, args *GetWorkspacesArgs, opts ...pulumi.InvokeOption) (*GetWorkspacesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetWorkspacesResult
	err := ctx.Invoke("oci:DataIntegration/getWorkspaces:getWorkspaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspaces.
type GetWorkspacesArgs struct {
	// The OCID of the compartment containing the resources you want to list.
	CompartmentId string                `pulumi:"compartmentId"`
	Filters       []GetWorkspacesFilter `pulumi:"filters"`
	// Used to filter by the name of the object.
	Name *string `pulumi:"name"`
	// The lifecycle state of a resource. When specified, the operation only returns resources that match the given lifecycle state. When not specified, all lifecycle states are processed as a match.
	State *string `pulumi:"state"`
}

// A collection of values returned by getWorkspaces.
type GetWorkspacesResult struct {
	// The OCID of the compartment that contains the workspace.
	CompartmentId string                `pulumi:"compartmentId"`
	Filters       []GetWorkspacesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// Lifecycle states for workspaces in Data Integration Service CREATING - The resource is being created and may not be usable until the entire metadata is defined UPDATING - The resource is being updated and may not be usable until all changes are commited DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons DELETED  - The resource has been deleted and isn't available FAILED   - The resource is in a failed state due to validation or other errors STARTING - The resource is being started and may not be usable until becomes ACTIVE again STOPPING - The resource is in the process of Stopping and may not be usable until it Stops or fails STOPPED  - The resource is in Stopped state due to stop operation.
	State *string `pulumi:"state"`
	// The list of workspaces.
	Workspaces []GetWorkspacesWorkspace `pulumi:"workspaces"`
}

func GetWorkspacesOutput(ctx *pulumi.Context, args GetWorkspacesOutputArgs, opts ...pulumi.InvokeOption) GetWorkspacesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetWorkspacesResult, error) {
			args := v.(GetWorkspacesArgs)
			r, err := GetWorkspaces(ctx, &args, opts...)
			var s GetWorkspacesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetWorkspacesResultOutput)
}

// A collection of arguments for invoking getWorkspaces.
type GetWorkspacesOutputArgs struct {
	// The OCID of the compartment containing the resources you want to list.
	CompartmentId pulumi.StringInput            `pulumi:"compartmentId"`
	Filters       GetWorkspacesFilterArrayInput `pulumi:"filters"`
	// Used to filter by the name of the object.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The lifecycle state of a resource. When specified, the operation only returns resources that match the given lifecycle state. When not specified, all lifecycle states are processed as a match.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetWorkspacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspacesArgs)(nil)).Elem()
}

// A collection of values returned by getWorkspaces.
type GetWorkspacesResultOutput struct{ *pulumi.OutputState }

func (GetWorkspacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspacesResult)(nil)).Elem()
}

func (o GetWorkspacesResultOutput) ToGetWorkspacesResultOutput() GetWorkspacesResultOutput {
	return o
}

func (o GetWorkspacesResultOutput) ToGetWorkspacesResultOutputWithContext(ctx context.Context) GetWorkspacesResultOutput {
	return o
}

func (o GetWorkspacesResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetWorkspacesResult] {
	return pulumix.Output[GetWorkspacesResult]{
		OutputState: o.OutputState,
	}
}

// The OCID of the compartment that contains the workspace.
func (o GetWorkspacesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspacesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetWorkspacesResultOutput) Filters() GetWorkspacesFilterArrayOutput {
	return o.ApplyT(func(v GetWorkspacesResult) []GetWorkspacesFilter { return v.Filters }).(GetWorkspacesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetWorkspacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspacesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWorkspacesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspacesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Lifecycle states for workspaces in Data Integration Service CREATING - The resource is being created and may not be usable until the entire metadata is defined UPDATING - The resource is being updated and may not be usable until all changes are commited DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons DELETED  - The resource has been deleted and isn't available FAILED   - The resource is in a failed state due to validation or other errors STARTING - The resource is being started and may not be usable until becomes ACTIVE again STOPPING - The resource is in the process of Stopping and may not be usable until it Stops or fails STOPPED  - The resource is in Stopped state due to stop operation.
func (o GetWorkspacesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkspacesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The list of workspaces.
func (o GetWorkspacesResultOutput) Workspaces() GetWorkspacesWorkspaceArrayOutput {
	return o.ApplyT(func(v GetWorkspacesResult) []GetWorkspacesWorkspace { return v.Workspaces }).(GetWorkspacesWorkspaceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetWorkspacesResultOutput{})
}
