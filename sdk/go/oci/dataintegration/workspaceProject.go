// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataintegration

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Workspace Project resource in Oracle Cloud Infrastructure Data Integration service.
//
// Creates a project. Projects are organizational constructs within a workspace that you use to organize your design-time resources, such as tasks or data flows. Projects can be organized into folders.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataIntegration"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataIntegration.NewWorkspaceProject(ctx, "testWorkspaceProject", &DataIntegration.WorkspaceProjectArgs{
//				Identifier:   pulumi.Any(_var.Workspace_project_identifier),
//				WorkspaceId:  pulumi.Any(oci_dataintegration_workspace.Test_workspace.Id),
//				Description:  pulumi.Any(_var.Workspace_project_description),
//				Key:          pulumi.Any(_var.Workspace_project_key),
//				ModelVersion: pulumi.Any(_var.Workspace_project_model_version),
//				ObjectStatus: pulumi.Any(_var.Workspace_project_object_status),
//				RegistryMetadata: &dataintegration.WorkspaceProjectRegistryMetadataArgs{
//					AggregatorKey:   pulumi.Any(_var.Workspace_project_registry_metadata_aggregator_key),
//					IsFavorite:      pulumi.Any(_var.Workspace_project_registry_metadata_is_favorite),
//					Key:             pulumi.Any(_var.Workspace_project_registry_metadata_key),
//					Labels:          pulumi.Any(_var.Workspace_project_registry_metadata_labels),
//					RegistryVersion: pulumi.Any(_var.Workspace_project_registry_metadata_registry_version),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WorkspaceProjects can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:DataIntegration/workspaceProject:WorkspaceProject test_workspace_project "workspaces/{workspaceId}/projects/{projectKey}"
//
// ```
type WorkspaceProject struct {
	pulumi.CustomResourceState

	// (Updatable) A user defined description for the project.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// (Updatable) The identifying key for the object.
	Key pulumi.StringOutput `pulumi:"key"`
	// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
	KeyMap pulumi.MapOutput `pulumi:"keyMap"`
	// A summary type containing information about the object including its key, name and when/who created/updated it.
	Metadatas WorkspaceProjectMetadataArrayOutput `pulumi:"metadatas"`
	// The type of the object.
	ModelType pulumi.StringOutput `pulumi:"modelType"`
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringOutput `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntOutput `pulumi:"objectStatus"`
	// The version of the object that is used to track changes in the object instance.
	ObjectVersion pulumi.IntOutput `pulumi:"objectVersion"`
	// A reference to the object's parent.
	ParentReves WorkspaceProjectParentRefArrayOutput `pulumi:"parentReves"`
	ProjectKey  pulumi.StringOutput                  `pulumi:"projectKey"`
	// (Updatable) Information about the object and its parent.
	RegistryMetadata WorkspaceProjectRegistryMetadataOutput `pulumi:"registryMetadata"`
	// The workspace ID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspaceProject registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceProject(ctx *pulumi.Context,
	name string, args *WorkspaceProjectArgs, opts ...pulumi.ResourceOption) (*WorkspaceProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceProject
	err := ctx.RegisterResource("oci:DataIntegration/workspaceProject:WorkspaceProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceProject gets an existing WorkspaceProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceProjectState, opts ...pulumi.ResourceOption) (*WorkspaceProject, error) {
	var resource WorkspaceProject
	err := ctx.ReadResource("oci:DataIntegration/workspaceProject:WorkspaceProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceProject resources.
type workspaceProjectState struct {
	// (Updatable) A user defined description for the project.
	Description *string `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifier *string `pulumi:"identifier"`
	// (Updatable) The identifying key for the object.
	Key *string `pulumi:"key"`
	// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
	KeyMap map[string]interface{} `pulumi:"keyMap"`
	// A summary type containing information about the object including its key, name and when/who created/updated it.
	Metadatas []WorkspaceProjectMetadata `pulumi:"metadatas"`
	// The type of the object.
	ModelType *string `pulumi:"modelType"`
	// (Updatable) The model version of an object.
	ModelVersion *string `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name *string `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus *int `pulumi:"objectStatus"`
	// The version of the object that is used to track changes in the object instance.
	ObjectVersion *int `pulumi:"objectVersion"`
	// A reference to the object's parent.
	ParentReves []WorkspaceProjectParentRef `pulumi:"parentReves"`
	ProjectKey  *string                     `pulumi:"projectKey"`
	// (Updatable) Information about the object and its parent.
	RegistryMetadata *WorkspaceProjectRegistryMetadata `pulumi:"registryMetadata"`
	// The workspace ID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WorkspaceId *string `pulumi:"workspaceId"`
}

type WorkspaceProjectState struct {
	// (Updatable) A user defined description for the project.
	Description pulumi.StringPtrInput
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringPtrInput
	// (Updatable) The identifying key for the object.
	Key pulumi.StringPtrInput
	// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
	KeyMap pulumi.MapInput
	// A summary type containing information about the object including its key, name and when/who created/updated it.
	Metadatas WorkspaceProjectMetadataArrayInput
	// The type of the object.
	ModelType pulumi.StringPtrInput
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringPtrInput
	// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringPtrInput
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntPtrInput
	// The version of the object that is used to track changes in the object instance.
	ObjectVersion pulumi.IntPtrInput
	// A reference to the object's parent.
	ParentReves WorkspaceProjectParentRefArrayInput
	ProjectKey  pulumi.StringPtrInput
	// (Updatable) Information about the object and its parent.
	RegistryMetadata WorkspaceProjectRegistryMetadataPtrInput
	// The workspace ID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WorkspaceId pulumi.StringPtrInput
}

func (WorkspaceProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProjectState)(nil)).Elem()
}

type workspaceProjectArgs struct {
	// (Updatable) A user defined description for the project.
	Description *string `pulumi:"description"`
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifier string `pulumi:"identifier"`
	// (Updatable) The identifying key for the object.
	Key *string `pulumi:"key"`
	// (Updatable) The model version of an object.
	ModelVersion *string `pulumi:"modelVersion"`
	// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name *string `pulumi:"name"`
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus *int    `pulumi:"objectStatus"`
	ProjectKey   *string `pulumi:"projectKey"`
	// (Updatable) Information about the object and its parent.
	RegistryMetadata *WorkspaceProjectRegistryMetadata `pulumi:"registryMetadata"`
	// The workspace ID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a WorkspaceProject resource.
type WorkspaceProjectArgs struct {
	// (Updatable) A user defined description for the project.
	Description pulumi.StringPtrInput
	// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
	Identifier pulumi.StringInput
	// (Updatable) The identifying key for the object.
	Key pulumi.StringPtrInput
	// (Updatable) The model version of an object.
	ModelVersion pulumi.StringPtrInput
	// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
	Name pulumi.StringPtrInput
	// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
	ObjectStatus pulumi.IntPtrInput
	ProjectKey   pulumi.StringPtrInput
	// (Updatable) Information about the object and its parent.
	RegistryMetadata WorkspaceProjectRegistryMetadataPtrInput
	// The workspace ID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	WorkspaceId pulumi.StringInput
}

func (WorkspaceProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProjectArgs)(nil)).Elem()
}

type WorkspaceProjectInput interface {
	pulumi.Input

	ToWorkspaceProjectOutput() WorkspaceProjectOutput
	ToWorkspaceProjectOutputWithContext(ctx context.Context) WorkspaceProjectOutput
}

func (*WorkspaceProject) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProject)(nil)).Elem()
}

func (i *WorkspaceProject) ToWorkspaceProjectOutput() WorkspaceProjectOutput {
	return i.ToWorkspaceProjectOutputWithContext(context.Background())
}

func (i *WorkspaceProject) ToWorkspaceProjectOutputWithContext(ctx context.Context) WorkspaceProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceProjectOutput)
}

// WorkspaceProjectArrayInput is an input type that accepts WorkspaceProjectArray and WorkspaceProjectArrayOutput values.
// You can construct a concrete instance of `WorkspaceProjectArrayInput` via:
//
//	WorkspaceProjectArray{ WorkspaceProjectArgs{...} }
type WorkspaceProjectArrayInput interface {
	pulumi.Input

	ToWorkspaceProjectArrayOutput() WorkspaceProjectArrayOutput
	ToWorkspaceProjectArrayOutputWithContext(context.Context) WorkspaceProjectArrayOutput
}

type WorkspaceProjectArray []WorkspaceProjectInput

func (WorkspaceProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceProject)(nil)).Elem()
}

func (i WorkspaceProjectArray) ToWorkspaceProjectArrayOutput() WorkspaceProjectArrayOutput {
	return i.ToWorkspaceProjectArrayOutputWithContext(context.Background())
}

func (i WorkspaceProjectArray) ToWorkspaceProjectArrayOutputWithContext(ctx context.Context) WorkspaceProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceProjectArrayOutput)
}

// WorkspaceProjectMapInput is an input type that accepts WorkspaceProjectMap and WorkspaceProjectMapOutput values.
// You can construct a concrete instance of `WorkspaceProjectMapInput` via:
//
//	WorkspaceProjectMap{ "key": WorkspaceProjectArgs{...} }
type WorkspaceProjectMapInput interface {
	pulumi.Input

	ToWorkspaceProjectMapOutput() WorkspaceProjectMapOutput
	ToWorkspaceProjectMapOutputWithContext(context.Context) WorkspaceProjectMapOutput
}

type WorkspaceProjectMap map[string]WorkspaceProjectInput

func (WorkspaceProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceProject)(nil)).Elem()
}

func (i WorkspaceProjectMap) ToWorkspaceProjectMapOutput() WorkspaceProjectMapOutput {
	return i.ToWorkspaceProjectMapOutputWithContext(context.Background())
}

func (i WorkspaceProjectMap) ToWorkspaceProjectMapOutputWithContext(ctx context.Context) WorkspaceProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceProjectMapOutput)
}

type WorkspaceProjectOutput struct{ *pulumi.OutputState }

func (WorkspaceProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceProject)(nil)).Elem()
}

func (o WorkspaceProjectOutput) ToWorkspaceProjectOutput() WorkspaceProjectOutput {
	return o
}

func (o WorkspaceProjectOutput) ToWorkspaceProjectOutputWithContext(ctx context.Context) WorkspaceProjectOutput {
	return o
}

// (Updatable) A user defined description for the project.
func (o WorkspaceProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
func (o WorkspaceProjectOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// (Updatable) The identifying key for the object.
func (o WorkspaceProjectOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
func (o WorkspaceProjectOutput) KeyMap() pulumi.MapOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.MapOutput { return v.KeyMap }).(pulumi.MapOutput)
}

// A summary type containing information about the object including its key, name and when/who created/updated it.
func (o WorkspaceProjectOutput) Metadatas() WorkspaceProjectMetadataArrayOutput {
	return o.ApplyT(func(v *WorkspaceProject) WorkspaceProjectMetadataArrayOutput { return v.Metadatas }).(WorkspaceProjectMetadataArrayOutput)
}

// The type of the object.
func (o WorkspaceProjectOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.ModelType }).(pulumi.StringOutput)
}

// (Updatable) The model version of an object.
func (o WorkspaceProjectOutput) ModelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.ModelVersion }).(pulumi.StringOutput)
}

// (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
func (o WorkspaceProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
func (o WorkspaceProjectOutput) ObjectStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.IntOutput { return v.ObjectStatus }).(pulumi.IntOutput)
}

// The version of the object that is used to track changes in the object instance.
func (o WorkspaceProjectOutput) ObjectVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.IntOutput { return v.ObjectVersion }).(pulumi.IntOutput)
}

// A reference to the object's parent.
func (o WorkspaceProjectOutput) ParentReves() WorkspaceProjectParentRefArrayOutput {
	return o.ApplyT(func(v *WorkspaceProject) WorkspaceProjectParentRefArrayOutput { return v.ParentReves }).(WorkspaceProjectParentRefArrayOutput)
}

func (o WorkspaceProjectOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// (Updatable) Information about the object and its parent.
func (o WorkspaceProjectOutput) RegistryMetadata() WorkspaceProjectRegistryMetadataOutput {
	return o.ApplyT(func(v *WorkspaceProject) WorkspaceProjectRegistryMetadataOutput { return v.RegistryMetadata }).(WorkspaceProjectRegistryMetadataOutput)
}

// The workspace ID.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o WorkspaceProjectOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceProject) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type WorkspaceProjectArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceProject)(nil)).Elem()
}

func (o WorkspaceProjectArrayOutput) ToWorkspaceProjectArrayOutput() WorkspaceProjectArrayOutput {
	return o
}

func (o WorkspaceProjectArrayOutput) ToWorkspaceProjectArrayOutputWithContext(ctx context.Context) WorkspaceProjectArrayOutput {
	return o
}

func (o WorkspaceProjectArrayOutput) Index(i pulumi.IntInput) WorkspaceProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceProject {
		return vs[0].([]*WorkspaceProject)[vs[1].(int)]
	}).(WorkspaceProjectOutput)
}

type WorkspaceProjectMapOutput struct{ *pulumi.OutputState }

func (WorkspaceProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceProject)(nil)).Elem()
}

func (o WorkspaceProjectMapOutput) ToWorkspaceProjectMapOutput() WorkspaceProjectMapOutput {
	return o
}

func (o WorkspaceProjectMapOutput) ToWorkspaceProjectMapOutputWithContext(ctx context.Context) WorkspaceProjectMapOutput {
	return o
}

func (o WorkspaceProjectMapOutput) MapIndex(k pulumi.StringInput) WorkspaceProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceProject {
		return vs[0].(map[string]*WorkspaceProject)[vs[1].(string)]
	}).(WorkspaceProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceProjectInput)(nil)).Elem(), &WorkspaceProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceProjectArrayInput)(nil)).Elem(), WorkspaceProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceProjectMapInput)(nil)).Elem(), WorkspaceProjectMap{})
	pulumi.RegisterOutputType(WorkspaceProjectOutput{})
	pulumi.RegisterOutputType(WorkspaceProjectArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceProjectMapOutput{})
}
