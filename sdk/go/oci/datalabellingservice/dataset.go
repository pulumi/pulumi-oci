// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datalabellingservice

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Dataset resource in Oracle Cloud Infrastructure Data Labeling Service service.
//
// Creates a new Dataset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataLabellingService"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := DataLabellingService.NewDataset(ctx, "testDataset", &DataLabellingService.DatasetArgs{
// 			AnnotationFormat: pulumi.Any(_var.Dataset_annotation_format),
// 			CompartmentId:    pulumi.Any(_var.Compartment_id),
// 			DatasetFormatDetails: &datalabellingservice.DatasetDatasetFormatDetailsArgs{
// 				FormatType: pulumi.Any(_var.Dataset_dataset_format_details_format_type),
// 			},
// 			DatasetSourceDetails: &datalabellingservice.DatasetDatasetSourceDetailsArgs{
// 				Bucket:     pulumi.Any(_var.Dataset_dataset_source_details_bucket),
// 				Namespace:  pulumi.Any(_var.Dataset_dataset_source_details_namespace),
// 				SourceType: pulumi.Any(_var.Dataset_dataset_source_details_source_type),
// 				Prefix:     pulumi.Any(_var.Dataset_dataset_source_details_prefix),
// 			},
// 			LabelSet: &datalabellingservice.DatasetLabelSetArgs{
// 				Items: datalabellingservice.DatasetLabelSetItemArray{
// 					&datalabellingservice.DatasetLabelSetItemArgs{
// 						Name: pulumi.Any(_var.Dataset_label_set_items_name),
// 					},
// 				},
// 			},
// 			DefinedTags:                          pulumi.Any(_var.Dataset_defined_tags),
// 			Description:                          pulumi.Any(_var.Dataset_description),
// 			DisplayName:                          pulumi.Any(_var.Dataset_display_name),
// 			FreeformTags:                         pulumi.Any(_var.Dataset_freeform_tags),
// 			InitialRecordGenerationConfiguration: nil,
// 			LabelingInstructions:                 pulumi.Any(_var.Dataset_labeling_instructions),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Datasets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:DataLabellingService/dataset:Dataset test_dataset "id"
// ```
type Dataset struct {
	pulumi.CustomResourceState

	// The annotation format name required for labeling records.
	AnnotationFormat pulumi.StringOutput `pulumi:"annotationFormat"`
	// (Updatable) The OCID of the compartment of the resource.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Specifies how to process the data. Supported formats include IMAGE and TEXT.
	DatasetFormatDetails DatasetDatasetFormatDetailsOutput `pulumi:"datasetFormatDetails"`
	// This allows the customer to specify the source of the dataset.
	DatasetSourceDetails DatasetDatasetSourceDetailsOutput `pulumi:"datasetSourceDetails"`
	// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user provided description of the dataset
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-friendly display name for the resource.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Initial Generate Records configuration, generates records from the Dataset's source.
	InitialRecordGenerationConfiguration DatasetInitialRecordGenerationConfigurationOutput `pulumi:"initialRecordGenerationConfiguration"`
	// An ordered collection of Labels that are unique by name.
	LabelSet DatasetLabelSetOutput `pulumi:"labelSet"`
	// The labeling instructions for human labelers in rich text format
	LabelingInstructions pulumi.StringOutput `pulumi:"labelingInstructions"`
	// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the resource was created, in the timestamp format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnnotationFormat == nil {
		return nil, errors.New("invalid value for required argument 'AnnotationFormat'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DatasetFormatDetails == nil {
		return nil, errors.New("invalid value for required argument 'DatasetFormatDetails'")
	}
	if args.DatasetSourceDetails == nil {
		return nil, errors.New("invalid value for required argument 'DatasetSourceDetails'")
	}
	if args.LabelSet == nil {
		return nil, errors.New("invalid value for required argument 'LabelSet'")
	}
	var resource Dataset
	err := ctx.RegisterResource("oci:DataLabellingService/dataset:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("oci:DataLabellingService/dataset:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
	// The annotation format name required for labeling records.
	AnnotationFormat *string `pulumi:"annotationFormat"`
	// (Updatable) The OCID of the compartment of the resource.
	CompartmentId *string `pulumi:"compartmentId"`
	// Specifies how to process the data. Supported formats include IMAGE and TEXT.
	DatasetFormatDetails *DatasetDatasetFormatDetails `pulumi:"datasetFormatDetails"`
	// This allows the customer to specify the source of the dataset.
	DatasetSourceDetails *DatasetDatasetSourceDetails `pulumi:"datasetSourceDetails"`
	// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user provided description of the dataset
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name for the resource.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Initial Generate Records configuration, generates records from the Dataset's source.
	InitialRecordGenerationConfiguration *DatasetInitialRecordGenerationConfiguration `pulumi:"initialRecordGenerationConfiguration"`
	// An ordered collection of Labels that are unique by name.
	LabelSet *DatasetLabelSet `pulumi:"labelSet"`
	// The labeling instructions for human labelers in rich text format
	LabelingInstructions *string `pulumi:"labelingInstructions"`
	// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
	State *string `pulumi:"state"`
	// The date and time the resource was created, in the timestamp format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DatasetState struct {
	// The annotation format name required for labeling records.
	AnnotationFormat pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment of the resource.
	CompartmentId pulumi.StringPtrInput
	// Specifies how to process the data. Supported formats include IMAGE and TEXT.
	DatasetFormatDetails DatasetDatasetFormatDetailsPtrInput
	// This allows the customer to specify the source of the dataset.
	DatasetSourceDetails DatasetDatasetSourceDetailsPtrInput
	// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user provided description of the dataset
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name for the resource.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Initial Generate Records configuration, generates records from the Dataset's source.
	InitialRecordGenerationConfiguration DatasetInitialRecordGenerationConfigurationPtrInput
	// An ordered collection of Labels that are unique by name.
	LabelSet DatasetLabelSetPtrInput
	// The labeling instructions for human labelers in rich text format
	LabelingInstructions pulumi.StringPtrInput
	// A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in FAILED or NEEDS_ATTENTION state.
	LifecycleDetails pulumi.StringPtrInput
	// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
	State pulumi.StringPtrInput
	// The date and time the resource was created, in the timestamp format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated, in the timestamp format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// The annotation format name required for labeling records.
	AnnotationFormat string `pulumi:"annotationFormat"`
	// (Updatable) The OCID of the compartment of the resource.
	CompartmentId string `pulumi:"compartmentId"`
	// Specifies how to process the data. Supported formats include IMAGE and TEXT.
	DatasetFormatDetails DatasetDatasetFormatDetails `pulumi:"datasetFormatDetails"`
	// This allows the customer to specify the source of the dataset.
	DatasetSourceDetails DatasetDatasetSourceDetails `pulumi:"datasetSourceDetails"`
	// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user provided description of the dataset
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name for the resource.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Initial Generate Records configuration, generates records from the Dataset's source.
	InitialRecordGenerationConfiguration *DatasetInitialRecordGenerationConfiguration `pulumi:"initialRecordGenerationConfiguration"`
	// An ordered collection of Labels that are unique by name.
	LabelSet DatasetLabelSet `pulumi:"labelSet"`
	// The labeling instructions for human labelers in rich text format
	LabelingInstructions *string `pulumi:"labelingInstructions"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// The annotation format name required for labeling records.
	AnnotationFormat pulumi.StringInput
	// (Updatable) The OCID of the compartment of the resource.
	CompartmentId pulumi.StringInput
	// Specifies how to process the data. Supported formats include IMAGE and TEXT.
	DatasetFormatDetails DatasetDatasetFormatDetailsInput
	// This allows the customer to specify the source of the dataset.
	DatasetSourceDetails DatasetDatasetSourceDetailsInput
	// (Updatable) The defined tags for this resource. Each key is predefined and scoped to a namespace. For example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user provided description of the dataset
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name for the resource.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only. For example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Initial Generate Records configuration, generates records from the Dataset's source.
	InitialRecordGenerationConfiguration DatasetInitialRecordGenerationConfigurationPtrInput
	// An ordered collection of Labels that are unique by name.
	LabelSet DatasetLabelSetInput
	// The labeling instructions for human labelers in rich text format
	LabelingInstructions pulumi.StringPtrInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//          DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// DatasetMapInput is an input type that accepts DatasetMap and DatasetMapOutput values.
// You can construct a concrete instance of `DatasetMapInput` via:
//
//          DatasetMap{ "key": DatasetArgs{...} }
type DatasetMapInput interface {
	pulumi.Input

	ToDatasetMapOutput() DatasetMapOutput
	ToDatasetMapOutputWithContext(context.Context) DatasetMapOutput
}

type DatasetMap map[string]DatasetInput

func (DatasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (i DatasetMap) ToDatasetMapOutput() DatasetMapOutput {
	return i.ToDatasetMapOutputWithContext(context.Background())
}

func (i DatasetMap) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMapOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dataset)(nil)).Elem()
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].([]*Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

type DatasetMapOutput struct{ *pulumi.OutputState }

func (DatasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dataset)(nil)).Elem()
}

func (o DatasetMapOutput) ToDatasetMapOutput() DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) ToDatasetMapOutputWithContext(ctx context.Context) DatasetMapOutput {
	return o
}

func (o DatasetMapOutput) MapIndex(k pulumi.StringInput) DatasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dataset {
		return vs[0].(map[string]*Dataset)[vs[1].(string)]
	}).(DatasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetArrayInput)(nil)).Elem(), DatasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetMapInput)(nil)).Elem(), DatasetMap{})
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetMapOutput{})
}
