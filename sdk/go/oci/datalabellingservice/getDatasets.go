// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datalabellingservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Datasets in Oracle Cloud Infrastructure Data Labeling Service service.
//
// Returns a list of Datasets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DataLabellingService"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataLabellingService.GetDatasets(ctx, &datalabellingservice.GetDatasetsArgs{
//				CompartmentId:    compartmentId,
//				AnnotationFormat: pulumi.StringRef(datasetAnnotationFormat),
//				DisplayName:      pulumi.StringRef(datasetDisplayName),
//				Id:               pulumi.StringRef(datasetId),
//				State:            pulumi.StringRef(datasetState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDatasets(ctx *pulumi.Context, args *GetDatasetsArgs, opts ...pulumi.InvokeOption) (*GetDatasetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatasetsResult
	err := ctx.Invoke("oci:DataLabellingService/getDatasets:getDatasets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatasets.
type GetDatasetsArgs struct {
	// A filter to return only resources that match the entire annotation format given.
	AnnotationFormat *string `pulumi:"annotationFormat"`
	// The ID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetDatasetsFilter `pulumi:"filters"`
	// Unique Dataset OCID
	Id *string `pulumi:"id"`
	// A filter to return only resources whose lifecycleState matches this query param.
	State *string `pulumi:"state"`
}

// A collection of values returned by getDatasets.
type GetDatasetsResult struct {
	// The annotation format name required for labeling records.
	AnnotationFormat *string `pulumi:"annotationFormat"`
	// The OCID of the compartment of the resource.
	CompartmentId string `pulumi:"compartmentId"`
	// The list of dataset_collection.
	DatasetCollections []GetDatasetsDatasetCollection `pulumi:"datasetCollections"`
	// A user-friendly display name for the resource.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetDatasetsFilter `pulumi:"filters"`
	// The OCID of the Dataset.
	Id *string `pulumi:"id"`
	// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
	State *string `pulumi:"state"`
}

func GetDatasetsOutput(ctx *pulumi.Context, args GetDatasetsOutputArgs, opts ...pulumi.InvokeOption) GetDatasetsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatasetsResultOutput, error) {
			args := v.(GetDatasetsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataLabellingService/getDatasets:getDatasets", args, GetDatasetsResultOutput{}, options).(GetDatasetsResultOutput), nil
		}).(GetDatasetsResultOutput)
}

// A collection of arguments for invoking getDatasets.
type GetDatasetsOutputArgs struct {
	// A filter to return only resources that match the entire annotation format given.
	AnnotationFormat pulumi.StringPtrInput `pulumi:"annotationFormat"`
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput       `pulumi:"displayName"`
	Filters     GetDatasetsFilterArrayInput `pulumi:"filters"`
	// Unique Dataset OCID
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return only resources whose lifecycleState matches this query param.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetDatasetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsArgs)(nil)).Elem()
}

// A collection of values returned by getDatasets.
type GetDatasetsResultOutput struct{ *pulumi.OutputState }

func (GetDatasetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsResult)(nil)).Elem()
}

func (o GetDatasetsResultOutput) ToGetDatasetsResultOutput() GetDatasetsResultOutput {
	return o
}

func (o GetDatasetsResultOutput) ToGetDatasetsResultOutputWithContext(ctx context.Context) GetDatasetsResultOutput {
	return o
}

// The annotation format name required for labeling records.
func (o GetDatasetsResultOutput) AnnotationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsResult) *string { return v.AnnotationFormat }).(pulumi.StringPtrOutput)
}

// The OCID of the compartment of the resource.
func (o GetDatasetsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The list of dataset_collection.
func (o GetDatasetsResultOutput) DatasetCollections() GetDatasetsDatasetCollectionArrayOutput {
	return o.ApplyT(func(v GetDatasetsResult) []GetDatasetsDatasetCollection { return v.DatasetCollections }).(GetDatasetsDatasetCollectionArrayOutput)
}

// A user-friendly display name for the resource.
func (o GetDatasetsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetDatasetsResultOutput) Filters() GetDatasetsFilterArrayOutput {
	return o.ApplyT(func(v GetDatasetsResult) []GetDatasetsFilter { return v.Filters }).(GetDatasetsFilterArrayOutput)
}

// The OCID of the Dataset.
func (o GetDatasetsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The state of a dataset. CREATING - The dataset is being created.  It will transition to ACTIVE when it is ready for labeling. ACTIVE   - The dataset is ready for labeling. UPDATING - The dataset is being updated.  It and its related resources may be unavailable for other updates until it returns to ACTIVE. NEEDS_ATTENTION - A dataset updation operation has failed due to validation or other errors and needs attention. DELETING - The dataset and its related resources are being deleted. DELETED  - The dataset has been deleted and is no longer available. FAILED   - The dataset has failed due to validation or other errors.
func (o GetDatasetsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatasetsResultOutput{})
}
