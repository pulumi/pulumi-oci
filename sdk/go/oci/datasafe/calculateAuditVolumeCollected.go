// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Calculate Audit Volume Collected resource in Oracle Cloud Infrastructure Data Safe service.
//
// Calculates the volume of audit events collected by data safe.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.NewCalculateAuditVolumeCollected(ctx, "test_calculate_audit_volume_collected", &DataSafe.CalculateAuditVolumeCollectedArgs{
//				AuditProfileId: pulumi.Any(testAuditProfile.Id),
//				TimeFromMonth:  pulumi.Any(calculateAuditVolumeCollectedTimeFromMonth),
//				TimeToMonth:    pulumi.Any(calculateAuditVolumeCollectedTimeToMonth),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CalculateAuditVolumeCollected can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/calculateAuditVolumeCollected:CalculateAuditVolumeCollected test_calculate_audit_volume_collected "id"
// ```
type CalculateAuditVolumeCollected struct {
	pulumi.CustomResourceState

	// The OCID of the audit.
	AuditProfileId pulumi.StringOutput `pulumi:"auditProfileId"`
	// List of collected audit volumes.
	CollectedAuditVolumes CalculateAuditVolumeCollectedCollectedAuditVolumeArrayOutput `pulumi:"collectedAuditVolumes"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
	TimeFromMonth pulumi.StringOutput `pulumi:"timeFromMonth"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeToMonth pulumi.StringOutput `pulumi:"timeToMonth"`
}

// NewCalculateAuditVolumeCollected registers a new resource with the given unique name, arguments, and options.
func NewCalculateAuditVolumeCollected(ctx *pulumi.Context,
	name string, args *CalculateAuditVolumeCollectedArgs, opts ...pulumi.ResourceOption) (*CalculateAuditVolumeCollected, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuditProfileId == nil {
		return nil, errors.New("invalid value for required argument 'AuditProfileId'")
	}
	if args.TimeFromMonth == nil {
		return nil, errors.New("invalid value for required argument 'TimeFromMonth'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CalculateAuditVolumeCollected
	err := ctx.RegisterResource("oci:DataSafe/calculateAuditVolumeCollected:CalculateAuditVolumeCollected", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCalculateAuditVolumeCollected gets an existing CalculateAuditVolumeCollected resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCalculateAuditVolumeCollected(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CalculateAuditVolumeCollectedState, opts ...pulumi.ResourceOption) (*CalculateAuditVolumeCollected, error) {
	var resource CalculateAuditVolumeCollected
	err := ctx.ReadResource("oci:DataSafe/calculateAuditVolumeCollected:CalculateAuditVolumeCollected", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CalculateAuditVolumeCollected resources.
type calculateAuditVolumeCollectedState struct {
	// The OCID of the audit.
	AuditProfileId *string `pulumi:"auditProfileId"`
	// List of collected audit volumes.
	CollectedAuditVolumes []CalculateAuditVolumeCollectedCollectedAuditVolume `pulumi:"collectedAuditVolumes"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
	TimeFromMonth *string `pulumi:"timeFromMonth"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeToMonth *string `pulumi:"timeToMonth"`
}

type CalculateAuditVolumeCollectedState struct {
	// The OCID of the audit.
	AuditProfileId pulumi.StringPtrInput
	// List of collected audit volumes.
	CollectedAuditVolumes CalculateAuditVolumeCollectedCollectedAuditVolumeArrayInput
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
	TimeFromMonth pulumi.StringPtrInput
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeToMonth pulumi.StringPtrInput
}

func (CalculateAuditVolumeCollectedState) ElementType() reflect.Type {
	return reflect.TypeOf((*calculateAuditVolumeCollectedState)(nil)).Elem()
}

type calculateAuditVolumeCollectedArgs struct {
	// The OCID of the audit.
	AuditProfileId string `pulumi:"auditProfileId"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
	TimeFromMonth string `pulumi:"timeFromMonth"`
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeToMonth *string `pulumi:"timeToMonth"`
}

// The set of arguments for constructing a CalculateAuditVolumeCollected resource.
type CalculateAuditVolumeCollectedArgs struct {
	// The OCID of the audit.
	AuditProfileId pulumi.StringInput
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
	TimeFromMonth pulumi.StringInput
	// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeToMonth pulumi.StringPtrInput
}

func (CalculateAuditVolumeCollectedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*calculateAuditVolumeCollectedArgs)(nil)).Elem()
}

type CalculateAuditVolumeCollectedInput interface {
	pulumi.Input

	ToCalculateAuditVolumeCollectedOutput() CalculateAuditVolumeCollectedOutput
	ToCalculateAuditVolumeCollectedOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedOutput
}

func (*CalculateAuditVolumeCollected) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculateAuditVolumeCollected)(nil)).Elem()
}

func (i *CalculateAuditVolumeCollected) ToCalculateAuditVolumeCollectedOutput() CalculateAuditVolumeCollectedOutput {
	return i.ToCalculateAuditVolumeCollectedOutputWithContext(context.Background())
}

func (i *CalculateAuditVolumeCollected) ToCalculateAuditVolumeCollectedOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculateAuditVolumeCollectedOutput)
}

// CalculateAuditVolumeCollectedArrayInput is an input type that accepts CalculateAuditVolumeCollectedArray and CalculateAuditVolumeCollectedArrayOutput values.
// You can construct a concrete instance of `CalculateAuditVolumeCollectedArrayInput` via:
//
//	CalculateAuditVolumeCollectedArray{ CalculateAuditVolumeCollectedArgs{...} }
type CalculateAuditVolumeCollectedArrayInput interface {
	pulumi.Input

	ToCalculateAuditVolumeCollectedArrayOutput() CalculateAuditVolumeCollectedArrayOutput
	ToCalculateAuditVolumeCollectedArrayOutputWithContext(context.Context) CalculateAuditVolumeCollectedArrayOutput
}

type CalculateAuditVolumeCollectedArray []CalculateAuditVolumeCollectedInput

func (CalculateAuditVolumeCollectedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculateAuditVolumeCollected)(nil)).Elem()
}

func (i CalculateAuditVolumeCollectedArray) ToCalculateAuditVolumeCollectedArrayOutput() CalculateAuditVolumeCollectedArrayOutput {
	return i.ToCalculateAuditVolumeCollectedArrayOutputWithContext(context.Background())
}

func (i CalculateAuditVolumeCollectedArray) ToCalculateAuditVolumeCollectedArrayOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculateAuditVolumeCollectedArrayOutput)
}

// CalculateAuditVolumeCollectedMapInput is an input type that accepts CalculateAuditVolumeCollectedMap and CalculateAuditVolumeCollectedMapOutput values.
// You can construct a concrete instance of `CalculateAuditVolumeCollectedMapInput` via:
//
//	CalculateAuditVolumeCollectedMap{ "key": CalculateAuditVolumeCollectedArgs{...} }
type CalculateAuditVolumeCollectedMapInput interface {
	pulumi.Input

	ToCalculateAuditVolumeCollectedMapOutput() CalculateAuditVolumeCollectedMapOutput
	ToCalculateAuditVolumeCollectedMapOutputWithContext(context.Context) CalculateAuditVolumeCollectedMapOutput
}

type CalculateAuditVolumeCollectedMap map[string]CalculateAuditVolumeCollectedInput

func (CalculateAuditVolumeCollectedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculateAuditVolumeCollected)(nil)).Elem()
}

func (i CalculateAuditVolumeCollectedMap) ToCalculateAuditVolumeCollectedMapOutput() CalculateAuditVolumeCollectedMapOutput {
	return i.ToCalculateAuditVolumeCollectedMapOutputWithContext(context.Background())
}

func (i CalculateAuditVolumeCollectedMap) ToCalculateAuditVolumeCollectedMapOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculateAuditVolumeCollectedMapOutput)
}

type CalculateAuditVolumeCollectedOutput struct{ *pulumi.OutputState }

func (CalculateAuditVolumeCollectedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculateAuditVolumeCollected)(nil)).Elem()
}

func (o CalculateAuditVolumeCollectedOutput) ToCalculateAuditVolumeCollectedOutput() CalculateAuditVolumeCollectedOutput {
	return o
}

func (o CalculateAuditVolumeCollectedOutput) ToCalculateAuditVolumeCollectedOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedOutput {
	return o
}

// The OCID of the audit.
func (o CalculateAuditVolumeCollectedOutput) AuditProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculateAuditVolumeCollected) pulumi.StringOutput { return v.AuditProfileId }).(pulumi.StringOutput)
}

// List of collected audit volumes.
func (o CalculateAuditVolumeCollectedOutput) CollectedAuditVolumes() CalculateAuditVolumeCollectedCollectedAuditVolumeArrayOutput {
	return o.ApplyT(func(v *CalculateAuditVolumeCollected) CalculateAuditVolumeCollectedCollectedAuditVolumeArrayOutput {
		return v.CollectedAuditVolumes
	}).(CalculateAuditVolumeCollectedCollectedAuditVolumeArrayOutput)
}

// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339.
func (o CalculateAuditVolumeCollectedOutput) TimeFromMonth() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculateAuditVolumeCollected) pulumi.StringOutput { return v.TimeFromMonth }).(pulumi.StringOutput)
}

// The date from which the audit volume collected by data safe has to be calculated, in the format defined by RFC3339. If not specified, this will default to the current date.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o CalculateAuditVolumeCollectedOutput) TimeToMonth() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculateAuditVolumeCollected) pulumi.StringOutput { return v.TimeToMonth }).(pulumi.StringOutput)
}

type CalculateAuditVolumeCollectedArrayOutput struct{ *pulumi.OutputState }

func (CalculateAuditVolumeCollectedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculateAuditVolumeCollected)(nil)).Elem()
}

func (o CalculateAuditVolumeCollectedArrayOutput) ToCalculateAuditVolumeCollectedArrayOutput() CalculateAuditVolumeCollectedArrayOutput {
	return o
}

func (o CalculateAuditVolumeCollectedArrayOutput) ToCalculateAuditVolumeCollectedArrayOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedArrayOutput {
	return o
}

func (o CalculateAuditVolumeCollectedArrayOutput) Index(i pulumi.IntInput) CalculateAuditVolumeCollectedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CalculateAuditVolumeCollected {
		return vs[0].([]*CalculateAuditVolumeCollected)[vs[1].(int)]
	}).(CalculateAuditVolumeCollectedOutput)
}

type CalculateAuditVolumeCollectedMapOutput struct{ *pulumi.OutputState }

func (CalculateAuditVolumeCollectedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculateAuditVolumeCollected)(nil)).Elem()
}

func (o CalculateAuditVolumeCollectedMapOutput) ToCalculateAuditVolumeCollectedMapOutput() CalculateAuditVolumeCollectedMapOutput {
	return o
}

func (o CalculateAuditVolumeCollectedMapOutput) ToCalculateAuditVolumeCollectedMapOutputWithContext(ctx context.Context) CalculateAuditVolumeCollectedMapOutput {
	return o
}

func (o CalculateAuditVolumeCollectedMapOutput) MapIndex(k pulumi.StringInput) CalculateAuditVolumeCollectedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CalculateAuditVolumeCollected {
		return vs[0].(map[string]*CalculateAuditVolumeCollected)[vs[1].(string)]
	}).(CalculateAuditVolumeCollectedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalculateAuditVolumeCollectedInput)(nil)).Elem(), &CalculateAuditVolumeCollected{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculateAuditVolumeCollectedArrayInput)(nil)).Elem(), CalculateAuditVolumeCollectedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculateAuditVolumeCollectedMapInput)(nil)).Elem(), CalculateAuditVolumeCollectedMap{})
	pulumi.RegisterOutputType(CalculateAuditVolumeCollectedOutput{})
	pulumi.RegisterOutputType(CalculateAuditVolumeCollectedArrayOutput{})
	pulumi.RegisterOutputType(CalculateAuditVolumeCollectedMapOutput{})
}
