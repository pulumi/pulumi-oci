// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Compare Security Assessment resource in Oracle Cloud Infrastructure Data Safe service.
//
// Compares two security assessments. For this comparison, a security assessment can be a saved assessment, a latest assessment, or a baseline assessment.
// For example, you can compare saved assessment or a latest assessment against a baseline.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.NewCompareSecurityAssessment(ctx, "test_compare_security_assessment", &DataSafe.CompareSecurityAssessmentArgs{
//				ComparisonSecurityAssessmentId: pulumi.Any(testSecurityAssessment.Id),
//				SecurityAssessmentId:           pulumi.Any(testSecurityAssessment.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CompareSecurityAssessment can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/compareSecurityAssessment:CompareSecurityAssessment test_compare_security_assessment "id"
// ```
type CompareSecurityAssessment struct {
	pulumi.CustomResourceState

	// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
	ComparisonSecurityAssessmentId pulumi.StringOutput `pulumi:"comparisonSecurityAssessmentId"`
	// The OCID of the security assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SecurityAssessmentId pulumi.StringOutput `pulumi:"securityAssessmentId"`
}

// NewCompareSecurityAssessment registers a new resource with the given unique name, arguments, and options.
func NewCompareSecurityAssessment(ctx *pulumi.Context,
	name string, args *CompareSecurityAssessmentArgs, opts ...pulumi.ResourceOption) (*CompareSecurityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonSecurityAssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonSecurityAssessmentId'")
	}
	if args.SecurityAssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityAssessmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CompareSecurityAssessment
	err := ctx.RegisterResource("oci:DataSafe/compareSecurityAssessment:CompareSecurityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompareSecurityAssessment gets an existing CompareSecurityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompareSecurityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompareSecurityAssessmentState, opts ...pulumi.ResourceOption) (*CompareSecurityAssessment, error) {
	var resource CompareSecurityAssessment
	err := ctx.ReadResource("oci:DataSafe/compareSecurityAssessment:CompareSecurityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompareSecurityAssessment resources.
type compareSecurityAssessmentState struct {
	// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
	ComparisonSecurityAssessmentId *string `pulumi:"comparisonSecurityAssessmentId"`
	// The OCID of the security assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SecurityAssessmentId *string `pulumi:"securityAssessmentId"`
}

type CompareSecurityAssessmentState struct {
	// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
	ComparisonSecurityAssessmentId pulumi.StringPtrInput
	// The OCID of the security assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SecurityAssessmentId pulumi.StringPtrInput
}

func (CompareSecurityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*compareSecurityAssessmentState)(nil)).Elem()
}

type compareSecurityAssessmentArgs struct {
	// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
	ComparisonSecurityAssessmentId string `pulumi:"comparisonSecurityAssessmentId"`
	// The OCID of the security assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SecurityAssessmentId string `pulumi:"securityAssessmentId"`
}

// The set of arguments for constructing a CompareSecurityAssessment resource.
type CompareSecurityAssessmentArgs struct {
	// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
	ComparisonSecurityAssessmentId pulumi.StringInput
	// The OCID of the security assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SecurityAssessmentId pulumi.StringInput
}

func (CompareSecurityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compareSecurityAssessmentArgs)(nil)).Elem()
}

type CompareSecurityAssessmentInput interface {
	pulumi.Input

	ToCompareSecurityAssessmentOutput() CompareSecurityAssessmentOutput
	ToCompareSecurityAssessmentOutputWithContext(ctx context.Context) CompareSecurityAssessmentOutput
}

func (*CompareSecurityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareSecurityAssessment)(nil)).Elem()
}

func (i *CompareSecurityAssessment) ToCompareSecurityAssessmentOutput() CompareSecurityAssessmentOutput {
	return i.ToCompareSecurityAssessmentOutputWithContext(context.Background())
}

func (i *CompareSecurityAssessment) ToCompareSecurityAssessmentOutputWithContext(ctx context.Context) CompareSecurityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareSecurityAssessmentOutput)
}

// CompareSecurityAssessmentArrayInput is an input type that accepts CompareSecurityAssessmentArray and CompareSecurityAssessmentArrayOutput values.
// You can construct a concrete instance of `CompareSecurityAssessmentArrayInput` via:
//
//	CompareSecurityAssessmentArray{ CompareSecurityAssessmentArgs{...} }
type CompareSecurityAssessmentArrayInput interface {
	pulumi.Input

	ToCompareSecurityAssessmentArrayOutput() CompareSecurityAssessmentArrayOutput
	ToCompareSecurityAssessmentArrayOutputWithContext(context.Context) CompareSecurityAssessmentArrayOutput
}

type CompareSecurityAssessmentArray []CompareSecurityAssessmentInput

func (CompareSecurityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareSecurityAssessment)(nil)).Elem()
}

func (i CompareSecurityAssessmentArray) ToCompareSecurityAssessmentArrayOutput() CompareSecurityAssessmentArrayOutput {
	return i.ToCompareSecurityAssessmentArrayOutputWithContext(context.Background())
}

func (i CompareSecurityAssessmentArray) ToCompareSecurityAssessmentArrayOutputWithContext(ctx context.Context) CompareSecurityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareSecurityAssessmentArrayOutput)
}

// CompareSecurityAssessmentMapInput is an input type that accepts CompareSecurityAssessmentMap and CompareSecurityAssessmentMapOutput values.
// You can construct a concrete instance of `CompareSecurityAssessmentMapInput` via:
//
//	CompareSecurityAssessmentMap{ "key": CompareSecurityAssessmentArgs{...} }
type CompareSecurityAssessmentMapInput interface {
	pulumi.Input

	ToCompareSecurityAssessmentMapOutput() CompareSecurityAssessmentMapOutput
	ToCompareSecurityAssessmentMapOutputWithContext(context.Context) CompareSecurityAssessmentMapOutput
}

type CompareSecurityAssessmentMap map[string]CompareSecurityAssessmentInput

func (CompareSecurityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareSecurityAssessment)(nil)).Elem()
}

func (i CompareSecurityAssessmentMap) ToCompareSecurityAssessmentMapOutput() CompareSecurityAssessmentMapOutput {
	return i.ToCompareSecurityAssessmentMapOutputWithContext(context.Background())
}

func (i CompareSecurityAssessmentMap) ToCompareSecurityAssessmentMapOutputWithContext(ctx context.Context) CompareSecurityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareSecurityAssessmentMapOutput)
}

type CompareSecurityAssessmentOutput struct{ *pulumi.OutputState }

func (CompareSecurityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareSecurityAssessment)(nil)).Elem()
}

func (o CompareSecurityAssessmentOutput) ToCompareSecurityAssessmentOutput() CompareSecurityAssessmentOutput {
	return o
}

func (o CompareSecurityAssessmentOutput) ToCompareSecurityAssessmentOutputWithContext(ctx context.Context) CompareSecurityAssessmentOutput {
	return o
}

// The OCID of the security assessment. In this case a security assessment can be another security assessment, a latest assessment or a baseline.
func (o CompareSecurityAssessmentOutput) ComparisonSecurityAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareSecurityAssessment) pulumi.StringOutput { return v.ComparisonSecurityAssessmentId }).(pulumi.StringOutput)
}

// The OCID of the security assessment.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o CompareSecurityAssessmentOutput) SecurityAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareSecurityAssessment) pulumi.StringOutput { return v.SecurityAssessmentId }).(pulumi.StringOutput)
}

type CompareSecurityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (CompareSecurityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareSecurityAssessment)(nil)).Elem()
}

func (o CompareSecurityAssessmentArrayOutput) ToCompareSecurityAssessmentArrayOutput() CompareSecurityAssessmentArrayOutput {
	return o
}

func (o CompareSecurityAssessmentArrayOutput) ToCompareSecurityAssessmentArrayOutputWithContext(ctx context.Context) CompareSecurityAssessmentArrayOutput {
	return o
}

func (o CompareSecurityAssessmentArrayOutput) Index(i pulumi.IntInput) CompareSecurityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CompareSecurityAssessment {
		return vs[0].([]*CompareSecurityAssessment)[vs[1].(int)]
	}).(CompareSecurityAssessmentOutput)
}

type CompareSecurityAssessmentMapOutput struct{ *pulumi.OutputState }

func (CompareSecurityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareSecurityAssessment)(nil)).Elem()
}

func (o CompareSecurityAssessmentMapOutput) ToCompareSecurityAssessmentMapOutput() CompareSecurityAssessmentMapOutput {
	return o
}

func (o CompareSecurityAssessmentMapOutput) ToCompareSecurityAssessmentMapOutputWithContext(ctx context.Context) CompareSecurityAssessmentMapOutput {
	return o
}

func (o CompareSecurityAssessmentMapOutput) MapIndex(k pulumi.StringInput) CompareSecurityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CompareSecurityAssessment {
		return vs[0].(map[string]*CompareSecurityAssessment)[vs[1].(string)]
	}).(CompareSecurityAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CompareSecurityAssessmentInput)(nil)).Elem(), &CompareSecurityAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareSecurityAssessmentArrayInput)(nil)).Elem(), CompareSecurityAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareSecurityAssessmentMapInput)(nil)).Elem(), CompareSecurityAssessmentMap{})
	pulumi.RegisterOutputType(CompareSecurityAssessmentOutput{})
	pulumi.RegisterOutputType(CompareSecurityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(CompareSecurityAssessmentMapOutput{})
}
