// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Compare User Assessment resource in Oracle Cloud Infrastructure Data Safe service.
//
// Compares two user assessments. For this comparison, a user assessment can be a saved, a latest assessment, or a baseline.
// As an example, it can be used to compare a user assessment saved or a latest assessment with a baseline.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.NewCompareUserAssessment(ctx, "test_compare_user_assessment", &datasafe.CompareUserAssessmentArgs{
//				ComparisonUserAssessmentId: pulumi.Any(testUserAssessment.Id),
//				UserAssessmentId:           pulumi.Any(testUserAssessment.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CompareUserAssessment can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/compareUserAssessment:CompareUserAssessment test_compare_user_assessment "id"
// ```
type CompareUserAssessment struct {
	pulumi.CustomResourceState

	// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
	ComparisonUserAssessmentId pulumi.StringOutput `pulumi:"comparisonUserAssessmentId"`
	// The OCID of the user assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserAssessmentId pulumi.StringOutput `pulumi:"userAssessmentId"`
}

// NewCompareUserAssessment registers a new resource with the given unique name, arguments, and options.
func NewCompareUserAssessment(ctx *pulumi.Context,
	name string, args *CompareUserAssessmentArgs, opts ...pulumi.ResourceOption) (*CompareUserAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ComparisonUserAssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonUserAssessmentId'")
	}
	if args.UserAssessmentId == nil {
		return nil, errors.New("invalid value for required argument 'UserAssessmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CompareUserAssessment
	err := ctx.RegisterResource("oci:DataSafe/compareUserAssessment:CompareUserAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompareUserAssessment gets an existing CompareUserAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompareUserAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompareUserAssessmentState, opts ...pulumi.ResourceOption) (*CompareUserAssessment, error) {
	var resource CompareUserAssessment
	err := ctx.ReadResource("oci:DataSafe/compareUserAssessment:CompareUserAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompareUserAssessment resources.
type compareUserAssessmentState struct {
	// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
	ComparisonUserAssessmentId *string `pulumi:"comparisonUserAssessmentId"`
	// The OCID of the user assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserAssessmentId *string `pulumi:"userAssessmentId"`
}

type CompareUserAssessmentState struct {
	// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
	ComparisonUserAssessmentId pulumi.StringPtrInput
	// The OCID of the user assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserAssessmentId pulumi.StringPtrInput
}

func (CompareUserAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*compareUserAssessmentState)(nil)).Elem()
}

type compareUserAssessmentArgs struct {
	// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
	ComparisonUserAssessmentId string `pulumi:"comparisonUserAssessmentId"`
	// The OCID of the user assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserAssessmentId string `pulumi:"userAssessmentId"`
}

// The set of arguments for constructing a CompareUserAssessment resource.
type CompareUserAssessmentArgs struct {
	// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
	ComparisonUserAssessmentId pulumi.StringInput
	// The OCID of the user assessment.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserAssessmentId pulumi.StringInput
}

func (CompareUserAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compareUserAssessmentArgs)(nil)).Elem()
}

type CompareUserAssessmentInput interface {
	pulumi.Input

	ToCompareUserAssessmentOutput() CompareUserAssessmentOutput
	ToCompareUserAssessmentOutputWithContext(ctx context.Context) CompareUserAssessmentOutput
}

func (*CompareUserAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareUserAssessment)(nil)).Elem()
}

func (i *CompareUserAssessment) ToCompareUserAssessmentOutput() CompareUserAssessmentOutput {
	return i.ToCompareUserAssessmentOutputWithContext(context.Background())
}

func (i *CompareUserAssessment) ToCompareUserAssessmentOutputWithContext(ctx context.Context) CompareUserAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareUserAssessmentOutput)
}

// CompareUserAssessmentArrayInput is an input type that accepts CompareUserAssessmentArray and CompareUserAssessmentArrayOutput values.
// You can construct a concrete instance of `CompareUserAssessmentArrayInput` via:
//
//	CompareUserAssessmentArray{ CompareUserAssessmentArgs{...} }
type CompareUserAssessmentArrayInput interface {
	pulumi.Input

	ToCompareUserAssessmentArrayOutput() CompareUserAssessmentArrayOutput
	ToCompareUserAssessmentArrayOutputWithContext(context.Context) CompareUserAssessmentArrayOutput
}

type CompareUserAssessmentArray []CompareUserAssessmentInput

func (CompareUserAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareUserAssessment)(nil)).Elem()
}

func (i CompareUserAssessmentArray) ToCompareUserAssessmentArrayOutput() CompareUserAssessmentArrayOutput {
	return i.ToCompareUserAssessmentArrayOutputWithContext(context.Background())
}

func (i CompareUserAssessmentArray) ToCompareUserAssessmentArrayOutputWithContext(ctx context.Context) CompareUserAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareUserAssessmentArrayOutput)
}

// CompareUserAssessmentMapInput is an input type that accepts CompareUserAssessmentMap and CompareUserAssessmentMapOutput values.
// You can construct a concrete instance of `CompareUserAssessmentMapInput` via:
//
//	CompareUserAssessmentMap{ "key": CompareUserAssessmentArgs{...} }
type CompareUserAssessmentMapInput interface {
	pulumi.Input

	ToCompareUserAssessmentMapOutput() CompareUserAssessmentMapOutput
	ToCompareUserAssessmentMapOutputWithContext(context.Context) CompareUserAssessmentMapOutput
}

type CompareUserAssessmentMap map[string]CompareUserAssessmentInput

func (CompareUserAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareUserAssessment)(nil)).Elem()
}

func (i CompareUserAssessmentMap) ToCompareUserAssessmentMapOutput() CompareUserAssessmentMapOutput {
	return i.ToCompareUserAssessmentMapOutputWithContext(context.Background())
}

func (i CompareUserAssessmentMap) ToCompareUserAssessmentMapOutputWithContext(ctx context.Context) CompareUserAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareUserAssessmentMapOutput)
}

type CompareUserAssessmentOutput struct{ *pulumi.OutputState }

func (CompareUserAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareUserAssessment)(nil)).Elem()
}

func (o CompareUserAssessmentOutput) ToCompareUserAssessmentOutput() CompareUserAssessmentOutput {
	return o
}

func (o CompareUserAssessmentOutput) ToCompareUserAssessmentOutputWithContext(ctx context.Context) CompareUserAssessmentOutput {
	return o
}

// The OCID of the user assessment to be compared. You can compare with another user assessment, a latest assessment, or a baseline.
func (o CompareUserAssessmentOutput) ComparisonUserAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareUserAssessment) pulumi.StringOutput { return v.ComparisonUserAssessmentId }).(pulumi.StringOutput)
}

// The OCID of the user assessment.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o CompareUserAssessmentOutput) UserAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareUserAssessment) pulumi.StringOutput { return v.UserAssessmentId }).(pulumi.StringOutput)
}

type CompareUserAssessmentArrayOutput struct{ *pulumi.OutputState }

func (CompareUserAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareUserAssessment)(nil)).Elem()
}

func (o CompareUserAssessmentArrayOutput) ToCompareUserAssessmentArrayOutput() CompareUserAssessmentArrayOutput {
	return o
}

func (o CompareUserAssessmentArrayOutput) ToCompareUserAssessmentArrayOutputWithContext(ctx context.Context) CompareUserAssessmentArrayOutput {
	return o
}

func (o CompareUserAssessmentArrayOutput) Index(i pulumi.IntInput) CompareUserAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CompareUserAssessment {
		return vs[0].([]*CompareUserAssessment)[vs[1].(int)]
	}).(CompareUserAssessmentOutput)
}

type CompareUserAssessmentMapOutput struct{ *pulumi.OutputState }

func (CompareUserAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareUserAssessment)(nil)).Elem()
}

func (o CompareUserAssessmentMapOutput) ToCompareUserAssessmentMapOutput() CompareUserAssessmentMapOutput {
	return o
}

func (o CompareUserAssessmentMapOutput) ToCompareUserAssessmentMapOutputWithContext(ctx context.Context) CompareUserAssessmentMapOutput {
	return o
}

func (o CompareUserAssessmentMapOutput) MapIndex(k pulumi.StringInput) CompareUserAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CompareUserAssessment {
		return vs[0].(map[string]*CompareUserAssessment)[vs[1].(string)]
	}).(CompareUserAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CompareUserAssessmentInput)(nil)).Elem(), &CompareUserAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareUserAssessmentArrayInput)(nil)).Elem(), CompareUserAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareUserAssessmentMapInput)(nil)).Elem(), CompareUserAssessmentMap{})
	pulumi.RegisterOutputType(CompareUserAssessmentOutput{})
	pulumi.RegisterOutputType(CompareUserAssessmentArrayOutput{})
	pulumi.RegisterOutputType(CompareUserAssessmentMapOutput{})
}
