// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Alerts in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of all alerts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetAlerts(ctx, &datasafe.GetAlertsArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(alertAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(alertCompartmentIdInSubtree),
//				Fields:                 alertField,
//				Id:                     pulumi.StringRef(alertId),
//				ScimQuery:              pulumi.StringRef(alertScimQuery),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlerts(ctx *pulumi.Context, args *GetAlertsArgs, opts ...pulumi.InvokeOption) (*GetAlertsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAlertsResult
	err := ctx.Invoke("oci:DataSafe/getAlerts:getAlerts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlerts.
type GetAlertsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// Specifies a subset of fields to be returned in the response.
	Fields  []string          `pulumi:"fields"`
	Filters []GetAlertsFilter `pulumi:"filters"`
	// A filter to return alert by it's OCID.
	Id *string `pulumi:"id"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** | query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') query=(featureDetails.userName eq "user") and (targetNames eq "target1") Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated featureDetails.* (* can be any field in nestedStrMap in Feature Attributes in Alert Summary. For example -  userName,object,clientHostname,osUserName,clientIPs,clientId,commandText,commandParam,clientProgram,objectType,targetOwner)
	ScimQuery *string `pulumi:"scimQuery"`
}

// A collection of values returned by getAlerts.
type GetAlertsResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The list of alert_collection.
	AlertCollections []GetAlertsAlertCollection `pulumi:"alertCollections"`
	// The OCID of the compartment that contains the alert.
	CompartmentId          string            `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool             `pulumi:"compartmentIdInSubtree"`
	Fields                 []string          `pulumi:"fields"`
	Filters                []GetAlertsFilter `pulumi:"filters"`
	// The OCID of the alert.
	Id        *string `pulumi:"id"`
	ScimQuery *string `pulumi:"scimQuery"`
}

func GetAlertsOutput(ctx *pulumi.Context, args GetAlertsOutputArgs, opts ...pulumi.InvokeOption) GetAlertsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAlertsResultOutput, error) {
			args := v.(GetAlertsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getAlerts:getAlerts", args, GetAlertsResultOutput{}, options).(GetAlertsResultOutput), nil
		}).(GetAlertsResultOutput)
}

// A collection of arguments for invoking getAlerts.
type GetAlertsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// Specifies a subset of fields to be returned in the response.
	Fields  pulumi.StringArrayInput   `pulumi:"fields"`
	Filters GetAlertsFilterArrayInput `pulumi:"filters"`
	// A filter to return alert by it's OCID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** | query=(timeCreated ge '2021-06-04T01-00-26') and (targetNames eq 'target_1') query=(featureDetails.userName eq "user") and (targetNames eq "target1") Supported fields: severity status alertType targetIds targetNames operationTime lifecycleState displayName timeCreated timeUpdated featureDetails.* (* can be any field in nestedStrMap in Feature Attributes in Alert Summary. For example -  userName,object,clientHostname,osUserName,clientIPs,clientId,commandText,commandParam,clientProgram,objectType,targetOwner)
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
}

func (GetAlertsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertsArgs)(nil)).Elem()
}

// A collection of values returned by getAlerts.
type GetAlertsResultOutput struct{ *pulumi.OutputState }

func (GetAlertsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlertsResult)(nil)).Elem()
}

func (o GetAlertsResultOutput) ToGetAlertsResultOutput() GetAlertsResultOutput {
	return o
}

func (o GetAlertsResultOutput) ToGetAlertsResultOutputWithContext(ctx context.Context) GetAlertsResultOutput {
	return o
}

func (o GetAlertsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The list of alert_collection.
func (o GetAlertsResultOutput) AlertCollections() GetAlertsAlertCollectionArrayOutput {
	return o.ApplyT(func(v GetAlertsResult) []GetAlertsAlertCollection { return v.AlertCollections }).(GetAlertsAlertCollectionArrayOutput)
}

// The OCID of the compartment that contains the alert.
func (o GetAlertsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlertsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetAlertsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAlertsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetAlertsResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlertsResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o GetAlertsResultOutput) Filters() GetAlertsFilterArrayOutput {
	return o.ApplyT(func(v GetAlertsResult) []GetAlertsFilter { return v.Filters }).(GetAlertsFilterArrayOutput)
}

// The OCID of the alert.
func (o GetAlertsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetAlertsResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlertsResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlertsResultOutput{})
}
