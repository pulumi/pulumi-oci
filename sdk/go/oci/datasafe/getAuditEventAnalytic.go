// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides details about a specific Audit Event Analytic resource in Oracle Cloud Infrastructure Data Safe service.
//
// By default ListAuditEventAnalytics operation will return all of the summary columns. To filter desired summary columns, specify
// it in the `summaryOf` query parameter.
//
// **Example:** /ListAuditEventAnalytics?summaryField=targetName&summaryField=userName&summaryField=clientHostName&summaryField
//
//	&summaryField=dmls&summaryField=privilege_changes&summaryField=ddls&summaryField=login_failure&summaryField=login_success
//	&summaryField=eventcount&q=(operationTime ge '2021-06-13T23:49:14')&groupBy=targetName
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetAuditEventAnalytic(ctx, &datasafe.GetAuditEventAnalyticArgs{
//				CompartmentId:          _var.Compartment_id,
//				AccessLevel:            pulumi.StringRef(_var.Audit_event_analytic_access_level),
//				CompartmentIdInSubtree: pulumi.BoolRef(_var.Audit_event_analytic_compartment_id_in_subtree),
//				GroupBies:              _var.Audit_event_analytic_group_by,
//				QueryTimeZone:          pulumi.StringRef(_var.Audit_event_analytic_query_time_zone),
//				ScimQuery:              pulumi.StringRef(_var.Audit_event_analytic_scim_query),
//				SummaryFields:          _var.Audit_event_analytic_summary_field,
//				TimeEnded:              pulumi.StringRef(_var.Audit_event_analytic_time_ended),
//				TimeStarted:            pulumi.StringRef(_var.Audit_event_analytic_time_started),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAuditEventAnalytic(ctx *pulumi.Context, args *GetAuditEventAnalyticArgs, opts ...pulumi.InvokeOption) (*GetAuditEventAnalyticResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAuditEventAnalyticResult
	err := ctx.Invoke("oci:DataSafe/getAuditEventAnalytic:getAuditEventAnalytic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuditEventAnalytic.
type GetAuditEventAnalyticArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
	GroupBies []string `pulumi:"groupBies"`
	// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
	QueryTimeZone *string `pulumi:"queryTimeZone"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (eventName eq 'LOGON')
	ScimQuery *string `pulumi:"scimQuery"`
	// Specifies a subset of summarized fields to be returned in the response.
	SummaryFields []string `pulumi:"summaryFields"`
	// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded *string `pulumi:"timeEnded"`
	// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted *string `pulumi:"timeStarted"`
}

// A collection of values returned by getAuditEventAnalytic.
type GetAuditEventAnalyticResult struct {
	AccessLevel            *string  `pulumi:"accessLevel"`
	CompartmentId          string   `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool    `pulumi:"compartmentIdInSubtree"`
	GroupBies              []string `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The aggregated data point items.
	Items         []GetAuditEventAnalyticItem `pulumi:"items"`
	QueryTimeZone *string                     `pulumi:"queryTimeZone"`
	ScimQuery     *string                     `pulumi:"scimQuery"`
	SummaryFields []string                    `pulumi:"summaryFields"`
	// The time at which the aggregation ended.
	TimeEnded *string `pulumi:"timeEnded"`
	// The time at which the aggregation started.
	TimeStarted *string `pulumi:"timeStarted"`
}

func GetAuditEventAnalyticOutput(ctx *pulumi.Context, args GetAuditEventAnalyticOutputArgs, opts ...pulumi.InvokeOption) GetAuditEventAnalyticResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAuditEventAnalyticResult, error) {
			args := v.(GetAuditEventAnalyticArgs)
			r, err := GetAuditEventAnalytic(ctx, &args, opts...)
			var s GetAuditEventAnalyticResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAuditEventAnalyticResultOutput)
}

// A collection of arguments for invoking getAuditEventAnalytic.
type GetAuditEventAnalyticOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
	QueryTimeZone pulumi.StringPtrInput `pulumi:"queryTimeZone"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (eventName eq 'LOGON')
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
	// Specifies a subset of summarized fields to be returned in the response.
	SummaryFields pulumi.StringArrayInput `pulumi:"summaryFields"`
	// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded pulumi.StringPtrInput `pulumi:"timeEnded"`
	// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted pulumi.StringPtrInput `pulumi:"timeStarted"`
}

func (GetAuditEventAnalyticOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditEventAnalyticArgs)(nil)).Elem()
}

// A collection of values returned by getAuditEventAnalytic.
type GetAuditEventAnalyticResultOutput struct{ *pulumi.OutputState }

func (GetAuditEventAnalyticResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditEventAnalyticResult)(nil)).Elem()
}

func (o GetAuditEventAnalyticResultOutput) ToGetAuditEventAnalyticResultOutput() GetAuditEventAnalyticResultOutput {
	return o
}

func (o GetAuditEventAnalyticResultOutput) ToGetAuditEventAnalyticResultOutputWithContext(ctx context.Context) GetAuditEventAnalyticResultOutput {
	return o
}

func (o GetAuditEventAnalyticResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetAuditEventAnalyticResult] {
	return pulumix.Output[GetAuditEventAnalyticResult]{
		OutputState: o.OutputState,
	}
}

func (o GetAuditEventAnalyticResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetAuditEventAnalyticResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetAuditEventAnalyticResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetAuditEventAnalyticResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAuditEventAnalyticResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) string { return v.Id }).(pulumi.StringOutput)
}

// The aggregated data point items.
func (o GetAuditEventAnalyticResultOutput) Items() GetAuditEventAnalyticItemArrayOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) []GetAuditEventAnalyticItem { return v.Items }).(GetAuditEventAnalyticItemArrayOutput)
}

func (o GetAuditEventAnalyticResultOutput) QueryTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *string { return v.QueryTimeZone }).(pulumi.StringPtrOutput)
}

func (o GetAuditEventAnalyticResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

func (o GetAuditEventAnalyticResultOutput) SummaryFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) []string { return v.SummaryFields }).(pulumi.StringArrayOutput)
}

// The time at which the aggregation ended.
func (o GetAuditEventAnalyticResultOutput) TimeEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *string { return v.TimeEnded }).(pulumi.StringPtrOutput)
}

// The time at which the aggregation started.
func (o GetAuditEventAnalyticResultOutput) TimeStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditEventAnalyticResult) *string { return v.TimeStarted }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuditEventAnalyticResultOutput{})
}
