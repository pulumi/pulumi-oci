// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Audit Profile Analytic resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of audit profile aggregated details . A audit profile  aggregation helps understand the overall  state of audit profile profiles.
// As an example, it helps understand how many audit profiles have paid usage. It is especially useful to create dashboards or to support analytics.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform AuditProfileAnalytics on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetAuditProfileAnalytic(ctx, &datasafe.GetAuditProfileAnalyticArgs{
//				CompartmentId:          _var.Compartment_id,
//				AccessLevel:            pulumi.StringRef(_var.Audit_profile_analytic_access_level),
//				CompartmentIdInSubtree: pulumi.BoolRef(_var.Audit_profile_analytic_compartment_id_in_subtree),
//				GroupBies:              _var.Audit_profile_analytic_group_by,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAuditProfileAnalytic(ctx *pulumi.Context, args *GetAuditProfileAnalyticArgs, opts ...pulumi.InvokeOption) (*GetAuditProfileAnalyticResult, error) {
	var rv GetAuditProfileAnalyticResult
	err := ctx.Invoke("oci:DataSafe/getAuditProfileAnalytic:getAuditProfileAnalytic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuditProfileAnalytic.
type GetAuditProfileAnalyticArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// The group by parameter for summarize operation on audit.
	GroupBies []string `pulumi:"groupBies"`
}

// A collection of values returned by getAuditProfileAnalytic.
type GetAuditProfileAnalyticResult struct {
	AccessLevel            *string  `pulumi:"accessLevel"`
	CompartmentId          string   `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool    `pulumi:"compartmentIdInSubtree"`
	GroupBies              []string `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Array of audit profile aggregration data.
	Items []GetAuditProfileAnalyticItem `pulumi:"items"`
}

func GetAuditProfileAnalyticOutput(ctx *pulumi.Context, args GetAuditProfileAnalyticOutputArgs, opts ...pulumi.InvokeOption) GetAuditProfileAnalyticResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAuditProfileAnalyticResult, error) {
			args := v.(GetAuditProfileAnalyticArgs)
			r, err := GetAuditProfileAnalytic(ctx, &args, opts...)
			var s GetAuditProfileAnalyticResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAuditProfileAnalyticResultOutput)
}

// A collection of arguments for invoking getAuditProfileAnalytic.
type GetAuditProfileAnalyticOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// The group by parameter for summarize operation on audit.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
}

func (GetAuditProfileAnalyticOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditProfileAnalyticArgs)(nil)).Elem()
}

// A collection of values returned by getAuditProfileAnalytic.
type GetAuditProfileAnalyticResultOutput struct{ *pulumi.OutputState }

func (GetAuditProfileAnalyticResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditProfileAnalyticResult)(nil)).Elem()
}

func (o GetAuditProfileAnalyticResultOutput) ToGetAuditProfileAnalyticResultOutput() GetAuditProfileAnalyticResultOutput {
	return o
}

func (o GetAuditProfileAnalyticResultOutput) ToGetAuditProfileAnalyticResultOutputWithContext(ctx context.Context) GetAuditProfileAnalyticResultOutput {
	return o
}

func (o GetAuditProfileAnalyticResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetAuditProfileAnalyticResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetAuditProfileAnalyticResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetAuditProfileAnalyticResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAuditProfileAnalyticResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) string { return v.Id }).(pulumi.StringOutput)
}

// Array of audit profile aggregration data.
func (o GetAuditProfileAnalyticResultOutput) Items() GetAuditProfileAnalyticItemArrayOutput {
	return o.ApplyT(func(v GetAuditProfileAnalyticResult) []GetAuditProfileAnalyticItem { return v.Items }).(GetAuditProfileAnalyticItemArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuditProfileAnalyticResultOutput{})
}
