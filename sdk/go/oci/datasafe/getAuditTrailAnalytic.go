// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Audit Trail Analytic resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of audit trail aggregated details . A audit trail aggregation helps understand the overall  state of trails.
// As an example, it helps understand how many trails are running or stopped. It is especially useful to create dashboards or to support analytics.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform AuditTrailAnalytics on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetAuditTrailAnalytic(ctx, &datasafe.GetAuditTrailAnalyticArgs{
//				CompartmentId:          _var.Compartment_id,
//				AccessLevel:            pulumi.StringRef(_var.Audit_trail_analytic_access_level),
//				CompartmentIdInSubtree: pulumi.BoolRef(_var.Audit_trail_analytic_compartment_id_in_subtree),
//				GroupBies:              _var.Audit_trail_analytic_group_by,
//				TargetId:               pulumi.StringRef(oci_cloud_guard_target.Test_target.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAuditTrailAnalytic(ctx *pulumi.Context, args *GetAuditTrailAnalyticArgs, opts ...pulumi.InvokeOption) (*GetAuditTrailAnalyticResult, error) {
	var rv GetAuditTrailAnalyticResult
	err := ctx.Invoke("oci:DataSafe/getAuditTrailAnalytic:getAuditTrailAnalytic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuditTrailAnalytic.
type GetAuditTrailAnalyticArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// The group by parameter for summarize operation on audit trail.
	GroupBies []string `pulumi:"groupBies"`
	// A filter to return only items related to a specific target OCID.
	TargetId *string `pulumi:"targetId"`
}

// A collection of values returned by getAuditTrailAnalytic.
type GetAuditTrailAnalyticResult struct {
	AccessLevel            *string  `pulumi:"accessLevel"`
	CompartmentId          string   `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool    `pulumi:"compartmentIdInSubtree"`
	GroupBies              []string `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Array of audit trail aggregration data.
	Items []GetAuditTrailAnalyticItem `pulumi:"items"`
	// The OCID of the Data Safe target for which the audit trail is created.
	TargetId *string `pulumi:"targetId"`
}

func GetAuditTrailAnalyticOutput(ctx *pulumi.Context, args GetAuditTrailAnalyticOutputArgs, opts ...pulumi.InvokeOption) GetAuditTrailAnalyticResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAuditTrailAnalyticResult, error) {
			args := v.(GetAuditTrailAnalyticArgs)
			r, err := GetAuditTrailAnalytic(ctx, &args, opts...)
			var s GetAuditTrailAnalyticResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAuditTrailAnalyticResultOutput)
}

// A collection of arguments for invoking getAuditTrailAnalytic.
type GetAuditTrailAnalyticOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// The group by parameter for summarize operation on audit trail.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// A filter to return only items related to a specific target OCID.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
}

func (GetAuditTrailAnalyticOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditTrailAnalyticArgs)(nil)).Elem()
}

// A collection of values returned by getAuditTrailAnalytic.
type GetAuditTrailAnalyticResultOutput struct{ *pulumi.OutputState }

func (GetAuditTrailAnalyticResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditTrailAnalyticResult)(nil)).Elem()
}

func (o GetAuditTrailAnalyticResultOutput) ToGetAuditTrailAnalyticResultOutput() GetAuditTrailAnalyticResultOutput {
	return o
}

func (o GetAuditTrailAnalyticResultOutput) ToGetAuditTrailAnalyticResultOutputWithContext(ctx context.Context) GetAuditTrailAnalyticResultOutput {
	return o
}

func (o GetAuditTrailAnalyticResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetAuditTrailAnalyticResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetAuditTrailAnalyticResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetAuditTrailAnalyticResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAuditTrailAnalyticResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) string { return v.Id }).(pulumi.StringOutput)
}

// Array of audit trail aggregration data.
func (o GetAuditTrailAnalyticResultOutput) Items() GetAuditTrailAnalyticItemArrayOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) []GetAuditTrailAnalyticItem { return v.Items }).(GetAuditTrailAnalyticItemArrayOutput)
}

// The OCID of the Data Safe target for which the audit trail is created.
func (o GetAuditTrailAnalyticResultOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAuditTrailAnalyticResult) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAuditTrailAnalyticResultOutput{})
}
