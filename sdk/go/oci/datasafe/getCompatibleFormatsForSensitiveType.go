// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Compatible Formats For Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of library masking formats compatible with the existing sensitive types.
// For each sensitive type, it returns the assigned default masking format as well as
// the other library masking formats that have the sensitiveTypeIds attribute containing
// the OCID of the sensitive type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetCompatibleFormatsForSensitiveType(ctx, &datasafe.GetCompatibleFormatsForSensitiveTypeArgs{
//				CompartmentId:          _var.Compartment_id,
//				AccessLevel:            pulumi.StringRef(_var.Compatible_formats_for_sensitive_type_access_level),
//				CompartmentIdInSubtree: pulumi.BoolRef(_var.Compatible_formats_for_sensitive_type_compartment_id_in_subtree),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCompatibleFormatsForSensitiveType(ctx *pulumi.Context, args *GetCompatibleFormatsForSensitiveTypeArgs, opts ...pulumi.InvokeOption) (*GetCompatibleFormatsForSensitiveTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCompatibleFormatsForSensitiveTypeResult
	err := ctx.Invoke("oci:DataSafe/getCompatibleFormatsForSensitiveType:getCompatibleFormatsForSensitiveType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCompatibleFormatsForSensitiveType.
type GetCompatibleFormatsForSensitiveTypeArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
}

// A collection of values returned by getCompatibleFormatsForSensitiveType.
type GetCompatibleFormatsForSensitiveTypeResult struct {
	AccessLevel            *string `pulumi:"accessLevel"`
	CompartmentId          string  `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool   `pulumi:"compartmentIdInSubtree"`
	// An array of library masking formats compatible with the existing sensitive types.
	FormatsForSensitiveTypes []GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveType `pulumi:"formatsForSensitiveTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id *string `pulumi:"id"`
}

func GetCompatibleFormatsForSensitiveTypeOutput(ctx *pulumi.Context, args GetCompatibleFormatsForSensitiveTypeOutputArgs, opts ...pulumi.InvokeOption) GetCompatibleFormatsForSensitiveTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCompatibleFormatsForSensitiveTypeResult, error) {
			args := v.(GetCompatibleFormatsForSensitiveTypeArgs)
			r, err := GetCompatibleFormatsForSensitiveType(ctx, &args, opts...)
			var s GetCompatibleFormatsForSensitiveTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCompatibleFormatsForSensitiveTypeResultOutput)
}

// A collection of arguments for invoking getCompatibleFormatsForSensitiveType.
type GetCompatibleFormatsForSensitiveTypeOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
}

func (GetCompatibleFormatsForSensitiveTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCompatibleFormatsForSensitiveTypeArgs)(nil)).Elem()
}

// A collection of values returned by getCompatibleFormatsForSensitiveType.
type GetCompatibleFormatsForSensitiveTypeResultOutput struct{ *pulumi.OutputState }

func (GetCompatibleFormatsForSensitiveTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCompatibleFormatsForSensitiveTypeResult)(nil)).Elem()
}

func (o GetCompatibleFormatsForSensitiveTypeResultOutput) ToGetCompatibleFormatsForSensitiveTypeResultOutput() GetCompatibleFormatsForSensitiveTypeResultOutput {
	return o
}

func (o GetCompatibleFormatsForSensitiveTypeResultOutput) ToGetCompatibleFormatsForSensitiveTypeResultOutputWithContext(ctx context.Context) GetCompatibleFormatsForSensitiveTypeResultOutput {
	return o
}

func (o GetCompatibleFormatsForSensitiveTypeResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCompatibleFormatsForSensitiveTypeResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetCompatibleFormatsForSensitiveTypeResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCompatibleFormatsForSensitiveTypeResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetCompatibleFormatsForSensitiveTypeResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCompatibleFormatsForSensitiveTypeResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// An array of library masking formats compatible with the existing sensitive types.
func (o GetCompatibleFormatsForSensitiveTypeResultOutput) FormatsForSensitiveTypes() GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeArrayOutput {
	return o.ApplyT(func(v GetCompatibleFormatsForSensitiveTypeResult) []GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveType {
		return v.FormatsForSensitiveTypes
	}).(GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCompatibleFormatsForSensitiveTypeResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCompatibleFormatsForSensitiveTypeResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCompatibleFormatsForSensitiveTypeResultOutput{})
}
