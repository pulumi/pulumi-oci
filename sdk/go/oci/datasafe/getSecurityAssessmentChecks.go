// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Security Assessment Checks in Oracle Cloud Infrastructure Data Safe service.
//
// Lists all the security checks in the specified compartment for security assessment of type TEMPLATE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSecurityAssessmentChecks(ctx, &datasafe.GetSecurityAssessmentChecksArgs{
//				SecurityAssessmentId:   testSecurityAssessment.Id,
//				AccessLevel:            pulumi.StringRef(securityAssessmentCheckAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(securityAssessmentCheckCompartmentIdInSubtree),
//				ContainsReferences:     securityAssessmentCheckContainsReferences,
//				ContainsSeverities:     securityAssessmentCheckContainsSeverity,
//				Key:                    pulumi.StringRef(securityAssessmentCheckKey),
//				SuggestedSeverity:      pulumi.StringRef(securityAssessmentCheckSuggestedSeverity),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecurityAssessmentChecks(ctx *pulumi.Context, args *GetSecurityAssessmentChecksArgs, opts ...pulumi.InvokeOption) (*GetSecurityAssessmentChecksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityAssessmentChecksResult
	err := ctx.Invoke("oci:DataSafe/getSecurityAssessmentChecks:getSecurityAssessmentChecks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityAssessmentChecks.
type GetSecurityAssessmentChecksArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
	ContainsReferences []string `pulumi:"containsReferences"`
	// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
	ContainsSeverities []string                            `pulumi:"containsSeverities"`
	Filters            []GetSecurityAssessmentChecksFilter `pulumi:"filters"`
	// Each check in security assessment has an associated key (think of key as a check's name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
	Key *string `pulumi:"key"`
	// The OCID of the security assessment.
	SecurityAssessmentId string `pulumi:"securityAssessmentId"`
	// A filter to return only checks of a particular risk level.
	SuggestedSeverity *string `pulumi:"suggestedSeverity"`
}

// A collection of values returned by getSecurityAssessmentChecks.
type GetSecurityAssessmentChecksResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The list of checks.
	Checks                 []GetSecurityAssessmentChecksCheck  `pulumi:"checks"`
	CompartmentIdInSubtree *bool                               `pulumi:"compartmentIdInSubtree"`
	ContainsReferences     []string                            `pulumi:"containsReferences"`
	ContainsSeverities     []string                            `pulumi:"containsSeverities"`
	Filters                []GetSecurityAssessmentChecksFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A unique identifier for the check.
	Key                  *string `pulumi:"key"`
	SecurityAssessmentId string  `pulumi:"securityAssessmentId"`
	// The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
	SuggestedSeverity *string `pulumi:"suggestedSeverity"`
}

func GetSecurityAssessmentChecksOutput(ctx *pulumi.Context, args GetSecurityAssessmentChecksOutputArgs, opts ...pulumi.InvokeOption) GetSecurityAssessmentChecksResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecurityAssessmentChecksResultOutput, error) {
			args := v.(GetSecurityAssessmentChecksArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSecurityAssessmentChecks:getSecurityAssessmentChecks", args, GetSecurityAssessmentChecksResultOutput{}, options).(GetSecurityAssessmentChecksResultOutput), nil
		}).(GetSecurityAssessmentChecksResultOutput)
}

// A collection of arguments for invoking getSecurityAssessmentChecks.
type GetSecurityAssessmentChecksOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
	ContainsReferences pulumi.StringArrayInput `pulumi:"containsReferences"`
	// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
	ContainsSeverities pulumi.StringArrayInput                     `pulumi:"containsSeverities"`
	Filters            GetSecurityAssessmentChecksFilterArrayInput `pulumi:"filters"`
	// Each check in security assessment has an associated key (think of key as a check's name). For a given check, the key will be the same across targets. The user can use these keys to filter the checks.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The OCID of the security assessment.
	SecurityAssessmentId pulumi.StringInput `pulumi:"securityAssessmentId"`
	// A filter to return only checks of a particular risk level.
	SuggestedSeverity pulumi.StringPtrInput `pulumi:"suggestedSeverity"`
}

func (GetSecurityAssessmentChecksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAssessmentChecksArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityAssessmentChecks.
type GetSecurityAssessmentChecksResultOutput struct{ *pulumi.OutputState }

func (GetSecurityAssessmentChecksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAssessmentChecksResult)(nil)).Elem()
}

func (o GetSecurityAssessmentChecksResultOutput) ToGetSecurityAssessmentChecksResultOutput() GetSecurityAssessmentChecksResultOutput {
	return o
}

func (o GetSecurityAssessmentChecksResultOutput) ToGetSecurityAssessmentChecksResultOutputWithContext(ctx context.Context) GetSecurityAssessmentChecksResultOutput {
	return o
}

func (o GetSecurityAssessmentChecksResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The list of checks.
func (o GetSecurityAssessmentChecksResultOutput) Checks() GetSecurityAssessmentChecksCheckArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) []GetSecurityAssessmentChecksCheck { return v.Checks }).(GetSecurityAssessmentChecksCheckArrayOutput)
}

func (o GetSecurityAssessmentChecksResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityAssessmentChecksResultOutput) ContainsReferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) []string { return v.ContainsReferences }).(pulumi.StringArrayOutput)
}

func (o GetSecurityAssessmentChecksResultOutput) ContainsSeverities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) []string { return v.ContainsSeverities }).(pulumi.StringArrayOutput)
}

func (o GetSecurityAssessmentChecksResultOutput) Filters() GetSecurityAssessmentChecksFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) []GetSecurityAssessmentChecksFilter { return v.Filters }).(GetSecurityAssessmentChecksFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityAssessmentChecksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) string { return v.Id }).(pulumi.StringOutput)
}

// A unique identifier for the check.
func (o GetSecurityAssessmentChecksResultOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentChecksResultOutput) SecurityAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) string { return v.SecurityAssessmentId }).(pulumi.StringOutput)
}

// The severity of the check as suggested by Data Safe security assessment. This will be the default severity in the template baseline security assessment.
func (o GetSecurityAssessmentChecksResultOutput) SuggestedSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentChecksResult) *string { return v.SuggestedSeverity }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityAssessmentChecksResultOutput{})
}
