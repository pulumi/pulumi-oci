// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Security Assessment Findings in Oracle Cloud Infrastructure Data Safe service.
//
// Lists all the findings for the specified assessment except for type TEMPLATE. If the assessment is of type TEMPLATE_BASELINE, the findings returned are the security checks with the user-defined severity from the template.
func GetSecurityAssessmentFindings(ctx *pulumi.Context, args *GetSecurityAssessmentFindingsArgs, opts ...pulumi.InvokeOption) (*GetSecurityAssessmentFindingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityAssessmentFindingsResult
	err := ctx.Invoke("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityAssessmentFindings.
type GetSecurityAssessmentFindingsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// The category of the finding.
	Category *string `pulumi:"category"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId *string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
	ContainsReferences []string `pulumi:"containsReferences"`
	// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
	ContainsSeverities []string `pulumi:"containsSeverities"`
	// Specifies a subset of fields to be returned in the response.
	Fields  []string                              `pulumi:"fields"`
	Filters []GetSecurityAssessmentFindingsFilter `pulumi:"filters"`
	// Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
	FindingKey *string `pulumi:"findingKey"`
	// A filter to return only the findings that are marked as top findings.
	IsTopFinding *bool `pulumi:"isTopFinding"`
	// An optional filter to return only findings that match the specified reference.
	References *string `pulumi:"references"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
	//
	// Supported fields: severity findingKey reference targetId isTopFinding title category remarks details summary isRiskModified
	ScimQuery *string `pulumi:"scimQuery"`
	// The OCID of the security assessment.
	SecurityAssessmentId string `pulumi:"securityAssessmentId"`
	// A filter to return only findings of a particular risk level.
	Severity *string `pulumi:"severity"`
	// A filter to return only the findings that match the specified lifecycle states.
	State *string `pulumi:"state"`
	// A filter to return only items related to a specific target OCID.
	TargetId *string `pulumi:"targetId"`
	// An optional filter to return only findings that match the specified target ids. Use this parameter to filter by multiple target ids.
	TargetIds []string `pulumi:"targetIds"`
}

// A collection of values returned by getSecurityAssessmentFindings.
type GetSecurityAssessmentFindingsResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The category to which the finding belongs to.
	Category               *string                               `pulumi:"category"`
	CompartmentId          *string                               `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                                 `pulumi:"compartmentIdInSubtree"`
	ContainsReferences     []string                              `pulumi:"containsReferences"`
	ContainsSeverities     []string                              `pulumi:"containsSeverities"`
	Fields                 []string                              `pulumi:"fields"`
	Filters                []GetSecurityAssessmentFindingsFilter `pulumi:"filters"`
	FindingKey             *string                               `pulumi:"findingKey"`
	// The list of findings.
	Findings []GetSecurityAssessmentFindingsFinding `pulumi:"findings"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether a given finding is marked as topFinding or not.
	IsTopFinding *bool `pulumi:"isTopFinding"`
	// Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
	References           *string `pulumi:"references"`
	ScimQuery            *string `pulumi:"scimQuery"`
	SecurityAssessmentId string  `pulumi:"securityAssessmentId"`
	// The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
	Severity *string `pulumi:"severity"`
	// The current state of the finding.
	State *string `pulumi:"state"`
	// The OCID of the target database.
	TargetId  *string  `pulumi:"targetId"`
	TargetIds []string `pulumi:"targetIds"`
}

func GetSecurityAssessmentFindingsOutput(ctx *pulumi.Context, args GetSecurityAssessmentFindingsOutputArgs, opts ...pulumi.InvokeOption) GetSecurityAssessmentFindingsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecurityAssessmentFindingsResultOutput, error) {
			args := v.(GetSecurityAssessmentFindingsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSecurityAssessmentFindings:getSecurityAssessmentFindings", args, GetSecurityAssessmentFindingsResultOutput{}, options).(GetSecurityAssessmentFindingsResultOutput), nil
		}).(GetSecurityAssessmentFindingsResultOutput)
}

// A collection of arguments for invoking getSecurityAssessmentFindings.
type GetSecurityAssessmentFindingsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// The category of the finding.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// An optional filter to return only findings that match the specified references. Use containsReferences param if need to filter by multiple references.
	ContainsReferences pulumi.StringArrayInput `pulumi:"containsReferences"`
	// A filter to return only findings that match the specified risk level(s). Use containsSeverity parameter if need to filter by multiple risk levels.
	ContainsSeverities pulumi.StringArrayInput `pulumi:"containsSeverities"`
	// Specifies a subset of fields to be returned in the response.
	Fields  pulumi.StringArrayInput                       `pulumi:"fields"`
	Filters GetSecurityAssessmentFindingsFilterArrayInput `pulumi:"filters"`
	// Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
	FindingKey pulumi.StringPtrInput `pulumi:"findingKey"`
	// A filter to return only the findings that are marked as top findings.
	IsTopFinding pulumi.BoolPtrInput `pulumi:"isTopFinding"`
	// An optional filter to return only findings that match the specified reference.
	References pulumi.StringPtrInput `pulumi:"references"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** | scimQuery=(severity eq 'high') and (targetId eq 'target_1') scimQuery=(category eq "Users") and (targetId eq "target1") scimQuery=(reference eq 'CIS') and (targetId eq 'target_1')
	//
	// Supported fields: severity findingKey reference targetId isTopFinding title category remarks details summary isRiskModified
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
	// The OCID of the security assessment.
	SecurityAssessmentId pulumi.StringInput `pulumi:"securityAssessmentId"`
	// A filter to return only findings of a particular risk level.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// A filter to return only the findings that match the specified lifecycle states.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return only items related to a specific target OCID.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
	// An optional filter to return only findings that match the specified target ids. Use this parameter to filter by multiple target ids.
	TargetIds pulumi.StringArrayInput `pulumi:"targetIds"`
}

func (GetSecurityAssessmentFindingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAssessmentFindingsArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityAssessmentFindings.
type GetSecurityAssessmentFindingsResultOutput struct{ *pulumi.OutputState }

func (GetSecurityAssessmentFindingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityAssessmentFindingsResult)(nil)).Elem()
}

func (o GetSecurityAssessmentFindingsResultOutput) ToGetSecurityAssessmentFindingsResultOutput() GetSecurityAssessmentFindingsResultOutput {
	return o
}

func (o GetSecurityAssessmentFindingsResultOutput) ToGetSecurityAssessmentFindingsResultOutputWithContext(ctx context.Context) GetSecurityAssessmentFindingsResultOutput {
	return o
}

func (o GetSecurityAssessmentFindingsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The category to which the finding belongs to.
func (o GetSecurityAssessmentFindingsResultOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) ContainsReferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []string { return v.ContainsReferences }).(pulumi.StringArrayOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) ContainsSeverities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []string { return v.ContainsSeverities }).(pulumi.StringArrayOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) Filters() GetSecurityAssessmentFindingsFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []GetSecurityAssessmentFindingsFilter { return v.Filters }).(GetSecurityAssessmentFindingsFilterArrayOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) FindingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.FindingKey }).(pulumi.StringPtrOutput)
}

// The list of findings.
func (o GetSecurityAssessmentFindingsResultOutput) Findings() GetSecurityAssessmentFindingsFindingArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []GetSecurityAssessmentFindingsFinding { return v.Findings }).(GetSecurityAssessmentFindingsFindingArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityAssessmentFindingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether a given finding is marked as topFinding or not.
func (o GetSecurityAssessmentFindingsResultOutput) IsTopFinding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *bool { return v.IsTopFinding }).(pulumi.BoolPtrOutput)
}

// Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, a STIG rule, or a GDPR Article/Recital.
func (o GetSecurityAssessmentFindingsResultOutput) References() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.References }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) SecurityAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) string { return v.SecurityAssessmentId }).(pulumi.StringOutput)
}

// The severity of the finding as determined by security assessment and is same as oracleDefinedSeverity, unless modified by user.
func (o GetSecurityAssessmentFindingsResultOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The current state of the finding.
func (o GetSecurityAssessmentFindingsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID of the target database.
func (o GetSecurityAssessmentFindingsResultOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

func (o GetSecurityAssessmentFindingsResultOutput) TargetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityAssessmentFindingsResult) []string { return v.TargetIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityAssessmentFindingsResultOutput{})
}
