// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Security Policies in Oracle Cloud Infrastructure Data Safe service.
//
// Retrieves a list of all security policies in Data Safe.
//
// The ListSecurityPolicies operation returns only the security policies in the specified `compartmentId`.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicies on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSecurityPolicies(ctx, &datasafe.GetSecurityPoliciesArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(securityPolicyAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(securityPolicyCompartmentIdInSubtree),
//				DisplayName:            pulumi.StringRef(securityPolicyDisplayName),
//				SecurityPolicyId:       pulumi.StringRef(testSecurityPolicy.Id),
//				State:                  pulumi.StringRef(securityPolicyState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecurityPolicies(ctx *pulumi.Context, args *GetSecurityPoliciesArgs, opts ...pulumi.InvokeOption) (*GetSecurityPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityPoliciesResult
	err := ctx.Invoke("oci:DataSafe/getSecurityPolicies:getSecurityPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityPolicies.
type GetSecurityPoliciesArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the specified display name.
	DisplayName *string                     `pulumi:"displayName"`
	Filters     []GetSecurityPoliciesFilter `pulumi:"filters"`
	// An optional filter to return only resources that match the specified OCID of the security policy resource.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The current state of the security policy.
	State *string `pulumi:"state"`
}

// A collection of values returned by getSecurityPolicies.
type GetSecurityPoliciesResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the compartment containing the security policy.
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The display name of the security policy.
	DisplayName *string                     `pulumi:"displayName"`
	Filters     []GetSecurityPoliciesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of security_policy_collection.
	SecurityPolicyCollections []GetSecurityPoliciesSecurityPolicyCollection `pulumi:"securityPolicyCollections"`
	SecurityPolicyId          *string                                       `pulumi:"securityPolicyId"`
	// The current state of the security policy.
	State *string `pulumi:"state"`
}

func GetSecurityPoliciesOutput(ctx *pulumi.Context, args GetSecurityPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetSecurityPoliciesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecurityPoliciesResultOutput, error) {
			args := v.(GetSecurityPoliciesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSecurityPolicies:getSecurityPolicies", args, GetSecurityPoliciesResultOutput{}, options).(GetSecurityPoliciesResultOutput), nil
		}).(GetSecurityPoliciesResultOutput)
}

// A collection of arguments for invoking getSecurityPolicies.
type GetSecurityPoliciesOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A filter to return only resources that match the specified display name.
	DisplayName pulumi.StringPtrInput               `pulumi:"displayName"`
	Filters     GetSecurityPoliciesFilterArrayInput `pulumi:"filters"`
	// An optional filter to return only resources that match the specified OCID of the security policy resource.
	SecurityPolicyId pulumi.StringPtrInput `pulumi:"securityPolicyId"`
	// The current state of the security policy.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetSecurityPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityPolicies.
type GetSecurityPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetSecurityPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPoliciesResult)(nil)).Elem()
}

func (o GetSecurityPoliciesResultOutput) ToGetSecurityPoliciesResultOutput() GetSecurityPoliciesResultOutput {
	return o
}

func (o GetSecurityPoliciesResultOutput) ToGetSecurityPoliciesResultOutputWithContext(ctx context.Context) GetSecurityPoliciesResultOutput {
	return o
}

func (o GetSecurityPoliciesResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The OCID of the compartment containing the security policy.
func (o GetSecurityPoliciesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSecurityPoliciesResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// The display name of the security policy.
func (o GetSecurityPoliciesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSecurityPoliciesResultOutput) Filters() GetSecurityPoliciesFilterArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) []GetSecurityPoliciesFilter { return v.Filters }).(GetSecurityPoliciesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of security_policy_collection.
func (o GetSecurityPoliciesResultOutput) SecurityPolicyCollections() GetSecurityPoliciesSecurityPolicyCollectionArrayOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) []GetSecurityPoliciesSecurityPolicyCollection {
		return v.SecurityPolicyCollections
	}).(GetSecurityPoliciesSecurityPolicyCollectionArrayOutput)
}

func (o GetSecurityPoliciesResultOutput) SecurityPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) *string { return v.SecurityPolicyId }).(pulumi.StringPtrOutput)
}

// The current state of the security policy.
func (o GetSecurityPoliciesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecurityPoliciesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityPoliciesResultOutput{})
}
