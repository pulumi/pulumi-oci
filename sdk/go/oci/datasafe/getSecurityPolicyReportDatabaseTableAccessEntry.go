// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Security Policy Report Database Table Access Entry resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a database table access entry object by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSecurityPolicyReportDatabaseTableAccessEntry(ctx, &datasafe.GetSecurityPolicyReportDatabaseTableAccessEntryArgs{
//				DatabaseTableAccessEntryKey: securityPolicyReportDatabaseTableAccessEntryDatabaseTableAccessEntryKey,
//				SecurityPolicyReportId:      testSecurityPolicyReport.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSecurityPolicyReportDatabaseTableAccessEntry(ctx *pulumi.Context, args *GetSecurityPolicyReportDatabaseTableAccessEntryArgs, opts ...pulumi.InvokeOption) (*GetSecurityPolicyReportDatabaseTableAccessEntryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityPolicyReportDatabaseTableAccessEntryResult
	err := ctx.Invoke("oci:DataSafe/getSecurityPolicyReportDatabaseTableAccessEntry:getSecurityPolicyReportDatabaseTableAccessEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityPolicyReportDatabaseTableAccessEntry.
type GetSecurityPolicyReportDatabaseTableAccessEntryArgs struct {
	// The unique key that identifies the table access object. This is a system-generated identifier.
	DatabaseTableAccessEntryKey string `pulumi:"databaseTableAccessEntryKey"`
	// The OCID of the security policy report resource.
	SecurityPolicyReportId string `pulumi:"securityPolicyReportId"`
}

// A collection of values returned by getSecurityPolicyReportDatabaseTableAccessEntry.
type GetSecurityPolicyReportDatabaseTableAccessEntryResult struct {
	// A non-null value in this field indicates the object through which user has access to table, possible values could be table or view.
	AccessThroughObject string `pulumi:"accessThroughObject"`
	// The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT, OWNER or DELETE.
	AccessType string `pulumi:"accessType"`
	// Indicates whether the user has access to all the tables in the schema.
	AreAllTablesAccessible bool `pulumi:"areAllTablesAccessible"`
	// If there are column level privileges on a table or view.
	ColumnName                  string `pulumi:"columnName"`
	DatabaseTableAccessEntryKey string `pulumi:"databaseTableAccessEntryKey"`
	// This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
	GrantFromRole string `pulumi:"grantFromRole"`
	// Grantee is the user who can access the table
	Grantee string `pulumi:"grantee"`
	// The one who granted this privilege.
	Grantor string `pulumi:"grantor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the table access is constrained via Oracle Database Vault.
	IsAccessConstrainedByDatabaseVault bool `pulumi:"isAccessConstrainedByDatabaseVault"`
	// Indicates whether the table access is constrained via Oracle Label Security.
	IsAccessConstrainedByLabelSecurity bool `pulumi:"isAccessConstrainedByLabelSecurity"`
	// Indicates whether the table access is constrained via Real Application Security.
	IsAccessConstrainedByRealApplicationSecurity bool `pulumi:"isAccessConstrainedByRealApplicationSecurity"`
	// Indicates whether the table access is constrained via Oracle Data Redaction.
	IsAccessConstrainedByRedaction bool `pulumi:"isAccessConstrainedByRedaction"`
	// Indicates whether the table access is constrained via Oracle Database SQL Firewall.
	IsAccessConstrainedBySqlFirewall bool `pulumi:"isAccessConstrainedBySqlFirewall"`
	// Indicates whether the access is constrained on a table via a view.
	IsAccessConstrainedByView bool `pulumi:"isAccessConstrainedByView"`
	// Indicates whether the table access is constrained via Virtual Private Database.
	IsAccessConstrainedByVirtualPrivateDatabase bool `pulumi:"isAccessConstrainedByVirtualPrivateDatabase"`
	// Indicates whether the table is marked as sensitive.
	IsSensitive bool `pulumi:"isSensitive"`
	// The unique key that identifies the table access report. It is numeric and unique within a security policy report.
	Key string `pulumi:"key"`
	// Name of the privilege.
	Privilege string `pulumi:"privilege"`
	// Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
	PrivilegeGrantable string `pulumi:"privilegeGrantable"`
	// Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
	PrivilegeType          string `pulumi:"privilegeType"`
	SecurityPolicyReportId string `pulumi:"securityPolicyReportId"`
	// The name of the database table the user has access to.
	TableName string `pulumi:"tableName"`
	// The name of the schema the table belongs to.
	TableSchema string `pulumi:"tableSchema"`
	// The OCID of the of the  target database.
	TargetId string `pulumi:"targetId"`
}

func GetSecurityPolicyReportDatabaseTableAccessEntryOutput(ctx *pulumi.Context, args GetSecurityPolicyReportDatabaseTableAccessEntryOutputArgs, opts ...pulumi.InvokeOption) GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput, error) {
			args := v.(GetSecurityPolicyReportDatabaseTableAccessEntryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSecurityPolicyReportDatabaseTableAccessEntry:getSecurityPolicyReportDatabaseTableAccessEntry", args, GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput{}, options).(GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput), nil
		}).(GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput)
}

// A collection of arguments for invoking getSecurityPolicyReportDatabaseTableAccessEntry.
type GetSecurityPolicyReportDatabaseTableAccessEntryOutputArgs struct {
	// The unique key that identifies the table access object. This is a system-generated identifier.
	DatabaseTableAccessEntryKey pulumi.StringInput `pulumi:"databaseTableAccessEntryKey"`
	// The OCID of the security policy report resource.
	SecurityPolicyReportId pulumi.StringInput `pulumi:"securityPolicyReportId"`
}

func (GetSecurityPolicyReportDatabaseTableAccessEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPolicyReportDatabaseTableAccessEntryArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityPolicyReportDatabaseTableAccessEntry.
type GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput struct{ *pulumi.OutputState }

func (GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPolicyReportDatabaseTableAccessEntryResult)(nil)).Elem()
}

func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) ToGetSecurityPolicyReportDatabaseTableAccessEntryResultOutput() GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput {
	return o
}

func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) ToGetSecurityPolicyReportDatabaseTableAccessEntryResultOutputWithContext(ctx context.Context) GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput {
	return o
}

// A non-null value in this field indicates the object through which user has access to table, possible values could be table or view.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) AccessThroughObject() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.AccessThroughObject }).(pulumi.StringOutput)
}

// The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT, OWNER or DELETE.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.AccessType }).(pulumi.StringOutput)
}

// Indicates whether the user has access to all the tables in the schema.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) AreAllTablesAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool { return v.AreAllTablesAccessible }).(pulumi.BoolOutput)
}

// If there are column level privileges on a table or view.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) DatabaseTableAccessEntryKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string {
		return v.DatabaseTableAccessEntryKey
	}).(pulumi.StringOutput)
}

// This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) GrantFromRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.GrantFromRole }).(pulumi.StringOutput)
}

// Grantee is the user who can access the table
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) Grantee() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.Grantee }).(pulumi.StringOutput)
}

// The one who granted this privilege.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) Grantor() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.Grantor }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the table access is constrained via Oracle Database Vault.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByDatabaseVault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedByDatabaseVault
	}).(pulumi.BoolOutput)
}

// Indicates whether the table access is constrained via Oracle Label Security.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByLabelSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedByLabelSecurity
	}).(pulumi.BoolOutput)
}

// Indicates whether the table access is constrained via Real Application Security.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByRealApplicationSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedByRealApplicationSecurity
	}).(pulumi.BoolOutput)
}

// Indicates whether the table access is constrained via Oracle Data Redaction.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByRedaction() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedByRedaction
	}).(pulumi.BoolOutput)
}

// Indicates whether the table access is constrained via Oracle Database SQL Firewall.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedBySqlFirewall() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedBySqlFirewall
	}).(pulumi.BoolOutput)
}

// Indicates whether the access is constrained on a table via a view.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByView() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool { return v.IsAccessConstrainedByView }).(pulumi.BoolOutput)
}

// Indicates whether the table access is constrained via Virtual Private Database.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsAccessConstrainedByVirtualPrivateDatabase() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool {
		return v.IsAccessConstrainedByVirtualPrivateDatabase
	}).(pulumi.BoolOutput)
}

// Indicates whether the table is marked as sensitive.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) IsSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) bool { return v.IsSensitive }).(pulumi.BoolOutput)
}

// The unique key that identifies the table access report. It is numeric and unique within a security policy report.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the privilege.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) Privilege() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.Privilege }).(pulumi.StringOutput)
}

// Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) PrivilegeGrantable() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.PrivilegeGrantable }).(pulumi.StringOutput)
}

// Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) PrivilegeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.PrivilegeType }).(pulumi.StringOutput)
}

func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) SecurityPolicyReportId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.SecurityPolicyReportId }).(pulumi.StringOutput)
}

// The name of the database table the user has access to.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.TableName }).(pulumi.StringOutput)
}

// The name of the schema the table belongs to.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) TableSchema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.TableSchema }).(pulumi.StringOutput)
}

// The OCID of the of the  target database.
func (o GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseTableAccessEntryResult) string { return v.TargetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityPolicyReportDatabaseTableAccessEntryResultOutput{})
}
