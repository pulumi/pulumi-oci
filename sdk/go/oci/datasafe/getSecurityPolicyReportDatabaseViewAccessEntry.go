// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Security Policy Report Database View Access Entry resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a database view access object by identifier.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetSecurityPolicyReportDatabaseViewAccessEntry(ctx, &datasafe.GetSecurityPolicyReportDatabaseViewAccessEntryArgs{
//				DatabaseViewAccessEntryKey: securityPolicyReportDatabaseViewAccessEntryDatabaseViewAccessEntryKey,
//				SecurityPolicyReportId:     testSecurityPolicyReport.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSecurityPolicyReportDatabaseViewAccessEntry(ctx *pulumi.Context, args *GetSecurityPolicyReportDatabaseViewAccessEntryArgs, opts ...pulumi.InvokeOption) (*GetSecurityPolicyReportDatabaseViewAccessEntryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSecurityPolicyReportDatabaseViewAccessEntryResult
	err := ctx.Invoke("oci:DataSafe/getSecurityPolicyReportDatabaseViewAccessEntry:getSecurityPolicyReportDatabaseViewAccessEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecurityPolicyReportDatabaseViewAccessEntry.
type GetSecurityPolicyReportDatabaseViewAccessEntryArgs struct {
	// The unique key that identifies the view access object. This is a system-generated identifier.
	DatabaseViewAccessEntryKey string `pulumi:"databaseViewAccessEntryKey"`
	// The OCID of the security policy report resource.
	SecurityPolicyReportId string `pulumi:"securityPolicyReportId"`
}

// A collection of values returned by getSecurityPolicyReportDatabaseViewAccessEntry.
type GetSecurityPolicyReportDatabaseViewAccessEntryResult struct {
	// The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
	AccessType string `pulumi:"accessType"`
	// If there are column level privileges on a table or view.
	ColumnName                 string `pulumi:"columnName"`
	DatabaseViewAccessEntryKey string `pulumi:"databaseViewAccessEntryKey"`
	// This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
	GrantFromRole string `pulumi:"grantFromRole"`
	// Grantee is the user who can access the table or view
	Grantee string `pulumi:"grantee"`
	// The user who granted the privilege.
	Grantor string `pulumi:"grantor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the table access is constrained via Oracle Database Vault.
	IsAccessConstrainedByDatabaseVault bool `pulumi:"isAccessConstrainedByDatabaseVault"`
	// Indicates whether the view access is constrained via Real Application Security.
	IsAccessConstrainedByRealApplicationSecurity bool `pulumi:"isAccessConstrainedByRealApplicationSecurity"`
	// Indicates whether the view access is constrained via Oracle Data Redaction.
	IsAccessConstrainedByRedaction bool `pulumi:"isAccessConstrainedByRedaction"`
	// Indicates whether the view access is constrained via Oracle Database SQL Firewall.
	IsAccessConstrainedBySqlFirewall bool `pulumi:"isAccessConstrainedBySqlFirewall"`
	// Indicates whether the view access is constrained via Virtual Private Database.
	IsAccessConstrainedByVirtualPrivateDatabase bool `pulumi:"isAccessConstrainedByVirtualPrivateDatabase"`
	// The unique key that identifies the table access report. It is numeric and unique within a security policy report.
	Key string `pulumi:"key"`
	// The name of the privilege.
	Privilege string `pulumi:"privilege"`
	// Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
	PrivilegeGrantable string `pulumi:"privilegeGrantable"`
	// Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
	PrivilegeType          string `pulumi:"privilegeType"`
	SecurityPolicyReportId string `pulumi:"securityPolicyReportId"`
	// The name of the database table the user has access to.
	TableName string `pulumi:"tableName"`
	// The name of the schema the table belongs to.
	TableSchema string `pulumi:"tableSchema"`
	// The OCID of the of the  target database.
	TargetId string `pulumi:"targetId"`
	// The name of the view.
	ViewName string `pulumi:"viewName"`
	// The name of the schema.
	ViewSchema string `pulumi:"viewSchema"`
	// Definition of the view.
	ViewText string `pulumi:"viewText"`
}

func GetSecurityPolicyReportDatabaseViewAccessEntryOutput(ctx *pulumi.Context, args GetSecurityPolicyReportDatabaseViewAccessEntryOutputArgs, opts ...pulumi.InvokeOption) GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSecurityPolicyReportDatabaseViewAccessEntryResult, error) {
			args := v.(GetSecurityPolicyReportDatabaseViewAccessEntryArgs)
			r, err := GetSecurityPolicyReportDatabaseViewAccessEntry(ctx, &args, opts...)
			var s GetSecurityPolicyReportDatabaseViewAccessEntryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput)
}

// A collection of arguments for invoking getSecurityPolicyReportDatabaseViewAccessEntry.
type GetSecurityPolicyReportDatabaseViewAccessEntryOutputArgs struct {
	// The unique key that identifies the view access object. This is a system-generated identifier.
	DatabaseViewAccessEntryKey pulumi.StringInput `pulumi:"databaseViewAccessEntryKey"`
	// The OCID of the security policy report resource.
	SecurityPolicyReportId pulumi.StringInput `pulumi:"securityPolicyReportId"`
}

func (GetSecurityPolicyReportDatabaseViewAccessEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPolicyReportDatabaseViewAccessEntryArgs)(nil)).Elem()
}

// A collection of values returned by getSecurityPolicyReportDatabaseViewAccessEntry.
type GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput struct{ *pulumi.OutputState }

func (GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityPolicyReportDatabaseViewAccessEntryResult)(nil)).Elem()
}

func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ToGetSecurityPolicyReportDatabaseViewAccessEntryResultOutput() GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput {
	return o
}

func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ToGetSecurityPolicyReportDatabaseViewAccessEntryResultOutputWithContext(ctx context.Context) GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput {
	return o
}

// The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.AccessType }).(pulumi.StringOutput)
}

// If there are column level privileges on a table or view.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) DatabaseViewAccessEntryKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string {
		return v.DatabaseViewAccessEntryKey
	}).(pulumi.StringOutput)
}

// This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) GrantFromRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.GrantFromRole }).(pulumi.StringOutput)
}

// Grantee is the user who can access the table or view
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) Grantee() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.Grantee }).(pulumi.StringOutput)
}

// The user who granted the privilege.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) Grantor() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.Grantor }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the table access is constrained via Oracle Database Vault.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) IsAccessConstrainedByDatabaseVault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) bool {
		return v.IsAccessConstrainedByDatabaseVault
	}).(pulumi.BoolOutput)
}

// Indicates whether the view access is constrained via Real Application Security.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) IsAccessConstrainedByRealApplicationSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) bool {
		return v.IsAccessConstrainedByRealApplicationSecurity
	}).(pulumi.BoolOutput)
}

// Indicates whether the view access is constrained via Oracle Data Redaction.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) IsAccessConstrainedByRedaction() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) bool {
		return v.IsAccessConstrainedByRedaction
	}).(pulumi.BoolOutput)
}

// Indicates whether the view access is constrained via Oracle Database SQL Firewall.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) IsAccessConstrainedBySqlFirewall() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) bool {
		return v.IsAccessConstrainedBySqlFirewall
	}).(pulumi.BoolOutput)
}

// Indicates whether the view access is constrained via Virtual Private Database.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) IsAccessConstrainedByVirtualPrivateDatabase() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) bool {
		return v.IsAccessConstrainedByVirtualPrivateDatabase
	}).(pulumi.BoolOutput)
}

// The unique key that identifies the table access report. It is numeric and unique within a security policy report.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the privilege.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) Privilege() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.Privilege }).(pulumi.StringOutput)
}

// Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) PrivilegeGrantable() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.PrivilegeGrantable }).(pulumi.StringOutput)
}

// Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) PrivilegeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.PrivilegeType }).(pulumi.StringOutput)
}

func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) SecurityPolicyReportId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.SecurityPolicyReportId }).(pulumi.StringOutput)
}

// The name of the database table the user has access to.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.TableName }).(pulumi.StringOutput)
}

// The name of the schema the table belongs to.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) TableSchema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.TableSchema }).(pulumi.StringOutput)
}

// The OCID of the of the  target database.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.TargetId }).(pulumi.StringOutput)
}

// The name of the view.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ViewName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.ViewName }).(pulumi.StringOutput)
}

// The name of the schema.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ViewSchema() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.ViewSchema }).(pulumi.StringOutput)
}

// Definition of the view.
func (o GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput) ViewText() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityPolicyReportDatabaseViewAccessEntryResult) string { return v.ViewText }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSecurityPolicyReportDatabaseViewAccessEntryResultOutput{})
}
