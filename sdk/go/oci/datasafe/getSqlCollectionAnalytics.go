// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Sql Collection Analytics in Oracle Cloud Infrastructure Data Safe service.
//
// Retrieves a list of all SQL collection analytics in Data Safe.
//
// The ListSqlCollectionAnalytics operation returns only the analytics for the SQL collections in the specified `compartmentId`.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSqlCollectionAnalytics(ctx, &datasafe.GetSqlCollectionAnalyticsArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(sqlCollectionAnalyticAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(sqlCollectionAnalyticCompartmentIdInSubtree),
//				GroupBies:              sqlCollectionAnalyticGroupBy,
//				State:                  pulumi.StringRef(sqlCollectionAnalyticState),
//				TargetDatabaseGroupId:  pulumi.StringRef(testTargetDatabaseGroup.Id),
//				TargetId:               pulumi.StringRef(testTarget.Id),
//				TimeEnded:              pulumi.StringRef(sqlCollectionAnalyticTimeEnded),
//				TimeStarted:            pulumi.StringRef(sqlCollectionAnalyticTimeStarted),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlCollectionAnalytics(ctx *pulumi.Context, args *GetSqlCollectionAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetSqlCollectionAnalyticsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlCollectionAnalyticsResult
	err := ctx.Invoke("oci:DataSafe/getSqlCollectionAnalytics:getSqlCollectionAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlCollectionAnalytics.
type GetSqlCollectionAnalyticsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                             `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlCollectionAnalyticsFilter `pulumi:"filters"`
	// The group by parameter to summarize SQL collection aggregation.
	GroupBies []string `pulumi:"groupBies"`
	// The current state of the SQL collection.
	State *string `pulumi:"state"`
	// A filter to return the target database group that matches the specified OCID.
	TargetDatabaseGroupId *string `pulumi:"targetDatabaseGroupId"`
	// A filter to return only items related to a specific target OCID.
	TargetId *string `pulumi:"targetId"`
	// An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded *string `pulumi:"timeEnded"`
	// An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted *string `pulumi:"timeStarted"`
}

// A collection of values returned by getSqlCollectionAnalytics.
type GetSqlCollectionAnalyticsResult struct {
	AccessLevel            *string                           `pulumi:"accessLevel"`
	CompartmentId          string                            `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                             `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlCollectionAnalyticsFilter `pulumi:"filters"`
	GroupBies              []string                          `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of sql_collection_analytics_collection.
	SqlCollectionAnalyticsCollections []GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollection `pulumi:"sqlCollectionAnalyticsCollections"`
	// The current state of the SQL collection.
	State                 *string `pulumi:"state"`
	TargetDatabaseGroupId *string `pulumi:"targetDatabaseGroupId"`
	// The OCID of the target corresponding to the security policy deployment.
	TargetId    *string `pulumi:"targetId"`
	TimeEnded   *string `pulumi:"timeEnded"`
	TimeStarted *string `pulumi:"timeStarted"`
}

func GetSqlCollectionAnalyticsOutput(ctx *pulumi.Context, args GetSqlCollectionAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetSqlCollectionAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSqlCollectionAnalyticsResultOutput, error) {
			args := v.(GetSqlCollectionAnalyticsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSqlCollectionAnalytics:getSqlCollectionAnalytics", args, GetSqlCollectionAnalyticsResultOutput{}, options).(GetSqlCollectionAnalyticsResultOutput), nil
		}).(GetSqlCollectionAnalyticsResultOutput)
}

// A collection of arguments for invoking getSqlCollectionAnalytics.
type GetSqlCollectionAnalyticsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                       `pulumi:"compartmentIdInSubtree"`
	Filters                GetSqlCollectionAnalyticsFilterArrayInput `pulumi:"filters"`
	// The group by parameter to summarize SQL collection aggregation.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// The current state of the SQL collection.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return the target database group that matches the specified OCID.
	TargetDatabaseGroupId pulumi.StringPtrInput `pulumi:"targetDatabaseGroupId"`
	// A filter to return only items related to a specific target OCID.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
	// An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded pulumi.StringPtrInput `pulumi:"timeEnded"`
	// An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted pulumi.StringPtrInput `pulumi:"timeStarted"`
}

func (GetSqlCollectionAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlCollectionAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getSqlCollectionAnalytics.
type GetSqlCollectionAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetSqlCollectionAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlCollectionAnalyticsResult)(nil)).Elem()
}

func (o GetSqlCollectionAnalyticsResultOutput) ToGetSqlCollectionAnalyticsResultOutput() GetSqlCollectionAnalyticsResultOutput {
	return o
}

func (o GetSqlCollectionAnalyticsResultOutput) ToGetSqlCollectionAnalyticsResultOutputWithContext(ctx context.Context) GetSqlCollectionAnalyticsResultOutput {
	return o
}

func (o GetSqlCollectionAnalyticsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) Filters() GetSqlCollectionAnalyticsFilterArrayOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) []GetSqlCollectionAnalyticsFilter { return v.Filters }).(GetSqlCollectionAnalyticsFilterArrayOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlCollectionAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of sql_collection_analytics_collection.
func (o GetSqlCollectionAnalyticsResultOutput) SqlCollectionAnalyticsCollections() GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionArrayOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) []GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollection {
		return v.SqlCollectionAnalyticsCollections
	}).(GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionArrayOutput)
}

// The current state of the SQL collection.
func (o GetSqlCollectionAnalyticsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) TargetDatabaseGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.TargetDatabaseGroupId }).(pulumi.StringPtrOutput)
}

// The OCID of the target corresponding to the security policy deployment.
func (o GetSqlCollectionAnalyticsResultOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) TimeEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.TimeEnded }).(pulumi.StringPtrOutput)
}

func (o GetSqlCollectionAnalyticsResultOutput) TimeStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlCollectionAnalyticsResult) *string { return v.TimeStarted }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlCollectionAnalyticsResultOutput{})
}
