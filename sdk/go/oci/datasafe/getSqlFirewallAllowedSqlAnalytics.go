// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Sql Firewall Allowed Sql Analytics in Oracle Cloud Infrastructure Data Safe service.
//
// Returns the aggregation details of all SQL Firewall allowed SQL statements.
//
// The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
//
// The parameter `accessLevel` specifies whether to return only those compartments for which the
// requestor has INSPECT permissions on at least one resource directly
// or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
// Principal doesn't have access to even one of the child compartments. This is valid only when
// `compartmentIdInSubtree` is set to `true`.
//
// The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
// `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
// To get a full list of all compartments and subcompartments in the tenancy (root compartment),
// set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSqlFirewallAllowedSqlAnalytics(ctx, &datasafe.GetSqlFirewallAllowedSqlAnalyticsArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(sqlFirewallAllowedSqlAnalyticAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(sqlFirewallAllowedSqlAnalyticCompartmentIdInSubtree),
//				GroupBies:              sqlFirewallAllowedSqlAnalyticGroupBy,
//				ScimQuery:              pulumi.StringRef(sqlFirewallAllowedSqlAnalyticScimQuery),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlFirewallAllowedSqlAnalytics(ctx *pulumi.Context, args *GetSqlFirewallAllowedSqlAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetSqlFirewallAllowedSqlAnalyticsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlFirewallAllowedSqlAnalyticsResult
	err := ctx.Invoke("oci:DataSafe/getSqlFirewallAllowedSqlAnalytics:getSqlFirewallAllowedSqlAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlFirewallAllowedSqlAnalytics.
type GetSqlFirewallAllowedSqlAnalyticsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                                     `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallAllowedSqlAnalyticsFilter `pulumi:"filters"`
	// The group by parameter to summarize the allowed SQL aggregation.
	GroupBies []string `pulumi:"groupBies"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(currentUser eq 'SCOTT') and (topLevel eq 'YES')
	ScimQuery *string `pulumi:"scimQuery"`
}

// A collection of values returned by getSqlFirewallAllowedSqlAnalytics.
type GetSqlFirewallAllowedSqlAnalyticsResult struct {
	AccessLevel            *string                                   `pulumi:"accessLevel"`
	CompartmentId          string                                    `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                                     `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallAllowedSqlAnalyticsFilter `pulumi:"filters"`
	GroupBies              []string                                  `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	ScimQuery *string `pulumi:"scimQuery"`
	// The list of sql_firewall_allowed_sql_analytics_collection.
	SqlFirewallAllowedSqlAnalyticsCollections []GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollection `pulumi:"sqlFirewallAllowedSqlAnalyticsCollections"`
}

func GetSqlFirewallAllowedSqlAnalyticsOutput(ctx *pulumi.Context, args GetSqlFirewallAllowedSqlAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetSqlFirewallAllowedSqlAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSqlFirewallAllowedSqlAnalyticsResultOutput, error) {
			args := v.(GetSqlFirewallAllowedSqlAnalyticsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSqlFirewallAllowedSqlAnalytics:getSqlFirewallAllowedSqlAnalytics", args, GetSqlFirewallAllowedSqlAnalyticsResultOutput{}, options).(GetSqlFirewallAllowedSqlAnalyticsResultOutput), nil
		}).(GetSqlFirewallAllowedSqlAnalyticsResultOutput)
}

// A collection of arguments for invoking getSqlFirewallAllowedSqlAnalytics.
type GetSqlFirewallAllowedSqlAnalyticsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                               `pulumi:"compartmentIdInSubtree"`
	Filters                GetSqlFirewallAllowedSqlAnalyticsFilterArrayInput `pulumi:"filters"`
	// The group by parameter to summarize the allowed SQL aggregation.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(currentUser eq 'SCOTT') and (topLevel eq 'YES')
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
}

func (GetSqlFirewallAllowedSqlAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallAllowedSqlAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getSqlFirewallAllowedSqlAnalytics.
type GetSqlFirewallAllowedSqlAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetSqlFirewallAllowedSqlAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallAllowedSqlAnalyticsResult)(nil)).Elem()
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) ToGetSqlFirewallAllowedSqlAnalyticsResultOutput() GetSqlFirewallAllowedSqlAnalyticsResultOutput {
	return o
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) ToGetSqlFirewallAllowedSqlAnalyticsResultOutputWithContext(ctx context.Context) GetSqlFirewallAllowedSqlAnalyticsResultOutput {
	return o
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) Filters() GetSqlFirewallAllowedSqlAnalyticsFilterArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) []GetSqlFirewallAllowedSqlAnalyticsFilter {
		return v.Filters
	}).(GetSqlFirewallAllowedSqlAnalyticsFilterArrayOutput)
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

// The list of sql_firewall_allowed_sql_analytics_collection.
func (o GetSqlFirewallAllowedSqlAnalyticsResultOutput) SqlFirewallAllowedSqlAnalyticsCollections() GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallAllowedSqlAnalyticsResult) []GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollection {
		return v.SqlFirewallAllowedSqlAnalyticsCollections
	}).(GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlFirewallAllowedSqlAnalyticsResultOutput{})
}
