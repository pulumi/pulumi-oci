// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Sql Firewall Violation Analytics in Oracle Cloud Infrastructure Data Safe service.
//
// Returns the aggregation details of the SQL Firewall violations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetSqlFirewallViolationAnalytics(ctx, &datasafe.GetSqlFirewallViolationAnalyticsArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(sqlFirewallViolationAnalyticAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(sqlFirewallViolationAnalyticCompartmentIdInSubtree),
//				GroupBies:              sqlFirewallViolationAnalyticGroupBy,
//				QueryTimeZone:          pulumi.StringRef(sqlFirewallViolationAnalyticQueryTimeZone),
//				ScimQuery:              pulumi.StringRef(sqlFirewallViolationAnalyticScimQuery),
//				SummaryFields:          sqlFirewallViolationAnalyticSummaryField,
//				TimeEnded:              pulumi.StringRef(sqlFirewallViolationAnalyticTimeEnded),
//				TimeStarted:            pulumi.StringRef(sqlFirewallViolationAnalyticTimeStarted),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlFirewallViolationAnalytics(ctx *pulumi.Context, args *GetSqlFirewallViolationAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetSqlFirewallViolationAnalyticsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlFirewallViolationAnalyticsResult
	err := ctx.Invoke("oci:DataSafe/getSqlFirewallViolationAnalytics:getSqlFirewallViolationAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlFirewallViolationAnalytics.
type GetSqlFirewallViolationAnalyticsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                                    `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallViolationAnalyticsFilter `pulumi:"filters"`
	// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
	GroupBies []string `pulumi:"groupBies"`
	// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
	QueryTimeZone *string `pulumi:"queryTimeZone"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
	ScimQuery *string `pulumi:"scimQuery"`
	// Specifies a subset of summarized fields to be returned in the response.
	SummaryFields []string `pulumi:"summaryFields"`
	// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded *string `pulumi:"timeEnded"`
	// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted *string `pulumi:"timeStarted"`
}

// A collection of values returned by getSqlFirewallViolationAnalytics.
type GetSqlFirewallViolationAnalyticsResult struct {
	AccessLevel            *string                                  `pulumi:"accessLevel"`
	CompartmentId          string                                   `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                                    `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallViolationAnalyticsFilter `pulumi:"filters"`
	GroupBies              []string                                 `pulumi:"groupBies"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	QueryTimeZone *string `pulumi:"queryTimeZone"`
	ScimQuery     *string `pulumi:"scimQuery"`
	// The list of sql_firewall_violation_analytics_collection.
	SqlFirewallViolationAnalyticsCollections []GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollection `pulumi:"sqlFirewallViolationAnalyticsCollections"`
	SummaryFields                            []string                                                                  `pulumi:"summaryFields"`
	// The time at which the aggregation ended.
	TimeEnded *string `pulumi:"timeEnded"`
	// The time at which the aggregation started.
	TimeStarted *string `pulumi:"timeStarted"`
}

func GetSqlFirewallViolationAnalyticsOutput(ctx *pulumi.Context, args GetSqlFirewallViolationAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetSqlFirewallViolationAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetSqlFirewallViolationAnalyticsResultOutput, error) {
			args := v.(GetSqlFirewallViolationAnalyticsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getSqlFirewallViolationAnalytics:getSqlFirewallViolationAnalytics", args, GetSqlFirewallViolationAnalyticsResultOutput{}, options).(GetSqlFirewallViolationAnalyticsResultOutput), nil
		}).(GetSqlFirewallViolationAnalyticsResultOutput)
}

// A collection of arguments for invoking getSqlFirewallViolationAnalytics.
type GetSqlFirewallViolationAnalyticsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                              `pulumi:"compartmentIdInSubtree"`
	Filters                GetSqlFirewallViolationAnalyticsFilterArrayInput `pulumi:"filters"`
	// A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Default time zone is UTC if no time zone provided. The date-time considerations of the resource will be in accordance with the specified time zone.
	QueryTimeZone pulumi.StringPtrInput `pulumi:"queryTimeZone"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
	// Specifies a subset of summarized fields to be returned in the response.
	SummaryFields pulumi.StringArrayInput `pulumi:"summaryFields"`
	// An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeEnded pulumi.StringPtrInput `pulumi:"timeEnded"`
	// An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeStarted pulumi.StringPtrInput `pulumi:"timeStarted"`
}

func (GetSqlFirewallViolationAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallViolationAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getSqlFirewallViolationAnalytics.
type GetSqlFirewallViolationAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetSqlFirewallViolationAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallViolationAnalyticsResult)(nil)).Elem()
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) ToGetSqlFirewallViolationAnalyticsResultOutput() GetSqlFirewallViolationAnalyticsResultOutput {
	return o
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) ToGetSqlFirewallViolationAnalyticsResultOutputWithContext(ctx context.Context) GetSqlFirewallViolationAnalyticsResultOutput {
	return o
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) Filters() GetSqlFirewallViolationAnalyticsFilterArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) []GetSqlFirewallViolationAnalyticsFilter {
		return v.Filters
	}).(GetSqlFirewallViolationAnalyticsFilterArrayOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlFirewallViolationAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) QueryTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *string { return v.QueryTimeZone }).(pulumi.StringPtrOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

// The list of sql_firewall_violation_analytics_collection.
func (o GetSqlFirewallViolationAnalyticsResultOutput) SqlFirewallViolationAnalyticsCollections() GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) []GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollection {
		return v.SqlFirewallViolationAnalyticsCollections
	}).(GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionArrayOutput)
}

func (o GetSqlFirewallViolationAnalyticsResultOutput) SummaryFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) []string { return v.SummaryFields }).(pulumi.StringArrayOutput)
}

// The time at which the aggregation ended.
func (o GetSqlFirewallViolationAnalyticsResultOutput) TimeEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *string { return v.TimeEnded }).(pulumi.StringPtrOutput)
}

// The time at which the aggregation started.
func (o GetSqlFirewallViolationAnalyticsResultOutput) TimeStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationAnalyticsResult) *string { return v.TimeStarted }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlFirewallViolationAnalyticsResultOutput{})
}
