// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Sql Firewall Violations in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of all the SQL Firewall violations captured by the firewall.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetSqlFirewallViolations(ctx, &datasafe.GetSqlFirewallViolationsArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(sqlFirewallViolationAccessLevel),
//				CompartmentIdInSubtree: pulumi.BoolRef(sqlFirewallViolationCompartmentIdInSubtree),
//				ScimQuery:              pulumi.StringRef(sqlFirewallViolationScimQuery),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSqlFirewallViolations(ctx *pulumi.Context, args *GetSqlFirewallViolationsArgs, opts ...pulumi.InvokeOption) (*GetSqlFirewallViolationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlFirewallViolationsResult
	err := ctx.Invoke("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlFirewallViolations.
type GetSqlFirewallViolationsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                            `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallViolationsFilter `pulumi:"filters"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
	ScimQuery *string `pulumi:"scimQuery"`
}

// A collection of values returned by getSqlFirewallViolations.
type GetSqlFirewallViolationsResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The OCID of the compartment containing the SQL violation.
	CompartmentId          string                           `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                            `pulumi:"compartmentIdInSubtree"`
	Filters                []GetSqlFirewallViolationsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	ScimQuery *string `pulumi:"scimQuery"`
	// The list of sql_firewall_violations_collection.
	SqlFirewallViolationsCollections []GetSqlFirewallViolationsSqlFirewallViolationsCollection `pulumi:"sqlFirewallViolationsCollections"`
}

func GetSqlFirewallViolationsOutput(ctx *pulumi.Context, args GetSqlFirewallViolationsOutputArgs, opts ...pulumi.InvokeOption) GetSqlFirewallViolationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlFirewallViolationsResultOutput, error) {
			args := v.(GetSqlFirewallViolationsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetSqlFirewallViolationsResult
			secret, err := ctx.InvokePackageRaw("oci:DataSafe/getSqlFirewallViolations:getSqlFirewallViolations", args, &rv, "", opts...)
			if err != nil {
				return GetSqlFirewallViolationsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetSqlFirewallViolationsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetSqlFirewallViolationsResultOutput), nil
			}
			return output, nil
		}).(GetSqlFirewallViolationsResultOutput)
}

// A collection of arguments for invoking getSqlFirewallViolations.
type GetSqlFirewallViolationsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                      `pulumi:"compartmentIdInSubtree"`
	Filters                GetSqlFirewallViolationsFilterArrayInput `pulumi:"filters"`
	// The scimQuery query parameter accepts filter expressions that use the syntax described in Section 3.2.2.2 of the System for Cross-Domain Identity Management (SCIM) specification, which is available at [RFC3339](https://tools.ietf.org/html/draft-ietf-scim-api-12). In SCIM filtering expressions, text, date, and time values must be enclosed in quotation marks, with date and time values using ISO-8601 format. (Numeric and boolean values should not be quoted.)
	//
	// **Example:** query=(operationTime ge '2021-06-04T01-00-26') and (violationAction eq 'BLOCKED')
	ScimQuery pulumi.StringPtrInput `pulumi:"scimQuery"`
}

func (GetSqlFirewallViolationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallViolationsArgs)(nil)).Elem()
}

// A collection of values returned by getSqlFirewallViolations.
type GetSqlFirewallViolationsResultOutput struct{ *pulumi.OutputState }

func (GetSqlFirewallViolationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlFirewallViolationsResult)(nil)).Elem()
}

func (o GetSqlFirewallViolationsResultOutput) ToGetSqlFirewallViolationsResultOutput() GetSqlFirewallViolationsResultOutput {
	return o
}

func (o GetSqlFirewallViolationsResultOutput) ToGetSqlFirewallViolationsResultOutputWithContext(ctx context.Context) GetSqlFirewallViolationsResultOutput {
	return o
}

func (o GetSqlFirewallViolationsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The OCID of the compartment containing the SQL violation.
func (o GetSqlFirewallViolationsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSqlFirewallViolationsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetSqlFirewallViolationsResultOutput) Filters() GetSqlFirewallViolationsFilterArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) []GetSqlFirewallViolationsFilter { return v.Filters }).(GetSqlFirewallViolationsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSqlFirewallViolationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSqlFirewallViolationsResultOutput) ScimQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) *string { return v.ScimQuery }).(pulumi.StringPtrOutput)
}

// The list of sql_firewall_violations_collection.
func (o GetSqlFirewallViolationsResultOutput) SqlFirewallViolationsCollections() GetSqlFirewallViolationsSqlFirewallViolationsCollectionArrayOutput {
	return o.ApplyT(func(v GetSqlFirewallViolationsResult) []GetSqlFirewallViolationsSqlFirewallViolationsCollection {
		return v.SqlFirewallViolationsCollections
	}).(GetSqlFirewallViolationsSqlFirewallViolationsCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlFirewallViolationsResultOutput{})
}
