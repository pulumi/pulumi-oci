// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Target Database Peer Target Database resource in Oracle Cloud Infrastructure Data Safe service.
//
// Returns the details of the specified Data Safe peer target database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.GetTargetDatabasePeerTargetDatabase(ctx, &datasafe.GetTargetDatabasePeerTargetDatabaseArgs{
//				PeerTargetDatabaseId: testTargetDatabase.Id,
//				TargetDatabaseId:     testTargetDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTargetDatabasePeerTargetDatabase(ctx *pulumi.Context, args *LookupTargetDatabasePeerTargetDatabaseArgs, opts ...pulumi.InvokeOption) (*LookupTargetDatabasePeerTargetDatabaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTargetDatabasePeerTargetDatabaseResult
	err := ctx.Invoke("oci:DataSafe/getTargetDatabasePeerTargetDatabase:getTargetDatabasePeerTargetDatabase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTargetDatabasePeerTargetDatabase.
type LookupTargetDatabasePeerTargetDatabaseArgs struct {
	// The unique id of the peer target database.
	PeerTargetDatabaseId string `pulumi:"peerTargetDatabaseId"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId string `pulumi:"targetDatabaseId"`
}

// A collection of values returned by getTargetDatabasePeerTargetDatabase.
type LookupTargetDatabasePeerTargetDatabaseResult struct {
	// Details of the database for the registration in Data Safe.
	DatabaseDetails []GetTargetDatabasePeerTargetDatabaseDatabaseDetail `pulumi:"databaseDetails"`
	// Unique name of the database associated to the peer target database.
	DatabaseUniqueName string `pulumi:"databaseUniqueName"`
	// The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
	DataguardAssociationId string `pulumi:"dataguardAssociationId"`
	// The description of the peer target database in Data Safe.
	Description string `pulumi:"description"`
	// The display name of the peer target database in Data Safe.
	DisplayName string `pulumi:"displayName"`
	Id          string `pulumi:"id"`
	// The secondary key assigned for the peer target database in Data Safe.
	Key int `pulumi:"key"`
	// Details about the current state of the peer target database in Data Safe.
	LifecycleDetails     string `pulumi:"lifecycleDetails"`
	PeerTargetDatabaseId string `pulumi:"peerTargetDatabaseId"`
	// Role of the database associated to the peer target database.
	Role string `pulumi:"role"`
	// The current state of the peer target database in Data Safe.
	State            string `pulumi:"state"`
	TargetDatabaseId string `pulumi:"targetDatabaseId"`
	// The date and time of the peer target database registration in Data Safe.
	TimeCreated string `pulumi:"timeCreated"`
	// The details required to establish a TLS enabled connection.
	TlsConfigs []GetTargetDatabasePeerTargetDatabaseTlsConfig `pulumi:"tlsConfigs"`
}

func LookupTargetDatabasePeerTargetDatabaseOutput(ctx *pulumi.Context, args LookupTargetDatabasePeerTargetDatabaseOutputArgs, opts ...pulumi.InvokeOption) LookupTargetDatabasePeerTargetDatabaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTargetDatabasePeerTargetDatabaseResult, error) {
			args := v.(LookupTargetDatabasePeerTargetDatabaseArgs)
			r, err := LookupTargetDatabasePeerTargetDatabase(ctx, &args, opts...)
			var s LookupTargetDatabasePeerTargetDatabaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTargetDatabasePeerTargetDatabaseResultOutput)
}

// A collection of arguments for invoking getTargetDatabasePeerTargetDatabase.
type LookupTargetDatabasePeerTargetDatabaseOutputArgs struct {
	// The unique id of the peer target database.
	PeerTargetDatabaseId pulumi.StringInput `pulumi:"peerTargetDatabaseId"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId pulumi.StringInput `pulumi:"targetDatabaseId"`
}

func (LookupTargetDatabasePeerTargetDatabaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetDatabasePeerTargetDatabaseArgs)(nil)).Elem()
}

// A collection of values returned by getTargetDatabasePeerTargetDatabase.
type LookupTargetDatabasePeerTargetDatabaseResultOutput struct{ *pulumi.OutputState }

func (LookupTargetDatabasePeerTargetDatabaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTargetDatabasePeerTargetDatabaseResult)(nil)).Elem()
}

func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) ToLookupTargetDatabasePeerTargetDatabaseResultOutput() LookupTargetDatabasePeerTargetDatabaseResultOutput {
	return o
}

func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) ToLookupTargetDatabasePeerTargetDatabaseResultOutputWithContext(ctx context.Context) LookupTargetDatabasePeerTargetDatabaseResultOutput {
	return o
}

// Details of the database for the registration in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) DatabaseDetails() GetTargetDatabasePeerTargetDatabaseDatabaseDetailArrayOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) []GetTargetDatabasePeerTargetDatabaseDatabaseDetail {
		return v.DatabaseDetails
	}).(GetTargetDatabasePeerTargetDatabaseDatabaseDetailArrayOutput)
}

// Unique name of the database associated to the peer target database.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) DatabaseUniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.DatabaseUniqueName }).(pulumi.StringOutput)
}

// The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) DataguardAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.DataguardAssociationId }).(pulumi.StringOutput)
}

// The description of the peer target database in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.Description }).(pulumi.StringOutput)
}

// The display name of the peer target database in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The secondary key assigned for the peer target database in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) int { return v.Key }).(pulumi.IntOutput)
}

// Details about the current state of the peer target database in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) PeerTargetDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.PeerTargetDatabaseId }).(pulumi.StringOutput)
}

// Role of the database associated to the peer target database.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.Role }).(pulumi.StringOutput)
}

// The current state of the peer target database in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) TargetDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.TargetDatabaseId }).(pulumi.StringOutput)
}

// The date and time of the peer target database registration in Data Safe.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The details required to establish a TLS enabled connection.
func (o LookupTargetDatabasePeerTargetDatabaseResultOutput) TlsConfigs() GetTargetDatabasePeerTargetDatabaseTlsConfigArrayOutput {
	return o.ApplyT(func(v LookupTargetDatabasePeerTargetDatabaseResult) []GetTargetDatabasePeerTargetDatabaseTlsConfig {
		return v.TlsConfigs
	}).(GetTargetDatabasePeerTargetDatabaseTlsConfigArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTargetDatabasePeerTargetDatabaseResultOutput{})
}
