// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Target Databases in Oracle Cloud Infrastructure Data Safe service.
//
// Returns the list of registered target databases in Data Safe.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetTargetDatabases(ctx, &datasafe.GetTargetDatabasesArgs{
//				CompartmentId:          compartmentId,
//				AccessLevel:            pulumi.StringRef(targetDatabaseAccessLevel),
//				AssociatedResourceId:   pulumi.StringRef(testAssociatedResource.Id),
//				CompartmentIdInSubtree: pulumi.BoolRef(targetDatabaseCompartmentIdInSubtree),
//				DatabaseType:           pulumi.StringRef(targetDatabaseDatabaseType),
//				DisplayName:            pulumi.StringRef(targetDatabaseDisplayName),
//				InfrastructureType:     pulumi.StringRef(targetDatabaseInfrastructureType),
//				State:                  pulumi.StringRef(targetDatabaseState),
//				TargetDatabaseId:       pulumi.StringRef(testTargetDatabase.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTargetDatabases(ctx *pulumi.Context, args *GetTargetDatabasesArgs, opts ...pulumi.InvokeOption) (*GetTargetDatabasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTargetDatabasesResult
	err := ctx.Invoke("oci:DataSafe/getTargetDatabases:getTargetDatabases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTargetDatabases.
type GetTargetDatabasesArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return the target databases that are associated to the resource id passed in as a parameter value.
	AssociatedResourceId *string `pulumi:"associatedResourceId"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool `pulumi:"compartmentIdInSubtree"`
	// A filter to return only target databases that match the specified database type.
	DatabaseType *string `pulumi:"databaseType"`
	// A filter to return only resources that match the specified display name.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetTargetDatabasesFilter `pulumi:"filters"`
	// A filter to return only target databases that match the specified infrastructure type.
	InfrastructureType *string `pulumi:"infrastructureType"`
	// A filter to return only target databases that match the specified lifecycle state.
	State *string `pulumi:"state"`
	// A filter to return the target database that matches the specified OCID.
	TargetDatabaseId *string `pulumi:"targetDatabaseId"`
}

// A collection of values returned by getTargetDatabases.
type GetTargetDatabasesResult struct {
	AccessLevel          *string `pulumi:"accessLevel"`
	AssociatedResourceId *string `pulumi:"associatedResourceId"`
	// The OCID of the compartment which contains the Data Safe target database.
	CompartmentId          string `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool  `pulumi:"compartmentIdInSubtree"`
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// The display name of the peer target database in Data Safe.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetTargetDatabasesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The infrastructure type the database is running on.
	InfrastructureType *string `pulumi:"infrastructureType"`
	// The current state of the target database in Data Safe.
	State            *string `pulumi:"state"`
	TargetDatabaseId *string `pulumi:"targetDatabaseId"`
	// The list of target_databases.
	TargetDatabases []GetTargetDatabasesTargetDatabase `pulumi:"targetDatabases"`
}

func GetTargetDatabasesOutput(ctx *pulumi.Context, args GetTargetDatabasesOutputArgs, opts ...pulumi.InvokeOption) GetTargetDatabasesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTargetDatabasesResultOutput, error) {
			args := v.(GetTargetDatabasesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getTargetDatabases:getTargetDatabases", args, GetTargetDatabasesResultOutput{}, options).(GetTargetDatabasesResultOutput), nil
		}).(GetTargetDatabasesResultOutput)
}

// A collection of arguments for invoking getTargetDatabases.
type GetTargetDatabasesOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return the target databases that are associated to the resource id passed in as a parameter value.
	AssociatedResourceId pulumi.StringPtrInput `pulumi:"associatedResourceId"`
	// A filter to return only resources that match the specified compartment OCID.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"compartmentIdInSubtree"`
	// A filter to return only target databases that match the specified database type.
	DatabaseType pulumi.StringPtrInput `pulumi:"databaseType"`
	// A filter to return only resources that match the specified display name.
	DisplayName pulumi.StringPtrInput              `pulumi:"displayName"`
	Filters     GetTargetDatabasesFilterArrayInput `pulumi:"filters"`
	// A filter to return only target databases that match the specified infrastructure type.
	InfrastructureType pulumi.StringPtrInput `pulumi:"infrastructureType"`
	// A filter to return only target databases that match the specified lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter to return the target database that matches the specified OCID.
	TargetDatabaseId pulumi.StringPtrInput `pulumi:"targetDatabaseId"`
}

func (GetTargetDatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetDatabasesArgs)(nil)).Elem()
}

// A collection of values returned by getTargetDatabases.
type GetTargetDatabasesResultOutput struct{ *pulumi.OutputState }

func (GetTargetDatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetDatabasesResult)(nil)).Elem()
}

func (o GetTargetDatabasesResultOutput) ToGetTargetDatabasesResultOutput() GetTargetDatabasesResultOutput {
	return o
}

func (o GetTargetDatabasesResultOutput) ToGetTargetDatabasesResultOutputWithContext(ctx context.Context) GetTargetDatabasesResultOutput {
	return o
}

func (o GetTargetDatabasesResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetTargetDatabasesResultOutput) AssociatedResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.AssociatedResourceId }).(pulumi.StringPtrOutput)
}

// The OCID of the compartment which contains the Data Safe target database.
func (o GetTargetDatabasesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetTargetDatabasesResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// The database type.
func (o GetTargetDatabasesResultOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// The display name of the peer target database in Data Safe.
func (o GetTargetDatabasesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetTargetDatabasesResultOutput) Filters() GetTargetDatabasesFilterArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) []GetTargetDatabasesFilter { return v.Filters }).(GetTargetDatabasesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTargetDatabasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The infrastructure type the database is running on.
func (o GetTargetDatabasesResultOutput) InfrastructureType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.InfrastructureType }).(pulumi.StringPtrOutput)
}

// The current state of the target database in Data Safe.
func (o GetTargetDatabasesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o GetTargetDatabasesResultOutput) TargetDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) *string { return v.TargetDatabaseId }).(pulumi.StringPtrOutput)
}

// The list of target_databases.
func (o GetTargetDatabasesResultOutput) TargetDatabases() GetTargetDatabasesTargetDatabaseArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesResult) []GetTargetDatabasesTargetDatabase { return v.TargetDatabases }).(GetTargetDatabasesTargetDatabaseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTargetDatabasesResultOutput{})
}
