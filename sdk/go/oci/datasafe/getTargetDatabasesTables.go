// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Target Databases Tables in Oracle Cloud Infrastructure Data Safe service.
//
// Returns a list of table metadata objects.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetTargetDatabasesTables(ctx, &datasafe.GetTargetDatabasesTablesArgs{
//				TargetDatabaseId:   testTargetDatabase.Id,
//				SchemaNames:        targetDatabasesTableSchemaName,
//				SchemaNameContains: pulumi.StringRef(targetDatabasesTableSchemaNameContains),
//				TableNames:         testTable.Name,
//				TableNameContains:  pulumi.StringRef(targetDatabasesTableTableNameContains),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTargetDatabasesTables(ctx *pulumi.Context, args *GetTargetDatabasesTablesArgs, opts ...pulumi.InvokeOption) (*GetTargetDatabasesTablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTargetDatabasesTablesResult
	err := ctx.Invoke("oci:DataSafe/getTargetDatabasesTables:getTargetDatabasesTables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTargetDatabasesTables.
type GetTargetDatabasesTablesArgs struct {
	Filters []GetTargetDatabasesTablesFilter `pulumi:"filters"`
	// A filter to return only items if schema name contains a specific string.
	SchemaNameContains *string `pulumi:"schemaNameContains"`
	// A filter to return only items related to specific schema name.
	SchemaNames []string `pulumi:"schemaNames"`
	// A filter to return only items if table name contains a specific string.
	TableNameContains *string `pulumi:"tableNameContains"`
	// A filter to return only items related to specific table name.
	TableNames []string `pulumi:"tableNames"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId string `pulumi:"targetDatabaseId"`
}

// A collection of values returned by getTargetDatabasesTables.
type GetTargetDatabasesTablesResult struct {
	Filters []GetTargetDatabasesTablesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	SchemaNameContains *string `pulumi:"schemaNameContains"`
	// Name of the schema.
	SchemaNames       []string `pulumi:"schemaNames"`
	TableNameContains *string  `pulumi:"tableNameContains"`
	// Name of the table.
	TableNames []string `pulumi:"tableNames"`
	// The list of tables.
	Tables           []GetTargetDatabasesTablesTable `pulumi:"tables"`
	TargetDatabaseId string                          `pulumi:"targetDatabaseId"`
}

func GetTargetDatabasesTablesOutput(ctx *pulumi.Context, args GetTargetDatabasesTablesOutputArgs, opts ...pulumi.InvokeOption) GetTargetDatabasesTablesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTargetDatabasesTablesResultOutput, error) {
			args := v.(GetTargetDatabasesTablesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getTargetDatabasesTables:getTargetDatabasesTables", args, GetTargetDatabasesTablesResultOutput{}, options).(GetTargetDatabasesTablesResultOutput), nil
		}).(GetTargetDatabasesTablesResultOutput)
}

// A collection of arguments for invoking getTargetDatabasesTables.
type GetTargetDatabasesTablesOutputArgs struct {
	Filters GetTargetDatabasesTablesFilterArrayInput `pulumi:"filters"`
	// A filter to return only items if schema name contains a specific string.
	SchemaNameContains pulumi.StringPtrInput `pulumi:"schemaNameContains"`
	// A filter to return only items related to specific schema name.
	SchemaNames pulumi.StringArrayInput `pulumi:"schemaNames"`
	// A filter to return only items if table name contains a specific string.
	TableNameContains pulumi.StringPtrInput `pulumi:"tableNameContains"`
	// A filter to return only items related to specific table name.
	TableNames pulumi.StringArrayInput `pulumi:"tableNames"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId pulumi.StringInput `pulumi:"targetDatabaseId"`
}

func (GetTargetDatabasesTablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetDatabasesTablesArgs)(nil)).Elem()
}

// A collection of values returned by getTargetDatabasesTables.
type GetTargetDatabasesTablesResultOutput struct{ *pulumi.OutputState }

func (GetTargetDatabasesTablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTargetDatabasesTablesResult)(nil)).Elem()
}

func (o GetTargetDatabasesTablesResultOutput) ToGetTargetDatabasesTablesResultOutput() GetTargetDatabasesTablesResultOutput {
	return o
}

func (o GetTargetDatabasesTablesResultOutput) ToGetTargetDatabasesTablesResultOutputWithContext(ctx context.Context) GetTargetDatabasesTablesResultOutput {
	return o
}

func (o GetTargetDatabasesTablesResultOutput) Filters() GetTargetDatabasesTablesFilterArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) []GetTargetDatabasesTablesFilter { return v.Filters }).(GetTargetDatabasesTablesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTargetDatabasesTablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTargetDatabasesTablesResultOutput) SchemaNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) *string { return v.SchemaNameContains }).(pulumi.StringPtrOutput)
}

// Name of the schema.
func (o GetTargetDatabasesTablesResultOutput) SchemaNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) []string { return v.SchemaNames }).(pulumi.StringArrayOutput)
}

func (o GetTargetDatabasesTablesResultOutput) TableNameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) *string { return v.TableNameContains }).(pulumi.StringPtrOutput)
}

// Name of the table.
func (o GetTargetDatabasesTablesResultOutput) TableNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) []string { return v.TableNames }).(pulumi.StringArrayOutput)
}

// The list of tables.
func (o GetTargetDatabasesTablesResultOutput) Tables() GetTargetDatabasesTablesTableArrayOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) []GetTargetDatabasesTablesTable { return v.Tables }).(GetTargetDatabasesTablesTableArrayOutput)
}

func (o GetTargetDatabasesTablesResultOutput) TargetDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTargetDatabasesTablesResult) string { return v.TargetDatabaseId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTargetDatabasesTablesResultOutput{})
}
