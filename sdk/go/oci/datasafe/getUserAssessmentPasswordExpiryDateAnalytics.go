// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of User Assessment Password Expiry Date Analytics in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of count of the users with password expiry dates in next 30 days, between next 30-90 days, and beyond 90 days based on specified user assessment.
// It internally uses the aforementioned userAnalytics api.
//
// When you perform the ListPasswordExpiryDateAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
// parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
// permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
// root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
// compartmentId, then "Not Authorized" is returned.
//
// To use ListPasswordExpiryDateAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
// set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetUserAssessmentPasswordExpiryDateAnalytics(ctx, &datasafe.GetUserAssessmentPasswordExpiryDateAnalyticsArgs{
//				UserAssessmentId:           testUserAssessment.Id,
//				AccessLevel:                pulumi.StringRef(userAssessmentPasswordExpiryDateAnalyticAccessLevel),
//				CompartmentIdInSubtree:     pulumi.BoolRef(userAssessmentPasswordExpiryDateAnalyticCompartmentIdInSubtree),
//				TimePasswordExpiryLessThan: pulumi.StringRef(userAssessmentPasswordExpiryDateAnalyticTimePasswordExpiryLessThan),
//				UserCategory:               pulumi.StringRef(userAssessmentPasswordExpiryDateAnalyticUserCategory),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUserAssessmentPasswordExpiryDateAnalytics(ctx *pulumi.Context, args *GetUserAssessmentPasswordExpiryDateAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetUserAssessmentPasswordExpiryDateAnalyticsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserAssessmentPasswordExpiryDateAnalyticsResult
	err := ctx.Invoke("oci:DataSafe/getUserAssessmentPasswordExpiryDateAnalytics:getUserAssessmentPasswordExpiryDateAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserAssessmentPasswordExpiryDateAnalytics.
type GetUserAssessmentPasswordExpiryDateAnalyticsArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                                                `pulumi:"compartmentIdInSubtree"`
	Filters                []GetUserAssessmentPasswordExpiryDateAnalyticsFilter `pulumi:"filters"`
	// A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordExpiryLessThan *string `pulumi:"timePasswordExpiryLessThan"`
	// The OCID of the user assessment.
	UserAssessmentId string `pulumi:"userAssessmentId"`
	// A filter to return only items that match the specified user category.
	UserCategory *string `pulumi:"userCategory"`
}

// A collection of values returned by getUserAssessmentPasswordExpiryDateAnalytics.
type GetUserAssessmentPasswordExpiryDateAnalyticsResult struct {
	AccessLevel            *string                                              `pulumi:"accessLevel"`
	CompartmentIdInSubtree *bool                                                `pulumi:"compartmentIdInSubtree"`
	Filters                []GetUserAssessmentPasswordExpiryDateAnalyticsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                         string  `pulumi:"id"`
	TimePasswordExpiryLessThan *string `pulumi:"timePasswordExpiryLessThan"`
	// The list of user_aggregations.
	UserAggregations []GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation `pulumi:"userAggregations"`
	UserAssessmentId string                                                        `pulumi:"userAssessmentId"`
	UserCategory     *string                                                       `pulumi:"userCategory"`
}

func GetUserAssessmentPasswordExpiryDateAnalyticsOutput(ctx *pulumi.Context, args GetUserAssessmentPasswordExpiryDateAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput, error) {
			args := v.(GetUserAssessmentPasswordExpiryDateAnalyticsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getUserAssessmentPasswordExpiryDateAnalytics:getUserAssessmentPasswordExpiryDateAnalytics", args, GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput{}, options).(GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput), nil
		}).(GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput)
}

// A collection of arguments for invoking getUserAssessmentPasswordExpiryDateAnalytics.
type GetUserAssessmentPasswordExpiryDateAnalyticsOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                                          `pulumi:"compartmentIdInSubtree"`
	Filters                GetUserAssessmentPasswordExpiryDateAnalyticsFilterArrayInput `pulumi:"filters"`
	// A filter to return users whose password expiry date in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordExpiryLessThan pulumi.StringPtrInput `pulumi:"timePasswordExpiryLessThan"`
	// The OCID of the user assessment.
	UserAssessmentId pulumi.StringInput `pulumi:"userAssessmentId"`
	// A filter to return only items that match the specified user category.
	UserCategory pulumi.StringPtrInput `pulumi:"userCategory"`
}

func (GetUserAssessmentPasswordExpiryDateAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAssessmentPasswordExpiryDateAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getUserAssessmentPasswordExpiryDateAnalytics.
type GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAssessmentPasswordExpiryDateAnalyticsResult)(nil)).Elem()
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) ToGetUserAssessmentPasswordExpiryDateAnalyticsResultOutput() GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput {
	return o
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) ToGetUserAssessmentPasswordExpiryDateAnalyticsResultOutputWithContext(ctx context.Context) GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput {
	return o
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) Filters() GetUserAssessmentPasswordExpiryDateAnalyticsFilterArrayOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) []GetUserAssessmentPasswordExpiryDateAnalyticsFilter {
		return v.Filters
	}).(GetUserAssessmentPasswordExpiryDateAnalyticsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) TimePasswordExpiryLessThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) *string {
		return v.TimePasswordExpiryLessThan
	}).(pulumi.StringPtrOutput)
}

// The list of user_aggregations.
func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) UserAggregations() GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationArrayOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) []GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregation {
		return v.UserAggregations
	}).(GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationArrayOutput)
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) UserAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) string { return v.UserAssessmentId }).(pulumi.StringOutput)
}

func (o GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput) UserCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentPasswordExpiryDateAnalyticsResult) *string { return v.UserCategory }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserAssessmentPasswordExpiryDateAnalyticsResultOutput{})
}
