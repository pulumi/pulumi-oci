// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of User Assessment Users in Oracle Cloud Infrastructure Data Safe service.
//
// Gets a list of users of the specified user assessment. The result contains the database user details for each user, such
// as user type, account status, last login time, user creation time, authentication type, user profile, and the date and time
// of the latest password change. It also contains the user category derived from these user details as well as privileges
// granted to each user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.GetUserAssessmentUsers(ctx, &datasafe.GetUserAssessmentUsersArgs{
//				UserAssessmentId:                  testUserAssessment.Id,
//				AccessLevel:                       pulumi.StringRef(userAssessmentUserAccessLevel),
//				AccountStatus:                     pulumi.StringRef(userAssessmentUserAccountStatus),
//				AreAllSchemasAccessible:           pulumi.BoolRef(userAssessmentUserAreAllSchemasAccessible),
//				AuthenticationType:                pulumi.StringRef(userAssessmentUserAuthenticationType),
//				CompartmentIdInSubtree:            pulumi.BoolRef(userAssessmentUserCompartmentIdInSubtree),
//				SchemaLists:                       userAssessmentUserSchemaList,
//				TargetId:                          pulumi.StringRef(testTarget.Id),
//				TimeLastLoginGreaterThanOrEqualTo: pulumi.StringRef(userAssessmentUserTimeLastLoginGreaterThanOrEqualTo),
//				TimeLastLoginLessThan:             pulumi.StringRef(userAssessmentUserTimeLastLoginLessThan),
//				TimePasswordLastChangedGreaterThanOrEqualTo: pulumi.StringRef(userAssessmentUserTimePasswordLastChangedGreaterThanOrEqualTo),
//				TimePasswordLastChangedLessThan:             pulumi.StringRef(userAssessmentUserTimePasswordLastChangedLessThan),
//				TimeUserCreatedGreaterThanOrEqualTo:         pulumi.StringRef(userAssessmentUserTimeUserCreatedGreaterThanOrEqualTo),
//				TimeUserCreatedLessThan:                     pulumi.StringRef(userAssessmentUserTimeUserCreatedLessThan),
//				UserCategory:                                pulumi.StringRef(userAssessmentUserUserCategory),
//				UserKey:                                     pulumi.StringRef(userAssessmentUserUserKey),
//				UserName:                                    pulumi.StringRef(testUser.Name),
//				UserProfile:                                 pulumi.StringRef(userAssessmentUserUserProfile),
//				UserRole:                                    pulumi.StringRef(userAssessmentUserUserRole),
//				UserType:                                    pulumi.StringRef(userAssessmentUserUserType),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUserAssessmentUsers(ctx *pulumi.Context, args *GetUserAssessmentUsersArgs, opts ...pulumi.InvokeOption) (*GetUserAssessmentUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserAssessmentUsersResult
	err := ctx.Invoke("oci:DataSafe/getUserAssessmentUsers:getUserAssessmentUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserAssessmentUsers.
type GetUserAssessmentUsersArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel *string `pulumi:"accessLevel"`
	// A filter to return only items that match the specified account status.
	AccountStatus *string `pulumi:"accountStatus"`
	// A filter to return only items that match the criteria that all schemas can be accessed by a user.
	AreAllSchemasAccessible *bool `pulumi:"areAllSchemasAccessible"`
	// A filter to return only items that match the specified authentication type.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree *bool                          `pulumi:"compartmentIdInSubtree"`
	Filters                []GetUserAssessmentUsersFilter `pulumi:"filters"`
	// A filter to return items that contain the specified schema list.
	SchemaLists []string `pulumi:"schemaLists"`
	// A filter to return only items related to a specific target OCID.
	TargetId *string `pulumi:"targetId"`
	// A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimeLastLoginGreaterThanOrEqualTo *string `pulumi:"timeLastLoginGreaterThanOrEqualTo"`
	// A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeLastLoginLessThan *string `pulumi:"timeLastLoginLessThan"`
	// A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordLastChangedGreaterThanOrEqualTo *string `pulumi:"timePasswordLastChangedGreaterThanOrEqualTo"`
	// A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordLastChangedLessThan *string `pulumi:"timePasswordLastChangedLessThan"`
	// A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeUserCreatedGreaterThanOrEqualTo *string `pulumi:"timeUserCreatedGreaterThanOrEqualTo"`
	// A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeUserCreatedLessThan *string `pulumi:"timeUserCreatedLessThan"`
	// The OCID of the user assessment.
	UserAssessmentId string `pulumi:"userAssessmentId"`
	// A filter to return only items that match the specified user category.
	UserCategory *string `pulumi:"userCategory"`
	// A filter to return only items that match the specified user key.
	UserKey *string `pulumi:"userKey"`
	// A filter to return only items that match the specified user name.
	UserName *string `pulumi:"userName"`
	// A filter to return only items that match the specified user profile.
	UserProfile *string `pulumi:"userProfile"`
	// A filter to return only items that match the specified user role.
	UserRole *string `pulumi:"userRole"`
	// A filter to return only items that match the specified user type. The possible values can be
	// * ADMIN_PRIVILEGED
	// * APPLICATION
	// * PRIVILEGED
	// * SCHEMA
	// * NON_PRIVILEGED as specified by '#/definitions/userTypes'.
	UserType *string `pulumi:"userType"`
}

// A collection of values returned by getUserAssessmentUsers.
type GetUserAssessmentUsersResult struct {
	AccessLevel *string `pulumi:"accessLevel"`
	// The status of the user account.
	AccountStatus *string `pulumi:"accountStatus"`
	// Indicates whether the user has access to all the schemas.
	AreAllSchemasAccessible *bool `pulumi:"areAllSchemasAccessible"`
	// The user authentication method.
	AuthenticationType     *string                        `pulumi:"authenticationType"`
	CompartmentIdInSubtree *bool                          `pulumi:"compartmentIdInSubtree"`
	Filters                []GetUserAssessmentUsersFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of database schemas current user can access.
	SchemaLists []string `pulumi:"schemaLists"`
	// The OCID of the target database.
	TargetId                                    *string `pulumi:"targetId"`
	TimeLastLoginGreaterThanOrEqualTo           *string `pulumi:"timeLastLoginGreaterThanOrEqualTo"`
	TimeLastLoginLessThan                       *string `pulumi:"timeLastLoginLessThan"`
	TimePasswordLastChangedGreaterThanOrEqualTo *string `pulumi:"timePasswordLastChangedGreaterThanOrEqualTo"`
	TimePasswordLastChangedLessThan             *string `pulumi:"timePasswordLastChangedLessThan"`
	TimeUserCreatedGreaterThanOrEqualTo         *string `pulumi:"timeUserCreatedGreaterThanOrEqualTo"`
	TimeUserCreatedLessThan                     *string `pulumi:"timeUserCreatedLessThan"`
	UserAssessmentId                            string  `pulumi:"userAssessmentId"`
	// The user category based on the privileges and other details of the user.
	UserCategory *string `pulumi:"userCategory"`
	UserKey      *string `pulumi:"userKey"`
	// The database user name.
	UserName *string `pulumi:"userName"`
	// The user profile name.
	UserProfile *string `pulumi:"userProfile"`
	UserRole    *string `pulumi:"userRole"`
	UserType    *string `pulumi:"userType"`
	// The list of users.
	Users []GetUserAssessmentUsersUser `pulumi:"users"`
}

func GetUserAssessmentUsersOutput(ctx *pulumi.Context, args GetUserAssessmentUsersOutputArgs, opts ...pulumi.InvokeOption) GetUserAssessmentUsersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetUserAssessmentUsersResultOutput, error) {
			args := v.(GetUserAssessmentUsersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataSafe/getUserAssessmentUsers:getUserAssessmentUsers", args, GetUserAssessmentUsersResultOutput{}, options).(GetUserAssessmentUsersResultOutput), nil
		}).(GetUserAssessmentUsersResultOutput)
}

// A collection of arguments for invoking getUserAssessmentUsers.
type GetUserAssessmentUsersOutputArgs struct {
	// Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
	AccessLevel pulumi.StringPtrInput `pulumi:"accessLevel"`
	// A filter to return only items that match the specified account status.
	AccountStatus pulumi.StringPtrInput `pulumi:"accountStatus"`
	// A filter to return only items that match the criteria that all schemas can be accessed by a user.
	AreAllSchemasAccessible pulumi.BoolPtrInput `pulumi:"areAllSchemasAccessible"`
	// A filter to return only items that match the specified authentication type.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
	CompartmentIdInSubtree pulumi.BoolPtrInput                    `pulumi:"compartmentIdInSubtree"`
	Filters                GetUserAssessmentUsersFilterArrayInput `pulumi:"filters"`
	// A filter to return items that contain the specified schema list.
	SchemaLists pulumi.StringArrayInput `pulumi:"schemaLists"`
	// A filter to return only items related to a specific target OCID.
	TargetId pulumi.StringPtrInput `pulumi:"targetId"`
	// A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimeLastLoginGreaterThanOrEqualTo pulumi.StringPtrInput `pulumi:"timeLastLoginGreaterThanOrEqualTo"`
	// A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeLastLoginLessThan pulumi.StringPtrInput `pulumi:"timeLastLoginLessThan"`
	// A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordLastChangedGreaterThanOrEqualTo pulumi.StringPtrInput `pulumi:"timePasswordLastChangedGreaterThanOrEqualTo"`
	// A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	//
	// **Example:** 2016-12-19T16:39:57.600Z
	TimePasswordLastChangedLessThan pulumi.StringPtrInput `pulumi:"timePasswordLastChangedLessThan"`
	// A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeUserCreatedGreaterThanOrEqualTo pulumi.StringPtrInput `pulumi:"timeUserCreatedGreaterThanOrEqualTo"`
	// A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
	TimeUserCreatedLessThan pulumi.StringPtrInput `pulumi:"timeUserCreatedLessThan"`
	// The OCID of the user assessment.
	UserAssessmentId pulumi.StringInput `pulumi:"userAssessmentId"`
	// A filter to return only items that match the specified user category.
	UserCategory pulumi.StringPtrInput `pulumi:"userCategory"`
	// A filter to return only items that match the specified user key.
	UserKey pulumi.StringPtrInput `pulumi:"userKey"`
	// A filter to return only items that match the specified user name.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
	// A filter to return only items that match the specified user profile.
	UserProfile pulumi.StringPtrInput `pulumi:"userProfile"`
	// A filter to return only items that match the specified user role.
	UserRole pulumi.StringPtrInput `pulumi:"userRole"`
	// A filter to return only items that match the specified user type. The possible values can be
	// * ADMIN_PRIVILEGED
	// * APPLICATION
	// * PRIVILEGED
	// * SCHEMA
	// * NON_PRIVILEGED as specified by '#/definitions/userTypes'.
	UserType pulumi.StringPtrInput `pulumi:"userType"`
}

func (GetUserAssessmentUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAssessmentUsersArgs)(nil)).Elem()
}

// A collection of values returned by getUserAssessmentUsers.
type GetUserAssessmentUsersResultOutput struct{ *pulumi.OutputState }

func (GetUserAssessmentUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAssessmentUsersResult)(nil)).Elem()
}

func (o GetUserAssessmentUsersResultOutput) ToGetUserAssessmentUsersResultOutput() GetUserAssessmentUsersResultOutput {
	return o
}

func (o GetUserAssessmentUsersResultOutput) ToGetUserAssessmentUsersResultOutputWithContext(ctx context.Context) GetUserAssessmentUsersResultOutput {
	return o
}

func (o GetUserAssessmentUsersResultOutput) AccessLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.AccessLevel }).(pulumi.StringPtrOutput)
}

// The status of the user account.
func (o GetUserAssessmentUsersResultOutput) AccountStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.AccountStatus }).(pulumi.StringPtrOutput)
}

// Indicates whether the user has access to all the schemas.
func (o GetUserAssessmentUsersResultOutput) AreAllSchemasAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *bool { return v.AreAllSchemasAccessible }).(pulumi.BoolPtrOutput)
}

// The user authentication method.
func (o GetUserAssessmentUsersResultOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) Filters() GetUserAssessmentUsersFilterArrayOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) []GetUserAssessmentUsersFilter { return v.Filters }).(GetUserAssessmentUsersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserAssessmentUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of database schemas current user can access.
func (o GetUserAssessmentUsersResultOutput) SchemaLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) []string { return v.SchemaLists }).(pulumi.StringArrayOutput)
}

// The OCID of the target database.
func (o GetUserAssessmentUsersResultOutput) TargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TargetId }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimeLastLoginGreaterThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimeLastLoginGreaterThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimeLastLoginLessThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimeLastLoginLessThan }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimePasswordLastChangedGreaterThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimePasswordLastChangedGreaterThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimePasswordLastChangedLessThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimePasswordLastChangedLessThan }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimeUserCreatedGreaterThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimeUserCreatedGreaterThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) TimeUserCreatedLessThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.TimeUserCreatedLessThan }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) UserAssessmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) string { return v.UserAssessmentId }).(pulumi.StringOutput)
}

// The user category based on the privileges and other details of the user.
func (o GetUserAssessmentUsersResultOutput) UserCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserCategory }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) UserKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserKey }).(pulumi.StringPtrOutput)
}

// The database user name.
func (o GetUserAssessmentUsersResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// The user profile name.
func (o GetUserAssessmentUsersResultOutput) UserProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserProfile }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) UserRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserRole }).(pulumi.StringPtrOutput)
}

func (o GetUserAssessmentUsersResultOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) *string { return v.UserType }).(pulumi.StringPtrOutput)
}

// The list of users.
func (o GetUserAssessmentUsersResultOutput) Users() GetUserAssessmentUsersUserArrayOutput {
	return o.ApplyT(func(v GetUserAssessmentUsersResult) []GetUserAssessmentUsersUser { return v.Users }).(GetUserAssessmentUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserAssessmentUsersResultOutput{})
}
