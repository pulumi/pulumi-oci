// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MaskData struct {
	pulumi.CustomResourceState

	MaskingPolicyId pulumi.StringOutput `pulumi:"maskingPolicyId"`
	TargetId        pulumi.StringOutput `pulumi:"targetId"`
}

// NewMaskData registers a new resource with the given unique name, arguments, and options.
func NewMaskData(ctx *pulumi.Context,
	name string, args *MaskDataArgs, opts ...pulumi.ResourceOption) (*MaskData, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaskingPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'MaskingPolicyId'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	var resource MaskData
	err := ctx.RegisterResource("oci:DataSafe/maskData:MaskData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaskData gets an existing MaskData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaskData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaskDataState, opts ...pulumi.ResourceOption) (*MaskData, error) {
	var resource MaskData
	err := ctx.ReadResource("oci:DataSafe/maskData:MaskData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaskData resources.
type maskDataState struct {
	MaskingPolicyId *string `pulumi:"maskingPolicyId"`
	TargetId        *string `pulumi:"targetId"`
}

type MaskDataState struct {
	MaskingPolicyId pulumi.StringPtrInput
	TargetId        pulumi.StringPtrInput
}

func (MaskDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*maskDataState)(nil)).Elem()
}

type maskDataArgs struct {
	MaskingPolicyId string `pulumi:"maskingPolicyId"`
	TargetId        string `pulumi:"targetId"`
}

// The set of arguments for constructing a MaskData resource.
type MaskDataArgs struct {
	MaskingPolicyId pulumi.StringInput
	TargetId        pulumi.StringInput
}

func (MaskDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maskDataArgs)(nil)).Elem()
}

type MaskDataInput interface {
	pulumi.Input

	ToMaskDataOutput() MaskDataOutput
	ToMaskDataOutputWithContext(ctx context.Context) MaskDataOutput
}

func (*MaskData) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskData)(nil)).Elem()
}

func (i *MaskData) ToMaskDataOutput() MaskDataOutput {
	return i.ToMaskDataOutputWithContext(context.Background())
}

func (i *MaskData) ToMaskDataOutputWithContext(ctx context.Context) MaskDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskDataOutput)
}

// MaskDataArrayInput is an input type that accepts MaskDataArray and MaskDataArrayOutput values.
// You can construct a concrete instance of `MaskDataArrayInput` via:
//
//          MaskDataArray{ MaskDataArgs{...} }
type MaskDataArrayInput interface {
	pulumi.Input

	ToMaskDataArrayOutput() MaskDataArrayOutput
	ToMaskDataArrayOutputWithContext(context.Context) MaskDataArrayOutput
}

type MaskDataArray []MaskDataInput

func (MaskDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskData)(nil)).Elem()
}

func (i MaskDataArray) ToMaskDataArrayOutput() MaskDataArrayOutput {
	return i.ToMaskDataArrayOutputWithContext(context.Background())
}

func (i MaskDataArray) ToMaskDataArrayOutputWithContext(ctx context.Context) MaskDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskDataArrayOutput)
}

// MaskDataMapInput is an input type that accepts MaskDataMap and MaskDataMapOutput values.
// You can construct a concrete instance of `MaskDataMapInput` via:
//
//          MaskDataMap{ "key": MaskDataArgs{...} }
type MaskDataMapInput interface {
	pulumi.Input

	ToMaskDataMapOutput() MaskDataMapOutput
	ToMaskDataMapOutputWithContext(context.Context) MaskDataMapOutput
}

type MaskDataMap map[string]MaskDataInput

func (MaskDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskData)(nil)).Elem()
}

func (i MaskDataMap) ToMaskDataMapOutput() MaskDataMapOutput {
	return i.ToMaskDataMapOutputWithContext(context.Background())
}

func (i MaskDataMap) ToMaskDataMapOutputWithContext(ctx context.Context) MaskDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskDataMapOutput)
}

type MaskDataOutput struct{ *pulumi.OutputState }

func (MaskDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskData)(nil)).Elem()
}

func (o MaskDataOutput) ToMaskDataOutput() MaskDataOutput {
	return o
}

func (o MaskDataOutput) ToMaskDataOutputWithContext(ctx context.Context) MaskDataOutput {
	return o
}

type MaskDataArrayOutput struct{ *pulumi.OutputState }

func (MaskDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskData)(nil)).Elem()
}

func (o MaskDataArrayOutput) ToMaskDataArrayOutput() MaskDataArrayOutput {
	return o
}

func (o MaskDataArrayOutput) ToMaskDataArrayOutputWithContext(ctx context.Context) MaskDataArrayOutput {
	return o
}

func (o MaskDataArrayOutput) Index(i pulumi.IntInput) MaskDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaskData {
		return vs[0].([]*MaskData)[vs[1].(int)]
	}).(MaskDataOutput)
}

type MaskDataMapOutput struct{ *pulumi.OutputState }

func (MaskDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskData)(nil)).Elem()
}

func (o MaskDataMapOutput) ToMaskDataMapOutput() MaskDataMapOutput {
	return o
}

func (o MaskDataMapOutput) ToMaskDataMapOutputWithContext(ctx context.Context) MaskDataMapOutput {
	return o
}

func (o MaskDataMapOutput) MapIndex(k pulumi.StringInput) MaskDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaskData {
		return vs[0].(map[string]*MaskData)[vs[1].(string)]
	}).(MaskDataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaskDataInput)(nil)).Elem(), &MaskData{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskDataArrayInput)(nil)).Elem(), MaskDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskDataMapInput)(nil)).Elem(), MaskDataMap{})
	pulumi.RegisterOutputType(MaskDataOutput{})
	pulumi.RegisterOutputType(MaskDataArrayOutput{})
	pulumi.RegisterOutputType(MaskDataMapOutput{})
}
