// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Masking Policy resource in Oracle Cloud Infrastructure Data Safe service.
//
// Creates a new masking policy and associates it with a sensitive data model or a target database.
//
// To use a sensitive data model as the source of masking columns, set the columnSource attribute to
// SENSITIVE_DATA_MODEL and provide the sensitiveDataModelId attribute. After creating a masking policy,
// you can use the AddMaskingColumnsFromSdm operation to automatically add all the columns from
// the associated sensitive data model. In this case, the target database associated with the
// sensitive data model is used for column and masking format validations.
//
// You can also create a masking policy without using a sensitive data model. In this case,
// you need to associate your masking policy with a target database by setting the columnSource
// attribute to TARGET and providing the targetId attribute. The specified target database
// is used for column and masking format validations.
//
// After creating a masking policy, you can use the CreateMaskingColumn or PatchMaskingColumns
// operation to manually add columns to the policy. You need to add the parent columns only,
// and it automatically adds the child columns (in referential relationship with the parent columns)
// from the associated sensitive data model or target database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.NewMaskingPolicy(ctx, "testMaskingPolicy", &DataSafe.MaskingPolicyArgs{
//				ColumnSources: datasafe.MaskingPolicyColumnSourceArray{
//					&datasafe.MaskingPolicyColumnSourceArgs{
//						ColumnSource:         pulumi.Any(_var.Masking_policy_column_source_column_source),
//						SensitiveDataModelId: pulumi.Any(oci_data_safe_sensitive_data_model.Test_sensitive_data_model.Id),
//						TargetId:             pulumi.Any(oci_cloud_guard_target.Test_target.Id),
//					},
//				},
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DefinedTags: pulumi.Map{
//					"Operations.CostCenter": pulumi.Any("42"),
//				},
//				Description: pulumi.Any(_var.Masking_policy_description),
//				DisplayName: pulumi.Any(_var.Masking_policy_display_name),
//				FreeformTags: pulumi.Map{
//					"Department": pulumi.Any("Finance"),
//				},
//				IsDropTempTablesEnabled: pulumi.Any(_var.Masking_policy_is_drop_temp_tables_enabled),
//				IsRedoLoggingEnabled:    pulumi.Any(_var.Masking_policy_is_redo_logging_enabled),
//				IsRefreshStatsEnabled:   pulumi.Any(_var.Masking_policy_is_refresh_stats_enabled),
//				ParallelDegree:          pulumi.Any(_var.Masking_policy_parallel_degree),
//				PostMaskingScript:       pulumi.Any(_var.Masking_policy_post_masking_script),
//				PreMaskingScript:        pulumi.Any(_var.Masking_policy_pre_masking_script),
//				Recompile:               pulumi.Any(_var.Masking_policy_recompile),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MaskingPolicies can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/maskingPolicy:MaskingPolicy test_masking_policy "id"
// ```
type MaskingPolicy struct {
	pulumi.CustomResourceState

	// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	AddMaskingColumnsFromSdmTrigger pulumi.IntPtrOutput `pulumi:"addMaskingColumnsFromSdmTrigger"`
	// (Updatable) The source of masking columns.
	ColumnSources MaskingPolicyColumnSourceArrayOutput `pulumi:"columnSources"`
	// (Updatable) The OCID of the compartment where the masking policy should be created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The description of the masking policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
	IsDropTempTablesEnabled pulumi.BoolOutput `pulumi:"isDropTempTablesEnabled"`
	// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
	IsRedoLoggingEnabled pulumi.BoolOutput `pulumi:"isRedoLoggingEnabled"`
	// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
	IsRefreshStatsEnabled pulumi.BoolOutput `pulumi:"isRefreshStatsEnabled"`
	// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
	ParallelDegree pulumi.StringOutput `pulumi:"parallelDegree"`
	// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
	PostMaskingScript pulumi.StringOutput `pulumi:"postMaskingScript"`
	// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
	PreMaskingScript pulumi.StringOutput `pulumi:"preMaskingScript"`
	// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
	Recompile pulumi.StringOutput `pulumi:"recompile"`
	// The current state of the masking policy.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMaskingPolicy registers a new resource with the given unique name, arguments, and options.
func NewMaskingPolicy(ctx *pulumi.Context,
	name string, args *MaskingPolicyArgs, opts ...pulumi.ResourceOption) (*MaskingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColumnSources == nil {
		return nil, errors.New("invalid value for required argument 'ColumnSources'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaskingPolicy
	err := ctx.RegisterResource("oci:DataSafe/maskingPolicy:MaskingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaskingPolicy gets an existing MaskingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaskingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaskingPolicyState, opts ...pulumi.ResourceOption) (*MaskingPolicy, error) {
	var resource MaskingPolicy
	err := ctx.ReadResource("oci:DataSafe/maskingPolicy:MaskingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaskingPolicy resources.
type maskingPolicyState struct {
	// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	AddMaskingColumnsFromSdmTrigger *int `pulumi:"addMaskingColumnsFromSdmTrigger"`
	// (Updatable) The source of masking columns.
	ColumnSources []MaskingPolicyColumnSource `pulumi:"columnSources"`
	// (Updatable) The OCID of the compartment where the masking policy should be created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description of the masking policy.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
	IsDropTempTablesEnabled *bool `pulumi:"isDropTempTablesEnabled"`
	// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
	IsRedoLoggingEnabled *bool `pulumi:"isRedoLoggingEnabled"`
	// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
	IsRefreshStatsEnabled *bool `pulumi:"isRefreshStatsEnabled"`
	// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
	ParallelDegree *string `pulumi:"parallelDegree"`
	// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
	PostMaskingScript *string `pulumi:"postMaskingScript"`
	// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
	PreMaskingScript *string `pulumi:"preMaskingScript"`
	// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
	Recompile *string `pulumi:"recompile"`
	// The current state of the masking policy.
	State *string `pulumi:"state"`
	// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MaskingPolicyState struct {
	// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	AddMaskingColumnsFromSdmTrigger pulumi.IntPtrInput
	// (Updatable) The source of masking columns.
	ColumnSources MaskingPolicyColumnSourceArrayInput
	// (Updatable) The OCID of the compartment where the masking policy should be created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description of the masking policy.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
	IsDropTempTablesEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
	IsRedoLoggingEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
	IsRefreshStatsEnabled pulumi.BoolPtrInput
	// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
	ParallelDegree pulumi.StringPtrInput
	// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
	PostMaskingScript pulumi.StringPtrInput
	// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
	PreMaskingScript pulumi.StringPtrInput
	// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
	Recompile pulumi.StringPtrInput
	// The current state of the masking policy.
	State pulumi.StringPtrInput
	// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeUpdated pulumi.StringPtrInput
}

func (MaskingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingPolicyState)(nil)).Elem()
}

type maskingPolicyArgs struct {
	// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	AddMaskingColumnsFromSdmTrigger *int `pulumi:"addMaskingColumnsFromSdmTrigger"`
	// (Updatable) The source of masking columns.
	ColumnSources []MaskingPolicyColumnSource `pulumi:"columnSources"`
	// (Updatable) The OCID of the compartment where the masking policy should be created.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description of the masking policy.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
	IsDropTempTablesEnabled *bool `pulumi:"isDropTempTablesEnabled"`
	// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
	IsRedoLoggingEnabled *bool `pulumi:"isRedoLoggingEnabled"`
	// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
	IsRefreshStatsEnabled *bool `pulumi:"isRefreshStatsEnabled"`
	// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
	ParallelDegree *string `pulumi:"parallelDegree"`
	// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
	PostMaskingScript *string `pulumi:"postMaskingScript"`
	// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
	PreMaskingScript *string `pulumi:"preMaskingScript"`
	// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
	Recompile *string `pulumi:"recompile"`
}

// The set of arguments for constructing a MaskingPolicy resource.
type MaskingPolicyArgs struct {
	// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	AddMaskingColumnsFromSdmTrigger pulumi.IntPtrInput
	// (Updatable) The source of masking columns.
	ColumnSources MaskingPolicyColumnSourceArrayInput
	// (Updatable) The OCID of the compartment where the masking policy should be created.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description of the masking policy.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
	IsDropTempTablesEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
	IsRedoLoggingEnabled pulumi.BoolPtrInput
	// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
	IsRefreshStatsEnabled pulumi.BoolPtrInput
	// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
	ParallelDegree pulumi.StringPtrInput
	// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
	PostMaskingScript pulumi.StringPtrInput
	// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
	PreMaskingScript pulumi.StringPtrInput
	// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
	Recompile pulumi.StringPtrInput
}

func (MaskingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingPolicyArgs)(nil)).Elem()
}

type MaskingPolicyInput interface {
	pulumi.Input

	ToMaskingPolicyOutput() MaskingPolicyOutput
	ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput
}

func (*MaskingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicy)(nil)).Elem()
}

func (i *MaskingPolicy) ToMaskingPolicyOutput() MaskingPolicyOutput {
	return i.ToMaskingPolicyOutputWithContext(context.Background())
}

func (i *MaskingPolicy) ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyOutput)
}

// MaskingPolicyArrayInput is an input type that accepts MaskingPolicyArray and MaskingPolicyArrayOutput values.
// You can construct a concrete instance of `MaskingPolicyArrayInput` via:
//
//	MaskingPolicyArray{ MaskingPolicyArgs{...} }
type MaskingPolicyArrayInput interface {
	pulumi.Input

	ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput
	ToMaskingPolicyArrayOutputWithContext(context.Context) MaskingPolicyArrayOutput
}

type MaskingPolicyArray []MaskingPolicyInput

func (MaskingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingPolicy)(nil)).Elem()
}

func (i MaskingPolicyArray) ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput {
	return i.ToMaskingPolicyArrayOutputWithContext(context.Background())
}

func (i MaskingPolicyArray) ToMaskingPolicyArrayOutputWithContext(ctx context.Context) MaskingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyArrayOutput)
}

// MaskingPolicyMapInput is an input type that accepts MaskingPolicyMap and MaskingPolicyMapOutput values.
// You can construct a concrete instance of `MaskingPolicyMapInput` via:
//
//	MaskingPolicyMap{ "key": MaskingPolicyArgs{...} }
type MaskingPolicyMapInput interface {
	pulumi.Input

	ToMaskingPolicyMapOutput() MaskingPolicyMapOutput
	ToMaskingPolicyMapOutputWithContext(context.Context) MaskingPolicyMapOutput
}

type MaskingPolicyMap map[string]MaskingPolicyInput

func (MaskingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingPolicy)(nil)).Elem()
}

func (i MaskingPolicyMap) ToMaskingPolicyMapOutput() MaskingPolicyMapOutput {
	return i.ToMaskingPolicyMapOutputWithContext(context.Background())
}

func (i MaskingPolicyMap) ToMaskingPolicyMapOutputWithContext(ctx context.Context) MaskingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingPolicyMapOutput)
}

type MaskingPolicyOutput struct{ *pulumi.OutputState }

func (MaskingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyOutput) ToMaskingPolicyOutput() MaskingPolicyOutput {
	return o
}

func (o MaskingPolicyOutput) ToMaskingPolicyOutputWithContext(ctx context.Context) MaskingPolicyOutput {
	return o
}

// (Updatable) An optional property when incremented triggers Add Masking Columns From Sdm. Could be set to any integer value.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o MaskingPolicyOutput) AddMaskingColumnsFromSdmTrigger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.IntPtrOutput { return v.AddMaskingColumnsFromSdmTrigger }).(pulumi.IntPtrOutput)
}

// (Updatable) The source of masking columns.
func (o MaskingPolicyOutput) ColumnSources() MaskingPolicyColumnSourceArrayOutput {
	return o.ApplyT(func(v *MaskingPolicy) MaskingPolicyColumnSourceArrayOutput { return v.ColumnSources }).(MaskingPolicyColumnSourceArrayOutput)
}

// (Updatable) The OCID of the compartment where the masking policy should be created.
func (o MaskingPolicyOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
func (o MaskingPolicyOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) The description of the masking policy.
func (o MaskingPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The display name of the masking policy. The name does not have to be unique, and it's changeable.
func (o MaskingPolicyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
func (o MaskingPolicyOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// (Updatable) Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
func (o MaskingPolicyOutput) IsDropTempTablesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.BoolOutput { return v.IsDropTempTablesEnabled }).(pulumi.BoolOutput)
}

// (Updatable) Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
func (o MaskingPolicyOutput) IsRedoLoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.BoolOutput { return v.IsRedoLoggingEnabled }).(pulumi.BoolOutput)
}

// (Updatable) Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
func (o MaskingPolicyOutput) IsRefreshStatsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.BoolOutput { return v.IsRefreshStatsEnabled }).(pulumi.BoolOutput)
}

// (Updatable) Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
func (o MaskingPolicyOutput) ParallelDegree() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.ParallelDegree }).(pulumi.StringOutput)
}

// (Updatable) A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
func (o MaskingPolicyOutput) PostMaskingScript() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.PostMaskingScript }).(pulumi.StringOutput)
}

// (Updatable) A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
func (o MaskingPolicyOutput) PreMaskingScript() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.PreMaskingScript }).(pulumi.StringOutput)
}

// (Updatable) Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
func (o MaskingPolicyOutput) Recompile() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.Recompile }).(pulumi.StringOutput)
}

// The current state of the masking policy.
func (o MaskingPolicyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o MaskingPolicyOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
func (o MaskingPolicyOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingPolicy) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type MaskingPolicyArrayOutput struct{ *pulumi.OutputState }

func (MaskingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyArrayOutput) ToMaskingPolicyArrayOutput() MaskingPolicyArrayOutput {
	return o
}

func (o MaskingPolicyArrayOutput) ToMaskingPolicyArrayOutputWithContext(ctx context.Context) MaskingPolicyArrayOutput {
	return o
}

func (o MaskingPolicyArrayOutput) Index(i pulumi.IntInput) MaskingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaskingPolicy {
		return vs[0].([]*MaskingPolicy)[vs[1].(int)]
	}).(MaskingPolicyOutput)
}

type MaskingPolicyMapOutput struct{ *pulumi.OutputState }

func (MaskingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingPolicy)(nil)).Elem()
}

func (o MaskingPolicyMapOutput) ToMaskingPolicyMapOutput() MaskingPolicyMapOutput {
	return o
}

func (o MaskingPolicyMapOutput) ToMaskingPolicyMapOutputWithContext(ctx context.Context) MaskingPolicyMapOutput {
	return o
}

func (o MaskingPolicyMapOutput) MapIndex(k pulumi.StringInput) MaskingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaskingPolicy {
		return vs[0].(map[string]*MaskingPolicy)[vs[1].(string)]
	}).(MaskingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyInput)(nil)).Elem(), &MaskingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyArrayInput)(nil)).Elem(), MaskingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingPolicyMapInput)(nil)).Elem(), MaskingPolicyMap{})
	pulumi.RegisterOutputType(MaskingPolicyOutput{})
	pulumi.RegisterOutputType(MaskingPolicyArrayOutput{})
	pulumi.RegisterOutputType(MaskingPolicyMapOutput{})
}
