// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides Masking Report Management resource in Oracle Cloud Infrastructure Data Safe service.
//
// Gets the details of the specified masking report.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.NewMaskingReportManagement(ctx, "test_masking_report_management", &datasafe.MaskingReportManagementArgs{
//				TargetId:        pulumi.Any(testTargetDatabase.Id),
//				MaskingPolicyId: pulumi.Any(testMaskingPolicy.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type MaskingReportManagement struct {
	pulumi.CustomResourceState

	// The OCID of the compartment that contains the masking report.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Indicates if the temporary tables created during the masking operation were dropped after masking.
	IsDropTempTablesEnabled pulumi.BoolOutput `pulumi:"isDropTempTablesEnabled"`
	// Indicates if redo logging was enabled during the masking operation.
	IsRedoLoggingEnabled pulumi.BoolOutput `pulumi:"isRedoLoggingEnabled"`
	// Indicates if statistics gathering was enabled during the masking operation.
	IsRefreshStatsEnabled pulumi.BoolOutput `pulumi:"isRefreshStatsEnabled"`
	// The OCID of the masking policy.
	MaskingPolicyId pulumi.StringOutput `pulumi:"maskingPolicyId"`
	// The OCID of the masking work request that resulted in this masking report.
	MaskingWorkRequestId pulumi.StringOutput `pulumi:"maskingWorkRequestId"`
	// Indicates if parallel execution was enabled during the masking operation.
	ParallelDegree pulumi.StringOutput `pulumi:"parallelDegree"`
	// Indicates how invalid objects were recompiled post the masking operation.
	Recompile pulumi.StringOutput `pulumi:"recompile"`
	// The current state of the masking report.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of the target database masked.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingFinished pulumi.StringOutput `pulumi:"timeMaskingFinished"`
	// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingStarted pulumi.StringOutput `pulumi:"timeMaskingStarted"`
	// The total number of masked columns.
	TotalMaskedColumns pulumi.StringOutput `pulumi:"totalMaskedColumns"`
	// The total number of unique objects (tables and editioning views) that contain the masked columns.
	TotalMaskedObjects pulumi.StringOutput `pulumi:"totalMaskedObjects"`
	// The total number of unique schemas that contain the masked columns.
	TotalMaskedSchemas pulumi.StringOutput `pulumi:"totalMaskedSchemas"`
	// The total number of unique sensitive types associated with the masked columns.
	TotalMaskedSensitiveTypes pulumi.StringOutput `pulumi:"totalMaskedSensitiveTypes"`
	// The total number of masked values.
	TotalMaskedValues pulumi.StringOutput `pulumi:"totalMaskedValues"`
}

// NewMaskingReportManagement registers a new resource with the given unique name, arguments, and options.
func NewMaskingReportManagement(ctx *pulumi.Context,
	name string, args *MaskingReportManagementArgs, opts ...pulumi.ResourceOption) (*MaskingReportManagement, error) {
	if args == nil {
		args = &MaskingReportManagementArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MaskingReportManagement
	err := ctx.RegisterResource("oci:DataSafe/maskingReportManagement:MaskingReportManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaskingReportManagement gets an existing MaskingReportManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaskingReportManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaskingReportManagementState, opts ...pulumi.ResourceOption) (*MaskingReportManagement, error) {
	var resource MaskingReportManagement
	err := ctx.ReadResource("oci:DataSafe/maskingReportManagement:MaskingReportManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaskingReportManagement resources.
type maskingReportManagementState struct {
	// The OCID of the compartment that contains the masking report.
	CompartmentId *string `pulumi:"compartmentId"`
	// Indicates if the temporary tables created during the masking operation were dropped after masking.
	IsDropTempTablesEnabled *bool `pulumi:"isDropTempTablesEnabled"`
	// Indicates if redo logging was enabled during the masking operation.
	IsRedoLoggingEnabled *bool `pulumi:"isRedoLoggingEnabled"`
	// Indicates if statistics gathering was enabled during the masking operation.
	IsRefreshStatsEnabled *bool `pulumi:"isRefreshStatsEnabled"`
	// The OCID of the masking policy.
	MaskingPolicyId *string `pulumi:"maskingPolicyId"`
	// The OCID of the masking work request that resulted in this masking report.
	MaskingWorkRequestId *string `pulumi:"maskingWorkRequestId"`
	// Indicates if parallel execution was enabled during the masking operation.
	ParallelDegree *string `pulumi:"parallelDegree"`
	// Indicates how invalid objects were recompiled post the masking operation.
	Recompile *string `pulumi:"recompile"`
	// The current state of the masking report.
	State *string `pulumi:"state"`
	// The OCID of the target database masked.
	TargetId *string `pulumi:"targetId"`
	// The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingFinished *string `pulumi:"timeMaskingFinished"`
	// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingStarted *string `pulumi:"timeMaskingStarted"`
	// The total number of masked columns.
	TotalMaskedColumns *string `pulumi:"totalMaskedColumns"`
	// The total number of unique objects (tables and editioning views) that contain the masked columns.
	TotalMaskedObjects *string `pulumi:"totalMaskedObjects"`
	// The total number of unique schemas that contain the masked columns.
	TotalMaskedSchemas *string `pulumi:"totalMaskedSchemas"`
	// The total number of unique sensitive types associated with the masked columns.
	TotalMaskedSensitiveTypes *string `pulumi:"totalMaskedSensitiveTypes"`
	// The total number of masked values.
	TotalMaskedValues *string `pulumi:"totalMaskedValues"`
}

type MaskingReportManagementState struct {
	// The OCID of the compartment that contains the masking report.
	CompartmentId pulumi.StringPtrInput
	// Indicates if the temporary tables created during the masking operation were dropped after masking.
	IsDropTempTablesEnabled pulumi.BoolPtrInput
	// Indicates if redo logging was enabled during the masking operation.
	IsRedoLoggingEnabled pulumi.BoolPtrInput
	// Indicates if statistics gathering was enabled during the masking operation.
	IsRefreshStatsEnabled pulumi.BoolPtrInput
	// The OCID of the masking policy.
	MaskingPolicyId pulumi.StringPtrInput
	// The OCID of the masking work request that resulted in this masking report.
	MaskingWorkRequestId pulumi.StringPtrInput
	// Indicates if parallel execution was enabled during the masking operation.
	ParallelDegree pulumi.StringPtrInput
	// Indicates how invalid objects were recompiled post the masking operation.
	Recompile pulumi.StringPtrInput
	// The current state of the masking report.
	State pulumi.StringPtrInput
	// The OCID of the target database masked.
	TargetId pulumi.StringPtrInput
	// The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingFinished pulumi.StringPtrInput
	// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
	TimeMaskingStarted pulumi.StringPtrInput
	// The total number of masked columns.
	TotalMaskedColumns pulumi.StringPtrInput
	// The total number of unique objects (tables and editioning views) that contain the masked columns.
	TotalMaskedObjects pulumi.StringPtrInput
	// The total number of unique schemas that contain the masked columns.
	TotalMaskedSchemas pulumi.StringPtrInput
	// The total number of unique sensitive types associated with the masked columns.
	TotalMaskedSensitiveTypes pulumi.StringPtrInput
	// The total number of masked values.
	TotalMaskedValues pulumi.StringPtrInput
}

func (MaskingReportManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingReportManagementState)(nil)).Elem()
}

type maskingReportManagementArgs struct {
	// The OCID of the compartment that contains the masking report.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the masking policy.
	MaskingPolicyId *string `pulumi:"maskingPolicyId"`
	// The OCID of the target database masked.
	TargetId *string `pulumi:"targetId"`
}

// The set of arguments for constructing a MaskingReportManagement resource.
type MaskingReportManagementArgs struct {
	// The OCID of the compartment that contains the masking report.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the masking policy.
	MaskingPolicyId pulumi.StringPtrInput
	// The OCID of the target database masked.
	TargetId pulumi.StringPtrInput
}

func (MaskingReportManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maskingReportManagementArgs)(nil)).Elem()
}

type MaskingReportManagementInput interface {
	pulumi.Input

	ToMaskingReportManagementOutput() MaskingReportManagementOutput
	ToMaskingReportManagementOutputWithContext(ctx context.Context) MaskingReportManagementOutput
}

func (*MaskingReportManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingReportManagement)(nil)).Elem()
}

func (i *MaskingReportManagement) ToMaskingReportManagementOutput() MaskingReportManagementOutput {
	return i.ToMaskingReportManagementOutputWithContext(context.Background())
}

func (i *MaskingReportManagement) ToMaskingReportManagementOutputWithContext(ctx context.Context) MaskingReportManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingReportManagementOutput)
}

// MaskingReportManagementArrayInput is an input type that accepts MaskingReportManagementArray and MaskingReportManagementArrayOutput values.
// You can construct a concrete instance of `MaskingReportManagementArrayInput` via:
//
//	MaskingReportManagementArray{ MaskingReportManagementArgs{...} }
type MaskingReportManagementArrayInput interface {
	pulumi.Input

	ToMaskingReportManagementArrayOutput() MaskingReportManagementArrayOutput
	ToMaskingReportManagementArrayOutputWithContext(context.Context) MaskingReportManagementArrayOutput
}

type MaskingReportManagementArray []MaskingReportManagementInput

func (MaskingReportManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingReportManagement)(nil)).Elem()
}

func (i MaskingReportManagementArray) ToMaskingReportManagementArrayOutput() MaskingReportManagementArrayOutput {
	return i.ToMaskingReportManagementArrayOutputWithContext(context.Background())
}

func (i MaskingReportManagementArray) ToMaskingReportManagementArrayOutputWithContext(ctx context.Context) MaskingReportManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingReportManagementArrayOutput)
}

// MaskingReportManagementMapInput is an input type that accepts MaskingReportManagementMap and MaskingReportManagementMapOutput values.
// You can construct a concrete instance of `MaskingReportManagementMapInput` via:
//
//	MaskingReportManagementMap{ "key": MaskingReportManagementArgs{...} }
type MaskingReportManagementMapInput interface {
	pulumi.Input

	ToMaskingReportManagementMapOutput() MaskingReportManagementMapOutput
	ToMaskingReportManagementMapOutputWithContext(context.Context) MaskingReportManagementMapOutput
}

type MaskingReportManagementMap map[string]MaskingReportManagementInput

func (MaskingReportManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingReportManagement)(nil)).Elem()
}

func (i MaskingReportManagementMap) ToMaskingReportManagementMapOutput() MaskingReportManagementMapOutput {
	return i.ToMaskingReportManagementMapOutputWithContext(context.Background())
}

func (i MaskingReportManagementMap) ToMaskingReportManagementMapOutputWithContext(ctx context.Context) MaskingReportManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaskingReportManagementMapOutput)
}

type MaskingReportManagementOutput struct{ *pulumi.OutputState }

func (MaskingReportManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaskingReportManagement)(nil)).Elem()
}

func (o MaskingReportManagementOutput) ToMaskingReportManagementOutput() MaskingReportManagementOutput {
	return o
}

func (o MaskingReportManagementOutput) ToMaskingReportManagementOutputWithContext(ctx context.Context) MaskingReportManagementOutput {
	return o
}

// The OCID of the compartment that contains the masking report.
func (o MaskingReportManagementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Indicates if the temporary tables created during the masking operation were dropped after masking.
func (o MaskingReportManagementOutput) IsDropTempTablesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.BoolOutput { return v.IsDropTempTablesEnabled }).(pulumi.BoolOutput)
}

// Indicates if redo logging was enabled during the masking operation.
func (o MaskingReportManagementOutput) IsRedoLoggingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.BoolOutput { return v.IsRedoLoggingEnabled }).(pulumi.BoolOutput)
}

// Indicates if statistics gathering was enabled during the masking operation.
func (o MaskingReportManagementOutput) IsRefreshStatsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.BoolOutput { return v.IsRefreshStatsEnabled }).(pulumi.BoolOutput)
}

// The OCID of the masking policy.
func (o MaskingReportManagementOutput) MaskingPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.MaskingPolicyId }).(pulumi.StringOutput)
}

// The OCID of the masking work request that resulted in this masking report.
func (o MaskingReportManagementOutput) MaskingWorkRequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.MaskingWorkRequestId }).(pulumi.StringOutput)
}

// Indicates if parallel execution was enabled during the masking operation.
func (o MaskingReportManagementOutput) ParallelDegree() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.ParallelDegree }).(pulumi.StringOutput)
}

// Indicates how invalid objects were recompiled post the masking operation.
func (o MaskingReportManagementOutput) Recompile() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.Recompile }).(pulumi.StringOutput)
}

// The current state of the masking report.
func (o MaskingReportManagementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The OCID of the target database masked.
func (o MaskingReportManagementOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

// The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o MaskingReportManagementOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
func (o MaskingReportManagementOutput) TimeMaskingFinished() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TimeMaskingFinished }).(pulumi.StringOutput)
}

// The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
func (o MaskingReportManagementOutput) TimeMaskingStarted() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TimeMaskingStarted }).(pulumi.StringOutput)
}

// The total number of masked columns.
func (o MaskingReportManagementOutput) TotalMaskedColumns() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TotalMaskedColumns }).(pulumi.StringOutput)
}

// The total number of unique objects (tables and editioning views) that contain the masked columns.
func (o MaskingReportManagementOutput) TotalMaskedObjects() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TotalMaskedObjects }).(pulumi.StringOutput)
}

// The total number of unique schemas that contain the masked columns.
func (o MaskingReportManagementOutput) TotalMaskedSchemas() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TotalMaskedSchemas }).(pulumi.StringOutput)
}

// The total number of unique sensitive types associated with the masked columns.
func (o MaskingReportManagementOutput) TotalMaskedSensitiveTypes() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TotalMaskedSensitiveTypes }).(pulumi.StringOutput)
}

// The total number of masked values.
func (o MaskingReportManagementOutput) TotalMaskedValues() pulumi.StringOutput {
	return o.ApplyT(func(v *MaskingReportManagement) pulumi.StringOutput { return v.TotalMaskedValues }).(pulumi.StringOutput)
}

type MaskingReportManagementArrayOutput struct{ *pulumi.OutputState }

func (MaskingReportManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaskingReportManagement)(nil)).Elem()
}

func (o MaskingReportManagementArrayOutput) ToMaskingReportManagementArrayOutput() MaskingReportManagementArrayOutput {
	return o
}

func (o MaskingReportManagementArrayOutput) ToMaskingReportManagementArrayOutputWithContext(ctx context.Context) MaskingReportManagementArrayOutput {
	return o
}

func (o MaskingReportManagementArrayOutput) Index(i pulumi.IntInput) MaskingReportManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaskingReportManagement {
		return vs[0].([]*MaskingReportManagement)[vs[1].(int)]
	}).(MaskingReportManagementOutput)
}

type MaskingReportManagementMapOutput struct{ *pulumi.OutputState }

func (MaskingReportManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaskingReportManagement)(nil)).Elem()
}

func (o MaskingReportManagementMapOutput) ToMaskingReportManagementMapOutput() MaskingReportManagementMapOutput {
	return o
}

func (o MaskingReportManagementMapOutput) ToMaskingReportManagementMapOutputWithContext(ctx context.Context) MaskingReportManagementMapOutput {
	return o
}

func (o MaskingReportManagementMapOutput) MapIndex(k pulumi.StringInput) MaskingReportManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaskingReportManagement {
		return vs[0].(map[string]*MaskingReportManagement)[vs[1].(string)]
	}).(MaskingReportManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingReportManagementInput)(nil)).Elem(), &MaskingReportManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingReportManagementArrayInput)(nil)).Elem(), MaskingReportManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaskingReportManagementMapInput)(nil)).Elem(), MaskingReportManagementMap{})
	pulumi.RegisterOutputType(MaskingReportManagementOutput{})
	pulumi.RegisterOutputType(MaskingReportManagementArrayOutput{})
	pulumi.RegisterOutputType(MaskingReportManagementMapOutput{})
}
