// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Sensitive Data Models Sensitive Column resource in Oracle Cloud Infrastructure Data Safe service.
//
// Creates a new sensitive column in the specified sensitive data model.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.NewSensitiveDataModelsSensitiveColumn(ctx, "testSensitiveDataModelsSensitiveColumn", &DataSafe.SensitiveDataModelsSensitiveColumnArgs{
//				ColumnName:                pulumi.Any(_var.Sensitive_data_models_sensitive_column_column_name),
//				Object:                    pulumi.Any(_var.Sensitive_data_models_sensitive_column_object),
//				SchemaName:                pulumi.Any(_var.Sensitive_data_models_sensitive_column_schema_name),
//				SensitiveDataModelId:      pulumi.Any(oci_data_safe_sensitive_data_model.Test_sensitive_data_model.Id),
//				AppDefinedChildColumnKeys: pulumi.Any(_var.Sensitive_data_models_sensitive_column_app_defined_child_column_keys),
//				AppName:                   pulumi.Any(_var.Sensitive_data_models_sensitive_column_app_name),
//				DataType:                  pulumi.Any(_var.Sensitive_data_models_sensitive_column_data_type),
//				DbDefinedChildColumnKeys:  pulumi.Any(_var.Sensitive_data_models_sensitive_column_db_defined_child_column_keys),
//				ObjectType:                pulumi.Any(_var.Sensitive_data_models_sensitive_column_object_type),
//				ParentColumnKeys:          pulumi.Any(_var.Sensitive_data_models_sensitive_column_parent_column_keys),
//				RelationType:              pulumi.Any(_var.Sensitive_data_models_sensitive_column_relation_type),
//				SensitiveTypeId:           pulumi.Any(oci_data_safe_sensitive_type.Test_sensitive_type.Id),
//				Status:                    pulumi.Any(_var.Sensitive_data_models_sensitive_column_status),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SensitiveDataModelsSensitiveColumns can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn test_sensitive_data_models_sensitive_column "sensitiveDataModels/{sensitiveDataModelId}/sensitiveColumns/{sensitiveColumnKey}"
//
// ```
type SensitiveDataModelsSensitiveColumn struct {
	pulumi.CustomResourceState

	// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	AppDefinedChildColumnKeys pulumi.StringArrayOutput `pulumi:"appDefinedChildColumnKeys"`
	// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
	ColumnGroups pulumi.StringArrayOutput `pulumi:"columnGroups"`
	// The name of the sensitive column.
	ColumnName pulumi.StringOutput `pulumi:"columnName"`
	// (Updatable) The data type of the sensitive column.
	DataType pulumi.StringOutput `pulumi:"dataType"`
	// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	DbDefinedChildColumnKeys pulumi.StringArrayOutput `pulumi:"dbDefinedChildColumnKeys"`
	// The estimated number of data values the column has in the associated database.
	EstimatedDataValueCount pulumi.StringOutput `pulumi:"estimatedDataValueCount"`
	// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
	Key pulumi.StringOutput `pulumi:"key"`
	// Details about the current state of the sensitive column.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The database object that contains the sensitive column.
	Object pulumi.StringOutput `pulumi:"object"`
	// The type of the database object that contains the sensitive column.
	ObjectType pulumi.StringOutput `pulumi:"objectType"`
	// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
	ParentColumnKeys pulumi.StringArrayOutput `pulumi:"parentColumnKeys"`
	// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
	RelationType pulumi.StringOutput `pulumi:"relationType"`
	// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
	SampleDataValues pulumi.StringArrayOutput `pulumi:"sampleDataValues"`
	// The database schema that contains the sensitive column.
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
	// The OCID of the sensitive data model.
	SensitiveDataModelId pulumi.StringOutput `pulumi:"sensitiveDataModelId"`
	// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
	SensitiveTypeId pulumi.StringOutput `pulumi:"sensitiveTypeId"`
	// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
	Source pulumi.StringOutput `pulumi:"source"`
	// The current state of the sensitive column.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewSensitiveDataModelsSensitiveColumn registers a new resource with the given unique name, arguments, and options.
func NewSensitiveDataModelsSensitiveColumn(ctx *pulumi.Context,
	name string, args *SensitiveDataModelsSensitiveColumnArgs, opts ...pulumi.ResourceOption) (*SensitiveDataModelsSensitiveColumn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColumnName == nil {
		return nil, errors.New("invalid value for required argument 'ColumnName'")
	}
	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	if args.SensitiveDataModelId == nil {
		return nil, errors.New("invalid value for required argument 'SensitiveDataModelId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensitiveDataModelsSensitiveColumn
	err := ctx.RegisterResource("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensitiveDataModelsSensitiveColumn gets an existing SensitiveDataModelsSensitiveColumn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensitiveDataModelsSensitiveColumn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensitiveDataModelsSensitiveColumnState, opts ...pulumi.ResourceOption) (*SensitiveDataModelsSensitiveColumn, error) {
	var resource SensitiveDataModelsSensitiveColumn
	err := ctx.ReadResource("oci:DataSafe/sensitiveDataModelsSensitiveColumn:SensitiveDataModelsSensitiveColumn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensitiveDataModelsSensitiveColumn resources.
type sensitiveDataModelsSensitiveColumnState struct {
	// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	AppDefinedChildColumnKeys []string `pulumi:"appDefinedChildColumnKeys"`
	// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
	AppName *string `pulumi:"appName"`
	// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
	ColumnGroups []string `pulumi:"columnGroups"`
	// The name of the sensitive column.
	ColumnName *string `pulumi:"columnName"`
	// (Updatable) The data type of the sensitive column.
	DataType *string `pulumi:"dataType"`
	// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	DbDefinedChildColumnKeys []string `pulumi:"dbDefinedChildColumnKeys"`
	// The estimated number of data values the column has in the associated database.
	EstimatedDataValueCount *string `pulumi:"estimatedDataValueCount"`
	// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
	Key *string `pulumi:"key"`
	// Details about the current state of the sensitive column.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The database object that contains the sensitive column.
	Object *string `pulumi:"object"`
	// The type of the database object that contains the sensitive column.
	ObjectType *string `pulumi:"objectType"`
	// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
	ParentColumnKeys []string `pulumi:"parentColumnKeys"`
	// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
	RelationType *string `pulumi:"relationType"`
	// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
	SampleDataValues []string `pulumi:"sampleDataValues"`
	// The database schema that contains the sensitive column.
	SchemaName *string `pulumi:"schemaName"`
	// The OCID of the sensitive data model.
	SensitiveDataModelId *string `pulumi:"sensitiveDataModelId"`
	// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
	SensitiveTypeId *string `pulumi:"sensitiveTypeId"`
	// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
	Source *string `pulumi:"source"`
	// The current state of the sensitive column.
	State *string `pulumi:"state"`
	// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status *string `pulumi:"status"`
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type SensitiveDataModelsSensitiveColumnState struct {
	// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	AppDefinedChildColumnKeys pulumi.StringArrayInput
	// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
	AppName pulumi.StringPtrInput
	// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
	ColumnGroups pulumi.StringArrayInput
	// The name of the sensitive column.
	ColumnName pulumi.StringPtrInput
	// (Updatable) The data type of the sensitive column.
	DataType pulumi.StringPtrInput
	// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	DbDefinedChildColumnKeys pulumi.StringArrayInput
	// The estimated number of data values the column has in the associated database.
	EstimatedDataValueCount pulumi.StringPtrInput
	// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
	Key pulumi.StringPtrInput
	// Details about the current state of the sensitive column.
	LifecycleDetails pulumi.StringPtrInput
	// The database object that contains the sensitive column.
	Object pulumi.StringPtrInput
	// The type of the database object that contains the sensitive column.
	ObjectType pulumi.StringPtrInput
	// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
	ParentColumnKeys pulumi.StringArrayInput
	// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
	RelationType pulumi.StringPtrInput
	// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
	SampleDataValues pulumi.StringArrayInput
	// The database schema that contains the sensitive column.
	SchemaName pulumi.StringPtrInput
	// The OCID of the sensitive data model.
	SensitiveDataModelId pulumi.StringPtrInput
	// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
	SensitiveTypeId pulumi.StringPtrInput
	// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
	Source pulumi.StringPtrInput
	// The current state of the sensitive column.
	State pulumi.StringPtrInput
	// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringPtrInput
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
	TimeCreated pulumi.StringPtrInput
	// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
	TimeUpdated pulumi.StringPtrInput
}

func (SensitiveDataModelsSensitiveColumnState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataModelsSensitiveColumnState)(nil)).Elem()
}

type sensitiveDataModelsSensitiveColumnArgs struct {
	// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	AppDefinedChildColumnKeys []string `pulumi:"appDefinedChildColumnKeys"`
	// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
	AppName *string `pulumi:"appName"`
	// The name of the sensitive column.
	ColumnName string `pulumi:"columnName"`
	// (Updatable) The data type of the sensitive column.
	DataType *string `pulumi:"dataType"`
	// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	DbDefinedChildColumnKeys []string `pulumi:"dbDefinedChildColumnKeys"`
	// The database object that contains the sensitive column.
	Object string `pulumi:"object"`
	// The type of the database object that contains the sensitive column.
	ObjectType *string `pulumi:"objectType"`
	// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
	ParentColumnKeys []string `pulumi:"parentColumnKeys"`
	// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
	RelationType *string `pulumi:"relationType"`
	// The database schema that contains the sensitive column.
	SchemaName string `pulumi:"schemaName"`
	// The OCID of the sensitive data model.
	SensitiveDataModelId string `pulumi:"sensitiveDataModelId"`
	// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
	SensitiveTypeId *string `pulumi:"sensitiveTypeId"`
	// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a SensitiveDataModelsSensitiveColumn resource.
type SensitiveDataModelsSensitiveColumnArgs struct {
	// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	AppDefinedChildColumnKeys pulumi.StringArrayInput
	// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
	AppName pulumi.StringPtrInput
	// The name of the sensitive column.
	ColumnName pulumi.StringInput
	// (Updatable) The data type of the sensitive column.
	DataType pulumi.StringPtrInput
	// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
	DbDefinedChildColumnKeys pulumi.StringArrayInput
	// The database object that contains the sensitive column.
	Object pulumi.StringInput
	// The type of the database object that contains the sensitive column.
	ObjectType pulumi.StringPtrInput
	// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
	ParentColumnKeys pulumi.StringArrayInput
	// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
	RelationType pulumi.StringPtrInput
	// The database schema that contains the sensitive column.
	SchemaName pulumi.StringInput
	// The OCID of the sensitive data model.
	SensitiveDataModelId pulumi.StringInput
	// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
	SensitiveTypeId pulumi.StringPtrInput
	// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringPtrInput
}

func (SensitiveDataModelsSensitiveColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveDataModelsSensitiveColumnArgs)(nil)).Elem()
}

type SensitiveDataModelsSensitiveColumnInput interface {
	pulumi.Input

	ToSensitiveDataModelsSensitiveColumnOutput() SensitiveDataModelsSensitiveColumnOutput
	ToSensitiveDataModelsSensitiveColumnOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnOutput
}

func (*SensitiveDataModelsSensitiveColumn) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (i *SensitiveDataModelsSensitiveColumn) ToSensitiveDataModelsSensitiveColumnOutput() SensitiveDataModelsSensitiveColumnOutput {
	return i.ToSensitiveDataModelsSensitiveColumnOutputWithContext(context.Background())
}

func (i *SensitiveDataModelsSensitiveColumn) ToSensitiveDataModelsSensitiveColumnOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataModelsSensitiveColumnOutput)
}

// SensitiveDataModelsSensitiveColumnArrayInput is an input type that accepts SensitiveDataModelsSensitiveColumnArray and SensitiveDataModelsSensitiveColumnArrayOutput values.
// You can construct a concrete instance of `SensitiveDataModelsSensitiveColumnArrayInput` via:
//
//	SensitiveDataModelsSensitiveColumnArray{ SensitiveDataModelsSensitiveColumnArgs{...} }
type SensitiveDataModelsSensitiveColumnArrayInput interface {
	pulumi.Input

	ToSensitiveDataModelsSensitiveColumnArrayOutput() SensitiveDataModelsSensitiveColumnArrayOutput
	ToSensitiveDataModelsSensitiveColumnArrayOutputWithContext(context.Context) SensitiveDataModelsSensitiveColumnArrayOutput
}

type SensitiveDataModelsSensitiveColumnArray []SensitiveDataModelsSensitiveColumnInput

func (SensitiveDataModelsSensitiveColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (i SensitiveDataModelsSensitiveColumnArray) ToSensitiveDataModelsSensitiveColumnArrayOutput() SensitiveDataModelsSensitiveColumnArrayOutput {
	return i.ToSensitiveDataModelsSensitiveColumnArrayOutputWithContext(context.Background())
}

func (i SensitiveDataModelsSensitiveColumnArray) ToSensitiveDataModelsSensitiveColumnArrayOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataModelsSensitiveColumnArrayOutput)
}

// SensitiveDataModelsSensitiveColumnMapInput is an input type that accepts SensitiveDataModelsSensitiveColumnMap and SensitiveDataModelsSensitiveColumnMapOutput values.
// You can construct a concrete instance of `SensitiveDataModelsSensitiveColumnMapInput` via:
//
//	SensitiveDataModelsSensitiveColumnMap{ "key": SensitiveDataModelsSensitiveColumnArgs{...} }
type SensitiveDataModelsSensitiveColumnMapInput interface {
	pulumi.Input

	ToSensitiveDataModelsSensitiveColumnMapOutput() SensitiveDataModelsSensitiveColumnMapOutput
	ToSensitiveDataModelsSensitiveColumnMapOutputWithContext(context.Context) SensitiveDataModelsSensitiveColumnMapOutput
}

type SensitiveDataModelsSensitiveColumnMap map[string]SensitiveDataModelsSensitiveColumnInput

func (SensitiveDataModelsSensitiveColumnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (i SensitiveDataModelsSensitiveColumnMap) ToSensitiveDataModelsSensitiveColumnMapOutput() SensitiveDataModelsSensitiveColumnMapOutput {
	return i.ToSensitiveDataModelsSensitiveColumnMapOutputWithContext(context.Background())
}

func (i SensitiveDataModelsSensitiveColumnMap) ToSensitiveDataModelsSensitiveColumnMapOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveDataModelsSensitiveColumnMapOutput)
}

type SensitiveDataModelsSensitiveColumnOutput struct{ *pulumi.OutputState }

func (SensitiveDataModelsSensitiveColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (o SensitiveDataModelsSensitiveColumnOutput) ToSensitiveDataModelsSensitiveColumnOutput() SensitiveDataModelsSensitiveColumnOutput {
	return o
}

func (o SensitiveDataModelsSensitiveColumnOutput) ToSensitiveDataModelsSensitiveColumnOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnOutput {
	return o
}

// (Updatable) Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
func (o SensitiveDataModelsSensitiveColumnOutput) AppDefinedChildColumnKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringArrayOutput {
		return v.AppDefinedChildColumnKeys
	}).(pulumi.StringArrayOutput)
}

// The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored. If this attribute is not provided, it's automatically populated with the value provided for the schemaName attribute.
func (o SensitiveDataModelsSensitiveColumnOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
func (o SensitiveDataModelsSensitiveColumnOutput) ColumnGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringArrayOutput { return v.ColumnGroups }).(pulumi.StringArrayOutput)
}

// The name of the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.ColumnName }).(pulumi.StringOutput)
}

// (Updatable) The data type of the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

// (Updatable) Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the child columns must be added to the sensitive data model before their keys can be specified here. If this attribute is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
func (o SensitiveDataModelsSensitiveColumnOutput) DbDefinedChildColumnKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringArrayOutput {
		return v.DbDefinedChildColumnKeys
	}).(pulumi.StringArrayOutput)
}

// The estimated number of data values the column has in the associated database.
func (o SensitiveDataModelsSensitiveColumnOutput) EstimatedDataValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.EstimatedDataValueCount }).(pulumi.StringOutput)
}

// The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
func (o SensitiveDataModelsSensitiveColumnOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Details about the current state of the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The database object that contains the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// The type of the database object that contains the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) ObjectType() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.ObjectType }).(pulumi.StringOutput)
}

// (Updatable) Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one parent column key. This attribute can be used to establish relationship between columns in a sensitive data model. Note that the parent column must be added to the sensitive data model before its key can be specified here. If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the parent column is automatically updated to reflect the relationship.
func (o SensitiveDataModelsSensitiveColumnOutput) ParentColumnKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringArrayOutput { return v.ParentColumnKeys }).(pulumi.StringArrayOutput)
}

// (Updatable) The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
func (o SensitiveDataModelsSensitiveColumnOutput) RelationType() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.RelationType }).(pulumi.StringOutput)
}

// Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) SampleDataValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringArrayOutput { return v.SampleDataValues }).(pulumi.StringArrayOutput)
}

// The database schema that contains the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

// The OCID of the sensitive data model.
func (o SensitiveDataModelsSensitiveColumnOutput) SensitiveDataModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.SensitiveDataModelId }).(pulumi.StringOutput)
}

// (Updatable) The OCID of the sensitive type to be associated with the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) SensitiveTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.SensitiveTypeId }).(pulumi.StringOutput)
}

// The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
func (o SensitiveDataModelsSensitiveColumnOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The current state of the sensitive column.
func (o SensitiveDataModelsSensitiveColumnOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental data discovery job does not identify these columns as sensitive.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SensitiveDataModelsSensitiveColumnOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
func (o SensitiveDataModelsSensitiveColumnOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
func (o SensitiveDataModelsSensitiveColumnOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveDataModelsSensitiveColumn) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type SensitiveDataModelsSensitiveColumnArrayOutput struct{ *pulumi.OutputState }

func (SensitiveDataModelsSensitiveColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (o SensitiveDataModelsSensitiveColumnArrayOutput) ToSensitiveDataModelsSensitiveColumnArrayOutput() SensitiveDataModelsSensitiveColumnArrayOutput {
	return o
}

func (o SensitiveDataModelsSensitiveColumnArrayOutput) ToSensitiveDataModelsSensitiveColumnArrayOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnArrayOutput {
	return o
}

func (o SensitiveDataModelsSensitiveColumnArrayOutput) Index(i pulumi.IntInput) SensitiveDataModelsSensitiveColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensitiveDataModelsSensitiveColumn {
		return vs[0].([]*SensitiveDataModelsSensitiveColumn)[vs[1].(int)]
	}).(SensitiveDataModelsSensitiveColumnOutput)
}

type SensitiveDataModelsSensitiveColumnMapOutput struct{ *pulumi.OutputState }

func (SensitiveDataModelsSensitiveColumnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveDataModelsSensitiveColumn)(nil)).Elem()
}

func (o SensitiveDataModelsSensitiveColumnMapOutput) ToSensitiveDataModelsSensitiveColumnMapOutput() SensitiveDataModelsSensitiveColumnMapOutput {
	return o
}

func (o SensitiveDataModelsSensitiveColumnMapOutput) ToSensitiveDataModelsSensitiveColumnMapOutputWithContext(ctx context.Context) SensitiveDataModelsSensitiveColumnMapOutput {
	return o
}

func (o SensitiveDataModelsSensitiveColumnMapOutput) MapIndex(k pulumi.StringInput) SensitiveDataModelsSensitiveColumnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensitiveDataModelsSensitiveColumn {
		return vs[0].(map[string]*SensitiveDataModelsSensitiveColumn)[vs[1].(string)]
	}).(SensitiveDataModelsSensitiveColumnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataModelsSensitiveColumnInput)(nil)).Elem(), &SensitiveDataModelsSensitiveColumn{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataModelsSensitiveColumnArrayInput)(nil)).Elem(), SensitiveDataModelsSensitiveColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveDataModelsSensitiveColumnMapInput)(nil)).Elem(), SensitiveDataModelsSensitiveColumnMap{})
	pulumi.RegisterOutputType(SensitiveDataModelsSensitiveColumnOutput{})
	pulumi.RegisterOutputType(SensitiveDataModelsSensitiveColumnArrayOutput{})
	pulumi.RegisterOutputType(SensitiveDataModelsSensitiveColumnMapOutput{})
}
