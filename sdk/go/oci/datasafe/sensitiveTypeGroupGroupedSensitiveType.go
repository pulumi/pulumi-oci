// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Sensitive Type Group Grouped Sensitive Type resource in Oracle Cloud Infrastructure Data Safe service.
//
//	Patches one or more sensitive types in a sensitive type group. You can use this operation to add or remove
//
// sensitive type ids in a sensitive type group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/datasafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datasafe.NewSensitiveTypeGroupGroupedSensitiveType(ctx, "test_sensitive_type_group_grouped_sensitive_type", &datasafe.SensitiveTypeGroupGroupedSensitiveTypeArgs{
//				SensitiveTypeGroupId: pulumi.Any(testSensitiveTypeGroup.Id),
//				PatchOperations: datasafe.SensitiveTypeGroupGroupedSensitiveTypePatchOperationArray{
//					&datasafe.SensitiveTypeGroupGroupedSensitiveTypePatchOperationArgs{
//						Operation: pulumi.Any(sensitiveTypeGroupGroupedSensitiveTypePatchOperationsOperation),
//						Selection: pulumi.Any(sensitiveTypeGroupGroupedSensitiveTypePatchOperationsSelection),
//						Value:     pulumi.Any(sensitiveTypeGroupGroupedSensitiveTypePatchOperationsValue),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SensitiveTypeGroupGroupedSensitiveTypes can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/sensitiveTypeGroupGroupedSensitiveType:SensitiveTypeGroupGroupedSensitiveType test_sensitive_type_group_grouped_sensitive_type "sensitiveTypeGroups/{sensitiveTypeGroupId}/groupedSensitiveTypes"
// ```
type SensitiveTypeGroupGroupedSensitiveType struct {
	pulumi.CustomResourceState

	// List of sensitive type id summary objects present in the sensitive type group.
	Items SensitiveTypeGroupGroupedSensitiveTypeItemArrayOutput `pulumi:"items"`
	// (Updatable)
	PatchOperations SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayOutput `pulumi:"patchOperations"`
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SensitiveTypeGroupId pulumi.StringOutput `pulumi:"sensitiveTypeGroupId"`
}

// NewSensitiveTypeGroupGroupedSensitiveType registers a new resource with the given unique name, arguments, and options.
func NewSensitiveTypeGroupGroupedSensitiveType(ctx *pulumi.Context,
	name string, args *SensitiveTypeGroupGroupedSensitiveTypeArgs, opts ...pulumi.ResourceOption) (*SensitiveTypeGroupGroupedSensitiveType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SensitiveTypeGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SensitiveTypeGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensitiveTypeGroupGroupedSensitiveType
	err := ctx.RegisterResource("oci:DataSafe/sensitiveTypeGroupGroupedSensitiveType:SensitiveTypeGroupGroupedSensitiveType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensitiveTypeGroupGroupedSensitiveType gets an existing SensitiveTypeGroupGroupedSensitiveType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensitiveTypeGroupGroupedSensitiveType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensitiveTypeGroupGroupedSensitiveTypeState, opts ...pulumi.ResourceOption) (*SensitiveTypeGroupGroupedSensitiveType, error) {
	var resource SensitiveTypeGroupGroupedSensitiveType
	err := ctx.ReadResource("oci:DataSafe/sensitiveTypeGroupGroupedSensitiveType:SensitiveTypeGroupGroupedSensitiveType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensitiveTypeGroupGroupedSensitiveType resources.
type sensitiveTypeGroupGroupedSensitiveTypeState struct {
	// List of sensitive type id summary objects present in the sensitive type group.
	Items []SensitiveTypeGroupGroupedSensitiveTypeItem `pulumi:"items"`
	// (Updatable)
	PatchOperations []SensitiveTypeGroupGroupedSensitiveTypePatchOperation `pulumi:"patchOperations"`
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SensitiveTypeGroupId *string `pulumi:"sensitiveTypeGroupId"`
}

type SensitiveTypeGroupGroupedSensitiveTypeState struct {
	// List of sensitive type id summary objects present in the sensitive type group.
	Items SensitiveTypeGroupGroupedSensitiveTypeItemArrayInput
	// (Updatable)
	PatchOperations SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayInput
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SensitiveTypeGroupId pulumi.StringPtrInput
}

func (SensitiveTypeGroupGroupedSensitiveTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveTypeGroupGroupedSensitiveTypeState)(nil)).Elem()
}

type sensitiveTypeGroupGroupedSensitiveTypeArgs struct {
	// (Updatable)
	PatchOperations []SensitiveTypeGroupGroupedSensitiveTypePatchOperation `pulumi:"patchOperations"`
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SensitiveTypeGroupId string `pulumi:"sensitiveTypeGroupId"`
}

// The set of arguments for constructing a SensitiveTypeGroupGroupedSensitiveType resource.
type SensitiveTypeGroupGroupedSensitiveTypeArgs struct {
	// (Updatable)
	PatchOperations SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayInput
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SensitiveTypeGroupId pulumi.StringInput
}

func (SensitiveTypeGroupGroupedSensitiveTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensitiveTypeGroupGroupedSensitiveTypeArgs)(nil)).Elem()
}

type SensitiveTypeGroupGroupedSensitiveTypeInput interface {
	pulumi.Input

	ToSensitiveTypeGroupGroupedSensitiveTypeOutput() SensitiveTypeGroupGroupedSensitiveTypeOutput
	ToSensitiveTypeGroupGroupedSensitiveTypeOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeOutput
}

func (*SensitiveTypeGroupGroupedSensitiveType) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (i *SensitiveTypeGroupGroupedSensitiveType) ToSensitiveTypeGroupGroupedSensitiveTypeOutput() SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return i.ToSensitiveTypeGroupGroupedSensitiveTypeOutputWithContext(context.Background())
}

func (i *SensitiveTypeGroupGroupedSensitiveType) ToSensitiveTypeGroupGroupedSensitiveTypeOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveTypeGroupGroupedSensitiveTypeOutput)
}

// SensitiveTypeGroupGroupedSensitiveTypeArrayInput is an input type that accepts SensitiveTypeGroupGroupedSensitiveTypeArray and SensitiveTypeGroupGroupedSensitiveTypeArrayOutput values.
// You can construct a concrete instance of `SensitiveTypeGroupGroupedSensitiveTypeArrayInput` via:
//
//	SensitiveTypeGroupGroupedSensitiveTypeArray{ SensitiveTypeGroupGroupedSensitiveTypeArgs{...} }
type SensitiveTypeGroupGroupedSensitiveTypeArrayInput interface {
	pulumi.Input

	ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutput() SensitiveTypeGroupGroupedSensitiveTypeArrayOutput
	ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutputWithContext(context.Context) SensitiveTypeGroupGroupedSensitiveTypeArrayOutput
}

type SensitiveTypeGroupGroupedSensitiveTypeArray []SensitiveTypeGroupGroupedSensitiveTypeInput

func (SensitiveTypeGroupGroupedSensitiveTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (i SensitiveTypeGroupGroupedSensitiveTypeArray) ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutput() SensitiveTypeGroupGroupedSensitiveTypeArrayOutput {
	return i.ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutputWithContext(context.Background())
}

func (i SensitiveTypeGroupGroupedSensitiveTypeArray) ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveTypeGroupGroupedSensitiveTypeArrayOutput)
}

// SensitiveTypeGroupGroupedSensitiveTypeMapInput is an input type that accepts SensitiveTypeGroupGroupedSensitiveTypeMap and SensitiveTypeGroupGroupedSensitiveTypeMapOutput values.
// You can construct a concrete instance of `SensitiveTypeGroupGroupedSensitiveTypeMapInput` via:
//
//	SensitiveTypeGroupGroupedSensitiveTypeMap{ "key": SensitiveTypeGroupGroupedSensitiveTypeArgs{...} }
type SensitiveTypeGroupGroupedSensitiveTypeMapInput interface {
	pulumi.Input

	ToSensitiveTypeGroupGroupedSensitiveTypeMapOutput() SensitiveTypeGroupGroupedSensitiveTypeMapOutput
	ToSensitiveTypeGroupGroupedSensitiveTypeMapOutputWithContext(context.Context) SensitiveTypeGroupGroupedSensitiveTypeMapOutput
}

type SensitiveTypeGroupGroupedSensitiveTypeMap map[string]SensitiveTypeGroupGroupedSensitiveTypeInput

func (SensitiveTypeGroupGroupedSensitiveTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (i SensitiveTypeGroupGroupedSensitiveTypeMap) ToSensitiveTypeGroupGroupedSensitiveTypeMapOutput() SensitiveTypeGroupGroupedSensitiveTypeMapOutput {
	return i.ToSensitiveTypeGroupGroupedSensitiveTypeMapOutputWithContext(context.Background())
}

func (i SensitiveTypeGroupGroupedSensitiveTypeMap) ToSensitiveTypeGroupGroupedSensitiveTypeMapOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensitiveTypeGroupGroupedSensitiveTypeMapOutput)
}

type SensitiveTypeGroupGroupedSensitiveTypeOutput struct{ *pulumi.OutputState }

func (SensitiveTypeGroupGroupedSensitiveTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (o SensitiveTypeGroupGroupedSensitiveTypeOutput) ToSensitiveTypeGroupGroupedSensitiveTypeOutput() SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return o
}

func (o SensitiveTypeGroupGroupedSensitiveTypeOutput) ToSensitiveTypeGroupGroupedSensitiveTypeOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return o
}

// List of sensitive type id summary objects present in the sensitive type group.
func (o SensitiveTypeGroupGroupedSensitiveTypeOutput) Items() SensitiveTypeGroupGroupedSensitiveTypeItemArrayOutput {
	return o.ApplyT(func(v *SensitiveTypeGroupGroupedSensitiveType) SensitiveTypeGroupGroupedSensitiveTypeItemArrayOutput {
		return v.Items
	}).(SensitiveTypeGroupGroupedSensitiveTypeItemArrayOutput)
}

// (Updatable)
func (o SensitiveTypeGroupGroupedSensitiveTypeOutput) PatchOperations() SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayOutput {
	return o.ApplyT(func(v *SensitiveTypeGroupGroupedSensitiveType) SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayOutput {
		return v.PatchOperations
	}).(SensitiveTypeGroupGroupedSensitiveTypePatchOperationArrayOutput)
}

// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SensitiveTypeGroupGroupedSensitiveTypeOutput) SensitiveTypeGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensitiveTypeGroupGroupedSensitiveType) pulumi.StringOutput { return v.SensitiveTypeGroupId }).(pulumi.StringOutput)
}

type SensitiveTypeGroupGroupedSensitiveTypeArrayOutput struct{ *pulumi.OutputState }

func (SensitiveTypeGroupGroupedSensitiveTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (o SensitiveTypeGroupGroupedSensitiveTypeArrayOutput) ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutput() SensitiveTypeGroupGroupedSensitiveTypeArrayOutput {
	return o
}

func (o SensitiveTypeGroupGroupedSensitiveTypeArrayOutput) ToSensitiveTypeGroupGroupedSensitiveTypeArrayOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeArrayOutput {
	return o
}

func (o SensitiveTypeGroupGroupedSensitiveTypeArrayOutput) Index(i pulumi.IntInput) SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensitiveTypeGroupGroupedSensitiveType {
		return vs[0].([]*SensitiveTypeGroupGroupedSensitiveType)[vs[1].(int)]
	}).(SensitiveTypeGroupGroupedSensitiveTypeOutput)
}

type SensitiveTypeGroupGroupedSensitiveTypeMapOutput struct{ *pulumi.OutputState }

func (SensitiveTypeGroupGroupedSensitiveTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensitiveTypeGroupGroupedSensitiveType)(nil)).Elem()
}

func (o SensitiveTypeGroupGroupedSensitiveTypeMapOutput) ToSensitiveTypeGroupGroupedSensitiveTypeMapOutput() SensitiveTypeGroupGroupedSensitiveTypeMapOutput {
	return o
}

func (o SensitiveTypeGroupGroupedSensitiveTypeMapOutput) ToSensitiveTypeGroupGroupedSensitiveTypeMapOutputWithContext(ctx context.Context) SensitiveTypeGroupGroupedSensitiveTypeMapOutput {
	return o
}

func (o SensitiveTypeGroupGroupedSensitiveTypeMapOutput) MapIndex(k pulumi.StringInput) SensitiveTypeGroupGroupedSensitiveTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensitiveTypeGroupGroupedSensitiveType {
		return vs[0].(map[string]*SensitiveTypeGroupGroupedSensitiveType)[vs[1].(string)]
	}).(SensitiveTypeGroupGroupedSensitiveTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveTypeGroupGroupedSensitiveTypeInput)(nil)).Elem(), &SensitiveTypeGroupGroupedSensitiveType{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveTypeGroupGroupedSensitiveTypeArrayInput)(nil)).Elem(), SensitiveTypeGroupGroupedSensitiveTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensitiveTypeGroupGroupedSensitiveTypeMapInput)(nil)).Elem(), SensitiveTypeGroupGroupedSensitiveTypeMap{})
	pulumi.RegisterOutputType(SensitiveTypeGroupGroupedSensitiveTypeOutput{})
	pulumi.RegisterOutputType(SensitiveTypeGroupGroupedSensitiveTypeArrayOutput{})
	pulumi.RegisterOutputType(SensitiveTypeGroupGroupedSensitiveTypeMapOutput{})
}
