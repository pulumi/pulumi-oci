// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datasafe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Target Database Peer Target Database resource in Oracle Cloud Infrastructure Data Safe service.
//
// Creates the peer target database under the primary target database in Data Safe.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DataSafe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DataSafe.NewTargetDatabasePeerTargetDatabase(ctx, "test_target_database_peer_target_database", &DataSafe.TargetDatabasePeerTargetDatabaseArgs{
//				DatabaseDetails: &datasafe.TargetDatabasePeerTargetDatabaseDatabaseDetailsArgs{
//					DatabaseType:         pulumi.Any(targetDatabasePeerTargetDatabaseDatabaseDetailsDatabaseType),
//					InfrastructureType:   pulumi.Any(targetDatabasePeerTargetDatabaseDatabaseDetailsInfrastructureType),
//					AutonomousDatabaseId: pulumi.Any(testAutonomousDatabase.Id),
//					DbSystemId:           pulumi.Any(testDbSystem.Id),
//					InstanceId:           pulumi.Any(testInstance.Id),
//					IpAddresses:          pulumi.Any(targetDatabasePeerTargetDatabaseDatabaseDetailsIpAddresses),
//					ListenerPort:         pulumi.Any(targetDatabasePeerTargetDatabaseDatabaseDetailsListenerPort),
//					ServiceName:          pulumi.Any(testService.Name),
//					VmClusterId:          pulumi.Any(testVmCluster.Id),
//				},
//				TargetDatabaseId:       pulumi.Any(testTargetDatabase.Id),
//				DataguardAssociationId: pulumi.Any(testAssociation.Id),
//				Description:            pulumi.Any(targetDatabasePeerTargetDatabaseDescription),
//				DisplayName:            pulumi.Any(targetDatabasePeerTargetDatabaseDisplayName),
//				TlsConfig: &datasafe.TargetDatabasePeerTargetDatabaseTlsConfigArgs{
//					Status:               pulumi.Any(targetDatabasePeerTargetDatabaseTlsConfigStatus),
//					CertificateStoreType: pulumi.Any(targetDatabasePeerTargetDatabaseTlsConfigCertificateStoreType),
//					KeyStoreContent:      pulumi.Any(targetDatabasePeerTargetDatabaseTlsConfigKeyStoreContent),
//					StorePassword:        pulumi.Any(targetDatabasePeerTargetDatabaseTlsConfigStorePassword),
//					TrustStoreContent:    pulumi.Any(targetDatabasePeerTargetDatabaseTlsConfigTrustStoreContent),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// TargetDatabasePeerTargetDatabases can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DataSafe/targetDatabasePeerTargetDatabase:TargetDatabasePeerTargetDatabase test_target_database_peer_target_database "targetDatabases/{targetDatabaseId}/peerTargetDatabases/{peerTargetDatabaseId}"
// ```
type TargetDatabasePeerTargetDatabase struct {
	pulumi.CustomResourceState

	// (Updatable) Details of the database for the registration in Data Safe.
	DatabaseDetails TargetDatabasePeerTargetDatabaseDatabaseDetailsOutput `pulumi:"databaseDetails"`
	// Unique name of the database associated to the peer target database.
	DatabaseUniqueName pulumi.StringOutput `pulumi:"databaseUniqueName"`
	// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
	DataguardAssociationId pulumi.StringOutput `pulumi:"dataguardAssociationId"`
	// (Updatable) The description of the peer target database in Data Safe.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The secondary key assigned for the peer target database in Data Safe.
	Key pulumi.IntOutput `pulumi:"key"`
	// Details about the current state of the peer target database in Data Safe.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Role of the database associated to the peer target database.
	Role pulumi.StringOutput `pulumi:"role"`
	// The current state of the peer target database in Data Safe.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId pulumi.StringOutput `pulumi:"targetDatabaseId"`
	// The date and time of the peer target database registration in Data Safe.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) The details required to establish a TLS enabled connection.
	TlsConfig TargetDatabasePeerTargetDatabaseTlsConfigOutput `pulumi:"tlsConfig"`
}

// NewTargetDatabasePeerTargetDatabase registers a new resource with the given unique name, arguments, and options.
func NewTargetDatabasePeerTargetDatabase(ctx *pulumi.Context,
	name string, args *TargetDatabasePeerTargetDatabaseArgs, opts ...pulumi.ResourceOption) (*TargetDatabasePeerTargetDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseDetails == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseDetails'")
	}
	if args.TargetDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'TargetDatabaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetDatabasePeerTargetDatabase
	err := ctx.RegisterResource("oci:DataSafe/targetDatabasePeerTargetDatabase:TargetDatabasePeerTargetDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetDatabasePeerTargetDatabase gets an existing TargetDatabasePeerTargetDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetDatabasePeerTargetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetDatabasePeerTargetDatabaseState, opts ...pulumi.ResourceOption) (*TargetDatabasePeerTargetDatabase, error) {
	var resource TargetDatabasePeerTargetDatabase
	err := ctx.ReadResource("oci:DataSafe/targetDatabasePeerTargetDatabase:TargetDatabasePeerTargetDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetDatabasePeerTargetDatabase resources.
type targetDatabasePeerTargetDatabaseState struct {
	// (Updatable) Details of the database for the registration in Data Safe.
	DatabaseDetails *TargetDatabasePeerTargetDatabaseDatabaseDetails `pulumi:"databaseDetails"`
	// Unique name of the database associated to the peer target database.
	DatabaseUniqueName *string `pulumi:"databaseUniqueName"`
	// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
	DataguardAssociationId *string `pulumi:"dataguardAssociationId"`
	// (Updatable) The description of the peer target database in Data Safe.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The secondary key assigned for the peer target database in Data Safe.
	Key *int `pulumi:"key"`
	// Details about the current state of the peer target database in Data Safe.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Role of the database associated to the peer target database.
	Role *string `pulumi:"role"`
	// The current state of the peer target database in Data Safe.
	State *string `pulumi:"state"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId *string `pulumi:"targetDatabaseId"`
	// The date and time of the peer target database registration in Data Safe.
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) The details required to establish a TLS enabled connection.
	TlsConfig *TargetDatabasePeerTargetDatabaseTlsConfig `pulumi:"tlsConfig"`
}

type TargetDatabasePeerTargetDatabaseState struct {
	// (Updatable) Details of the database for the registration in Data Safe.
	DatabaseDetails TargetDatabasePeerTargetDatabaseDatabaseDetailsPtrInput
	// Unique name of the database associated to the peer target database.
	DatabaseUniqueName pulumi.StringPtrInput
	// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
	DataguardAssociationId pulumi.StringPtrInput
	// (Updatable) The description of the peer target database in Data Safe.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// The secondary key assigned for the peer target database in Data Safe.
	Key pulumi.IntPtrInput
	// Details about the current state of the peer target database in Data Safe.
	LifecycleDetails pulumi.StringPtrInput
	// Role of the database associated to the peer target database.
	Role pulumi.StringPtrInput
	// The current state of the peer target database in Data Safe.
	State pulumi.StringPtrInput
	// The OCID of the Data Safe target database.
	TargetDatabaseId pulumi.StringPtrInput
	// The date and time of the peer target database registration in Data Safe.
	TimeCreated pulumi.StringPtrInput
	// (Updatable) The details required to establish a TLS enabled connection.
	TlsConfig TargetDatabasePeerTargetDatabaseTlsConfigPtrInput
}

func (TargetDatabasePeerTargetDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetDatabasePeerTargetDatabaseState)(nil)).Elem()
}

type targetDatabasePeerTargetDatabaseArgs struct {
	// (Updatable) Details of the database for the registration in Data Safe.
	DatabaseDetails TargetDatabasePeerTargetDatabaseDatabaseDetails `pulumi:"databaseDetails"`
	// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
	DataguardAssociationId *string `pulumi:"dataguardAssociationId"`
	// (Updatable) The description of the peer target database in Data Safe.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the Data Safe target database.
	TargetDatabaseId string `pulumi:"targetDatabaseId"`
	// (Updatable) The details required to establish a TLS enabled connection.
	TlsConfig *TargetDatabasePeerTargetDatabaseTlsConfig `pulumi:"tlsConfig"`
}

// The set of arguments for constructing a TargetDatabasePeerTargetDatabase resource.
type TargetDatabasePeerTargetDatabaseArgs struct {
	// (Updatable) Details of the database for the registration in Data Safe.
	DatabaseDetails TargetDatabasePeerTargetDatabaseDatabaseDetailsInput
	// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
	DataguardAssociationId pulumi.StringPtrInput
	// (Updatable) The description of the peer target database in Data Safe.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// The OCID of the Data Safe target database.
	TargetDatabaseId pulumi.StringInput
	// (Updatable) The details required to establish a TLS enabled connection.
	TlsConfig TargetDatabasePeerTargetDatabaseTlsConfigPtrInput
}

func (TargetDatabasePeerTargetDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetDatabasePeerTargetDatabaseArgs)(nil)).Elem()
}

type TargetDatabasePeerTargetDatabaseInput interface {
	pulumi.Input

	ToTargetDatabasePeerTargetDatabaseOutput() TargetDatabasePeerTargetDatabaseOutput
	ToTargetDatabasePeerTargetDatabaseOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseOutput
}

func (*TargetDatabasePeerTargetDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (i *TargetDatabasePeerTargetDatabase) ToTargetDatabasePeerTargetDatabaseOutput() TargetDatabasePeerTargetDatabaseOutput {
	return i.ToTargetDatabasePeerTargetDatabaseOutputWithContext(context.Background())
}

func (i *TargetDatabasePeerTargetDatabase) ToTargetDatabasePeerTargetDatabaseOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetDatabasePeerTargetDatabaseOutput)
}

// TargetDatabasePeerTargetDatabaseArrayInput is an input type that accepts TargetDatabasePeerTargetDatabaseArray and TargetDatabasePeerTargetDatabaseArrayOutput values.
// You can construct a concrete instance of `TargetDatabasePeerTargetDatabaseArrayInput` via:
//
//	TargetDatabasePeerTargetDatabaseArray{ TargetDatabasePeerTargetDatabaseArgs{...} }
type TargetDatabasePeerTargetDatabaseArrayInput interface {
	pulumi.Input

	ToTargetDatabasePeerTargetDatabaseArrayOutput() TargetDatabasePeerTargetDatabaseArrayOutput
	ToTargetDatabasePeerTargetDatabaseArrayOutputWithContext(context.Context) TargetDatabasePeerTargetDatabaseArrayOutput
}

type TargetDatabasePeerTargetDatabaseArray []TargetDatabasePeerTargetDatabaseInput

func (TargetDatabasePeerTargetDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (i TargetDatabasePeerTargetDatabaseArray) ToTargetDatabasePeerTargetDatabaseArrayOutput() TargetDatabasePeerTargetDatabaseArrayOutput {
	return i.ToTargetDatabasePeerTargetDatabaseArrayOutputWithContext(context.Background())
}

func (i TargetDatabasePeerTargetDatabaseArray) ToTargetDatabasePeerTargetDatabaseArrayOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetDatabasePeerTargetDatabaseArrayOutput)
}

// TargetDatabasePeerTargetDatabaseMapInput is an input type that accepts TargetDatabasePeerTargetDatabaseMap and TargetDatabasePeerTargetDatabaseMapOutput values.
// You can construct a concrete instance of `TargetDatabasePeerTargetDatabaseMapInput` via:
//
//	TargetDatabasePeerTargetDatabaseMap{ "key": TargetDatabasePeerTargetDatabaseArgs{...} }
type TargetDatabasePeerTargetDatabaseMapInput interface {
	pulumi.Input

	ToTargetDatabasePeerTargetDatabaseMapOutput() TargetDatabasePeerTargetDatabaseMapOutput
	ToTargetDatabasePeerTargetDatabaseMapOutputWithContext(context.Context) TargetDatabasePeerTargetDatabaseMapOutput
}

type TargetDatabasePeerTargetDatabaseMap map[string]TargetDatabasePeerTargetDatabaseInput

func (TargetDatabasePeerTargetDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (i TargetDatabasePeerTargetDatabaseMap) ToTargetDatabasePeerTargetDatabaseMapOutput() TargetDatabasePeerTargetDatabaseMapOutput {
	return i.ToTargetDatabasePeerTargetDatabaseMapOutputWithContext(context.Background())
}

func (i TargetDatabasePeerTargetDatabaseMap) ToTargetDatabasePeerTargetDatabaseMapOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetDatabasePeerTargetDatabaseMapOutput)
}

type TargetDatabasePeerTargetDatabaseOutput struct{ *pulumi.OutputState }

func (TargetDatabasePeerTargetDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (o TargetDatabasePeerTargetDatabaseOutput) ToTargetDatabasePeerTargetDatabaseOutput() TargetDatabasePeerTargetDatabaseOutput {
	return o
}

func (o TargetDatabasePeerTargetDatabaseOutput) ToTargetDatabasePeerTargetDatabaseOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseOutput {
	return o
}

// (Updatable) Details of the database for the registration in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) DatabaseDetails() TargetDatabasePeerTargetDatabaseDatabaseDetailsOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) TargetDatabasePeerTargetDatabaseDatabaseDetailsOutput {
		return v.DatabaseDetails
	}).(TargetDatabasePeerTargetDatabaseDatabaseDetailsOutput)
}

// Unique name of the database associated to the peer target database.
func (o TargetDatabasePeerTargetDatabaseOutput) DatabaseUniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.DatabaseUniqueName }).(pulumi.StringOutput)
}

// The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
func (o TargetDatabasePeerTargetDatabaseOutput) DataguardAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.DataguardAssociationId }).(pulumi.StringOutput)
}

// (Updatable) The description of the peer target database in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
func (o TargetDatabasePeerTargetDatabaseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The secondary key assigned for the peer target database in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.IntOutput { return v.Key }).(pulumi.IntOutput)
}

// Details about the current state of the peer target database in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Role of the database associated to the peer target database.
func (o TargetDatabasePeerTargetDatabaseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The current state of the peer target database in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The OCID of the Data Safe target database.
func (o TargetDatabasePeerTargetDatabaseOutput) TargetDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.TargetDatabaseId }).(pulumi.StringOutput)
}

// The date and time of the peer target database registration in Data Safe.
func (o TargetDatabasePeerTargetDatabaseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// (Updatable) The details required to establish a TLS enabled connection.
func (o TargetDatabasePeerTargetDatabaseOutput) TlsConfig() TargetDatabasePeerTargetDatabaseTlsConfigOutput {
	return o.ApplyT(func(v *TargetDatabasePeerTargetDatabase) TargetDatabasePeerTargetDatabaseTlsConfigOutput {
		return v.TlsConfig
	}).(TargetDatabasePeerTargetDatabaseTlsConfigOutput)
}

type TargetDatabasePeerTargetDatabaseArrayOutput struct{ *pulumi.OutputState }

func (TargetDatabasePeerTargetDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (o TargetDatabasePeerTargetDatabaseArrayOutput) ToTargetDatabasePeerTargetDatabaseArrayOutput() TargetDatabasePeerTargetDatabaseArrayOutput {
	return o
}

func (o TargetDatabasePeerTargetDatabaseArrayOutput) ToTargetDatabasePeerTargetDatabaseArrayOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseArrayOutput {
	return o
}

func (o TargetDatabasePeerTargetDatabaseArrayOutput) Index(i pulumi.IntInput) TargetDatabasePeerTargetDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetDatabasePeerTargetDatabase {
		return vs[0].([]*TargetDatabasePeerTargetDatabase)[vs[1].(int)]
	}).(TargetDatabasePeerTargetDatabaseOutput)
}

type TargetDatabasePeerTargetDatabaseMapOutput struct{ *pulumi.OutputState }

func (TargetDatabasePeerTargetDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetDatabasePeerTargetDatabase)(nil)).Elem()
}

func (o TargetDatabasePeerTargetDatabaseMapOutput) ToTargetDatabasePeerTargetDatabaseMapOutput() TargetDatabasePeerTargetDatabaseMapOutput {
	return o
}

func (o TargetDatabasePeerTargetDatabaseMapOutput) ToTargetDatabasePeerTargetDatabaseMapOutputWithContext(ctx context.Context) TargetDatabasePeerTargetDatabaseMapOutput {
	return o
}

func (o TargetDatabasePeerTargetDatabaseMapOutput) MapIndex(k pulumi.StringInput) TargetDatabasePeerTargetDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetDatabasePeerTargetDatabase {
		return vs[0].(map[string]*TargetDatabasePeerTargetDatabase)[vs[1].(string)]
	}).(TargetDatabasePeerTargetDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetDatabasePeerTargetDatabaseInput)(nil)).Elem(), &TargetDatabasePeerTargetDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetDatabasePeerTargetDatabaseArrayInput)(nil)).Elem(), TargetDatabasePeerTargetDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetDatabasePeerTargetDatabaseMapInput)(nil)).Elem(), TargetDatabasePeerTargetDatabaseMap{})
	pulumi.RegisterOutputType(TargetDatabasePeerTargetDatabaseOutput{})
	pulumi.RegisterOutputType(TargetDatabasePeerTargetDatabaseArrayOutput{})
	pulumi.RegisterOutputType(TargetDatabasePeerTargetDatabaseMapOutput{})
}
