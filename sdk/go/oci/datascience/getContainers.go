// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datascience

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Containers in Oracle Cloud Infrastructure Data Science service.
//
// List containers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datascience"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datascience.GetContainers(ctx, &datascience.GetContainersArgs{
//				ContainerName:   pulumi.StringRef(testContainer.Name),
//				DisplayName:     pulumi.StringRef(containerDisplayName),
//				IsLatest:        pulumi.BoolRef(containerIsLatest),
//				State:           pulumi.StringRef(containerState),
//				TagQueryParam:   pulumi.StringRef(containerTagQueryParam),
//				TargetWorkload:  pulumi.StringRef(containerTargetWorkload),
//				UsageQueryParam: pulumi.StringRef(containerUsageQueryParam),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetContainers(ctx *pulumi.Context, args *GetContainersArgs, opts ...pulumi.InvokeOption) (*GetContainersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContainersResult
	err := ctx.Invoke("oci:DataScience/getContainers:getContainers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainers.
type GetContainersArgs struct {
	// <b>Filter</b> results by the container name.
	ContainerName *string `pulumi:"containerName"`
	// <b>Filter</b> results by its user-friendly name.
	DisplayName *string               `pulumi:"displayName"`
	Filters     []GetContainersFilter `pulumi:"filters"`
	// if true, this returns latest version of container.
	IsLatest *bool `pulumi:"isLatest"`
	// <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
	State *string `pulumi:"state"`
	// <b>Filter</b> results by the container version tag.
	TagQueryParam *string `pulumi:"tagQueryParam"`
	// <b>Filter</b> results by the target workload.
	TargetWorkload *string `pulumi:"targetWorkload"`
	// <b>Filter</b> results by the usage.
	UsageQueryParam *string `pulumi:"usageQueryParam"`
}

// A collection of values returned by getContainers.
type GetContainersResult struct {
	// The name of the container. This can be same for different tags
	ContainerName *string `pulumi:"containerName"`
	// The list of containers.
	Containers []GetContainersContainer `pulumi:"containers"`
	// The display name of the container.
	DisplayName *string               `pulumi:"displayName"`
	Filters     []GetContainersFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The latest tag of the container.
	IsLatest *bool `pulumi:"isLatest"`
	// Container Version LifecycleState.
	State           *string `pulumi:"state"`
	TagQueryParam   *string `pulumi:"tagQueryParam"`
	TargetWorkload  *string `pulumi:"targetWorkload"`
	UsageQueryParam *string `pulumi:"usageQueryParam"`
}

func GetContainersOutput(ctx *pulumi.Context, args GetContainersOutputArgs, opts ...pulumi.InvokeOption) GetContainersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetContainersResultOutput, error) {
			args := v.(GetContainersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataScience/getContainers:getContainers", args, GetContainersResultOutput{}, options).(GetContainersResultOutput), nil
		}).(GetContainersResultOutput)
}

// A collection of arguments for invoking getContainers.
type GetContainersOutputArgs struct {
	// <b>Filter</b> results by the container name.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// <b>Filter</b> results by its user-friendly name.
	DisplayName pulumi.StringPtrInput         `pulumi:"displayName"`
	Filters     GetContainersFilterArrayInput `pulumi:"filters"`
	// if true, this returns latest version of container.
	IsLatest pulumi.BoolPtrInput `pulumi:"isLatest"`
	// <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
	State pulumi.StringPtrInput `pulumi:"state"`
	// <b>Filter</b> results by the container version tag.
	TagQueryParam pulumi.StringPtrInput `pulumi:"tagQueryParam"`
	// <b>Filter</b> results by the target workload.
	TargetWorkload pulumi.StringPtrInput `pulumi:"targetWorkload"`
	// <b>Filter</b> results by the usage.
	UsageQueryParam pulumi.StringPtrInput `pulumi:"usageQueryParam"`
}

func (GetContainersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainersArgs)(nil)).Elem()
}

// A collection of values returned by getContainers.
type GetContainersResultOutput struct{ *pulumi.OutputState }

func (GetContainersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContainersResult)(nil)).Elem()
}

func (o GetContainersResultOutput) ToGetContainersResultOutput() GetContainersResultOutput {
	return o
}

func (o GetContainersResultOutput) ToGetContainersResultOutputWithContext(ctx context.Context) GetContainersResultOutput {
	return o
}

// The name of the container. This can be same for different tags
func (o GetContainersResultOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The list of containers.
func (o GetContainersResultOutput) Containers() GetContainersContainerArrayOutput {
	return o.ApplyT(func(v GetContainersResult) []GetContainersContainer { return v.Containers }).(GetContainersContainerArrayOutput)
}

// The display name of the container.
func (o GetContainersResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetContainersResultOutput) Filters() GetContainersFilterArrayOutput {
	return o.ApplyT(func(v GetContainersResult) []GetContainersFilter { return v.Filters }).(GetContainersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetContainersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContainersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The latest tag of the container.
func (o GetContainersResultOutput) IsLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *bool { return v.IsLatest }).(pulumi.BoolPtrOutput)
}

// Container Version LifecycleState.
func (o GetContainersResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o GetContainersResultOutput) TagQueryParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.TagQueryParam }).(pulumi.StringPtrOutput)
}

func (o GetContainersResultOutput) TargetWorkload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.TargetWorkload }).(pulumi.StringPtrOutput)
}

func (o GetContainersResultOutput) UsageQueryParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContainersResult) *string { return v.UsageQueryParam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContainersResultOutput{})
}
