// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datascience

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Ml Applications in Oracle Cloud Infrastructure Data Science service.
//
// Returns a list of MlApplications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/datascience"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := datascience.GetMlApplications(ctx, &datascience.GetMlApplicationsArgs{
//				CompartmentId:          compartmentId,
//				CompartmentIdInSubtree: pulumi.BoolRef(mlApplicationCompartmentIdInSubtree),
//				MlApplicationId:        pulumi.StringRef(testMlApplication.Id),
//				Name:                   pulumi.StringRef(mlApplicationName),
//				State:                  pulumi.StringRef(mlApplicationState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMlApplications(ctx *pulumi.Context, args *GetMlApplicationsArgs, opts ...pulumi.InvokeOption) (*GetMlApplicationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMlApplicationsResult
	err := ctx.Invoke("oci:DataScience/getMlApplications:getMlApplications", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMlApplications.
type GetMlApplicationsArgs struct {
	// <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
	CompartmentIdInSubtree *bool                     `pulumi:"compartmentIdInSubtree"`
	Filters                []GetMlApplicationsFilter `pulumi:"filters"`
	// unique MlApplication identifier
	MlApplicationId *string `pulumi:"mlApplicationId"`
	// A filter to return only resources that match the entire name given.
	Name *string `pulumi:"name"`
	// A filter to return only resources with lifecycleState matching the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getMlApplications.
type GetMlApplicationsResult struct {
	// The OCID of the compartment where the MlApplication is created.
	CompartmentId          string                    `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                     `pulumi:"compartmentIdInSubtree"`
	Filters                []GetMlApplicationsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of ml_application_collection.
	MlApplicationCollections []GetMlApplicationsMlApplicationCollection `pulumi:"mlApplicationCollections"`
	MlApplicationId          *string                                    `pulumi:"mlApplicationId"`
	// The name of MlApplication. It is unique in a given tenancy.
	Name *string `pulumi:"name"`
	// The current state of the MlApplication.
	State *string `pulumi:"state"`
}

func GetMlApplicationsOutput(ctx *pulumi.Context, args GetMlApplicationsOutputArgs, opts ...pulumi.InvokeOption) GetMlApplicationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMlApplicationsResultOutput, error) {
			args := v.(GetMlApplicationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DataScience/getMlApplications:getMlApplications", args, GetMlApplicationsResultOutput{}, options).(GetMlApplicationsResultOutput), nil
		}).(GetMlApplicationsResultOutput)
}

// A collection of arguments for invoking getMlApplications.
type GetMlApplicationsOutputArgs struct {
	// <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// If it is true search must include all results from descendant compartments. Value true is allowed only if compartmentId refers to root compartment.
	CompartmentIdInSubtree pulumi.BoolPtrInput               `pulumi:"compartmentIdInSubtree"`
	Filters                GetMlApplicationsFilterArrayInput `pulumi:"filters"`
	// unique MlApplication identifier
	MlApplicationId pulumi.StringPtrInput `pulumi:"mlApplicationId"`
	// A filter to return only resources that match the entire name given.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to return only resources with lifecycleState matching the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetMlApplicationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMlApplicationsArgs)(nil)).Elem()
}

// A collection of values returned by getMlApplications.
type GetMlApplicationsResultOutput struct{ *pulumi.OutputState }

func (GetMlApplicationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMlApplicationsResult)(nil)).Elem()
}

func (o GetMlApplicationsResultOutput) ToGetMlApplicationsResultOutput() GetMlApplicationsResultOutput {
	return o
}

func (o GetMlApplicationsResultOutput) ToGetMlApplicationsResultOutputWithContext(ctx context.Context) GetMlApplicationsResultOutput {
	return o
}

// The OCID of the compartment where the MlApplication is created.
func (o GetMlApplicationsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetMlApplicationsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetMlApplicationsResultOutput) Filters() GetMlApplicationsFilterArrayOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) []GetMlApplicationsFilter { return v.Filters }).(GetMlApplicationsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMlApplicationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of ml_application_collection.
func (o GetMlApplicationsResultOutput) MlApplicationCollections() GetMlApplicationsMlApplicationCollectionArrayOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) []GetMlApplicationsMlApplicationCollection {
		return v.MlApplicationCollections
	}).(GetMlApplicationsMlApplicationCollectionArrayOutput)
}

func (o GetMlApplicationsResultOutput) MlApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) *string { return v.MlApplicationId }).(pulumi.StringPtrOutput)
}

// The name of MlApplication. It is unique in a given tenancy.
func (o GetMlApplicationsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The current state of the MlApplication.
func (o GetMlApplicationsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMlApplicationsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMlApplicationsResultOutput{})
}
