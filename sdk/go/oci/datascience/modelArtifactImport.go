// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datascience

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ModelArtifactImport struct {
	pulumi.CustomResourceState

	ArtifactSourceType    pulumi.StringOutput `pulumi:"artifactSourceType"`
	DestinationBucket     pulumi.StringOutput `pulumi:"destinationBucket"`
	DestinationObjectName pulumi.StringOutput `pulumi:"destinationObjectName"`
	DestinationRegion     pulumi.StringOutput `pulumi:"destinationRegion"`
	ModelId               pulumi.StringOutput `pulumi:"modelId"`
	Namespace             pulumi.StringOutput `pulumi:"namespace"`
}

// NewModelArtifactImport registers a new resource with the given unique name, arguments, and options.
func NewModelArtifactImport(ctx *pulumi.Context,
	name string, args *ModelArtifactImportArgs, opts ...pulumi.ResourceOption) (*ModelArtifactImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactSourceType == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactSourceType'")
	}
	if args.DestinationBucket == nil {
		return nil, errors.New("invalid value for required argument 'DestinationBucket'")
	}
	if args.DestinationObjectName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationObjectName'")
	}
	if args.DestinationRegion == nil {
		return nil, errors.New("invalid value for required argument 'DestinationRegion'")
	}
	if args.ModelId == nil {
		return nil, errors.New("invalid value for required argument 'ModelId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModelArtifactImport
	err := ctx.RegisterResource("oci:DataScience/modelArtifactImport:ModelArtifactImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModelArtifactImport gets an existing ModelArtifactImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModelArtifactImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelArtifactImportState, opts ...pulumi.ResourceOption) (*ModelArtifactImport, error) {
	var resource ModelArtifactImport
	err := ctx.ReadResource("oci:DataScience/modelArtifactImport:ModelArtifactImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModelArtifactImport resources.
type modelArtifactImportState struct {
	ArtifactSourceType    *string `pulumi:"artifactSourceType"`
	DestinationBucket     *string `pulumi:"destinationBucket"`
	DestinationObjectName *string `pulumi:"destinationObjectName"`
	DestinationRegion     *string `pulumi:"destinationRegion"`
	ModelId               *string `pulumi:"modelId"`
	Namespace             *string `pulumi:"namespace"`
}

type ModelArtifactImportState struct {
	ArtifactSourceType    pulumi.StringPtrInput
	DestinationBucket     pulumi.StringPtrInput
	DestinationObjectName pulumi.StringPtrInput
	DestinationRegion     pulumi.StringPtrInput
	ModelId               pulumi.StringPtrInput
	Namespace             pulumi.StringPtrInput
}

func (ModelArtifactImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArtifactImportState)(nil)).Elem()
}

type modelArtifactImportArgs struct {
	ArtifactSourceType    string `pulumi:"artifactSourceType"`
	DestinationBucket     string `pulumi:"destinationBucket"`
	DestinationObjectName string `pulumi:"destinationObjectName"`
	DestinationRegion     string `pulumi:"destinationRegion"`
	ModelId               string `pulumi:"modelId"`
	Namespace             string `pulumi:"namespace"`
}

// The set of arguments for constructing a ModelArtifactImport resource.
type ModelArtifactImportArgs struct {
	ArtifactSourceType    pulumi.StringInput
	DestinationBucket     pulumi.StringInput
	DestinationObjectName pulumi.StringInput
	DestinationRegion     pulumi.StringInput
	ModelId               pulumi.StringInput
	Namespace             pulumi.StringInput
}

func (ModelArtifactImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArtifactImportArgs)(nil)).Elem()
}

type ModelArtifactImportInput interface {
	pulumi.Input

	ToModelArtifactImportOutput() ModelArtifactImportOutput
	ToModelArtifactImportOutputWithContext(ctx context.Context) ModelArtifactImportOutput
}

func (*ModelArtifactImport) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelArtifactImport)(nil)).Elem()
}

func (i *ModelArtifactImport) ToModelArtifactImportOutput() ModelArtifactImportOutput {
	return i.ToModelArtifactImportOutputWithContext(context.Background())
}

func (i *ModelArtifactImport) ToModelArtifactImportOutputWithContext(ctx context.Context) ModelArtifactImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelArtifactImportOutput)
}

func (i *ModelArtifactImport) ToOutput(ctx context.Context) pulumix.Output[*ModelArtifactImport] {
	return pulumix.Output[*ModelArtifactImport]{
		OutputState: i.ToModelArtifactImportOutputWithContext(ctx).OutputState,
	}
}

// ModelArtifactImportArrayInput is an input type that accepts ModelArtifactImportArray and ModelArtifactImportArrayOutput values.
// You can construct a concrete instance of `ModelArtifactImportArrayInput` via:
//
//	ModelArtifactImportArray{ ModelArtifactImportArgs{...} }
type ModelArtifactImportArrayInput interface {
	pulumi.Input

	ToModelArtifactImportArrayOutput() ModelArtifactImportArrayOutput
	ToModelArtifactImportArrayOutputWithContext(context.Context) ModelArtifactImportArrayOutput
}

type ModelArtifactImportArray []ModelArtifactImportInput

func (ModelArtifactImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelArtifactImport)(nil)).Elem()
}

func (i ModelArtifactImportArray) ToModelArtifactImportArrayOutput() ModelArtifactImportArrayOutput {
	return i.ToModelArtifactImportArrayOutputWithContext(context.Background())
}

func (i ModelArtifactImportArray) ToModelArtifactImportArrayOutputWithContext(ctx context.Context) ModelArtifactImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelArtifactImportArrayOutput)
}

func (i ModelArtifactImportArray) ToOutput(ctx context.Context) pulumix.Output[[]*ModelArtifactImport] {
	return pulumix.Output[[]*ModelArtifactImport]{
		OutputState: i.ToModelArtifactImportArrayOutputWithContext(ctx).OutputState,
	}
}

// ModelArtifactImportMapInput is an input type that accepts ModelArtifactImportMap and ModelArtifactImportMapOutput values.
// You can construct a concrete instance of `ModelArtifactImportMapInput` via:
//
//	ModelArtifactImportMap{ "key": ModelArtifactImportArgs{...} }
type ModelArtifactImportMapInput interface {
	pulumi.Input

	ToModelArtifactImportMapOutput() ModelArtifactImportMapOutput
	ToModelArtifactImportMapOutputWithContext(context.Context) ModelArtifactImportMapOutput
}

type ModelArtifactImportMap map[string]ModelArtifactImportInput

func (ModelArtifactImportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelArtifactImport)(nil)).Elem()
}

func (i ModelArtifactImportMap) ToModelArtifactImportMapOutput() ModelArtifactImportMapOutput {
	return i.ToModelArtifactImportMapOutputWithContext(context.Background())
}

func (i ModelArtifactImportMap) ToModelArtifactImportMapOutputWithContext(ctx context.Context) ModelArtifactImportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelArtifactImportMapOutput)
}

func (i ModelArtifactImportMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ModelArtifactImport] {
	return pulumix.Output[map[string]*ModelArtifactImport]{
		OutputState: i.ToModelArtifactImportMapOutputWithContext(ctx).OutputState,
	}
}

type ModelArtifactImportOutput struct{ *pulumi.OutputState }

func (ModelArtifactImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelArtifactImport)(nil)).Elem()
}

func (o ModelArtifactImportOutput) ToModelArtifactImportOutput() ModelArtifactImportOutput {
	return o
}

func (o ModelArtifactImportOutput) ToModelArtifactImportOutputWithContext(ctx context.Context) ModelArtifactImportOutput {
	return o
}

func (o ModelArtifactImportOutput) ToOutput(ctx context.Context) pulumix.Output[*ModelArtifactImport] {
	return pulumix.Output[*ModelArtifactImport]{
		OutputState: o.OutputState,
	}
}

func (o ModelArtifactImportOutput) ArtifactSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.ArtifactSourceType }).(pulumi.StringOutput)
}

func (o ModelArtifactImportOutput) DestinationBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.DestinationBucket }).(pulumi.StringOutput)
}

func (o ModelArtifactImportOutput) DestinationObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.DestinationObjectName }).(pulumi.StringOutput)
}

func (o ModelArtifactImportOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.DestinationRegion }).(pulumi.StringOutput)
}

func (o ModelArtifactImportOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.ModelId }).(pulumi.StringOutput)
}

func (o ModelArtifactImportOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ModelArtifactImport) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

type ModelArtifactImportArrayOutput struct{ *pulumi.OutputState }

func (ModelArtifactImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModelArtifactImport)(nil)).Elem()
}

func (o ModelArtifactImportArrayOutput) ToModelArtifactImportArrayOutput() ModelArtifactImportArrayOutput {
	return o
}

func (o ModelArtifactImportArrayOutput) ToModelArtifactImportArrayOutputWithContext(ctx context.Context) ModelArtifactImportArrayOutput {
	return o
}

func (o ModelArtifactImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ModelArtifactImport] {
	return pulumix.Output[[]*ModelArtifactImport]{
		OutputState: o.OutputState,
	}
}

func (o ModelArtifactImportArrayOutput) Index(i pulumi.IntInput) ModelArtifactImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModelArtifactImport {
		return vs[0].([]*ModelArtifactImport)[vs[1].(int)]
	}).(ModelArtifactImportOutput)
}

type ModelArtifactImportMapOutput struct{ *pulumi.OutputState }

func (ModelArtifactImportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModelArtifactImport)(nil)).Elem()
}

func (o ModelArtifactImportMapOutput) ToModelArtifactImportMapOutput() ModelArtifactImportMapOutput {
	return o
}

func (o ModelArtifactImportMapOutput) ToModelArtifactImportMapOutputWithContext(ctx context.Context) ModelArtifactImportMapOutput {
	return o
}

func (o ModelArtifactImportMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ModelArtifactImport] {
	return pulumix.Output[map[string]*ModelArtifactImport]{
		OutputState: o.OutputState,
	}
}

func (o ModelArtifactImportMapOutput) MapIndex(k pulumi.StringInput) ModelArtifactImportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModelArtifactImport {
		return vs[0].(map[string]*ModelArtifactImport)[vs[1].(string)]
	}).(ModelArtifactImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelArtifactImportInput)(nil)).Elem(), &ModelArtifactImport{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelArtifactImportArrayInput)(nil)).Elem(), ModelArtifactImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelArtifactImportMapInput)(nil)).Elem(), ModelArtifactImportMap{})
	pulumi.RegisterOutputType(ModelArtifactImportOutput{})
	pulumi.RegisterOutputType(ModelArtifactImportArrayOutput{})
	pulumi.RegisterOutputType(ModelArtifactImportMapOutput{})
}
