// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dblm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Patch Management Databases in Oracle Cloud Infrastructure Dblm service.
//
// # Gets the list of databases
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/dblm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dblm.GetPatchManagementDatabases(ctx, &dblm.GetPatchManagementDatabasesArgs{
//				CompartmentId:   pulumi.StringRef(compartmentId),
//				DatabaseRelease: pulumi.StringRef(patchManagementDatabaseDatabaseRelease),
//				DatabaseType:    pulumi.StringRef(patchManagementDatabaseDatabaseType),
//				DisplayName:     pulumi.StringRef(patchManagementDatabaseDisplayName),
//				DrifterPatchId:  pulumi.IntRef(testPatch.Id),
//				ImageCompliance: pulumi.StringRef(patchManagementDatabaseImageCompliance),
//				ImageId:         pulumi.StringRef(testImage.Id),
//				SeverityTypes:   patchManagementDatabaseSeverityType,
//				State:           pulumi.StringRef(patchManagementDatabaseState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPatchManagementDatabases(ctx *pulumi.Context, args *GetPatchManagementDatabasesArgs, opts ...pulumi.InvokeOption) (*GetPatchManagementDatabasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPatchManagementDatabasesResult
	err := ctx.Invoke("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPatchManagementDatabases.
type GetPatchManagementDatabasesArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only database that match the given release version.
	DatabaseRelease *string `pulumi:"databaseRelease"`
	// Filter by database type. Possible values Single Instance or RAC.
	DatabaseType *string `pulumi:"databaseType"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string `pulumi:"displayName"`
	// A filter to return only database that have given patchId as additional patch (drifter from image version).
	DrifterPatchId *int                                `pulumi:"drifterPatchId"`
	Filters        []GetPatchManagementDatabasesFilter `pulumi:"filters"`
	// Filter databases by image compliance status.
	ImageCompliance *string `pulumi:"imageCompliance"`
	// Subscribed image
	ImageId *string `pulumi:"imageId"`
	// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
	SeverityTypes []string `pulumi:"severityTypes"`
	// A filter to return only resources their lifecycleState matches the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getPatchManagementDatabases.
type GetPatchManagementDatabasesResult struct {
	CompartmentId   *string `pulumi:"compartmentId"`
	DatabaseRelease *string `pulumi:"databaseRelease"`
	// Database type.
	DatabaseType   *string                             `pulumi:"databaseType"`
	DisplayName    *string                             `pulumi:"displayName"`
	DrifterPatchId *int                                `pulumi:"drifterPatchId"`
	Filters        []GetPatchManagementDatabasesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id              string  `pulumi:"id"`
	ImageCompliance *string `pulumi:"imageCompliance"`
	// Image identifier.
	ImageId *string `pulumi:"imageId"`
	// The list of patch_databases_collection.
	PatchDatabasesCollections []GetPatchManagementDatabasesPatchDatabasesCollection `pulumi:"patchDatabasesCollections"`
	SeverityTypes             []string                                              `pulumi:"severityTypes"`
	// The current state of the database.
	State *string `pulumi:"state"`
}

func GetPatchManagementDatabasesOutput(ctx *pulumi.Context, args GetPatchManagementDatabasesOutputArgs, opts ...pulumi.InvokeOption) GetPatchManagementDatabasesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPatchManagementDatabasesResultOutput, error) {
			args := v.(GetPatchManagementDatabasesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Dblm/getPatchManagementDatabases:getPatchManagementDatabases", args, GetPatchManagementDatabasesResultOutput{}, options).(GetPatchManagementDatabasesResultOutput), nil
		}).(GetPatchManagementDatabasesResultOutput)
}

// A collection of arguments for invoking getPatchManagementDatabases.
type GetPatchManagementDatabasesOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only database that match the given release version.
	DatabaseRelease pulumi.StringPtrInput `pulumi:"databaseRelease"`
	// Filter by database type. Possible values Single Instance or RAC.
	DatabaseType pulumi.StringPtrInput `pulumi:"databaseType"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A filter to return only database that have given patchId as additional patch (drifter from image version).
	DrifterPatchId pulumi.IntPtrInput                          `pulumi:"drifterPatchId"`
	Filters        GetPatchManagementDatabasesFilterArrayInput `pulumi:"filters"`
	// Filter databases by image compliance status.
	ImageCompliance pulumi.StringPtrInput `pulumi:"imageCompliance"`
	// Subscribed image
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// Filter by one or more severity types. Possible values are critical, high, medium, low, info and none.
	SeverityTypes pulumi.StringArrayInput `pulumi:"severityTypes"`
	// A filter to return only resources their lifecycleState matches the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetPatchManagementDatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchManagementDatabasesArgs)(nil)).Elem()
}

// A collection of values returned by getPatchManagementDatabases.
type GetPatchManagementDatabasesResultOutput struct{ *pulumi.OutputState }

func (GetPatchManagementDatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPatchManagementDatabasesResult)(nil)).Elem()
}

func (o GetPatchManagementDatabasesResultOutput) ToGetPatchManagementDatabasesResultOutput() GetPatchManagementDatabasesResultOutput {
	return o
}

func (o GetPatchManagementDatabasesResultOutput) ToGetPatchManagementDatabasesResultOutputWithContext(ctx context.Context) GetPatchManagementDatabasesResultOutput {
	return o
}

func (o GetPatchManagementDatabasesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetPatchManagementDatabasesResultOutput) DatabaseRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.DatabaseRelease }).(pulumi.StringPtrOutput)
}

// Database type.
func (o GetPatchManagementDatabasesResultOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

func (o GetPatchManagementDatabasesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetPatchManagementDatabasesResultOutput) DrifterPatchId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *int { return v.DrifterPatchId }).(pulumi.IntPtrOutput)
}

func (o GetPatchManagementDatabasesResultOutput) Filters() GetPatchManagementDatabasesFilterArrayOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) []GetPatchManagementDatabasesFilter { return v.Filters }).(GetPatchManagementDatabasesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPatchManagementDatabasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPatchManagementDatabasesResultOutput) ImageCompliance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.ImageCompliance }).(pulumi.StringPtrOutput)
}

// Image identifier.
func (o GetPatchManagementDatabasesResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The list of patch_databases_collection.
func (o GetPatchManagementDatabasesResultOutput) PatchDatabasesCollections() GetPatchManagementDatabasesPatchDatabasesCollectionArrayOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) []GetPatchManagementDatabasesPatchDatabasesCollection {
		return v.PatchDatabasesCollections
	}).(GetPatchManagementDatabasesPatchDatabasesCollectionArrayOutput)
}

func (o GetPatchManagementDatabasesResultOutput) SeverityTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) []string { return v.SeverityTypes }).(pulumi.StringArrayOutput)
}

// The current state of the database.
func (o GetPatchManagementDatabasesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPatchManagementDatabasesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPatchManagementDatabasesResultOutput{})
}
