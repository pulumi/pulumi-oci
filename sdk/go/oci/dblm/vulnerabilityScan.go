// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dblm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Vulnerability Scan resource in Oracle Cloud Infrastructure Dblm service.
//
// Creates a VulnerabilityScan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/dblm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dblm.NewVulnerabilityScan(ctx, "test_vulnerability_scan", &dblm.VulnerabilityScanArgs{
//				CompartmentId:         pulumi.Any(compartmentId),
//				VulnerabilityScanType: pulumi.Any(vulnerabilityScanVulnerabilityScanType),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VulnerabilityScans can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Dblm/vulnerabilityScan:VulnerabilityScan test_vulnerability_scan "id"
// ```
type VulnerabilityScan struct {
	pulumi.CustomResourceState

	// Compartment Identifier
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// A user-friendly name. It does not have to be unique, and it is changeable.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// The current state of the VulnerabilityScan.
	State pulumi.StringOutput `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeEnded pulumi.StringOutput `pulumi:"timeEnded"`
	// The message of the vulnerability scan status.
	VulnerabilityScanMessage pulumi.StringOutput `pulumi:"vulnerabilityScanMessage"`
	// The status of the vulnerability scan.
	VulnerabilityScanStatus pulumi.StringOutput `pulumi:"vulnerabilityScanStatus"`
	// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VulnerabilityScanType pulumi.StringOutput `pulumi:"vulnerabilityScanType"`
}

// NewVulnerabilityScan registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilityScan(ctx *pulumi.Context,
	name string, args *VulnerabilityScanArgs, opts ...pulumi.ResourceOption) (*VulnerabilityScan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.VulnerabilityScanType == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityScanType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VulnerabilityScan
	err := ctx.RegisterResource("oci:Dblm/vulnerabilityScan:VulnerabilityScan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilityScan gets an existing VulnerabilityScan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilityScan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityScanState, opts ...pulumi.ResourceOption) (*VulnerabilityScan, error) {
	var resource VulnerabilityScan
	err := ctx.ReadResource("oci:Dblm/vulnerabilityScan:VulnerabilityScan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilityScan resources.
type vulnerabilityScanState struct {
	// Compartment Identifier
	CompartmentId *string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A user-friendly name. It does not have to be unique, and it is changeable.
	DisplayName *string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The current state of the VulnerabilityScan.
	State *string `pulumi:"state"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeEnded *string `pulumi:"timeEnded"`
	// The message of the vulnerability scan status.
	VulnerabilityScanMessage *string `pulumi:"vulnerabilityScanMessage"`
	// The status of the vulnerability scan.
	VulnerabilityScanStatus *string `pulumi:"vulnerabilityScanStatus"`
	// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VulnerabilityScanType *string `pulumi:"vulnerabilityScanType"`
}

type VulnerabilityScanState struct {
	// Compartment Identifier
	CompartmentId pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// A user-friendly name. It does not have to be unique, and it is changeable.
	DisplayName pulumi.StringPtrInput
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// The current state of the VulnerabilityScan.
	State pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeEnded pulumi.StringPtrInput
	// The message of the vulnerability scan status.
	VulnerabilityScanMessage pulumi.StringPtrInput
	// The status of the vulnerability scan.
	VulnerabilityScanStatus pulumi.StringPtrInput
	// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VulnerabilityScanType pulumi.StringPtrInput
}

func (VulnerabilityScanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityScanState)(nil)).Elem()
}

type vulnerabilityScanArgs struct {
	// Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VulnerabilityScanType string `pulumi:"vulnerabilityScanType"`
}

// The set of arguments for constructing a VulnerabilityScan resource.
type VulnerabilityScanArgs struct {
	// Compartment Identifier
	CompartmentId pulumi.StringInput
	// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VulnerabilityScanType pulumi.StringInput
}

func (VulnerabilityScanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityScanArgs)(nil)).Elem()
}

type VulnerabilityScanInput interface {
	pulumi.Input

	ToVulnerabilityScanOutput() VulnerabilityScanOutput
	ToVulnerabilityScanOutputWithContext(ctx context.Context) VulnerabilityScanOutput
}

func (*VulnerabilityScan) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityScan)(nil)).Elem()
}

func (i *VulnerabilityScan) ToVulnerabilityScanOutput() VulnerabilityScanOutput {
	return i.ToVulnerabilityScanOutputWithContext(context.Background())
}

func (i *VulnerabilityScan) ToVulnerabilityScanOutputWithContext(ctx context.Context) VulnerabilityScanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityScanOutput)
}

// VulnerabilityScanArrayInput is an input type that accepts VulnerabilityScanArray and VulnerabilityScanArrayOutput values.
// You can construct a concrete instance of `VulnerabilityScanArrayInput` via:
//
//	VulnerabilityScanArray{ VulnerabilityScanArgs{...} }
type VulnerabilityScanArrayInput interface {
	pulumi.Input

	ToVulnerabilityScanArrayOutput() VulnerabilityScanArrayOutput
	ToVulnerabilityScanArrayOutputWithContext(context.Context) VulnerabilityScanArrayOutput
}

type VulnerabilityScanArray []VulnerabilityScanInput

func (VulnerabilityScanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityScan)(nil)).Elem()
}

func (i VulnerabilityScanArray) ToVulnerabilityScanArrayOutput() VulnerabilityScanArrayOutput {
	return i.ToVulnerabilityScanArrayOutputWithContext(context.Background())
}

func (i VulnerabilityScanArray) ToVulnerabilityScanArrayOutputWithContext(ctx context.Context) VulnerabilityScanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityScanArrayOutput)
}

// VulnerabilityScanMapInput is an input type that accepts VulnerabilityScanMap and VulnerabilityScanMapOutput values.
// You can construct a concrete instance of `VulnerabilityScanMapInput` via:
//
//	VulnerabilityScanMap{ "key": VulnerabilityScanArgs{...} }
type VulnerabilityScanMapInput interface {
	pulumi.Input

	ToVulnerabilityScanMapOutput() VulnerabilityScanMapOutput
	ToVulnerabilityScanMapOutputWithContext(context.Context) VulnerabilityScanMapOutput
}

type VulnerabilityScanMap map[string]VulnerabilityScanInput

func (VulnerabilityScanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityScan)(nil)).Elem()
}

func (i VulnerabilityScanMap) ToVulnerabilityScanMapOutput() VulnerabilityScanMapOutput {
	return i.ToVulnerabilityScanMapOutputWithContext(context.Background())
}

func (i VulnerabilityScanMap) ToVulnerabilityScanMapOutputWithContext(ctx context.Context) VulnerabilityScanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityScanMapOutput)
}

type VulnerabilityScanOutput struct{ *pulumi.OutputState }

func (VulnerabilityScanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityScan)(nil)).Elem()
}

func (o VulnerabilityScanOutput) ToVulnerabilityScanOutput() VulnerabilityScanOutput {
	return o
}

func (o VulnerabilityScanOutput) ToVulnerabilityScanOutputWithContext(ctx context.Context) VulnerabilityScanOutput {
	return o
}

// Compartment Identifier
func (o VulnerabilityScanOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o VulnerabilityScanOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A user-friendly name. It does not have to be unique, and it is changeable.
func (o VulnerabilityScanOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o VulnerabilityScanOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The current state of the VulnerabilityScan.
func (o VulnerabilityScanOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o VulnerabilityScanOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o VulnerabilityScanOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o VulnerabilityScanOutput) TimeEnded() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.TimeEnded }).(pulumi.StringOutput)
}

// The message of the vulnerability scan status.
func (o VulnerabilityScanOutput) VulnerabilityScanMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.VulnerabilityScanMessage }).(pulumi.StringOutput)
}

// The status of the vulnerability scan.
func (o VulnerabilityScanOutput) VulnerabilityScanStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.VulnerabilityScanStatus }).(pulumi.StringOutput)
}

// Vulnerability Scan type is CVE, PATCH or IMAGE_PATCH
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o VulnerabilityScanOutput) VulnerabilityScanType() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityScan) pulumi.StringOutput { return v.VulnerabilityScanType }).(pulumi.StringOutput)
}

type VulnerabilityScanArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityScanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityScan)(nil)).Elem()
}

func (o VulnerabilityScanArrayOutput) ToVulnerabilityScanArrayOutput() VulnerabilityScanArrayOutput {
	return o
}

func (o VulnerabilityScanArrayOutput) ToVulnerabilityScanArrayOutputWithContext(ctx context.Context) VulnerabilityScanArrayOutput {
	return o
}

func (o VulnerabilityScanArrayOutput) Index(i pulumi.IntInput) VulnerabilityScanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VulnerabilityScan {
		return vs[0].([]*VulnerabilityScan)[vs[1].(int)]
	}).(VulnerabilityScanOutput)
}

type VulnerabilityScanMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityScanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityScan)(nil)).Elem()
}

func (o VulnerabilityScanMapOutput) ToVulnerabilityScanMapOutput() VulnerabilityScanMapOutput {
	return o
}

func (o VulnerabilityScanMapOutput) ToVulnerabilityScanMapOutputWithContext(ctx context.Context) VulnerabilityScanMapOutput {
	return o
}

func (o VulnerabilityScanMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityScanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VulnerabilityScan {
		return vs[0].(map[string]*VulnerabilityScan)[vs[1].(string)]
	}).(VulnerabilityScanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityScanInput)(nil)).Elem(), &VulnerabilityScan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityScanArrayInput)(nil)).Elem(), VulnerabilityScanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityScanMapInput)(nil)).Elem(), VulnerabilityScanMap{})
	pulumi.RegisterOutputType(VulnerabilityScanOutput{})
	pulumi.RegisterOutputType(VulnerabilityScanArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityScanMapOutput{})
}
