// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Desktop Pool resource in Oracle Cloud Infrastructure Desktops service.
//
// Returns information about the desktop pool including all configuration parameters and the current state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/desktops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := desktops.GetDesktopPool(ctx, &desktops.GetDesktopPoolArgs{
//				DesktopPoolId: testDesktopPoolOciDesktopsDesktopPool.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDesktopPool(ctx *pulumi.Context, args *LookupDesktopPoolArgs, opts ...pulumi.InvokeOption) (*LookupDesktopPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDesktopPoolResult
	err := ctx.Invoke("oci:Desktops/getDesktopPool:getDesktopPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDesktopPool.
type LookupDesktopPoolArgs struct {
	// The OCID of the desktop pool.
	DesktopPoolId string `pulumi:"desktopPoolId"`
}

// A collection of values returned by getDesktopPool.
type LookupDesktopPoolResult struct {
	// The number of active desktops in the desktop pool.
	ActiveDesktops int `pulumi:"activeDesktops"`
	// Indicates whether desktop pool users have administrative privileges on their desktop.
	ArePrivilegedUsers  bool `pulumi:"arePrivilegedUsers"`
	AreVolumesPreserved bool `pulumi:"areVolumesPreserved"`
	// The availability domain of the desktop pool.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// Provides the start and stop schedule information for desktop availability of the desktop pool.
	AvailabilityPolicies []GetDesktopPoolAvailabilityPolicy `pulumi:"availabilityPolicies"`
	// The OCID of the compartment of the desktop pool.
	CompartmentId string `pulumi:"compartmentId"`
	// Contact information of the desktop pool administrator. Avoid entering confidential information.
	ContactDetails string `pulumi:"contactDetails"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A user friendly description providing additional information about the resource. Avoid entering confidential information.
	Description   string `pulumi:"description"`
	DesktopPoolId string `pulumi:"desktopPoolId"`
	// Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
	DevicePolicies []GetDesktopPoolDevicePolicy `pulumi:"devicePolicies"`
	// A user friendly display name. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the desktop pool.
	Id string `pulumi:"id"`
	// Provides information about the desktop image.
	Images []GetDesktopPoolImage `pulumi:"images"`
	// Indicates whether storage is enabled for the desktop pool.
	IsStorageEnabled bool `pulumi:"isStorageEnabled"`
	// The maximum number of desktops permitted in the desktop pool.
	MaximumSize int `pulumi:"maximumSize"`
	// Provides information about the network configuration of the desktop pool.
	NetworkConfigurations []GetDesktopPoolNetworkConfiguration `pulumi:"networkConfigurations"`
	// A list of network security groups for the private access.
	NsgIds []string `pulumi:"nsgIds"`
	// The details of the desktop's private access network connectivity that were used to create the pool.
	PrivateAccessDetails []GetDesktopPoolPrivateAccessDetail `pulumi:"privateAccessDetails"`
	// Action to be triggered on inactivity or disconnect
	SessionLifecycleActions []GetDesktopPoolSessionLifecycleAction `pulumi:"sessionLifecycleActions"`
	// The shape configuration used for each desktop compute instance in the desktop pool.
	ShapeConfigs []GetDesktopPoolShapeConfig `pulumi:"shapeConfigs"`
	// The shape of the desktop pool.
	ShapeName string `pulumi:"shapeName"`
	// The maximum number of standby desktops available in the desktop pool.
	StandbySize int `pulumi:"standbySize"`
	// The current state of the desktop pool.
	State string `pulumi:"state"`
	// The backup policy OCID of the storage.
	StorageBackupPolicyId string `pulumi:"storageBackupPolicyId"`
	// The size in GBs of the storage for the desktop pool.
	StorageSizeInGbs int `pulumi:"storageSizeInGbs"`
	// The date and time the resource was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The start time of the desktop pool.
	TimeStartScheduled string `pulumi:"timeStartScheduled"`
	// The stop time of the desktop pool.
	TimeStopScheduled string `pulumi:"timeStopScheduled"`
	// Indicates whether the desktop pool uses dedicated virtual machine hosts.
	// ---
	UseDedicatedVmHost string `pulumi:"useDedicatedVmHost"`
}

func LookupDesktopPoolOutput(ctx *pulumi.Context, args LookupDesktopPoolOutputArgs, opts ...pulumi.InvokeOption) LookupDesktopPoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDesktopPoolResultOutput, error) {
			args := v.(LookupDesktopPoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Desktops/getDesktopPool:getDesktopPool", args, LookupDesktopPoolResultOutput{}, options).(LookupDesktopPoolResultOutput), nil
		}).(LookupDesktopPoolResultOutput)
}

// A collection of arguments for invoking getDesktopPool.
type LookupDesktopPoolOutputArgs struct {
	// The OCID of the desktop pool.
	DesktopPoolId pulumi.StringInput `pulumi:"desktopPoolId"`
}

func (LookupDesktopPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDesktopPoolArgs)(nil)).Elem()
}

// A collection of values returned by getDesktopPool.
type LookupDesktopPoolResultOutput struct{ *pulumi.OutputState }

func (LookupDesktopPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDesktopPoolResult)(nil)).Elem()
}

func (o LookupDesktopPoolResultOutput) ToLookupDesktopPoolResultOutput() LookupDesktopPoolResultOutput {
	return o
}

func (o LookupDesktopPoolResultOutput) ToLookupDesktopPoolResultOutputWithContext(ctx context.Context) LookupDesktopPoolResultOutput {
	return o
}

// The number of active desktops in the desktop pool.
func (o LookupDesktopPoolResultOutput) ActiveDesktops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) int { return v.ActiveDesktops }).(pulumi.IntOutput)
}

// Indicates whether desktop pool users have administrative privileges on their desktop.
func (o LookupDesktopPoolResultOutput) ArePrivilegedUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) bool { return v.ArePrivilegedUsers }).(pulumi.BoolOutput)
}

func (o LookupDesktopPoolResultOutput) AreVolumesPreserved() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) bool { return v.AreVolumesPreserved }).(pulumi.BoolOutput)
}

// The availability domain of the desktop pool.
func (o LookupDesktopPoolResultOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// Provides the start and stop schedule information for desktop availability of the desktop pool.
func (o LookupDesktopPoolResultOutput) AvailabilityPolicies() GetDesktopPoolAvailabilityPolicyArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolAvailabilityPolicy { return v.AvailabilityPolicies }).(GetDesktopPoolAvailabilityPolicyArrayOutput)
}

// The OCID of the compartment of the desktop pool.
func (o LookupDesktopPoolResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Contact information of the desktop pool administrator. Avoid entering confidential information.
func (o LookupDesktopPoolResultOutput) ContactDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.ContactDetails }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o LookupDesktopPoolResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A user friendly description providing additional information about the resource. Avoid entering confidential information.
func (o LookupDesktopPoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupDesktopPoolResultOutput) DesktopPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.DesktopPoolId }).(pulumi.StringOutput)
}

// Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
func (o LookupDesktopPoolResultOutput) DevicePolicies() GetDesktopPoolDevicePolicyArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolDevicePolicy { return v.DevicePolicies }).(GetDesktopPoolDevicePolicyArrayOutput)
}

// A user friendly display name. Avoid entering confidential information.
func (o LookupDesktopPoolResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o LookupDesktopPoolResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The OCID of the desktop pool.
func (o LookupDesktopPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// Provides information about the desktop image.
func (o LookupDesktopPoolResultOutput) Images() GetDesktopPoolImageArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolImage { return v.Images }).(GetDesktopPoolImageArrayOutput)
}

// Indicates whether storage is enabled for the desktop pool.
func (o LookupDesktopPoolResultOutput) IsStorageEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) bool { return v.IsStorageEnabled }).(pulumi.BoolOutput)
}

// The maximum number of desktops permitted in the desktop pool.
func (o LookupDesktopPoolResultOutput) MaximumSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) int { return v.MaximumSize }).(pulumi.IntOutput)
}

// Provides information about the network configuration of the desktop pool.
func (o LookupDesktopPoolResultOutput) NetworkConfigurations() GetDesktopPoolNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolNetworkConfiguration { return v.NetworkConfigurations }).(GetDesktopPoolNetworkConfigurationArrayOutput)
}

// A list of network security groups for the private access.
func (o LookupDesktopPoolResultOutput) NsgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []string { return v.NsgIds }).(pulumi.StringArrayOutput)
}

// The details of the desktop's private access network connectivity that were used to create the pool.
func (o LookupDesktopPoolResultOutput) PrivateAccessDetails() GetDesktopPoolPrivateAccessDetailArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolPrivateAccessDetail { return v.PrivateAccessDetails }).(GetDesktopPoolPrivateAccessDetailArrayOutput)
}

// Action to be triggered on inactivity or disconnect
func (o LookupDesktopPoolResultOutput) SessionLifecycleActions() GetDesktopPoolSessionLifecycleActionArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolSessionLifecycleAction {
		return v.SessionLifecycleActions
	}).(GetDesktopPoolSessionLifecycleActionArrayOutput)
}

// The shape configuration used for each desktop compute instance in the desktop pool.
func (o LookupDesktopPoolResultOutput) ShapeConfigs() GetDesktopPoolShapeConfigArrayOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) []GetDesktopPoolShapeConfig { return v.ShapeConfigs }).(GetDesktopPoolShapeConfigArrayOutput)
}

// The shape of the desktop pool.
func (o LookupDesktopPoolResultOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The maximum number of standby desktops available in the desktop pool.
func (o LookupDesktopPoolResultOutput) StandbySize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) int { return v.StandbySize }).(pulumi.IntOutput)
}

// The current state of the desktop pool.
func (o LookupDesktopPoolResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.State }).(pulumi.StringOutput)
}

// The backup policy OCID of the storage.
func (o LookupDesktopPoolResultOutput) StorageBackupPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.StorageBackupPolicyId }).(pulumi.StringOutput)
}

// The size in GBs of the storage for the desktop pool.
func (o LookupDesktopPoolResultOutput) StorageSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) int { return v.StorageSizeInGbs }).(pulumi.IntOutput)
}

// The date and time the resource was created.
func (o LookupDesktopPoolResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The start time of the desktop pool.
func (o LookupDesktopPoolResultOutput) TimeStartScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.TimeStartScheduled }).(pulumi.StringOutput)
}

// The stop time of the desktop pool.
func (o LookupDesktopPoolResultOutput) TimeStopScheduled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.TimeStopScheduled }).(pulumi.StringOutput)
}

// Indicates whether the desktop pool uses dedicated virtual machine hosts.
// ---
func (o LookupDesktopPoolResultOutput) UseDedicatedVmHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDesktopPoolResult) string { return v.UseDedicatedVmHost }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDesktopPoolResultOutput{})
}
