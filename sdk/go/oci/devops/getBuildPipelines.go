// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Build Pipelines in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of build pipelines.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetBuildPipelines(ctx, &devops.GetBuildPipelinesArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				DisplayName:   pulumi.StringRef(buildPipelineDisplayName),
//				Id:            pulumi.StringRef(buildPipelineId),
//				ProjectId:     pulumi.StringRef(testProject.Id),
//				State:         pulumi.StringRef(buildPipelineState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetBuildPipelines(ctx *pulumi.Context, args *GetBuildPipelinesArgs, opts ...pulumi.InvokeOption) (*GetBuildPipelinesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBuildPipelinesResult
	err := ctx.Invoke("oci:DevOps/getBuildPipelines:getBuildPipelines", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBuildPipelines.
type GetBuildPipelinesArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                   `pulumi:"displayName"`
	Filters     []GetBuildPipelinesFilter `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id *string `pulumi:"id"`
	// unique project identifier
	ProjectId *string `pulumi:"projectId"`
	// A filter to return only build pipelines that matches the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getBuildPipelines.
type GetBuildPipelinesResult struct {
	// The list of build_pipeline_collection.
	BuildPipelineCollections []GetBuildPipelinesBuildPipelineCollection `pulumi:"buildPipelineCollections"`
	// The OCID of the compartment where the build pipeline is created.
	CompartmentId *string `pulumi:"compartmentId"`
	// Build pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
	DisplayName *string                   `pulumi:"displayName"`
	Filters     []GetBuildPipelinesFilter `pulumi:"filters"`
	// Unique identifier that is immutable on creation.
	Id *string `pulumi:"id"`
	// The OCID of the DevOps project.
	ProjectId *string `pulumi:"projectId"`
	// The current state of the build pipeline.
	State *string `pulumi:"state"`
}

func GetBuildPipelinesOutput(ctx *pulumi.Context, args GetBuildPipelinesOutputArgs, opts ...pulumi.InvokeOption) GetBuildPipelinesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBuildPipelinesResult, error) {
			args := v.(GetBuildPipelinesArgs)
			r, err := GetBuildPipelines(ctx, &args, opts...)
			var s GetBuildPipelinesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBuildPipelinesResultOutput)
}

// A collection of arguments for invoking getBuildPipelines.
type GetBuildPipelinesOutputArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput             `pulumi:"displayName"`
	Filters     GetBuildPipelinesFilterArrayInput `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// unique project identifier
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// A filter to return only build pipelines that matches the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetBuildPipelinesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBuildPipelinesArgs)(nil)).Elem()
}

// A collection of values returned by getBuildPipelines.
type GetBuildPipelinesResultOutput struct{ *pulumi.OutputState }

func (GetBuildPipelinesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBuildPipelinesResult)(nil)).Elem()
}

func (o GetBuildPipelinesResultOutput) ToGetBuildPipelinesResultOutput() GetBuildPipelinesResultOutput {
	return o
}

func (o GetBuildPipelinesResultOutput) ToGetBuildPipelinesResultOutputWithContext(ctx context.Context) GetBuildPipelinesResultOutput {
	return o
}

// The list of build_pipeline_collection.
func (o GetBuildPipelinesResultOutput) BuildPipelineCollections() GetBuildPipelinesBuildPipelineCollectionArrayOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) []GetBuildPipelinesBuildPipelineCollection {
		return v.BuildPipelineCollections
	}).(GetBuildPipelinesBuildPipelineCollectionArrayOutput)
}

// The OCID of the compartment where the build pipeline is created.
func (o GetBuildPipelinesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// Build pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
func (o GetBuildPipelinesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetBuildPipelinesResultOutput) Filters() GetBuildPipelinesFilterArrayOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) []GetBuildPipelinesFilter { return v.Filters }).(GetBuildPipelinesFilterArrayOutput)
}

// Unique identifier that is immutable on creation.
func (o GetBuildPipelinesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The OCID of the DevOps project.
func (o GetBuildPipelinesResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The current state of the build pipeline.
func (o GetBuildPipelinesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildPipelinesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBuildPipelinesResultOutput{})
}
