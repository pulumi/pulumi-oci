// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Build Runs in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of build run summary.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetBuildRuns(ctx, &devops.GetBuildRunsArgs{
//				BuildPipelineId: pulumi.StringRef(oci_devops_build_pipeline.Test_build_pipeline.Id),
//				CompartmentId:   pulumi.StringRef(_var.Compartment_id),
//				DisplayName:     pulumi.StringRef(_var.Build_run_display_name),
//				Id:              pulumi.StringRef(_var.Build_run_id),
//				ProjectId:       pulumi.StringRef(oci_devops_project.Test_project.Id),
//				State:           pulumi.StringRef(_var.Build_run_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBuildRuns(ctx *pulumi.Context, args *GetBuildRunsArgs, opts ...pulumi.InvokeOption) (*GetBuildRunsResult, error) {
	var rv GetBuildRunsResult
	err := ctx.Invoke("oci:DevOps/getBuildRuns:getBuildRuns", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBuildRuns.
type GetBuildRunsArgs struct {
	// Unique build pipeline identifier.
	BuildPipelineId *string `pulumi:"buildPipelineId"`
	// The OCID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string `pulumi:"displayName"`
	// The filters for the trigger.
	Filters []GetBuildRunsFilter `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id *string `pulumi:"id"`
	// unique project identifier
	ProjectId *string `pulumi:"projectId"`
	// A filter to return only build runs that matches the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getBuildRuns.
type GetBuildRunsResult struct {
	// The OCID of the build pipeline to be triggered.
	BuildPipelineId *string `pulumi:"buildPipelineId"`
	// The list of build_run_summary_collection.
	BuildRunSummaryCollections []GetBuildRunsBuildRunSummaryCollection `pulumi:"buildRunSummaryCollections"`
	// The OCID of the compartment where the build is running.
	CompartmentId *string `pulumi:"compartmentId"`
	// Build run display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The filters for the trigger.
	Filters []GetBuildRunsFilter `pulumi:"filters"`
	// Unique identifier that is immutable on creation.
	Id *string `pulumi:"id"`
	// The OCID of the DevOps project.
	ProjectId *string `pulumi:"projectId"`
	// The current state of the build run.
	State *string `pulumi:"state"`
}

func GetBuildRunsOutput(ctx *pulumi.Context, args GetBuildRunsOutputArgs, opts ...pulumi.InvokeOption) GetBuildRunsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBuildRunsResult, error) {
			args := v.(GetBuildRunsArgs)
			r, err := GetBuildRuns(ctx, &args, opts...)
			var s GetBuildRunsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBuildRunsResultOutput)
}

// A collection of arguments for invoking getBuildRuns.
type GetBuildRunsOutputArgs struct {
	// Unique build pipeline identifier.
	BuildPipelineId pulumi.StringPtrInput `pulumi:"buildPipelineId"`
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The filters for the trigger.
	Filters GetBuildRunsFilterArrayInput `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// unique project identifier
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// A filter to return only build runs that matches the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetBuildRunsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBuildRunsArgs)(nil)).Elem()
}

// A collection of values returned by getBuildRuns.
type GetBuildRunsResultOutput struct{ *pulumi.OutputState }

func (GetBuildRunsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBuildRunsResult)(nil)).Elem()
}

func (o GetBuildRunsResultOutput) ToGetBuildRunsResultOutput() GetBuildRunsResultOutput {
	return o
}

func (o GetBuildRunsResultOutput) ToGetBuildRunsResultOutputWithContext(ctx context.Context) GetBuildRunsResultOutput {
	return o
}

// The OCID of the build pipeline to be triggered.
func (o GetBuildRunsResultOutput) BuildPipelineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.BuildPipelineId }).(pulumi.StringPtrOutput)
}

// The list of build_run_summary_collection.
func (o GetBuildRunsResultOutput) BuildRunSummaryCollections() GetBuildRunsBuildRunSummaryCollectionArrayOutput {
	return o.ApplyT(func(v GetBuildRunsResult) []GetBuildRunsBuildRunSummaryCollection {
		return v.BuildRunSummaryCollections
	}).(GetBuildRunsBuildRunSummaryCollectionArrayOutput)
}

// The OCID of the compartment where the build is running.
func (o GetBuildRunsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// Build run display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
func (o GetBuildRunsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The filters for the trigger.
func (o GetBuildRunsResultOutput) Filters() GetBuildRunsFilterArrayOutput {
	return o.ApplyT(func(v GetBuildRunsResult) []GetBuildRunsFilter { return v.Filters }).(GetBuildRunsFilterArrayOutput)
}

// Unique identifier that is immutable on creation.
func (o GetBuildRunsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The OCID of the DevOps project.
func (o GetBuildRunsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The current state of the build run.
func (o GetBuildRunsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBuildRunsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBuildRunsResultOutput{})
}
