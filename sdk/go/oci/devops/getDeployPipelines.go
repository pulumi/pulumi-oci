// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Deploy Pipelines in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of deployment pipelines.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetDeployPipelines(ctx, &devops.GetDeployPipelinesArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				DisplayName:   pulumi.StringRef(deployPipelineDisplayName),
//				Id:            pulumi.StringRef(deployPipelineId),
//				ProjectId:     pulumi.StringRef(testProject.Id),
//				State:         pulumi.StringRef(deployPipelineState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDeployPipelines(ctx *pulumi.Context, args *GetDeployPipelinesArgs, opts ...pulumi.InvokeOption) (*GetDeployPipelinesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeployPipelinesResult
	err := ctx.Invoke("oci:DevOps/getDeployPipelines:getDeployPipelines", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployPipelines.
type GetDeployPipelinesArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetDeployPipelinesFilter `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id *string `pulumi:"id"`
	// unique project identifier
	ProjectId *string `pulumi:"projectId"`
	// A filter to return only DeployPipelines that matches the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getDeployPipelines.
type GetDeployPipelinesResult struct {
	// The OCID of the compartment where the pipeline is created.
	CompartmentId *string `pulumi:"compartmentId"`
	// The list of deploy_pipeline_collection.
	DeployPipelineCollections []GetDeployPipelinesDeployPipelineCollection `pulumi:"deployPipelineCollections"`
	// Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetDeployPipelinesFilter `pulumi:"filters"`
	// Unique identifier that is immutable on creation.
	Id *string `pulumi:"id"`
	// The OCID of a project.
	ProjectId *string `pulumi:"projectId"`
	// The current state of the deployment pipeline.
	State *string `pulumi:"state"`
}

func GetDeployPipelinesOutput(ctx *pulumi.Context, args GetDeployPipelinesOutputArgs, opts ...pulumi.InvokeOption) GetDeployPipelinesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeployPipelinesResultOutput, error) {
			args := v.(GetDeployPipelinesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetDeployPipelinesResult
			secret, err := ctx.InvokePackageRaw("oci:DevOps/getDeployPipelines:getDeployPipelines", args, &rv, "", opts...)
			if err != nil {
				return GetDeployPipelinesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetDeployPipelinesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetDeployPipelinesResultOutput), nil
			}
			return output, nil
		}).(GetDeployPipelinesResultOutput)
}

// A collection of arguments for invoking getDeployPipelines.
type GetDeployPipelinesOutputArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput              `pulumi:"displayName"`
	Filters     GetDeployPipelinesFilterArrayInput `pulumi:"filters"`
	// Unique identifier or OCID for listing a single resource by ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// unique project identifier
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// A filter to return only DeployPipelines that matches the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetDeployPipelinesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeployPipelinesArgs)(nil)).Elem()
}

// A collection of values returned by getDeployPipelines.
type GetDeployPipelinesResultOutput struct{ *pulumi.OutputState }

func (GetDeployPipelinesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeployPipelinesResult)(nil)).Elem()
}

func (o GetDeployPipelinesResultOutput) ToGetDeployPipelinesResultOutput() GetDeployPipelinesResultOutput {
	return o
}

func (o GetDeployPipelinesResultOutput) ToGetDeployPipelinesResultOutputWithContext(ctx context.Context) GetDeployPipelinesResultOutput {
	return o
}

// The OCID of the compartment where the pipeline is created.
func (o GetDeployPipelinesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// The list of deploy_pipeline_collection.
func (o GetDeployPipelinesResultOutput) DeployPipelineCollections() GetDeployPipelinesDeployPipelineCollectionArrayOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) []GetDeployPipelinesDeployPipelineCollection {
		return v.DeployPipelineCollections
	}).(GetDeployPipelinesDeployPipelineCollectionArrayOutput)
}

// Deployment pipeline display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
func (o GetDeployPipelinesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetDeployPipelinesResultOutput) Filters() GetDeployPipelinesFilterArrayOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) []GetDeployPipelinesFilter { return v.Filters }).(GetDeployPipelinesFilterArrayOutput)
}

// Unique identifier that is immutable on creation.
func (o GetDeployPipelinesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The OCID of a project.
func (o GetDeployPipelinesResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The current state of the deployment pipeline.
func (o GetDeployPipelinesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeployPipelinesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeployPipelinesResultOutput{})
}
