// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Project Repository Setting resource in Oracle Cloud Infrastructure Devops service.
//
// Retrieves a project's repository settings details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetProjectRepositorySetting(ctx, &devops.GetProjectRepositorySettingArgs{
//				ProjectId: testProject.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectRepositorySetting(ctx *pulumi.Context, args *LookupProjectRepositorySettingArgs, opts ...pulumi.InvokeOption) (*LookupProjectRepositorySettingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectRepositorySettingResult
	err := ctx.Invoke("oci:DevOps/getProjectRepositorySetting:getProjectRepositorySetting", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectRepositorySetting.
type LookupProjectRepositorySettingArgs struct {
	// Unique project identifier.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectRepositorySetting.
type LookupProjectRepositorySettingResult struct {
	// List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules []GetProjectRepositorySettingApprovalRule `pulumi:"approvalRules"`
	Id            string                                    `pulumi:"id"`
	// Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings []GetProjectRepositorySettingMergeSetting `pulumi:"mergeSettings"`
	ProjectId     string                                    `pulumi:"projectId"`
}

func LookupProjectRepositorySettingOutput(ctx *pulumi.Context, args LookupProjectRepositorySettingOutputArgs, opts ...pulumi.InvokeOption) LookupProjectRepositorySettingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectRepositorySettingResultOutput, error) {
			args := v.(LookupProjectRepositorySettingArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupProjectRepositorySettingResult
			secret, err := ctx.InvokePackageRaw("oci:DevOps/getProjectRepositorySetting:getProjectRepositorySetting", args, &rv, "", opts...)
			if err != nil {
				return LookupProjectRepositorySettingResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupProjectRepositorySettingResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupProjectRepositorySettingResultOutput), nil
			}
			return output, nil
		}).(LookupProjectRepositorySettingResultOutput)
}

// A collection of arguments for invoking getProjectRepositorySetting.
type LookupProjectRepositorySettingOutputArgs struct {
	// Unique project identifier.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupProjectRepositorySettingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectRepositorySettingArgs)(nil)).Elem()
}

// A collection of values returned by getProjectRepositorySetting.
type LookupProjectRepositorySettingResultOutput struct{ *pulumi.OutputState }

func (LookupProjectRepositorySettingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectRepositorySettingResult)(nil)).Elem()
}

func (o LookupProjectRepositorySettingResultOutput) ToLookupProjectRepositorySettingResultOutput() LookupProjectRepositorySettingResultOutput {
	return o
}

func (o LookupProjectRepositorySettingResultOutput) ToLookupProjectRepositorySettingResultOutputWithContext(ctx context.Context) LookupProjectRepositorySettingResultOutput {
	return o
}

// List of approval rules which must be statisfied before pull requests which match the rules can be merged
func (o LookupProjectRepositorySettingResultOutput) ApprovalRules() GetProjectRepositorySettingApprovalRuleArrayOutput {
	return o.ApplyT(func(v LookupProjectRepositorySettingResult) []GetProjectRepositorySettingApprovalRule {
		return v.ApprovalRules
	}).(GetProjectRepositorySettingApprovalRuleArrayOutput)
}

func (o LookupProjectRepositorySettingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRepositorySettingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
func (o LookupProjectRepositorySettingResultOutput) MergeSettings() GetProjectRepositorySettingMergeSettingArrayOutput {
	return o.ApplyT(func(v LookupProjectRepositorySettingResult) []GetProjectRepositorySettingMergeSetting {
		return v.MergeSettings
	}).(GetProjectRepositorySettingMergeSettingArrayOutput)
}

func (o LookupProjectRepositorySettingResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectRepositorySettingResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectRepositorySettingResultOutput{})
}
