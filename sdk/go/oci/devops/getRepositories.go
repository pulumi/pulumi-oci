// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Repositories in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of repositories given a compartment ID or a project ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepositories(ctx, &devops.GetRepositoriesArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				Name:          pulumi.StringRef(repositoryName),
//				ProjectId:     pulumi.StringRef(testProject.Id),
//				RepositoryId:  pulumi.StringRef(testRepository.Id),
//				State:         pulumi.StringRef(repositoryState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositories(ctx *pulumi.Context, args *GetRepositoriesArgs, opts ...pulumi.InvokeOption) (*GetRepositoriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoriesResult
	err := ctx.Invoke("oci:DevOps/getRepositories:getRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositories.
type GetRepositoriesArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId *string                 `pulumi:"compartmentId"`
	Filters       []GetRepositoriesFilter `pulumi:"filters"`
	// A filter to return only resources that match the entire name given.
	Name *string `pulumi:"name"`
	// unique project identifier
	ProjectId *string `pulumi:"projectId"`
	// Unique repository identifier.
	RepositoryId *string `pulumi:"repositoryId"`
	// A filter to return only resources whose lifecycle state matches the given lifecycle state.
	State *string `pulumi:"state"`
}

// A collection of values returned by getRepositories.
type GetRepositoriesResult struct {
	// The OCID of the repository's compartment.
	CompartmentId *string                 `pulumi:"compartmentId"`
	Filters       []GetRepositoriesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the repository. Should be unique within the project. This value is mutable.
	Name *string `pulumi:"name"`
	// The OCID of the DevOps project containing the repository.
	ProjectId *string `pulumi:"projectId"`
	// The list of repository_collection.
	RepositoryCollections []GetRepositoriesRepositoryCollection `pulumi:"repositoryCollections"`
	RepositoryId          *string                               `pulumi:"repositoryId"`
	// The current state of the repository.
	State *string `pulumi:"state"`
}

func GetRepositoriesOutput(ctx *pulumi.Context, args GetRepositoriesOutputArgs, opts ...pulumi.InvokeOption) GetRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRepositoriesResultOutput, error) {
			args := v.(GetRepositoriesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepositories:getRepositories", args, GetRepositoriesResultOutput{}, options).(GetRepositoriesResultOutput), nil
		}).(GetRepositoriesResultOutput)
}

// A collection of arguments for invoking getRepositories.
type GetRepositoriesOutputArgs struct {
	// The OCID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput           `pulumi:"compartmentId"`
	Filters       GetRepositoriesFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the entire name given.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// unique project identifier
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Unique repository identifier.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// A filter to return only resources whose lifecycle state matches the given lifecycle state.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesArgs)(nil)).Elem()
}

// A collection of values returned by getRepositories.
type GetRepositoriesResultOutput struct{ *pulumi.OutputState }

func (GetRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesResult)(nil)).Elem()
}

func (o GetRepositoriesResultOutput) ToGetRepositoriesResultOutput() GetRepositoriesResultOutput {
	return o
}

func (o GetRepositoriesResultOutput) ToGetRepositoriesResultOutputWithContext(ctx context.Context) GetRepositoriesResultOutput {
	return o
}

// The OCID of the repository's compartment.
func (o GetRepositoriesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetRepositoriesResultOutput) Filters() GetRepositoriesFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoriesResult) []GetRepositoriesFilter { return v.Filters }).(GetRepositoriesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the repository. Should be unique within the project. This value is mutable.
func (o GetRepositoriesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The OCID of the DevOps project containing the repository.
func (o GetRepositoriesResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The list of repository_collection.
func (o GetRepositoriesResultOutput) RepositoryCollections() GetRepositoriesRepositoryCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoriesResult) []GetRepositoriesRepositoryCollection { return v.RepositoryCollections }).(GetRepositoriesRepositoryCollectionArrayOutput)
}

func (o GetRepositoriesResultOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The current state of the repository.
func (o GetRepositoriesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoriesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoriesResultOutput{})
}
