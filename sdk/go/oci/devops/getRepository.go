// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository resource in Oracle Cloud Infrastructure Devops service.
//
// Retrieves a repository by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepository(ctx, &devops.GetRepositoryArgs{
//				RepositoryId: testRepositoryOciDevopsRepository.Id,
//				Fields:       repositoryFields,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryResult
	err := ctx.Invoke("oci:DevOps/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// Fields parameter can contain multiple flags useful in deciding the API functionality.
	Fields []string `pulumi:"fields"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	// The count of the branches present in the repository.
	BranchCount int `pulumi:"branchCount"`
	// The count of the commits present in the repository.
	CommitCount int `pulumi:"commitCount"`
	// The OCID of the repository's compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The default branch of the repository.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Details of the repository. Avoid entering confidential information.
	Description string   `pulumi:"description"`
	Fields      []string `pulumi:"fields"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// HTTP URL that you use to git clone, pull and push.
	HttpUrl string `pulumi:"httpUrl"`
	// The OCID of the repository. This value is unique and immutable.
	Id string `pulumi:"id"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecyleDetails string `pulumi:"lifecyleDetails"`
	// Configuration information for mirroring the repository.
	MirrorRepositoryConfigs []GetRepositoryMirrorRepositoryConfig `pulumi:"mirrorRepositoryConfigs"`
	// Name of the repository. Should be unique within the project. This value is mutable.
	Name string `pulumi:"name"`
	// Tenancy unique namespace.
	Namespace string `pulumi:"namespace"`
	// The OCID of the parent repository.
	ParentRepositoryId string `pulumi:"parentRepositoryId"`
	// The OCID of the DevOps project containing the repository.
	ProjectId string `pulumi:"projectId"`
	// Unique project name in a namespace.
	ProjectName  string `pulumi:"projectName"`
	RepositoryId string `pulumi:"repositoryId"`
	// Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository. FORKED - Repository created by forking an existing repository.
	RepositoryType string `pulumi:"repositoryType"`
	// The size of the repository in bytes.
	SizeInBytes string `pulumi:"sizeInBytes"`
	// SSH URL that you use to git clone, pull and push.
	SshUrl string `pulumi:"sshUrl"`
	// The current state of the repository.
	State string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
	// Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. PULL_REQUEST_CREATED - Build is triggered when a pull request is created in the repository. PULL_REQUEST_UPDATED - Build is triggered when a push is made to a branch with an open pull request. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
	TriggerBuildEvents []string `pulumi:"triggerBuildEvents"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResultOutput, error) {
			args := v.(LookupRepositoryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepository:getRepository", args, LookupRepositoryResultOutput{}, options).(LookupRepositoryResultOutput), nil
		}).(LookupRepositoryResultOutput)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	// Fields parameter can contain multiple flags useful in deciding the API functionality.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRepository.
type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

// The count of the branches present in the repository.
func (o LookupRepositoryResultOutput) BranchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.BranchCount }).(pulumi.IntOutput)
}

// The count of the commits present in the repository.
func (o LookupRepositoryResultOutput) CommitCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.CommitCount }).(pulumi.IntOutput)
}

// The OCID of the repository's compartment.
func (o LookupRepositoryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The default branch of the repository.
func (o LookupRepositoryResultOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupRepositoryResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Details of the repository. Avoid entering confidential information.
func (o LookupRepositoryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
func (o LookupRepositoryResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// HTTP URL that you use to git clone, pull and push.
func (o LookupRepositoryResultOutput) HttpUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.HttpUrl }).(pulumi.StringOutput)
}

// The OCID of the repository. This value is unique and immutable.
func (o LookupRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o LookupRepositoryResultOutput) LifecyleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.LifecyleDetails }).(pulumi.StringOutput)
}

// Configuration information for mirroring the repository.
func (o LookupRepositoryResultOutput) MirrorRepositoryConfigs() GetRepositoryMirrorRepositoryConfigArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryMirrorRepositoryConfig { return v.MirrorRepositoryConfigs }).(GetRepositoryMirrorRepositoryConfigArrayOutput)
}

// Name of the repository. Should be unique within the project. This value is mutable.
func (o LookupRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

// Tenancy unique namespace.
func (o LookupRepositoryResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// The OCID of the parent repository.
func (o LookupRepositoryResultOutput) ParentRepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.ParentRepositoryId }).(pulumi.StringOutput)
}

// The OCID of the DevOps project containing the repository.
func (o LookupRepositoryResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Unique project name in a namespace.
func (o LookupRepositoryResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// Type of repository: MIRRORED - Repository created by mirroring an existing repository. HOSTED - Repository created and hosted using Oracle Cloud Infrastructure DevOps code repository. FORKED - Repository created by forking an existing repository.
func (o LookupRepositoryResultOutput) RepositoryType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.RepositoryType }).(pulumi.StringOutput)
}

// The size of the repository in bytes.
func (o LookupRepositoryResultOutput) SizeInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SizeInBytes }).(pulumi.StringOutput)
}

// SSH URL that you use to git clone, pull and push.
func (o LookupRepositoryResultOutput) SshUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SshUrl }).(pulumi.StringOutput)
}

// The current state of the repository.
func (o LookupRepositoryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupRepositoryResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the repository was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
func (o LookupRepositoryResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the repository was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
func (o LookupRepositoryResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// Trigger build events supported for this repository: PUSH - Build is triggered when a push event occurs. PULL_REQUEST_CREATED - Build is triggered when a pull request is created in the repository. PULL_REQUEST_UPDATED - Build is triggered when a push is made to a branch with an open pull request. COMMIT_UPDATES - Build is triggered when new commits are mirrored into a repository.
func (o LookupRepositoryResultOutput) TriggerBuildEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []string { return v.TriggerBuildEvents }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}
