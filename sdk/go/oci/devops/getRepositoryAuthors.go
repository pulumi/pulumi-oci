// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Repository Authors in Oracle Cloud Infrastructure Devops service.
//
// Retrieve a list of all the authors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryAuthors(ctx, &devops.GetRepositoryAuthorsArgs{
//				RepositoryId: oci_devops_repository.Test_repository.Id,
//				RefName:      pulumi.StringRef(_var.Repository_author_ref_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryAuthors(ctx *pulumi.Context, args *GetRepositoryAuthorsArgs, opts ...pulumi.InvokeOption) (*GetRepositoryAuthorsResult, error) {
	var rv GetRepositoryAuthorsResult
	err := ctx.Invoke("oci:DevOps/getRepositoryAuthors:getRepositoryAuthors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryAuthors.
type GetRepositoryAuthorsArgs struct {
	Filters []GetRepositoryAuthorsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName *string `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryAuthors.
type GetRepositoryAuthorsResult struct {
	Filters []GetRepositoryAuthorsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	RefName *string `pulumi:"refName"`
	// The list of repository_author_collection.
	RepositoryAuthorCollections []GetRepositoryAuthorsRepositoryAuthorCollection `pulumi:"repositoryAuthorCollections"`
	RepositoryId                string                                           `pulumi:"repositoryId"`
}

func GetRepositoryAuthorsOutput(ctx *pulumi.Context, args GetRepositoryAuthorsOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryAuthorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryAuthorsResult, error) {
			args := v.(GetRepositoryAuthorsArgs)
			r, err := GetRepositoryAuthors(ctx, &args, opts...)
			var s GetRepositoryAuthorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryAuthorsResultOutput)
}

// A collection of arguments for invoking getRepositoryAuthors.
type GetRepositoryAuthorsOutputArgs struct {
	Filters GetRepositoryAuthorsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringPtrInput `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetRepositoryAuthorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryAuthorsArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryAuthors.
type GetRepositoryAuthorsResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryAuthorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryAuthorsResult)(nil)).Elem()
}

func (o GetRepositoryAuthorsResultOutput) ToGetRepositoryAuthorsResultOutput() GetRepositoryAuthorsResultOutput {
	return o
}

func (o GetRepositoryAuthorsResultOutput) ToGetRepositoryAuthorsResultOutputWithContext(ctx context.Context) GetRepositoryAuthorsResultOutput {
	return o
}

func (o GetRepositoryAuthorsResultOutput) Filters() GetRepositoryAuthorsFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoryAuthorsResult) []GetRepositoryAuthorsFilter { return v.Filters }).(GetRepositoryAuthorsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryAuthorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryAuthorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryAuthorsResultOutput) RefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryAuthorsResult) *string { return v.RefName }).(pulumi.StringPtrOutput)
}

// The list of repository_author_collection.
func (o GetRepositoryAuthorsResultOutput) RepositoryAuthorCollections() GetRepositoryAuthorsRepositoryAuthorCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoryAuthorsResult) []GetRepositoryAuthorsRepositoryAuthorCollection {
		return v.RepositoryAuthorCollections
	}).(GetRepositoryAuthorsRepositoryAuthorCollectionArrayOutput)
}

func (o GetRepositoryAuthorsResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryAuthorsResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryAuthorsResultOutput{})
}
