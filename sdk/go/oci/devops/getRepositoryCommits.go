// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Repository Commits in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of commits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryCommits(ctx, &devops.GetRepositoryCommitsArgs{
//				RepositoryId:                  oci_devops_repository.Test_repository.Id,
//				AuthorName:                    pulumi.StringRef(_var.Repository_commit_author_name),
//				CommitMessage:                 pulumi.StringRef(_var.Repository_commit_commit_message),
//				ExcludeRefName:                pulumi.StringRef(_var.Repository_commit_exclude_ref_name),
//				FilePath:                      pulumi.StringRef(_var.Repository_commit_file_path),
//				RefName:                       pulumi.StringRef(_var.Repository_commit_ref_name),
//				TimestampGreaterThanOrEqualTo: pulumi.StringRef(_var.Repository_commit_timestamp_greater_than_or_equal_to),
//				TimestampLessThanOrEqualTo:    pulumi.StringRef(_var.Repository_commit_timestamp_less_than_or_equal_to),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryCommits(ctx *pulumi.Context, args *GetRepositoryCommitsArgs, opts ...pulumi.InvokeOption) (*GetRepositoryCommitsResult, error) {
	var rv GetRepositoryCommitsResult
	err := ctx.Invoke("oci:DevOps/getRepositoryCommits:getRepositoryCommits", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryCommits.
type GetRepositoryCommitsArgs struct {
	// A filter to return any commits that are pushed by the requested author.
	AuthorName *string `pulumi:"authorName"`
	// A filter to return any commits that contains the given message.
	CommitMessage *string `pulumi:"commitMessage"`
	// A filter to exclude commits that match the given reference name.
	ExcludeRefName *string `pulumi:"excludeRefName"`
	// A filter to return only commits that affect any of the specified paths.
	FilePath *string                      `pulumi:"filePath"`
	Filters  []GetRepositoryCommitsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName *string `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
	// A filter to return commits only created after the specified timestamp value.
	TimestampGreaterThanOrEqualTo *string `pulumi:"timestampGreaterThanOrEqualTo"`
	// A filter to return commits only created before the specified timestamp value.
	TimestampLessThanOrEqualTo *string `pulumi:"timestampLessThanOrEqualTo"`
}

// A collection of values returned by getRepositoryCommits.
type GetRepositoryCommitsResult struct {
	// Name of the author of the repository.
	AuthorName *string `pulumi:"authorName"`
	// The commit message.
	CommitMessage  *string                      `pulumi:"commitMessage"`
	ExcludeRefName *string                      `pulumi:"excludeRefName"`
	FilePath       *string                      `pulumi:"filePath"`
	Filters        []GetRepositoryCommitsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id      string  `pulumi:"id"`
	RefName *string `pulumi:"refName"`
	// The list of repository_commit_collection.
	RepositoryCommitCollections   []GetRepositoryCommitsRepositoryCommitCollection `pulumi:"repositoryCommitCollections"`
	RepositoryId                  string                                           `pulumi:"repositoryId"`
	TimestampGreaterThanOrEqualTo *string                                          `pulumi:"timestampGreaterThanOrEqualTo"`
	TimestampLessThanOrEqualTo    *string                                          `pulumi:"timestampLessThanOrEqualTo"`
}

func GetRepositoryCommitsOutput(ctx *pulumi.Context, args GetRepositoryCommitsOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryCommitsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryCommitsResult, error) {
			args := v.(GetRepositoryCommitsArgs)
			r, err := GetRepositoryCommits(ctx, &args, opts...)
			var s GetRepositoryCommitsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryCommitsResultOutput)
}

// A collection of arguments for invoking getRepositoryCommits.
type GetRepositoryCommitsOutputArgs struct {
	// A filter to return any commits that are pushed by the requested author.
	AuthorName pulumi.StringPtrInput `pulumi:"authorName"`
	// A filter to return any commits that contains the given message.
	CommitMessage pulumi.StringPtrInput `pulumi:"commitMessage"`
	// A filter to exclude commits that match the given reference name.
	ExcludeRefName pulumi.StringPtrInput `pulumi:"excludeRefName"`
	// A filter to return only commits that affect any of the specified paths.
	FilePath pulumi.StringPtrInput                `pulumi:"filePath"`
	Filters  GetRepositoryCommitsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringPtrInput `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// A filter to return commits only created after the specified timestamp value.
	TimestampGreaterThanOrEqualTo pulumi.StringPtrInput `pulumi:"timestampGreaterThanOrEqualTo"`
	// A filter to return commits only created before the specified timestamp value.
	TimestampLessThanOrEqualTo pulumi.StringPtrInput `pulumi:"timestampLessThanOrEqualTo"`
}

func (GetRepositoryCommitsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCommitsArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryCommits.
type GetRepositoryCommitsResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryCommitsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryCommitsResult)(nil)).Elem()
}

func (o GetRepositoryCommitsResultOutput) ToGetRepositoryCommitsResultOutput() GetRepositoryCommitsResultOutput {
	return o
}

func (o GetRepositoryCommitsResultOutput) ToGetRepositoryCommitsResultOutputWithContext(ctx context.Context) GetRepositoryCommitsResultOutput {
	return o
}

// Name of the author of the repository.
func (o GetRepositoryCommitsResultOutput) AuthorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.AuthorName }).(pulumi.StringPtrOutput)
}

// The commit message.
func (o GetRepositoryCommitsResultOutput) CommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.CommitMessage }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryCommitsResultOutput) ExcludeRefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.ExcludeRefName }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryCommitsResultOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryCommitsResultOutput) Filters() GetRepositoryCommitsFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) []GetRepositoryCommitsFilter { return v.Filters }).(GetRepositoryCommitsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryCommitsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryCommitsResultOutput) RefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.RefName }).(pulumi.StringPtrOutput)
}

// The list of repository_commit_collection.
func (o GetRepositoryCommitsResultOutput) RepositoryCommitCollections() GetRepositoryCommitsRepositoryCommitCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) []GetRepositoryCommitsRepositoryCommitCollection {
		return v.RepositoryCommitCollections
	}).(GetRepositoryCommitsRepositoryCommitCollectionArrayOutput)
}

func (o GetRepositoryCommitsResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o GetRepositoryCommitsResultOutput) TimestampGreaterThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.TimestampGreaterThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryCommitsResultOutput) TimestampLessThanOrEqualTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryCommitsResult) *string { return v.TimestampLessThanOrEqualTo }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryCommitsResultOutput{})
}
