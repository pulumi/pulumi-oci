// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository Diff resource in Oracle Cloud Infrastructure Devops service.
//
// Gets the line-by-line difference between file on different commits. This API will be deprecated on Wed, 29 Mar 2023 01:00:00 GMT as it does not get recognized when filePath has '/'. This will be replaced by "/repositories/{repositoryId}/file/diffs"
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryDiff(ctx, &devops.GetRepositoryDiffArgs{
//				BaseVersion:               _var.Repository_diff_base_version,
//				FilePath:                  _var.Repository_diff_file_path,
//				RepositoryId:              oci_devops_repository.Test_repository.Id,
//				TargetVersion:             _var.Repository_diff_target_version,
//				IsComparisonFromMergeBase: pulumi.BoolRef(_var.Repository_diff_is_comparison_from_merge_base),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryDiff(ctx *pulumi.Context, args *GetRepositoryDiffArgs, opts ...pulumi.InvokeOption) (*GetRepositoryDiffResult, error) {
	var rv GetRepositoryDiffResult
	err := ctx.Invoke("oci:DevOps/getRepositoryDiff:getRepositoryDiff", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryDiff.
type GetRepositoryDiffArgs struct {
	// The branch to compare changes against.
	BaseVersion string `pulumi:"baseVersion"`
	// Path to a file within a repository.
	FilePath string `pulumi:"filePath"`
	// Boolean to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase *bool `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
	// The branch where changes are coming from.
	TargetVersion string `pulumi:"targetVersion"`
}

// A collection of values returned by getRepositoryDiff.
type GetRepositoryDiffResult struct {
	// Indicates whether the changed file contains conflicts.
	AreConflictsInFile bool   `pulumi:"areConflictsInFile"`
	BaseVersion        string `pulumi:"baseVersion"`
	// List of changed section in the file.
	Changes  []GetRepositoryDiffChange `pulumi:"changes"`
	FilePath string                    `pulumi:"filePath"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the file is binary.
	IsBinary                  bool  `pulumi:"isBinary"`
	IsComparisonFromMergeBase *bool `pulumi:"isComparisonFromMergeBase"`
	// Indicates whether the file is large.
	IsLarge bool `pulumi:"isLarge"`
	// The ID of the changed object on the target version.
	NewId string `pulumi:"newId"`
	// The path on the target version to the changed object.
	NewPath string `pulumi:"newPath"`
	// The ID of the changed object on the base version.
	OldId string `pulumi:"oldId"`
	// The path on the base version to the changed object.
	OldPath       string `pulumi:"oldPath"`
	RepositoryId  string `pulumi:"repositoryId"`
	TargetVersion string `pulumi:"targetVersion"`
}

func GetRepositoryDiffOutput(ctx *pulumi.Context, args GetRepositoryDiffOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryDiffResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryDiffResult, error) {
			args := v.(GetRepositoryDiffArgs)
			r, err := GetRepositoryDiff(ctx, &args, opts...)
			var s GetRepositoryDiffResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryDiffResultOutput)
}

// A collection of arguments for invoking getRepositoryDiff.
type GetRepositoryDiffOutputArgs struct {
	// The branch to compare changes against.
	BaseVersion pulumi.StringInput `pulumi:"baseVersion"`
	// Path to a file within a repository.
	FilePath pulumi.StringInput `pulumi:"filePath"`
	// Boolean to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase pulumi.BoolPtrInput `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The branch where changes are coming from.
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
}

func (GetRepositoryDiffOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDiffArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryDiff.
type GetRepositoryDiffResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryDiffResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDiffResult)(nil)).Elem()
}

func (o GetRepositoryDiffResultOutput) ToGetRepositoryDiffResultOutput() GetRepositoryDiffResultOutput {
	return o
}

func (o GetRepositoryDiffResultOutput) ToGetRepositoryDiffResultOutputWithContext(ctx context.Context) GetRepositoryDiffResultOutput {
	return o
}

// Indicates whether the changed file contains conflicts.
func (o GetRepositoryDiffResultOutput) AreConflictsInFile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) bool { return v.AreConflictsInFile }).(pulumi.BoolOutput)
}

func (o GetRepositoryDiffResultOutput) BaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.BaseVersion }).(pulumi.StringOutput)
}

// List of changed section in the file.
func (o GetRepositoryDiffResultOutput) Changes() GetRepositoryDiffChangeArrayOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) []GetRepositoryDiffChange { return v.Changes }).(GetRepositoryDiffChangeArrayOutput)
}

func (o GetRepositoryDiffResultOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.FilePath }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryDiffResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the file is binary.
func (o GetRepositoryDiffResultOutput) IsBinary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) bool { return v.IsBinary }).(pulumi.BoolOutput)
}

func (o GetRepositoryDiffResultOutput) IsComparisonFromMergeBase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) *bool { return v.IsComparisonFromMergeBase }).(pulumi.BoolPtrOutput)
}

// Indicates whether the file is large.
func (o GetRepositoryDiffResultOutput) IsLarge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) bool { return v.IsLarge }).(pulumi.BoolOutput)
}

// The ID of the changed object on the target version.
func (o GetRepositoryDiffResultOutput) NewId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.NewId }).(pulumi.StringOutput)
}

// The path on the target version to the changed object.
func (o GetRepositoryDiffResultOutput) NewPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.NewPath }).(pulumi.StringOutput)
}

// The ID of the changed object on the base version.
func (o GetRepositoryDiffResultOutput) OldId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.OldId }).(pulumi.StringOutput)
}

// The path on the base version to the changed object.
func (o GetRepositoryDiffResultOutput) OldPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.OldPath }).(pulumi.StringOutput)
}

func (o GetRepositoryDiffResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o GetRepositoryDiffResultOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffResult) string { return v.TargetVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryDiffResultOutput{})
}
