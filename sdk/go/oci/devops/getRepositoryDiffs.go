// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Repository Diffs in Oracle Cloud Infrastructure Devops service.
//
// Compares two revisions and lists the differences. Supports comparison between two references or commits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepositoryDiffs(ctx, &devops.GetRepositoryDiffsArgs{
//				BaseVersion:               repositoryDiffBaseVersion,
//				RepositoryId:              testRepository.Id,
//				TargetVersion:             repositoryDiffTargetVersion,
//				IsComparisonFromMergeBase: pulumi.BoolRef(repositoryDiffIsComparisonFromMergeBase),
//				TargetRepositoryId:        pulumi.StringRef(testRepository.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryDiffs(ctx *pulumi.Context, args *GetRepositoryDiffsArgs, opts ...pulumi.InvokeOption) (*GetRepositoryDiffsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryDiffsResult
	err := ctx.Invoke("oci:DevOps/getRepositoryDiffs:getRepositoryDiffs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryDiffs.
type GetRepositoryDiffsArgs struct {
	// The commit or reference name to compare changes against.
	BaseVersion string                     `pulumi:"baseVersion"`
	Filters     []GetRepositoryDiffsFilter `pulumi:"filters"`
	// Boolean value to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase *bool `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
	// The target repository identifier
	TargetRepositoryId *string `pulumi:"targetRepositoryId"`
	// The commit or reference name where changes are coming from.
	TargetVersion string `pulumi:"targetVersion"`
}

// A collection of values returned by getRepositoryDiffs.
type GetRepositoryDiffsResult struct {
	BaseVersion string `pulumi:"baseVersion"`
	// The list of diff_collection.
	DiffCollections []GetRepositoryDiffsDiffCollection `pulumi:"diffCollections"`
	Filters         []GetRepositoryDiffsFilter         `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                        string  `pulumi:"id"`
	IsComparisonFromMergeBase *bool   `pulumi:"isComparisonFromMergeBase"`
	RepositoryId              string  `pulumi:"repositoryId"`
	TargetRepositoryId        *string `pulumi:"targetRepositoryId"`
	TargetVersion             string  `pulumi:"targetVersion"`
}

func GetRepositoryDiffsOutput(ctx *pulumi.Context, args GetRepositoryDiffsOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryDiffsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRepositoryDiffsResultOutput, error) {
			args := v.(GetRepositoryDiffsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepositoryDiffs:getRepositoryDiffs", args, GetRepositoryDiffsResultOutput{}, options).(GetRepositoryDiffsResultOutput), nil
		}).(GetRepositoryDiffsResultOutput)
}

// A collection of arguments for invoking getRepositoryDiffs.
type GetRepositoryDiffsOutputArgs struct {
	// The commit or reference name to compare changes against.
	BaseVersion pulumi.StringInput                 `pulumi:"baseVersion"`
	Filters     GetRepositoryDiffsFilterArrayInput `pulumi:"filters"`
	// Boolean value to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase pulumi.BoolPtrInput `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The target repository identifier
	TargetRepositoryId pulumi.StringPtrInput `pulumi:"targetRepositoryId"`
	// The commit or reference name where changes are coming from.
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
}

func (GetRepositoryDiffsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDiffsArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryDiffs.
type GetRepositoryDiffsResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryDiffsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDiffsResult)(nil)).Elem()
}

func (o GetRepositoryDiffsResultOutput) ToGetRepositoryDiffsResultOutput() GetRepositoryDiffsResultOutput {
	return o
}

func (o GetRepositoryDiffsResultOutput) ToGetRepositoryDiffsResultOutputWithContext(ctx context.Context) GetRepositoryDiffsResultOutput {
	return o
}

func (o GetRepositoryDiffsResultOutput) BaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) string { return v.BaseVersion }).(pulumi.StringOutput)
}

// The list of diff_collection.
func (o GetRepositoryDiffsResultOutput) DiffCollections() GetRepositoryDiffsDiffCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) []GetRepositoryDiffsDiffCollection { return v.DiffCollections }).(GetRepositoryDiffsDiffCollectionArrayOutput)
}

func (o GetRepositoryDiffsResultOutput) Filters() GetRepositoryDiffsFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) []GetRepositoryDiffsFilter { return v.Filters }).(GetRepositoryDiffsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryDiffsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryDiffsResultOutput) IsComparisonFromMergeBase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) *bool { return v.IsComparisonFromMergeBase }).(pulumi.BoolPtrOutput)
}

func (o GetRepositoryDiffsResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o GetRepositoryDiffsResultOutput) TargetRepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) *string { return v.TargetRepositoryId }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryDiffsResultOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDiffsResult) string { return v.TargetVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryDiffsResultOutput{})
}
