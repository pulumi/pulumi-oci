// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository File Diff resource in Oracle Cloud Infrastructure Devops service.
//
// Gets the line-by-line difference between file on different commits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepositoryFileDiff(ctx, &devops.GetRepositoryFileDiffArgs{
//				BaseVersion:               repositoryFileDiffBaseVersion,
//				RepositoryId:              testRepository.Id,
//				TargetVersion:             repositoryFileDiffTargetVersion,
//				FilePath:                  repositoryFileDiffFilePath,
//				IsComparisonFromMergeBase: pulumi.BoolRef(repositoryFileDiffIsComparisonFromMergeBase),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryFileDiff(ctx *pulumi.Context, args *GetRepositoryFileDiffArgs, opts ...pulumi.InvokeOption) (*GetRepositoryFileDiffResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryFileDiffResult
	err := ctx.Invoke("oci:DevOps/getRepositoryFileDiff:getRepositoryFileDiff", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryFileDiff.
type GetRepositoryFileDiffArgs struct {
	// The branch to compare changes against.
	BaseVersion string `pulumi:"baseVersion"`
	// A filter to return only commits that affect any of the specified paths.
	FilePath string `pulumi:"filePath"`
	// Boolean to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase *bool `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
	// The branch where changes are coming from.
	TargetVersion string `pulumi:"targetVersion"`
}

// A collection of values returned by getRepositoryFileDiff.
type GetRepositoryFileDiffResult struct {
	// Indicates whether the changed file contains conflicts.
	AreConflictsInFile bool   `pulumi:"areConflictsInFile"`
	BaseVersion        string `pulumi:"baseVersion"`
	// List of changed section in the file.
	Changes  []GetRepositoryFileDiffChange `pulumi:"changes"`
	FilePath string                        `pulumi:"filePath"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the file is binary.
	IsBinary                  bool  `pulumi:"isBinary"`
	IsComparisonFromMergeBase *bool `pulumi:"isComparisonFromMergeBase"`
	// Indicates whether the file is large.
	IsLarge bool `pulumi:"isLarge"`
	// The ID of the changed object on the target version.
	NewId string `pulumi:"newId"`
	// The path on the target version to the changed object.
	NewPath string `pulumi:"newPath"`
	// The ID of the changed object on the base version.
	OldId string `pulumi:"oldId"`
	// The path on the base version to the changed object.
	OldPath       string `pulumi:"oldPath"`
	RepositoryId  string `pulumi:"repositoryId"`
	TargetVersion string `pulumi:"targetVersion"`
}

func GetRepositoryFileDiffOutput(ctx *pulumi.Context, args GetRepositoryFileDiffOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryFileDiffResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRepositoryFileDiffResultOutput, error) {
			args := v.(GetRepositoryFileDiffArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepositoryFileDiff:getRepositoryFileDiff", args, GetRepositoryFileDiffResultOutput{}, options).(GetRepositoryFileDiffResultOutput), nil
		}).(GetRepositoryFileDiffResultOutput)
}

// A collection of arguments for invoking getRepositoryFileDiff.
type GetRepositoryFileDiffOutputArgs struct {
	// The branch to compare changes against.
	BaseVersion pulumi.StringInput `pulumi:"baseVersion"`
	// A filter to return only commits that affect any of the specified paths.
	FilePath pulumi.StringInput `pulumi:"filePath"`
	// Boolean to indicate whether to use merge base or most recent revision.
	IsComparisonFromMergeBase pulumi.BoolPtrInput `pulumi:"isComparisonFromMergeBase"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The branch where changes are coming from.
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
}

func (GetRepositoryFileDiffOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryFileDiffArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryFileDiff.
type GetRepositoryFileDiffResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryFileDiffResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryFileDiffResult)(nil)).Elem()
}

func (o GetRepositoryFileDiffResultOutput) ToGetRepositoryFileDiffResultOutput() GetRepositoryFileDiffResultOutput {
	return o
}

func (o GetRepositoryFileDiffResultOutput) ToGetRepositoryFileDiffResultOutputWithContext(ctx context.Context) GetRepositoryFileDiffResultOutput {
	return o
}

// Indicates whether the changed file contains conflicts.
func (o GetRepositoryFileDiffResultOutput) AreConflictsInFile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) bool { return v.AreConflictsInFile }).(pulumi.BoolOutput)
}

func (o GetRepositoryFileDiffResultOutput) BaseVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.BaseVersion }).(pulumi.StringOutput)
}

// List of changed section in the file.
func (o GetRepositoryFileDiffResultOutput) Changes() GetRepositoryFileDiffChangeArrayOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) []GetRepositoryFileDiffChange { return v.Changes }).(GetRepositoryFileDiffChangeArrayOutput)
}

func (o GetRepositoryFileDiffResultOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.FilePath }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryFileDiffResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether the file is binary.
func (o GetRepositoryFileDiffResultOutput) IsBinary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) bool { return v.IsBinary }).(pulumi.BoolOutput)
}

func (o GetRepositoryFileDiffResultOutput) IsComparisonFromMergeBase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) *bool { return v.IsComparisonFromMergeBase }).(pulumi.BoolPtrOutput)
}

// Indicates whether the file is large.
func (o GetRepositoryFileDiffResultOutput) IsLarge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) bool { return v.IsLarge }).(pulumi.BoolOutput)
}

// The ID of the changed object on the target version.
func (o GetRepositoryFileDiffResultOutput) NewId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.NewId }).(pulumi.StringOutput)
}

// The path on the target version to the changed object.
func (o GetRepositoryFileDiffResultOutput) NewPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.NewPath }).(pulumi.StringOutput)
}

// The ID of the changed object on the base version.
func (o GetRepositoryFileDiffResultOutput) OldId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.OldId }).(pulumi.StringOutput)
}

// The path on the base version to the changed object.
func (o GetRepositoryFileDiffResultOutput) OldPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.OldPath }).(pulumi.StringOutput)
}

func (o GetRepositoryFileDiffResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o GetRepositoryFileDiffResultOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryFileDiffResult) string { return v.TargetVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryFileDiffResultOutput{})
}
