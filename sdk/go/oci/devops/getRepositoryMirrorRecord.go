// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository Mirror Record resource in Oracle Cloud Infrastructure Devops service.
//
// Returns either current mirror record or last successful mirror record for a specific mirror repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryMirrorRecord(ctx, &devops.GetRepositoryMirrorRecordArgs{
//				MirrorRecordType: _var.Repository_mirror_record_mirror_record_type,
//				RepositoryId:     oci_devops_repository.Test_repository.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryMirrorRecord(ctx *pulumi.Context, args *GetRepositoryMirrorRecordArgs, opts ...pulumi.InvokeOption) (*GetRepositoryMirrorRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryMirrorRecordResult
	err := ctx.Invoke("oci:DevOps/getRepositoryMirrorRecord:getRepositoryMirrorRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryMirrorRecord.
type GetRepositoryMirrorRecordArgs struct {
	// The field of mirror record type. Only one mirror record type can be provided: current - The current mirror record. lastSuccessful - The last successful mirror record.
	MirrorRecordType string `pulumi:"mirrorRecordType"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryMirrorRecord.
type GetRepositoryMirrorRecordResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               *string `pulumi:"id"`
	MirrorRecordType string  `pulumi:"mirrorRecordType"`
	// Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
	MirrorStatus *string `pulumi:"mirrorStatus"`
	RepositoryId string  `pulumi:"repositoryId"`
	// The time taken to complete a mirror operation. Value is null if not completed.
	TimeEnded *string `pulumi:"timeEnded"`
	// The time to enqueue a mirror operation.
	TimeEnqueued *string `pulumi:"timeEnqueued"`
	// The time to start a mirror operation.
	TimeStarted *string `pulumi:"timeStarted"`
	// Workrequest ID to track current mirror operation.
	WorkRequestId *string `pulumi:"workRequestId"`
}

func GetRepositoryMirrorRecordOutput(ctx *pulumi.Context, args GetRepositoryMirrorRecordOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryMirrorRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryMirrorRecordResult, error) {
			args := v.(GetRepositoryMirrorRecordArgs)
			r, err := GetRepositoryMirrorRecord(ctx, &args, opts...)
			var s GetRepositoryMirrorRecordResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryMirrorRecordResultOutput)
}

// A collection of arguments for invoking getRepositoryMirrorRecord.
type GetRepositoryMirrorRecordOutputArgs struct {
	// The field of mirror record type. Only one mirror record type can be provided: current - The current mirror record. lastSuccessful - The last successful mirror record.
	MirrorRecordType pulumi.StringInput `pulumi:"mirrorRecordType"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetRepositoryMirrorRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMirrorRecordArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryMirrorRecord.
type GetRepositoryMirrorRecordResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryMirrorRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryMirrorRecordResult)(nil)).Elem()
}

func (o GetRepositoryMirrorRecordResultOutput) ToGetRepositoryMirrorRecordResultOutput() GetRepositoryMirrorRecordResultOutput {
	return o
}

func (o GetRepositoryMirrorRecordResultOutput) ToGetRepositoryMirrorRecordResultOutputWithContext(ctx context.Context) GetRepositoryMirrorRecordResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryMirrorRecordResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryMirrorRecordResultOutput) MirrorRecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) string { return v.MirrorRecordType }).(pulumi.StringOutput)
}

// Mirror status of current mirror entry. QUEUED - Mirroring Queued RUNNING - Mirroring is Running PASSED - Mirroring Passed FAILED - Mirroring Failed
func (o GetRepositoryMirrorRecordResultOutput) MirrorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.MirrorStatus }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryMirrorRecordResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The time taken to complete a mirror operation. Value is null if not completed.
func (o GetRepositoryMirrorRecordResultOutput) TimeEnded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.TimeEnded }).(pulumi.StringPtrOutput)
}

// The time to enqueue a mirror operation.
func (o GetRepositoryMirrorRecordResultOutput) TimeEnqueued() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.TimeEnqueued }).(pulumi.StringPtrOutput)
}

// The time to start a mirror operation.
func (o GetRepositoryMirrorRecordResultOutput) TimeStarted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.TimeStarted }).(pulumi.StringPtrOutput)
}

// Workrequest ID to track current mirror operation.
func (o GetRepositoryMirrorRecordResultOutput) WorkRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryMirrorRecordResult) *string { return v.WorkRequestId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryMirrorRecordResultOutput{})
}
