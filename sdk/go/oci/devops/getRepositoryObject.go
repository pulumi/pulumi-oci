// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository Object resource in Oracle Cloud Infrastructure Devops service.
//
// Retrieves blob of specific branch name/commit ID and file path.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryObject(ctx, &devops.GetRepositoryObjectArgs{
//				RepositoryId: oci_devops_repository.Test_repository.Id,
//				FilePath:     pulumi.StringRef(_var.Repository_object_file_path),
//				RefName:      pulumi.StringRef(_var.Repository_object_ref_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetRepositoryObject(ctx *pulumi.Context, args *GetRepositoryObjectArgs, opts ...pulumi.InvokeOption) (*GetRepositoryObjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryObjectResult
	err := ctx.Invoke("oci:DevOps/getRepositoryObject:getRepositoryObject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryObject.
type GetRepositoryObjectArgs struct {
	// A filter to return only commits that affect any of the specified paths.
	FilePath *string `pulumi:"filePath"`
	// A filter to return only resources that match the given reference name.
	RefName *string `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryObject.
type GetRepositoryObjectResult struct {
	FilePath *string `pulumi:"filePath"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Flag to determine if the object contains binary file content or not.
	IsBinary     bool    `pulumi:"isBinary"`
	RefName      *string `pulumi:"refName"`
	RepositoryId string  `pulumi:"repositoryId"`
	// SHA-1 hash of git object.
	Sha string `pulumi:"sha"`
	// Size in bytes.
	SizeInBytes string `pulumi:"sizeInBytes"`
	// The type of git object.
	Type string `pulumi:"type"`
}

func GetRepositoryObjectOutput(ctx *pulumi.Context, args GetRepositoryObjectOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryObjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryObjectResult, error) {
			args := v.(GetRepositoryObjectArgs)
			r, err := GetRepositoryObject(ctx, &args, opts...)
			var s GetRepositoryObjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryObjectResultOutput)
}

// A collection of arguments for invoking getRepositoryObject.
type GetRepositoryObjectOutputArgs struct {
	// A filter to return only commits that affect any of the specified paths.
	FilePath pulumi.StringPtrInput `pulumi:"filePath"`
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringPtrInput `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetRepositoryObjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryObjectArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryObject.
type GetRepositoryObjectResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryObjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryObjectResult)(nil)).Elem()
}

func (o GetRepositoryObjectResultOutput) ToGetRepositoryObjectResultOutput() GetRepositoryObjectResultOutput {
	return o
}

func (o GetRepositoryObjectResultOutput) ToGetRepositoryObjectResultOutputWithContext(ctx context.Context) GetRepositoryObjectResultOutput {
	return o
}

func (o GetRepositoryObjectResultOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) *string { return v.FilePath }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryObjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// Flag to determine if the object contains binary file content or not.
func (o GetRepositoryObjectResultOutput) IsBinary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) bool { return v.IsBinary }).(pulumi.BoolOutput)
}

func (o GetRepositoryObjectResultOutput) RefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) *string { return v.RefName }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryObjectResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// SHA-1 hash of git object.
func (o GetRepositoryObjectResultOutput) Sha() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) string { return v.Sha }).(pulumi.StringOutput)
}

// Size in bytes.
func (o GetRepositoryObjectResultOutput) SizeInBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) string { return v.SizeInBytes }).(pulumi.StringOutput)
}

// The type of git object.
func (o GetRepositoryObjectResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryObjectResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryObjectResultOutput{})
}
