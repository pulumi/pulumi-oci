// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Repository Protected Branches in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of Protected Branches.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryProtectedBranches(ctx, &devops.GetRepositoryProtectedBranchesArgs{
//				RepositoryId: testRepository.Id,
//				Name:         pulumi.StringRef(repositoryProtectedBranchName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryProtectedBranches(ctx *pulumi.Context, args *GetRepositoryProtectedBranchesArgs, opts ...pulumi.InvokeOption) (*GetRepositoryProtectedBranchesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryProtectedBranchesResult
	err := ctx.Invoke("oci:DevOps/getRepositoryProtectedBranches:getRepositoryProtectedBranches", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryProtectedBranches.
type GetRepositoryProtectedBranchesArgs struct {
	Filters []GetRepositoryProtectedBranchesFilter `pulumi:"filters"`
	// A filter to return only resources that match the given branch name.
	Name *string `pulumi:"name"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryProtectedBranches.
type GetRepositoryProtectedBranchesResult struct {
	Filters []GetRepositoryProtectedBranchesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// The list of protected_branch_collection.
	ProtectedBranchCollections []GetRepositoryProtectedBranchesProtectedBranchCollection `pulumi:"protectedBranchCollections"`
	RepositoryId               string                                                    `pulumi:"repositoryId"`
}

func GetRepositoryProtectedBranchesOutput(ctx *pulumi.Context, args GetRepositoryProtectedBranchesOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryProtectedBranchesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryProtectedBranchesResultOutput, error) {
			args := v.(GetRepositoryProtectedBranchesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetRepositoryProtectedBranchesResult
			secret, err := ctx.InvokePackageRaw("oci:DevOps/getRepositoryProtectedBranches:getRepositoryProtectedBranches", args, &rv, "", opts...)
			if err != nil {
				return GetRepositoryProtectedBranchesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetRepositoryProtectedBranchesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetRepositoryProtectedBranchesResultOutput), nil
			}
			return output, nil
		}).(GetRepositoryProtectedBranchesResultOutput)
}

// A collection of arguments for invoking getRepositoryProtectedBranches.
type GetRepositoryProtectedBranchesOutputArgs struct {
	Filters GetRepositoryProtectedBranchesFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given branch name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetRepositoryProtectedBranchesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryProtectedBranchesArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryProtectedBranches.
type GetRepositoryProtectedBranchesResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryProtectedBranchesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryProtectedBranchesResult)(nil)).Elem()
}

func (o GetRepositoryProtectedBranchesResultOutput) ToGetRepositoryProtectedBranchesResultOutput() GetRepositoryProtectedBranchesResultOutput {
	return o
}

func (o GetRepositoryProtectedBranchesResultOutput) ToGetRepositoryProtectedBranchesResultOutputWithContext(ctx context.Context) GetRepositoryProtectedBranchesResultOutput {
	return o
}

func (o GetRepositoryProtectedBranchesResultOutput) Filters() GetRepositoryProtectedBranchesFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoryProtectedBranchesResult) []GetRepositoryProtectedBranchesFilter { return v.Filters }).(GetRepositoryProtectedBranchesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryProtectedBranchesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryProtectedBranchesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRepositoryProtectedBranchesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryProtectedBranchesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of protected_branch_collection.
func (o GetRepositoryProtectedBranchesResultOutput) ProtectedBranchCollections() GetRepositoryProtectedBranchesProtectedBranchCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoryProtectedBranchesResult) []GetRepositoryProtectedBranchesProtectedBranchCollection {
		return v.ProtectedBranchCollections
	}).(GetRepositoryProtectedBranchesProtectedBranchCollectionArrayOutput)
}

func (o GetRepositoryProtectedBranchesResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryProtectedBranchesResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryProtectedBranchesResultOutput{})
}
