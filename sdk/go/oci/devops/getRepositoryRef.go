// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository Ref resource in Oracle Cloud Infrastructure Devops service.
//
// This API will be deprecated on Wed, 12 June 2024 01:00:00 GMT as it does not get recognized when refName has '/'. This will be replaced by "/repositories/{repositoryId}/refs". Retrieves a repository's reference by its name with preference for branches over tags if the name is ambiguous. This can be disambiguated by using full names like "heads/<name>" or "tags/<name>".
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepositoryRef(ctx, &devops.GetRepositoryRefArgs{
//				RefName:      repositoryRefRefName,
//				RepositoryId: testRepository.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepositoryRef(ctx *pulumi.Context, args *LookupRepositoryRefArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryRefResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryRefResult
	err := ctx.Invoke("oci:DevOps/getRepositoryRef:getRepositoryRef", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryRef.
type LookupRepositoryRefArgs struct {
	// A filter to return only resources that match the given reference name.
	RefName string `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryRef.
type LookupRepositoryRefResult struct {
	// Commit ID pointed to by the new branch.
	CommitId string `pulumi:"commitId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Unique full reference name inside a repository.
	FullRefName string `pulumi:"fullRefName"`
	Id          string `pulumi:"id"`
	// SHA-1 hash value of the object pointed to by the tag.
	ObjectId string `pulumi:"objectId"`
	// Unique reference name inside a repository.
	RefName string `pulumi:"refName"`
	// The type of reference (BRANCH or TAG).
	RefType string `pulumi:"refType"`
	// The OCID of the repository containing the reference.
	RepositoryId string `pulumi:"repositoryId"`
}

func LookupRepositoryRefOutput(ctx *pulumi.Context, args LookupRepositoryRefOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryRefResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRepositoryRefResultOutput, error) {
			args := v.(LookupRepositoryRefArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepositoryRef:getRepositoryRef", args, LookupRepositoryRefResultOutput{}, options).(LookupRepositoryRefResultOutput), nil
		}).(LookupRepositoryRefResultOutput)
}

// A collection of arguments for invoking getRepositoryRef.
type LookupRepositoryRefOutputArgs struct {
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringInput `pulumi:"refName"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (LookupRepositoryRefOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryRefArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryRef.
type LookupRepositoryRefResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryRefResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryRefResult)(nil)).Elem()
}

func (o LookupRepositoryRefResultOutput) ToLookupRepositoryRefResultOutput() LookupRepositoryRefResultOutput {
	return o
}

func (o LookupRepositoryRefResultOutput) ToLookupRepositoryRefResultOutputWithContext(ctx context.Context) LookupRepositoryRefResultOutput {
	return o
}

// Commit ID pointed to by the new branch.
func (o LookupRepositoryRefResultOutput) CommitId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.CommitId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupRepositoryRefResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
func (o LookupRepositoryRefResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Unique full reference name inside a repository.
func (o LookupRepositoryRefResultOutput) FullRefName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.FullRefName }).(pulumi.StringOutput)
}

func (o LookupRepositoryRefResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.Id }).(pulumi.StringOutput)
}

// SHA-1 hash value of the object pointed to by the tag.
func (o LookupRepositoryRefResultOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.ObjectId }).(pulumi.StringOutput)
}

// Unique reference name inside a repository.
func (o LookupRepositoryRefResultOutput) RefName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.RefName }).(pulumi.StringOutput)
}

// The type of reference (BRANCH or TAG).
func (o LookupRepositoryRefResultOutput) RefType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.RefType }).(pulumi.StringOutput)
}

// The OCID of the repository containing the reference.
func (o LookupRepositoryRefResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryRefResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryRefResultOutput{})
}
