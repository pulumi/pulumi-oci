// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source provides the list of Repository Refs in Oracle Cloud Infrastructure Devops service.
//
// Returns a list of references.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.GetRepositoryRefs(ctx, &devops.GetRepositoryRefsArgs{
//				RepositoryId: oci_devops_repository.Test_repository.Id,
//				CommitId:     pulumi.StringRef(oci_devops_commit.Test_commit.Id),
//				RefName:      pulumi.StringRef(_var.Repository_ref_ref_name),
//				RefType:      pulumi.StringRef(_var.Repository_ref_ref_type),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRepositoryRefs(ctx *pulumi.Context, args *GetRepositoryRefsArgs, opts ...pulumi.InvokeOption) (*GetRepositoryRefsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRepositoryRefsResult
	err := ctx.Invoke("oci:DevOps/getRepositoryRefs:getRepositoryRefs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryRefs.
type GetRepositoryRefsArgs struct {
	// Commit ID in a repository.
	CommitId *string                   `pulumi:"commitId"`
	Filters  []GetRepositoryRefsFilter `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName *string `pulumi:"refName"`
	// Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
	RefType *string `pulumi:"refType"`
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositoryRefs.
type GetRepositoryRefsResult struct {
	// Commit ID pointed to by the new branch.
	CommitId *string                   `pulumi:"commitId"`
	Filters  []GetRepositoryRefsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique reference name inside a repository.
	RefName *string `pulumi:"refName"`
	// The type of reference (BRANCH or TAG).
	RefType *string `pulumi:"refType"`
	// The OCID of the repository containing the reference.
	RepositoryId string `pulumi:"repositoryId"`
	// The list of repository_ref_collection.
	RepositoryRefCollections []GetRepositoryRefsRepositoryRefCollection `pulumi:"repositoryRefCollections"`
}

func GetRepositoryRefsOutput(ctx *pulumi.Context, args GetRepositoryRefsOutputArgs, opts ...pulumi.InvokeOption) GetRepositoryRefsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRepositoryRefsResult, error) {
			args := v.(GetRepositoryRefsArgs)
			r, err := GetRepositoryRefs(ctx, &args, opts...)
			var s GetRepositoryRefsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRepositoryRefsResultOutput)
}

// A collection of arguments for invoking getRepositoryRefs.
type GetRepositoryRefsOutputArgs struct {
	// Commit ID in a repository.
	CommitId pulumi.StringPtrInput             `pulumi:"commitId"`
	Filters  GetRepositoryRefsFilterArrayInput `pulumi:"filters"`
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringPtrInput `pulumi:"refName"`
	// Reference type to distinguish between branch and tag. If it is not specified, all references are returned.
	RefType pulumi.StringPtrInput `pulumi:"refType"`
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (GetRepositoryRefsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRefsArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryRefs.
type GetRepositoryRefsResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryRefsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryRefsResult)(nil)).Elem()
}

func (o GetRepositoryRefsResultOutput) ToGetRepositoryRefsResultOutput() GetRepositoryRefsResultOutput {
	return o
}

func (o GetRepositoryRefsResultOutput) ToGetRepositoryRefsResultOutputWithContext(ctx context.Context) GetRepositoryRefsResultOutput {
	return o
}

func (o GetRepositoryRefsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetRepositoryRefsResult] {
	return pulumix.Output[GetRepositoryRefsResult]{
		OutputState: o.OutputState,
	}
}

// Commit ID pointed to by the new branch.
func (o GetRepositoryRefsResultOutput) CommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) *string { return v.CommitId }).(pulumi.StringPtrOutput)
}

func (o GetRepositoryRefsResultOutput) Filters() GetRepositoryRefsFilterArrayOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) []GetRepositoryRefsFilter { return v.Filters }).(GetRepositoryRefsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRepositoryRefsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique reference name inside a repository.
func (o GetRepositoryRefsResultOutput) RefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) *string { return v.RefName }).(pulumi.StringPtrOutput)
}

// The type of reference (BRANCH or TAG).
func (o GetRepositoryRefsResultOutput) RefType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) *string { return v.RefType }).(pulumi.StringPtrOutput)
}

// The OCID of the repository containing the reference.
func (o GetRepositoryRefsResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

// The list of repository_ref_collection.
func (o GetRepositoryRefsResultOutput) RepositoryRefCollections() GetRepositoryRefsRepositoryRefCollectionArrayOutput {
	return o.ApplyT(func(v GetRepositoryRefsResult) []GetRepositoryRefsRepositoryRefCollection {
		return v.RepositoryRefCollections
	}).(GetRepositoryRefsRepositoryRefCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRepositoryRefsResultOutput{})
}
