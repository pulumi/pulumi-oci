// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Repository Setting resource in Oracle Cloud Infrastructure Devops service.
//
// Retrieves a repository's settings details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.GetRepositorySetting(ctx, &devops.GetRepositorySettingArgs{
//				RepositoryId: testRepository.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepositorySetting(ctx *pulumi.Context, args *LookupRepositorySettingArgs, opts ...pulumi.InvokeOption) (*LookupRepositorySettingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositorySettingResult
	err := ctx.Invoke("oci:DevOps/getRepositorySetting:getRepositorySetting", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositorySetting.
type LookupRepositorySettingArgs struct {
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// A collection of values returned by getRepositorySetting.
type LookupRepositorySettingResult struct {
	// List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules []GetRepositorySettingApprovalRule `pulumi:"approvalRules"`
	Id            string                             `pulumi:"id"`
	// Criteria which must be satisfied to merge a pull request.
	MergeChecks []GetRepositorySettingMergeCheck `pulumi:"mergeChecks"`
	// Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings []GetRepositorySettingMergeSetting `pulumi:"mergeSettings"`
	RepositoryId  string                             `pulumi:"repositoryId"`
}

func LookupRepositorySettingOutput(ctx *pulumi.Context, args LookupRepositorySettingOutputArgs, opts ...pulumi.InvokeOption) LookupRepositorySettingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRepositorySettingResultOutput, error) {
			args := v.(LookupRepositorySettingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:DevOps/getRepositorySetting:getRepositorySetting", args, LookupRepositorySettingResultOutput{}, options).(LookupRepositorySettingResultOutput), nil
		}).(LookupRepositorySettingResultOutput)
}

// A collection of arguments for invoking getRepositorySetting.
type LookupRepositorySettingOutputArgs struct {
	// Unique repository identifier.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
}

func (LookupRepositorySettingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositorySettingArgs)(nil)).Elem()
}

// A collection of values returned by getRepositorySetting.
type LookupRepositorySettingResultOutput struct{ *pulumi.OutputState }

func (LookupRepositorySettingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositorySettingResult)(nil)).Elem()
}

func (o LookupRepositorySettingResultOutput) ToLookupRepositorySettingResultOutput() LookupRepositorySettingResultOutput {
	return o
}

func (o LookupRepositorySettingResultOutput) ToLookupRepositorySettingResultOutputWithContext(ctx context.Context) LookupRepositorySettingResultOutput {
	return o
}

// List of approval rules which must be statisfied before pull requests which match the rules can be merged
func (o LookupRepositorySettingResultOutput) ApprovalRules() GetRepositorySettingApprovalRuleArrayOutput {
	return o.ApplyT(func(v LookupRepositorySettingResult) []GetRepositorySettingApprovalRule { return v.ApprovalRules }).(GetRepositorySettingApprovalRuleArrayOutput)
}

func (o LookupRepositorySettingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositorySettingResult) string { return v.Id }).(pulumi.StringOutput)
}

// Criteria which must be satisfied to merge a pull request.
func (o LookupRepositorySettingResultOutput) MergeChecks() GetRepositorySettingMergeCheckArrayOutput {
	return o.ApplyT(func(v LookupRepositorySettingResult) []GetRepositorySettingMergeCheck { return v.MergeChecks }).(GetRepositorySettingMergeCheckArrayOutput)
}

// Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
func (o LookupRepositorySettingResultOutput) MergeSettings() GetRepositorySettingMergeSettingArrayOutput {
	return o.ApplyT(func(v LookupRepositorySettingResult) []GetRepositorySettingMergeSetting { return v.MergeSettings }).(GetRepositorySettingMergeSettingArrayOutput)
}

func (o LookupRepositorySettingResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositorySettingResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositorySettingResultOutput{})
}
