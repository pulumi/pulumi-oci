// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Project Repository Setting resource in Oracle Cloud Infrastructure Devops service.
//
// Updates the repository settings for a project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.NewProjectRepositorySetting(ctx, "test_project_repository_setting", &devops.ProjectRepositorySettingArgs{
//				ProjectId: pulumi.Any(testProject.Id),
//				ApprovalRules: &devops.ProjectRepositorySettingApprovalRulesArgs{
//					Items: devops.ProjectRepositorySettingApprovalRulesItemArray{
//						&devops.ProjectRepositorySettingApprovalRulesItemArgs{
//							MinApprovalsCount: pulumi.Any(projectRepositorySettingApprovalRulesItemsMinApprovalsCount),
//							Name:              pulumi.Any(projectRepositorySettingApprovalRulesItemsName),
//							DestinationBranch: pulumi.Any(projectRepositorySettingApprovalRulesItemsDestinationBranch),
//							Reviewers: devops.ProjectRepositorySettingApprovalRulesItemReviewerArray{
//								&devops.ProjectRepositorySettingApprovalRulesItemReviewerArgs{
//									PrincipalId: pulumi.Any(testPrincipal.Id),
//								},
//							},
//						},
//					},
//				},
//				MergeSettings: &devops.ProjectRepositorySettingMergeSettingsArgs{
//					AllowedMergeStrategies: pulumi.Any(projectRepositorySettingMergeSettingsAllowedMergeStrategies),
//					DefaultMergeStrategy:   pulumi.Any(projectRepositorySettingMergeSettingsDefaultMergeStrategy),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProjectRepositorySettings can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DevOps/projectRepositorySetting:ProjectRepositorySetting test_project_repository_setting "projects/{projectId}/repositorySettings"
// ```
type ProjectRepositorySetting struct {
	pulumi.CustomResourceState

	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules ProjectRepositorySettingApprovalRulesOutput `pulumi:"approvalRules"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings ProjectRepositorySettingMergeSettingsOutput `pulumi:"mergeSettings"`
	// Unique project identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewProjectRepositorySetting registers a new resource with the given unique name, arguments, and options.
func NewProjectRepositorySetting(ctx *pulumi.Context,
	name string, args *ProjectRepositorySettingArgs, opts ...pulumi.ResourceOption) (*ProjectRepositorySetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRepositorySetting
	err := ctx.RegisterResource("oci:DevOps/projectRepositorySetting:ProjectRepositorySetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRepositorySetting gets an existing ProjectRepositorySetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRepositorySetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRepositorySettingState, opts ...pulumi.ResourceOption) (*ProjectRepositorySetting, error) {
	var resource ProjectRepositorySetting
	err := ctx.ReadResource("oci:DevOps/projectRepositorySetting:ProjectRepositorySetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRepositorySetting resources.
type projectRepositorySettingState struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules *ProjectRepositorySettingApprovalRules `pulumi:"approvalRules"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings *ProjectRepositorySettingMergeSettings `pulumi:"mergeSettings"`
	// Unique project identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ProjectId *string `pulumi:"projectId"`
}

type ProjectRepositorySettingState struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules ProjectRepositorySettingApprovalRulesPtrInput
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings ProjectRepositorySettingMergeSettingsPtrInput
	// Unique project identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ProjectId pulumi.StringPtrInput
}

func (ProjectRepositorySettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRepositorySettingState)(nil)).Elem()
}

type projectRepositorySettingArgs struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules *ProjectRepositorySettingApprovalRules `pulumi:"approvalRules"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings *ProjectRepositorySettingMergeSettings `pulumi:"mergeSettings"`
	// Unique project identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a ProjectRepositorySetting resource.
type ProjectRepositorySettingArgs struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules ProjectRepositorySettingApprovalRulesPtrInput
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings ProjectRepositorySettingMergeSettingsPtrInput
	// Unique project identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ProjectId pulumi.StringInput
}

func (ProjectRepositorySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRepositorySettingArgs)(nil)).Elem()
}

type ProjectRepositorySettingInput interface {
	pulumi.Input

	ToProjectRepositorySettingOutput() ProjectRepositorySettingOutput
	ToProjectRepositorySettingOutputWithContext(ctx context.Context) ProjectRepositorySettingOutput
}

func (*ProjectRepositorySetting) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepositorySetting)(nil)).Elem()
}

func (i *ProjectRepositorySetting) ToProjectRepositorySettingOutput() ProjectRepositorySettingOutput {
	return i.ToProjectRepositorySettingOutputWithContext(context.Background())
}

func (i *ProjectRepositorySetting) ToProjectRepositorySettingOutputWithContext(ctx context.Context) ProjectRepositorySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepositorySettingOutput)
}

// ProjectRepositorySettingArrayInput is an input type that accepts ProjectRepositorySettingArray and ProjectRepositorySettingArrayOutput values.
// You can construct a concrete instance of `ProjectRepositorySettingArrayInput` via:
//
//	ProjectRepositorySettingArray{ ProjectRepositorySettingArgs{...} }
type ProjectRepositorySettingArrayInput interface {
	pulumi.Input

	ToProjectRepositorySettingArrayOutput() ProjectRepositorySettingArrayOutput
	ToProjectRepositorySettingArrayOutputWithContext(context.Context) ProjectRepositorySettingArrayOutput
}

type ProjectRepositorySettingArray []ProjectRepositorySettingInput

func (ProjectRepositorySettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRepositorySetting)(nil)).Elem()
}

func (i ProjectRepositorySettingArray) ToProjectRepositorySettingArrayOutput() ProjectRepositorySettingArrayOutput {
	return i.ToProjectRepositorySettingArrayOutputWithContext(context.Background())
}

func (i ProjectRepositorySettingArray) ToProjectRepositorySettingArrayOutputWithContext(ctx context.Context) ProjectRepositorySettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepositorySettingArrayOutput)
}

// ProjectRepositorySettingMapInput is an input type that accepts ProjectRepositorySettingMap and ProjectRepositorySettingMapOutput values.
// You can construct a concrete instance of `ProjectRepositorySettingMapInput` via:
//
//	ProjectRepositorySettingMap{ "key": ProjectRepositorySettingArgs{...} }
type ProjectRepositorySettingMapInput interface {
	pulumi.Input

	ToProjectRepositorySettingMapOutput() ProjectRepositorySettingMapOutput
	ToProjectRepositorySettingMapOutputWithContext(context.Context) ProjectRepositorySettingMapOutput
}

type ProjectRepositorySettingMap map[string]ProjectRepositorySettingInput

func (ProjectRepositorySettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRepositorySetting)(nil)).Elem()
}

func (i ProjectRepositorySettingMap) ToProjectRepositorySettingMapOutput() ProjectRepositorySettingMapOutput {
	return i.ToProjectRepositorySettingMapOutputWithContext(context.Background())
}

func (i ProjectRepositorySettingMap) ToProjectRepositorySettingMapOutputWithContext(ctx context.Context) ProjectRepositorySettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRepositorySettingMapOutput)
}

type ProjectRepositorySettingOutput struct{ *pulumi.OutputState }

func (ProjectRepositorySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRepositorySetting)(nil)).Elem()
}

func (o ProjectRepositorySettingOutput) ToProjectRepositorySettingOutput() ProjectRepositorySettingOutput {
	return o
}

func (o ProjectRepositorySettingOutput) ToProjectRepositorySettingOutputWithContext(ctx context.Context) ProjectRepositorySettingOutput {
	return o
}

// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
func (o ProjectRepositorySettingOutput) ApprovalRules() ProjectRepositorySettingApprovalRulesOutput {
	return o.ApplyT(func(v *ProjectRepositorySetting) ProjectRepositorySettingApprovalRulesOutput { return v.ApprovalRules }).(ProjectRepositorySettingApprovalRulesOutput)
}

// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
func (o ProjectRepositorySettingOutput) MergeSettings() ProjectRepositorySettingMergeSettingsOutput {
	return o.ApplyT(func(v *ProjectRepositorySetting) ProjectRepositorySettingMergeSettingsOutput { return v.MergeSettings }).(ProjectRepositorySettingMergeSettingsOutput)
}

// Unique project identifier.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ProjectRepositorySettingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRepositorySetting) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type ProjectRepositorySettingArrayOutput struct{ *pulumi.OutputState }

func (ProjectRepositorySettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRepositorySetting)(nil)).Elem()
}

func (o ProjectRepositorySettingArrayOutput) ToProjectRepositorySettingArrayOutput() ProjectRepositorySettingArrayOutput {
	return o
}

func (o ProjectRepositorySettingArrayOutput) ToProjectRepositorySettingArrayOutputWithContext(ctx context.Context) ProjectRepositorySettingArrayOutput {
	return o
}

func (o ProjectRepositorySettingArrayOutput) Index(i pulumi.IntInput) ProjectRepositorySettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRepositorySetting {
		return vs[0].([]*ProjectRepositorySetting)[vs[1].(int)]
	}).(ProjectRepositorySettingOutput)
}

type ProjectRepositorySettingMapOutput struct{ *pulumi.OutputState }

func (ProjectRepositorySettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRepositorySetting)(nil)).Elem()
}

func (o ProjectRepositorySettingMapOutput) ToProjectRepositorySettingMapOutput() ProjectRepositorySettingMapOutput {
	return o
}

func (o ProjectRepositorySettingMapOutput) ToProjectRepositorySettingMapOutputWithContext(ctx context.Context) ProjectRepositorySettingMapOutput {
	return o
}

func (o ProjectRepositorySettingMapOutput) MapIndex(k pulumi.StringInput) ProjectRepositorySettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRepositorySetting {
		return vs[0].(map[string]*ProjectRepositorySetting)[vs[1].(string)]
	}).(ProjectRepositorySettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepositorySettingInput)(nil)).Elem(), &ProjectRepositorySetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepositorySettingArrayInput)(nil)).Elem(), ProjectRepositorySettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRepositorySettingMapInput)(nil)).Elem(), ProjectRepositorySettingMap{})
	pulumi.RegisterOutputType(ProjectRepositorySettingOutput{})
	pulumi.RegisterOutputType(ProjectRepositorySettingArrayOutput{})
	pulumi.RegisterOutputType(ProjectRepositorySettingMapOutput{})
}
