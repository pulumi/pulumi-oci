// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Repository Mirror resource in Oracle Cloud Infrastructure Devops service.
//
// Synchronize a mirrored repository to the latest version from external providers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.NewRepositoryMirror(ctx, "testRepositoryMirror", &DevOps.RepositoryMirrorArgs{
//				RepositoryId: pulumi.Any(oci_devops_repository.Test_repository.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RepositoryMirror can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:DevOps/repositoryMirror:RepositoryMirror test_repository_mirror "id"
//
// ```
type RepositoryMirror struct {
	pulumi.CustomResourceState

	// Unique repository identifier.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
}

// NewRepositoryMirror registers a new resource with the given unique name, arguments, and options.
func NewRepositoryMirror(ctx *pulumi.Context,
	name string, args *RepositoryMirrorArgs, opts ...pulumi.ResourceOption) (*RepositoryMirror, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	var resource RepositoryMirror
	err := ctx.RegisterResource("oci:DevOps/repositoryMirror:RepositoryMirror", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryMirror gets an existing RepositoryMirror resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryMirror(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryMirrorState, opts ...pulumi.ResourceOption) (*RepositoryMirror, error) {
	var resource RepositoryMirror
	err := ctx.ReadResource("oci:DevOps/repositoryMirror:RepositoryMirror", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryMirror resources.
type repositoryMirrorState struct {
	// Unique repository identifier.
	RepositoryId *string `pulumi:"repositoryId"`
}

type RepositoryMirrorState struct {
	// Unique repository identifier.
	RepositoryId pulumi.StringPtrInput
}

func (RepositoryMirrorState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryMirrorState)(nil)).Elem()
}

type repositoryMirrorArgs struct {
	// Unique repository identifier.
	RepositoryId string `pulumi:"repositoryId"`
}

// The set of arguments for constructing a RepositoryMirror resource.
type RepositoryMirrorArgs struct {
	// Unique repository identifier.
	RepositoryId pulumi.StringInput
}

func (RepositoryMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryMirrorArgs)(nil)).Elem()
}

type RepositoryMirrorInput interface {
	pulumi.Input

	ToRepositoryMirrorOutput() RepositoryMirrorOutput
	ToRepositoryMirrorOutputWithContext(ctx context.Context) RepositoryMirrorOutput
}

func (*RepositoryMirror) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMirror)(nil)).Elem()
}

func (i *RepositoryMirror) ToRepositoryMirrorOutput() RepositoryMirrorOutput {
	return i.ToRepositoryMirrorOutputWithContext(context.Background())
}

func (i *RepositoryMirror) ToRepositoryMirrorOutputWithContext(ctx context.Context) RepositoryMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMirrorOutput)
}

// RepositoryMirrorArrayInput is an input type that accepts RepositoryMirrorArray and RepositoryMirrorArrayOutput values.
// You can construct a concrete instance of `RepositoryMirrorArrayInput` via:
//
//	RepositoryMirrorArray{ RepositoryMirrorArgs{...} }
type RepositoryMirrorArrayInput interface {
	pulumi.Input

	ToRepositoryMirrorArrayOutput() RepositoryMirrorArrayOutput
	ToRepositoryMirrorArrayOutputWithContext(context.Context) RepositoryMirrorArrayOutput
}

type RepositoryMirrorArray []RepositoryMirrorInput

func (RepositoryMirrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryMirror)(nil)).Elem()
}

func (i RepositoryMirrorArray) ToRepositoryMirrorArrayOutput() RepositoryMirrorArrayOutput {
	return i.ToRepositoryMirrorArrayOutputWithContext(context.Background())
}

func (i RepositoryMirrorArray) ToRepositoryMirrorArrayOutputWithContext(ctx context.Context) RepositoryMirrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMirrorArrayOutput)
}

// RepositoryMirrorMapInput is an input type that accepts RepositoryMirrorMap and RepositoryMirrorMapOutput values.
// You can construct a concrete instance of `RepositoryMirrorMapInput` via:
//
//	RepositoryMirrorMap{ "key": RepositoryMirrorArgs{...} }
type RepositoryMirrorMapInput interface {
	pulumi.Input

	ToRepositoryMirrorMapOutput() RepositoryMirrorMapOutput
	ToRepositoryMirrorMapOutputWithContext(context.Context) RepositoryMirrorMapOutput
}

type RepositoryMirrorMap map[string]RepositoryMirrorInput

func (RepositoryMirrorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryMirror)(nil)).Elem()
}

func (i RepositoryMirrorMap) ToRepositoryMirrorMapOutput() RepositoryMirrorMapOutput {
	return i.ToRepositoryMirrorMapOutputWithContext(context.Background())
}

func (i RepositoryMirrorMap) ToRepositoryMirrorMapOutputWithContext(ctx context.Context) RepositoryMirrorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMirrorMapOutput)
}

type RepositoryMirrorOutput struct{ *pulumi.OutputState }

func (RepositoryMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMirror)(nil)).Elem()
}

func (o RepositoryMirrorOutput) ToRepositoryMirrorOutput() RepositoryMirrorOutput {
	return o
}

func (o RepositoryMirrorOutput) ToRepositoryMirrorOutputWithContext(ctx context.Context) RepositoryMirrorOutput {
	return o
}

// Unique repository identifier.
func (o RepositoryMirrorOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryMirror) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

type RepositoryMirrorArrayOutput struct{ *pulumi.OutputState }

func (RepositoryMirrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryMirror)(nil)).Elem()
}

func (o RepositoryMirrorArrayOutput) ToRepositoryMirrorArrayOutput() RepositoryMirrorArrayOutput {
	return o
}

func (o RepositoryMirrorArrayOutput) ToRepositoryMirrorArrayOutputWithContext(ctx context.Context) RepositoryMirrorArrayOutput {
	return o
}

func (o RepositoryMirrorArrayOutput) Index(i pulumi.IntInput) RepositoryMirrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryMirror {
		return vs[0].([]*RepositoryMirror)[vs[1].(int)]
	}).(RepositoryMirrorOutput)
}

type RepositoryMirrorMapOutput struct{ *pulumi.OutputState }

func (RepositoryMirrorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryMirror)(nil)).Elem()
}

func (o RepositoryMirrorMapOutput) ToRepositoryMirrorMapOutput() RepositoryMirrorMapOutput {
	return o
}

func (o RepositoryMirrorMapOutput) ToRepositoryMirrorMapOutputWithContext(ctx context.Context) RepositoryMirrorMapOutput {
	return o
}

func (o RepositoryMirrorMapOutput) MapIndex(k pulumi.StringInput) RepositoryMirrorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryMirror {
		return vs[0].(map[string]*RepositoryMirror)[vs[1].(string)]
	}).(RepositoryMirrorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMirrorInput)(nil)).Elem(), &RepositoryMirror{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMirrorArrayInput)(nil)).Elem(), RepositoryMirrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMirrorMapInput)(nil)).Elem(), RepositoryMirrorMap{})
	pulumi.RegisterOutputType(RepositoryMirrorOutput{})
	pulumi.RegisterOutputType(RepositoryMirrorArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMirrorMapOutput{})
}
