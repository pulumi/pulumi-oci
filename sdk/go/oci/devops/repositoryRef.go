// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Repository Ref resource in Oracle Cloud Infrastructure Devops service.
//
// Creates a new reference or updates an existing one. This API will be deprecated on Wed, 12 June 2024 01:00:00 GMT as it does not get recognized when refName has '/'. This will be replaced by "/repositories/{repositoryId}/actions/createOrUpdateGitRef"
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/DevOps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DevOps.NewRepositoryRef(ctx, "test_repository_ref", &DevOps.RepositoryRefArgs{
//				RefName:      pulumi.Any(repositoryRefRefName),
//				RefType:      pulumi.Any(repositoryRefRefType),
//				RepositoryId: pulumi.Any(testRepository.Id),
//				CommitId:     pulumi.Any(testCommit.Id),
//				ObjectId:     pulumi.Any(testObject.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RepositoryRefs can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DevOps/repositoryRef:RepositoryRef test_repository_ref "repositories/{repositoryId}/refs/{refName}"
// ```
type RepositoryRef struct {
	pulumi.CustomResourceState

	// (Updatable) Commit ID pointed to by the new branch.
	CommitId pulumi.StringOutput `pulumi:"commitId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// Unique full reference name inside a repository.
	FullRefName pulumi.StringOutput `pulumi:"fullRefName"`
	// (Updatable) SHA-1 hash value of the object pointed to by the tag.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringOutput `pulumi:"refName"`
	// (Updatable) The type of reference (BRANCH or TAG).
	RefType pulumi.StringOutput `pulumi:"refType"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
}

// NewRepositoryRef registers a new resource with the given unique name, arguments, and options.
func NewRepositoryRef(ctx *pulumi.Context,
	name string, args *RepositoryRefArgs, opts ...pulumi.ResourceOption) (*RepositoryRef, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RefName == nil {
		return nil, errors.New("invalid value for required argument 'RefName'")
	}
	if args.RefType == nil {
		return nil, errors.New("invalid value for required argument 'RefType'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryRef
	err := ctx.RegisterResource("oci:DevOps/repositoryRef:RepositoryRef", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryRef gets an existing RepositoryRef resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryRef(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryRefState, opts ...pulumi.ResourceOption) (*RepositoryRef, error) {
	var resource RepositoryRef
	err := ctx.ReadResource("oci:DevOps/repositoryRef:RepositoryRef", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryRef resources.
type repositoryRefState struct {
	// (Updatable) Commit ID pointed to by the new branch.
	CommitId *string `pulumi:"commitId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Unique full reference name inside a repository.
	FullRefName *string `pulumi:"fullRefName"`
	// (Updatable) SHA-1 hash value of the object pointed to by the tag.
	ObjectId *string `pulumi:"objectId"`
	// A filter to return only resources that match the given reference name.
	RefName *string `pulumi:"refName"`
	// (Updatable) The type of reference (BRANCH or TAG).
	RefType *string `pulumi:"refType"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId *string `pulumi:"repositoryId"`
}

type RepositoryRefState struct {
	// (Updatable) Commit ID pointed to by the new branch.
	CommitId pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// Unique full reference name inside a repository.
	FullRefName pulumi.StringPtrInput
	// (Updatable) SHA-1 hash value of the object pointed to by the tag.
	ObjectId pulumi.StringPtrInput
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringPtrInput
	// (Updatable) The type of reference (BRANCH or TAG).
	RefType pulumi.StringPtrInput
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringPtrInput
}

func (RepositoryRefState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryRefState)(nil)).Elem()
}

type repositoryRefArgs struct {
	// (Updatable) Commit ID pointed to by the new branch.
	CommitId *string `pulumi:"commitId"`
	// (Updatable) SHA-1 hash value of the object pointed to by the tag.
	ObjectId *string `pulumi:"objectId"`
	// A filter to return only resources that match the given reference name.
	RefName string `pulumi:"refName"`
	// (Updatable) The type of reference (BRANCH or TAG).
	RefType string `pulumi:"refType"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId string `pulumi:"repositoryId"`
}

// The set of arguments for constructing a RepositoryRef resource.
type RepositoryRefArgs struct {
	// (Updatable) Commit ID pointed to by the new branch.
	CommitId pulumi.StringPtrInput
	// (Updatable) SHA-1 hash value of the object pointed to by the tag.
	ObjectId pulumi.StringPtrInput
	// A filter to return only resources that match the given reference name.
	RefName pulumi.StringInput
	// (Updatable) The type of reference (BRANCH or TAG).
	RefType pulumi.StringInput
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringInput
}

func (RepositoryRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryRefArgs)(nil)).Elem()
}

type RepositoryRefInput interface {
	pulumi.Input

	ToRepositoryRefOutput() RepositoryRefOutput
	ToRepositoryRefOutputWithContext(ctx context.Context) RepositoryRefOutput
}

func (*RepositoryRef) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRef)(nil)).Elem()
}

func (i *RepositoryRef) ToRepositoryRefOutput() RepositoryRefOutput {
	return i.ToRepositoryRefOutputWithContext(context.Background())
}

func (i *RepositoryRef) ToRepositoryRefOutputWithContext(ctx context.Context) RepositoryRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefOutput)
}

// RepositoryRefArrayInput is an input type that accepts RepositoryRefArray and RepositoryRefArrayOutput values.
// You can construct a concrete instance of `RepositoryRefArrayInput` via:
//
//	RepositoryRefArray{ RepositoryRefArgs{...} }
type RepositoryRefArrayInput interface {
	pulumi.Input

	ToRepositoryRefArrayOutput() RepositoryRefArrayOutput
	ToRepositoryRefArrayOutputWithContext(context.Context) RepositoryRefArrayOutput
}

type RepositoryRefArray []RepositoryRefInput

func (RepositoryRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryRef)(nil)).Elem()
}

func (i RepositoryRefArray) ToRepositoryRefArrayOutput() RepositoryRefArrayOutput {
	return i.ToRepositoryRefArrayOutputWithContext(context.Background())
}

func (i RepositoryRefArray) ToRepositoryRefArrayOutputWithContext(ctx context.Context) RepositoryRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefArrayOutput)
}

// RepositoryRefMapInput is an input type that accepts RepositoryRefMap and RepositoryRefMapOutput values.
// You can construct a concrete instance of `RepositoryRefMapInput` via:
//
//	RepositoryRefMap{ "key": RepositoryRefArgs{...} }
type RepositoryRefMapInput interface {
	pulumi.Input

	ToRepositoryRefMapOutput() RepositoryRefMapOutput
	ToRepositoryRefMapOutputWithContext(context.Context) RepositoryRefMapOutput
}

type RepositoryRefMap map[string]RepositoryRefInput

func (RepositoryRefMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryRef)(nil)).Elem()
}

func (i RepositoryRefMap) ToRepositoryRefMapOutput() RepositoryRefMapOutput {
	return i.ToRepositoryRefMapOutputWithContext(context.Background())
}

func (i RepositoryRefMap) ToRepositoryRefMapOutputWithContext(ctx context.Context) RepositoryRefMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefMapOutput)
}

type RepositoryRefOutput struct{ *pulumi.OutputState }

func (RepositoryRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRef)(nil)).Elem()
}

func (o RepositoryRefOutput) ToRepositoryRefOutput() RepositoryRefOutput {
	return o
}

func (o RepositoryRefOutput) ToRepositoryRefOutputWithContext(ctx context.Context) RepositoryRefOutput {
	return o
}

// (Updatable) Commit ID pointed to by the new branch.
func (o RepositoryRefOutput) CommitId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.CommitId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
func (o RepositoryRefOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
func (o RepositoryRefOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Unique full reference name inside a repository.
func (o RepositoryRefOutput) FullRefName() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.FullRefName }).(pulumi.StringOutput)
}

// (Updatable) SHA-1 hash value of the object pointed to by the tag.
func (o RepositoryRefOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// A filter to return only resources that match the given reference name.
func (o RepositoryRefOutput) RefName() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.RefName }).(pulumi.StringOutput)
}

// (Updatable) The type of reference (BRANCH or TAG).
func (o RepositoryRefOutput) RefType() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.RefType }).(pulumi.StringOutput)
}

// Unique repository identifier.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RepositoryRefOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryRef) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

type RepositoryRefArrayOutput struct{ *pulumi.OutputState }

func (RepositoryRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryRef)(nil)).Elem()
}

func (o RepositoryRefArrayOutput) ToRepositoryRefArrayOutput() RepositoryRefArrayOutput {
	return o
}

func (o RepositoryRefArrayOutput) ToRepositoryRefArrayOutputWithContext(ctx context.Context) RepositoryRefArrayOutput {
	return o
}

func (o RepositoryRefArrayOutput) Index(i pulumi.IntInput) RepositoryRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryRef {
		return vs[0].([]*RepositoryRef)[vs[1].(int)]
	}).(RepositoryRefOutput)
}

type RepositoryRefMapOutput struct{ *pulumi.OutputState }

func (RepositoryRefMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryRef)(nil)).Elem()
}

func (o RepositoryRefMapOutput) ToRepositoryRefMapOutput() RepositoryRefMapOutput {
	return o
}

func (o RepositoryRefMapOutput) ToRepositoryRefMapOutputWithContext(ctx context.Context) RepositoryRefMapOutput {
	return o
}

func (o RepositoryRefMapOutput) MapIndex(k pulumi.StringInput) RepositoryRefOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryRef {
		return vs[0].(map[string]*RepositoryRef)[vs[1].(string)]
	}).(RepositoryRefOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRefInput)(nil)).Elem(), &RepositoryRef{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRefArrayInput)(nil)).Elem(), RepositoryRefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRefMapInput)(nil)).Elem(), RepositoryRefMap{})
	pulumi.RegisterOutputType(RepositoryRefOutput{})
	pulumi.RegisterOutputType(RepositoryRefArrayOutput{})
	pulumi.RegisterOutputType(RepositoryRefMapOutput{})
}
