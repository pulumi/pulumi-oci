// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Repository Setting resource in Oracle Cloud Infrastructure Devops service.
//
// Updates the settings for a repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/devops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := devops.NewRepositorySetting(ctx, "test_repository_setting", &devops.RepositorySettingArgs{
//				RepositoryId: pulumi.Any(testRepository.Id),
//				ApprovalRules: &devops.RepositorySettingApprovalRulesArgs{
//					Items: devops.RepositorySettingApprovalRulesItemArray{
//						&devops.RepositorySettingApprovalRulesItemArgs{
//							MinApprovalsCount: pulumi.Any(repositorySettingApprovalRulesItemsMinApprovalsCount),
//							Name:              pulumi.Any(repositorySettingApprovalRulesItemsName),
//							DestinationBranch: pulumi.Any(repositorySettingApprovalRulesItemsDestinationBranch),
//							Reviewers: devops.RepositorySettingApprovalRulesItemReviewerArray{
//								&devops.RepositorySettingApprovalRulesItemReviewerArgs{
//									PrincipalId: pulumi.Any(testPrincipal.Id),
//								},
//							},
//						},
//					},
//				},
//				MergeChecks: &devops.RepositorySettingMergeChecksArgs{
//					LastBuildSucceeded: pulumi.Any(repositorySettingMergeChecksLastBuildSucceeded),
//				},
//				MergeSettings: &devops.RepositorySettingMergeSettingsArgs{
//					AllowedMergeStrategies: pulumi.Any(repositorySettingMergeSettingsAllowedMergeStrategies),
//					DefaultMergeStrategy:   pulumi.Any(repositorySettingMergeSettingsDefaultMergeStrategy),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RepositorySettings can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:DevOps/repositorySetting:RepositorySetting test_repository_setting "repositories/{repositoryId}/repositorySettings"
// ```
type RepositorySetting struct {
	pulumi.CustomResourceState

	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules RepositorySettingApprovalRulesOutput `pulumi:"approvalRules"`
	// (Updatable) Criteria which must be satisfied to merge a pull request.
	MergeChecks RepositorySettingMergeChecksOutput `pulumi:"mergeChecks"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings RepositorySettingMergeSettingsOutput `pulumi:"mergeSettings"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
}

// NewRepositorySetting registers a new resource with the given unique name, arguments, and options.
func NewRepositorySetting(ctx *pulumi.Context,
	name string, args *RepositorySettingArgs, opts ...pulumi.ResourceOption) (*RepositorySetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositorySetting
	err := ctx.RegisterResource("oci:DevOps/repositorySetting:RepositorySetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositorySetting gets an existing RepositorySetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositorySetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositorySettingState, opts ...pulumi.ResourceOption) (*RepositorySetting, error) {
	var resource RepositorySetting
	err := ctx.ReadResource("oci:DevOps/repositorySetting:RepositorySetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositorySetting resources.
type repositorySettingState struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules *RepositorySettingApprovalRules `pulumi:"approvalRules"`
	// (Updatable) Criteria which must be satisfied to merge a pull request.
	MergeChecks *RepositorySettingMergeChecks `pulumi:"mergeChecks"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings *RepositorySettingMergeSettings `pulumi:"mergeSettings"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId *string `pulumi:"repositoryId"`
}

type RepositorySettingState struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules RepositorySettingApprovalRulesPtrInput
	// (Updatable) Criteria which must be satisfied to merge a pull request.
	MergeChecks RepositorySettingMergeChecksPtrInput
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings RepositorySettingMergeSettingsPtrInput
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringPtrInput
}

func (RepositorySettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositorySettingState)(nil)).Elem()
}

type repositorySettingArgs struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules *RepositorySettingApprovalRules `pulumi:"approvalRules"`
	// (Updatable) Criteria which must be satisfied to merge a pull request.
	MergeChecks *RepositorySettingMergeChecks `pulumi:"mergeChecks"`
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings *RepositorySettingMergeSettings `pulumi:"mergeSettings"`
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId string `pulumi:"repositoryId"`
}

// The set of arguments for constructing a RepositorySetting resource.
type RepositorySettingArgs struct {
	// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
	ApprovalRules RepositorySettingApprovalRulesPtrInput
	// (Updatable) Criteria which must be satisfied to merge a pull request.
	MergeChecks RepositorySettingMergeChecksPtrInput
	// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
	MergeSettings RepositorySettingMergeSettingsPtrInput
	// Unique repository identifier.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	RepositoryId pulumi.StringInput
}

func (RepositorySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositorySettingArgs)(nil)).Elem()
}

type RepositorySettingInput interface {
	pulumi.Input

	ToRepositorySettingOutput() RepositorySettingOutput
	ToRepositorySettingOutputWithContext(ctx context.Context) RepositorySettingOutput
}

func (*RepositorySetting) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySetting)(nil)).Elem()
}

func (i *RepositorySetting) ToRepositorySettingOutput() RepositorySettingOutput {
	return i.ToRepositorySettingOutputWithContext(context.Background())
}

func (i *RepositorySetting) ToRepositorySettingOutputWithContext(ctx context.Context) RepositorySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySettingOutput)
}

// RepositorySettingArrayInput is an input type that accepts RepositorySettingArray and RepositorySettingArrayOutput values.
// You can construct a concrete instance of `RepositorySettingArrayInput` via:
//
//	RepositorySettingArray{ RepositorySettingArgs{...} }
type RepositorySettingArrayInput interface {
	pulumi.Input

	ToRepositorySettingArrayOutput() RepositorySettingArrayOutput
	ToRepositorySettingArrayOutputWithContext(context.Context) RepositorySettingArrayOutput
}

type RepositorySettingArray []RepositorySettingInput

func (RepositorySettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositorySetting)(nil)).Elem()
}

func (i RepositorySettingArray) ToRepositorySettingArrayOutput() RepositorySettingArrayOutput {
	return i.ToRepositorySettingArrayOutputWithContext(context.Background())
}

func (i RepositorySettingArray) ToRepositorySettingArrayOutputWithContext(ctx context.Context) RepositorySettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySettingArrayOutput)
}

// RepositorySettingMapInput is an input type that accepts RepositorySettingMap and RepositorySettingMapOutput values.
// You can construct a concrete instance of `RepositorySettingMapInput` via:
//
//	RepositorySettingMap{ "key": RepositorySettingArgs{...} }
type RepositorySettingMapInput interface {
	pulumi.Input

	ToRepositorySettingMapOutput() RepositorySettingMapOutput
	ToRepositorySettingMapOutputWithContext(context.Context) RepositorySettingMapOutput
}

type RepositorySettingMap map[string]RepositorySettingInput

func (RepositorySettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositorySetting)(nil)).Elem()
}

func (i RepositorySettingMap) ToRepositorySettingMapOutput() RepositorySettingMapOutput {
	return i.ToRepositorySettingMapOutputWithContext(context.Background())
}

func (i RepositorySettingMap) ToRepositorySettingMapOutputWithContext(ctx context.Context) RepositorySettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySettingMapOutput)
}

type RepositorySettingOutput struct{ *pulumi.OutputState }

func (RepositorySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySetting)(nil)).Elem()
}

func (o RepositorySettingOutput) ToRepositorySettingOutput() RepositorySettingOutput {
	return o
}

func (o RepositorySettingOutput) ToRepositorySettingOutputWithContext(ctx context.Context) RepositorySettingOutput {
	return o
}

// (Updatable) List of approval rules which must be statisfied before pull requests which match the rules can be merged
func (o RepositorySettingOutput) ApprovalRules() RepositorySettingApprovalRulesOutput {
	return o.ApplyT(func(v *RepositorySetting) RepositorySettingApprovalRulesOutput { return v.ApprovalRules }).(RepositorySettingApprovalRulesOutput)
}

// (Updatable) Criteria which must be satisfied to merge a pull request.
func (o RepositorySettingOutput) MergeChecks() RepositorySettingMergeChecksOutput {
	return o.ApplyT(func(v *RepositorySetting) RepositorySettingMergeChecksOutput { return v.MergeChecks }).(RepositorySettingMergeChecksOutput)
}

// (Updatable) Enabled and disabled merge strategies for a project or repository, also contains a default strategy.
func (o RepositorySettingOutput) MergeSettings() RepositorySettingMergeSettingsOutput {
	return o.ApplyT(func(v *RepositorySetting) RepositorySettingMergeSettingsOutput { return v.MergeSettings }).(RepositorySettingMergeSettingsOutput)
}

// Unique repository identifier.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RepositorySettingOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositorySetting) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

type RepositorySettingArrayOutput struct{ *pulumi.OutputState }

func (RepositorySettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositorySetting)(nil)).Elem()
}

func (o RepositorySettingArrayOutput) ToRepositorySettingArrayOutput() RepositorySettingArrayOutput {
	return o
}

func (o RepositorySettingArrayOutput) ToRepositorySettingArrayOutputWithContext(ctx context.Context) RepositorySettingArrayOutput {
	return o
}

func (o RepositorySettingArrayOutput) Index(i pulumi.IntInput) RepositorySettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositorySetting {
		return vs[0].([]*RepositorySetting)[vs[1].(int)]
	}).(RepositorySettingOutput)
}

type RepositorySettingMapOutput struct{ *pulumi.OutputState }

func (RepositorySettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositorySetting)(nil)).Elem()
}

func (o RepositorySettingMapOutput) ToRepositorySettingMapOutput() RepositorySettingMapOutput {
	return o
}

func (o RepositorySettingMapOutput) ToRepositorySettingMapOutputWithContext(ctx context.Context) RepositorySettingMapOutput {
	return o
}

func (o RepositorySettingMapOutput) MapIndex(k pulumi.StringInput) RepositorySettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositorySetting {
		return vs[0].(map[string]*RepositorySetting)[vs[1].(string)]
	}).(RepositorySettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySettingInput)(nil)).Elem(), &RepositorySetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySettingArrayInput)(nil)).Elem(), RepositorySettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySettingMapInput)(nil)).Elem(), RepositorySettingMap{})
	pulumi.RegisterOutputType(RepositorySettingOutput{})
	pulumi.RegisterOutputType(RepositorySettingArrayOutput{})
	pulumi.RegisterOutputType(RepositorySettingMapOutput{})
}
