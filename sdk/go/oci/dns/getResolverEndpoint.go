// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Resolver Endpoint resource in Oracle Cloud Infrastructure DNS service.
//
// Gets information about a specific resolver endpoint.
//
// Note that attempting to get a resolver endpoint in the DELETED lifecycle state will result
// in a `404` response to be consistent with other operations of the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.GetResolverEndpoint(ctx, &dns.GetResolverEndpointArgs{
//				ResolverEndpointName: testResolverEndpointOciDnsResolverEndpoint.Name,
//				ResolverId:           testResolver.Id,
//				Scope:                pulumi.StringRef("PRIVATE"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupResolverEndpoint(ctx *pulumi.Context, args *LookupResolverEndpointArgs, opts ...pulumi.InvokeOption) (*LookupResolverEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverEndpointResult
	err := ctx.Invoke("oci:Dns/getResolverEndpoint:getResolverEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointArgs struct {
	// The name of the target resolver endpoint.
	ResolverEndpointName string `pulumi:"resolverEndpointName"`
	// The OCID of the target resolver.
	ResolverId string `pulumi:"resolverId"`
	// Value must be `PRIVATE` when listing private name resolver endpoints.
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getResolverEndpoint.
type LookupResolverEndpointResult struct {
	// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
	CompartmentId string `pulumi:"compartmentId"`
	// The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType string `pulumi:"endpointType"`
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress string `pulumi:"forwardingAddress"`
	Id                string `pulumi:"id"`
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding bool `pulumi:"isForwarding"`
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening bool `pulumi:"isListening"`
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress string `pulumi:"listeningAddress"`
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name string `pulumi:"name"`
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds               []string `pulumi:"nsgIds"`
	ResolverEndpointName string   `pulumi:"resolverEndpointName"`
	ResolverId           string   `pulumi:"resolverId"`
	Scope                *string  `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self string `pulumi:"self"`
	// The current state of the resource.
	State string `pulumi:"state"`
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	SubnetId string `pulumi:"subnetId"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupResolverEndpointOutput(ctx *pulumi.Context, args LookupResolverEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupResolverEndpointResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupResolverEndpointResultOutput, error) {
			args := v.(LookupResolverEndpointArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Dns/getResolverEndpoint:getResolverEndpoint", args, LookupResolverEndpointResultOutput{}, options).(LookupResolverEndpointResultOutput), nil
		}).(LookupResolverEndpointResultOutput)
}

// A collection of arguments for invoking getResolverEndpoint.
type LookupResolverEndpointOutputArgs struct {
	// The name of the target resolver endpoint.
	ResolverEndpointName pulumi.StringInput `pulumi:"resolverEndpointName"`
	// The OCID of the target resolver.
	ResolverId pulumi.StringInput `pulumi:"resolverId"`
	// Value must be `PRIVATE` when listing private name resolver endpoints.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (LookupResolverEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointArgs)(nil)).Elem()
}

// A collection of values returned by getResolverEndpoint.
type LookupResolverEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupResolverEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverEndpointResult)(nil)).Elem()
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutput() LookupResolverEndpointResultOutput {
	return o
}

func (o LookupResolverEndpointResultOutput) ToLookupResolverEndpointResultOutputWithContext(ctx context.Context) LookupResolverEndpointResultOutput {
	return o
}

// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
func (o LookupResolverEndpointResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The type of resolver endpoint. VNIC is currently the only supported type.
func (o LookupResolverEndpointResultOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.EndpointType }).(pulumi.StringOutput)
}

// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
func (o LookupResolverEndpointResultOutput) ForwardingAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.ForwardingAddress }).(pulumi.StringOutput)
}

func (o LookupResolverEndpointResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Id }).(pulumi.StringOutput)
}

// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
func (o LookupResolverEndpointResultOutput) IsForwarding() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) bool { return v.IsForwarding }).(pulumi.BoolOutput)
}

// A Boolean flag indicating whether or not the resolver endpoint is for listening.
func (o LookupResolverEndpointResultOutput) IsListening() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) bool { return v.IsListening }).(pulumi.BoolOutput)
}

// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
func (o LookupResolverEndpointResultOutput) ListeningAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.ListeningAddress }).(pulumi.StringOutput)
}

// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
func (o LookupResolverEndpointResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Name }).(pulumi.StringOutput)
}

// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
func (o LookupResolverEndpointResultOutput) NsgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) []string { return v.NsgIds }).(pulumi.StringArrayOutput)
}

func (o LookupResolverEndpointResultOutput) ResolverEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.ResolverEndpointName }).(pulumi.StringOutput)
}

func (o LookupResolverEndpointResultOutput) ResolverId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.ResolverId }).(pulumi.StringOutput)
}

func (o LookupResolverEndpointResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The canonical absolute URL of the resource.
func (o LookupResolverEndpointResultOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.Self }).(pulumi.StringOutput)
}

// The current state of the resource.
func (o LookupResolverEndpointResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.State }).(pulumi.StringOutput)
}

// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
func (o LookupResolverEndpointResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
func (o LookupResolverEndpointResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
func (o LookupResolverEndpointResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverEndpointResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverEndpointResultOutput{})
}
