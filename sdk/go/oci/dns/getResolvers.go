// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Resolvers in Oracle Cloud Infrastructure DNS service.
//
// Gets a list of all resolvers within a compartment.
//
// The collection can be filtered by display name, id, or lifecycle state. It can be sorted
// on creation time or displayName both in ASC or DESC order. Note that when no lifecycleState
// query parameter is provided, the collection does not include resolvers in the DELETED
// lifecycleState to be consistent with other operations of the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dns.GetResolvers(ctx, &dns.GetResolversArgs{
//				CompartmentId: compartmentId,
//				Scope:         "PRIVATE",
//				DisplayName:   pulumi.StringRef(resolverDisplayName),
//				Id:            pulumi.StringRef(resolverId),
//				State:         pulumi.StringRef(resolverState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetResolvers(ctx *pulumi.Context, args *GetResolversArgs, opts ...pulumi.InvokeOption) (*GetResolversResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetResolversResult
	err := ctx.Invoke("oci:Dns/getResolvers:getResolvers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolvers.
type GetResolversArgs struct {
	// The OCID of the compartment the resource belongs to.
	CompartmentId string `pulumi:"compartmentId"`
	// The displayName of a resource.
	DisplayName *string              `pulumi:"displayName"`
	Filters     []GetResolversFilter `pulumi:"filters"`
	// The OCID of a resource.
	Id *string `pulumi:"id"`
	// Value must be `PRIVATE` when listing private name resolvers.
	Scope string `pulumi:"scope"`
	// The state of a resource.
	State *string `pulumi:"state"`
}

// A collection of values returned by getResolvers.
type GetResolversResult struct {
	// The OCID of the owning compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The display name of the resolver.
	DisplayName *string              `pulumi:"displayName"`
	Filters     []GetResolversFilter `pulumi:"filters"`
	// The OCID of the resolver.
	Id *string `pulumi:"id"`
	// The list of resolvers.
	Resolvers []GetResolversResolver `pulumi:"resolvers"`
	Scope     string                 `pulumi:"scope"`
	// The current state of the resource.
	State *string `pulumi:"state"`
}

func GetResolversOutput(ctx *pulumi.Context, args GetResolversOutputArgs, opts ...pulumi.InvokeOption) GetResolversResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetResolversResultOutput, error) {
			args := v.(GetResolversArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Dns/getResolvers:getResolvers", args, GetResolversResultOutput{}, options).(GetResolversResultOutput), nil
		}).(GetResolversResultOutput)
}

// A collection of arguments for invoking getResolvers.
type GetResolversOutputArgs struct {
	// The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The displayName of a resource.
	DisplayName pulumi.StringPtrInput        `pulumi:"displayName"`
	Filters     GetResolversFilterArrayInput `pulumi:"filters"`
	// The OCID of a resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Value must be `PRIVATE` when listing private name resolvers.
	Scope pulumi.StringInput `pulumi:"scope"`
	// The state of a resource.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetResolversOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolversArgs)(nil)).Elem()
}

// A collection of values returned by getResolvers.
type GetResolversResultOutput struct{ *pulumi.OutputState }

func (GetResolversResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolversResult)(nil)).Elem()
}

func (o GetResolversResultOutput) ToGetResolversResultOutput() GetResolversResultOutput {
	return o
}

func (o GetResolversResultOutput) ToGetResolversResultOutputWithContext(ctx context.Context) GetResolversResultOutput {
	return o
}

// The OCID of the owning compartment.
func (o GetResolversResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolversResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The display name of the resolver.
func (o GetResolversResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolversResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetResolversResultOutput) Filters() GetResolversFilterArrayOutput {
	return o.ApplyT(func(v GetResolversResult) []GetResolversFilter { return v.Filters }).(GetResolversFilterArrayOutput)
}

// The OCID of the resolver.
func (o GetResolversResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolversResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of resolvers.
func (o GetResolversResultOutput) Resolvers() GetResolversResolverArrayOutput {
	return o.ApplyT(func(v GetResolversResult) []GetResolversResolver { return v.Resolvers }).(GetResolversResolverArrayOutput)
}

func (o GetResolversResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolversResult) string { return v.Scope }).(pulumi.StringOutput)
}

// The current state of the resource.
func (o GetResolversResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolversResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetResolversResultOutput{})
}
