// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Steering Policy resource in Oracle Cloud Infrastructure DNS service.
//
// Gets information about the specified steering policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.GetSteeringPolicy(ctx, &dns.GetSteeringPolicyArgs{
//				SteeringPolicyId: testSteeringPolicyOciDnsSteeringPolicy.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSteeringPolicy(ctx *pulumi.Context, args *LookupSteeringPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSteeringPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSteeringPolicyResult
	err := ctx.Invoke("oci:Dns/getSteeringPolicy:getSteeringPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSteeringPolicy.
type LookupSteeringPolicyArgs struct {
	// The OCID of the target steering policy.
	SteeringPolicyId string `pulumi:"steeringPolicyId"`
}

// A collection of values returned by getSteeringPolicy.
type LookupSteeringPolicyResult struct {
	// The set of all answers that can potentially issue from the steering policy.
	Answers []GetSteeringPolicyAnswer `pulumi:"answers"`
	// The OCID of the compartment containing the steering policy.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]string `pulumi:"definedTags"`
	// A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId string `pulumi:"healthCheckMonitorId"`
	// The OCID of the resource.
	Id string `pulumi:"id"`
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules []GetSteeringPolicyRule `pulumi:"rules"`
	// The canonical absolute URL of the resource.
	Self string `pulumi:"self"`
	// The current state of the resource.
	State            string `pulumi:"state"`
	SteeringPolicyId string `pulumi:"steeringPolicyId"`
	// A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template string `pulumi:"template"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated string `pulumi:"timeCreated"`
	// The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl int `pulumi:"ttl"`
}

func LookupSteeringPolicyOutput(ctx *pulumi.Context, args LookupSteeringPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSteeringPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSteeringPolicyResultOutput, error) {
			args := v.(LookupSteeringPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Dns/getSteeringPolicy:getSteeringPolicy", args, LookupSteeringPolicyResultOutput{}, options).(LookupSteeringPolicyResultOutput), nil
		}).(LookupSteeringPolicyResultOutput)
}

// A collection of arguments for invoking getSteeringPolicy.
type LookupSteeringPolicyOutputArgs struct {
	// The OCID of the target steering policy.
	SteeringPolicyId pulumi.StringInput `pulumi:"steeringPolicyId"`
}

func (LookupSteeringPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSteeringPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getSteeringPolicy.
type LookupSteeringPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSteeringPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSteeringPolicyResult)(nil)).Elem()
}

func (o LookupSteeringPolicyResultOutput) ToLookupSteeringPolicyResultOutput() LookupSteeringPolicyResultOutput {
	return o
}

func (o LookupSteeringPolicyResultOutput) ToLookupSteeringPolicyResultOutputWithContext(ctx context.Context) LookupSteeringPolicyResultOutput {
	return o
}

// The set of all answers that can potentially issue from the steering policy.
func (o LookupSteeringPolicyResultOutput) Answers() GetSteeringPolicyAnswerArrayOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) []GetSteeringPolicyAnswer { return v.Answers }).(GetSteeringPolicyAnswerArrayOutput)
}

// The OCID of the compartment containing the steering policy.
func (o LookupSteeringPolicyResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupSteeringPolicyResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
func (o LookupSteeringPolicyResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
func (o LookupSteeringPolicyResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
func (o LookupSteeringPolicyResultOutput) HealthCheckMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.HealthCheckMonitorId }).(pulumi.StringOutput)
}

// The OCID of the resource.
func (o LookupSteeringPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
func (o LookupSteeringPolicyResultOutput) Rules() GetSteeringPolicyRuleArrayOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) []GetSteeringPolicyRule { return v.Rules }).(GetSteeringPolicyRuleArrayOutput)
}

// The canonical absolute URL of the resource.
func (o LookupSteeringPolicyResultOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.Self }).(pulumi.StringOutput)
}

// The current state of the resource.
func (o LookupSteeringPolicyResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSteeringPolicyResultOutput) SteeringPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.SteeringPolicyId }).(pulumi.StringOutput)
}

// A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
func (o LookupSteeringPolicyResultOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.Template }).(pulumi.StringOutput)
}

// The date and time the resource was created, expressed in RFC 3339 timestamp format.
func (o LookupSteeringPolicyResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
func (o LookupSteeringPolicyResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSteeringPolicyResult) int { return v.Ttl }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSteeringPolicyResultOutput{})
}
