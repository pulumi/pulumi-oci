// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Resolver Endpoint resource in Oracle Cloud Infrastructure DNS service.
//
// Creates a new resolver endpoint. Requires a `PRIVATE` scope query parameter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dns.NewResolverEndpoint(ctx, "test_resolver_endpoint", &Dns.ResolverEndpointArgs{
//				IsForwarding:      pulumi.Any(resolverEndpointIsForwarding),
//				IsListening:       pulumi.Any(resolverEndpointIsListening),
//				Name:              pulumi.Any(resolverEndpointName),
//				ResolverId:        pulumi.Any(testResolver.Id),
//				SubnetId:          pulumi.Any(testSubnet.Id),
//				Scope:             pulumi.String("PRIVATE"),
//				EndpointType:      pulumi.Any(resolverEndpointEndpointType),
//				ForwardingAddress: pulumi.Any(resolverEndpointForwardingAddress),
//				ListeningAddress:  pulumi.Any(resolverEndpointListeningAddress),
//				NsgIds:            pulumi.Any(resolverEndpointNsgIds),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For legacy ResolverEndpoints created without `scope`, these ResolverEndpoints can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Dns/resolverEndpoint:ResolverEndpoint test_resolver_endpoint "resolverId/{resolverId}/name/{resolverEndpointName}"
// ```
// For ResolverEndpoints created using `scope`, these ResolverEndpoints can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Dns/resolverEndpoint:ResolverEndpoint test_resolver_endpoint "resolverId/{resolverId}/name/{name}/scope/{scope}"
// ```
type ResolverEndpoint struct {
	pulumi.CustomResourceState

	// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress pulumi.StringOutput `pulumi:"forwardingAddress"`
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding pulumi.BoolOutput `pulumi:"isForwarding"`
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening pulumi.BoolOutput `pulumi:"isListening"`
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress pulumi.StringOutput `pulumi:"listeningAddress"`
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds pulumi.StringArrayOutput `pulumi:"nsgIds"`
	// The OCID of the target resolver.
	ResolverId pulumi.StringOutput `pulumi:"resolverId"`
	// Value must be `PRIVATE` when creating private name resolver endpoints.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewResolverEndpoint registers a new resource with the given unique name, arguments, and options.
func NewResolverEndpoint(ctx *pulumi.Context,
	name string, args *ResolverEndpointArgs, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsForwarding == nil {
		return nil, errors.New("invalid value for required argument 'IsForwarding'")
	}
	if args.IsListening == nil {
		return nil, errors.New("invalid value for required argument 'IsListening'")
	}
	if args.ResolverId == nil {
		return nil, errors.New("invalid value for required argument 'ResolverId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverEndpoint
	err := ctx.RegisterResource("oci:Dns/resolverEndpoint:ResolverEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverEndpoint gets an existing ResolverEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverEndpointState, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	var resource ResolverEndpoint
	err := ctx.ReadResource("oci:Dns/resolverEndpoint:ResolverEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverEndpoint resources.
type resolverEndpointState struct {
	// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType *string `pulumi:"endpointType"`
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress *string `pulumi:"forwardingAddress"`
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding *bool `pulumi:"isForwarding"`
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening *bool `pulumi:"isListening"`
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress *string `pulumi:"listeningAddress"`
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name *string `pulumi:"name"`
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds []string `pulumi:"nsgIds"`
	// The OCID of the target resolver.
	ResolverId *string `pulumi:"resolverId"`
	// Value must be `PRIVATE` when creating private name resolver endpoints.
	Scope *string `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId *string `pulumi:"subnetId"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ResolverEndpointState struct {
	// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType pulumi.StringPtrInput
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress pulumi.StringPtrInput
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding pulumi.BoolPtrInput
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening pulumi.BoolPtrInput
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress pulumi.StringPtrInput
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name pulumi.StringPtrInput
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds pulumi.StringArrayInput
	// The OCID of the target resolver.
	ResolverId pulumi.StringPtrInput
	// Value must be `PRIVATE` when creating private name resolver endpoints.
	Scope pulumi.StringPtrInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringPtrInput
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringPtrInput
}

func (ResolverEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointState)(nil)).Elem()
}

type resolverEndpointArgs struct {
	// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType *string `pulumi:"endpointType"`
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress *string `pulumi:"forwardingAddress"`
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding bool `pulumi:"isForwarding"`
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening bool `pulumi:"isListening"`
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress *string `pulumi:"listeningAddress"`
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name *string `pulumi:"name"`
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds []string `pulumi:"nsgIds"`
	// The OCID of the target resolver.
	ResolverId string `pulumi:"resolverId"`
	// Value must be `PRIVATE` when creating private name resolver endpoints.
	Scope *string `pulumi:"scope"`
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a ResolverEndpoint resource.
type ResolverEndpointArgs struct {
	// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
	EndpointType pulumi.StringPtrInput
	// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
	ForwardingAddress pulumi.StringPtrInput
	// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
	IsForwarding pulumi.BoolInput
	// A Boolean flag indicating whether or not the resolver endpoint is for listening.
	IsListening pulumi.BoolInput
	// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
	ListeningAddress pulumi.StringPtrInput
	// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
	Name pulumi.StringPtrInput
	// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
	NsgIds pulumi.StringArrayInput
	// The OCID of the target resolver.
	ResolverId pulumi.StringInput
	// Value must be `PRIVATE` when creating private name resolver endpoints.
	Scope pulumi.StringPtrInput
	// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringInput
}

func (ResolverEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointArgs)(nil)).Elem()
}

type ResolverEndpointInput interface {
	pulumi.Input

	ToResolverEndpointOutput() ResolverEndpointOutput
	ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput
}

func (*ResolverEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (i *ResolverEndpoint) ToResolverEndpointOutput() ResolverEndpointOutput {
	return i.ToResolverEndpointOutputWithContext(context.Background())
}

func (i *ResolverEndpoint) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointOutput)
}

// ResolverEndpointArrayInput is an input type that accepts ResolverEndpointArray and ResolverEndpointArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointArrayInput` via:
//
//	ResolverEndpointArray{ ResolverEndpointArgs{...} }
type ResolverEndpointArrayInput interface {
	pulumi.Input

	ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput
	ToResolverEndpointArrayOutputWithContext(context.Context) ResolverEndpointArrayOutput
}

type ResolverEndpointArray []ResolverEndpointInput

func (ResolverEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return i.ToResolverEndpointArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointArrayOutput)
}

// ResolverEndpointMapInput is an input type that accepts ResolverEndpointMap and ResolverEndpointMapOutput values.
// You can construct a concrete instance of `ResolverEndpointMapInput` via:
//
//	ResolverEndpointMap{ "key": ResolverEndpointArgs{...} }
type ResolverEndpointMapInput interface {
	pulumi.Input

	ToResolverEndpointMapOutput() ResolverEndpointMapOutput
	ToResolverEndpointMapOutputWithContext(context.Context) ResolverEndpointMapOutput
}

type ResolverEndpointMap map[string]ResolverEndpointInput

func (ResolverEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return i.ToResolverEndpointMapOutputWithContext(context.Background())
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointMapOutput)
}

type ResolverEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointOutput) ToResolverEndpointOutput() ResolverEndpointOutput {
	return o
}

func (o ResolverEndpointOutput) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return o
}

// The OCID of the owning compartment. This will match the resolver that the resolver endpoint is under and will be updated if the resolver's compartment is changed.
func (o ResolverEndpointOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The type of resolver endpoint. VNIC is currently the only supported type.
func (o ResolverEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

// An IP address from which forwarded queries may be sent. For VNIC endpoints, this IP address must be part of the subnet and will be assigned by the system if unspecified when isForwarding is true.
func (o ResolverEndpointOutput) ForwardingAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.ForwardingAddress }).(pulumi.StringOutput)
}

// A Boolean flag indicating whether or not the resolver endpoint is for forwarding.
func (o ResolverEndpointOutput) IsForwarding() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.BoolOutput { return v.IsForwarding }).(pulumi.BoolOutput)
}

// A Boolean flag indicating whether or not the resolver endpoint is for listening.
func (o ResolverEndpointOutput) IsListening() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.BoolOutput { return v.IsListening }).(pulumi.BoolOutput)
}

// An IP address to listen to queries on. For VNIC endpoints this IP address must be part of the subnet and will be assigned by the system if unspecified when isListening is true.
func (o ResolverEndpointOutput) ListeningAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.ListeningAddress }).(pulumi.StringOutput)
}

// The name of the resolver endpoint. Must be unique, case-insensitive, within the resolver.
func (o ResolverEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of network security group OCIDs for the resolver endpoint. These must be part of the VCN that the resolver endpoint is a part of.
func (o ResolverEndpointOutput) NsgIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringArrayOutput { return v.NsgIds }).(pulumi.StringArrayOutput)
}

// The OCID of the target resolver.
func (o ResolverEndpointOutput) ResolverId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.ResolverId }).(pulumi.StringOutput)
}

// Value must be `PRIVATE` when creating private name resolver endpoints.
func (o ResolverEndpointOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The canonical absolute URL of the resource.
func (o ResolverEndpointOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Self }).(pulumi.StringOutput)
}

// The current state of the resource.
func (o ResolverEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The OCID of a subnet. Must be part of the VCN that the resolver is attached to.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ResolverEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
func (o ResolverEndpointOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
func (o ResolverEndpointOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ResolverEndpointArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) Index(i pulumi.IntInput) ResolverEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].([]*ResolverEndpoint)[vs[1].(int)]
	}).(ResolverEndpointOutput)
}

type ResolverEndpointMapOutput struct{ *pulumi.OutputState }

func (ResolverEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) MapIndex(k pulumi.StringInput) ResolverEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].(map[string]*ResolverEndpoint)[vs[1].(string)]
	}).(ResolverEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointInput)(nil)).Elem(), &ResolverEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointArrayInput)(nil)).Elem(), ResolverEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointMapInput)(nil)).Elem(), ResolverEndpointMap{})
	pulumi.RegisterOutputType(ResolverEndpointOutput{})
	pulumi.RegisterOutputType(ResolverEndpointArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointMapOutput{})
}
