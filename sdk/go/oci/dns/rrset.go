// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Rrset resource in Oracle Cloud Infrastructure DNS service.
//
// Replaces records in the specified RRSet. When the zone name is provided as a path parameter
// and the zone has a scope of `PRIVATE` then the viewId query parameter is required.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dns.NewRrset(ctx, "testRrset", &Dns.RrsetArgs{
//				Domain:        pulumi.Any(_var.Rrset_domain),
//				Rtype:         pulumi.Any(_var.Rrset_rtype),
//				ZoneNameOrId:  pulumi.Any(oci_dns_zone.Test_zone.Id),
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				Items: dns.RrsetItemArray{
//					&dns.RrsetItemArgs{
//						Domain: pulumi.Any(_var.Rrset_items_domain),
//						Rdata:  pulumi.Any(_var.Rrset_items_rdata),
//						Rtype:  pulumi.Any(_var.Rrset_items_rtype),
//						Ttl:    pulumi.Any(_var.Rrset_items_ttl),
//					},
//				},
//				Scope:  pulumi.Any(_var.Rrset_scope),
//				ViewId: pulumi.Any(oci_dns_view.Test_view.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For legacy Rrsets that were created without using `scope`, these Rrsets can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Dns/rrset:Rrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}"
//
// ```
//
//	For Rrsets created using `scope` and `view_id`, these Rrsets can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Dns/rrset:Rrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}/scope/{scope}/viewId/{viewId}"
//
// ```
//
//	skip adding `{view_id}` at the end if Rrset was created without `view_id`.
type Rrset struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items RrsetItemArrayOutput `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringOutput `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrOutput `pulumi:"viewId"`
	// The name or OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneNameOrId pulumi.StringOutput `pulumi:"zoneNameOrId"`
}

// NewRrset registers a new resource with the given unique name, arguments, and options.
func NewRrset(ctx *pulumi.Context,
	name string, args *RrsetArgs, opts ...pulumi.ResourceOption) (*Rrset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Rtype == nil {
		return nil, errors.New("invalid value for required argument 'Rtype'")
	}
	if args.ZoneNameOrId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneNameOrId'")
	}
	var resource Rrset
	err := ctx.RegisterResource("oci:Dns/rrset:Rrset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRrset gets an existing Rrset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRrset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RrsetState, opts ...pulumi.ResourceOption) (*Rrset, error) {
	var resource Rrset
	err := ctx.ReadResource("oci:Dns/rrset:Rrset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rrset resources.
type rrsetState struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId *string `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain *string `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items []RrsetItem `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype *string `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope *string `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId *string `pulumi:"viewId"`
	// The name or OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneNameOrId *string `pulumi:"zoneNameOrId"`
}

type RrsetState struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringPtrInput
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringPtrInput
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items RrsetItemArrayInput
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringPtrInput
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrInput
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrInput
	// The name or OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneNameOrId pulumi.StringPtrInput
}

func (RrsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*rrsetState)(nil)).Elem()
}

type rrsetArgs struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId *string `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain string `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items []RrsetItem `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype string `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope *string `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId *string `pulumi:"viewId"`
	// The name or OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneNameOrId string `pulumi:"zoneNameOrId"`
}

// The set of arguments for constructing a Rrset resource.
type RrsetArgs struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringPtrInput
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringInput
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items RrsetItemArrayInput
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringInput
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrInput
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrInput
	// The name or OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneNameOrId pulumi.StringInput
}

func (RrsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rrsetArgs)(nil)).Elem()
}

type RrsetInput interface {
	pulumi.Input

	ToRrsetOutput() RrsetOutput
	ToRrsetOutputWithContext(ctx context.Context) RrsetOutput
}

func (*Rrset) ElementType() reflect.Type {
	return reflect.TypeOf((**Rrset)(nil)).Elem()
}

func (i *Rrset) ToRrsetOutput() RrsetOutput {
	return i.ToRrsetOutputWithContext(context.Background())
}

func (i *Rrset) ToRrsetOutputWithContext(ctx context.Context) RrsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RrsetOutput)
}

// RrsetArrayInput is an input type that accepts RrsetArray and RrsetArrayOutput values.
// You can construct a concrete instance of `RrsetArrayInput` via:
//
//	RrsetArray{ RrsetArgs{...} }
type RrsetArrayInput interface {
	pulumi.Input

	ToRrsetArrayOutput() RrsetArrayOutput
	ToRrsetArrayOutputWithContext(context.Context) RrsetArrayOutput
}

type RrsetArray []RrsetInput

func (RrsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rrset)(nil)).Elem()
}

func (i RrsetArray) ToRrsetArrayOutput() RrsetArrayOutput {
	return i.ToRrsetArrayOutputWithContext(context.Background())
}

func (i RrsetArray) ToRrsetArrayOutputWithContext(ctx context.Context) RrsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RrsetArrayOutput)
}

// RrsetMapInput is an input type that accepts RrsetMap and RrsetMapOutput values.
// You can construct a concrete instance of `RrsetMapInput` via:
//
//	RrsetMap{ "key": RrsetArgs{...} }
type RrsetMapInput interface {
	pulumi.Input

	ToRrsetMapOutput() RrsetMapOutput
	ToRrsetMapOutputWithContext(context.Context) RrsetMapOutput
}

type RrsetMap map[string]RrsetInput

func (RrsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rrset)(nil)).Elem()
}

func (i RrsetMap) ToRrsetMapOutput() RrsetMapOutput {
	return i.ToRrsetMapOutputWithContext(context.Background())
}

func (i RrsetMap) ToRrsetMapOutputWithContext(ctx context.Context) RrsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RrsetMapOutput)
}

type RrsetOutput struct{ *pulumi.OutputState }

func (RrsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rrset)(nil)).Elem()
}

func (o RrsetOutput) ToRrsetOutput() RrsetOutput {
	return o
}

func (o RrsetOutput) ToRrsetOutputWithContext(ctx context.Context) RrsetOutput {
	return o
}

// (Updatable) The OCID of the compartment the resource belongs to.
func (o RrsetOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The fully qualified domain name where the record can be located.
func (o RrsetOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// (Updatable)
// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
func (o RrsetOutput) Items() RrsetItemArrayOutput {
	return o.ApplyT(func(v *Rrset) RrsetItemArrayOutput { return v.Items }).(RrsetItemArrayOutput)
}

// The type of the target RRSet within the target zone.
func (o RrsetOutput) Rtype() pulumi.StringOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringOutput { return v.Rtype }).(pulumi.StringOutput)
}

// Specifies to operate only on resources that have a matching DNS scope.
// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
func (o RrsetOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The OCID of the view the resource is associated with.
func (o RrsetOutput) ViewId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringPtrOutput { return v.ViewId }).(pulumi.StringPtrOutput)
}

// The name or OCID of the target zone.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RrsetOutput) ZoneNameOrId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rrset) pulumi.StringOutput { return v.ZoneNameOrId }).(pulumi.StringOutput)
}

type RrsetArrayOutput struct{ *pulumi.OutputState }

func (RrsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rrset)(nil)).Elem()
}

func (o RrsetArrayOutput) ToRrsetArrayOutput() RrsetArrayOutput {
	return o
}

func (o RrsetArrayOutput) ToRrsetArrayOutputWithContext(ctx context.Context) RrsetArrayOutput {
	return o
}

func (o RrsetArrayOutput) Index(i pulumi.IntInput) RrsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rrset {
		return vs[0].([]*Rrset)[vs[1].(int)]
	}).(RrsetOutput)
}

type RrsetMapOutput struct{ *pulumi.OutputState }

func (RrsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rrset)(nil)).Elem()
}

func (o RrsetMapOutput) ToRrsetMapOutput() RrsetMapOutput {
	return o
}

func (o RrsetMapOutput) ToRrsetMapOutputWithContext(ctx context.Context) RrsetMapOutput {
	return o
}

func (o RrsetMapOutput) MapIndex(k pulumi.StringInput) RrsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rrset {
		return vs[0].(map[string]*Rrset)[vs[1].(string)]
	}).(RrsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RrsetInput)(nil)).Elem(), &Rrset{})
	pulumi.RegisterInputType(reflect.TypeOf((*RrsetArrayInput)(nil)).Elem(), RrsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RrsetMapInput)(nil)).Elem(), RrsetMap{})
	pulumi.RegisterOutputType(RrsetOutput{})
	pulumi.RegisterOutputType(RrsetArrayOutput{})
	pulumi.RegisterOutputType(RrsetMapOutput{})
}
