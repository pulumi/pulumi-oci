// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Steering Policy Attachment resource in Oracle Cloud Infrastructure DNS service.
//
// Creates a new attachment between a steering policy and a domain, giving the
// policy permission to answer queries for the specified domain. A steering policy must
// be attached to a domain for the policy to answer DNS queries for that domain.
//
// For the purposes of access control, the attachment is automatically placed
// into the same compartment as the domain's zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dns.NewSteeringPolicyAttachment(ctx, "testSteeringPolicyAttachment", &Dns.SteeringPolicyAttachmentArgs{
//				DomainName:       pulumi.Any(_var.Steering_policy_attachment_domain_name),
//				SteeringPolicyId: pulumi.Any(oci_dns_steering_policy.Test_steering_policy.Id),
//				ZoneId:           pulumi.Any(oci_dns_zone.Test_zone.Id),
//				DisplayName:      pulumi.Any(_var.Steering_policy_attachment_display_name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SteeringPolicyAttachments can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Dns/steeringPolicyAttachment:SteeringPolicyAttachment test_steering_policy_attachment "id"
//
// ```
type SteeringPolicyAttachment struct {
	pulumi.CustomResourceState

	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId pulumi.StringPtrOutput `pulumi:"compartmentId"`
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes pulumi.StringArrayOutput `pulumi:"rtypes"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringOutput `pulumi:"steeringPolicyId"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringPtrOutput `pulumi:"timeCreated"`
	// The OCID of the attached zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSteeringPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewSteeringPolicyAttachment(ctx *pulumi.Context,
	name string, args *SteeringPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*SteeringPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SteeringPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SteeringPolicyId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SteeringPolicyAttachment
	err := ctx.RegisterResource("oci:Dns/steeringPolicyAttachment:SteeringPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSteeringPolicyAttachment gets an existing SteeringPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSteeringPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SteeringPolicyAttachmentState, opts ...pulumi.ResourceOption) (*SteeringPolicyAttachment, error) {
	var resource SteeringPolicyAttachment
	err := ctx.ReadResource("oci:Dns/steeringPolicyAttachment:SteeringPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SteeringPolicyAttachment resources.
type steeringPolicyAttachmentState struct {
	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName *string `pulumi:"domainName"`
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes []string `pulumi:"rtypes"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// The OCID of the attached steering policy.
	SteeringPolicyId *string `pulumi:"steeringPolicyId"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the attached zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId *string `pulumi:"zoneId"`
}

type SteeringPolicyAttachmentState struct {
	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringPtrInput
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes pulumi.StringArrayInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringPtrInput
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringPtrInput
	// The OCID of the attached zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringPtrInput
}

func (SteeringPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*steeringPolicyAttachmentState)(nil)).Elem()
}

type steeringPolicyAttachmentArgs struct {
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName string `pulumi:"domainName"`
	// The OCID of the attached steering policy.
	SteeringPolicyId string `pulumi:"steeringPolicyId"`
	// The OCID of the attached zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a SteeringPolicyAttachment resource.
type SteeringPolicyAttachmentArgs struct {
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringInput
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringInput
	// The OCID of the attached zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringInput
}

func (SteeringPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*steeringPolicyAttachmentArgs)(nil)).Elem()
}

type SteeringPolicyAttachmentInput interface {
	pulumi.Input

	ToSteeringPolicyAttachmentOutput() SteeringPolicyAttachmentOutput
	ToSteeringPolicyAttachmentOutputWithContext(ctx context.Context) SteeringPolicyAttachmentOutput
}

func (*SteeringPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SteeringPolicyAttachment)(nil)).Elem()
}

func (i *SteeringPolicyAttachment) ToSteeringPolicyAttachmentOutput() SteeringPolicyAttachmentOutput {
	return i.ToSteeringPolicyAttachmentOutputWithContext(context.Background())
}

func (i *SteeringPolicyAttachment) ToSteeringPolicyAttachmentOutputWithContext(ctx context.Context) SteeringPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SteeringPolicyAttachmentOutput)
}

// SteeringPolicyAttachmentArrayInput is an input type that accepts SteeringPolicyAttachmentArray and SteeringPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `SteeringPolicyAttachmentArrayInput` via:
//
//	SteeringPolicyAttachmentArray{ SteeringPolicyAttachmentArgs{...} }
type SteeringPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToSteeringPolicyAttachmentArrayOutput() SteeringPolicyAttachmentArrayOutput
	ToSteeringPolicyAttachmentArrayOutputWithContext(context.Context) SteeringPolicyAttachmentArrayOutput
}

type SteeringPolicyAttachmentArray []SteeringPolicyAttachmentInput

func (SteeringPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SteeringPolicyAttachment)(nil)).Elem()
}

func (i SteeringPolicyAttachmentArray) ToSteeringPolicyAttachmentArrayOutput() SteeringPolicyAttachmentArrayOutput {
	return i.ToSteeringPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i SteeringPolicyAttachmentArray) ToSteeringPolicyAttachmentArrayOutputWithContext(ctx context.Context) SteeringPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SteeringPolicyAttachmentArrayOutput)
}

// SteeringPolicyAttachmentMapInput is an input type that accepts SteeringPolicyAttachmentMap and SteeringPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `SteeringPolicyAttachmentMapInput` via:
//
//	SteeringPolicyAttachmentMap{ "key": SteeringPolicyAttachmentArgs{...} }
type SteeringPolicyAttachmentMapInput interface {
	pulumi.Input

	ToSteeringPolicyAttachmentMapOutput() SteeringPolicyAttachmentMapOutput
	ToSteeringPolicyAttachmentMapOutputWithContext(context.Context) SteeringPolicyAttachmentMapOutput
}

type SteeringPolicyAttachmentMap map[string]SteeringPolicyAttachmentInput

func (SteeringPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SteeringPolicyAttachment)(nil)).Elem()
}

func (i SteeringPolicyAttachmentMap) ToSteeringPolicyAttachmentMapOutput() SteeringPolicyAttachmentMapOutput {
	return i.ToSteeringPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i SteeringPolicyAttachmentMap) ToSteeringPolicyAttachmentMapOutputWithContext(ctx context.Context) SteeringPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SteeringPolicyAttachmentMapOutput)
}

type SteeringPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (SteeringPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SteeringPolicyAttachment)(nil)).Elem()
}

func (o SteeringPolicyAttachmentOutput) ToSteeringPolicyAttachmentOutput() SteeringPolicyAttachmentOutput {
	return o
}

func (o SteeringPolicyAttachmentOutput) ToSteeringPolicyAttachmentOutputWithContext(ctx context.Context) SteeringPolicyAttachmentOutput {
	return o
}

// The OCID of the compartment containing the steering policy attachment.
func (o SteeringPolicyAttachmentOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringPtrOutput { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
func (o SteeringPolicyAttachmentOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The attached domain within the attached zone. `domainName` is case insensitive.
func (o SteeringPolicyAttachmentOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
func (o SteeringPolicyAttachmentOutput) Rtypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringArrayOutput { return v.Rtypes }).(pulumi.StringArrayOutput)
}

// The canonical absolute URL of the resource.
func (o SteeringPolicyAttachmentOutput) Self() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringPtrOutput { return v.Self }).(pulumi.StringPtrOutput)
}

// The current state of the resource.
func (o SteeringPolicyAttachmentOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID of the attached steering policy.
func (o SteeringPolicyAttachmentOutput) SteeringPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringOutput { return v.SteeringPolicyId }).(pulumi.StringOutput)
}

// The date and time the resource was created, expressed in RFC 3339 timestamp format.
func (o SteeringPolicyAttachmentOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringPtrOutput { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The OCID of the attached zone.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SteeringPolicyAttachmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *SteeringPolicyAttachment) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SteeringPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (SteeringPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SteeringPolicyAttachment)(nil)).Elem()
}

func (o SteeringPolicyAttachmentArrayOutput) ToSteeringPolicyAttachmentArrayOutput() SteeringPolicyAttachmentArrayOutput {
	return o
}

func (o SteeringPolicyAttachmentArrayOutput) ToSteeringPolicyAttachmentArrayOutputWithContext(ctx context.Context) SteeringPolicyAttachmentArrayOutput {
	return o
}

func (o SteeringPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) SteeringPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SteeringPolicyAttachment {
		return vs[0].([]*SteeringPolicyAttachment)[vs[1].(int)]
	}).(SteeringPolicyAttachmentOutput)
}

type SteeringPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (SteeringPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SteeringPolicyAttachment)(nil)).Elem()
}

func (o SteeringPolicyAttachmentMapOutput) ToSteeringPolicyAttachmentMapOutput() SteeringPolicyAttachmentMapOutput {
	return o
}

func (o SteeringPolicyAttachmentMapOutput) ToSteeringPolicyAttachmentMapOutputWithContext(ctx context.Context) SteeringPolicyAttachmentMapOutput {
	return o
}

func (o SteeringPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) SteeringPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SteeringPolicyAttachment {
		return vs[0].(map[string]*SteeringPolicyAttachment)[vs[1].(string)]
	}).(SteeringPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SteeringPolicyAttachmentInput)(nil)).Elem(), &SteeringPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SteeringPolicyAttachmentArrayInput)(nil)).Elem(), SteeringPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SteeringPolicyAttachmentMapInput)(nil)).Elem(), SteeringPolicyAttachmentMap{})
	pulumi.RegisterOutputType(SteeringPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(SteeringPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(SteeringPolicyAttachmentMapOutput{})
}
