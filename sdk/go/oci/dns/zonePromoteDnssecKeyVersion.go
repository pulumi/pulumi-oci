// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Zone Promote Dnssec Key Version resource in Oracle Cloud Infrastructure DNS service.
//
// Promotes a specified `DnssecKeyVersion` on the zone.
//
// If the `DnssecKeyVersion` identified in the request body is a key signing key (KSK) that is replacing
// another `DnssecKeyVersion`, then the old `DnssecKeyVersion` is scheduled for removal from the zone.
//
// For key signing keys (KSKs), you must create the DS record with the new key information **before** promoting
// the new key to establish a chain of trust. To avoid a service disruption, remove the old DS record as soon
// as its TTL (time to live) expires.
//
// For more information, see [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewZonePromoteDnssecKeyVersion(ctx, "test_zone_promote_dnssec_key_version", &dns.ZonePromoteDnssecKeyVersionArgs{
//				DnssecKeyVersionUuid: pulumi.Any(zonePromoteDnssecKeyVersionDnssecKeyVersionUuid),
//				ZoneId:               pulumi.Any(testZone.Id),
//				Scope:                pulumi.Any(zonePromoteDnssecKeyVersionScope),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type ZonePromoteDnssecKeyVersion struct {
	pulumi.CustomResourceState

	// The UUID of the `DnssecKeyVersion` that is being promoted.
	DnssecKeyVersionUuid pulumi.StringOutput `pulumi:"dnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZonePromoteDnssecKeyVersion registers a new resource with the given unique name, arguments, and options.
func NewZonePromoteDnssecKeyVersion(ctx *pulumi.Context,
	name string, args *ZonePromoteDnssecKeyVersionArgs, opts ...pulumi.ResourceOption) (*ZonePromoteDnssecKeyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnssecKeyVersionUuid == nil {
		return nil, errors.New("invalid value for required argument 'DnssecKeyVersionUuid'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZonePromoteDnssecKeyVersion
	err := ctx.RegisterResource("oci:Dns/zonePromoteDnssecKeyVersion:ZonePromoteDnssecKeyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZonePromoteDnssecKeyVersion gets an existing ZonePromoteDnssecKeyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZonePromoteDnssecKeyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZonePromoteDnssecKeyVersionState, opts ...pulumi.ResourceOption) (*ZonePromoteDnssecKeyVersion, error) {
	var resource ZonePromoteDnssecKeyVersion
	err := ctx.ReadResource("oci:Dns/zonePromoteDnssecKeyVersion:ZonePromoteDnssecKeyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZonePromoteDnssecKeyVersion resources.
type zonePromoteDnssecKeyVersionState struct {
	// The UUID of the `DnssecKeyVersion` that is being promoted.
	DnssecKeyVersionUuid *string `pulumi:"dnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope *string `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId *string `pulumi:"zoneId"`
}

type ZonePromoteDnssecKeyVersionState struct {
	// The UUID of the `DnssecKeyVersion` that is being promoted.
	DnssecKeyVersionUuid pulumi.StringPtrInput
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringPtrInput
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringPtrInput
}

func (ZonePromoteDnssecKeyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zonePromoteDnssecKeyVersionState)(nil)).Elem()
}

type zonePromoteDnssecKeyVersionArgs struct {
	// The UUID of the `DnssecKeyVersion` that is being promoted.
	DnssecKeyVersionUuid string `pulumi:"dnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope *string `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZonePromoteDnssecKeyVersion resource.
type ZonePromoteDnssecKeyVersionArgs struct {
	// The UUID of the `DnssecKeyVersion` that is being promoted.
	DnssecKeyVersionUuid pulumi.StringInput
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringPtrInput
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringInput
}

func (ZonePromoteDnssecKeyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zonePromoteDnssecKeyVersionArgs)(nil)).Elem()
}

type ZonePromoteDnssecKeyVersionInput interface {
	pulumi.Input

	ToZonePromoteDnssecKeyVersionOutput() ZonePromoteDnssecKeyVersionOutput
	ToZonePromoteDnssecKeyVersionOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionOutput
}

func (*ZonePromoteDnssecKeyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (i *ZonePromoteDnssecKeyVersion) ToZonePromoteDnssecKeyVersionOutput() ZonePromoteDnssecKeyVersionOutput {
	return i.ToZonePromoteDnssecKeyVersionOutputWithContext(context.Background())
}

func (i *ZonePromoteDnssecKeyVersion) ToZonePromoteDnssecKeyVersionOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePromoteDnssecKeyVersionOutput)
}

// ZonePromoteDnssecKeyVersionArrayInput is an input type that accepts ZonePromoteDnssecKeyVersionArray and ZonePromoteDnssecKeyVersionArrayOutput values.
// You can construct a concrete instance of `ZonePromoteDnssecKeyVersionArrayInput` via:
//
//	ZonePromoteDnssecKeyVersionArray{ ZonePromoteDnssecKeyVersionArgs{...} }
type ZonePromoteDnssecKeyVersionArrayInput interface {
	pulumi.Input

	ToZonePromoteDnssecKeyVersionArrayOutput() ZonePromoteDnssecKeyVersionArrayOutput
	ToZonePromoteDnssecKeyVersionArrayOutputWithContext(context.Context) ZonePromoteDnssecKeyVersionArrayOutput
}

type ZonePromoteDnssecKeyVersionArray []ZonePromoteDnssecKeyVersionInput

func (ZonePromoteDnssecKeyVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (i ZonePromoteDnssecKeyVersionArray) ToZonePromoteDnssecKeyVersionArrayOutput() ZonePromoteDnssecKeyVersionArrayOutput {
	return i.ToZonePromoteDnssecKeyVersionArrayOutputWithContext(context.Background())
}

func (i ZonePromoteDnssecKeyVersionArray) ToZonePromoteDnssecKeyVersionArrayOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePromoteDnssecKeyVersionArrayOutput)
}

// ZonePromoteDnssecKeyVersionMapInput is an input type that accepts ZonePromoteDnssecKeyVersionMap and ZonePromoteDnssecKeyVersionMapOutput values.
// You can construct a concrete instance of `ZonePromoteDnssecKeyVersionMapInput` via:
//
//	ZonePromoteDnssecKeyVersionMap{ "key": ZonePromoteDnssecKeyVersionArgs{...} }
type ZonePromoteDnssecKeyVersionMapInput interface {
	pulumi.Input

	ToZonePromoteDnssecKeyVersionMapOutput() ZonePromoteDnssecKeyVersionMapOutput
	ToZonePromoteDnssecKeyVersionMapOutputWithContext(context.Context) ZonePromoteDnssecKeyVersionMapOutput
}

type ZonePromoteDnssecKeyVersionMap map[string]ZonePromoteDnssecKeyVersionInput

func (ZonePromoteDnssecKeyVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (i ZonePromoteDnssecKeyVersionMap) ToZonePromoteDnssecKeyVersionMapOutput() ZonePromoteDnssecKeyVersionMapOutput {
	return i.ToZonePromoteDnssecKeyVersionMapOutputWithContext(context.Background())
}

func (i ZonePromoteDnssecKeyVersionMap) ToZonePromoteDnssecKeyVersionMapOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePromoteDnssecKeyVersionMapOutput)
}

type ZonePromoteDnssecKeyVersionOutput struct{ *pulumi.OutputState }

func (ZonePromoteDnssecKeyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (o ZonePromoteDnssecKeyVersionOutput) ToZonePromoteDnssecKeyVersionOutput() ZonePromoteDnssecKeyVersionOutput {
	return o
}

func (o ZonePromoteDnssecKeyVersionOutput) ToZonePromoteDnssecKeyVersionOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionOutput {
	return o
}

// The UUID of the `DnssecKeyVersion` that is being promoted.
func (o ZonePromoteDnssecKeyVersionOutput) DnssecKeyVersionUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonePromoteDnssecKeyVersion) pulumi.StringOutput { return v.DnssecKeyVersionUuid }).(pulumi.StringOutput)
}

// Specifies to operate only on resources that have a matching DNS scope.
func (o ZonePromoteDnssecKeyVersionOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonePromoteDnssecKeyVersion) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The OCID of the target zone.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ZonePromoteDnssecKeyVersionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZonePromoteDnssecKeyVersion) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonePromoteDnssecKeyVersionArrayOutput struct{ *pulumi.OutputState }

func (ZonePromoteDnssecKeyVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (o ZonePromoteDnssecKeyVersionArrayOutput) ToZonePromoteDnssecKeyVersionArrayOutput() ZonePromoteDnssecKeyVersionArrayOutput {
	return o
}

func (o ZonePromoteDnssecKeyVersionArrayOutput) ToZonePromoteDnssecKeyVersionArrayOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionArrayOutput {
	return o
}

func (o ZonePromoteDnssecKeyVersionArrayOutput) Index(i pulumi.IntInput) ZonePromoteDnssecKeyVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZonePromoteDnssecKeyVersion {
		return vs[0].([]*ZonePromoteDnssecKeyVersion)[vs[1].(int)]
	}).(ZonePromoteDnssecKeyVersionOutput)
}

type ZonePromoteDnssecKeyVersionMapOutput struct{ *pulumi.OutputState }

func (ZonePromoteDnssecKeyVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZonePromoteDnssecKeyVersion)(nil)).Elem()
}

func (o ZonePromoteDnssecKeyVersionMapOutput) ToZonePromoteDnssecKeyVersionMapOutput() ZonePromoteDnssecKeyVersionMapOutput {
	return o
}

func (o ZonePromoteDnssecKeyVersionMapOutput) ToZonePromoteDnssecKeyVersionMapOutputWithContext(ctx context.Context) ZonePromoteDnssecKeyVersionMapOutput {
	return o
}

func (o ZonePromoteDnssecKeyVersionMapOutput) MapIndex(k pulumi.StringInput) ZonePromoteDnssecKeyVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZonePromoteDnssecKeyVersion {
		return vs[0].(map[string]*ZonePromoteDnssecKeyVersion)[vs[1].(string)]
	}).(ZonePromoteDnssecKeyVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZonePromoteDnssecKeyVersionInput)(nil)).Elem(), &ZonePromoteDnssecKeyVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonePromoteDnssecKeyVersionArrayInput)(nil)).Elem(), ZonePromoteDnssecKeyVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonePromoteDnssecKeyVersionMapInput)(nil)).Elem(), ZonePromoteDnssecKeyVersionMap{})
	pulumi.RegisterOutputType(ZonePromoteDnssecKeyVersionOutput{})
	pulumi.RegisterOutputType(ZonePromoteDnssecKeyVersionArrayOutput{})
	pulumi.RegisterOutputType(ZonePromoteDnssecKeyVersionMapOutput{})
}
