// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Zone Stage Dnssec Key Version resource in Oracle Cloud Infrastructure DNS service.
//
// Stages a new `DnssecKeyVersion` on the zone. Staging is a process that generates a new "successor" key version
// that replaces an existing "predecessor" key version.
// **Note:** A new key-signing key (KSK) version is inert until you update the parent zone DS records.
//
// For more information, see the [DNSSEC](https://docs.cloud.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm) documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewZoneStageDnssecKeyVersion(ctx, "test_zone_stage_dnssec_key_version", &dns.ZoneStageDnssecKeyVersionArgs{
//				PredecessorDnssecKeyVersionUuid: pulumi.Any(zoneStageDnssecKeyVersionPredecessorDnssecKeyVersionUuid),
//				ZoneId:                          pulumi.Any(testZone.Id),
//				Scope:                           pulumi.Any(zoneStageDnssecKeyVersionScope),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type ZoneStageDnssecKeyVersion struct {
	pulumi.CustomResourceState

	// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
	PredecessorDnssecKeyVersionUuid pulumi.StringOutput `pulumi:"predecessorDnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneStageDnssecKeyVersion registers a new resource with the given unique name, arguments, and options.
func NewZoneStageDnssecKeyVersion(ctx *pulumi.Context,
	name string, args *ZoneStageDnssecKeyVersionArgs, opts ...pulumi.ResourceOption) (*ZoneStageDnssecKeyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PredecessorDnssecKeyVersionUuid == nil {
		return nil, errors.New("invalid value for required argument 'PredecessorDnssecKeyVersionUuid'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneStageDnssecKeyVersion
	err := ctx.RegisterResource("oci:Dns/zoneStageDnssecKeyVersion:ZoneStageDnssecKeyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneStageDnssecKeyVersion gets an existing ZoneStageDnssecKeyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneStageDnssecKeyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneStageDnssecKeyVersionState, opts ...pulumi.ResourceOption) (*ZoneStageDnssecKeyVersion, error) {
	var resource ZoneStageDnssecKeyVersion
	err := ctx.ReadResource("oci:Dns/zoneStageDnssecKeyVersion:ZoneStageDnssecKeyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneStageDnssecKeyVersion resources.
type zoneStageDnssecKeyVersionState struct {
	// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
	PredecessorDnssecKeyVersionUuid *string `pulumi:"predecessorDnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope *string `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneStageDnssecKeyVersionState struct {
	// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
	PredecessorDnssecKeyVersionUuid pulumi.StringPtrInput
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringPtrInput
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringPtrInput
}

func (ZoneStageDnssecKeyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneStageDnssecKeyVersionState)(nil)).Elem()
}

type zoneStageDnssecKeyVersionArgs struct {
	// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
	PredecessorDnssecKeyVersionUuid string `pulumi:"predecessorDnssecKeyVersionUuid"`
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope *string `pulumi:"scope"`
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneStageDnssecKeyVersion resource.
type ZoneStageDnssecKeyVersionArgs struct {
	// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
	PredecessorDnssecKeyVersionUuid pulumi.StringInput
	// Specifies to operate only on resources that have a matching DNS scope.
	Scope pulumi.StringPtrInput
	// The OCID of the target zone.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ZoneId pulumi.StringInput
}

func (ZoneStageDnssecKeyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneStageDnssecKeyVersionArgs)(nil)).Elem()
}

type ZoneStageDnssecKeyVersionInput interface {
	pulumi.Input

	ToZoneStageDnssecKeyVersionOutput() ZoneStageDnssecKeyVersionOutput
	ToZoneStageDnssecKeyVersionOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionOutput
}

func (*ZoneStageDnssecKeyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (i *ZoneStageDnssecKeyVersion) ToZoneStageDnssecKeyVersionOutput() ZoneStageDnssecKeyVersionOutput {
	return i.ToZoneStageDnssecKeyVersionOutputWithContext(context.Background())
}

func (i *ZoneStageDnssecKeyVersion) ToZoneStageDnssecKeyVersionOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneStageDnssecKeyVersionOutput)
}

// ZoneStageDnssecKeyVersionArrayInput is an input type that accepts ZoneStageDnssecKeyVersionArray and ZoneStageDnssecKeyVersionArrayOutput values.
// You can construct a concrete instance of `ZoneStageDnssecKeyVersionArrayInput` via:
//
//	ZoneStageDnssecKeyVersionArray{ ZoneStageDnssecKeyVersionArgs{...} }
type ZoneStageDnssecKeyVersionArrayInput interface {
	pulumi.Input

	ToZoneStageDnssecKeyVersionArrayOutput() ZoneStageDnssecKeyVersionArrayOutput
	ToZoneStageDnssecKeyVersionArrayOutputWithContext(context.Context) ZoneStageDnssecKeyVersionArrayOutput
}

type ZoneStageDnssecKeyVersionArray []ZoneStageDnssecKeyVersionInput

func (ZoneStageDnssecKeyVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (i ZoneStageDnssecKeyVersionArray) ToZoneStageDnssecKeyVersionArrayOutput() ZoneStageDnssecKeyVersionArrayOutput {
	return i.ToZoneStageDnssecKeyVersionArrayOutputWithContext(context.Background())
}

func (i ZoneStageDnssecKeyVersionArray) ToZoneStageDnssecKeyVersionArrayOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneStageDnssecKeyVersionArrayOutput)
}

// ZoneStageDnssecKeyVersionMapInput is an input type that accepts ZoneStageDnssecKeyVersionMap and ZoneStageDnssecKeyVersionMapOutput values.
// You can construct a concrete instance of `ZoneStageDnssecKeyVersionMapInput` via:
//
//	ZoneStageDnssecKeyVersionMap{ "key": ZoneStageDnssecKeyVersionArgs{...} }
type ZoneStageDnssecKeyVersionMapInput interface {
	pulumi.Input

	ToZoneStageDnssecKeyVersionMapOutput() ZoneStageDnssecKeyVersionMapOutput
	ToZoneStageDnssecKeyVersionMapOutputWithContext(context.Context) ZoneStageDnssecKeyVersionMapOutput
}

type ZoneStageDnssecKeyVersionMap map[string]ZoneStageDnssecKeyVersionInput

func (ZoneStageDnssecKeyVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (i ZoneStageDnssecKeyVersionMap) ToZoneStageDnssecKeyVersionMapOutput() ZoneStageDnssecKeyVersionMapOutput {
	return i.ToZoneStageDnssecKeyVersionMapOutputWithContext(context.Background())
}

func (i ZoneStageDnssecKeyVersionMap) ToZoneStageDnssecKeyVersionMapOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneStageDnssecKeyVersionMapOutput)
}

type ZoneStageDnssecKeyVersionOutput struct{ *pulumi.OutputState }

func (ZoneStageDnssecKeyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (o ZoneStageDnssecKeyVersionOutput) ToZoneStageDnssecKeyVersionOutput() ZoneStageDnssecKeyVersionOutput {
	return o
}

func (o ZoneStageDnssecKeyVersionOutput) ToZoneStageDnssecKeyVersionOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionOutput {
	return o
}

// The UUID of the `DnssecKeyVersion` for which a new successor should be generated.
func (o ZoneStageDnssecKeyVersionOutput) PredecessorDnssecKeyVersionUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneStageDnssecKeyVersion) pulumi.StringOutput { return v.PredecessorDnssecKeyVersionUuid }).(pulumi.StringOutput)
}

// Specifies to operate only on resources that have a matching DNS scope.
func (o ZoneStageDnssecKeyVersionOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneStageDnssecKeyVersion) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The OCID of the target zone.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ZoneStageDnssecKeyVersionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneStageDnssecKeyVersion) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneStageDnssecKeyVersionArrayOutput struct{ *pulumi.OutputState }

func (ZoneStageDnssecKeyVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (o ZoneStageDnssecKeyVersionArrayOutput) ToZoneStageDnssecKeyVersionArrayOutput() ZoneStageDnssecKeyVersionArrayOutput {
	return o
}

func (o ZoneStageDnssecKeyVersionArrayOutput) ToZoneStageDnssecKeyVersionArrayOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionArrayOutput {
	return o
}

func (o ZoneStageDnssecKeyVersionArrayOutput) Index(i pulumi.IntInput) ZoneStageDnssecKeyVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneStageDnssecKeyVersion {
		return vs[0].([]*ZoneStageDnssecKeyVersion)[vs[1].(int)]
	}).(ZoneStageDnssecKeyVersionOutput)
}

type ZoneStageDnssecKeyVersionMapOutput struct{ *pulumi.OutputState }

func (ZoneStageDnssecKeyVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneStageDnssecKeyVersion)(nil)).Elem()
}

func (o ZoneStageDnssecKeyVersionMapOutput) ToZoneStageDnssecKeyVersionMapOutput() ZoneStageDnssecKeyVersionMapOutput {
	return o
}

func (o ZoneStageDnssecKeyVersionMapOutput) ToZoneStageDnssecKeyVersionMapOutputWithContext(ctx context.Context) ZoneStageDnssecKeyVersionMapOutput {
	return o
}

func (o ZoneStageDnssecKeyVersionMapOutput) MapIndex(k pulumi.StringInput) ZoneStageDnssecKeyVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneStageDnssecKeyVersion {
		return vs[0].(map[string]*ZoneStageDnssecKeyVersion)[vs[1].(string)]
	}).(ZoneStageDnssecKeyVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneStageDnssecKeyVersionInput)(nil)).Elem(), &ZoneStageDnssecKeyVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneStageDnssecKeyVersionArrayInput)(nil)).Elem(), ZoneStageDnssecKeyVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneStageDnssecKeyVersionMapInput)(nil)).Elem(), ZoneStageDnssecKeyVersionMap{})
	pulumi.RegisterOutputType(ZoneStageDnssecKeyVersionOutput{})
	pulumi.RegisterOutputType(ZoneStageDnssecKeyVersionArrayOutput{})
	pulumi.RegisterOutputType(ZoneStageDnssecKeyVersionMapOutput{})
}
