// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package emwarehouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Em Warehouse resource in Oracle Cloud Infrastructure Em Warehouse service.
//
// Creates a new EmWarehouse.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/EmWarehouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := EmWarehouse.NewEmWarehouse(ctx, "testEmWarehouse", &EmWarehouse.EmWarehouseArgs{
//				CompartmentId:                 pulumi.Any(_var.Compartment_id),
//				EmBridgeId:                    pulumi.Any(oci_em_warehouse_em_bridge.Test_em_bridge.Id),
//				OperationsInsightsWarehouseId: pulumi.Any(oci_opsi_operations_insights_warehouse.Test_operations_insights_warehouse.Id),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				DisplayName: pulumi.Any(_var.Em_warehouse_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EmWarehouses can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:EmWarehouse/emWarehouse:EmWarehouse test_em_warehouse "id"
//
// ```
type EmWarehouse struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// EmWarehouse Identifier
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) EMBridge Identifier
	EmBridgeId pulumi.StringOutput `pulumi:"emBridgeId"`
	// Type of the EmWarehouse.
	EmWarehouseType pulumi.StringOutput `pulumi:"emWarehouseType"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Data Flow Run Status Message
	LatestEtlRunMessage pulumi.StringOutput `pulumi:"latestEtlRunMessage"`
	// Data Flow Run Status
	LatestEtlRunStatus pulumi.StringOutput `pulumi:"latestEtlRunStatus"`
	// Data Flow Run Total Time
	LatestEtlRunTime pulumi.StringOutput `pulumi:"latestEtlRunTime"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// operations Insights Warehouse Identifier
	OperationsInsightsWarehouseId pulumi.StringOutput `pulumi:"operationsInsightsWarehouseId"`
	// The current state of the EmWarehouse.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the the EmWarehouse was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the EmWarehouse was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewEmWarehouse registers a new resource with the given unique name, arguments, and options.
func NewEmWarehouse(ctx *pulumi.Context,
	name string, args *EmWarehouseArgs, opts ...pulumi.ResourceOption) (*EmWarehouse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.EmBridgeId == nil {
		return nil, errors.New("invalid value for required argument 'EmBridgeId'")
	}
	if args.OperationsInsightsWarehouseId == nil {
		return nil, errors.New("invalid value for required argument 'OperationsInsightsWarehouseId'")
	}
	var resource EmWarehouse
	err := ctx.RegisterResource("oci:EmWarehouse/emWarehouse:EmWarehouse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmWarehouse gets an existing EmWarehouse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmWarehouse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmWarehouseState, opts ...pulumi.ResourceOption) (*EmWarehouse, error) {
	var resource EmWarehouse
	err := ctx.ReadResource("oci:EmWarehouse/emWarehouse:EmWarehouse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmWarehouse resources.
type emWarehouseState struct {
	// (Updatable) Compartment Identifier
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// EmWarehouse Identifier
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) EMBridge Identifier
	EmBridgeId *string `pulumi:"emBridgeId"`
	// Type of the EmWarehouse.
	EmWarehouseType *string `pulumi:"emWarehouseType"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Data Flow Run Status Message
	LatestEtlRunMessage *string `pulumi:"latestEtlRunMessage"`
	// Data Flow Run Status
	LatestEtlRunStatus *string `pulumi:"latestEtlRunStatus"`
	// Data Flow Run Total Time
	LatestEtlRunTime *string `pulumi:"latestEtlRunTime"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// operations Insights Warehouse Identifier
	OperationsInsightsWarehouseId *string `pulumi:"operationsInsightsWarehouseId"`
	// The current state of the EmWarehouse.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the the EmWarehouse was created. An RFC3339 formatted datetime string
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the EmWarehouse was updated. An RFC3339 formatted datetime string
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type EmWarehouseState struct {
	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// EmWarehouse Identifier
	DisplayName pulumi.StringPtrInput
	// (Updatable) EMBridge Identifier
	EmBridgeId pulumi.StringPtrInput
	// Type of the EmWarehouse.
	EmWarehouseType pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Data Flow Run Status Message
	LatestEtlRunMessage pulumi.StringPtrInput
	// Data Flow Run Status
	LatestEtlRunStatus pulumi.StringPtrInput
	// Data Flow Run Total Time
	LatestEtlRunTime pulumi.StringPtrInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// operations Insights Warehouse Identifier
	OperationsInsightsWarehouseId pulumi.StringPtrInput
	// The current state of the EmWarehouse.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the the EmWarehouse was created. An RFC3339 formatted datetime string
	TimeCreated pulumi.StringPtrInput
	// The time the EmWarehouse was updated. An RFC3339 formatted datetime string
	TimeUpdated pulumi.StringPtrInput
}

func (EmWarehouseState) ElementType() reflect.Type {
	return reflect.TypeOf((*emWarehouseState)(nil)).Elem()
}

type emWarehouseArgs struct {
	// (Updatable) Compartment Identifier
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// EmWarehouse Identifier
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) EMBridge Identifier
	EmBridgeId string `pulumi:"emBridgeId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// operations Insights Warehouse Identifier
	OperationsInsightsWarehouseId string `pulumi:"operationsInsightsWarehouseId"`
}

// The set of arguments for constructing a EmWarehouse resource.
type EmWarehouseArgs struct {
	// (Updatable) Compartment Identifier
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// EmWarehouse Identifier
	DisplayName pulumi.StringPtrInput
	// (Updatable) EMBridge Identifier
	EmBridgeId pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// operations Insights Warehouse Identifier
	OperationsInsightsWarehouseId pulumi.StringInput
}

func (EmWarehouseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emWarehouseArgs)(nil)).Elem()
}

type EmWarehouseInput interface {
	pulumi.Input

	ToEmWarehouseOutput() EmWarehouseOutput
	ToEmWarehouseOutputWithContext(ctx context.Context) EmWarehouseOutput
}

func (*EmWarehouse) ElementType() reflect.Type {
	return reflect.TypeOf((**EmWarehouse)(nil)).Elem()
}

func (i *EmWarehouse) ToEmWarehouseOutput() EmWarehouseOutput {
	return i.ToEmWarehouseOutputWithContext(context.Background())
}

func (i *EmWarehouse) ToEmWarehouseOutputWithContext(ctx context.Context) EmWarehouseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmWarehouseOutput)
}

// EmWarehouseArrayInput is an input type that accepts EmWarehouseArray and EmWarehouseArrayOutput values.
// You can construct a concrete instance of `EmWarehouseArrayInput` via:
//
//	EmWarehouseArray{ EmWarehouseArgs{...} }
type EmWarehouseArrayInput interface {
	pulumi.Input

	ToEmWarehouseArrayOutput() EmWarehouseArrayOutput
	ToEmWarehouseArrayOutputWithContext(context.Context) EmWarehouseArrayOutput
}

type EmWarehouseArray []EmWarehouseInput

func (EmWarehouseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmWarehouse)(nil)).Elem()
}

func (i EmWarehouseArray) ToEmWarehouseArrayOutput() EmWarehouseArrayOutput {
	return i.ToEmWarehouseArrayOutputWithContext(context.Background())
}

func (i EmWarehouseArray) ToEmWarehouseArrayOutputWithContext(ctx context.Context) EmWarehouseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmWarehouseArrayOutput)
}

// EmWarehouseMapInput is an input type that accepts EmWarehouseMap and EmWarehouseMapOutput values.
// You can construct a concrete instance of `EmWarehouseMapInput` via:
//
//	EmWarehouseMap{ "key": EmWarehouseArgs{...} }
type EmWarehouseMapInput interface {
	pulumi.Input

	ToEmWarehouseMapOutput() EmWarehouseMapOutput
	ToEmWarehouseMapOutputWithContext(context.Context) EmWarehouseMapOutput
}

type EmWarehouseMap map[string]EmWarehouseInput

func (EmWarehouseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmWarehouse)(nil)).Elem()
}

func (i EmWarehouseMap) ToEmWarehouseMapOutput() EmWarehouseMapOutput {
	return i.ToEmWarehouseMapOutputWithContext(context.Background())
}

func (i EmWarehouseMap) ToEmWarehouseMapOutputWithContext(ctx context.Context) EmWarehouseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmWarehouseMapOutput)
}

type EmWarehouseOutput struct{ *pulumi.OutputState }

func (EmWarehouseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmWarehouse)(nil)).Elem()
}

func (o EmWarehouseOutput) ToEmWarehouseOutput() EmWarehouseOutput {
	return o
}

func (o EmWarehouseOutput) ToEmWarehouseOutputWithContext(ctx context.Context) EmWarehouseOutput {
	return o
}

type EmWarehouseArrayOutput struct{ *pulumi.OutputState }

func (EmWarehouseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmWarehouse)(nil)).Elem()
}

func (o EmWarehouseArrayOutput) ToEmWarehouseArrayOutput() EmWarehouseArrayOutput {
	return o
}

func (o EmWarehouseArrayOutput) ToEmWarehouseArrayOutputWithContext(ctx context.Context) EmWarehouseArrayOutput {
	return o
}

func (o EmWarehouseArrayOutput) Index(i pulumi.IntInput) EmWarehouseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmWarehouse {
		return vs[0].([]*EmWarehouse)[vs[1].(int)]
	}).(EmWarehouseOutput)
}

type EmWarehouseMapOutput struct{ *pulumi.OutputState }

func (EmWarehouseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmWarehouse)(nil)).Elem()
}

func (o EmWarehouseMapOutput) ToEmWarehouseMapOutput() EmWarehouseMapOutput {
	return o
}

func (o EmWarehouseMapOutput) ToEmWarehouseMapOutputWithContext(ctx context.Context) EmWarehouseMapOutput {
	return o
}

func (o EmWarehouseMapOutput) MapIndex(k pulumi.StringInput) EmWarehouseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmWarehouse {
		return vs[0].(map[string]*EmWarehouse)[vs[1].(string)]
	}).(EmWarehouseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmWarehouseInput)(nil)).Elem(), &EmWarehouse{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmWarehouseArrayInput)(nil)).Elem(), EmWarehouseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmWarehouseMapInput)(nil)).Elem(), EmWarehouseMap{})
	pulumi.RegisterOutputType(EmWarehouseOutput{})
	pulumi.RegisterOutputType(EmWarehouseArrayOutput{})
	pulumi.RegisterOutputType(EmWarehouseMapOutput{})
}
