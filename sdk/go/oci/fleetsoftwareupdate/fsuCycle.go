// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fleetsoftwareupdate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Fsu Cycle resource in Oracle Cloud Infrastructure Fleet Software Update service.
//
// Creates a new Exadata Fleet Update Cycle.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/FleetSoftwareUpdate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := FleetSoftwareUpdate.NewFsuCycle(ctx, "test_fsu_cycle", &FleetSoftwareUpdate.FsuCycleArgs{
//				CompartmentId:   pulumi.Any(compartmentId),
//				FsuCollectionId: pulumi.Any(testFsuCollection.Id),
//				GoalVersionDetails: &fleetsoftwareupdate.FsuCycleGoalVersionDetailsArgs{
//					Type:            pulumi.Any(fsuCycleGoalVersionDetailsType),
//					HomePolicy:      pulumi.Any(fsuCycleGoalVersionDetailsHomePolicy),
//					NewHomePrefix:   pulumi.Any(fsuCycleGoalVersionDetailsNewHomePrefix),
//					SoftwareImageId: pulumi.Any(testImage.Id),
//					Version:         pulumi.Any(fsuCycleGoalVersionDetailsVersion),
//				},
//				Type: pulumi.Any(fsuCycleType),
//				ApplyActionSchedule: &fleetsoftwareupdate.FsuCycleApplyActionScheduleArgs{
//					TimeToStart: pulumi.Any(fsuCycleApplyActionScheduleTimeToStart),
//					Type:        pulumi.Any(fsuCycleApplyActionScheduleType),
//				},
//				BatchingStrategy: &fleetsoftwareupdate.FsuCycleBatchingStrategyArgs{
//					IsForceRolling:       pulumi.Any(fsuCycleBatchingStrategyIsForceRolling),
//					IsWaitForBatchResume: pulumi.Any(fsuCycleBatchingStrategyIsWaitForBatchResume),
//					Percentage:           pulumi.Any(fsuCycleBatchingStrategyPercentage),
//					Type:                 pulumi.Any(fsuCycleBatchingStrategyType),
//				},
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				DiagnosticsCollection: &fleetsoftwareupdate.FsuCycleDiagnosticsCollectionArgs{
//					LogCollectionMode: pulumi.Any(fsuCycleDiagnosticsCollectionLogCollectionMode),
//				},
//				DisplayName: pulumi.Any(fsuCycleDisplayName),
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				IsIgnoreMissingPatches:   pulumi.Any(fsuCycleIsIgnoreMissingPatches),
//				IsIgnorePatches:          pulumi.Any(fsuCycleIsIgnorePatches),
//				IsKeepPlacement:          pulumi.Any(fsuCycleIsKeepPlacement),
//				MaxDrainTimeoutInSeconds: pulumi.Any(fsuCycleMaxDrainTimeoutInSeconds),
//				StageActionSchedule: &fleetsoftwareupdate.FsuCycleStageActionScheduleArgs{
//					TimeToStart: pulumi.Any(fsuCycleStageActionScheduleTimeToStart),
//					Type:        pulumi.Any(fsuCycleStageActionScheduleType),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FsuCycles can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:FleetSoftwareUpdate/fsuCycle:FsuCycle test_fsu_cycle "id"
// ```
type FsuCycle struct {
	pulumi.CustomResourceState

	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	ApplyActionSchedule FsuCycleApplyActionScheduleOutput `pulumi:"applyActionSchedule"`
	// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
	BatchingStrategy FsuCycleBatchingStrategyOutput `pulumi:"batchingStrategy"`
	// Type of Collection this Exadata Fleet Update Cycle belongs to.
	CollectionType pulumi.StringOutput `pulumi:"collectionType"`
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
	DiagnosticsCollection FsuCycleDiagnosticsCollectionOutput `pulumi:"diagnosticsCollection"`
	// (Updatable) Exadata Fleet Update Cycle display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// OCID identifier for the Action that is currently in execution, if applicable.
	ExecutingFsuActionId pulumi.StringOutput `pulumi:"executingFsuActionId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
	FsuCollectionId pulumi.StringOutput `pulumi:"fsuCollectionId"`
	// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
	GoalVersionDetails FsuCycleGoalVersionDetailsOutput `pulumi:"goalVersionDetails"`
	// (Updatable) List of patch IDs to ignore.
	IsIgnoreMissingPatches pulumi.StringArrayOutput `pulumi:"isIgnoreMissingPatches"`
	// (Updatable) Ignore all patches between the source and target homes during patching.
	IsIgnorePatches pulumi.BoolOutput `pulumi:"isIgnorePatches"`
	// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
	IsKeepPlacement pulumi.BoolOutput `pulumi:"isKeepPlacement"`
	// The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
	LastCompletedAction pulumi.StringOutput `pulumi:"lastCompletedAction"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) Service drain timeout specified in seconds.
	MaxDrainTimeoutInSeconds pulumi.IntOutput `pulumi:"maxDrainTimeoutInSeconds"`
	// In this array all the possible actions will be listed. The first element is the suggested Action.
	NextActionToExecutes FsuCycleNextActionToExecuteArrayOutput `pulumi:"nextActionToExecutes"`
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	StageActionSchedule FsuCycleStageActionScheduleOutput `pulumi:"stageActionSchedule"`
	// The current state of the Exadata Fleet Update Cycle.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeFinished pulumi.StringOutput `pulumi:"timeFinished"`
	// The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) Type of Exadata Fleet Update Cycle.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFsuCycle registers a new resource with the given unique name, arguments, and options.
func NewFsuCycle(ctx *pulumi.Context,
	name string, args *FsuCycleArgs, opts ...pulumi.ResourceOption) (*FsuCycle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.FsuCollectionId == nil {
		return nil, errors.New("invalid value for required argument 'FsuCollectionId'")
	}
	if args.GoalVersionDetails == nil {
		return nil, errors.New("invalid value for required argument 'GoalVersionDetails'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FsuCycle
	err := ctx.RegisterResource("oci:FleetSoftwareUpdate/fsuCycle:FsuCycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFsuCycle gets an existing FsuCycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFsuCycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FsuCycleState, opts ...pulumi.ResourceOption) (*FsuCycle, error) {
	var resource FsuCycle
	err := ctx.ReadResource("oci:FleetSoftwareUpdate/fsuCycle:FsuCycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FsuCycle resources.
type fsuCycleState struct {
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	ApplyActionSchedule *FsuCycleApplyActionSchedule `pulumi:"applyActionSchedule"`
	// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
	BatchingStrategy *FsuCycleBatchingStrategy `pulumi:"batchingStrategy"`
	// Type of Collection this Exadata Fleet Update Cycle belongs to.
	CollectionType *string `pulumi:"collectionType"`
	// (Updatable) Compartment Identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
	DiagnosticsCollection *FsuCycleDiagnosticsCollection `pulumi:"diagnosticsCollection"`
	// (Updatable) Exadata Fleet Update Cycle display name.
	DisplayName *string `pulumi:"displayName"`
	// OCID identifier for the Action that is currently in execution, if applicable.
	ExecutingFsuActionId *string `pulumi:"executingFsuActionId"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
	FsuCollectionId *string `pulumi:"fsuCollectionId"`
	// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
	GoalVersionDetails *FsuCycleGoalVersionDetails `pulumi:"goalVersionDetails"`
	// (Updatable) List of patch IDs to ignore.
	IsIgnoreMissingPatches []string `pulumi:"isIgnoreMissingPatches"`
	// (Updatable) Ignore all patches between the source and target homes during patching.
	IsIgnorePatches *bool `pulumi:"isIgnorePatches"`
	// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
	IsKeepPlacement *bool `pulumi:"isKeepPlacement"`
	// The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
	LastCompletedAction *string `pulumi:"lastCompletedAction"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) Service drain timeout specified in seconds.
	MaxDrainTimeoutInSeconds *int `pulumi:"maxDrainTimeoutInSeconds"`
	// In this array all the possible actions will be listed. The first element is the suggested Action.
	NextActionToExecutes []FsuCycleNextActionToExecute `pulumi:"nextActionToExecutes"`
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	StageActionSchedule *FsuCycleStageActionSchedule `pulumi:"stageActionSchedule"`
	// The current state of the Exadata Fleet Update Cycle.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeFinished *string `pulumi:"timeFinished"`
	// The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) Type of Exadata Fleet Update Cycle.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type *string `pulumi:"type"`
}

type FsuCycleState struct {
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	ApplyActionSchedule FsuCycleApplyActionSchedulePtrInput
	// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
	BatchingStrategy FsuCycleBatchingStrategyPtrInput
	// Type of Collection this Exadata Fleet Update Cycle belongs to.
	CollectionType pulumi.StringPtrInput
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
	DiagnosticsCollection FsuCycleDiagnosticsCollectionPtrInput
	// (Updatable) Exadata Fleet Update Cycle display name.
	DisplayName pulumi.StringPtrInput
	// OCID identifier for the Action that is currently in execution, if applicable.
	ExecutingFsuActionId pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
	FsuCollectionId pulumi.StringPtrInput
	// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
	GoalVersionDetails FsuCycleGoalVersionDetailsPtrInput
	// (Updatable) List of patch IDs to ignore.
	IsIgnoreMissingPatches pulumi.StringArrayInput
	// (Updatable) Ignore all patches between the source and target homes during patching.
	IsIgnorePatches pulumi.BoolPtrInput
	// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
	IsKeepPlacement pulumi.BoolPtrInput
	// The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
	LastCompletedAction pulumi.StringPtrInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) Service drain timeout specified in seconds.
	MaxDrainTimeoutInSeconds pulumi.IntPtrInput
	// In this array all the possible actions will be listed. The first element is the suggested Action.
	NextActionToExecutes FsuCycleNextActionToExecuteArrayInput
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	StageActionSchedule FsuCycleStageActionSchedulePtrInput
	// The current state of the Exadata Fleet Update Cycle.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringPtrInput
	// The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeFinished pulumi.StringPtrInput
	// The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) Type of Exadata Fleet Update Cycle.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringPtrInput
}

func (FsuCycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*fsuCycleState)(nil)).Elem()
}

type fsuCycleArgs struct {
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	ApplyActionSchedule *FsuCycleApplyActionSchedule `pulumi:"applyActionSchedule"`
	// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
	BatchingStrategy *FsuCycleBatchingStrategy `pulumi:"batchingStrategy"`
	// (Updatable) Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
	DiagnosticsCollection *FsuCycleDiagnosticsCollection `pulumi:"diagnosticsCollection"`
	// (Updatable) Exadata Fleet Update Cycle display name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
	FsuCollectionId string `pulumi:"fsuCollectionId"`
	// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
	GoalVersionDetails FsuCycleGoalVersionDetails `pulumi:"goalVersionDetails"`
	// (Updatable) List of patch IDs to ignore.
	IsIgnoreMissingPatches []string `pulumi:"isIgnoreMissingPatches"`
	// (Updatable) Ignore all patches between the source and target homes during patching.
	IsIgnorePatches *bool `pulumi:"isIgnorePatches"`
	// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
	IsKeepPlacement *bool `pulumi:"isKeepPlacement"`
	// (Updatable) Service drain timeout specified in seconds.
	MaxDrainTimeoutInSeconds *int `pulumi:"maxDrainTimeoutInSeconds"`
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	StageActionSchedule *FsuCycleStageActionSchedule `pulumi:"stageActionSchedule"`
	// (Updatable) Type of Exadata Fleet Update Cycle.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FsuCycle resource.
type FsuCycleArgs struct {
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	ApplyActionSchedule FsuCycleApplyActionSchedulePtrInput
	// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
	BatchingStrategy FsuCycleBatchingStrategyPtrInput
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
	DiagnosticsCollection FsuCycleDiagnosticsCollectionPtrInput
	// (Updatable) Exadata Fleet Update Cycle display name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
	FsuCollectionId pulumi.StringInput
	// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
	GoalVersionDetails FsuCycleGoalVersionDetailsInput
	// (Updatable) List of patch IDs to ignore.
	IsIgnoreMissingPatches pulumi.StringArrayInput
	// (Updatable) Ignore all patches between the source and target homes during patching.
	IsIgnorePatches pulumi.BoolPtrInput
	// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
	IsKeepPlacement pulumi.BoolPtrInput
	// (Updatable) Service drain timeout specified in seconds.
	MaxDrainTimeoutInSeconds pulumi.IntPtrInput
	// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
	StageActionSchedule FsuCycleStageActionSchedulePtrInput
	// (Updatable) Type of Exadata Fleet Update Cycle.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput
}

func (FsuCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fsuCycleArgs)(nil)).Elem()
}

type FsuCycleInput interface {
	pulumi.Input

	ToFsuCycleOutput() FsuCycleOutput
	ToFsuCycleOutputWithContext(ctx context.Context) FsuCycleOutput
}

func (*FsuCycle) ElementType() reflect.Type {
	return reflect.TypeOf((**FsuCycle)(nil)).Elem()
}

func (i *FsuCycle) ToFsuCycleOutput() FsuCycleOutput {
	return i.ToFsuCycleOutputWithContext(context.Background())
}

func (i *FsuCycle) ToFsuCycleOutputWithContext(ctx context.Context) FsuCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsuCycleOutput)
}

// FsuCycleArrayInput is an input type that accepts FsuCycleArray and FsuCycleArrayOutput values.
// You can construct a concrete instance of `FsuCycleArrayInput` via:
//
//	FsuCycleArray{ FsuCycleArgs{...} }
type FsuCycleArrayInput interface {
	pulumi.Input

	ToFsuCycleArrayOutput() FsuCycleArrayOutput
	ToFsuCycleArrayOutputWithContext(context.Context) FsuCycleArrayOutput
}

type FsuCycleArray []FsuCycleInput

func (FsuCycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FsuCycle)(nil)).Elem()
}

func (i FsuCycleArray) ToFsuCycleArrayOutput() FsuCycleArrayOutput {
	return i.ToFsuCycleArrayOutputWithContext(context.Background())
}

func (i FsuCycleArray) ToFsuCycleArrayOutputWithContext(ctx context.Context) FsuCycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsuCycleArrayOutput)
}

// FsuCycleMapInput is an input type that accepts FsuCycleMap and FsuCycleMapOutput values.
// You can construct a concrete instance of `FsuCycleMapInput` via:
//
//	FsuCycleMap{ "key": FsuCycleArgs{...} }
type FsuCycleMapInput interface {
	pulumi.Input

	ToFsuCycleMapOutput() FsuCycleMapOutput
	ToFsuCycleMapOutputWithContext(context.Context) FsuCycleMapOutput
}

type FsuCycleMap map[string]FsuCycleInput

func (FsuCycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FsuCycle)(nil)).Elem()
}

func (i FsuCycleMap) ToFsuCycleMapOutput() FsuCycleMapOutput {
	return i.ToFsuCycleMapOutputWithContext(context.Background())
}

func (i FsuCycleMap) ToFsuCycleMapOutputWithContext(ctx context.Context) FsuCycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FsuCycleMapOutput)
}

type FsuCycleOutput struct{ *pulumi.OutputState }

func (FsuCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FsuCycle)(nil)).Elem()
}

func (o FsuCycleOutput) ToFsuCycleOutput() FsuCycleOutput {
	return o
}

func (o FsuCycleOutput) ToFsuCycleOutputWithContext(ctx context.Context) FsuCycleOutput {
	return o
}

// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
func (o FsuCycleOutput) ApplyActionSchedule() FsuCycleApplyActionScheduleOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleApplyActionScheduleOutput { return v.ApplyActionSchedule }).(FsuCycleApplyActionScheduleOutput)
}

// (Updatable) Batching strategy details to use during PRECHECK and APPLY Cycle Actions.
func (o FsuCycleOutput) BatchingStrategy() FsuCycleBatchingStrategyOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleBatchingStrategyOutput { return v.BatchingStrategy }).(FsuCycleBatchingStrategyOutput)
}

// Type of Collection this Exadata Fleet Update Cycle belongs to.
func (o FsuCycleOutput) CollectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.CollectionType }).(pulumi.StringOutput)
}

// (Updatable) Compartment Identifier.
func (o FsuCycleOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o FsuCycleOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) Details to configure diagnostics collection for targets affected by this Exadata Fleet Update Maintenance Cycle.
func (o FsuCycleOutput) DiagnosticsCollection() FsuCycleDiagnosticsCollectionOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleDiagnosticsCollectionOutput { return v.DiagnosticsCollection }).(FsuCycleDiagnosticsCollectionOutput)
}

// (Updatable) Exadata Fleet Update Cycle display name.
func (o FsuCycleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// OCID identifier for the Action that is currently in execution, if applicable.
func (o FsuCycleOutput) ExecutingFsuActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.ExecutingFsuActionId }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o FsuCycleOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
func (o FsuCycleOutput) FsuCollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.FsuCollectionId }).(pulumi.StringOutput)
}

// (Updatable) Goal version or image details for the Exadata Fleet Update Cycle.
func (o FsuCycleOutput) GoalVersionDetails() FsuCycleGoalVersionDetailsOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleGoalVersionDetailsOutput { return v.GoalVersionDetails }).(FsuCycleGoalVersionDetailsOutput)
}

// (Updatable) List of patch IDs to ignore.
func (o FsuCycleOutput) IsIgnoreMissingPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringArrayOutput { return v.IsIgnoreMissingPatches }).(pulumi.StringArrayOutput)
}

// (Updatable) Ignore all patches between the source and target homes during patching.
func (o FsuCycleOutput) IsIgnorePatches() pulumi.BoolOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.BoolOutput { return v.IsIgnorePatches }).(pulumi.BoolOutput)
}

// (Updatable) Ensure that services of administrator-managed Oracle RAC or Oracle RAC One databases are running on the same instances before and after the move operation.
func (o FsuCycleOutput) IsKeepPlacement() pulumi.BoolOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.BoolOutput { return v.IsKeepPlacement }).(pulumi.BoolOutput)
}

// The latest Action type that was completed in the Exadata Fleet Update Cycle. No value would indicate that the Cycle has not completed any Action yet.
func (o FsuCycleOutput) LastCompletedAction() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.LastCompletedAction }).(pulumi.StringOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o FsuCycleOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) Service drain timeout specified in seconds.
func (o FsuCycleOutput) MaxDrainTimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.IntOutput { return v.MaxDrainTimeoutInSeconds }).(pulumi.IntOutput)
}

// In this array all the possible actions will be listed. The first element is the suggested Action.
func (o FsuCycleOutput) NextActionToExecutes() FsuCycleNextActionToExecuteArrayOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleNextActionToExecuteArrayOutput { return v.NextActionToExecutes }).(FsuCycleNextActionToExecuteArrayOutput)
}

// Scheduling related details for the Exadata Fleet Update Action during create operations. The specified time should not conflict with existing Exadata Infrastructure maintenance windows. Null scheduleDetails for Stage and Apply Actions in Exadata Fleet Update Cycle creation would not create Actions. Null scheduleDetails for CreateAction would execute the Exadata Fleet Update Action as soon as possible.
func (o FsuCycleOutput) StageActionSchedule() FsuCycleStageActionScheduleOutput {
	return o.ApplyT(func(v *FsuCycle) FsuCycleStageActionScheduleOutput { return v.StageActionSchedule }).(FsuCycleStageActionScheduleOutput)
}

// The current state of the Exadata Fleet Update Cycle.
func (o FsuCycleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o FsuCycleOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the Exadata Fleet Update Cycle was created, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o FsuCycleOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the Exadata Fleet Update Cycle was finished, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o FsuCycleOutput) TimeFinished() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.TimeFinished }).(pulumi.StringOutput)
}

// The date and time the Exadata Fleet Update Cycle was updated, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o FsuCycleOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) Type of Exadata Fleet Update Cycle.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o FsuCycleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FsuCycle) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FsuCycleArrayOutput struct{ *pulumi.OutputState }

func (FsuCycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FsuCycle)(nil)).Elem()
}

func (o FsuCycleArrayOutput) ToFsuCycleArrayOutput() FsuCycleArrayOutput {
	return o
}

func (o FsuCycleArrayOutput) ToFsuCycleArrayOutputWithContext(ctx context.Context) FsuCycleArrayOutput {
	return o
}

func (o FsuCycleArrayOutput) Index(i pulumi.IntInput) FsuCycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FsuCycle {
		return vs[0].([]*FsuCycle)[vs[1].(int)]
	}).(FsuCycleOutput)
}

type FsuCycleMapOutput struct{ *pulumi.OutputState }

func (FsuCycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FsuCycle)(nil)).Elem()
}

func (o FsuCycleMapOutput) ToFsuCycleMapOutput() FsuCycleMapOutput {
	return o
}

func (o FsuCycleMapOutput) ToFsuCycleMapOutputWithContext(ctx context.Context) FsuCycleMapOutput {
	return o
}

func (o FsuCycleMapOutput) MapIndex(k pulumi.StringInput) FsuCycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FsuCycle {
		return vs[0].(map[string]*FsuCycle)[vs[1].(string)]
	}).(FsuCycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FsuCycleInput)(nil)).Elem(), &FsuCycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsuCycleArrayInput)(nil)).Elem(), FsuCycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FsuCycleMapInput)(nil)).Elem(), FsuCycleMap{})
	pulumi.RegisterOutputType(FsuCycleOutput{})
	pulumi.RegisterOutputType(FsuCycleArrayOutput{})
	pulumi.RegisterOutputType(FsuCycleMapOutput{})
}
