// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package functions

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Function resource in Oracle Cloud Infrastructure Functions service.
//
// Creates a new function.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Functions"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Functions.NewFunction(ctx, "testFunction", &Functions.FunctionArgs{
//				ApplicationId: pulumi.Any(oci_functions_application.Test_application.Id),
//				DisplayName:   pulumi.Any(_var.Function_display_name),
//				MemoryInMbs:   pulumi.Any(_var.Function_memory_in_mbs),
//				Config:        pulumi.Any(_var.Function_config),
//				DefinedTags: pulumi.AnyMap{
//					"Operations.CostCenter": pulumi.Any("42"),
//				},
//				FreeformTags: pulumi.AnyMap{
//					"Department": pulumi.Any("Finance"),
//				},
//				Image:       pulumi.Any(_var.Function_image),
//				ImageDigest: pulumi.Any(_var.Function_image_digest),
//				ProvisionedConcurrencyConfig: &functions.FunctionProvisionedConcurrencyConfigArgs{
//					Strategy: pulumi.Any(_var.Function_provisioned_concurrency_config_strategy),
//					Count:    pulumi.Any(_var.Function_provisioned_concurrency_config_count),
//				},
//				SourceDetails: &functions.FunctionSourceDetailsArgs{
//					PbfListingId: pulumi.Any(oci_functions_pbf_listing.Test_pbf_listing.Id),
//					SourceType:   pulumi.Any(_var.Function_source_details_source_type),
//				},
//				TimeoutInSeconds: pulumi.Any(_var.Function_timeout_in_seconds),
//				TraceConfig: &functions.FunctionTraceConfigArgs{
//					IsEnabled: pulumi.Any(_var.Function_trace_config_is_enabled),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Functions can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Functions/function:Function test_function "id"
//
// ```
type Function struct {
	pulumi.CustomResourceState

	// The OCID of the application this function belongs to.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The OCID of the compartment that contains the function.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
	//
	// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
	Config pulumi.MapOutput `pulumi:"config"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
	Image pulumi.StringOutput `pulumi:"image"`
	// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
	ImageDigest pulumi.StringOutput `pulumi:"imageDigest"`
	// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
	InvokeEndpoint pulumi.StringOutput `pulumi:"invokeEndpoint"`
	// (Updatable) Maximum usable memory for the function (MiB).
	MemoryInMbs pulumi.StringOutput `pulumi:"memoryInMbs"`
	// (Updatable) Define the strategy for provisioned concurrency for the function.
	ProvisionedConcurrencyConfig FunctionProvisionedConcurrencyConfigOutput `pulumi:"provisionedConcurrencyConfig"`
	// The source details for the Function. The function can be created from various sources.
	SourceDetails FunctionSourceDetailsOutput `pulumi:"sourceDetails"`
	// The current state of the function.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) Timeout for executions of the function. Value in seconds.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// (Updatable) Define the tracing configuration for a function.
	TraceConfig FunctionTraceConfigOutput `pulumi:"traceConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MemoryInMbs == nil {
		return nil, errors.New("invalid value for required argument 'MemoryInMbs'")
	}
	var resource Function
	err := ctx.RegisterResource("oci:Functions/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("oci:Functions/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// The OCID of the application this function belongs to.
	ApplicationId *string `pulumi:"applicationId"`
	// The OCID of the compartment that contains the function.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
	//
	// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
	Config map[string]interface{} `pulumi:"config"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
	Image *string `pulumi:"image"`
	// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
	ImageDigest *string `pulumi:"imageDigest"`
	// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
	InvokeEndpoint *string `pulumi:"invokeEndpoint"`
	// (Updatable) Maximum usable memory for the function (MiB).
	MemoryInMbs *string `pulumi:"memoryInMbs"`
	// (Updatable) Define the strategy for provisioned concurrency for the function.
	ProvisionedConcurrencyConfig *FunctionProvisionedConcurrencyConfig `pulumi:"provisionedConcurrencyConfig"`
	// The source details for the Function. The function can be created from various sources.
	SourceDetails *FunctionSourceDetails `pulumi:"sourceDetails"`
	// The current state of the function.
	State *string `pulumi:"state"`
	// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) Timeout for executions of the function. Value in seconds.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// (Updatable) Define the tracing configuration for a function.
	TraceConfig *FunctionTraceConfig `pulumi:"traceConfig"`
}

type FunctionState struct {
	// The OCID of the application this function belongs to.
	ApplicationId pulumi.StringPtrInput
	// The OCID of the compartment that contains the function.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
	//
	// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
	Config pulumi.MapInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
	Image pulumi.StringPtrInput
	// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
	ImageDigest pulumi.StringPtrInput
	// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
	InvokeEndpoint pulumi.StringPtrInput
	// (Updatable) Maximum usable memory for the function (MiB).
	MemoryInMbs pulumi.StringPtrInput
	// (Updatable) Define the strategy for provisioned concurrency for the function.
	ProvisionedConcurrencyConfig FunctionProvisionedConcurrencyConfigPtrInput
	// The source details for the Function. The function can be created from various sources.
	SourceDetails FunctionSourceDetailsPtrInput
	// The current state of the function.
	State pulumi.StringPtrInput
	// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeCreated pulumi.StringPtrInput
	// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) Timeout for executions of the function. Value in seconds.
	TimeoutInSeconds pulumi.IntPtrInput
	// (Updatable) Define the tracing configuration for a function.
	TraceConfig FunctionTraceConfigPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// The OCID of the application this function belongs to.
	ApplicationId string `pulumi:"applicationId"`
	// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
	//
	// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
	Config map[string]interface{} `pulumi:"config"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
	Image *string `pulumi:"image"`
	// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
	ImageDigest *string `pulumi:"imageDigest"`
	// (Updatable) Maximum usable memory for the function (MiB).
	MemoryInMbs string `pulumi:"memoryInMbs"`
	// (Updatable) Define the strategy for provisioned concurrency for the function.
	ProvisionedConcurrencyConfig *FunctionProvisionedConcurrencyConfig `pulumi:"provisionedConcurrencyConfig"`
	// The source details for the Function. The function can be created from various sources.
	SourceDetails *FunctionSourceDetails `pulumi:"sourceDetails"`
	// (Updatable) Timeout for executions of the function. Value in seconds.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// (Updatable) Define the tracing configuration for a function.
	TraceConfig *FunctionTraceConfig `pulumi:"traceConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// The OCID of the application this function belongs to.
	ApplicationId pulumi.StringInput
	// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
	//
	// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
	Config pulumi.MapInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
	Image pulumi.StringPtrInput
	// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
	ImageDigest pulumi.StringPtrInput
	// (Updatable) Maximum usable memory for the function (MiB).
	MemoryInMbs pulumi.StringInput
	// (Updatable) Define the strategy for provisioned concurrency for the function.
	ProvisionedConcurrencyConfig FunctionProvisionedConcurrencyConfigPtrInput
	// The source details for the Function. The function can be created from various sources.
	SourceDetails FunctionSourceDetailsPtrInput
	// (Updatable) Timeout for executions of the function. Value in seconds.
	TimeoutInSeconds pulumi.IntPtrInput
	// (Updatable) Define the tracing configuration for a function.
	TraceConfig FunctionTraceConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

// The OCID of the application this function belongs to.
func (o FunctionOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The OCID of the compartment that contains the function.
func (o FunctionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Function configuration. These values are passed on to the function as environment variables, this overrides application configuration values. Keys must be ASCII strings consisting solely of letters, digits, and the '_' (underscore) character, and must not begin with a digit. Values should be limited to printable unicode characters.  Example: `{"MY_FUNCTION_CONFIG": "ConfVal"}`
//
// The maximum size for all configuration keys and values is limited to 4KB. This is measured as the sum of octets necessary to represent each key and value in UTF-8.
func (o FunctionOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *Function) pulumi.MapOutput { return v.Config }).(pulumi.MapOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o FunctionOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Function) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// The display name of the function. The display name must be unique within the application containing the function. Avoid entering confidential information.
func (o FunctionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o FunctionOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Function) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// (Updatable) The qualified name of the Docker image to use in the function, including the image tag. The image should be in the Oracle Cloud Infrastructure Registry that is in the same region as the function itself. This field must be updated if imageDigest is updated. Example: `phx.ocir.io/ten/functions/function:0.0.1`
func (o FunctionOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// (Updatable) The image digest for the version of the image that will be pulled when invoking this function. If no value is specified, the digest currently associated with the image in the Oracle Cloud Infrastructure Registry will be used. This field must be updated if image is updated. Example: `sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7`
func (o FunctionOutput) ImageDigest() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.ImageDigest }).(pulumi.StringOutput)
}

// The base https invoke URL to set on a client in order to invoke a function. This URL will never change over the lifetime of the function and can be cached.
func (o FunctionOutput) InvokeEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.InvokeEndpoint }).(pulumi.StringOutput)
}

// (Updatable) Maximum usable memory for the function (MiB).
func (o FunctionOutput) MemoryInMbs() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.MemoryInMbs }).(pulumi.StringOutput)
}

// (Updatable) Define the strategy for provisioned concurrency for the function.
func (o FunctionOutput) ProvisionedConcurrencyConfig() FunctionProvisionedConcurrencyConfigOutput {
	return o.ApplyT(func(v *Function) FunctionProvisionedConcurrencyConfigOutput { return v.ProvisionedConcurrencyConfig }).(FunctionProvisionedConcurrencyConfigOutput)
}

// The source details for the Function. The function can be created from various sources.
func (o FunctionOutput) SourceDetails() FunctionSourceDetailsOutput {
	return o.ApplyT(func(v *Function) FunctionSourceDetailsOutput { return v.SourceDetails }).(FunctionSourceDetailsOutput)
}

// The current state of the function.
func (o FunctionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time the function was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
func (o FunctionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the function was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-09-12T22:47:12.613Z`
func (o FunctionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) Timeout for executions of the function. Value in seconds.
func (o FunctionOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

// (Updatable) Define the tracing configuration for a function.
func (o FunctionOutput) TraceConfig() FunctionTraceConfigOutput {
	return o.ApplyT(func(v *Function) FunctionTraceConfigOutput { return v.TraceConfig }).(FunctionTraceConfigOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
