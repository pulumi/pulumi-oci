// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package genericartifactscontent

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the Artifact By Path resource in Oracle Cloud Infrastructure Generic Artifacts Content service. This resource supports upload/download the content of a generic artifact by specifying the repository id, artifact path, and artifact version
//
// ## Note
//
// This resource is not supported to delete generic artifact.
// In order to delete generic artifact, you can use `Artifacts.GenericArtifact`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/GenericArtifactsContent"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := GenericArtifactsContent.NewArtifactByPath(ctx, "testArtifactByPath", &GenericArtifactsContent.ArtifactByPathArgs{
// 			ArtifactPath: pulumi.Any(_var.Artifact_path),
// 			RepositoryId: pulumi.Any(oci_artifacts_repository.Test_repository.Id),
// 			Version:      pulumi.Any(_var.Version),
// 			Source:       pulumi.Any(_var.Source),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ArtifactByPath struct {
	pulumi.CustomResourceState

	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringOutput `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringOutput `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes pulumi.StringOutput `pulumi:"sizeInBytes"`
	// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// The current state of the artifact.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewArtifactByPath registers a new resource with the given unique name, arguments, and options.
func NewArtifactByPath(ctx *pulumi.Context,
	name string, args *ArtifactByPathArgs, opts ...pulumi.ResourceOption) (*ArtifactByPath, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactPath == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactPath'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource ArtifactByPath
	err := ctx.RegisterResource("oci:GenericArtifactsContent/artifactByPath:ArtifactByPath", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactByPath gets an existing ArtifactByPath resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactByPath(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactByPathState, opts ...pulumi.ResourceOption) (*ArtifactByPath, error) {
	var resource ArtifactByPath
	err := ctx.ReadResource("oci:GenericArtifactsContent/artifactByPath:ArtifactByPath", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactByPath resources.
type artifactByPathState struct {
	ArtifactId *string `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath *string `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
	Content *string `pulumi:"content"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName *string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 *string `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes *string `pulumi:"sizeInBytes"`
	// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
	Source *string `pulumi:"source"`
	// The current state of the artifact.
	State *string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version *string `pulumi:"version"`
}

type ArtifactByPathState struct {
	ArtifactId pulumi.StringPtrInput
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringPtrInput
	// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
	Content pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringPtrInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringPtrInput
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringPtrInput
	// The size of the artifact in bytes.
	SizeInBytes pulumi.StringPtrInput
	// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
	Source pulumi.StringPtrInput
	// The current state of the artifact.
	State pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringPtrInput
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringPtrInput
}

func (ArtifactByPathState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactByPathState)(nil)).Elem()
}

type artifactByPathArgs struct {
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath string `pulumi:"artifactPath"`
	// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
	Content *string `pulumi:"content"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId string `pulumi:"repositoryId"`
	// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
	Source *string `pulumi:"source"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a ArtifactByPath resource.
type ArtifactByPathArgs struct {
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringInput
	// Content to be uploaded as the artifact. Cannot be defined if `source` is defined.
	Content pulumi.StringPtrInput
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringInput
	// A path to a file on the local system to be uploaded as the artifact. Cannot be defined if `content` is defined.
	Source pulumi.StringPtrInput
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringInput
}

func (ArtifactByPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactByPathArgs)(nil)).Elem()
}

type ArtifactByPathInput interface {
	pulumi.Input

	ToArtifactByPathOutput() ArtifactByPathOutput
	ToArtifactByPathOutputWithContext(ctx context.Context) ArtifactByPathOutput
}

func (*ArtifactByPath) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactByPath)(nil)).Elem()
}

func (i *ArtifactByPath) ToArtifactByPathOutput() ArtifactByPathOutput {
	return i.ToArtifactByPathOutputWithContext(context.Background())
}

func (i *ArtifactByPath) ToArtifactByPathOutputWithContext(ctx context.Context) ArtifactByPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactByPathOutput)
}

// ArtifactByPathArrayInput is an input type that accepts ArtifactByPathArray and ArtifactByPathArrayOutput values.
// You can construct a concrete instance of `ArtifactByPathArrayInput` via:
//
//          ArtifactByPathArray{ ArtifactByPathArgs{...} }
type ArtifactByPathArrayInput interface {
	pulumi.Input

	ToArtifactByPathArrayOutput() ArtifactByPathArrayOutput
	ToArtifactByPathArrayOutputWithContext(context.Context) ArtifactByPathArrayOutput
}

type ArtifactByPathArray []ArtifactByPathInput

func (ArtifactByPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArtifactByPath)(nil)).Elem()
}

func (i ArtifactByPathArray) ToArtifactByPathArrayOutput() ArtifactByPathArrayOutput {
	return i.ToArtifactByPathArrayOutputWithContext(context.Background())
}

func (i ArtifactByPathArray) ToArtifactByPathArrayOutputWithContext(ctx context.Context) ArtifactByPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactByPathArrayOutput)
}

// ArtifactByPathMapInput is an input type that accepts ArtifactByPathMap and ArtifactByPathMapOutput values.
// You can construct a concrete instance of `ArtifactByPathMapInput` via:
//
//          ArtifactByPathMap{ "key": ArtifactByPathArgs{...} }
type ArtifactByPathMapInput interface {
	pulumi.Input

	ToArtifactByPathMapOutput() ArtifactByPathMapOutput
	ToArtifactByPathMapOutputWithContext(context.Context) ArtifactByPathMapOutput
}

type ArtifactByPathMap map[string]ArtifactByPathInput

func (ArtifactByPathMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArtifactByPath)(nil)).Elem()
}

func (i ArtifactByPathMap) ToArtifactByPathMapOutput() ArtifactByPathMapOutput {
	return i.ToArtifactByPathMapOutputWithContext(context.Background())
}

func (i ArtifactByPathMap) ToArtifactByPathMapOutputWithContext(ctx context.Context) ArtifactByPathMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactByPathMapOutput)
}

type ArtifactByPathOutput struct{ *pulumi.OutputState }

func (ArtifactByPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactByPath)(nil)).Elem()
}

func (o ArtifactByPathOutput) ToArtifactByPathOutput() ArtifactByPathOutput {
	return o
}

func (o ArtifactByPathOutput) ToArtifactByPathOutputWithContext(ctx context.Context) ArtifactByPathOutput {
	return o
}

type ArtifactByPathArrayOutput struct{ *pulumi.OutputState }

func (ArtifactByPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArtifactByPath)(nil)).Elem()
}

func (o ArtifactByPathArrayOutput) ToArtifactByPathArrayOutput() ArtifactByPathArrayOutput {
	return o
}

func (o ArtifactByPathArrayOutput) ToArtifactByPathArrayOutputWithContext(ctx context.Context) ArtifactByPathArrayOutput {
	return o
}

func (o ArtifactByPathArrayOutput) Index(i pulumi.IntInput) ArtifactByPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ArtifactByPath {
		return vs[0].([]*ArtifactByPath)[vs[1].(int)]
	}).(ArtifactByPathOutput)
}

type ArtifactByPathMapOutput struct{ *pulumi.OutputState }

func (ArtifactByPathMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArtifactByPath)(nil)).Elem()
}

func (o ArtifactByPathMapOutput) ToArtifactByPathMapOutput() ArtifactByPathMapOutput {
	return o
}

func (o ArtifactByPathMapOutput) ToArtifactByPathMapOutputWithContext(ctx context.Context) ArtifactByPathMapOutput {
	return o
}

func (o ArtifactByPathMapOutput) MapIndex(k pulumi.StringInput) ArtifactByPathOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ArtifactByPath {
		return vs[0].(map[string]*ArtifactByPath)[vs[1].(string)]
	}).(ArtifactByPathOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactByPathInput)(nil)).Elem(), &ArtifactByPath{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactByPathArrayInput)(nil)).Elem(), ArtifactByPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactByPathMapInput)(nil)).Elem(), ArtifactByPathMap{})
	pulumi.RegisterOutputType(ArtifactByPathOutput{})
	pulumi.RegisterOutputType(ArtifactByPathArrayOutput{})
	pulumi.RegisterOutputType(ArtifactByPathMapOutput{})
}
