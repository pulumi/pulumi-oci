// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package goldengate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Database Registration resource in Oracle Cloud Infrastructure Golden Gate service.
//
// Note: Deprecated. Use the /connections API instead.
// Creates a new DatabaseRegistration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/GoldenGate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := GoldenGate.NewDatabaseRegistration(ctx, "test_database_registration", &GoldenGate.DatabaseRegistrationArgs{
//				AliasName:        pulumi.Any(databaseRegistrationAliasName),
//				CompartmentId:    pulumi.Any(compartmentId),
//				DisplayName:      pulumi.Any(databaseRegistrationDisplayName),
//				Fqdn:             pulumi.Any(databaseRegistrationFqdn),
//				Password:         pulumi.Any(databaseRegistrationPassword),
//				Username:         pulumi.Any(databaseRegistrationUsername),
//				ConnectionString: pulumi.Any(databaseRegistrationConnectionString),
//				DatabaseId:       pulumi.Any(testDatabase.Id),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(databaseRegistrationDescription),
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				IpAddress:           pulumi.Any(databaseRegistrationIpAddress),
//				KeyId:               pulumi.Any(testKey.Id),
//				SecretCompartmentId: pulumi.Any(testCompartment.Id),
//				SessionMode:         pulumi.Any(databaseRegistrationSessionMode),
//				SubnetId:            pulumi.Any(testSubnet.Id),
//				VaultId:             pulumi.Any(testVault.Id),
//				Wallet:              pulumi.Any(databaseRegistrationWallet),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DatabaseRegistrations can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:GoldenGate/databaseRegistration:DatabaseRegistration test_database_registration "id"
// ```
type DatabaseRegistration struct {
	pulumi.CustomResourceState

	// (Updatable) Credential store alias.
	AliasName pulumi.StringOutput `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
	Password pulumi.StringOutput `pulumi:"password"`
	// A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp pulumi.StringOutput `pulumi:"rcePrivateIp"`
	// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	SecretCompartmentId pulumi.StringOutput `pulumi:"secretCompartmentId"`
	// The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
	SessionMode pulumi.StringOutput `pulumi:"sessionMode"`
	// Possible lifecycle states.
	State pulumi.StringOutput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
	Username pulumi.StringOutput `pulumi:"username"`
	// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Wallet pulumi.StringOutput `pulumi:"wallet"`
}

// NewDatabaseRegistration registers a new resource with the given unique name, arguments, and options.
func NewDatabaseRegistration(ctx *pulumi.Context,
	name string, args *DatabaseRegistrationArgs, opts ...pulumi.ResourceOption) (*DatabaseRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AliasName == nil {
		return nil, errors.New("invalid value for required argument 'AliasName'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseRegistration
	err := ctx.RegisterResource("oci:GoldenGate/databaseRegistration:DatabaseRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseRegistration gets an existing DatabaseRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseRegistrationState, opts ...pulumi.ResourceOption) (*DatabaseRegistration, error) {
	var resource DatabaseRegistration
	err := ctx.ReadResource("oci:GoldenGate/databaseRegistration:DatabaseRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseRegistration resources.
type databaseRegistrationState struct {
	// (Updatable) Credential store alias.
	AliasName *string `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
	ConnectionString *string `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId *string `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description *string `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn *string `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress *string `pulumi:"ipAddress"`
	// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	KeyId *string `pulumi:"keyId"`
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
	Password *string `pulumi:"password"`
	// A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp *string `pulumi:"rcePrivateIp"`
	// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	SecretCompartmentId *string `pulumi:"secretCompartmentId"`
	// The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
	SecretId *string `pulumi:"secretId"`
	// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
	SessionMode *string `pulumi:"sessionMode"`
	// Possible lifecycle states.
	State *string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
	SubnetId *string `pulumi:"subnetId"`
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
	Username *string `pulumi:"username"`
	// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
	VaultId *string `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Wallet *string `pulumi:"wallet"`
}

type DatabaseRegistrationState struct {
	// (Updatable) Credential store alias.
	AliasName pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
	ConnectionString pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringPtrInput
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringPtrInput
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringPtrInput
	// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	KeyId pulumi.StringPtrInput
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
	Password pulumi.StringPtrInput
	// A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp pulumi.StringPtrInput
	// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	SecretCompartmentId pulumi.StringPtrInput
	// The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
	SecretId pulumi.StringPtrInput
	// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
	SessionMode pulumi.StringPtrInput
	// Possible lifecycle states.
	State pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
	SubnetId pulumi.StringPtrInput
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags pulumi.MapInput
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringPtrInput
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
	Username pulumi.StringPtrInput
	// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
	VaultId pulumi.StringPtrInput
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Wallet pulumi.StringPtrInput
}

func (DatabaseRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseRegistrationState)(nil)).Elem()
}

type databaseRegistrationArgs struct {
	// (Updatable) Credential store alias.
	AliasName string `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
	ConnectionString *string `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId *string `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description *string `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn string `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress *string `pulumi:"ipAddress"`
	// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	KeyId *string `pulumi:"keyId"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
	Password string `pulumi:"password"`
	// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	SecretCompartmentId *string `pulumi:"secretCompartmentId"`
	// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
	SessionMode *string `pulumi:"sessionMode"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
	Username string `pulumi:"username"`
	// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
	VaultId *string `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Wallet *string `pulumi:"wallet"`
}

// The set of arguments for constructing a DatabaseRegistration resource.
type DatabaseRegistrationArgs struct {
	// (Updatable) Credential store alias.
	AliasName pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringInput
	// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
	ConnectionString pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringPtrInput
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringPtrInput
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringInput
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringPtrInput
	// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	KeyId pulumi.StringPtrInput
	// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
	Password pulumi.StringInput
	// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
	SecretCompartmentId pulumi.StringPtrInput
	// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
	SessionMode pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
	SubnetId pulumi.StringPtrInput
	// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
	Username pulumi.StringInput
	// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
	VaultId pulumi.StringPtrInput
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Wallet pulumi.StringPtrInput
}

func (DatabaseRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseRegistrationArgs)(nil)).Elem()
}

type DatabaseRegistrationInput interface {
	pulumi.Input

	ToDatabaseRegistrationOutput() DatabaseRegistrationOutput
	ToDatabaseRegistrationOutputWithContext(ctx context.Context) DatabaseRegistrationOutput
}

func (*DatabaseRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRegistration)(nil)).Elem()
}

func (i *DatabaseRegistration) ToDatabaseRegistrationOutput() DatabaseRegistrationOutput {
	return i.ToDatabaseRegistrationOutputWithContext(context.Background())
}

func (i *DatabaseRegistration) ToDatabaseRegistrationOutputWithContext(ctx context.Context) DatabaseRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRegistrationOutput)
}

// DatabaseRegistrationArrayInput is an input type that accepts DatabaseRegistrationArray and DatabaseRegistrationArrayOutput values.
// You can construct a concrete instance of `DatabaseRegistrationArrayInput` via:
//
//	DatabaseRegistrationArray{ DatabaseRegistrationArgs{...} }
type DatabaseRegistrationArrayInput interface {
	pulumi.Input

	ToDatabaseRegistrationArrayOutput() DatabaseRegistrationArrayOutput
	ToDatabaseRegistrationArrayOutputWithContext(context.Context) DatabaseRegistrationArrayOutput
}

type DatabaseRegistrationArray []DatabaseRegistrationInput

func (DatabaseRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseRegistration)(nil)).Elem()
}

func (i DatabaseRegistrationArray) ToDatabaseRegistrationArrayOutput() DatabaseRegistrationArrayOutput {
	return i.ToDatabaseRegistrationArrayOutputWithContext(context.Background())
}

func (i DatabaseRegistrationArray) ToDatabaseRegistrationArrayOutputWithContext(ctx context.Context) DatabaseRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRegistrationArrayOutput)
}

// DatabaseRegistrationMapInput is an input type that accepts DatabaseRegistrationMap and DatabaseRegistrationMapOutput values.
// You can construct a concrete instance of `DatabaseRegistrationMapInput` via:
//
//	DatabaseRegistrationMap{ "key": DatabaseRegistrationArgs{...} }
type DatabaseRegistrationMapInput interface {
	pulumi.Input

	ToDatabaseRegistrationMapOutput() DatabaseRegistrationMapOutput
	ToDatabaseRegistrationMapOutputWithContext(context.Context) DatabaseRegistrationMapOutput
}

type DatabaseRegistrationMap map[string]DatabaseRegistrationInput

func (DatabaseRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseRegistration)(nil)).Elem()
}

func (i DatabaseRegistrationMap) ToDatabaseRegistrationMapOutput() DatabaseRegistrationMapOutput {
	return i.ToDatabaseRegistrationMapOutputWithContext(context.Background())
}

func (i DatabaseRegistrationMap) ToDatabaseRegistrationMapOutputWithContext(ctx context.Context) DatabaseRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRegistrationMapOutput)
}

type DatabaseRegistrationOutput struct{ *pulumi.OutputState }

func (DatabaseRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRegistration)(nil)).Elem()
}

func (o DatabaseRegistrationOutput) ToDatabaseRegistrationOutput() DatabaseRegistrationOutput {
	return o
}

func (o DatabaseRegistrationOutput) ToDatabaseRegistrationOutputWithContext(ctx context.Context) DatabaseRegistrationOutput {
	return o
}

// (Updatable) Credential store alias.
func (o DatabaseRegistrationOutput) AliasName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.AliasName }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
func (o DatabaseRegistrationOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Connect descriptor or Easy Connect Naming method used to connect to a database.
func (o DatabaseRegistrationOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
func (o DatabaseRegistrationOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace.bar-key": "value"}`
func (o DatabaseRegistrationOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Metadata about this specific object.
func (o DatabaseRegistrationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) An object's Display Name.
func (o DatabaseRegistrationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
func (o DatabaseRegistrationOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.  Example: `{"bar-key": "value"}`
func (o DatabaseRegistrationOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
func (o DatabaseRegistrationOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Refers to the customer's master key OCID.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
func (o DatabaseRegistrationOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
func (o DatabaseRegistrationOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) The password Oracle GoldenGate uses to connect the associated system of the given technology. It must conform to the specific security requirements including length, case sensitivity, and so on.
func (o DatabaseRegistrationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// A Private Endpoint IP address created in the customer's subnet.  A customer database can expect network traffic initiated by GoldenGate Service from this IP address.  It can also send network traffic to this IP address, typically in response to requests from GoldenGate Service.  The customer may use this IP address in Security Lists or Network Security Groups (NSG) as needed.
func (o DatabaseRegistrationOutput) RcePrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.RcePrivateIp }).(pulumi.StringOutput)
}

// The OCID of the compartment where the GoldenGate Secret will be created.  If provided, it references a key to manage secrets. Customers must add policies to permit GoldenGate to use this key.
func (o DatabaseRegistrationOutput) SecretCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.SecretCompartmentId }).(pulumi.StringOutput)
}

// The OCID of the customer's GoldenGate Service Secret.  If provided, it references a key that customers will be required to ensure the policies are established  to permit GoldenGate to use this Secret.
func (o DatabaseRegistrationOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// (Updatable) The mode of the database connection session to be established by the data client. 'REDIRECT' - for a RAC database, 'DIRECT' - for a non-RAC database. Connection to a RAC database involves a redirection received from the SCAN listeners to the database node to connect to. By default the mode would be DIRECT.
func (o DatabaseRegistrationOutput) SessionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.SessionMode }).(pulumi.StringOutput)
}

// Possible lifecycle states.
func (o DatabaseRegistrationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target subnet of the dedicated connection.
func (o DatabaseRegistrationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{orcl-cloud: {free-tier-retain: true}}`
func (o DatabaseRegistrationOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
func (o DatabaseRegistrationOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
func (o DatabaseRegistrationOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) The username Oracle GoldenGate uses to connect the associated system of the given technology. This username must already exist and be available by the system/application to be connected to and must conform to the case sensitivty requirments defined in it.
func (o DatabaseRegistrationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Refers to the customer's vault OCID.  If provided, it references a vault where GoldenGate can manage secrets. Customers must add policies to permit GoldenGate to manage secrets contained within this vault.
func (o DatabaseRegistrationOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o DatabaseRegistrationOutput) Wallet() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRegistration) pulumi.StringOutput { return v.Wallet }).(pulumi.StringOutput)
}

type DatabaseRegistrationArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseRegistration)(nil)).Elem()
}

func (o DatabaseRegistrationArrayOutput) ToDatabaseRegistrationArrayOutput() DatabaseRegistrationArrayOutput {
	return o
}

func (o DatabaseRegistrationArrayOutput) ToDatabaseRegistrationArrayOutputWithContext(ctx context.Context) DatabaseRegistrationArrayOutput {
	return o
}

func (o DatabaseRegistrationArrayOutput) Index(i pulumi.IntInput) DatabaseRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseRegistration {
		return vs[0].([]*DatabaseRegistration)[vs[1].(int)]
	}).(DatabaseRegistrationOutput)
}

type DatabaseRegistrationMapOutput struct{ *pulumi.OutputState }

func (DatabaseRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseRegistration)(nil)).Elem()
}

func (o DatabaseRegistrationMapOutput) ToDatabaseRegistrationMapOutput() DatabaseRegistrationMapOutput {
	return o
}

func (o DatabaseRegistrationMapOutput) ToDatabaseRegistrationMapOutputWithContext(ctx context.Context) DatabaseRegistrationMapOutput {
	return o
}

func (o DatabaseRegistrationMapOutput) MapIndex(k pulumi.StringInput) DatabaseRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseRegistration {
		return vs[0].(map[string]*DatabaseRegistration)[vs[1].(string)]
	}).(DatabaseRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRegistrationInput)(nil)).Elem(), &DatabaseRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRegistrationArrayInput)(nil)).Elem(), DatabaseRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRegistrationMapInput)(nil)).Elem(), DatabaseRegistrationMap{})
	pulumi.RegisterOutputType(DatabaseRegistrationOutput{})
	pulumi.RegisterOutputType(DatabaseRegistrationArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRegistrationMapOutput{})
}
