// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package goldengate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Deployment Certificate resource in Oracle Cloud Infrastructure Golden Gate service.
//
// Creates a new certificate to truststore.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/goldengate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := goldengate.NewDeploymentCertificate(ctx, "test_deployment_certificate", &goldengate.DeploymentCertificateArgs{
//				CertificateContent: pulumi.Any(deploymentCertificateCertificateContent),
//				DeploymentId:       pulumi.Any(testDeployment.Id),
//				Key:                pulumi.Any(deploymentCertificateKey),
//				IsLockOverride:     pulumi.Any(deploymentCertificateIsLockOverride),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DeploymentCertificates can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:GoldenGate/deploymentCertificate:DeploymentCertificate test_deployment_certificate "deployments/{deploymentId}/certificates/{certificateKey}"
// ```
type DeploymentCertificate struct {
	pulumi.CustomResourceState

	// The Certificate authority key id.
	AuthorityKeyId pulumi.StringOutput `pulumi:"authorityKeyId"`
	// The base64 encoded content of the PEM file containing the SSL certificate.
	CertificateContent pulumi.StringOutput `pulumi:"certificateContent"`
	// A unique Deployment identifier.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// Indicates if the certificate is ca.
	IsCa pulumi.BoolOutput `pulumi:"isCa"`
	// Whether to override locks (if any exist).
	IsLockOverride pulumi.BoolOutput `pulumi:"isLockOverride"`
	// Indicates if the certificate is self signed.
	IsSelfSigned pulumi.BoolOutput `pulumi:"isSelfSigned"`
	// The Certificate issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Key pulumi.StringOutput `pulumi:"key"`
	// The Certificate md5Hash.
	Md5hash pulumi.StringOutput `pulumi:"md5hash"`
	// The Certificate public key.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The Certificate public key algorithm.
	PublicKeyAlgorithm pulumi.StringOutput `pulumi:"publicKeyAlgorithm"`
	// The Certificate public key size.
	PublicKeySize pulumi.StringOutput `pulumi:"publicKeySize"`
	// The Certificate serial.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// The Certificate sha1 hash.
	Sha1hash pulumi.StringOutput `pulumi:"sha1hash"`
	// Possible certificate lifecycle states.
	State pulumi.StringOutput `pulumi:"state"`
	// The Certificate subject.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The Certificate subject key id.
	SubjectKeyId pulumi.StringOutput `pulumi:"subjectKeyId"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidFrom pulumi.StringOutput `pulumi:"timeValidFrom"`
	// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidTo pulumi.StringOutput `pulumi:"timeValidTo"`
	// The Certificate version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDeploymentCertificate registers a new resource with the given unique name, arguments, and options.
func NewDeploymentCertificate(ctx *pulumi.Context,
	name string, args *DeploymentCertificateArgs, opts ...pulumi.ResourceOption) (*DeploymentCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateContent == nil {
		return nil, errors.New("invalid value for required argument 'CertificateContent'")
	}
	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeploymentCertificate
	err := ctx.RegisterResource("oci:GoldenGate/deploymentCertificate:DeploymentCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentCertificate gets an existing DeploymentCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentCertificateState, opts ...pulumi.ResourceOption) (*DeploymentCertificate, error) {
	var resource DeploymentCertificate
	err := ctx.ReadResource("oci:GoldenGate/deploymentCertificate:DeploymentCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentCertificate resources.
type deploymentCertificateState struct {
	// The Certificate authority key id.
	AuthorityKeyId *string `pulumi:"authorityKeyId"`
	// The base64 encoded content of the PEM file containing the SSL certificate.
	CertificateContent *string `pulumi:"certificateContent"`
	// A unique Deployment identifier.
	DeploymentId *string `pulumi:"deploymentId"`
	// Indicates if the certificate is ca.
	IsCa *bool `pulumi:"isCa"`
	// Whether to override locks (if any exist).
	IsLockOverride *bool `pulumi:"isLockOverride"`
	// Indicates if the certificate is self signed.
	IsSelfSigned *bool `pulumi:"isSelfSigned"`
	// The Certificate issuer.
	Issuer *string `pulumi:"issuer"`
	// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Key *string `pulumi:"key"`
	// The Certificate md5Hash.
	Md5hash *string `pulumi:"md5hash"`
	// The Certificate public key.
	PublicKey *string `pulumi:"publicKey"`
	// The Certificate public key algorithm.
	PublicKeyAlgorithm *string `pulumi:"publicKeyAlgorithm"`
	// The Certificate public key size.
	PublicKeySize *string `pulumi:"publicKeySize"`
	// The Certificate serial.
	Serial *string `pulumi:"serial"`
	// The Certificate sha1 hash.
	Sha1hash *string `pulumi:"sha1hash"`
	// Possible certificate lifecycle states.
	State *string `pulumi:"state"`
	// The Certificate subject.
	Subject *string `pulumi:"subject"`
	// The Certificate subject key id.
	SubjectKeyId *string `pulumi:"subjectKeyId"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidFrom *string `pulumi:"timeValidFrom"`
	// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidTo *string `pulumi:"timeValidTo"`
	// The Certificate version.
	Version *string `pulumi:"version"`
}

type DeploymentCertificateState struct {
	// The Certificate authority key id.
	AuthorityKeyId pulumi.StringPtrInput
	// The base64 encoded content of the PEM file containing the SSL certificate.
	CertificateContent pulumi.StringPtrInput
	// A unique Deployment identifier.
	DeploymentId pulumi.StringPtrInput
	// Indicates if the certificate is ca.
	IsCa pulumi.BoolPtrInput
	// Whether to override locks (if any exist).
	IsLockOverride pulumi.BoolPtrInput
	// Indicates if the certificate is self signed.
	IsSelfSigned pulumi.BoolPtrInput
	// The Certificate issuer.
	Issuer pulumi.StringPtrInput
	// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Key pulumi.StringPtrInput
	// The Certificate md5Hash.
	Md5hash pulumi.StringPtrInput
	// The Certificate public key.
	PublicKey pulumi.StringPtrInput
	// The Certificate public key algorithm.
	PublicKeyAlgorithm pulumi.StringPtrInput
	// The Certificate public key size.
	PublicKeySize pulumi.StringPtrInput
	// The Certificate serial.
	Serial pulumi.StringPtrInput
	// The Certificate sha1 hash.
	Sha1hash pulumi.StringPtrInput
	// Possible certificate lifecycle states.
	State pulumi.StringPtrInput
	// The Certificate subject.
	Subject pulumi.StringPtrInput
	// The Certificate subject key id.
	SubjectKeyId pulumi.StringPtrInput
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringPtrInput
	// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidFrom pulumi.StringPtrInput
	// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeValidTo pulumi.StringPtrInput
	// The Certificate version.
	Version pulumi.StringPtrInput
}

func (DeploymentCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentCertificateState)(nil)).Elem()
}

type deploymentCertificateArgs struct {
	// The base64 encoded content of the PEM file containing the SSL certificate.
	CertificateContent string `pulumi:"certificateContent"`
	// A unique Deployment identifier.
	DeploymentId string `pulumi:"deploymentId"`
	// Whether to override locks (if any exist).
	IsLockOverride *bool `pulumi:"isLockOverride"`
	// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a DeploymentCertificate resource.
type DeploymentCertificateArgs struct {
	// The base64 encoded content of the PEM file containing the SSL certificate.
	CertificateContent pulumi.StringInput
	// A unique Deployment identifier.
	DeploymentId pulumi.StringInput
	// Whether to override locks (if any exist).
	IsLockOverride pulumi.BoolPtrInput
	// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Key pulumi.StringInput
}

func (DeploymentCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentCertificateArgs)(nil)).Elem()
}

type DeploymentCertificateInput interface {
	pulumi.Input

	ToDeploymentCertificateOutput() DeploymentCertificateOutput
	ToDeploymentCertificateOutputWithContext(ctx context.Context) DeploymentCertificateOutput
}

func (*DeploymentCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentCertificate)(nil)).Elem()
}

func (i *DeploymentCertificate) ToDeploymentCertificateOutput() DeploymentCertificateOutput {
	return i.ToDeploymentCertificateOutputWithContext(context.Background())
}

func (i *DeploymentCertificate) ToDeploymentCertificateOutputWithContext(ctx context.Context) DeploymentCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentCertificateOutput)
}

// DeploymentCertificateArrayInput is an input type that accepts DeploymentCertificateArray and DeploymentCertificateArrayOutput values.
// You can construct a concrete instance of `DeploymentCertificateArrayInput` via:
//
//	DeploymentCertificateArray{ DeploymentCertificateArgs{...} }
type DeploymentCertificateArrayInput interface {
	pulumi.Input

	ToDeploymentCertificateArrayOutput() DeploymentCertificateArrayOutput
	ToDeploymentCertificateArrayOutputWithContext(context.Context) DeploymentCertificateArrayOutput
}

type DeploymentCertificateArray []DeploymentCertificateInput

func (DeploymentCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentCertificate)(nil)).Elem()
}

func (i DeploymentCertificateArray) ToDeploymentCertificateArrayOutput() DeploymentCertificateArrayOutput {
	return i.ToDeploymentCertificateArrayOutputWithContext(context.Background())
}

func (i DeploymentCertificateArray) ToDeploymentCertificateArrayOutputWithContext(ctx context.Context) DeploymentCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentCertificateArrayOutput)
}

// DeploymentCertificateMapInput is an input type that accepts DeploymentCertificateMap and DeploymentCertificateMapOutput values.
// You can construct a concrete instance of `DeploymentCertificateMapInput` via:
//
//	DeploymentCertificateMap{ "key": DeploymentCertificateArgs{...} }
type DeploymentCertificateMapInput interface {
	pulumi.Input

	ToDeploymentCertificateMapOutput() DeploymentCertificateMapOutput
	ToDeploymentCertificateMapOutputWithContext(context.Context) DeploymentCertificateMapOutput
}

type DeploymentCertificateMap map[string]DeploymentCertificateInput

func (DeploymentCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentCertificate)(nil)).Elem()
}

func (i DeploymentCertificateMap) ToDeploymentCertificateMapOutput() DeploymentCertificateMapOutput {
	return i.ToDeploymentCertificateMapOutputWithContext(context.Background())
}

func (i DeploymentCertificateMap) ToDeploymentCertificateMapOutputWithContext(ctx context.Context) DeploymentCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentCertificateMapOutput)
}

type DeploymentCertificateOutput struct{ *pulumi.OutputState }

func (DeploymentCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentCertificate)(nil)).Elem()
}

func (o DeploymentCertificateOutput) ToDeploymentCertificateOutput() DeploymentCertificateOutput {
	return o
}

func (o DeploymentCertificateOutput) ToDeploymentCertificateOutputWithContext(ctx context.Context) DeploymentCertificateOutput {
	return o
}

// The Certificate authority key id.
func (o DeploymentCertificateOutput) AuthorityKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.AuthorityKeyId }).(pulumi.StringOutput)
}

// The base64 encoded content of the PEM file containing the SSL certificate.
func (o DeploymentCertificateOutput) CertificateContent() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.CertificateContent }).(pulumi.StringOutput)
}

// A unique Deployment identifier.
func (o DeploymentCertificateOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// Indicates if the certificate is ca.
func (o DeploymentCertificateOutput) IsCa() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.BoolOutput { return v.IsCa }).(pulumi.BoolOutput)
}

// Whether to override locks (if any exist).
func (o DeploymentCertificateOutput) IsLockOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.BoolOutput { return v.IsLockOverride }).(pulumi.BoolOutput)
}

// Indicates if the certificate is self signed.
func (o DeploymentCertificateOutput) IsSelfSigned() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.BoolOutput { return v.IsSelfSigned }).(pulumi.BoolOutput)
}

// The Certificate issuer.
func (o DeploymentCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// The identifier key (unique name in the scope of the deployment) of the certificate being referenced.  It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o DeploymentCertificateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The Certificate md5Hash.
func (o DeploymentCertificateOutput) Md5hash() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Md5hash }).(pulumi.StringOutput)
}

// The Certificate public key.
func (o DeploymentCertificateOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The Certificate public key algorithm.
func (o DeploymentCertificateOutput) PublicKeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.PublicKeyAlgorithm }).(pulumi.StringOutput)
}

// The Certificate public key size.
func (o DeploymentCertificateOutput) PublicKeySize() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.PublicKeySize }).(pulumi.StringOutput)
}

// The Certificate serial.
func (o DeploymentCertificateOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// The Certificate sha1 hash.
func (o DeploymentCertificateOutput) Sha1hash() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Sha1hash }).(pulumi.StringOutput)
}

// Possible certificate lifecycle states.
func (o DeploymentCertificateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The Certificate subject.
func (o DeploymentCertificateOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// The Certificate subject key id.
func (o DeploymentCertificateOutput) SubjectKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.SubjectKeyId }).(pulumi.StringOutput)
}

// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
func (o DeploymentCertificateOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the certificate is valid from. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
func (o DeploymentCertificateOutput) TimeValidFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.TimeValidFrom }).(pulumi.StringOutput)
}

// The time the certificate is valid to. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
func (o DeploymentCertificateOutput) TimeValidTo() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.TimeValidTo }).(pulumi.StringOutput)
}

// The Certificate version.
func (o DeploymentCertificateOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentCertificate) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DeploymentCertificateArrayOutput struct{ *pulumi.OutputState }

func (DeploymentCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentCertificate)(nil)).Elem()
}

func (o DeploymentCertificateArrayOutput) ToDeploymentCertificateArrayOutput() DeploymentCertificateArrayOutput {
	return o
}

func (o DeploymentCertificateArrayOutput) ToDeploymentCertificateArrayOutputWithContext(ctx context.Context) DeploymentCertificateArrayOutput {
	return o
}

func (o DeploymentCertificateArrayOutput) Index(i pulumi.IntInput) DeploymentCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeploymentCertificate {
		return vs[0].([]*DeploymentCertificate)[vs[1].(int)]
	}).(DeploymentCertificateOutput)
}

type DeploymentCertificateMapOutput struct{ *pulumi.OutputState }

func (DeploymentCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentCertificate)(nil)).Elem()
}

func (o DeploymentCertificateMapOutput) ToDeploymentCertificateMapOutput() DeploymentCertificateMapOutput {
	return o
}

func (o DeploymentCertificateMapOutput) ToDeploymentCertificateMapOutputWithContext(ctx context.Context) DeploymentCertificateMapOutput {
	return o
}

func (o DeploymentCertificateMapOutput) MapIndex(k pulumi.StringInput) DeploymentCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeploymentCertificate {
		return vs[0].(map[string]*DeploymentCertificate)[vs[1].(string)]
	}).(DeploymentCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentCertificateInput)(nil)).Elem(), &DeploymentCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentCertificateArrayInput)(nil)).Elem(), DeploymentCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentCertificateMapInput)(nil)).Elem(), DeploymentCertificateMap{})
	pulumi.RegisterOutputType(DeploymentCertificateOutput{})
	pulumi.RegisterOutputType(DeploymentCertificateArrayOutput{})
	pulumi.RegisterOutputType(DeploymentCertificateMapOutput{})
}
