// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package goldengate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Deployment Certificates in Oracle Cloud Infrastructure Golden Gate service.
//
// Returns a list of certificates from truststore.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/GoldenGate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := GoldenGate.GetDeploymentCertificates(ctx, &goldengate.GetDeploymentCertificatesArgs{
//				DeploymentId: oci_golden_gate_deployment.Test_deployment.Id,
//				State:        pulumi.StringRef(_var.Deployment_certificate_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetDeploymentCertificates(ctx *pulumi.Context, args *GetDeploymentCertificatesArgs, opts ...pulumi.InvokeOption) (*GetDeploymentCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeploymentCertificatesResult
	err := ctx.Invoke("oci:GoldenGate/getDeploymentCertificates:getDeploymentCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeploymentCertificates.
type GetDeploymentCertificatesArgs struct {
	// A unique Deployment identifier.
	DeploymentId string                            `pulumi:"deploymentId"`
	Filters      []GetDeploymentCertificatesFilter `pulumi:"filters"`
	// A filter to return only connections having the 'lifecycleState' given.
	State *string `pulumi:"state"`
}

// A collection of values returned by getDeploymentCertificates.
type GetDeploymentCertificatesResult struct {
	// The list of certificate_collection.
	CertificateCollections []GetDeploymentCertificatesCertificateCollection `pulumi:"certificateCollections"`
	DeploymentId           string                                           `pulumi:"deploymentId"`
	Filters                []GetDeploymentCertificatesFilter                `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Possible certificate lifecycle states.
	State *string `pulumi:"state"`
}

func GetDeploymentCertificatesOutput(ctx *pulumi.Context, args GetDeploymentCertificatesOutputArgs, opts ...pulumi.InvokeOption) GetDeploymentCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeploymentCertificatesResult, error) {
			args := v.(GetDeploymentCertificatesArgs)
			r, err := GetDeploymentCertificates(ctx, &args, opts...)
			var s GetDeploymentCertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDeploymentCertificatesResultOutput)
}

// A collection of arguments for invoking getDeploymentCertificates.
type GetDeploymentCertificatesOutputArgs struct {
	// A unique Deployment identifier.
	DeploymentId pulumi.StringInput                        `pulumi:"deploymentId"`
	Filters      GetDeploymentCertificatesFilterArrayInput `pulumi:"filters"`
	// A filter to return only connections having the 'lifecycleState' given.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetDeploymentCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getDeploymentCertificates.
type GetDeploymentCertificatesResultOutput struct{ *pulumi.OutputState }

func (GetDeploymentCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentCertificatesResult)(nil)).Elem()
}

func (o GetDeploymentCertificatesResultOutput) ToGetDeploymentCertificatesResultOutput() GetDeploymentCertificatesResultOutput {
	return o
}

func (o GetDeploymentCertificatesResultOutput) ToGetDeploymentCertificatesResultOutputWithContext(ctx context.Context) GetDeploymentCertificatesResultOutput {
	return o
}

// The list of certificate_collection.
func (o GetDeploymentCertificatesResultOutput) CertificateCollections() GetDeploymentCertificatesCertificateCollectionArrayOutput {
	return o.ApplyT(func(v GetDeploymentCertificatesResult) []GetDeploymentCertificatesCertificateCollection {
		return v.CertificateCollections
	}).(GetDeploymentCertificatesCertificateCollectionArrayOutput)
}

func (o GetDeploymentCertificatesResultOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentCertificatesResult) string { return v.DeploymentId }).(pulumi.StringOutput)
}

func (o GetDeploymentCertificatesResultOutput) Filters() GetDeploymentCertificatesFilterArrayOutput {
	return o.ApplyT(func(v GetDeploymentCertificatesResult) []GetDeploymentCertificatesFilter { return v.Filters }).(GetDeploymentCertificatesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDeploymentCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Possible certificate lifecycle states.
func (o GetDeploymentCertificatesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeploymentCertificatesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeploymentCertificatesResultOutput{})
}
