// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package goldengate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Pipeline Schema Tables in Oracle Cloud Infrastructure Golden Gate service.
//
// Returns an array of tables under the given schemas of the pipeline for given source and target schemas passed as query params.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/goldengate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := goldengate.GetPipelineSchemaTables(ctx, &goldengate.GetPipelineSchemaTablesArgs{
//				PipelineId:       testPipeline.Id,
//				SourceSchemaName: pipelineSchemaTableSourceSchemaName,
//				TargetSchemaName: pipelineSchemaTableTargetSchemaName,
//				DisplayName:      pulumi.StringRef(pipelineSchemaTableDisplayName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPipelineSchemaTables(ctx *pulumi.Context, args *GetPipelineSchemaTablesArgs, opts ...pulumi.InvokeOption) (*GetPipelineSchemaTablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPipelineSchemaTablesResult
	err := ctx.Invoke("oci:GoldenGate/getPipelineSchemaTables:getPipelineSchemaTables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPipelineSchemaTables.
type GetPipelineSchemaTablesArgs struct {
	// A filter to return only the resources that match the entire 'displayName' given.
	DisplayName *string                         `pulumi:"displayName"`
	Filters     []GetPipelineSchemaTablesFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
	PipelineId string `pulumi:"pipelineId"`
	// Name of the source schema obtained from get schema endpoint of the created pipeline.
	SourceSchemaName string `pulumi:"sourceSchemaName"`
	// Name of the target schema obtained from get schema endpoint of the created pipeline.
	TargetSchemaName string `pulumi:"targetSchemaName"`
}

// A collection of values returned by getPipelineSchemaTables.
type GetPipelineSchemaTablesResult struct {
	DisplayName *string                         `pulumi:"displayName"`
	Filters     []GetPipelineSchemaTablesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	PipelineId string `pulumi:"pipelineId"`
	// The list of pipeline_schema_table_collection.
	PipelineSchemaTableCollections []GetPipelineSchemaTablesPipelineSchemaTableCollection `pulumi:"pipelineSchemaTableCollections"`
	// The schema name from the database connection.
	SourceSchemaName string `pulumi:"sourceSchemaName"`
	// The schema name from the database connection.
	TargetSchemaName string `pulumi:"targetSchemaName"`
}

func GetPipelineSchemaTablesOutput(ctx *pulumi.Context, args GetPipelineSchemaTablesOutputArgs, opts ...pulumi.InvokeOption) GetPipelineSchemaTablesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPipelineSchemaTablesResultOutput, error) {
			args := v.(GetPipelineSchemaTablesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:GoldenGate/getPipelineSchemaTables:getPipelineSchemaTables", args, GetPipelineSchemaTablesResultOutput{}, options).(GetPipelineSchemaTablesResultOutput), nil
		}).(GetPipelineSchemaTablesResultOutput)
}

// A collection of arguments for invoking getPipelineSchemaTables.
type GetPipelineSchemaTablesOutputArgs struct {
	// A filter to return only the resources that match the entire 'displayName' given.
	DisplayName pulumi.StringPtrInput                   `pulumi:"displayName"`
	Filters     GetPipelineSchemaTablesFilterArrayInput `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline created.
	PipelineId pulumi.StringInput `pulumi:"pipelineId"`
	// Name of the source schema obtained from get schema endpoint of the created pipeline.
	SourceSchemaName pulumi.StringInput `pulumi:"sourceSchemaName"`
	// Name of the target schema obtained from get schema endpoint of the created pipeline.
	TargetSchemaName pulumi.StringInput `pulumi:"targetSchemaName"`
}

func (GetPipelineSchemaTablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchemaTablesArgs)(nil)).Elem()
}

// A collection of values returned by getPipelineSchemaTables.
type GetPipelineSchemaTablesResultOutput struct{ *pulumi.OutputState }

func (GetPipelineSchemaTablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPipelineSchemaTablesResult)(nil)).Elem()
}

func (o GetPipelineSchemaTablesResultOutput) ToGetPipelineSchemaTablesResultOutput() GetPipelineSchemaTablesResultOutput {
	return o
}

func (o GetPipelineSchemaTablesResultOutput) ToGetPipelineSchemaTablesResultOutputWithContext(ctx context.Context) GetPipelineSchemaTablesResultOutput {
	return o
}

func (o GetPipelineSchemaTablesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetPipelineSchemaTablesResultOutput) Filters() GetPipelineSchemaTablesFilterArrayOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) []GetPipelineSchemaTablesFilter { return v.Filters }).(GetPipelineSchemaTablesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPipelineSchemaTablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPipelineSchemaTablesResultOutput) PipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) string { return v.PipelineId }).(pulumi.StringOutput)
}

// The list of pipeline_schema_table_collection.
func (o GetPipelineSchemaTablesResultOutput) PipelineSchemaTableCollections() GetPipelineSchemaTablesPipelineSchemaTableCollectionArrayOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) []GetPipelineSchemaTablesPipelineSchemaTableCollection {
		return v.PipelineSchemaTableCollections
	}).(GetPipelineSchemaTablesPipelineSchemaTableCollectionArrayOutput)
}

// The schema name from the database connection.
func (o GetPipelineSchemaTablesResultOutput) SourceSchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) string { return v.SourceSchemaName }).(pulumi.StringOutput)
}

// The schema name from the database connection.
func (o GetPipelineSchemaTablesResultOutput) TargetSchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPipelineSchemaTablesResult) string { return v.TargetSchemaName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPipelineSchemaTablesResultOutput{})
}
