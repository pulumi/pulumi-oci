// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthchecks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Http Monitors in Oracle Cloud Infrastructure Health Checks service.
//
// Gets a list of HTTP monitors.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/HealthChecks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := HealthChecks.GetHttpMonitors(ctx, &healthchecks.GetHttpMonitorsArgs{
//				CompartmentId: _var.Compartment_id,
//				DisplayName:   pulumi.StringRef(_var.Http_monitor_display_name),
//				HomeRegion:    pulumi.StringRef(_var.Http_monitor_home_region),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetHttpMonitors(ctx *pulumi.Context, args *GetHttpMonitorsArgs, opts ...pulumi.InvokeOption) (*GetHttpMonitorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHttpMonitorsResult
	err := ctx.Invoke("oci:HealthChecks/getHttpMonitors:getHttpMonitors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHttpMonitors.
type GetHttpMonitorsArgs struct {
	// Filters results by compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// Filters results that exactly match the `displayName` field.
	DisplayName *string                 `pulumi:"displayName"`
	Filters     []GetHttpMonitorsFilter `pulumi:"filters"`
	// Filters results that match the `homeRegion`.
	HomeRegion *string `pulumi:"homeRegion"`
}

// A collection of values returned by getHttpMonitors.
type GetHttpMonitorsResult struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A user-friendly and mutable name suitable for display in a user interface.
	DisplayName *string                 `pulumi:"displayName"`
	Filters     []GetHttpMonitorsFilter `pulumi:"filters"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion *string `pulumi:"homeRegion"`
	// The list of http_monitors.
	HttpMonitors []GetHttpMonitorsHttpMonitor `pulumi:"httpMonitors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetHttpMonitorsOutput(ctx *pulumi.Context, args GetHttpMonitorsOutputArgs, opts ...pulumi.InvokeOption) GetHttpMonitorsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHttpMonitorsResult, error) {
			args := v.(GetHttpMonitorsArgs)
			r, err := GetHttpMonitors(ctx, &args, opts...)
			var s GetHttpMonitorsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHttpMonitorsResultOutput)
}

// A collection of arguments for invoking getHttpMonitors.
type GetHttpMonitorsOutputArgs struct {
	// Filters results by compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Filters results that exactly match the `displayName` field.
	DisplayName pulumi.StringPtrInput           `pulumi:"displayName"`
	Filters     GetHttpMonitorsFilterArrayInput `pulumi:"filters"`
	// Filters results that match the `homeRegion`.
	HomeRegion pulumi.StringPtrInput `pulumi:"homeRegion"`
}

func (GetHttpMonitorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHttpMonitorsArgs)(nil)).Elem()
}

// A collection of values returned by getHttpMonitors.
type GetHttpMonitorsResultOutput struct{ *pulumi.OutputState }

func (GetHttpMonitorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHttpMonitorsResult)(nil)).Elem()
}

func (o GetHttpMonitorsResultOutput) ToGetHttpMonitorsResultOutput() GetHttpMonitorsResultOutput {
	return o
}

func (o GetHttpMonitorsResultOutput) ToGetHttpMonitorsResultOutputWithContext(ctx context.Context) GetHttpMonitorsResultOutput {
	return o
}

// The OCID of the compartment.
func (o GetHttpMonitorsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// A user-friendly and mutable name suitable for display in a user interface.
func (o GetHttpMonitorsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetHttpMonitorsResultOutput) Filters() GetHttpMonitorsFilterArrayOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) []GetHttpMonitorsFilter { return v.Filters }).(GetHttpMonitorsFilterArrayOutput)
}

// The region where updates must be made and where results must be fetched from.
func (o GetHttpMonitorsResultOutput) HomeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) *string { return v.HomeRegion }).(pulumi.StringPtrOutput)
}

// The list of http_monitors.
func (o GetHttpMonitorsResultOutput) HttpMonitors() GetHttpMonitorsHttpMonitorArrayOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) []GetHttpMonitorsHttpMonitor { return v.HttpMonitors }).(GetHttpMonitorsHttpMonitorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHttpMonitorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHttpMonitorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHttpMonitorsResultOutput{})
}
