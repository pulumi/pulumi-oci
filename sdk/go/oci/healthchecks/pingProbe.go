// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthchecks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ping Probe resource in Oracle Cloud Infrastructure Health Checks service.
//
// Creates an on-demand ping probe. The location response header contains the URL for
// fetching probe results.
//
// *Note:* The on-demand probe configuration is not saved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/healthchecks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := healthchecks.NewPingProbe(ctx, "test_ping_probe", &healthchecks.PingProbeArgs{
//				CompartmentId:     pulumi.Any(compartmentId),
//				Protocol:          pulumi.Any(pingProbeProtocol),
//				Targets:           pulumi.Any(pingProbeTargets),
//				Port:              pulumi.Any(pingProbePort),
//				TimeoutInSeconds:  pulumi.Any(pingProbeTimeoutInSeconds),
//				VantagePointNames: pulumi.Any(pingProbeVantagePointNames),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PingProbes can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:HealthChecks/pingProbe:PingProbe test_ping_probe "id"
// ```
type PingProbe struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocols for ping probes.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringOutput `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VantagePointNames pulumi.StringArrayOutput `pulumi:"vantagePointNames"`
}

// NewPingProbe registers a new resource with the given unique name, arguments, and options.
func NewPingProbe(ctx *pulumi.Context,
	name string, args *PingProbeArgs, opts ...pulumi.ResourceOption) (*PingProbe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PingProbe
	err := ctx.RegisterResource("oci:HealthChecks/pingProbe:PingProbe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPingProbe gets an existing PingProbe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPingProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PingProbeState, opts ...pulumi.ResourceOption) (*PingProbe, error) {
	var resource PingProbe
	err := ctx.ReadResource("oci:HealthChecks/pingProbe:PingProbe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PingProbe resources.
type pingProbeState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion *string `pulumi:"homeRegion"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The protocols for ping probes.
	Protocol *string `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl *string `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated *string `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

type PingProbeState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringPtrInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The protocols for ping probes.
	Protocol pulumi.StringPtrInput
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringPtrInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringPtrInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VantagePointNames pulumi.StringArrayInput
}

func (PingProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*pingProbeState)(nil)).Elem()
}

type pingProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The protocols for ping probes.
	Protocol string `pulumi:"protocol"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

// The set of arguments for constructing a PingProbe resource.
type PingProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The protocols for ping probes.
	Protocol pulumi.StringInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VantagePointNames pulumi.StringArrayInput
}

func (PingProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pingProbeArgs)(nil)).Elem()
}

type PingProbeInput interface {
	pulumi.Input

	ToPingProbeOutput() PingProbeOutput
	ToPingProbeOutputWithContext(ctx context.Context) PingProbeOutput
}

func (*PingProbe) ElementType() reflect.Type {
	return reflect.TypeOf((**PingProbe)(nil)).Elem()
}

func (i *PingProbe) ToPingProbeOutput() PingProbeOutput {
	return i.ToPingProbeOutputWithContext(context.Background())
}

func (i *PingProbe) ToPingProbeOutputWithContext(ctx context.Context) PingProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PingProbeOutput)
}

// PingProbeArrayInput is an input type that accepts PingProbeArray and PingProbeArrayOutput values.
// You can construct a concrete instance of `PingProbeArrayInput` via:
//
//	PingProbeArray{ PingProbeArgs{...} }
type PingProbeArrayInput interface {
	pulumi.Input

	ToPingProbeArrayOutput() PingProbeArrayOutput
	ToPingProbeArrayOutputWithContext(context.Context) PingProbeArrayOutput
}

type PingProbeArray []PingProbeInput

func (PingProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PingProbe)(nil)).Elem()
}

func (i PingProbeArray) ToPingProbeArrayOutput() PingProbeArrayOutput {
	return i.ToPingProbeArrayOutputWithContext(context.Background())
}

func (i PingProbeArray) ToPingProbeArrayOutputWithContext(ctx context.Context) PingProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PingProbeArrayOutput)
}

// PingProbeMapInput is an input type that accepts PingProbeMap and PingProbeMapOutput values.
// You can construct a concrete instance of `PingProbeMapInput` via:
//
//	PingProbeMap{ "key": PingProbeArgs{...} }
type PingProbeMapInput interface {
	pulumi.Input

	ToPingProbeMapOutput() PingProbeMapOutput
	ToPingProbeMapOutputWithContext(context.Context) PingProbeMapOutput
}

type PingProbeMap map[string]PingProbeInput

func (PingProbeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PingProbe)(nil)).Elem()
}

func (i PingProbeMap) ToPingProbeMapOutput() PingProbeMapOutput {
	return i.ToPingProbeMapOutputWithContext(context.Background())
}

func (i PingProbeMap) ToPingProbeMapOutputWithContext(ctx context.Context) PingProbeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PingProbeMapOutput)
}

type PingProbeOutput struct{ *pulumi.OutputState }

func (PingProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PingProbe)(nil)).Elem()
}

func (o PingProbeOutput) ToPingProbeOutput() PingProbeOutput {
	return o
}

func (o PingProbeOutput) ToPingProbeOutputWithContext(ctx context.Context) PingProbeOutput {
	return o
}

// The OCID of the compartment.
func (o PingProbeOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The region where updates must be made and where results must be fetched from.
func (o PingProbeOutput) HomeRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringOutput { return v.HomeRegion }).(pulumi.StringOutput)
}

// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
func (o PingProbeOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The protocols for ping probes.
func (o PingProbeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// A URL for fetching the probe results.
func (o PingProbeOutput) ResultsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringOutput { return v.ResultsUrl }).(pulumi.StringOutput)
}

// A list of targets (hostnames or IP addresses) of the probe.
func (o PingProbeOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringArrayOutput { return v.Targets }).(pulumi.StringArrayOutput)
}

// The RFC 3339-formatted creation date and time of the probe.
func (o PingProbeOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
func (o PingProbeOutput) TimeoutInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.IntOutput { return v.TimeoutInSeconds }).(pulumi.IntOutput)
}

// A list of names of vantage points from which to execute the probe.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PingProbeOutput) VantagePointNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PingProbe) pulumi.StringArrayOutput { return v.VantagePointNames }).(pulumi.StringArrayOutput)
}

type PingProbeArrayOutput struct{ *pulumi.OutputState }

func (PingProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PingProbe)(nil)).Elem()
}

func (o PingProbeArrayOutput) ToPingProbeArrayOutput() PingProbeArrayOutput {
	return o
}

func (o PingProbeArrayOutput) ToPingProbeArrayOutputWithContext(ctx context.Context) PingProbeArrayOutput {
	return o
}

func (o PingProbeArrayOutput) Index(i pulumi.IntInput) PingProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PingProbe {
		return vs[0].([]*PingProbe)[vs[1].(int)]
	}).(PingProbeOutput)
}

type PingProbeMapOutput struct{ *pulumi.OutputState }

func (PingProbeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PingProbe)(nil)).Elem()
}

func (o PingProbeMapOutput) ToPingProbeMapOutput() PingProbeMapOutput {
	return o
}

func (o PingProbeMapOutput) ToPingProbeMapOutputWithContext(ctx context.Context) PingProbeMapOutput {
	return o
}

func (o PingProbeMapOutput) MapIndex(k pulumi.StringInput) PingProbeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PingProbe {
		return vs[0].(map[string]*PingProbe)[vs[1].(string)]
	}).(PingProbeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PingProbeInput)(nil)).Elem(), &PingProbe{})
	pulumi.RegisterInputType(reflect.TypeOf((*PingProbeArrayInput)(nil)).Elem(), PingProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PingProbeMapInput)(nil)).Elem(), PingProbeMap{})
	pulumi.RegisterOutputType(PingProbeOutput{})
	pulumi.RegisterOutputType(PingProbeArrayOutput{})
	pulumi.RegisterOutputType(PingProbeMapOutput{})
}
