// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Auth Token resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new auth token for the specified user. For information about what auth tokens are for, see
// [Managing User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcredentials.htm).
//
// You must specify a *description* for the auth token (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateAuthToken](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/UpdateAuthToken).
//
// Every user has permission to create an auth token for *their own user ID*. An administrator in your organization
// does not need to write a policy to give users this ability. To compare, administrators who have permission to the
// tenancy can use this operation to create an auth token for any user, including themselves.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewAuthToken(ctx, "testAuthToken", &Identity.AuthTokenArgs{
//				Description: pulumi.Any(_var.Auth_token_description),
//				UserId:      pulumi.Any(oci_identity_user.Test_user.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AuthTokens can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Identity/authToken:AuthToken test_auth_token "users/{userId}/authTokens/{authTokenId}"
//
// ```
type AuthToken struct {
	pulumi.CustomResourceState

	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The token's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token pulumi.StringOutput `pulumi:"token"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewAuthToken registers a new resource with the given unique name, arguments, and options.
func NewAuthToken(ctx *pulumi.Context,
	name string, args *AuthTokenArgs, opts ...pulumi.ResourceOption) (*AuthToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthToken
	err := ctx.RegisterResource("oci:Identity/authToken:AuthToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthToken gets an existing AuthToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthTokenState, opts ...pulumi.ResourceOption) (*AuthToken, error) {
	var resource AuthToken
	err := ctx.ReadResource("oci:Identity/authToken:AuthToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthToken resources.
type authTokenState struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The token's current state.
	State *string `pulumi:"state"`
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token *string `pulumi:"token"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId *string `pulumi:"userId"`
}

type AuthTokenState struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The token's current state.
	State pulumi.StringPtrInput
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token pulumi.StringPtrInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringPtrInput
}

func (AuthTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*authTokenState)(nil)).Elem()
}

type authTokenArgs struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a AuthToken resource.
type AuthTokenArgs struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringInput
}

func (AuthTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authTokenArgs)(nil)).Elem()
}

type AuthTokenInput interface {
	pulumi.Input

	ToAuthTokenOutput() AuthTokenOutput
	ToAuthTokenOutputWithContext(ctx context.Context) AuthTokenOutput
}

func (*AuthToken) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthToken)(nil)).Elem()
}

func (i *AuthToken) ToAuthTokenOutput() AuthTokenOutput {
	return i.ToAuthTokenOutputWithContext(context.Background())
}

func (i *AuthToken) ToAuthTokenOutputWithContext(ctx context.Context) AuthTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthTokenOutput)
}

func (i *AuthToken) ToOutput(ctx context.Context) pulumix.Output[*AuthToken] {
	return pulumix.Output[*AuthToken]{
		OutputState: i.ToAuthTokenOutputWithContext(ctx).OutputState,
	}
}

// AuthTokenArrayInput is an input type that accepts AuthTokenArray and AuthTokenArrayOutput values.
// You can construct a concrete instance of `AuthTokenArrayInput` via:
//
//	AuthTokenArray{ AuthTokenArgs{...} }
type AuthTokenArrayInput interface {
	pulumi.Input

	ToAuthTokenArrayOutput() AuthTokenArrayOutput
	ToAuthTokenArrayOutputWithContext(context.Context) AuthTokenArrayOutput
}

type AuthTokenArray []AuthTokenInput

func (AuthTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthToken)(nil)).Elem()
}

func (i AuthTokenArray) ToAuthTokenArrayOutput() AuthTokenArrayOutput {
	return i.ToAuthTokenArrayOutputWithContext(context.Background())
}

func (i AuthTokenArray) ToAuthTokenArrayOutputWithContext(ctx context.Context) AuthTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthTokenArrayOutput)
}

func (i AuthTokenArray) ToOutput(ctx context.Context) pulumix.Output[[]*AuthToken] {
	return pulumix.Output[[]*AuthToken]{
		OutputState: i.ToAuthTokenArrayOutputWithContext(ctx).OutputState,
	}
}

// AuthTokenMapInput is an input type that accepts AuthTokenMap and AuthTokenMapOutput values.
// You can construct a concrete instance of `AuthTokenMapInput` via:
//
//	AuthTokenMap{ "key": AuthTokenArgs{...} }
type AuthTokenMapInput interface {
	pulumi.Input

	ToAuthTokenMapOutput() AuthTokenMapOutput
	ToAuthTokenMapOutputWithContext(context.Context) AuthTokenMapOutput
}

type AuthTokenMap map[string]AuthTokenInput

func (AuthTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthToken)(nil)).Elem()
}

func (i AuthTokenMap) ToAuthTokenMapOutput() AuthTokenMapOutput {
	return i.ToAuthTokenMapOutputWithContext(context.Background())
}

func (i AuthTokenMap) ToAuthTokenMapOutputWithContext(ctx context.Context) AuthTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthTokenMapOutput)
}

func (i AuthTokenMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AuthToken] {
	return pulumix.Output[map[string]*AuthToken]{
		OutputState: i.ToAuthTokenMapOutputWithContext(ctx).OutputState,
	}
}

type AuthTokenOutput struct{ *pulumi.OutputState }

func (AuthTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthToken)(nil)).Elem()
}

func (o AuthTokenOutput) ToAuthTokenOutput() AuthTokenOutput {
	return o
}

func (o AuthTokenOutput) ToAuthTokenOutputWithContext(ctx context.Context) AuthTokenOutput {
	return o
}

func (o AuthTokenOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthToken] {
	return pulumix.Output[*AuthToken]{
		OutputState: o.OutputState,
	}
}

// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
func (o AuthTokenOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The detailed status of INACTIVE lifecycleState.
func (o AuthTokenOutput) InactiveState() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.InactiveState }).(pulumi.StringOutput)
}

// The token's current state.
func (o AuthTokenOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o AuthTokenOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
func (o AuthTokenOutput) TimeExpires() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.TimeExpires }).(pulumi.StringOutput)
}

// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
func (o AuthTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The OCID of the user.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o AuthTokenOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthToken) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type AuthTokenArrayOutput struct{ *pulumi.OutputState }

func (AuthTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthToken)(nil)).Elem()
}

func (o AuthTokenArrayOutput) ToAuthTokenArrayOutput() AuthTokenArrayOutput {
	return o
}

func (o AuthTokenArrayOutput) ToAuthTokenArrayOutputWithContext(ctx context.Context) AuthTokenArrayOutput {
	return o
}

func (o AuthTokenArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AuthToken] {
	return pulumix.Output[[]*AuthToken]{
		OutputState: o.OutputState,
	}
}

func (o AuthTokenArrayOutput) Index(i pulumi.IntInput) AuthTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthToken {
		return vs[0].([]*AuthToken)[vs[1].(int)]
	}).(AuthTokenOutput)
}

type AuthTokenMapOutput struct{ *pulumi.OutputState }

func (AuthTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthToken)(nil)).Elem()
}

func (o AuthTokenMapOutput) ToAuthTokenMapOutput() AuthTokenMapOutput {
	return o
}

func (o AuthTokenMapOutput) ToAuthTokenMapOutputWithContext(ctx context.Context) AuthTokenMapOutput {
	return o
}

func (o AuthTokenMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AuthToken] {
	return pulumix.Output[map[string]*AuthToken]{
		OutputState: o.OutputState,
	}
}

func (o AuthTokenMapOutput) MapIndex(k pulumi.StringInput) AuthTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthToken {
		return vs[0].(map[string]*AuthToken)[vs[1].(string)]
	}).(AuthTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthTokenInput)(nil)).Elem(), &AuthToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthTokenArrayInput)(nil)).Elem(), AuthTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthTokenMapInput)(nil)).Elem(), AuthTokenMap{})
	pulumi.RegisterOutputType(AuthTokenOutput{})
	pulumi.RegisterOutputType(AuthTokenArrayOutput{})
	pulumi.RegisterOutputType(AuthTokenMapOutput{})
}
