// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Db Credential resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new DB credential for the specified user.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewDbCredential(ctx, "test_db_credential", &Identity.DbCredentialArgs{
//				Description: pulumi.Any(dbCredentialDescription),
//				Password:    pulumi.Any(dbCredentialPassword),
//				UserId:      pulumi.Any(testUser.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Import is not supported for this resource.
type DbCredential struct {
	pulumi.CustomResourceState

	// The description you assign to the DB credentials during creation.
	Description pulumi.StringOutput `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The password for the DB credentials during creation.
	Password pulumi.StringOutput `pulumi:"password"`
	// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewDbCredential registers a new resource with the given unique name, arguments, and options.
func NewDbCredential(ctx *pulumi.Context,
	name string, args *DbCredentialArgs, opts ...pulumi.ResourceOption) (*DbCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbCredential
	err := ctx.RegisterResource("oci:Identity/dbCredential:DbCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbCredential gets an existing DbCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbCredentialState, opts ...pulumi.ResourceOption) (*DbCredential, error) {
	var resource DbCredential
	err := ctx.ReadResource("oci:Identity/dbCredential:DbCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbCredential resources.
type dbCredentialState struct {
	// The description you assign to the DB credentials during creation.
	Description *string `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The password for the DB credentials during creation.
	Password *string `pulumi:"password"`
	// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
	State *string `pulumi:"state"`
	// Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId *string `pulumi:"userId"`
}

type DbCredentialState struct {
	// The description you assign to the DB credentials during creation.
	Description pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	LifecycleDetails pulumi.StringPtrInput
	// The password for the DB credentials during creation.
	Password pulumi.StringPtrInput
	// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
	State pulumi.StringPtrInput
	// Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringPtrInput
}

func (DbCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbCredentialState)(nil)).Elem()
}

type dbCredentialArgs struct {
	// The description you assign to the DB credentials during creation.
	Description string `pulumi:"description"`
	// The password for the DB credentials during creation.
	Password string `pulumi:"password"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a DbCredential resource.
type DbCredentialArgs struct {
	// The description you assign to the DB credentials during creation.
	Description pulumi.StringInput
	// The password for the DB credentials during creation.
	Password pulumi.StringInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringInput
}

func (DbCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbCredentialArgs)(nil)).Elem()
}

type DbCredentialInput interface {
	pulumi.Input

	ToDbCredentialOutput() DbCredentialOutput
	ToDbCredentialOutputWithContext(ctx context.Context) DbCredentialOutput
}

func (*DbCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCredential)(nil)).Elem()
}

func (i *DbCredential) ToDbCredentialOutput() DbCredentialOutput {
	return i.ToDbCredentialOutputWithContext(context.Background())
}

func (i *DbCredential) ToDbCredentialOutputWithContext(ctx context.Context) DbCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbCredentialOutput)
}

// DbCredentialArrayInput is an input type that accepts DbCredentialArray and DbCredentialArrayOutput values.
// You can construct a concrete instance of `DbCredentialArrayInput` via:
//
//	DbCredentialArray{ DbCredentialArgs{...} }
type DbCredentialArrayInput interface {
	pulumi.Input

	ToDbCredentialArrayOutput() DbCredentialArrayOutput
	ToDbCredentialArrayOutputWithContext(context.Context) DbCredentialArrayOutput
}

type DbCredentialArray []DbCredentialInput

func (DbCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCredential)(nil)).Elem()
}

func (i DbCredentialArray) ToDbCredentialArrayOutput() DbCredentialArrayOutput {
	return i.ToDbCredentialArrayOutputWithContext(context.Background())
}

func (i DbCredentialArray) ToDbCredentialArrayOutputWithContext(ctx context.Context) DbCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbCredentialArrayOutput)
}

// DbCredentialMapInput is an input type that accepts DbCredentialMap and DbCredentialMapOutput values.
// You can construct a concrete instance of `DbCredentialMapInput` via:
//
//	DbCredentialMap{ "key": DbCredentialArgs{...} }
type DbCredentialMapInput interface {
	pulumi.Input

	ToDbCredentialMapOutput() DbCredentialMapOutput
	ToDbCredentialMapOutputWithContext(context.Context) DbCredentialMapOutput
}

type DbCredentialMap map[string]DbCredentialInput

func (DbCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCredential)(nil)).Elem()
}

func (i DbCredentialMap) ToDbCredentialMapOutput() DbCredentialMapOutput {
	return i.ToDbCredentialMapOutputWithContext(context.Background())
}

func (i DbCredentialMap) ToDbCredentialMapOutputWithContext(ctx context.Context) DbCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbCredentialMapOutput)
}

type DbCredentialOutput struct{ *pulumi.OutputState }

func (DbCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbCredential)(nil)).Elem()
}

func (o DbCredentialOutput) ToDbCredentialOutput() DbCredentialOutput {
	return o
}

func (o DbCredentialOutput) ToDbCredentialOutputWithContext(ctx context.Context) DbCredentialOutput {
	return o
}

// The description you assign to the DB credentials during creation.
func (o DbCredentialOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The detailed status of INACTIVE lifecycleState.
func (o DbCredentialOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The password for the DB credentials during creation.
func (o DbCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
func (o DbCredentialOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Date and time the `DbCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o DbCredentialOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
func (o DbCredentialOutput) TimeExpires() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.TimeExpires }).(pulumi.StringOutput)
}

// The OCID of the user.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o DbCredentialOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbCredential) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type DbCredentialArrayOutput struct{ *pulumi.OutputState }

func (DbCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbCredential)(nil)).Elem()
}

func (o DbCredentialArrayOutput) ToDbCredentialArrayOutput() DbCredentialArrayOutput {
	return o
}

func (o DbCredentialArrayOutput) ToDbCredentialArrayOutputWithContext(ctx context.Context) DbCredentialArrayOutput {
	return o
}

func (o DbCredentialArrayOutput) Index(i pulumi.IntInput) DbCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbCredential {
		return vs[0].([]*DbCredential)[vs[1].(int)]
	}).(DbCredentialOutput)
}

type DbCredentialMapOutput struct{ *pulumi.OutputState }

func (DbCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbCredential)(nil)).Elem()
}

func (o DbCredentialMapOutput) ToDbCredentialMapOutput() DbCredentialMapOutput {
	return o
}

func (o DbCredentialMapOutput) ToDbCredentialMapOutputWithContext(ctx context.Context) DbCredentialMapOutput {
	return o
}

func (o DbCredentialMapOutput) MapIndex(k pulumi.StringInput) DbCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbCredential {
		return vs[0].(map[string]*DbCredential)[vs[1].(string)]
	}).(DbCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbCredentialInput)(nil)).Elem(), &DbCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbCredentialArrayInput)(nil)).Elem(), DbCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbCredentialMapInput)(nil)).Elem(), DbCredentialMap{})
	pulumi.RegisterOutputType(DbCredentialOutput{})
	pulumi.RegisterOutputType(DbCredentialArrayOutput{})
	pulumi.RegisterOutputType(DbCredentialMapOutput{})
}
