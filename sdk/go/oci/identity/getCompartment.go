// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Compartment resource in Oracle Cloud Infrastructure Identity service.
//
// Gets the specified compartment's information.
//
// This operation does not return a list of all the resources inside the compartment. There is no single
// API operation that does that. Compartments can contain multiple types of resources (instances, block
// storage volumes, etc.). To find out what's in a compartment, you must call the "List" operation for
// each resource type and specify the compartment's OCID as a query parameter in the request. For example,
// call the [ListInstances](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Instance/ListInstances) operation in the Cloud Compute
// Service or the [ListVolumes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/Volume/ListVolumes) operation in Cloud Block Storage.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetCompartment(ctx, &identity.GetCompartmentArgs{
//				Id: _var.Compartment_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCompartment(ctx *pulumi.Context, args *LookupCompartmentArgs, opts ...pulumi.InvokeOption) (*LookupCompartmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCompartmentResult
	err := ctx.Invoke("oci:Identity/getCompartment:getCompartment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCompartment.
type LookupCompartmentArgs struct {
	// The OCID of the compartment.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCompartment.
type LookupCompartmentResult struct {
	// The OCID of the parent compartment containing the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The description you assign to the compartment. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the compartment.
	Id string `pulumi:"id"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
	IsAccessible *bool `pulumi:"isAccessible"`
	// The name you assign to the compartment during creation. The name must be unique across all compartments in the parent. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// The compartment's current state.
	State *string `pulumi:"state"`
	// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

func LookupCompartmentOutput(ctx *pulumi.Context, args LookupCompartmentOutputArgs, opts ...pulumi.InvokeOption) LookupCompartmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCompartmentResult, error) {
			args := v.(LookupCompartmentArgs)
			r, err := LookupCompartment(ctx, &args, opts...)
			var s LookupCompartmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCompartmentResultOutput)
}

// A collection of arguments for invoking getCompartment.
type LookupCompartmentOutputArgs struct {
	// The OCID of the compartment.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCompartmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompartmentArgs)(nil)).Elem()
}

// A collection of values returned by getCompartment.
type LookupCompartmentResultOutput struct{ *pulumi.OutputState }

func (LookupCompartmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompartmentResult)(nil)).Elem()
}

func (o LookupCompartmentResultOutput) ToLookupCompartmentResultOutput() LookupCompartmentResultOutput {
	return o
}

func (o LookupCompartmentResultOutput) ToLookupCompartmentResultOutputWithContext(ctx context.Context) LookupCompartmentResultOutput {
	return o
}

// The OCID of the parent compartment containing the compartment.
func (o LookupCompartmentResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o LookupCompartmentResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupCompartmentResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The description you assign to the compartment. Does not have to be unique, and it's changeable.
func (o LookupCompartmentResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o LookupCompartmentResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupCompartmentResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the compartment.
func (o LookupCompartmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompartmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The detailed status of INACTIVE lifecycleState.
func (o LookupCompartmentResultOutput) InactiveState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.InactiveState }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
func (o LookupCompartmentResultOutput) IsAccessible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *bool { return v.IsAccessible }).(pulumi.BoolPtrOutput)
}

// The name you assign to the compartment during creation. The name must be unique across all compartments in the parent. Avoid entering confidential information.
func (o LookupCompartmentResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The compartment's current state.
func (o LookupCompartmentResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o LookupCompartmentResultOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCompartmentResult) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCompartmentResultOutput{})
}
