// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Db Credentials in Oracle Cloud Infrastructure Identity service.
//
// Lists the DB credentials for the specified user. The returned object contains the credential's OCID
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.GetDbCredentials(ctx, &identity.GetDbCredentialsArgs{
//				UserId: testUser.Id,
//				Name:   pulumi.StringRef(dbCredentialName),
//				State:  pulumi.StringRef(dbCredentialState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDbCredentials(ctx *pulumi.Context, args *GetDbCredentialsArgs, opts ...pulumi.InvokeOption) (*GetDbCredentialsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDbCredentialsResult
	err := ctx.Invoke("oci:Identity/getDbCredentials:getDbCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbCredentials.
type GetDbCredentialsArgs struct {
	Filters []GetDbCredentialsFilter `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getDbCredentials.
type GetDbCredentialsResult struct {
	// The list of db_credentials.
	DbCredentials []GetDbCredentialsDbCredential `pulumi:"dbCredentials"`
	Filters       []GetDbCredentialsFilter       `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
	State *string `pulumi:"state"`
	// The OCID of the user the DB credential belongs to.
	UserId string `pulumi:"userId"`
}

func GetDbCredentialsOutput(ctx *pulumi.Context, args GetDbCredentialsOutputArgs, opts ...pulumi.InvokeOption) GetDbCredentialsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDbCredentialsResultOutput, error) {
			args := v.(GetDbCredentialsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Identity/getDbCredentials:getDbCredentials", args, GetDbCredentialsResultOutput{}, options).(GetDbCredentialsResultOutput), nil
		}).(GetDbCredentialsResultOutput)
}

// A collection of arguments for invoking getDbCredentials.
type GetDbCredentialsOutputArgs struct {
	Filters GetDbCredentialsFilterArrayInput `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The OCID of the user.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetDbCredentialsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbCredentialsArgs)(nil)).Elem()
}

// A collection of values returned by getDbCredentials.
type GetDbCredentialsResultOutput struct{ *pulumi.OutputState }

func (GetDbCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbCredentialsResult)(nil)).Elem()
}

func (o GetDbCredentialsResultOutput) ToGetDbCredentialsResultOutput() GetDbCredentialsResultOutput {
	return o
}

func (o GetDbCredentialsResultOutput) ToGetDbCredentialsResultOutputWithContext(ctx context.Context) GetDbCredentialsResultOutput {
	return o
}

// The list of db_credentials.
func (o GetDbCredentialsResultOutput) DbCredentials() GetDbCredentialsDbCredentialArrayOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) []GetDbCredentialsDbCredential { return v.DbCredentials }).(GetDbCredentialsDbCredentialArrayOutput)
}

func (o GetDbCredentialsResultOutput) Filters() GetDbCredentialsFilterArrayOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) []GetDbCredentialsFilter { return v.Filters }).(GetDbCredentialsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDbCredentialsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDbCredentialsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The credential's current state. After creating a DB credential, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
func (o GetDbCredentialsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID of the user the DB credential belongs to.
func (o GetDbCredentialsResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbCredentialsResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDbCredentialsResultOutput{})
}
