// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Identity Provider resource in Oracle Cloud Infrastructure Identity Domains service.
//
// # Get an Identity Provider
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetDomainsIdentityProvider(ctx, &identity.GetDomainsIdentityProviderArgs{
//				IdcsEndpoint:              data.Oci_identity_domain.Test_domain.Url,
//				IdentityProviderId:        oci_identity_identity_provider.Test_identity_provider.Id,
//				AttributeSets:             []interface{}{},
//				Attributes:                pulumi.StringRef(""),
//				Authorization:             pulumi.StringRef(_var.Identity_provider_authorization),
//				ResourceTypeSchemaVersion: pulumi.StringRef(_var.Identity_provider_resource_type_schema_version),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDomainsIdentityProvider(ctx *pulumi.Context, args *LookupDomainsIdentityProviderArgs, opts ...pulumi.InvokeOption) (*LookupDomainsIdentityProviderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainsIdentityProviderResult
	err := ctx.Invoke("oci:Identity/getDomainsIdentityProvider:getDomainsIdentityProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainsIdentityProvider.
type LookupDomainsIdentityProviderArgs struct {
	// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
	AttributeSets []string `pulumi:"attributeSets"`
	// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
	Attributes *string `pulumi:"attributes"`
	// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
	Authorization *string `pulumi:"authorization"`
	// The basic endpoint for the identity domain
	IdcsEndpoint string `pulumi:"idcsEndpoint"`
	// ID of the resource
	IdentityProviderId string `pulumi:"identityProviderId"`
	// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
	ResourceTypeSchemaVersion *string `pulumi:"resourceTypeSchemaVersion"`
}

// A collection of values returned by getDomainsIdentityProvider.
type LookupDomainsIdentityProviderResult struct {
	// Assertion attribute name.
	AssertionAttribute string   `pulumi:"assertionAttribute"`
	AttributeSets      []string `pulumi:"attributeSets"`
	Attributes         *string  `pulumi:"attributes"`
	// HTTP binding to use for authentication requests.
	AuthnRequestBinding string  `pulumi:"authnRequestBinding"`
	Authorization       *string `pulumi:"authorization"`
	// Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
	CompartmentOcid string `pulumi:"compartmentOcid"`
	// Correlation policy
	CorrelationPolicies []GetDomainsIdentityProviderCorrelationPolicy `pulumi:"correlationPolicies"`
	// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
	DeleteInProgress bool `pulumi:"deleteInProgress"`
	// Description
	Description string `pulumi:"description"`
	// Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
	DomainOcid string `pulumi:"domainOcid"`
	// Set to true to indicate Partner enabled.
	Enabled bool `pulumi:"enabled"`
	// Encryption certificate
	EncryptionCertificate string `pulumi:"encryptionCertificate"`
	// An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
	ExternalId string `pulumi:"externalId"`
	// Identity Provider Icon URL.
	IconUrl string `pulumi:"iconUrl"`
	// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
	Id string `pulumi:"id"`
	// The User or App who created the Resource
	IdcsCreatedBies []GetDomainsIdentityProviderIdcsCreatedBy `pulumi:"idcsCreatedBies"`
	IdcsEndpoint    string                                    `pulumi:"idcsEndpoint"`
	// The User or App who modified the Resource
	IdcsLastModifiedBies []GetDomainsIdentityProviderIdcsLastModifiedBy `pulumi:"idcsLastModifiedBies"`
	// The release number when the resource was upgraded.
	IdcsLastUpgradedInRelease string `pulumi:"idcsLastUpgradedInRelease"`
	// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
	IdcsPreventedOperations []string `pulumi:"idcsPreventedOperations"`
	IdentityProviderId      string   `pulumi:"identityProviderId"`
	// Identity Provider SSO URL
	IdpSsoUrl string `pulumi:"idpSsoUrl"`
	// Set to true to include the signing certificate in the signature.
	IncludeSigningCertInSignature bool `pulumi:"includeSigningCertInSignature"`
	// Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
	JitUserProvAssignedGroups []GetDomainsIdentityProviderJitUserProvAssignedGroup `pulumi:"jitUserProvAssignedGroups"`
	// Set to true to indicate JIT User Creation is enabled
	JitUserProvAttributeUpdateEnabled bool `pulumi:"jitUserProvAttributeUpdateEnabled"`
	// Assertion To User Mapping
	JitUserProvAttributes []GetDomainsIdentityProviderJitUserProvAttribute `pulumi:"jitUserProvAttributes"`
	// Set to true to indicate JIT User Creation is enabled
	JitUserProvCreateUserEnabled bool `pulumi:"jitUserProvCreateUserEnabled"`
	// Set to true to indicate JIT User Provisioning is enabled
	JitUserProvEnabled bool `pulumi:"jitUserProvEnabled"`
	// Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
	JitUserProvGroupAssertionAttributeEnabled bool `pulumi:"jitUserProvGroupAssertionAttributeEnabled"`
	// The default value is 'Overwrite', which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify 'Merge' if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
	JitUserProvGroupAssignmentMethod string `pulumi:"jitUserProvGroupAssignmentMethod"`
	// Property to indicate the mode of group mapping
	JitUserProvGroupMappingMode string `pulumi:"jitUserProvGroupMappingMode"`
	// The list of mappings between the Identity Domain Group and the IDP group.
	JitUserProvGroupMappings []GetDomainsIdentityProviderJitUserProvGroupMapping `pulumi:"jitUserProvGroupMappings"`
	// Name of the assertion attribute containing the users groups
	JitUserProvGroupSamlAttributeName string `pulumi:"jitUserProvGroupSamlAttributeName"`
	// Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
	JitUserProvGroupStaticListEnabled bool `pulumi:"jitUserProvGroupStaticListEnabled"`
	// Set to true to indicate ignoring absence of group while provisioning
	JitUserProvIgnoreErrorOnAbsentGroups bool `pulumi:"jitUserProvIgnoreErrorOnAbsentGroups"`
	// HTTP binding to use for logout.
	LogoutBinding string `pulumi:"logoutBinding"`
	// Set to true to enable logout.
	LogoutEnabled bool `pulumi:"logoutEnabled"`
	// Logout request URL
	LogoutRequestUrl string `pulumi:"logoutRequestUrl"`
	// Logout response URL
	LogoutResponseUrl string `pulumi:"logoutResponseUrl"`
	// Metadata
	Metadata string `pulumi:"metadata"`
	// A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
	Metas []GetDomainsIdentityProviderMeta `pulumi:"metas"`
	// Default authentication request name ID format.
	NameIdFormat string `pulumi:"nameIdFormat"`
	// Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
	Ocid string `pulumi:"ocid"`
	// Unique name of the trusted Identity Provider.
	PartnerName string `pulumi:"partnerName"`
	// Provider ID
	PartnerProviderId string `pulumi:"partnerProviderId"`
	// SAML SP authentication type.
	RequestedAuthenticationContexts []string `pulumi:"requestedAuthenticationContexts"`
	// This SP requires requests SAML IdP to enforce re-authentication.
	RequireForceAuthn bool `pulumi:"requireForceAuthn"`
	// SAML SP must accept encrypted assertion only.
	RequiresEncryptedAssertion bool    `pulumi:"requiresEncryptedAssertion"`
	ResourceTypeSchemaVersion  *string `pulumi:"resourceTypeSchemaVersion"`
	// SAML SP HoK Enabled.
	SamlHoKrequired bool `pulumi:"samlHoKrequired"`
	// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
	Schemas []string `pulumi:"schemas"`
	// The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
	ServiceInstanceIdentifier string `pulumi:"serviceInstanceIdentifier"`
	// Set to true to indicate whether to show IdP in login page or not.
	ShownOnLoginPage bool `pulumi:"shownOnLoginPage"`
	// Signature hash algorithm.
	SignatureHashAlgorithm string `pulumi:"signatureHashAlgorithm"`
	// Signing certificate
	SigningCertificate string `pulumi:"signingCertificate"`
	// Succinct ID
	SuccinctId string `pulumi:"succinctId"`
	// A list of tags on this resource.
	Tags []GetDomainsIdentityProviderTag `pulumi:"tags"`
	// Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
	TenancyOcid string `pulumi:"tenancyOcid"`
	// The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
	TenantProviderId string `pulumi:"tenantProviderId"`
	// Identity Provider Type
	Type string `pulumi:"type"`
	// Social Identity Provider Extension Schema
	UrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders []GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider `pulumi:"urnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders"`
	// X509 Identity Provider Extension Schema
	Urnietfparamsscimschemasoracleidcsextensionx509identityProviders []GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider `pulumi:"urnietfparamsscimschemasoracleidcsextensionx509identityProviders"`
	// User mapping method.
	UserMappingMethod string `pulumi:"userMappingMethod"`
	// This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.<br>You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the <b>Example of a Request Body</b> section of the Examples tab for the <a href='./op-admin-v1-identityproviders-post.html'>POST</a> and <a href='./op-admin-v1-identityproviders-id-put.html'>PUT</a> methods of the /IdentityProviders endpoint.
	UserMappingStoreAttribute string `pulumi:"userMappingStoreAttribute"`
}

func LookupDomainsIdentityProviderOutput(ctx *pulumi.Context, args LookupDomainsIdentityProviderOutputArgs, opts ...pulumi.InvokeOption) LookupDomainsIdentityProviderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainsIdentityProviderResult, error) {
			args := v.(LookupDomainsIdentityProviderArgs)
			r, err := LookupDomainsIdentityProvider(ctx, &args, opts...)
			var s LookupDomainsIdentityProviderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDomainsIdentityProviderResultOutput)
}

// A collection of arguments for invoking getDomainsIdentityProvider.
type LookupDomainsIdentityProviderOutputArgs struct {
	// A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
	AttributeSets pulumi.StringArrayInput `pulumi:"attributeSets"`
	// A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
	Attributes pulumi.StringPtrInput `pulumi:"attributes"`
	// The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
	Authorization pulumi.StringPtrInput `pulumi:"authorization"`
	// The basic endpoint for the identity domain
	IdcsEndpoint pulumi.StringInput `pulumi:"idcsEndpoint"`
	// ID of the resource
	IdentityProviderId pulumi.StringInput `pulumi:"identityProviderId"`
	// An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
	ResourceTypeSchemaVersion pulumi.StringPtrInput `pulumi:"resourceTypeSchemaVersion"`
}

func (LookupDomainsIdentityProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainsIdentityProviderArgs)(nil)).Elem()
}

// A collection of values returned by getDomainsIdentityProvider.
type LookupDomainsIdentityProviderResultOutput struct{ *pulumi.OutputState }

func (LookupDomainsIdentityProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainsIdentityProviderResult)(nil)).Elem()
}

func (o LookupDomainsIdentityProviderResultOutput) ToLookupDomainsIdentityProviderResultOutput() LookupDomainsIdentityProviderResultOutput {
	return o
}

func (o LookupDomainsIdentityProviderResultOutput) ToLookupDomainsIdentityProviderResultOutputWithContext(ctx context.Context) LookupDomainsIdentityProviderResultOutput {
	return o
}

// Assertion attribute name.
func (o LookupDomainsIdentityProviderResultOutput) AssertionAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.AssertionAttribute }).(pulumi.StringOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) AttributeSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []string { return v.AttributeSets }).(pulumi.StringArrayOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) Attributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) *string { return v.Attributes }).(pulumi.StringPtrOutput)
}

// HTTP binding to use for authentication requests.
func (o LookupDomainsIdentityProviderResultOutput) AuthnRequestBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.AuthnRequestBinding }).(pulumi.StringOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) Authorization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) *string { return v.Authorization }).(pulumi.StringPtrOutput)
}

// Oracle Cloud Infrastructure Compartment Id (ocid) in which the resource lives.
func (o LookupDomainsIdentityProviderResultOutput) CompartmentOcid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.CompartmentOcid }).(pulumi.StringOutput)
}

// Correlation policy
func (o LookupDomainsIdentityProviderResultOutput) CorrelationPolicies() GetDomainsIdentityProviderCorrelationPolicyArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderCorrelationPolicy {
		return v.CorrelationPolicies
	}).(GetDomainsIdentityProviderCorrelationPolicyArrayOutput)
}

// A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
func (o LookupDomainsIdentityProviderResultOutput) DeleteInProgress() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.DeleteInProgress }).(pulumi.BoolOutput)
}

// Description
func (o LookupDomainsIdentityProviderResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.Description }).(pulumi.StringOutput)
}

// Oracle Cloud Infrastructure Domain Id (ocid) in which the resource lives.
func (o LookupDomainsIdentityProviderResultOutput) DomainOcid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.DomainOcid }).(pulumi.StringOutput)
}

// Set to true to indicate Partner enabled.
func (o LookupDomainsIdentityProviderResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Encryption certificate
func (o LookupDomainsIdentityProviderResultOutput) EncryptionCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.EncryptionCertificate }).(pulumi.StringOutput)
}

// An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
func (o LookupDomainsIdentityProviderResultOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.ExternalId }).(pulumi.StringOutput)
}

// Identity Provider Icon URL.
func (o LookupDomainsIdentityProviderResultOutput) IconUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.IconUrl }).(pulumi.StringOutput)
}

// Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
func (o LookupDomainsIdentityProviderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.Id }).(pulumi.StringOutput)
}

// The User or App who created the Resource
func (o LookupDomainsIdentityProviderResultOutput) IdcsCreatedBies() GetDomainsIdentityProviderIdcsCreatedByArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderIdcsCreatedBy {
		return v.IdcsCreatedBies
	}).(GetDomainsIdentityProviderIdcsCreatedByArrayOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) IdcsEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.IdcsEndpoint }).(pulumi.StringOutput)
}

// The User or App who modified the Resource
func (o LookupDomainsIdentityProviderResultOutput) IdcsLastModifiedBies() GetDomainsIdentityProviderIdcsLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderIdcsLastModifiedBy {
		return v.IdcsLastModifiedBies
	}).(GetDomainsIdentityProviderIdcsLastModifiedByArrayOutput)
}

// The release number when the resource was upgraded.
func (o LookupDomainsIdentityProviderResultOutput) IdcsLastUpgradedInRelease() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.IdcsLastUpgradedInRelease }).(pulumi.StringOutput)
}

// Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
func (o LookupDomainsIdentityProviderResultOutput) IdcsPreventedOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []string { return v.IdcsPreventedOperations }).(pulumi.StringArrayOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) IdentityProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.IdentityProviderId }).(pulumi.StringOutput)
}

// Identity Provider SSO URL
func (o LookupDomainsIdentityProviderResultOutput) IdpSsoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.IdpSsoUrl }).(pulumi.StringOutput)
}

// Set to true to include the signing certificate in the signature.
func (o LookupDomainsIdentityProviderResultOutput) IncludeSigningCertInSignature() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.IncludeSigningCertInSignature }).(pulumi.BoolOutput)
}

// Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvAssignedGroups() GetDomainsIdentityProviderJitUserProvAssignedGroupArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderJitUserProvAssignedGroup {
		return v.JitUserProvAssignedGroups
	}).(GetDomainsIdentityProviderJitUserProvAssignedGroupArrayOutput)
}

// Set to true to indicate JIT User Creation is enabled
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvAttributeUpdateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvAttributeUpdateEnabled }).(pulumi.BoolOutput)
}

// Assertion To User Mapping
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvAttributes() GetDomainsIdentityProviderJitUserProvAttributeArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderJitUserProvAttribute {
		return v.JitUserProvAttributes
	}).(GetDomainsIdentityProviderJitUserProvAttributeArrayOutput)
}

// Set to true to indicate JIT User Creation is enabled
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvCreateUserEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvCreateUserEnabled }).(pulumi.BoolOutput)
}

// Set to true to indicate JIT User Provisioning is enabled
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvEnabled }).(pulumi.BoolOutput)
}

// Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupAssertionAttributeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvGroupAssertionAttributeEnabled }).(pulumi.BoolOutput)
}

// The default value is 'Overwrite', which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify 'Merge' if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupAssignmentMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.JitUserProvGroupAssignmentMethod }).(pulumi.StringOutput)
}

// Property to indicate the mode of group mapping
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupMappingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.JitUserProvGroupMappingMode }).(pulumi.StringOutput)
}

// The list of mappings between the Identity Domain Group and the IDP group.
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupMappings() GetDomainsIdentityProviderJitUserProvGroupMappingArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderJitUserProvGroupMapping {
		return v.JitUserProvGroupMappings
	}).(GetDomainsIdentityProviderJitUserProvGroupMappingArrayOutput)
}

// Name of the assertion attribute containing the users groups
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupSamlAttributeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.JitUserProvGroupSamlAttributeName }).(pulumi.StringOutput)
}

// Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvGroupStaticListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvGroupStaticListEnabled }).(pulumi.BoolOutput)
}

// Set to true to indicate ignoring absence of group while provisioning
func (o LookupDomainsIdentityProviderResultOutput) JitUserProvIgnoreErrorOnAbsentGroups() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.JitUserProvIgnoreErrorOnAbsentGroups }).(pulumi.BoolOutput)
}

// HTTP binding to use for logout.
func (o LookupDomainsIdentityProviderResultOutput) LogoutBinding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.LogoutBinding }).(pulumi.StringOutput)
}

// Set to true to enable logout.
func (o LookupDomainsIdentityProviderResultOutput) LogoutEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.LogoutEnabled }).(pulumi.BoolOutput)
}

// Logout request URL
func (o LookupDomainsIdentityProviderResultOutput) LogoutRequestUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.LogoutRequestUrl }).(pulumi.StringOutput)
}

// Logout response URL
func (o LookupDomainsIdentityProviderResultOutput) LogoutResponseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.LogoutResponseUrl }).(pulumi.StringOutput)
}

// Metadata
func (o LookupDomainsIdentityProviderResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// A complex attribute that contains resource metadata. All sub-attributes are OPTIONAL.
func (o LookupDomainsIdentityProviderResultOutput) Metas() GetDomainsIdentityProviderMetaArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderMeta { return v.Metas }).(GetDomainsIdentityProviderMetaArrayOutput)
}

// Default authentication request name ID format.
func (o LookupDomainsIdentityProviderResultOutput) NameIdFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.NameIdFormat }).(pulumi.StringOutput)
}

// Unique Oracle Cloud Infrastructure identifier for the SCIM Resource.
func (o LookupDomainsIdentityProviderResultOutput) Ocid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.Ocid }).(pulumi.StringOutput)
}

// Unique name of the trusted Identity Provider.
func (o LookupDomainsIdentityProviderResultOutput) PartnerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.PartnerName }).(pulumi.StringOutput)
}

// Provider ID
func (o LookupDomainsIdentityProviderResultOutput) PartnerProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.PartnerProviderId }).(pulumi.StringOutput)
}

// SAML SP authentication type.
func (o LookupDomainsIdentityProviderResultOutput) RequestedAuthenticationContexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []string { return v.RequestedAuthenticationContexts }).(pulumi.StringArrayOutput)
}

// This SP requires requests SAML IdP to enforce re-authentication.
func (o LookupDomainsIdentityProviderResultOutput) RequireForceAuthn() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.RequireForceAuthn }).(pulumi.BoolOutput)
}

// SAML SP must accept encrypted assertion only.
func (o LookupDomainsIdentityProviderResultOutput) RequiresEncryptedAssertion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.RequiresEncryptedAssertion }).(pulumi.BoolOutput)
}

func (o LookupDomainsIdentityProviderResultOutput) ResourceTypeSchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) *string { return v.ResourceTypeSchemaVersion }).(pulumi.StringPtrOutput)
}

// SAML SP HoK Enabled.
func (o LookupDomainsIdentityProviderResultOutput) SamlHoKrequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.SamlHoKrequired }).(pulumi.BoolOutput)
}

// REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \"enterprise\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
func (o LookupDomainsIdentityProviderResultOutput) Schemas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []string { return v.Schemas }).(pulumi.StringArrayOutput)
}

// The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
func (o LookupDomainsIdentityProviderResultOutput) ServiceInstanceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.ServiceInstanceIdentifier }).(pulumi.StringOutput)
}

// Set to true to indicate whether to show IdP in login page or not.
func (o LookupDomainsIdentityProviderResultOutput) ShownOnLoginPage() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) bool { return v.ShownOnLoginPage }).(pulumi.BoolOutput)
}

// Signature hash algorithm.
func (o LookupDomainsIdentityProviderResultOutput) SignatureHashAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.SignatureHashAlgorithm }).(pulumi.StringOutput)
}

// Signing certificate
func (o LookupDomainsIdentityProviderResultOutput) SigningCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.SigningCertificate }).(pulumi.StringOutput)
}

// Succinct ID
func (o LookupDomainsIdentityProviderResultOutput) SuccinctId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.SuccinctId }).(pulumi.StringOutput)
}

// A list of tags on this resource.
func (o LookupDomainsIdentityProviderResultOutput) Tags() GetDomainsIdentityProviderTagArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderTag { return v.Tags }).(GetDomainsIdentityProviderTagArrayOutput)
}

// Oracle Cloud Infrastructure Tenant Id (ocid) in which the resource lives.
func (o LookupDomainsIdentityProviderResultOutput) TenancyOcid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.TenancyOcid }).(pulumi.StringOutput)
}

// The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
func (o LookupDomainsIdentityProviderResultOutput) TenantProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.TenantProviderId }).(pulumi.StringOutput)
}

// Identity Provider Type
func (o LookupDomainsIdentityProviderResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.Type }).(pulumi.StringOutput)
}

// Social Identity Provider Extension Schema
func (o LookupDomainsIdentityProviderResultOutput) UrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders() GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProvider {
		return v.UrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviders
	}).(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionsocialIdentityProviderArrayOutput)
}

// X509 Identity Provider Extension Schema
func (o LookupDomainsIdentityProviderResultOutput) Urnietfparamsscimschemasoracleidcsextensionx509identityProviders() GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArrayOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) []GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProvider {
		return v.Urnietfparamsscimschemasoracleidcsextensionx509identityProviders
	}).(GetDomainsIdentityProviderUrnietfparamsscimschemasoracleidcsextensionx509identityProviderArrayOutput)
}

// User mapping method.
func (o LookupDomainsIdentityProviderResultOutput) UserMappingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.UserMappingMethod }).(pulumi.StringOutput)
}

// This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.<br>You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the <b>Example of a Request Body</b> section of the Examples tab for the <a href='./op-admin-v1-identityproviders-post.html'>POST</a> and <a href='./op-admin-v1-identityproviders-id-put.html'>PUT</a> methods of the /IdentityProviders endpoint.
func (o LookupDomainsIdentityProviderResultOutput) UserMappingStoreAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainsIdentityProviderResult) string { return v.UserMappingStoreAttribute }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainsIdentityProviderResultOutput{})
}
