// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Groups in Oracle Cloud Infrastructure Identity service.
//
// Lists the groups in your tenancy. You must specify your tenancy's OCID as the value for
// the compartment ID (remember that the tenancy is simply the root compartment).
// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetGroups(ctx, &identity.GetGroupsArgs{
//				CompartmentId: tenancyOcid,
//				Name:          pulumi.StringRef(groupName),
//				State:         pulumi.StringRef(groupState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroups(ctx *pulumi.Context, args *GetGroupsArgs, opts ...pulumi.InvokeOption) (*GetGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupsResult
	err := ctx.Invoke("oci:Identity/getGroups:getGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroups.
type GetGroupsArgs struct {
	// The OCID of the compartment (remember that the tenancy is simply the root compartment).
	CompartmentId string            `pulumi:"compartmentId"`
	Filters       []GetGroupsFilter `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getGroups.
type GetGroupsResult struct {
	// The OCID of the tenancy containing the group.
	CompartmentId string            `pulumi:"compartmentId"`
	Filters       []GetGroupsFilter `pulumi:"filters"`
	// The list of groups.
	Groups []GetGroupsGroup `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name *string `pulumi:"name"`
	// The group's current state.
	State *string `pulumi:"state"`
}

func GetGroupsOutput(ctx *pulumi.Context, args GetGroupsOutputArgs, opts ...pulumi.InvokeOption) GetGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGroupsResultOutput, error) {
			args := v.(GetGroupsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetGroupsResult
			secret, err := ctx.InvokePackageRaw("oci:Identity/getGroups:getGroups", args, &rv, "", opts...)
			if err != nil {
				return GetGroupsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetGroupsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetGroupsResultOutput), nil
			}
			return output, nil
		}).(GetGroupsResultOutput)
}

// A collection of arguments for invoking getGroups.
type GetGroupsOutputArgs struct {
	// The OCID of the compartment (remember that the tenancy is simply the root compartment).
	CompartmentId pulumi.StringInput        `pulumi:"compartmentId"`
	Filters       GetGroupsFilterArrayInput `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getGroups.
type GetGroupsResultOutput struct{ *pulumi.OutputState }

func (GetGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsResult)(nil)).Elem()
}

func (o GetGroupsResultOutput) ToGetGroupsResultOutput() GetGroupsResultOutput {
	return o
}

func (o GetGroupsResultOutput) ToGetGroupsResultOutputWithContext(ctx context.Context) GetGroupsResultOutput {
	return o
}

// The OCID of the tenancy containing the group.
func (o GetGroupsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetGroupsResultOutput) Filters() GetGroupsFilterArrayOutput {
	return o.ApplyT(func(v GetGroupsResult) []GetGroupsFilter { return v.Filters }).(GetGroupsFilterArrayOutput)
}

// The list of groups.
func (o GetGroupsResultOutput) Groups() GetGroupsGroupArrayOutput {
	return o.ApplyT(func(v GetGroupsResult) []GetGroupsGroup { return v.Groups }).(GetGroupsGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
func (o GetGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The group's current state.
func (o GetGroupsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupsResultOutput{})
}
