// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Network Sources in Oracle Cloud Infrastructure Identity service.
//
// Lists the network sources in your tenancy. You must specify your tenancy's OCID as the value for
// the compartment ID (remember that the tenancy is simply the root compartment).
// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetNetworkSources(ctx, &identity.GetNetworkSourcesArgs{
//				CompartmentId: _var.Tenancy_ocid,
//				Name:          pulumi.StringRef(_var.Network_source_name),
//				State:         pulumi.StringRef(_var.Network_source_state),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNetworkSources(ctx *pulumi.Context, args *GetNetworkSourcesArgs, opts ...pulumi.InvokeOption) (*GetNetworkSourcesResult, error) {
	var rv GetNetworkSourcesResult
	err := ctx.Invoke("oci:Identity/getNetworkSources:getNetworkSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkSources.
type GetNetworkSourcesArgs struct {
	// The OCID of the compartment (remember that the tenancy is simply the root compartment).
	CompartmentId string                    `pulumi:"compartmentId"`
	Filters       []GetNetworkSourcesFilter `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getNetworkSources.
type GetNetworkSourcesResult struct {
	// The OCID of the tenancy containing the network source. The tenancy is the root compartment.
	CompartmentId string                    `pulumi:"compartmentId"`
	Filters       []GetNetworkSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name you assign to the network source during creation. The name must be unique across the tenancy and cannot be changed.
	Name *string `pulumi:"name"`
	// The list of network_sources.
	NetworkSources []GetNetworkSourcesNetworkSource `pulumi:"networkSources"`
	// The network source object's current state. After creating a network source, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
	State *string `pulumi:"state"`
}

func GetNetworkSourcesOutput(ctx *pulumi.Context, args GetNetworkSourcesOutputArgs, opts ...pulumi.InvokeOption) GetNetworkSourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNetworkSourcesResult, error) {
			args := v.(GetNetworkSourcesArgs)
			r, err := GetNetworkSources(ctx, &args, opts...)
			var s GetNetworkSourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNetworkSourcesResultOutput)
}

// A collection of arguments for invoking getNetworkSources.
type GetNetworkSourcesOutputArgs struct {
	// The OCID of the compartment (remember that the tenancy is simply the root compartment).
	CompartmentId pulumi.StringInput                `pulumi:"compartmentId"`
	Filters       GetNetworkSourcesFilterArrayInput `pulumi:"filters"`
	// A filter to only return resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetNetworkSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkSources.
type GetNetworkSourcesResultOutput struct{ *pulumi.OutputState }

func (GetNetworkSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkSourcesResult)(nil)).Elem()
}

func (o GetNetworkSourcesResultOutput) ToGetNetworkSourcesResultOutput() GetNetworkSourcesResultOutput {
	return o
}

func (o GetNetworkSourcesResultOutput) ToGetNetworkSourcesResultOutputWithContext(ctx context.Context) GetNetworkSourcesResultOutput {
	return o
}

// The OCID of the tenancy containing the network source. The tenancy is the root compartment.
func (o GetNetworkSourcesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetNetworkSourcesResultOutput) Filters() GetNetworkSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) []GetNetworkSourcesFilter { return v.Filters }).(GetNetworkSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNetworkSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name you assign to the network source during creation. The name must be unique across the tenancy and cannot be changed.
func (o GetNetworkSourcesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of network_sources.
func (o GetNetworkSourcesResultOutput) NetworkSources() GetNetworkSourcesNetworkSourceArrayOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) []GetNetworkSourcesNetworkSource { return v.NetworkSources }).(GetNetworkSourcesNetworkSourceArrayOutput)
}

// The network source object's current state. After creating a network source, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
func (o GetNetworkSourcesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkSourcesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetworkSourcesResultOutput{})
}
