// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Swift Passwords in Oracle Cloud Infrastructure Identity service.
//
// **Deprecated. Use [ListAuthTokens](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/ListAuthTokens) instead.**
//
// Lists the Swift passwords for the specified user. The returned object contains the password's OCID, but not
// the password itself. The actual password is returned only upon creation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetSwiftPasswords(ctx, &identity.GetSwiftPasswordsArgs{
//				UserId: oci_identity_user.Test_user.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSwiftPasswords(ctx *pulumi.Context, args *GetSwiftPasswordsArgs, opts ...pulumi.InvokeOption) (*GetSwiftPasswordsResult, error) {
	var rv GetSwiftPasswordsResult
	err := ctx.Invoke("oci:Identity/getSwiftPasswords:getSwiftPasswords", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSwiftPasswords.
type GetSwiftPasswordsArgs struct {
	Filters []GetSwiftPasswordsFilter `pulumi:"filters"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// A collection of values returned by getSwiftPasswords.
type GetSwiftPasswordsResult struct {
	Filters []GetSwiftPasswordsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of passwords.
	Passwords []GetSwiftPasswordsPassword `pulumi:"passwords"`
	// The OCID of the user the password belongs to.
	UserId string `pulumi:"userId"`
}

func GetSwiftPasswordsOutput(ctx *pulumi.Context, args GetSwiftPasswordsOutputArgs, opts ...pulumi.InvokeOption) GetSwiftPasswordsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSwiftPasswordsResult, error) {
			args := v.(GetSwiftPasswordsArgs)
			r, err := GetSwiftPasswords(ctx, &args, opts...)
			var s GetSwiftPasswordsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSwiftPasswordsResultOutput)
}

// A collection of arguments for invoking getSwiftPasswords.
type GetSwiftPasswordsOutputArgs struct {
	Filters GetSwiftPasswordsFilterArrayInput `pulumi:"filters"`
	// The OCID of the user.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetSwiftPasswordsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSwiftPasswordsArgs)(nil)).Elem()
}

// A collection of values returned by getSwiftPasswords.
type GetSwiftPasswordsResultOutput struct{ *pulumi.OutputState }

func (GetSwiftPasswordsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSwiftPasswordsResult)(nil)).Elem()
}

func (o GetSwiftPasswordsResultOutput) ToGetSwiftPasswordsResultOutput() GetSwiftPasswordsResultOutput {
	return o
}

func (o GetSwiftPasswordsResultOutput) ToGetSwiftPasswordsResultOutputWithContext(ctx context.Context) GetSwiftPasswordsResultOutput {
	return o
}

func (o GetSwiftPasswordsResultOutput) Filters() GetSwiftPasswordsFilterArrayOutput {
	return o.ApplyT(func(v GetSwiftPasswordsResult) []GetSwiftPasswordsFilter { return v.Filters }).(GetSwiftPasswordsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSwiftPasswordsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwiftPasswordsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of passwords.
func (o GetSwiftPasswordsResultOutput) Passwords() GetSwiftPasswordsPasswordArrayOutput {
	return o.ApplyT(func(v GetSwiftPasswordsResult) []GetSwiftPasswordsPassword { return v.Passwords }).(GetSwiftPasswordsPasswordArrayOutput)
}

// The OCID of the user the password belongs to.
func (o GetSwiftPasswordsResultOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSwiftPasswordsResult) string { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSwiftPasswordsResultOutput{})
}
