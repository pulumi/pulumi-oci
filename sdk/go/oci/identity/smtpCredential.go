// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Smtp Credential resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new SMTP credential for the specified user. An SMTP credential has an SMTP user name and an SMTP password.
// You must specify a *description* for the SMTP credential (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateSmtpCredential](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/SmtpCredentialSummary/UpdateSmtpCredential).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := identity.NewSmtpCredential(ctx, "test_smtp_credential", &identity.SmtpCredentialArgs{
//				Description: pulumi.Any(smtpCredentialDescription),
//				UserId:      pulumi.Any(testUser.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SmtpCredentials can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Identity/smtpCredential:SmtpCredential test_smtp_credential "users/{userId}/smtpCredentials/{smtpCredentialId}"
// ```
type SmtpCredential struct {
	pulumi.CustomResourceState

	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The SMTP password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The credential's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The SMTP user name.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSmtpCredential registers a new resource with the given unique name, arguments, and options.
func NewSmtpCredential(ctx *pulumi.Context,
	name string, args *SmtpCredentialArgs, opts ...pulumi.ResourceOption) (*SmtpCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmtpCredential
	err := ctx.RegisterResource("oci:Identity/smtpCredential:SmtpCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmtpCredential gets an existing SmtpCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmtpCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmtpCredentialState, opts ...pulumi.ResourceOption) (*SmtpCredential, error) {
	var resource SmtpCredential
	err := ctx.ReadResource("oci:Identity/smtpCredential:SmtpCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmtpCredential resources.
type smtpCredentialState struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The SMTP password.
	Password *string `pulumi:"password"`
	// The credential's current state.
	State *string `pulumi:"state"`
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId *string `pulumi:"userId"`
	// The SMTP user name.
	Username *string `pulumi:"username"`
}

type SmtpCredentialState struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The SMTP password.
	Password pulumi.StringPtrInput
	// The credential's current state.
	State pulumi.StringPtrInput
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringPtrInput
	// The SMTP user name.
	Username pulumi.StringPtrInput
}

func (SmtpCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*smtpCredentialState)(nil)).Elem()
}

type smtpCredentialArgs struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a SmtpCredential resource.
type SmtpCredentialArgs struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringInput
}

func (SmtpCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smtpCredentialArgs)(nil)).Elem()
}

type SmtpCredentialInput interface {
	pulumi.Input

	ToSmtpCredentialOutput() SmtpCredentialOutput
	ToSmtpCredentialOutputWithContext(ctx context.Context) SmtpCredentialOutput
}

func (*SmtpCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**SmtpCredential)(nil)).Elem()
}

func (i *SmtpCredential) ToSmtpCredentialOutput() SmtpCredentialOutput {
	return i.ToSmtpCredentialOutputWithContext(context.Background())
}

func (i *SmtpCredential) ToSmtpCredentialOutputWithContext(ctx context.Context) SmtpCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmtpCredentialOutput)
}

// SmtpCredentialArrayInput is an input type that accepts SmtpCredentialArray and SmtpCredentialArrayOutput values.
// You can construct a concrete instance of `SmtpCredentialArrayInput` via:
//
//	SmtpCredentialArray{ SmtpCredentialArgs{...} }
type SmtpCredentialArrayInput interface {
	pulumi.Input

	ToSmtpCredentialArrayOutput() SmtpCredentialArrayOutput
	ToSmtpCredentialArrayOutputWithContext(context.Context) SmtpCredentialArrayOutput
}

type SmtpCredentialArray []SmtpCredentialInput

func (SmtpCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmtpCredential)(nil)).Elem()
}

func (i SmtpCredentialArray) ToSmtpCredentialArrayOutput() SmtpCredentialArrayOutput {
	return i.ToSmtpCredentialArrayOutputWithContext(context.Background())
}

func (i SmtpCredentialArray) ToSmtpCredentialArrayOutputWithContext(ctx context.Context) SmtpCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmtpCredentialArrayOutput)
}

// SmtpCredentialMapInput is an input type that accepts SmtpCredentialMap and SmtpCredentialMapOutput values.
// You can construct a concrete instance of `SmtpCredentialMapInput` via:
//
//	SmtpCredentialMap{ "key": SmtpCredentialArgs{...} }
type SmtpCredentialMapInput interface {
	pulumi.Input

	ToSmtpCredentialMapOutput() SmtpCredentialMapOutput
	ToSmtpCredentialMapOutputWithContext(context.Context) SmtpCredentialMapOutput
}

type SmtpCredentialMap map[string]SmtpCredentialInput

func (SmtpCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmtpCredential)(nil)).Elem()
}

func (i SmtpCredentialMap) ToSmtpCredentialMapOutput() SmtpCredentialMapOutput {
	return i.ToSmtpCredentialMapOutputWithContext(context.Background())
}

func (i SmtpCredentialMap) ToSmtpCredentialMapOutputWithContext(ctx context.Context) SmtpCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmtpCredentialMapOutput)
}

type SmtpCredentialOutput struct{ *pulumi.OutputState }

func (SmtpCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmtpCredential)(nil)).Elem()
}

func (o SmtpCredentialOutput) ToSmtpCredentialOutput() SmtpCredentialOutput {
	return o
}

func (o SmtpCredentialOutput) ToSmtpCredentialOutputWithContext(ctx context.Context) SmtpCredentialOutput {
	return o
}

// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
func (o SmtpCredentialOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The detailed status of INACTIVE lifecycleState.
func (o SmtpCredentialOutput) InactiveState() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.InactiveState }).(pulumi.StringOutput)
}

// The SMTP password.
func (o SmtpCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The credential's current state.
func (o SmtpCredentialOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o SmtpCredentialOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
func (o SmtpCredentialOutput) TimeExpires() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.TimeExpires }).(pulumi.StringOutput)
}

// The OCID of the user.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SmtpCredentialOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The SMTP user name.
func (o SmtpCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SmtpCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type SmtpCredentialArrayOutput struct{ *pulumi.OutputState }

func (SmtpCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmtpCredential)(nil)).Elem()
}

func (o SmtpCredentialArrayOutput) ToSmtpCredentialArrayOutput() SmtpCredentialArrayOutput {
	return o
}

func (o SmtpCredentialArrayOutput) ToSmtpCredentialArrayOutputWithContext(ctx context.Context) SmtpCredentialArrayOutput {
	return o
}

func (o SmtpCredentialArrayOutput) Index(i pulumi.IntInput) SmtpCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmtpCredential {
		return vs[0].([]*SmtpCredential)[vs[1].(int)]
	}).(SmtpCredentialOutput)
}

type SmtpCredentialMapOutput struct{ *pulumi.OutputState }

func (SmtpCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmtpCredential)(nil)).Elem()
}

func (o SmtpCredentialMapOutput) ToSmtpCredentialMapOutput() SmtpCredentialMapOutput {
	return o
}

func (o SmtpCredentialMapOutput) ToSmtpCredentialMapOutputWithContext(ctx context.Context) SmtpCredentialMapOutput {
	return o
}

func (o SmtpCredentialMapOutput) MapIndex(k pulumi.StringInput) SmtpCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmtpCredential {
		return vs[0].(map[string]*SmtpCredential)[vs[1].(string)]
	}).(SmtpCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmtpCredentialInput)(nil)).Elem(), &SmtpCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmtpCredentialArrayInput)(nil)).Elem(), SmtpCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmtpCredentialMapInput)(nil)).Elem(), SmtpCredentialMap{})
	pulumi.RegisterOutputType(SmtpCredentialOutput{})
	pulumi.RegisterOutputType(SmtpCredentialArrayOutput{})
	pulumi.RegisterOutputType(SmtpCredentialMapOutput{})
}
