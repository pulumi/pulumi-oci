// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Swift Password resource in Oracle Cloud Infrastructure Identity service.
//
// **Deprecated. Use [CreateAuthToken](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/CreateAuthToken) instead.**
//
// Creates a new Swift password for the specified user. For information about what Swift passwords are for, see
// [Managing User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcredentials.htm).
//
// You must specify a *description* for the Swift password (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateSwiftPassword](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/SwiftPassword/UpdateSwiftPassword).
//
// Every user has permission to create a Swift password for *their own user ID*. An administrator in your organization
// does not need to write a policy to give users this ability. To compare, administrators who have permission to the
// tenancy can use this operation to create a Swift password for any user, including themselves.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewSwiftPassword(ctx, "testSwiftPassword", &Identity.SwiftPasswordArgs{
//				Description: pulumi.Any(_var.Swift_password_description),
//				UserId:      pulumi.Any(oci_identity_user.Test_user.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SwiftPasswords can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Identity/swiftPassword:SwiftPassword test_swift_password "users/{userId}/swiftPasswords/{swiftPasswordId}"
//
// ```
type SwiftPassword struct {
	pulumi.CustomResourceState

	// (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	ExpiresOn pulumi.StringOutput `pulumi:"expiresOn"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
	Password pulumi.StringOutput `pulumi:"password"`
	// The password's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewSwiftPassword registers a new resource with the given unique name, arguments, and options.
func NewSwiftPassword(ctx *pulumi.Context,
	name string, args *SwiftPasswordArgs, opts ...pulumi.ResourceOption) (*SwiftPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource SwiftPassword
	err := ctx.RegisterResource("oci:Identity/swiftPassword:SwiftPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwiftPassword gets an existing SwiftPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwiftPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwiftPasswordState, opts ...pulumi.ResourceOption) (*SwiftPassword, error) {
	var resource SwiftPassword
	err := ctx.ReadResource("oci:Identity/swiftPassword:SwiftPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwiftPassword resources.
type swiftPasswordState struct {
	// (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	ExpiresOn *string `pulumi:"expiresOn"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
	Password *string `pulumi:"password"`
	// The password's current state.
	State *string `pulumi:"state"`
	// Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type SwiftPasswordState struct {
	// (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	ExpiresOn pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
	Password pulumi.StringPtrInput
	// The password's current state.
	State pulumi.StringPtrInput
	// Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (SwiftPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*swiftPasswordState)(nil)).Elem()
}

type swiftPasswordArgs struct {
	// (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a SwiftPassword resource.
type SwiftPasswordArgs struct {
	// (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (SwiftPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*swiftPasswordArgs)(nil)).Elem()
}

type SwiftPasswordInput interface {
	pulumi.Input

	ToSwiftPasswordOutput() SwiftPasswordOutput
	ToSwiftPasswordOutputWithContext(ctx context.Context) SwiftPasswordOutput
}

func (*SwiftPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**SwiftPassword)(nil)).Elem()
}

func (i *SwiftPassword) ToSwiftPasswordOutput() SwiftPasswordOutput {
	return i.ToSwiftPasswordOutputWithContext(context.Background())
}

func (i *SwiftPassword) ToSwiftPasswordOutputWithContext(ctx context.Context) SwiftPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwiftPasswordOutput)
}

// SwiftPasswordArrayInput is an input type that accepts SwiftPasswordArray and SwiftPasswordArrayOutput values.
// You can construct a concrete instance of `SwiftPasswordArrayInput` via:
//
//	SwiftPasswordArray{ SwiftPasswordArgs{...} }
type SwiftPasswordArrayInput interface {
	pulumi.Input

	ToSwiftPasswordArrayOutput() SwiftPasswordArrayOutput
	ToSwiftPasswordArrayOutputWithContext(context.Context) SwiftPasswordArrayOutput
}

type SwiftPasswordArray []SwiftPasswordInput

func (SwiftPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwiftPassword)(nil)).Elem()
}

func (i SwiftPasswordArray) ToSwiftPasswordArrayOutput() SwiftPasswordArrayOutput {
	return i.ToSwiftPasswordArrayOutputWithContext(context.Background())
}

func (i SwiftPasswordArray) ToSwiftPasswordArrayOutputWithContext(ctx context.Context) SwiftPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwiftPasswordArrayOutput)
}

// SwiftPasswordMapInput is an input type that accepts SwiftPasswordMap and SwiftPasswordMapOutput values.
// You can construct a concrete instance of `SwiftPasswordMapInput` via:
//
//	SwiftPasswordMap{ "key": SwiftPasswordArgs{...} }
type SwiftPasswordMapInput interface {
	pulumi.Input

	ToSwiftPasswordMapOutput() SwiftPasswordMapOutput
	ToSwiftPasswordMapOutputWithContext(context.Context) SwiftPasswordMapOutput
}

type SwiftPasswordMap map[string]SwiftPasswordInput

func (SwiftPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwiftPassword)(nil)).Elem()
}

func (i SwiftPasswordMap) ToSwiftPasswordMapOutput() SwiftPasswordMapOutput {
	return i.ToSwiftPasswordMapOutputWithContext(context.Background())
}

func (i SwiftPasswordMap) ToSwiftPasswordMapOutputWithContext(ctx context.Context) SwiftPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwiftPasswordMapOutput)
}

type SwiftPasswordOutput struct{ *pulumi.OutputState }

func (SwiftPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwiftPassword)(nil)).Elem()
}

func (o SwiftPasswordOutput) ToSwiftPasswordOutput() SwiftPasswordOutput {
	return o
}

func (o SwiftPasswordOutput) ToSwiftPasswordOutputWithContext(ctx context.Context) SwiftPasswordOutput {
	return o
}

type SwiftPasswordArrayOutput struct{ *pulumi.OutputState }

func (SwiftPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwiftPassword)(nil)).Elem()
}

func (o SwiftPasswordArrayOutput) ToSwiftPasswordArrayOutput() SwiftPasswordArrayOutput {
	return o
}

func (o SwiftPasswordArrayOutput) ToSwiftPasswordArrayOutputWithContext(ctx context.Context) SwiftPasswordArrayOutput {
	return o
}

func (o SwiftPasswordArrayOutput) Index(i pulumi.IntInput) SwiftPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwiftPassword {
		return vs[0].([]*SwiftPassword)[vs[1].(int)]
	}).(SwiftPasswordOutput)
}

type SwiftPasswordMapOutput struct{ *pulumi.OutputState }

func (SwiftPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwiftPassword)(nil)).Elem()
}

func (o SwiftPasswordMapOutput) ToSwiftPasswordMapOutput() SwiftPasswordMapOutput {
	return o
}

func (o SwiftPasswordMapOutput) ToSwiftPasswordMapOutputWithContext(ctx context.Context) SwiftPasswordMapOutput {
	return o
}

func (o SwiftPasswordMapOutput) MapIndex(k pulumi.StringInput) SwiftPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwiftPassword {
		return vs[0].(map[string]*SwiftPassword)[vs[1].(string)]
	}).(SwiftPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwiftPasswordInput)(nil)).Elem(), &SwiftPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwiftPasswordArrayInput)(nil)).Elem(), SwiftPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwiftPasswordMapInput)(nil)).Elem(), SwiftPasswordMap{})
	pulumi.RegisterOutputType(SwiftPasswordOutput{})
	pulumi.RegisterOutputType(SwiftPasswordArrayOutput{})
	pulumi.RegisterOutputType(SwiftPasswordMapOutput{})
}
