// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ui Password resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new Console one-time password for the specified user. For more information about user
// credentials, see [User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/usercredentials.htm).
//
// Use this operation after creating a new user, or if a user forgets their password. The new one-time
// password is returned to you in the response, and you must securely deliver it to the user. They'll
// be prompted to change this password the next time they sign in to the Console. If they don't change
// it within 7 days, the password will expire and you'll need to create a new one-time password for the
// user.
//
// **Note:** The user's Console login is the unique name you specified when you created the user
// (see [CreateUser](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/User/CreateUser)).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Identity"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewUiPassword(ctx, "test_ui_password", &Identity.UiPasswordArgs{
//				UserId: pulumi.Any(testUser.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Import is not supported for this resource.
type UiPassword struct {
	pulumi.CustomResourceState

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringOutput `pulumi:"inactiveStatus"`
	// The user's password for the Console.
	Password pulumi.StringOutput `pulumi:"password"`
	// The password's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUiPassword registers a new resource with the given unique name, arguments, and options.
func NewUiPassword(ctx *pulumi.Context,
	name string, args *UiPasswordArgs, opts ...pulumi.ResourceOption) (*UiPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UiPassword
	err := ctx.RegisterResource("oci:Identity/uiPassword:UiPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUiPassword gets an existing UiPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUiPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UiPasswordState, opts ...pulumi.ResourceOption) (*UiPassword, error) {
	var resource UiPassword
	err := ctx.ReadResource("oci:Identity/uiPassword:UiPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UiPassword resources.
type uiPasswordState struct {
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus *string `pulumi:"inactiveStatus"`
	// The user's password for the Console.
	Password *string `pulumi:"password"`
	// The password's current state.
	State *string `pulumi:"state"`
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId *string `pulumi:"userId"`
}

type UiPasswordState struct {
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringPtrInput
	// The user's password for the Console.
	Password pulumi.StringPtrInput
	// The password's current state.
	State pulumi.StringPtrInput
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringPtrInput
}

func (UiPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*uiPasswordState)(nil)).Elem()
}

type uiPasswordArgs struct {
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UiPassword resource.
type UiPasswordArgs struct {
	// The OCID of the user.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	UserId pulumi.StringInput
}

func (UiPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uiPasswordArgs)(nil)).Elem()
}

type UiPasswordInput interface {
	pulumi.Input

	ToUiPasswordOutput() UiPasswordOutput
	ToUiPasswordOutputWithContext(ctx context.Context) UiPasswordOutput
}

func (*UiPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**UiPassword)(nil)).Elem()
}

func (i *UiPassword) ToUiPasswordOutput() UiPasswordOutput {
	return i.ToUiPasswordOutputWithContext(context.Background())
}

func (i *UiPassword) ToUiPasswordOutputWithContext(ctx context.Context) UiPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPasswordOutput)
}

// UiPasswordArrayInput is an input type that accepts UiPasswordArray and UiPasswordArrayOutput values.
// You can construct a concrete instance of `UiPasswordArrayInput` via:
//
//	UiPasswordArray{ UiPasswordArgs{...} }
type UiPasswordArrayInput interface {
	pulumi.Input

	ToUiPasswordArrayOutput() UiPasswordArrayOutput
	ToUiPasswordArrayOutputWithContext(context.Context) UiPasswordArrayOutput
}

type UiPasswordArray []UiPasswordInput

func (UiPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UiPassword)(nil)).Elem()
}

func (i UiPasswordArray) ToUiPasswordArrayOutput() UiPasswordArrayOutput {
	return i.ToUiPasswordArrayOutputWithContext(context.Background())
}

func (i UiPasswordArray) ToUiPasswordArrayOutputWithContext(ctx context.Context) UiPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPasswordArrayOutput)
}

// UiPasswordMapInput is an input type that accepts UiPasswordMap and UiPasswordMapOutput values.
// You can construct a concrete instance of `UiPasswordMapInput` via:
//
//	UiPasswordMap{ "key": UiPasswordArgs{...} }
type UiPasswordMapInput interface {
	pulumi.Input

	ToUiPasswordMapOutput() UiPasswordMapOutput
	ToUiPasswordMapOutputWithContext(context.Context) UiPasswordMapOutput
}

type UiPasswordMap map[string]UiPasswordInput

func (UiPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UiPassword)(nil)).Elem()
}

func (i UiPasswordMap) ToUiPasswordMapOutput() UiPasswordMapOutput {
	return i.ToUiPasswordMapOutputWithContext(context.Background())
}

func (i UiPasswordMap) ToUiPasswordMapOutputWithContext(ctx context.Context) UiPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UiPasswordMapOutput)
}

type UiPasswordOutput struct{ *pulumi.OutputState }

func (UiPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UiPassword)(nil)).Elem()
}

func (o UiPasswordOutput) ToUiPasswordOutput() UiPasswordOutput {
	return o
}

func (o UiPasswordOutput) ToUiPasswordOutputWithContext(ctx context.Context) UiPasswordOutput {
	return o
}

// The detailed status of INACTIVE lifecycleState.
func (o UiPasswordOutput) InactiveStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPassword) pulumi.StringOutput { return v.InactiveStatus }).(pulumi.StringOutput)
}

// The user's password for the Console.
func (o UiPasswordOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPassword) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The password's current state.
func (o UiPasswordOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPassword) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
func (o UiPasswordOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPassword) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The OCID of the user.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o UiPasswordOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UiPassword) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UiPasswordArrayOutput struct{ *pulumi.OutputState }

func (UiPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UiPassword)(nil)).Elem()
}

func (o UiPasswordArrayOutput) ToUiPasswordArrayOutput() UiPasswordArrayOutput {
	return o
}

func (o UiPasswordArrayOutput) ToUiPasswordArrayOutputWithContext(ctx context.Context) UiPasswordArrayOutput {
	return o
}

func (o UiPasswordArrayOutput) Index(i pulumi.IntInput) UiPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UiPassword {
		return vs[0].([]*UiPassword)[vs[1].(int)]
	}).(UiPasswordOutput)
}

type UiPasswordMapOutput struct{ *pulumi.OutputState }

func (UiPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UiPassword)(nil)).Elem()
}

func (o UiPasswordMapOutput) ToUiPasswordMapOutput() UiPasswordMapOutput {
	return o
}

func (o UiPasswordMapOutput) ToUiPasswordMapOutputWithContext(ctx context.Context) UiPasswordMapOutput {
	return o
}

func (o UiPasswordMapOutput) MapIndex(k pulumi.StringInput) UiPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UiPassword {
		return vs[0].(map[string]*UiPassword)[vs[1].(string)]
	}).(UiPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UiPasswordInput)(nil)).Elem(), &UiPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*UiPasswordArrayInput)(nil)).Elem(), UiPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UiPasswordMapInput)(nil)).Elem(), UiPasswordMap{})
	pulumi.RegisterOutputType(UiPasswordOutput{})
	pulumi.RegisterOutputType(UiPasswordArrayOutput{})
	pulumi.RegisterOutputType(UiPasswordMapOutput{})
}
