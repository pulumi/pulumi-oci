// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Fleet Crypto Analysis Result resource in Oracle Cloud Infrastructure Jms service.
//
// Retrieve metadata of the Crypto Event Analysis result.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Jms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Jms.GetFleetCryptoAnalysisResult(ctx, &jms.GetFleetCryptoAnalysisResultArgs{
//				CryptoAnalysisResultId: oci_apm_synthetics_result.Test_result.Id,
//				FleetId:                oci_jms_fleet.Test_fleet.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFleetCryptoAnalysisResult(ctx *pulumi.Context, args *GetFleetCryptoAnalysisResultArgs, opts ...pulumi.InvokeOption) (*GetFleetCryptoAnalysisResultResult, error) {
	var rv GetFleetCryptoAnalysisResultResult
	err := ctx.Invoke("oci:Jms/getFleetCryptoAnalysisResult:getFleetCryptoAnalysisResult", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFleetCryptoAnalysisResult.
type GetFleetCryptoAnalysisResultArgs struct {
	// The OCID of the analysis result.
	CryptoAnalysisResultId string `pulumi:"cryptoAnalysisResultId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId string `pulumi:"fleetId"`
}

// A collection of values returned by getFleetCryptoAnalysisResult.
type GetFleetCryptoAnalysisResultResult struct {
	// The result aggregation mode
	AggregationMode string `pulumi:"aggregationMode"`
	// The Object Storage bucket name of this analysis result.
	Bucket                 string `pulumi:"bucket"`
	CryptoAnalysisResultId string `pulumi:"cryptoAnalysisResultId"`
	// The Crypto Roadmap version used to perform the analysis.
	CryptoRoadmapVersion string `pulumi:"cryptoRoadmapVersion"`
	// Total number of findings with the analysis.
	FindingCount int `pulumi:"findingCount"`
	// The fleet OCID.
	FleetId string `pulumi:"fleetId"`
	// The hostname of the managed instance.
	HostName string `pulumi:"hostName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The managed instance OCID.
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The Object Storage namespace of this analysis result.
	Namespace string `pulumi:"namespace"`
	// Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the crypto roadmap version used the the analysis.
	NonCompliantFindingCount int `pulumi:"nonCompliantFindingCount"`
	// The Object Storage object name of this analysis result.
	Object string `pulumi:"object"`
	// Total number of summarized events. Summarized events are deduplicated events of interest.
	SummarizedEventCount int `pulumi:"summarizedEventCount"`
	// The time the result is compiled.
	TimeCreated string `pulumi:"timeCreated"`
	// Time of the first event in the analysis.
	TimeFirstEvent string `pulumi:"timeFirstEvent"`
	// Time of the last event in the analysis.
	TimeLastEvent string `pulumi:"timeLastEvent"`
	// Total number of events in the analysis.
	TotalEventCount int `pulumi:"totalEventCount"`
	// The OCID of the work request to start the analysis.
	WorkRequestId string `pulumi:"workRequestId"`
}

func GetFleetCryptoAnalysisResultOutput(ctx *pulumi.Context, args GetFleetCryptoAnalysisResultOutputArgs, opts ...pulumi.InvokeOption) GetFleetCryptoAnalysisResultResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFleetCryptoAnalysisResultResult, error) {
			args := v.(GetFleetCryptoAnalysisResultArgs)
			r, err := GetFleetCryptoAnalysisResult(ctx, &args, opts...)
			var s GetFleetCryptoAnalysisResultResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFleetCryptoAnalysisResultResultOutput)
}

// A collection of arguments for invoking getFleetCryptoAnalysisResult.
type GetFleetCryptoAnalysisResultOutputArgs struct {
	// The OCID of the analysis result.
	CryptoAnalysisResultId pulumi.StringInput `pulumi:"cryptoAnalysisResultId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId pulumi.StringInput `pulumi:"fleetId"`
}

func (GetFleetCryptoAnalysisResultOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultArgs)(nil)).Elem()
}

// A collection of values returned by getFleetCryptoAnalysisResult.
type GetFleetCryptoAnalysisResultResultOutput struct{ *pulumi.OutputState }

func (GetFleetCryptoAnalysisResultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultResult)(nil)).Elem()
}

func (o GetFleetCryptoAnalysisResultResultOutput) ToGetFleetCryptoAnalysisResultResultOutput() GetFleetCryptoAnalysisResultResultOutput {
	return o
}

func (o GetFleetCryptoAnalysisResultResultOutput) ToGetFleetCryptoAnalysisResultResultOutputWithContext(ctx context.Context) GetFleetCryptoAnalysisResultResultOutput {
	return o
}

// The result aggregation mode
func (o GetFleetCryptoAnalysisResultResultOutput) AggregationMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.AggregationMode }).(pulumi.StringOutput)
}

// The Object Storage bucket name of this analysis result.
func (o GetFleetCryptoAnalysisResultResultOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetFleetCryptoAnalysisResultResultOutput) CryptoAnalysisResultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.CryptoAnalysisResultId }).(pulumi.StringOutput)
}

// The Crypto Roadmap version used to perform the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) CryptoRoadmapVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.CryptoRoadmapVersion }).(pulumi.StringOutput)
}

// Total number of findings with the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) FindingCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) int { return v.FindingCount }).(pulumi.IntOutput)
}

// The fleet OCID.
func (o GetFleetCryptoAnalysisResultResultOutput) FleetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.FleetId }).(pulumi.StringOutput)
}

// The hostname of the managed instance.
func (o GetFleetCryptoAnalysisResultResultOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.HostName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFleetCryptoAnalysisResultResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.Id }).(pulumi.StringOutput)
}

// The managed instance OCID.
func (o GetFleetCryptoAnalysisResultResultOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The Object Storage namespace of this analysis result.
func (o GetFleetCryptoAnalysisResultResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the crypto roadmap version used the the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) NonCompliantFindingCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) int { return v.NonCompliantFindingCount }).(pulumi.IntOutput)
}

// The Object Storage object name of this analysis result.
func (o GetFleetCryptoAnalysisResultResultOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.Object }).(pulumi.StringOutput)
}

// Total number of summarized events. Summarized events are deduplicated events of interest.
func (o GetFleetCryptoAnalysisResultResultOutput) SummarizedEventCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) int { return v.SummarizedEventCount }).(pulumi.IntOutput)
}

// The time the result is compiled.
func (o GetFleetCryptoAnalysisResultResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Time of the first event in the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) TimeFirstEvent() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.TimeFirstEvent }).(pulumi.StringOutput)
}

// Time of the last event in the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) TimeLastEvent() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.TimeLastEvent }).(pulumi.StringOutput)
}

// Total number of events in the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) TotalEventCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) int { return v.TotalEventCount }).(pulumi.IntOutput)
}

// The OCID of the work request to start the analysis.
func (o GetFleetCryptoAnalysisResultResultOutput) WorkRequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultResult) string { return v.WorkRequestId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFleetCryptoAnalysisResultResultOutput{})
}
