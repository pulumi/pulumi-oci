// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Fleet Crypto Analysis Results in Oracle Cloud Infrastructure Jms service.
//
// List Crypto Event Analysis results.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Jms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Jms.GetFleetCryptoAnalysisResults(ctx, &jms.GetFleetCryptoAnalysisResultsArgs{
//				FleetId:           oci_jms_fleet.Test_fleet.Id,
//				AggregationMode:   pulumi.StringRef(_var.Fleet_crypto_analysis_result_aggregation_mode),
//				ManagedInstanceId: pulumi.StringRef(oci_osmanagement_managed_instance.Test_managed_instance.Id),
//				TimeEnd:           pulumi.StringRef(_var.Fleet_crypto_analysis_result_time_end),
//				TimeStart:         pulumi.StringRef(_var.Fleet_crypto_analysis_result_time_start),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFleetCryptoAnalysisResults(ctx *pulumi.Context, args *GetFleetCryptoAnalysisResultsArgs, opts ...pulumi.InvokeOption) (*GetFleetCryptoAnalysisResultsResult, error) {
	var rv GetFleetCryptoAnalysisResultsResult
	err := ctx.Invoke("oci:Jms/getFleetCryptoAnalysisResults:getFleetCryptoAnalysisResults", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsArgs struct {
	// The aggregation mode of the crypto event analysis result.
	AggregationMode *string                               `pulumi:"aggregationMode"`
	Filters         []GetFleetCryptoAnalysisResultsFilter `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId string `pulumi:"fleetId"`
	// The Fleet-unique identifier of the related managed instance.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeEnd *string `pulumi:"timeEnd"`
	// The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeStart *string `pulumi:"timeStart"`
}

// A collection of values returned by getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsResult struct {
	// The result aggregation mode
	AggregationMode *string `pulumi:"aggregationMode"`
	// The list of crypto_analysis_result_collection.
	CryptoAnalysisResultCollections []GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollection `pulumi:"cryptoAnalysisResultCollections"`
	Filters                         []GetFleetCryptoAnalysisResultsFilter                         `pulumi:"filters"`
	// The fleet OCID.
	FleetId string `pulumi:"fleetId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The managed instance OCID.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	TimeEnd           *string `pulumi:"timeEnd"`
	TimeStart         *string `pulumi:"timeStart"`
}

func GetFleetCryptoAnalysisResultsOutput(ctx *pulumi.Context, args GetFleetCryptoAnalysisResultsOutputArgs, opts ...pulumi.InvokeOption) GetFleetCryptoAnalysisResultsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFleetCryptoAnalysisResultsResult, error) {
			args := v.(GetFleetCryptoAnalysisResultsArgs)
			r, err := GetFleetCryptoAnalysisResults(ctx, &args, opts...)
			var s GetFleetCryptoAnalysisResultsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFleetCryptoAnalysisResultsResultOutput)
}

// A collection of arguments for invoking getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsOutputArgs struct {
	// The aggregation mode of the crypto event analysis result.
	AggregationMode pulumi.StringPtrInput                         `pulumi:"aggregationMode"`
	Filters         GetFleetCryptoAnalysisResultsFilterArrayInput `pulumi:"filters"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId pulumi.StringInput `pulumi:"fleetId"`
	// The Fleet-unique identifier of the related managed instance.
	ManagedInstanceId pulumi.StringPtrInput `pulumi:"managedInstanceId"`
	// The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeEnd pulumi.StringPtrInput `pulumi:"timeEnd"`
	// The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeStart pulumi.StringPtrInput `pulumi:"timeStart"`
}

func (GetFleetCryptoAnalysisResultsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultsArgs)(nil)).Elem()
}

// A collection of values returned by getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsResultOutput struct{ *pulumi.OutputState }

func (GetFleetCryptoAnalysisResultsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultsResult)(nil)).Elem()
}

func (o GetFleetCryptoAnalysisResultsResultOutput) ToGetFleetCryptoAnalysisResultsResultOutput() GetFleetCryptoAnalysisResultsResultOutput {
	return o
}

func (o GetFleetCryptoAnalysisResultsResultOutput) ToGetFleetCryptoAnalysisResultsResultOutputWithContext(ctx context.Context) GetFleetCryptoAnalysisResultsResultOutput {
	return o
}

// The result aggregation mode
func (o GetFleetCryptoAnalysisResultsResultOutput) AggregationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.AggregationMode }).(pulumi.StringPtrOutput)
}

// The list of crypto_analysis_result_collection.
func (o GetFleetCryptoAnalysisResultsResultOutput) CryptoAnalysisResultCollections() GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionArrayOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) []GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollection {
		return v.CryptoAnalysisResultCollections
	}).(GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionArrayOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) Filters() GetFleetCryptoAnalysisResultsFilterArrayOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) []GetFleetCryptoAnalysisResultsFilter { return v.Filters }).(GetFleetCryptoAnalysisResultsFilterArrayOutput)
}

// The fleet OCID.
func (o GetFleetCryptoAnalysisResultsResultOutput) FleetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) string { return v.FleetId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFleetCryptoAnalysisResultsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The managed instance OCID.
func (o GetFleetCryptoAnalysisResultsResultOutput) ManagedInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.ManagedInstanceId }).(pulumi.StringPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) TimeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.TimeEnd }).(pulumi.StringPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) TimeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.TimeStart }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFleetCryptoAnalysisResultsResultOutput{})
}
