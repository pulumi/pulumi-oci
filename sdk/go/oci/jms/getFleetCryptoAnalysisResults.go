// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Fleet Crypto Analysis Results in Oracle Cloud Infrastructure Jms service.
//
// Lists the results of a Crypto event analysis.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/jms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := jms.GetFleetCryptoAnalysisResults(ctx, &jms.GetFleetCryptoAnalysisResultsArgs{
//				FleetId:                             testFleet.Id,
//				AggregationMode:                     pulumi.StringRef(fleetCryptoAnalysisResultAggregationMode),
//				FindingCount:                        pulumi.IntRef(fleetCryptoAnalysisResultFindingCount),
//				FindingCountGreaterThan:             pulumi.IntRef(fleetCryptoAnalysisResultFindingCountGreaterThan),
//				HostName:                            pulumi.StringRef(fleetCryptoAnalysisResultHostName),
//				ManagedInstanceId:                   pulumi.StringRef(fleetCryptoAnalysisResultManagedInstanceOcid),
//				NonCompliantFindingCount:            pulumi.IntRef(fleetCryptoAnalysisResultNonCompliantFindingCount),
//				NonCompliantFindingCountGreaterThan: pulumi.IntRef(fleetCryptoAnalysisResultNonCompliantFindingCountGreaterThan),
//				TimeEnd:                             pulumi.StringRef(fleetCryptoAnalysisResultTimeEnd),
//				TimeStart:                           pulumi.StringRef(fleetCryptoAnalysisResultTimeStart),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFleetCryptoAnalysisResults(ctx *pulumi.Context, args *GetFleetCryptoAnalysisResultsArgs, opts ...pulumi.InvokeOption) (*GetFleetCryptoAnalysisResultsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFleetCryptoAnalysisResultsResult
	err := ctx.Invoke("oci:Jms/getFleetCryptoAnalysisResults:getFleetCryptoAnalysisResults", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsArgs struct {
	// The aggregation mode of the crypto event analysis result.
	AggregationMode *string                               `pulumi:"aggregationMode"`
	Filters         []GetFleetCryptoAnalysisResultsFilter `pulumi:"filters"`
	// FindingCount of CryptoAnalysis Report.
	FindingCount *int `pulumi:"findingCount"`
	// FindingCount of CryptoAnalysis Report.
	FindingCountGreaterThan *int `pulumi:"findingCountGreaterThan"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId string `pulumi:"fleetId"`
	// The host [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
	HostName *string `pulumi:"hostName"`
	// The Fleet-unique identifier of the related managed instance.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// Non Compliant Finding Count of CryptoAnalysis Report.
	NonCompliantFindingCount *int `pulumi:"nonCompliantFindingCount"`
	// Non Compliant Finding Count of CryptoAnalysis Report.
	NonCompliantFindingCountGreaterThan *int `pulumi:"nonCompliantFindingCountGreaterThan"`
	// The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeEnd *string `pulumi:"timeEnd"`
	// The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeStart *string `pulumi:"timeStart"`
}

// A collection of values returned by getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsResult struct {
	// The result aggregation mode
	AggregationMode *string `pulumi:"aggregationMode"`
	// The list of crypto_analysis_result_collection.
	CryptoAnalysisResultCollections []GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollection `pulumi:"cryptoAnalysisResultCollections"`
	Filters                         []GetFleetCryptoAnalysisResultsFilter                         `pulumi:"filters"`
	// Total number of findings with the analysis.
	FindingCount            *int `pulumi:"findingCount"`
	FindingCountGreaterThan *int `pulumi:"findingCountGreaterThan"`
	// The fleet OCID.
	FleetId string `pulumi:"fleetId"`
	// The hostname of the managed instance.
	HostName *string `pulumi:"hostName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The managed instance OCID.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
	NonCompliantFindingCount            *int    `pulumi:"nonCompliantFindingCount"`
	NonCompliantFindingCountGreaterThan *int    `pulumi:"nonCompliantFindingCountGreaterThan"`
	TimeEnd                             *string `pulumi:"timeEnd"`
	TimeStart                           *string `pulumi:"timeStart"`
}

func GetFleetCryptoAnalysisResultsOutput(ctx *pulumi.Context, args GetFleetCryptoAnalysisResultsOutputArgs, opts ...pulumi.InvokeOption) GetFleetCryptoAnalysisResultsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFleetCryptoAnalysisResultsResultOutput, error) {
			args := v.(GetFleetCryptoAnalysisResultsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Jms/getFleetCryptoAnalysisResults:getFleetCryptoAnalysisResults", args, GetFleetCryptoAnalysisResultsResultOutput{}, options).(GetFleetCryptoAnalysisResultsResultOutput), nil
		}).(GetFleetCryptoAnalysisResultsResultOutput)
}

// A collection of arguments for invoking getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsOutputArgs struct {
	// The aggregation mode of the crypto event analysis result.
	AggregationMode pulumi.StringPtrInput                         `pulumi:"aggregationMode"`
	Filters         GetFleetCryptoAnalysisResultsFilterArrayInput `pulumi:"filters"`
	// FindingCount of CryptoAnalysis Report.
	FindingCount pulumi.IntPtrInput `pulumi:"findingCount"`
	// FindingCount of CryptoAnalysis Report.
	FindingCountGreaterThan pulumi.IntPtrInput `pulumi:"findingCountGreaterThan"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId pulumi.StringInput `pulumi:"fleetId"`
	// The host [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed instance.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// The Fleet-unique identifier of the related managed instance.
	ManagedInstanceId pulumi.StringPtrInput `pulumi:"managedInstanceId"`
	// Non Compliant Finding Count of CryptoAnalysis Report.
	NonCompliantFindingCount pulumi.IntPtrInput `pulumi:"nonCompliantFindingCount"`
	// Non Compliant Finding Count of CryptoAnalysis Report.
	NonCompliantFindingCountGreaterThan pulumi.IntPtrInput `pulumi:"nonCompliantFindingCountGreaterThan"`
	// The end of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeEnd pulumi.StringPtrInput `pulumi:"timeEnd"`
	// The start of the time period during which resources are searched (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeStart pulumi.StringPtrInput `pulumi:"timeStart"`
}

func (GetFleetCryptoAnalysisResultsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultsArgs)(nil)).Elem()
}

// A collection of values returned by getFleetCryptoAnalysisResults.
type GetFleetCryptoAnalysisResultsResultOutput struct{ *pulumi.OutputState }

func (GetFleetCryptoAnalysisResultsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFleetCryptoAnalysisResultsResult)(nil)).Elem()
}

func (o GetFleetCryptoAnalysisResultsResultOutput) ToGetFleetCryptoAnalysisResultsResultOutput() GetFleetCryptoAnalysisResultsResultOutput {
	return o
}

func (o GetFleetCryptoAnalysisResultsResultOutput) ToGetFleetCryptoAnalysisResultsResultOutputWithContext(ctx context.Context) GetFleetCryptoAnalysisResultsResultOutput {
	return o
}

// The result aggregation mode
func (o GetFleetCryptoAnalysisResultsResultOutput) AggregationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.AggregationMode }).(pulumi.StringPtrOutput)
}

// The list of crypto_analysis_result_collection.
func (o GetFleetCryptoAnalysisResultsResultOutput) CryptoAnalysisResultCollections() GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionArrayOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) []GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollection {
		return v.CryptoAnalysisResultCollections
	}).(GetFleetCryptoAnalysisResultsCryptoAnalysisResultCollectionArrayOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) Filters() GetFleetCryptoAnalysisResultsFilterArrayOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) []GetFleetCryptoAnalysisResultsFilter { return v.Filters }).(GetFleetCryptoAnalysisResultsFilterArrayOutput)
}

// Total number of findings with the analysis.
func (o GetFleetCryptoAnalysisResultsResultOutput) FindingCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *int { return v.FindingCount }).(pulumi.IntPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) FindingCountGreaterThan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *int { return v.FindingCountGreaterThan }).(pulumi.IntPtrOutput)
}

// The fleet OCID.
func (o GetFleetCryptoAnalysisResultsResultOutput) FleetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) string { return v.FleetId }).(pulumi.StringOutput)
}

// The hostname of the managed instance.
func (o GetFleetCryptoAnalysisResultsResultOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFleetCryptoAnalysisResultsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The managed instance OCID.
func (o GetFleetCryptoAnalysisResultsResultOutput) ManagedInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.ManagedInstanceId }).(pulumi.StringPtrOutput)
}

// Total number of non-compliant findings with the analysis. A non-compliant finding means the application won't work properly with the changes introduced by the Crypto Roadmap version used by the analysis.
func (o GetFleetCryptoAnalysisResultsResultOutput) NonCompliantFindingCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *int { return v.NonCompliantFindingCount }).(pulumi.IntPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) NonCompliantFindingCountGreaterThan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *int { return v.NonCompliantFindingCountGreaterThan }).(pulumi.IntPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) TimeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.TimeEnd }).(pulumi.StringPtrOutput)
}

func (o GetFleetCryptoAnalysisResultsResultOutput) TimeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFleetCryptoAnalysisResultsResult) *string { return v.TimeStart }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFleetCryptoAnalysisResultsResultOutput{})
}
