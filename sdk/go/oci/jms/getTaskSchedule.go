// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Task Schedule resource in Oracle Cloud Infrastructure Jms service.
//
// Returns a task schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/jms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := jms.GetTaskSchedule(ctx, &jms.GetTaskScheduleArgs{
//				TaskScheduleId: testTaskScheduleOciJmsTaskSchedule.Id,
//				FleetId:        pulumi.StringRef(testFleet.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTaskSchedule(ctx *pulumi.Context, args *LookupTaskScheduleArgs, opts ...pulumi.InvokeOption) (*LookupTaskScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskScheduleResult
	err := ctx.Invoke("oci:Jms/getTaskSchedule:getTaskSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTaskSchedule.
type LookupTaskScheduleArgs struct {
	// The ID of the Fleet.
	FleetId *string `pulumi:"fleetId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
	TaskScheduleId string `pulumi:"taskScheduleId"`
}

// A collection of values returned by getTaskSchedule.
type LookupTaskScheduleResult struct {
	// Name of the task creator.
	CreatedBy string `pulumi:"createdBy"`
	// Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be 'DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10'. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be 'DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z'.
	ExecutionRecurrences string `pulumi:"executionRecurrences"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
	FleetId *string `pulumi:"fleetId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
	Id string `pulumi:"id"`
	// The name of the task schedule.
	Name string `pulumi:"name"`
	// All possible status of task schedule.
	State string `pulumi:"state"`
	// The minimum details of a task.
	TaskDetails    []GetTaskScheduleTaskDetail `pulumi:"taskDetails"`
	TaskScheduleId string                      `pulumi:"taskScheduleId"`
	// The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeLastRun string `pulumi:"timeLastRun"`
	// The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeLastUpdated string `pulumi:"timeLastUpdated"`
	// The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeNextRun string `pulumi:"timeNextRun"`
}

func LookupTaskScheduleOutput(ctx *pulumi.Context, args LookupTaskScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupTaskScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTaskScheduleResultOutput, error) {
			args := v.(LookupTaskScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Jms/getTaskSchedule:getTaskSchedule", args, LookupTaskScheduleResultOutput{}, options).(LookupTaskScheduleResultOutput), nil
		}).(LookupTaskScheduleResultOutput)
}

// A collection of arguments for invoking getTaskSchedule.
type LookupTaskScheduleOutputArgs struct {
	// The ID of the Fleet.
	FleetId pulumi.StringPtrInput `pulumi:"fleetId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
	TaskScheduleId pulumi.StringInput `pulumi:"taskScheduleId"`
}

func (LookupTaskScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getTaskSchedule.
type LookupTaskScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupTaskScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskScheduleResult)(nil)).Elem()
}

func (o LookupTaskScheduleResultOutput) ToLookupTaskScheduleResultOutput() LookupTaskScheduleResultOutput {
	return o
}

func (o LookupTaskScheduleResultOutput) ToLookupTaskScheduleResultOutputWithContext(ctx context.Context) LookupTaskScheduleResultOutput {
	return o
}

// Name of the task creator.
func (o LookupTaskScheduleResultOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Recurrence specification for the task schedule execution (formatted according to [RFC-5545](https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/)). To run daily for 10 occurrences starts on September 2, 2024 09:00 EDT, it should be 'DTSTART;TZID=America/New_York:20240902T090000 RRULE:FREQ=DAILY;COUNT=10'. To run every 3 hours from 9:00 AM to 5:00 PM on August 5, 2024 EDT, it should be 'DTSTART;TZID=America/New_York:20240805T090000 RRULE:FREQ=HOURLY;INTERVAL=3;UNTIL=20240805T170000Z'.
func (o LookupTaskScheduleResultOutput) ExecutionRecurrences() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.ExecutionRecurrences }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
func (o LookupTaskScheduleResultOutput) FleetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) *string { return v.FleetId }).(pulumi.StringPtrOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) to identify this task schedule.
func (o LookupTaskScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the task schedule.
func (o LookupTaskScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// All possible status of task schedule.
func (o LookupTaskScheduleResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.State }).(pulumi.StringOutput)
}

// The minimum details of a task.
func (o LookupTaskScheduleResultOutput) TaskDetails() GetTaskScheduleTaskDetailArrayOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) []GetTaskScheduleTaskDetail { return v.TaskDetails }).(GetTaskScheduleTaskDetailArrayOutput)
}

func (o LookupTaskScheduleResultOutput) TaskScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.TaskScheduleId }).(pulumi.StringOutput)
}

// The date and time the task schedule was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupTaskScheduleResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the task schedule ran last (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupTaskScheduleResultOutput) TimeLastRun() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.TimeLastRun }).(pulumi.StringOutput)
}

// The date and time the task schedule was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupTaskScheduleResultOutput) TimeLastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.TimeLastUpdated }).(pulumi.StringOutput)
}

// The date and time the task schedule will run next (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o LookupTaskScheduleResultOutput) TimeNextRun() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskScheduleResult) string { return v.TimeNextRun }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskScheduleResultOutput{})
}
