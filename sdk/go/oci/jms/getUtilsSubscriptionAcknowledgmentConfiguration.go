// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Subscription Acknowledgment Configuration resource in Oracle Cloud Infrastructure Jms Utils service.
//
// Returns the configuration for subscription acknowledgment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/jms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := jms.GetUtilsSubscriptionAcknowledgmentConfiguration(ctx, &jms.GetUtilsSubscriptionAcknowledgmentConfigurationArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUtilsSubscriptionAcknowledgmentConfiguration(ctx *pulumi.Context, args *GetUtilsSubscriptionAcknowledgmentConfigurationArgs, opts ...pulumi.InvokeOption) (*GetUtilsSubscriptionAcknowledgmentConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUtilsSubscriptionAcknowledgmentConfigurationResult
	err := ctx.Invoke("oci:Jms/getUtilsSubscriptionAcknowledgmentConfiguration:getUtilsSubscriptionAcknowledgmentConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUtilsSubscriptionAcknowledgmentConfiguration.
type GetUtilsSubscriptionAcknowledgmentConfigurationArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// Flag to determine whether the subscription was acknowledged or not.
	IsAcknowledged *bool `pulumi:"isAcknowledged"`
}

// A collection of values returned by getUtilsSubscriptionAcknowledgmentConfiguration.
type GetUtilsSubscriptionAcknowledgmentConfigurationResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the principal that ackwnoledged the subscription.
	AcknowledgedBy string `pulumi:"acknowledgedBy"`
	CompartmentId  string `pulumi:"compartmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Flag to determine whether the subscription was acknowledged or not.
	IsAcknowledged bool `pulumi:"isAcknowledged"`
	// The date and time the subscription was acknowledged (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
	TimeAcknowledged string `pulumi:"timeAcknowledged"`
}

func GetUtilsSubscriptionAcknowledgmentConfigurationOutput(ctx *pulumi.Context, args GetUtilsSubscriptionAcknowledgmentConfigurationOutputArgs, opts ...pulumi.InvokeOption) GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput, error) {
			args := v.(GetUtilsSubscriptionAcknowledgmentConfigurationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Jms/getUtilsSubscriptionAcknowledgmentConfiguration:getUtilsSubscriptionAcknowledgmentConfiguration", args, GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput{}, options).(GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput), nil
		}).(GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput)
}

// A collection of arguments for invoking getUtilsSubscriptionAcknowledgmentConfiguration.
type GetUtilsSubscriptionAcknowledgmentConfigurationOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// Flag to determine whether the subscription was acknowledged or not.
	IsAcknowledged pulumi.BoolPtrInput `pulumi:"isAcknowledged"`
}

func (GetUtilsSubscriptionAcknowledgmentConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUtilsSubscriptionAcknowledgmentConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getUtilsSubscriptionAcknowledgmentConfiguration.
type GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput struct{ *pulumi.OutputState }

func (GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUtilsSubscriptionAcknowledgmentConfigurationResult)(nil)).Elem()
}

func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) ToGetUtilsSubscriptionAcknowledgmentConfigurationResultOutput() GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput {
	return o
}

func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) ToGetUtilsSubscriptionAcknowledgmentConfigurationResultOutputWithContext(ctx context.Context) GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the principal that ackwnoledged the subscription.
func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) AcknowledgedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetUtilsSubscriptionAcknowledgmentConfigurationResult) string { return v.AcknowledgedBy }).(pulumi.StringOutput)
}

func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUtilsSubscriptionAcknowledgmentConfigurationResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUtilsSubscriptionAcknowledgmentConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Flag to determine whether the subscription was acknowledged or not.
func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) IsAcknowledged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUtilsSubscriptionAcknowledgmentConfigurationResult) bool { return v.IsAcknowledged }).(pulumi.BoolOutput)
}

// The date and time the subscription was acknowledged (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
func (o GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput) TimeAcknowledged() pulumi.StringOutput {
	return o.ApplyT(func(v GetUtilsSubscriptionAcknowledgmentConfigurationResult) string { return v.TimeAcknowledged }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUtilsSubscriptionAcknowledgmentConfigurationResultOutput{})
}
