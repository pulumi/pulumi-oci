// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ekms Private Endpoint resource in Oracle Cloud Infrastructure Kms service.
//
// # Create a new EKMS private endpoint used to connect to external key manager system
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewEkmsPrivateEndpoint(ctx, "test_ekms_private_endpoint", &kms.EkmsPrivateEndpointArgs{
//				CaBundle:             pulumi.Any(ekmsPrivateEndpointCaBundle),
//				CompartmentId:        pulumi.Any(compartmentId),
//				DisplayName:          pulumi.Any(ekmsPrivateEndpointDisplayName),
//				ExternalKeyManagerIp: pulumi.Any(ekmsPrivateEndpointExternalKeyManagerIp),
//				SubnetId:             pulumi.Any(testSubnet.Id),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				Port: pulumi.Any(ekmsPrivateEndpointPort),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EkmsPrivateEndpoints can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint test_ekms_private_endpoint "id"
// ```
type EkmsPrivateEndpoint struct {
	pulumi.CustomResourceState

	// CABundle to validate TLS certificate of the external key manager system in PEM format
	CaBundle pulumi.StringOutput `pulumi:"caBundle"`
	// Compartment identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) Display name of the EKMS private endpoint resource being created.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// External private IP to connect to from this EKMS private endpoint
	ExternalKeyManagerIp pulumi.StringOutput `pulumi:"externalKeyManagerIp"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The port of the external key manager system
	Port pulumi.IntOutput `pulumi:"port"`
	// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
	PrivateEndpointIp pulumi.StringOutput `pulumi:"privateEndpointIp"`
	// The current state of the EKMS private endpoint resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of subnet in which the EKMS private endpoint is to be created
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewEkmsPrivateEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEkmsPrivateEndpoint(ctx *pulumi.Context,
	name string, args *EkmsPrivateEndpointArgs, opts ...pulumi.ResourceOption) (*EkmsPrivateEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaBundle == nil {
		return nil, errors.New("invalid value for required argument 'CaBundle'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.ExternalKeyManagerIp == nil {
		return nil, errors.New("invalid value for required argument 'ExternalKeyManagerIp'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EkmsPrivateEndpoint
	err := ctx.RegisterResource("oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEkmsPrivateEndpoint gets an existing EkmsPrivateEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEkmsPrivateEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EkmsPrivateEndpointState, opts ...pulumi.ResourceOption) (*EkmsPrivateEndpoint, error) {
	var resource EkmsPrivateEndpoint
	err := ctx.ReadResource("oci:Kms/ekmsPrivateEndpoint:EkmsPrivateEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EkmsPrivateEndpoint resources.
type ekmsPrivateEndpointState struct {
	// CABundle to validate TLS certificate of the external key manager system in PEM format
	CaBundle *string `pulumi:"caBundle"`
	// Compartment identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Display name of the EKMS private endpoint resource being created.
	DisplayName *string `pulumi:"displayName"`
	// External private IP to connect to from this EKMS private endpoint
	ExternalKeyManagerIp *string `pulumi:"externalKeyManagerIp"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The port of the external key manager system
	Port *int `pulumi:"port"`
	// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
	PrivateEndpointIp *string `pulumi:"privateEndpointIp"`
	// The current state of the EKMS private endpoint resource.
	State *string `pulumi:"state"`
	// The OCID of subnet in which the EKMS private endpoint is to be created
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId *string `pulumi:"subnetId"`
	// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type EkmsPrivateEndpointState struct {
	// CABundle to validate TLS certificate of the external key manager system in PEM format
	CaBundle pulumi.StringPtrInput
	// Compartment identifier.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Display name of the EKMS private endpoint resource being created.
	DisplayName pulumi.StringPtrInput
	// External private IP to connect to from this EKMS private endpoint
	ExternalKeyManagerIp pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails pulumi.StringPtrInput
	// The port of the external key manager system
	Port pulumi.IntPtrInput
	// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
	PrivateEndpointIp pulumi.StringPtrInput
	// The current state of the EKMS private endpoint resource.
	State pulumi.StringPtrInput
	// The OCID of subnet in which the EKMS private endpoint is to be created
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringPtrInput
	// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (EkmsPrivateEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmsPrivateEndpointState)(nil)).Elem()
}

type ekmsPrivateEndpointArgs struct {
	// CABundle to validate TLS certificate of the external key manager system in PEM format
	CaBundle string `pulumi:"caBundle"`
	// Compartment identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) Display name of the EKMS private endpoint resource being created.
	DisplayName string `pulumi:"displayName"`
	// External private IP to connect to from this EKMS private endpoint
	ExternalKeyManagerIp string `pulumi:"externalKeyManagerIp"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The port of the external key manager system
	Port *int `pulumi:"port"`
	// The OCID of subnet in which the EKMS private endpoint is to be created
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a EkmsPrivateEndpoint resource.
type EkmsPrivateEndpointArgs struct {
	// CABundle to validate TLS certificate of the external key manager system in PEM format
	CaBundle pulumi.StringInput
	// Compartment identifier.
	CompartmentId pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) Display name of the EKMS private endpoint resource being created.
	DisplayName pulumi.StringInput
	// External private IP to connect to from this EKMS private endpoint
	ExternalKeyManagerIp pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// The port of the external key manager system
	Port pulumi.IntPtrInput
	// The OCID of subnet in which the EKMS private endpoint is to be created
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubnetId pulumi.StringInput
}

func (EkmsPrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ekmsPrivateEndpointArgs)(nil)).Elem()
}

type EkmsPrivateEndpointInput interface {
	pulumi.Input

	ToEkmsPrivateEndpointOutput() EkmsPrivateEndpointOutput
	ToEkmsPrivateEndpointOutputWithContext(ctx context.Context) EkmsPrivateEndpointOutput
}

func (*EkmsPrivateEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmsPrivateEndpoint)(nil)).Elem()
}

func (i *EkmsPrivateEndpoint) ToEkmsPrivateEndpointOutput() EkmsPrivateEndpointOutput {
	return i.ToEkmsPrivateEndpointOutputWithContext(context.Background())
}

func (i *EkmsPrivateEndpoint) ToEkmsPrivateEndpointOutputWithContext(ctx context.Context) EkmsPrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmsPrivateEndpointOutput)
}

// EkmsPrivateEndpointArrayInput is an input type that accepts EkmsPrivateEndpointArray and EkmsPrivateEndpointArrayOutput values.
// You can construct a concrete instance of `EkmsPrivateEndpointArrayInput` via:
//
//	EkmsPrivateEndpointArray{ EkmsPrivateEndpointArgs{...} }
type EkmsPrivateEndpointArrayInput interface {
	pulumi.Input

	ToEkmsPrivateEndpointArrayOutput() EkmsPrivateEndpointArrayOutput
	ToEkmsPrivateEndpointArrayOutputWithContext(context.Context) EkmsPrivateEndpointArrayOutput
}

type EkmsPrivateEndpointArray []EkmsPrivateEndpointInput

func (EkmsPrivateEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmsPrivateEndpoint)(nil)).Elem()
}

func (i EkmsPrivateEndpointArray) ToEkmsPrivateEndpointArrayOutput() EkmsPrivateEndpointArrayOutput {
	return i.ToEkmsPrivateEndpointArrayOutputWithContext(context.Background())
}

func (i EkmsPrivateEndpointArray) ToEkmsPrivateEndpointArrayOutputWithContext(ctx context.Context) EkmsPrivateEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmsPrivateEndpointArrayOutput)
}

// EkmsPrivateEndpointMapInput is an input type that accepts EkmsPrivateEndpointMap and EkmsPrivateEndpointMapOutput values.
// You can construct a concrete instance of `EkmsPrivateEndpointMapInput` via:
//
//	EkmsPrivateEndpointMap{ "key": EkmsPrivateEndpointArgs{...} }
type EkmsPrivateEndpointMapInput interface {
	pulumi.Input

	ToEkmsPrivateEndpointMapOutput() EkmsPrivateEndpointMapOutput
	ToEkmsPrivateEndpointMapOutputWithContext(context.Context) EkmsPrivateEndpointMapOutput
}

type EkmsPrivateEndpointMap map[string]EkmsPrivateEndpointInput

func (EkmsPrivateEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmsPrivateEndpoint)(nil)).Elem()
}

func (i EkmsPrivateEndpointMap) ToEkmsPrivateEndpointMapOutput() EkmsPrivateEndpointMapOutput {
	return i.ToEkmsPrivateEndpointMapOutputWithContext(context.Background())
}

func (i EkmsPrivateEndpointMap) ToEkmsPrivateEndpointMapOutputWithContext(ctx context.Context) EkmsPrivateEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EkmsPrivateEndpointMapOutput)
}

type EkmsPrivateEndpointOutput struct{ *pulumi.OutputState }

func (EkmsPrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EkmsPrivateEndpoint)(nil)).Elem()
}

func (o EkmsPrivateEndpointOutput) ToEkmsPrivateEndpointOutput() EkmsPrivateEndpointOutput {
	return o
}

func (o EkmsPrivateEndpointOutput) ToEkmsPrivateEndpointOutputWithContext(ctx context.Context) EkmsPrivateEndpointOutput {
	return o
}

// CABundle to validate TLS certificate of the external key manager system in PEM format
func (o EkmsPrivateEndpointOutput) CaBundle() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.CaBundle }).(pulumi.StringOutput)
}

// Compartment identifier.
func (o EkmsPrivateEndpointOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o EkmsPrivateEndpointOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) Display name of the EKMS private endpoint resource being created.
func (o EkmsPrivateEndpointOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// External private IP to connect to from this EKMS private endpoint
func (o EkmsPrivateEndpointOutput) ExternalKeyManagerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.ExternalKeyManagerIp }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o EkmsPrivateEndpointOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
func (o EkmsPrivateEndpointOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The port of the external key manager system
func (o EkmsPrivateEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The IP address in the customer's VCN for the EKMS private endpoint. This is taken from subnet
func (o EkmsPrivateEndpointOutput) PrivateEndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.PrivateEndpointIp }).(pulumi.StringOutput)
}

// The current state of the EKMS private endpoint resource.
func (o EkmsPrivateEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The OCID of subnet in which the EKMS private endpoint is to be created
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o EkmsPrivateEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The time the EKMS private endpoint was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
func (o EkmsPrivateEndpointOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the EKMS private endpoint was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
func (o EkmsPrivateEndpointOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *EkmsPrivateEndpoint) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type EkmsPrivateEndpointArrayOutput struct{ *pulumi.OutputState }

func (EkmsPrivateEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EkmsPrivateEndpoint)(nil)).Elem()
}

func (o EkmsPrivateEndpointArrayOutput) ToEkmsPrivateEndpointArrayOutput() EkmsPrivateEndpointArrayOutput {
	return o
}

func (o EkmsPrivateEndpointArrayOutput) ToEkmsPrivateEndpointArrayOutputWithContext(ctx context.Context) EkmsPrivateEndpointArrayOutput {
	return o
}

func (o EkmsPrivateEndpointArrayOutput) Index(i pulumi.IntInput) EkmsPrivateEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EkmsPrivateEndpoint {
		return vs[0].([]*EkmsPrivateEndpoint)[vs[1].(int)]
	}).(EkmsPrivateEndpointOutput)
}

type EkmsPrivateEndpointMapOutput struct{ *pulumi.OutputState }

func (EkmsPrivateEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EkmsPrivateEndpoint)(nil)).Elem()
}

func (o EkmsPrivateEndpointMapOutput) ToEkmsPrivateEndpointMapOutput() EkmsPrivateEndpointMapOutput {
	return o
}

func (o EkmsPrivateEndpointMapOutput) ToEkmsPrivateEndpointMapOutputWithContext(ctx context.Context) EkmsPrivateEndpointMapOutput {
	return o
}

func (o EkmsPrivateEndpointMapOutput) MapIndex(k pulumi.StringInput) EkmsPrivateEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EkmsPrivateEndpoint {
		return vs[0].(map[string]*EkmsPrivateEndpoint)[vs[1].(string)]
	}).(EkmsPrivateEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EkmsPrivateEndpointInput)(nil)).Elem(), &EkmsPrivateEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmsPrivateEndpointArrayInput)(nil)).Elem(), EkmsPrivateEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EkmsPrivateEndpointMapInput)(nil)).Elem(), EkmsPrivateEndpointMap{})
	pulumi.RegisterOutputType(EkmsPrivateEndpointOutput{})
	pulumi.RegisterOutputType(EkmsPrivateEndpointArrayOutput{})
	pulumi.RegisterOutputType(EkmsPrivateEndpointMapOutput{})
}
