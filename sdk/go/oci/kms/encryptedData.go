// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Encrypted Data resource in Oracle Cloud Infrastructure Kms service.
//
// Encrypts data using the given [EncryptDataDetails](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
// Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kms.NewEncryptedData(ctx, "testEncryptedData", &Kms.EncryptedDataArgs{
//				CryptoEndpoint:      pulumi.Any(_var.Encrypted_data_crypto_endpoint),
//				KeyId:               pulumi.Any(oci_kms_key.Test_key.Id),
//				Plaintext:           pulumi.Any(_var.Encrypted_data_plaintext),
//				AssociatedData:      pulumi.Any(_var.Encrypted_data_associated_data),
//				EncryptionAlgorithm: pulumi.Any(_var.Encrypted_data_encryption_algorithm),
//				KeyVersionId:        pulumi.Any(oci_kms_key_version.Test_key_version.Id),
//				LoggingContext:      pulumi.Any(_var.Encrypted_data_logging_context),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type EncryptedData struct {
	pulumi.CustomResourceState

	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapOutput `pulumi:"associatedData"`
	// The encrypted data.
	Ciphertext pulumi.StringOutput `pulumi:"ciphertext"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringOutput `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
	EncryptionAlgorithm pulumi.StringOutput `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringOutput `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapOutput `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Plaintext pulumi.StringOutput `pulumi:"plaintext"`
}

// NewEncryptedData registers a new resource with the given unique name, arguments, and options.
func NewEncryptedData(ctx *pulumi.Context,
	name string, args *EncryptedDataArgs, opts ...pulumi.ResourceOption) (*EncryptedData, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CryptoEndpoint'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.Plaintext == nil {
		return nil, errors.New("invalid value for required argument 'Plaintext'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EncryptedData
	err := ctx.RegisterResource("oci:Kms/encryptedData:EncryptedData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEncryptedData gets an existing EncryptedData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEncryptedData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EncryptedDataState, opts ...pulumi.ResourceOption) (*EncryptedData, error) {
	var resource EncryptedData
	err := ctx.ReadResource("oci:Kms/encryptedData:EncryptedData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EncryptedData resources.
type encryptedDataState struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The encrypted data.
	Ciphertext *string `pulumi:"ciphertext"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint *string `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId *string `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId *string `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext map[string]interface{} `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Plaintext *string `pulumi:"plaintext"`
}

type EncryptedDataState struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapInput
	// The encrypted data.
	Ciphertext pulumi.StringPtrInput
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringPtrInput
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
	EncryptionAlgorithm pulumi.StringPtrInput
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringPtrInput
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringPtrInput
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapInput
	// The plaintext data to encrypt.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Plaintext pulumi.StringPtrInput
}

func (EncryptedDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptedDataState)(nil)).Elem()
}

type encryptedDataArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint string `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId string `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId *string `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext map[string]interface{} `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Plaintext string `pulumi:"plaintext"`
}

// The set of arguments for constructing a EncryptedData resource.
type EncryptedDataArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapInput
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringInput
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
	EncryptionAlgorithm pulumi.StringPtrInput
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringInput
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringPtrInput
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapInput
	// The plaintext data to encrypt.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Plaintext pulumi.StringInput
}

func (EncryptedDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*encryptedDataArgs)(nil)).Elem()
}

type EncryptedDataInput interface {
	pulumi.Input

	ToEncryptedDataOutput() EncryptedDataOutput
	ToEncryptedDataOutputWithContext(ctx context.Context) EncryptedDataOutput
}

func (*EncryptedData) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptedData)(nil)).Elem()
}

func (i *EncryptedData) ToEncryptedDataOutput() EncryptedDataOutput {
	return i.ToEncryptedDataOutputWithContext(context.Background())
}

func (i *EncryptedData) ToEncryptedDataOutputWithContext(ctx context.Context) EncryptedDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptedDataOutput)
}

func (i *EncryptedData) ToOutput(ctx context.Context) pulumix.Output[*EncryptedData] {
	return pulumix.Output[*EncryptedData]{
		OutputState: i.ToEncryptedDataOutputWithContext(ctx).OutputState,
	}
}

// EncryptedDataArrayInput is an input type that accepts EncryptedDataArray and EncryptedDataArrayOutput values.
// You can construct a concrete instance of `EncryptedDataArrayInput` via:
//
//	EncryptedDataArray{ EncryptedDataArgs{...} }
type EncryptedDataArrayInput interface {
	pulumi.Input

	ToEncryptedDataArrayOutput() EncryptedDataArrayOutput
	ToEncryptedDataArrayOutputWithContext(context.Context) EncryptedDataArrayOutput
}

type EncryptedDataArray []EncryptedDataInput

func (EncryptedDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptedData)(nil)).Elem()
}

func (i EncryptedDataArray) ToEncryptedDataArrayOutput() EncryptedDataArrayOutput {
	return i.ToEncryptedDataArrayOutputWithContext(context.Background())
}

func (i EncryptedDataArray) ToEncryptedDataArrayOutputWithContext(ctx context.Context) EncryptedDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptedDataArrayOutput)
}

func (i EncryptedDataArray) ToOutput(ctx context.Context) pulumix.Output[[]*EncryptedData] {
	return pulumix.Output[[]*EncryptedData]{
		OutputState: i.ToEncryptedDataArrayOutputWithContext(ctx).OutputState,
	}
}

// EncryptedDataMapInput is an input type that accepts EncryptedDataMap and EncryptedDataMapOutput values.
// You can construct a concrete instance of `EncryptedDataMapInput` via:
//
//	EncryptedDataMap{ "key": EncryptedDataArgs{...} }
type EncryptedDataMapInput interface {
	pulumi.Input

	ToEncryptedDataMapOutput() EncryptedDataMapOutput
	ToEncryptedDataMapOutputWithContext(context.Context) EncryptedDataMapOutput
}

type EncryptedDataMap map[string]EncryptedDataInput

func (EncryptedDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptedData)(nil)).Elem()
}

func (i EncryptedDataMap) ToEncryptedDataMapOutput() EncryptedDataMapOutput {
	return i.ToEncryptedDataMapOutputWithContext(context.Background())
}

func (i EncryptedDataMap) ToEncryptedDataMapOutputWithContext(ctx context.Context) EncryptedDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptedDataMapOutput)
}

func (i EncryptedDataMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EncryptedData] {
	return pulumix.Output[map[string]*EncryptedData]{
		OutputState: i.ToEncryptedDataMapOutputWithContext(ctx).OutputState,
	}
}

type EncryptedDataOutput struct{ *pulumi.OutputState }

func (EncryptedDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptedData)(nil)).Elem()
}

func (o EncryptedDataOutput) ToEncryptedDataOutput() EncryptedDataOutput {
	return o
}

func (o EncryptedDataOutput) ToEncryptedDataOutputWithContext(ctx context.Context) EncryptedDataOutput {
	return o
}

func (o EncryptedDataOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptedData] {
	return pulumix.Output[*EncryptedData]{
		OutputState: o.OutputState,
	}
}

// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
func (o EncryptedDataOutput) AssociatedData() pulumi.MapOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.MapOutput { return v.AssociatedData }).(pulumi.MapOutput)
}

// The encrypted data.
func (o EncryptedDataOutput) Ciphertext() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.Ciphertext }).(pulumi.StringOutput)
}

// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
func (o EncryptedDataOutput) CryptoEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.CryptoEndpoint }).(pulumi.StringOutput)
}

// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP). `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash and uses OAEP.
func (o EncryptedDataOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// The OCID of the key to encrypt with.
func (o EncryptedDataOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The OCID of the key version used to encrypt the ciphertext.
func (o EncryptedDataOutput) KeyVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.KeyVersionId }).(pulumi.StringOutput)
}

// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
func (o EncryptedDataOutput) LoggingContext() pulumi.MapOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.MapOutput { return v.LoggingContext }).(pulumi.MapOutput)
}

// The plaintext data to encrypt.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o EncryptedDataOutput) Plaintext() pulumi.StringOutput {
	return o.ApplyT(func(v *EncryptedData) pulumi.StringOutput { return v.Plaintext }).(pulumi.StringOutput)
}

type EncryptedDataArrayOutput struct{ *pulumi.OutputState }

func (EncryptedDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EncryptedData)(nil)).Elem()
}

func (o EncryptedDataArrayOutput) ToEncryptedDataArrayOutput() EncryptedDataArrayOutput {
	return o
}

func (o EncryptedDataArrayOutput) ToEncryptedDataArrayOutputWithContext(ctx context.Context) EncryptedDataArrayOutput {
	return o
}

func (o EncryptedDataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EncryptedData] {
	return pulumix.Output[[]*EncryptedData]{
		OutputState: o.OutputState,
	}
}

func (o EncryptedDataArrayOutput) Index(i pulumi.IntInput) EncryptedDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EncryptedData {
		return vs[0].([]*EncryptedData)[vs[1].(int)]
	}).(EncryptedDataOutput)
}

type EncryptedDataMapOutput struct{ *pulumi.OutputState }

func (EncryptedDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EncryptedData)(nil)).Elem()
}

func (o EncryptedDataMapOutput) ToEncryptedDataMapOutput() EncryptedDataMapOutput {
	return o
}

func (o EncryptedDataMapOutput) ToEncryptedDataMapOutputWithContext(ctx context.Context) EncryptedDataMapOutput {
	return o
}

func (o EncryptedDataMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EncryptedData] {
	return pulumix.Output[map[string]*EncryptedData]{
		OutputState: o.OutputState,
	}
}

func (o EncryptedDataMapOutput) MapIndex(k pulumi.StringInput) EncryptedDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EncryptedData {
		return vs[0].(map[string]*EncryptedData)[vs[1].(string)]
	}).(EncryptedDataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptedDataInput)(nil)).Elem(), &EncryptedData{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptedDataArrayInput)(nil)).Elem(), EncryptedDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptedDataMapInput)(nil)).Elem(), EncryptedDataMap{})
	pulumi.RegisterOutputType(EncryptedDataOutput{})
	pulumi.RegisterOutputType(EncryptedDataArrayOutput{})
	pulumi.RegisterOutputType(EncryptedDataMapOutput{})
}
