// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Kms.EncryptedData` data source provides details about a specific EncryptedData
//
// Encrypts data using the given EncryptDataDetails resource.
// Plaintext included in the example request is a base64-encoded value
// of a UTF-8 string.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kms.GetEncryptedData(ctx, &kms.GetEncryptedDataArgs{
//				CryptoEndpoint: _var.Encrypted_data_crypto_endpoint,
//				KeyId:          oci_kms_key.Test_key.Id,
//				Plaintext:      _var.Encrypted_data_plaintext,
//				AssociatedData: _var.Encrypted_data_associated_data,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEncryptedData(ctx *pulumi.Context, args *LookupEncryptedDataArgs, opts ...pulumi.InvokeOption) (*LookupEncryptedDataResult, error) {
	var rv LookupEncryptedDataResult
	err := ctx.Invoke("oci:Kms/getEncryptedData:getEncryptedData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEncryptedData.
type LookupEncryptedDataArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint string `pulumi:"cryptoEndpoint"`
	// The OCID of the key to encrypt with.
	KeyId string `pulumi:"keyId"`
	// The plaintext data to encrypt.
	Plaintext string `pulumi:"plaintext"`
}

// A collection of values returned by getEncryptedData.
type LookupEncryptedDataResult struct {
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The encrypted data.
	Ciphertext     string `pulumi:"ciphertext"`
	CryptoEndpoint string `pulumi:"cryptoEndpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	KeyId     string `pulumi:"keyId"`
	Plaintext string `pulumi:"plaintext"`
}

func LookupEncryptedDataOutput(ctx *pulumi.Context, args LookupEncryptedDataOutputArgs, opts ...pulumi.InvokeOption) LookupEncryptedDataResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEncryptedDataResult, error) {
			args := v.(LookupEncryptedDataArgs)
			r, err := LookupEncryptedData(ctx, &args, opts...)
			var s LookupEncryptedDataResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEncryptedDataResultOutput)
}

// A collection of arguments for invoking getEncryptedData.
type LookupEncryptedDataOutputArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
	AssociatedData pulumi.MapInput `pulumi:"associatedData"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringInput `pulumi:"cryptoEndpoint"`
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The plaintext data to encrypt.
	Plaintext pulumi.StringInput `pulumi:"plaintext"`
}

func (LookupEncryptedDataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptedDataArgs)(nil)).Elem()
}

// A collection of values returned by getEncryptedData.
type LookupEncryptedDataResultOutput struct{ *pulumi.OutputState }

func (LookupEncryptedDataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptedDataResult)(nil)).Elem()
}

func (o LookupEncryptedDataResultOutput) ToLookupEncryptedDataResultOutput() LookupEncryptedDataResultOutput {
	return o
}

func (o LookupEncryptedDataResultOutput) ToLookupEncryptedDataResultOutputWithContext(ctx context.Context) LookupEncryptedDataResultOutput {
	return o
}

func (o LookupEncryptedDataResultOutput) AssociatedData() pulumi.MapOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) map[string]interface{} { return v.AssociatedData }).(pulumi.MapOutput)
}

// The encrypted data.
func (o LookupEncryptedDataResultOutput) Ciphertext() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) string { return v.Ciphertext }).(pulumi.StringOutput)
}

func (o LookupEncryptedDataResultOutput) CryptoEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) string { return v.CryptoEndpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEncryptedDataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupEncryptedDataResultOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) string { return v.KeyId }).(pulumi.StringOutput)
}

func (o LookupEncryptedDataResultOutput) Plaintext() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptedDataResult) string { return v.Plaintext }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEncryptedDataResultOutput{})
}
