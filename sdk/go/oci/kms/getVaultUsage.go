// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Vault Usage resource in Oracle Cloud Infrastructure Kms service.
//
// Gets the count of keys and key versions in the specified vault to calculate usage against service limits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Kms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kms.GetVaultUsage(ctx, &kms.GetVaultUsageArgs{
//				VaultId: testVault.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVaultUsage(ctx *pulumi.Context, args *GetVaultUsageArgs, opts ...pulumi.InvokeOption) (*GetVaultUsageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVaultUsageResult
	err := ctx.Invoke("oci:Kms/getVaultUsage:getVaultUsage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVaultUsage.
type GetVaultUsageArgs struct {
	// The OCID of the vault.
	VaultId string `pulumi:"vaultId"`
}

// A collection of values returned by getVaultUsage.
type GetVaultUsageResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The number of keys in this vault, across all compartments, excluding keys in a `DELETED` state.
	KeyCount int `pulumi:"keyCount"`
	// The number of key versions in this vault, across all compartments, excluding key versions in a `DELETED` state.
	KeyVersionCount int `pulumi:"keyVersionCount"`
	// The number of keys in this vault that persist on the server, across all compartments, excluding keys in a `DELETED` state.
	SoftwareKeyCount int `pulumi:"softwareKeyCount"`
	// The number of key versions in this vault that persist on the server, across all compartments, excluding key versions in a `DELETED` state.
	SoftwareKeyVersionCount int    `pulumi:"softwareKeyVersionCount"`
	VaultId                 string `pulumi:"vaultId"`
}

func GetVaultUsageOutput(ctx *pulumi.Context, args GetVaultUsageOutputArgs, opts ...pulumi.InvokeOption) GetVaultUsageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVaultUsageResult, error) {
			args := v.(GetVaultUsageArgs)
			r, err := GetVaultUsage(ctx, &args, opts...)
			var s GetVaultUsageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVaultUsageResultOutput)
}

// A collection of arguments for invoking getVaultUsage.
type GetVaultUsageOutputArgs struct {
	// The OCID of the vault.
	VaultId pulumi.StringInput `pulumi:"vaultId"`
}

func (GetVaultUsageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultUsageArgs)(nil)).Elem()
}

// A collection of values returned by getVaultUsage.
type GetVaultUsageResultOutput struct{ *pulumi.OutputState }

func (GetVaultUsageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultUsageResult)(nil)).Elem()
}

func (o GetVaultUsageResultOutput) ToGetVaultUsageResultOutput() GetVaultUsageResultOutput {
	return o
}

func (o GetVaultUsageResultOutput) ToGetVaultUsageResultOutputWithContext(ctx context.Context) GetVaultUsageResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVaultUsageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultUsageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of keys in this vault, across all compartments, excluding keys in a `DELETED` state.
func (o GetVaultUsageResultOutput) KeyCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVaultUsageResult) int { return v.KeyCount }).(pulumi.IntOutput)
}

// The number of key versions in this vault, across all compartments, excluding key versions in a `DELETED` state.
func (o GetVaultUsageResultOutput) KeyVersionCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVaultUsageResult) int { return v.KeyVersionCount }).(pulumi.IntOutput)
}

// The number of keys in this vault that persist on the server, across all compartments, excluding keys in a `DELETED` state.
func (o GetVaultUsageResultOutput) SoftwareKeyCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVaultUsageResult) int { return v.SoftwareKeyCount }).(pulumi.IntOutput)
}

// The number of key versions in this vault that persist on the server, across all compartments, excluding key versions in a `DELETED` state.
func (o GetVaultUsageResultOutput) SoftwareKeyVersionCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVaultUsageResult) int { return v.SoftwareKeyVersionCount }).(pulumi.IntOutput)
}

func (o GetVaultUsageResultOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultUsageResult) string { return v.VaultId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVaultUsageResultOutput{})
}
