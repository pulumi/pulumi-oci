// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific License Metric resource in Oracle Cloud Infrastructure License Manager service.
//
// Retrieves the license metrics for a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LicenseManager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LicenseManager.GetLicenseMetric(ctx, &licensemanager.GetLicenseMetricArgs{
//				CompartmentId:            _var.Compartment_id,
//				IsCompartmentIdInSubtree: pulumi.BoolRef(_var.License_metric_is_compartment_id_in_subtree),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLicenseMetric(ctx *pulumi.Context, args *GetLicenseMetricArgs, opts ...pulumi.InvokeOption) (*GetLicenseMetricResult, error) {
	var rv GetLicenseMetricResult
	err := ctx.Invoke("oci:LicenseManager/getLicenseMetric:getLicenseMetric", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLicenseMetric.
type GetLicenseMetricArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId string `pulumi:"compartmentId"`
	// Indicates if the given compartment is the root compartment.
	IsCompartmentIdInSubtree *bool `pulumi:"isCompartmentIdInSubtree"`
}

// A collection of values returned by getLicenseMetric.
type GetLicenseMetricResult struct {
	CompartmentId string `pulumi:"compartmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string `pulumi:"id"`
	IsCompartmentIdInSubtree *bool  `pulumi:"isCompartmentIdInSubtree"`
	// Total number of license records that will expire within 90 days in a particular compartment.
	LicenseRecordExpiringSoonCount int `pulumi:"licenseRecordExpiringSoonCount"`
	// Total number of BYOL instances in a particular compartment.
	TotalByolInstanceCount int `pulumi:"totalByolInstanceCount"`
	// Total number of License Included (LI) instances in a particular compartment.
	TotalLicenseIncludedInstanceCount int `pulumi:"totalLicenseIncludedInstanceCount"`
	// Total number of product licenses in a particular compartment.
	TotalProductLicenseCount int `pulumi:"totalProductLicenseCount"`
}

func GetLicenseMetricOutput(ctx *pulumi.Context, args GetLicenseMetricOutputArgs, opts ...pulumi.InvokeOption) GetLicenseMetricResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLicenseMetricResult, error) {
			args := v.(GetLicenseMetricArgs)
			r, err := GetLicenseMetric(ctx, &args, opts...)
			var s GetLicenseMetricResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLicenseMetricResultOutput)
}

// A collection of arguments for invoking getLicenseMetric.
type GetLicenseMetricOutputArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Indicates if the given compartment is the root compartment.
	IsCompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"isCompartmentIdInSubtree"`
}

func (GetLicenseMetricOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseMetricArgs)(nil)).Elem()
}

// A collection of values returned by getLicenseMetric.
type GetLicenseMetricResultOutput struct{ *pulumi.OutputState }

func (GetLicenseMetricResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseMetricResult)(nil)).Elem()
}

func (o GetLicenseMetricResultOutput) ToGetLicenseMetricResultOutput() GetLicenseMetricResultOutput {
	return o
}

func (o GetLicenseMetricResultOutput) ToGetLicenseMetricResultOutputWithContext(ctx context.Context) GetLicenseMetricResultOutput {
	return o
}

func (o GetLicenseMetricResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetLicenseMetricResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLicenseMetricResultOutput) IsCompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) *bool { return v.IsCompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// Total number of license records that will expire within 90 days in a particular compartment.
func (o GetLicenseMetricResultOutput) LicenseRecordExpiringSoonCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) int { return v.LicenseRecordExpiringSoonCount }).(pulumi.IntOutput)
}

// Total number of BYOL instances in a particular compartment.
func (o GetLicenseMetricResultOutput) TotalByolInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) int { return v.TotalByolInstanceCount }).(pulumi.IntOutput)
}

// Total number of License Included (LI) instances in a particular compartment.
func (o GetLicenseMetricResultOutput) TotalLicenseIncludedInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) int { return v.TotalLicenseIncludedInstanceCount }).(pulumi.IntOutput)
}

// Total number of product licenses in a particular compartment.
func (o GetLicenseMetricResultOutput) TotalProductLicenseCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicenseMetricResult) int { return v.TotalProductLicenseCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLicenseMetricResultOutput{})
}
