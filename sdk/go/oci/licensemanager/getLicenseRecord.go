// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific License Record resource in Oracle Cloud Infrastructure License Manager service.
//
// Retrieves license record details by the license record ID in a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LicenseManager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LicenseManager.GetLicenseRecord(ctx, &licensemanager.GetLicenseRecordArgs{
//				LicenseRecordId: oci_license_manager_license_record.Test_license_record.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLicenseRecord(ctx *pulumi.Context, args *LookupLicenseRecordArgs, opts ...pulumi.InvokeOption) (*LookupLicenseRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLicenseRecordResult
	err := ctx.Invoke("oci:LicenseManager/getLicenseRecord:getLicenseRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLicenseRecord.
type LookupLicenseRecordArgs struct {
	// Unique license record identifier.
	LicenseRecordId string `pulumi:"licenseRecordId"`
}

// A collection of values returned by getLicenseRecord.
type LookupLicenseRecordResult struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId *string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The license record display name. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate *string `pulumi:"expirationDate"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	Id *string `pulumi:"id"`
	// Specifies if the license record term is perpertual.
	IsPerpetual *bool `pulumi:"isPerpetual"`
	// Specifies if the license count is unlimited.
	IsUnlimited *bool `pulumi:"isUnlimited"`
	// The number of license units added by the user for the given license record. Default 1
	LicenseCount    *int   `pulumi:"licenseCount"`
	LicenseRecordId string `pulumi:"licenseRecordId"`
	// The product license unit.
	LicenseUnit *string `pulumi:"licenseUnit"`
	// The license record product ID.
	ProductId *string `pulumi:"productId"`
	// The product license name with which the license record is associated.
	ProductLicense *string `pulumi:"productLicense"`
	// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) with which the license record is associated.
	ProductLicenseId *string `pulumi:"productLicenseId"`
	// The current license record state.
	State *string `pulumi:"state"`
	// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	SupportEndDate *string `pulumi:"supportEndDate"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

func LookupLicenseRecordOutput(ctx *pulumi.Context, args LookupLicenseRecordOutputArgs, opts ...pulumi.InvokeOption) LookupLicenseRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLicenseRecordResult, error) {
			args := v.(LookupLicenseRecordArgs)
			r, err := LookupLicenseRecord(ctx, &args, opts...)
			var s LookupLicenseRecordResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLicenseRecordResultOutput)
}

// A collection of arguments for invoking getLicenseRecord.
type LookupLicenseRecordOutputArgs struct {
	// Unique license record identifier.
	LicenseRecordId pulumi.StringInput `pulumi:"licenseRecordId"`
}

func (LookupLicenseRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseRecordArgs)(nil)).Elem()
}

// A collection of values returned by getLicenseRecord.
type LookupLicenseRecordResultOutput struct{ *pulumi.OutputState }

func (LookupLicenseRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseRecordResult)(nil)).Elem()
}

func (o LookupLicenseRecordResultOutput) ToLookupLicenseRecordResultOutput() LookupLicenseRecordResultOutput {
	return o
}

func (o LookupLicenseRecordResultOutput) ToLookupLicenseRecordResultOutputWithContext(ctx context.Context) LookupLicenseRecordResultOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
func (o LookupLicenseRecordResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupLicenseRecordResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The license record display name. Avoid entering confidential information.
func (o LookupLicenseRecordResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
func (o LookupLicenseRecordResultOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupLicenseRecordResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o LookupLicenseRecordResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies if the license record term is perpertual.
func (o LookupLicenseRecordResultOutput) IsPerpetual() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *bool { return v.IsPerpetual }).(pulumi.BoolPtrOutput)
}

// Specifies if the license count is unlimited.
func (o LookupLicenseRecordResultOutput) IsUnlimited() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *bool { return v.IsUnlimited }).(pulumi.BoolPtrOutput)
}

// The number of license units added by the user for the given license record. Default 1
func (o LookupLicenseRecordResultOutput) LicenseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *int { return v.LicenseCount }).(pulumi.IntPtrOutput)
}

func (o LookupLicenseRecordResultOutput) LicenseRecordId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) string { return v.LicenseRecordId }).(pulumi.StringOutput)
}

// The product license unit.
func (o LookupLicenseRecordResultOutput) LicenseUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.LicenseUnit }).(pulumi.StringPtrOutput)
}

// The license record product ID.
func (o LookupLicenseRecordResultOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.ProductId }).(pulumi.StringPtrOutput)
}

// The product license name with which the license record is associated.
func (o LookupLicenseRecordResultOutput) ProductLicense() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.ProductLicense }).(pulumi.StringPtrOutput)
}

// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) with which the license record is associated.
func (o LookupLicenseRecordResultOutput) ProductLicenseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.ProductLicenseId }).(pulumi.StringPtrOutput)
}

// The current license record state.
func (o LookupLicenseRecordResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
func (o LookupLicenseRecordResultOutput) SupportEndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.SupportEndDate }).(pulumi.StringPtrOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupLicenseRecordResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LookupLicenseRecordResultOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LookupLicenseRecordResultOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLicenseRecordResult) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLicenseRecordResultOutput{})
}
