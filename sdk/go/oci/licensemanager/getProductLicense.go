// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Product License resource in Oracle Cloud Infrastructure License Manager service.
//
// Retrieves product license details by product license ID in a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LicenseManager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LicenseManager.GetProductLicense(ctx, &licensemanager.GetProductLicenseArgs{
//				ProductLicenseId: oci_license_manager_product_license.Test_product_license.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProductLicense(ctx *pulumi.Context, args *LookupProductLicenseArgs, opts ...pulumi.InvokeOption) (*LookupProductLicenseResult, error) {
	var rv LookupProductLicenseResult
	err := ctx.Invoke("oci:LicenseManager/getProductLicense:getProductLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProductLicense.
type LookupProductLicenseArgs struct {
	// Unique product license identifier.
	ProductLicenseId string `pulumi:"productLicenseId"`
}

// A collection of values returned by getProductLicense.
type LookupProductLicenseResult struct {
	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount int `pulumi:"activeLicenseRecordCount"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// License record name
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The image ID associated with the product license.
	Id string `pulumi:"id"`
	// The images associated with the product license.
	Images []GetProductLicenseImage `pulumi:"images"`
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed bool `pulumi:"isOverSubscribed"`
	// Specifies if the license unit count is unlimited.
	IsUnlimited bool `pulumi:"isUnlimited"`
	// Specifies whether the vendor is Oracle or a third party.
	IsVendorOracle bool `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit      string `pulumi:"licenseUnit"`
	ProductLicenseId string `pulumi:"productLicenseId"`
	// The current product license state.
	State string `pulumi:"state"`
	// The current product license status.
	Status string `pulumi:"status"`
	// Status description for the current product license status.
	StatusDescription string `pulumi:"statusDescription"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount int `pulumi:"totalActiveLicenseUnitCount"`
	// The number of license records associated with the product license.
	TotalLicenseRecordCount int `pulumi:"totalLicenseRecordCount"`
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed float64 `pulumi:"totalLicenseUnitsConsumed"`
	// The vendor of the ProductLicense
	VendorName string `pulumi:"vendorName"`
}

func LookupProductLicenseOutput(ctx *pulumi.Context, args LookupProductLicenseOutputArgs, opts ...pulumi.InvokeOption) LookupProductLicenseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProductLicenseResult, error) {
			args := v.(LookupProductLicenseArgs)
			r, err := LookupProductLicense(ctx, &args, opts...)
			var s LookupProductLicenseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProductLicenseResultOutput)
}

// A collection of arguments for invoking getProductLicense.
type LookupProductLicenseOutputArgs struct {
	// Unique product license identifier.
	ProductLicenseId pulumi.StringInput `pulumi:"productLicenseId"`
}

func (LookupProductLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProductLicenseArgs)(nil)).Elem()
}

// A collection of values returned by getProductLicense.
type LookupProductLicenseResultOutput struct{ *pulumi.OutputState }

func (LookupProductLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProductLicenseResult)(nil)).Elem()
}

func (o LookupProductLicenseResultOutput) ToLookupProductLicenseResultOutput() LookupProductLicenseResultOutput {
	return o
}

func (o LookupProductLicenseResultOutput) ToLookupProductLicenseResultOutputWithContext(ctx context.Context) LookupProductLicenseResultOutput {
	return o
}

// The number of active license records associated with the product license.
func (o LookupProductLicenseResultOutput) ActiveLicenseRecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) int { return v.ActiveLicenseRecordCount }).(pulumi.IntOutput)
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
func (o LookupProductLicenseResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupProductLicenseResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// License record name
func (o LookupProductLicenseResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupProductLicenseResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The image ID associated with the product license.
func (o LookupProductLicenseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The images associated with the product license.
func (o LookupProductLicenseResultOutput) Images() GetProductLicenseImageArrayOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) []GetProductLicenseImage { return v.Images }).(GetProductLicenseImageArrayOutput)
}

// Specifies whether or not the product license is oversubscribed.
func (o LookupProductLicenseResultOutput) IsOverSubscribed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) bool { return v.IsOverSubscribed }).(pulumi.BoolOutput)
}

// Specifies if the license unit count is unlimited.
func (o LookupProductLicenseResultOutput) IsUnlimited() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) bool { return v.IsUnlimited }).(pulumi.BoolOutput)
}

// Specifies whether the vendor is Oracle or a third party.
func (o LookupProductLicenseResultOutput) IsVendorOracle() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) bool { return v.IsVendorOracle }).(pulumi.BoolOutput)
}

// The product license unit.
func (o LookupProductLicenseResultOutput) LicenseUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.LicenseUnit }).(pulumi.StringOutput)
}

func (o LookupProductLicenseResultOutput) ProductLicenseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.ProductLicenseId }).(pulumi.StringOutput)
}

// The current product license state.
func (o LookupProductLicenseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.State }).(pulumi.StringOutput)
}

// The current product license status.
func (o LookupProductLicenseResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.Status }).(pulumi.StringOutput)
}

// Status description for the current product license status.
func (o LookupProductLicenseResultOutput) StatusDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.StatusDescription }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupProductLicenseResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LookupProductLicenseResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LookupProductLicenseResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
func (o LookupProductLicenseResultOutput) TotalActiveLicenseUnitCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) int { return v.TotalActiveLicenseUnitCount }).(pulumi.IntOutput)
}

// The number of license records associated with the product license.
func (o LookupProductLicenseResultOutput) TotalLicenseRecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) int { return v.TotalLicenseRecordCount }).(pulumi.IntOutput)
}

// The number of license units consumed. Updated after each allocation run.
func (o LookupProductLicenseResultOutput) TotalLicenseUnitsConsumed() pulumi.Float64Output {
	return o.ApplyT(func(v LookupProductLicenseResult) float64 { return v.TotalLicenseUnitsConsumed }).(pulumi.Float64Output)
}

// The vendor of the ProductLicense
func (o LookupProductLicenseResultOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProductLicenseResult) string { return v.VendorName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProductLicenseResultOutput{})
}
