// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Product Licenses in Oracle Cloud Infrastructure License Manager service.
//
// Retrieves all the product licenses from a given compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.GetProductLicenses(ctx, &licensemanager.GetProductLicensesArgs{
//				CompartmentId:            compartmentId,
//				IsCompartmentIdInSubtree: pulumi.BoolRef(productLicenseIsCompartmentIdInSubtree),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProductLicenses(ctx *pulumi.Context, args *GetProductLicensesArgs, opts ...pulumi.InvokeOption) (*GetProductLicensesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProductLicensesResult
	err := ctx.Invoke("oci:LicenseManager/getProductLicenses:getProductLicenses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProductLicenses.
type GetProductLicensesArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId string                     `pulumi:"compartmentId"`
	Filters       []GetProductLicensesFilter `pulumi:"filters"`
	// Indicates if the given compartment is the root compartment.
	IsCompartmentIdInSubtree *bool `pulumi:"isCompartmentIdInSubtree"`
}

// A collection of values returned by getProductLicenses.
type GetProductLicensesResult struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
	CompartmentId string                     `pulumi:"compartmentId"`
	Filters       []GetProductLicensesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string `pulumi:"id"`
	IsCompartmentIdInSubtree *bool  `pulumi:"isCompartmentIdInSubtree"`
	// The list of product_license_collection.
	ProductLicenseCollections []GetProductLicensesProductLicenseCollection `pulumi:"productLicenseCollections"`
}

func GetProductLicensesOutput(ctx *pulumi.Context, args GetProductLicensesOutputArgs, opts ...pulumi.InvokeOption) GetProductLicensesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProductLicensesResultOutput, error) {
			args := v.(GetProductLicensesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:LicenseManager/getProductLicenses:getProductLicenses", args, GetProductLicensesResultOutput{}, options).(GetProductLicensesResultOutput), nil
		}).(GetProductLicensesResultOutput)
}

// A collection of arguments for invoking getProductLicenses.
type GetProductLicensesOutputArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId pulumi.StringInput                 `pulumi:"compartmentId"`
	Filters       GetProductLicensesFilterArrayInput `pulumi:"filters"`
	// Indicates if the given compartment is the root compartment.
	IsCompartmentIdInSubtree pulumi.BoolPtrInput `pulumi:"isCompartmentIdInSubtree"`
}

func (GetProductLicensesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesArgs)(nil)).Elem()
}

// A collection of values returned by getProductLicenses.
type GetProductLicensesResultOutput struct{ *pulumi.OutputState }

func (GetProductLicensesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesResult)(nil)).Elem()
}

func (o GetProductLicensesResultOutput) ToGetProductLicensesResultOutput() GetProductLicensesResultOutput {
	return o
}

func (o GetProductLicensesResultOutput) ToGetProductLicensesResultOutputWithContext(ctx context.Context) GetProductLicensesResultOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the product license is created.
func (o GetProductLicensesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetProductLicensesResultOutput) Filters() GetProductLicensesFilterArrayOutput {
	return o.ApplyT(func(v GetProductLicensesResult) []GetProductLicensesFilter { return v.Filters }).(GetProductLicensesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProductLicensesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetProductLicensesResultOutput) IsCompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProductLicensesResult) *bool { return v.IsCompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

// The list of product_license_collection.
func (o GetProductLicensesResultOutput) ProductLicenseCollections() GetProductLicensesProductLicenseCollectionArrayOutput {
	return o.ApplyT(func(v GetProductLicensesResult) []GetProductLicensesProductLicenseCollection {
		return v.ProductLicenseCollections
	}).(GetProductLicensesProductLicenseCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProductLicensesResultOutput{})
}
