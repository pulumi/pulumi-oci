// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the License Record resource in Oracle Cloud Infrastructure License Manager service.
//
// Creates a new license record for the given product license ID.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/licensemanager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := licensemanager.NewLicenseRecord(ctx, "test_license_record", &licensemanager.LicenseRecordArgs{
//				DisplayName:      pulumi.Any(licenseRecordDisplayName),
//				IsPerpetual:      pulumi.Any(licenseRecordIsPerpetual),
//				IsUnlimited:      pulumi.Any(licenseRecordIsUnlimited),
//				ProductLicenseId: pulumi.Any(testProductLicense.Id),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				ExpirationDate: pulumi.Any(licenseRecordExpirationDate),
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				LicenseCount:   pulumi.Any(licenseRecordLicenseCount),
//				ProductId:      pulumi.Any(testProduct.Id),
//				SupportEndDate: pulumi.Any(licenseRecordSupportEndDate),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// LicenseRecords can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:LicenseManager/licenseRecord:LicenseRecord test_license_record "id"
// ```
type LicenseRecord struct {
	pulumi.CustomResourceState

	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) License record name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) Specifies if the license record term is perpertual.
	IsPerpetual pulumi.BoolOutput `pulumi:"isPerpetual"`
	// (Updatable) Specifies if the license count is unlimited.
	IsUnlimited pulumi.BoolOutput `pulumi:"isUnlimited"`
	// (Updatable) The number of license units added by a user in a license record. Default 1
	LicenseCount pulumi.IntOutput `pulumi:"licenseCount"`
	// The product license unit.
	LicenseUnit pulumi.StringOutput `pulumi:"licenseUnit"`
	// (Updatable) The license record product ID.
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// The product license name with which the license record is associated.
	ProductLicense pulumi.StringOutput `pulumi:"productLicense"`
	// Unique product license identifier.
	ProductLicenseId pulumi.StringOutput `pulumi:"productLicenseId"`
	// The current license record state.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SupportEndDate pulumi.StringOutput `pulumi:"supportEndDate"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewLicenseRecord registers a new resource with the given unique name, arguments, and options.
func NewLicenseRecord(ctx *pulumi.Context,
	name string, args *LicenseRecordArgs, opts ...pulumi.ResourceOption) (*LicenseRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IsPerpetual == nil {
		return nil, errors.New("invalid value for required argument 'IsPerpetual'")
	}
	if args.IsUnlimited == nil {
		return nil, errors.New("invalid value for required argument 'IsUnlimited'")
	}
	if args.ProductLicenseId == nil {
		return nil, errors.New("invalid value for required argument 'ProductLicenseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicenseRecord
	err := ctx.RegisterResource("oci:LicenseManager/licenseRecord:LicenseRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseRecord gets an existing LicenseRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseRecordState, opts ...pulumi.ResourceOption) (*LicenseRecord, error) {
	var resource LicenseRecord
	err := ctx.ReadResource("oci:LicenseManager/licenseRecord:LicenseRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseRecord resources.
type licenseRecordState struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) License record name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate *string `pulumi:"expirationDate"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Specifies if the license record term is perpertual.
	IsPerpetual *bool `pulumi:"isPerpetual"`
	// (Updatable) Specifies if the license count is unlimited.
	IsUnlimited *bool `pulumi:"isUnlimited"`
	// (Updatable) The number of license units added by a user in a license record. Default 1
	LicenseCount *int `pulumi:"licenseCount"`
	// The product license unit.
	LicenseUnit *string `pulumi:"licenseUnit"`
	// (Updatable) The license record product ID.
	ProductId *string `pulumi:"productId"`
	// The product license name with which the license record is associated.
	ProductLicense *string `pulumi:"productLicense"`
	// Unique product license identifier.
	ProductLicenseId *string `pulumi:"productLicenseId"`
	// The current license record state.
	State *string `pulumi:"state"`
	// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SupportEndDate *string `pulumi:"supportEndDate"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type LicenseRecordState struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) License record name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Specifies if the license record term is perpertual.
	IsPerpetual pulumi.BoolPtrInput
	// (Updatable) Specifies if the license count is unlimited.
	IsUnlimited pulumi.BoolPtrInput
	// (Updatable) The number of license units added by a user in a license record. Default 1
	LicenseCount pulumi.IntPtrInput
	// The product license unit.
	LicenseUnit pulumi.StringPtrInput
	// (Updatable) The license record product ID.
	ProductId pulumi.StringPtrInput
	// The product license name with which the license record is associated.
	ProductLicense pulumi.StringPtrInput
	// Unique product license identifier.
	ProductLicenseId pulumi.StringPtrInput
	// The current license record state.
	State pulumi.StringPtrInput
	// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SupportEndDate pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (LicenseRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseRecordState)(nil)).Elem()
}

type licenseRecordArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) License record name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate *string `pulumi:"expirationDate"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Specifies if the license record term is perpertual.
	IsPerpetual bool `pulumi:"isPerpetual"`
	// (Updatable) Specifies if the license count is unlimited.
	IsUnlimited bool `pulumi:"isUnlimited"`
	// (Updatable) The number of license units added by a user in a license record. Default 1
	LicenseCount *int `pulumi:"licenseCount"`
	// (Updatable) The license record product ID.
	ProductId *string `pulumi:"productId"`
	// Unique product license identifier.
	ProductLicenseId string `pulumi:"productLicenseId"`
	// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SupportEndDate *string `pulumi:"supportEndDate"`
}

// The set of arguments for constructing a LicenseRecord resource.
type LicenseRecordArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) License record name.
	DisplayName pulumi.StringInput
	// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Specifies if the license record term is perpertual.
	IsPerpetual pulumi.BoolInput
	// (Updatable) Specifies if the license count is unlimited.
	IsUnlimited pulumi.BoolInput
	// (Updatable) The number of license units added by a user in a license record. Default 1
	LicenseCount pulumi.IntPtrInput
	// (Updatable) The license record product ID.
	ProductId pulumi.StringPtrInput
	// Unique product license identifier.
	ProductLicenseId pulumi.StringInput
	// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SupportEndDate pulumi.StringPtrInput
}

func (LicenseRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseRecordArgs)(nil)).Elem()
}

type LicenseRecordInput interface {
	pulumi.Input

	ToLicenseRecordOutput() LicenseRecordOutput
	ToLicenseRecordOutputWithContext(ctx context.Context) LicenseRecordOutput
}

func (*LicenseRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseRecord)(nil)).Elem()
}

func (i *LicenseRecord) ToLicenseRecordOutput() LicenseRecordOutput {
	return i.ToLicenseRecordOutputWithContext(context.Background())
}

func (i *LicenseRecord) ToLicenseRecordOutputWithContext(ctx context.Context) LicenseRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseRecordOutput)
}

// LicenseRecordArrayInput is an input type that accepts LicenseRecordArray and LicenseRecordArrayOutput values.
// You can construct a concrete instance of `LicenseRecordArrayInput` via:
//
//	LicenseRecordArray{ LicenseRecordArgs{...} }
type LicenseRecordArrayInput interface {
	pulumi.Input

	ToLicenseRecordArrayOutput() LicenseRecordArrayOutput
	ToLicenseRecordArrayOutputWithContext(context.Context) LicenseRecordArrayOutput
}

type LicenseRecordArray []LicenseRecordInput

func (LicenseRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseRecord)(nil)).Elem()
}

func (i LicenseRecordArray) ToLicenseRecordArrayOutput() LicenseRecordArrayOutput {
	return i.ToLicenseRecordArrayOutputWithContext(context.Background())
}

func (i LicenseRecordArray) ToLicenseRecordArrayOutputWithContext(ctx context.Context) LicenseRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseRecordArrayOutput)
}

// LicenseRecordMapInput is an input type that accepts LicenseRecordMap and LicenseRecordMapOutput values.
// You can construct a concrete instance of `LicenseRecordMapInput` via:
//
//	LicenseRecordMap{ "key": LicenseRecordArgs{...} }
type LicenseRecordMapInput interface {
	pulumi.Input

	ToLicenseRecordMapOutput() LicenseRecordMapOutput
	ToLicenseRecordMapOutputWithContext(context.Context) LicenseRecordMapOutput
}

type LicenseRecordMap map[string]LicenseRecordInput

func (LicenseRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseRecord)(nil)).Elem()
}

func (i LicenseRecordMap) ToLicenseRecordMapOutput() LicenseRecordMapOutput {
	return i.ToLicenseRecordMapOutputWithContext(context.Background())
}

func (i LicenseRecordMap) ToLicenseRecordMapOutputWithContext(ctx context.Context) LicenseRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseRecordMapOutput)
}

type LicenseRecordOutput struct{ *pulumi.OutputState }

func (LicenseRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseRecord)(nil)).Elem()
}

func (o LicenseRecordOutput) ToLicenseRecordOutput() LicenseRecordOutput {
	return o
}

func (o LicenseRecordOutput) ToLicenseRecordOutputWithContext(ctx context.Context) LicenseRecordOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
func (o LicenseRecordOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LicenseRecordOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) License record name.
func (o LicenseRecordOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
func (o LicenseRecordOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LicenseRecordOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) Specifies if the license record term is perpertual.
func (o LicenseRecordOutput) IsPerpetual() pulumi.BoolOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.BoolOutput { return v.IsPerpetual }).(pulumi.BoolOutput)
}

// (Updatable) Specifies if the license count is unlimited.
func (o LicenseRecordOutput) IsUnlimited() pulumi.BoolOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.BoolOutput { return v.IsUnlimited }).(pulumi.BoolOutput)
}

// (Updatable) The number of license units added by a user in a license record. Default 1
func (o LicenseRecordOutput) LicenseCount() pulumi.IntOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.IntOutput { return v.LicenseCount }).(pulumi.IntOutput)
}

// The product license unit.
func (o LicenseRecordOutput) LicenseUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.LicenseUnit }).(pulumi.StringOutput)
}

// (Updatable) The license record product ID.
func (o LicenseRecordOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// The product license name with which the license record is associated.
func (o LicenseRecordOutput) ProductLicense() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.ProductLicense }).(pulumi.StringOutput)
}

// Unique product license identifier.
func (o LicenseRecordOutput) ProductLicenseId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.ProductLicenseId }).(pulumi.StringOutput)
}

// The current license record state.
func (o LicenseRecordOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o LicenseRecordOutput) SupportEndDate() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.SupportEndDate }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LicenseRecordOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LicenseRecordOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o LicenseRecordOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseRecord) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type LicenseRecordArrayOutput struct{ *pulumi.OutputState }

func (LicenseRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseRecord)(nil)).Elem()
}

func (o LicenseRecordArrayOutput) ToLicenseRecordArrayOutput() LicenseRecordArrayOutput {
	return o
}

func (o LicenseRecordArrayOutput) ToLicenseRecordArrayOutputWithContext(ctx context.Context) LicenseRecordArrayOutput {
	return o
}

func (o LicenseRecordArrayOutput) Index(i pulumi.IntInput) LicenseRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseRecord {
		return vs[0].([]*LicenseRecord)[vs[1].(int)]
	}).(LicenseRecordOutput)
}

type LicenseRecordMapOutput struct{ *pulumi.OutputState }

func (LicenseRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseRecord)(nil)).Elem()
}

func (o LicenseRecordMapOutput) ToLicenseRecordMapOutput() LicenseRecordMapOutput {
	return o
}

func (o LicenseRecordMapOutput) ToLicenseRecordMapOutputWithContext(ctx context.Context) LicenseRecordMapOutput {
	return o
}

func (o LicenseRecordMapOutput) MapIndex(k pulumi.StringInput) LicenseRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseRecord {
		return vs[0].(map[string]*LicenseRecord)[vs[1].(string)]
	}).(LicenseRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseRecordInput)(nil)).Elem(), &LicenseRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseRecordArrayInput)(nil)).Elem(), LicenseRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseRecordMapInput)(nil)).Elem(), LicenseRecordMap{})
	pulumi.RegisterOutputType(LicenseRecordOutput{})
	pulumi.RegisterOutputType(LicenseRecordArrayOutput{})
	pulumi.RegisterOutputType(LicenseRecordMapOutput{})
}
