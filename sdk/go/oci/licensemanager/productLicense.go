// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Product License resource in Oracle Cloud Infrastructure License Manager service.
//
// Creates a new product license.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LicenseManager"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LicenseManager.NewProductLicense(ctx, "testProductLicense", &LicenseManager.ProductLicenseArgs{
//				CompartmentId:  pulumi.Any(_var.Compartment_id),
//				DisplayName:    pulumi.Any(_var.Product_license_display_name),
//				IsVendorOracle: pulumi.Any(_var.Product_license_is_vendor_oracle),
//				LicenseUnit:    pulumi.Any(_var.Product_license_license_unit),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				Images: licensemanager.ProductLicenseImageArray{
//					&licensemanager.ProductLicenseImageArgs{
//						ListingId:      pulumi.Any(oci_marketplace_listing.Test_listing.Id),
//						PackageVersion: pulumi.Any(_var.Product_license_images_package_version),
//					},
//				},
//				VendorName: pulumi.Any(_var.Product_license_vendor_name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ProductLicenses can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:LicenseManager/productLicense:ProductLicense test_product_license "id"
//
// ```
type ProductLicense struct {
	pulumi.CustomResourceState

	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount pulumi.IntOutput `pulumi:"activeLicenseRecordCount"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// Name of the product license.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) The image details associated with the product license.
	Images ProductLicenseImageArrayOutput `pulumi:"images"`
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed pulumi.BoolOutput `pulumi:"isOverSubscribed"`
	// Specifies if the license unit count is unlimited.
	IsUnlimited pulumi.BoolOutput `pulumi:"isUnlimited"`
	// Specifies if the product license vendor is Oracle or a third party.
	IsVendorOracle pulumi.BoolOutput `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit pulumi.StringOutput `pulumi:"licenseUnit"`
	// The current product license state.
	State pulumi.StringOutput `pulumi:"state"`
	// The current product license status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Status description for the current product license status.
	StatusDescription pulumi.StringOutput `pulumi:"statusDescription"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount pulumi.IntOutput `pulumi:"totalActiveLicenseUnitCount"`
	// The number of license records associated with the product license.
	TotalLicenseRecordCount pulumi.IntOutput `pulumi:"totalLicenseRecordCount"`
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed pulumi.Float64Output `pulumi:"totalLicenseUnitsConsumed"`
	// The product license vendor name, for example: Microsoft, RHEL, and so on.
	VendorName pulumi.StringOutput `pulumi:"vendorName"`
}

// NewProductLicense registers a new resource with the given unique name, arguments, and options.
func NewProductLicense(ctx *pulumi.Context,
	name string, args *ProductLicenseArgs, opts ...pulumi.ResourceOption) (*ProductLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IsVendorOracle == nil {
		return nil, errors.New("invalid value for required argument 'IsVendorOracle'")
	}
	if args.LicenseUnit == nil {
		return nil, errors.New("invalid value for required argument 'LicenseUnit'")
	}
	var resource ProductLicense
	err := ctx.RegisterResource("oci:LicenseManager/productLicense:ProductLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductLicense gets an existing ProductLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductLicenseState, opts ...pulumi.ResourceOption) (*ProductLicense, error) {
	var resource ProductLicense
	err := ctx.ReadResource("oci:LicenseManager/productLicense:ProductLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductLicense resources.
type productLicenseState struct {
	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount *int `pulumi:"activeLicenseRecordCount"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Name of the product license.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The image details associated with the product license.
	Images []ProductLicenseImage `pulumi:"images"`
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed *bool `pulumi:"isOverSubscribed"`
	// Specifies if the license unit count is unlimited.
	IsUnlimited *bool `pulumi:"isUnlimited"`
	// Specifies if the product license vendor is Oracle or a third party.
	IsVendorOracle *bool `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit *string `pulumi:"licenseUnit"`
	// The current product license state.
	State *string `pulumi:"state"`
	// The current product license status.
	Status *string `pulumi:"status"`
	// Status description for the current product license status.
	StatusDescription *string `pulumi:"statusDescription"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount *int `pulumi:"totalActiveLicenseUnitCount"`
	// The number of license records associated with the product license.
	TotalLicenseRecordCount *int `pulumi:"totalLicenseRecordCount"`
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed *float64 `pulumi:"totalLicenseUnitsConsumed"`
	// The product license vendor name, for example: Microsoft, RHEL, and so on.
	VendorName *string `pulumi:"vendorName"`
}

type ProductLicenseState struct {
	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount pulumi.IntPtrInput
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// Name of the product license.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The image details associated with the product license.
	Images ProductLicenseImageArrayInput
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed pulumi.BoolPtrInput
	// Specifies if the license unit count is unlimited.
	IsUnlimited pulumi.BoolPtrInput
	// Specifies if the product license vendor is Oracle or a third party.
	IsVendorOracle pulumi.BoolPtrInput
	// The product license unit.
	LicenseUnit pulumi.StringPtrInput
	// The current product license state.
	State pulumi.StringPtrInput
	// The current product license status.
	Status pulumi.StringPtrInput
	// Status description for the current product license status.
	StatusDescription pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount pulumi.IntPtrInput
	// The number of license records associated with the product license.
	TotalLicenseRecordCount pulumi.IntPtrInput
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed pulumi.Float64PtrInput
	// The product license vendor name, for example: Microsoft, RHEL, and so on.
	VendorName pulumi.StringPtrInput
}

func (ProductLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*productLicenseState)(nil)).Elem()
}

type productLicenseArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Name of the product license.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The image details associated with the product license.
	Images []ProductLicenseImage `pulumi:"images"`
	// Specifies if the product license vendor is Oracle or a third party.
	IsVendorOracle bool `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit string `pulumi:"licenseUnit"`
	// The product license vendor name, for example: Microsoft, RHEL, and so on.
	VendorName *string `pulumi:"vendorName"`
}

// The set of arguments for constructing a ProductLicense resource.
type ProductLicenseArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where product licenses are created.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// Name of the product license.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The image details associated with the product license.
	Images ProductLicenseImageArrayInput
	// Specifies if the product license vendor is Oracle or a third party.
	IsVendorOracle pulumi.BoolInput
	// The product license unit.
	LicenseUnit pulumi.StringInput
	// The product license vendor name, for example: Microsoft, RHEL, and so on.
	VendorName pulumi.StringPtrInput
}

func (ProductLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productLicenseArgs)(nil)).Elem()
}

type ProductLicenseInput interface {
	pulumi.Input

	ToProductLicenseOutput() ProductLicenseOutput
	ToProductLicenseOutputWithContext(ctx context.Context) ProductLicenseOutput
}

func (*ProductLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductLicense)(nil)).Elem()
}

func (i *ProductLicense) ToProductLicenseOutput() ProductLicenseOutput {
	return i.ToProductLicenseOutputWithContext(context.Background())
}

func (i *ProductLicense) ToProductLicenseOutputWithContext(ctx context.Context) ProductLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductLicenseOutput)
}

// ProductLicenseArrayInput is an input type that accepts ProductLicenseArray and ProductLicenseArrayOutput values.
// You can construct a concrete instance of `ProductLicenseArrayInput` via:
//
//	ProductLicenseArray{ ProductLicenseArgs{...} }
type ProductLicenseArrayInput interface {
	pulumi.Input

	ToProductLicenseArrayOutput() ProductLicenseArrayOutput
	ToProductLicenseArrayOutputWithContext(context.Context) ProductLicenseArrayOutput
}

type ProductLicenseArray []ProductLicenseInput

func (ProductLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductLicense)(nil)).Elem()
}

func (i ProductLicenseArray) ToProductLicenseArrayOutput() ProductLicenseArrayOutput {
	return i.ToProductLicenseArrayOutputWithContext(context.Background())
}

func (i ProductLicenseArray) ToProductLicenseArrayOutputWithContext(ctx context.Context) ProductLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductLicenseArrayOutput)
}

// ProductLicenseMapInput is an input type that accepts ProductLicenseMap and ProductLicenseMapOutput values.
// You can construct a concrete instance of `ProductLicenseMapInput` via:
//
//	ProductLicenseMap{ "key": ProductLicenseArgs{...} }
type ProductLicenseMapInput interface {
	pulumi.Input

	ToProductLicenseMapOutput() ProductLicenseMapOutput
	ToProductLicenseMapOutputWithContext(context.Context) ProductLicenseMapOutput
}

type ProductLicenseMap map[string]ProductLicenseInput

func (ProductLicenseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductLicense)(nil)).Elem()
}

func (i ProductLicenseMap) ToProductLicenseMapOutput() ProductLicenseMapOutput {
	return i.ToProductLicenseMapOutputWithContext(context.Background())
}

func (i ProductLicenseMap) ToProductLicenseMapOutputWithContext(ctx context.Context) ProductLicenseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductLicenseMapOutput)
}

type ProductLicenseOutput struct{ *pulumi.OutputState }

func (ProductLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductLicense)(nil)).Elem()
}

func (o ProductLicenseOutput) ToProductLicenseOutput() ProductLicenseOutput {
	return o
}

func (o ProductLicenseOutput) ToProductLicenseOutputWithContext(ctx context.Context) ProductLicenseOutput {
	return o
}

type ProductLicenseArrayOutput struct{ *pulumi.OutputState }

func (ProductLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductLicense)(nil)).Elem()
}

func (o ProductLicenseArrayOutput) ToProductLicenseArrayOutput() ProductLicenseArrayOutput {
	return o
}

func (o ProductLicenseArrayOutput) ToProductLicenseArrayOutputWithContext(ctx context.Context) ProductLicenseArrayOutput {
	return o
}

func (o ProductLicenseArrayOutput) Index(i pulumi.IntInput) ProductLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductLicense {
		return vs[0].([]*ProductLicense)[vs[1].(int)]
	}).(ProductLicenseOutput)
}

type ProductLicenseMapOutput struct{ *pulumi.OutputState }

func (ProductLicenseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductLicense)(nil)).Elem()
}

func (o ProductLicenseMapOutput) ToProductLicenseMapOutput() ProductLicenseMapOutput {
	return o
}

func (o ProductLicenseMapOutput) ToProductLicenseMapOutputWithContext(ctx context.Context) ProductLicenseMapOutput {
	return o
}

func (o ProductLicenseMapOutput) MapIndex(k pulumi.StringInput) ProductLicenseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductLicense {
		return vs[0].(map[string]*ProductLicense)[vs[1].(string)]
	}).(ProductLicenseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductLicenseInput)(nil)).Elem(), &ProductLicense{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductLicenseArrayInput)(nil)).Elem(), ProductLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductLicenseMapInput)(nil)).Elem(), ProductLicenseMap{})
	pulumi.RegisterOutputType(ProductLicenseOutput{})
	pulumi.RegisterOutputType(ProductLicenseArrayOutput{})
	pulumi.RegisterOutputType(ProductLicenseMapOutput{})
}
