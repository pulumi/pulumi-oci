// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package licensemanager

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ProductLicenseImage struct {
	// The image ID associated with the product license.
	Id *string `pulumi:"id"`
	// (Updatable) Marketplace image listing ID.
	ListingId string `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName *string `pulumi:"listingName"`
	// (Updatable) Image package version.
	PackageVersion string `pulumi:"packageVersion"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
}

// ProductLicenseImageInput is an input type that accepts ProductLicenseImageArgs and ProductLicenseImageOutput values.
// You can construct a concrete instance of `ProductLicenseImageInput` via:
//
//	ProductLicenseImageArgs{...}
type ProductLicenseImageInput interface {
	pulumi.Input

	ToProductLicenseImageOutput() ProductLicenseImageOutput
	ToProductLicenseImageOutputWithContext(context.Context) ProductLicenseImageOutput
}

type ProductLicenseImageArgs struct {
	// The image ID associated with the product license.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// (Updatable) Marketplace image listing ID.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName pulumi.StringPtrInput `pulumi:"listingName"`
	// (Updatable) Image package version.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The image publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (ProductLicenseImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductLicenseImage)(nil)).Elem()
}

func (i ProductLicenseImageArgs) ToProductLicenseImageOutput() ProductLicenseImageOutput {
	return i.ToProductLicenseImageOutputWithContext(context.Background())
}

func (i ProductLicenseImageArgs) ToProductLicenseImageOutputWithContext(ctx context.Context) ProductLicenseImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductLicenseImageOutput)
}

// ProductLicenseImageArrayInput is an input type that accepts ProductLicenseImageArray and ProductLicenseImageArrayOutput values.
// You can construct a concrete instance of `ProductLicenseImageArrayInput` via:
//
//	ProductLicenseImageArray{ ProductLicenseImageArgs{...} }
type ProductLicenseImageArrayInput interface {
	pulumi.Input

	ToProductLicenseImageArrayOutput() ProductLicenseImageArrayOutput
	ToProductLicenseImageArrayOutputWithContext(context.Context) ProductLicenseImageArrayOutput
}

type ProductLicenseImageArray []ProductLicenseImageInput

func (ProductLicenseImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductLicenseImage)(nil)).Elem()
}

func (i ProductLicenseImageArray) ToProductLicenseImageArrayOutput() ProductLicenseImageArrayOutput {
	return i.ToProductLicenseImageArrayOutputWithContext(context.Background())
}

func (i ProductLicenseImageArray) ToProductLicenseImageArrayOutputWithContext(ctx context.Context) ProductLicenseImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductLicenseImageArrayOutput)
}

type ProductLicenseImageOutput struct{ *pulumi.OutputState }

func (ProductLicenseImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductLicenseImage)(nil)).Elem()
}

func (o ProductLicenseImageOutput) ToProductLicenseImageOutput() ProductLicenseImageOutput {
	return o
}

func (o ProductLicenseImageOutput) ToProductLicenseImageOutputWithContext(ctx context.Context) ProductLicenseImageOutput {
	return o
}

// The image ID associated with the product license.
func (o ProductLicenseImageOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProductLicenseImage) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// (Updatable) Marketplace image listing ID.
func (o ProductLicenseImageOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v ProductLicenseImage) string { return v.ListingId }).(pulumi.StringOutput)
}

// The listing name associated with the product license.
func (o ProductLicenseImageOutput) ListingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProductLicenseImage) *string { return v.ListingName }).(pulumi.StringPtrOutput)
}

// (Updatable) Image package version.
func (o ProductLicenseImageOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ProductLicenseImage) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The image publisher.
func (o ProductLicenseImageOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProductLicenseImage) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type ProductLicenseImageArrayOutput struct{ *pulumi.OutputState }

func (ProductLicenseImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProductLicenseImage)(nil)).Elem()
}

func (o ProductLicenseImageArrayOutput) ToProductLicenseImageArrayOutput() ProductLicenseImageArrayOutput {
	return o
}

func (o ProductLicenseImageArrayOutput) ToProductLicenseImageArrayOutputWithContext(ctx context.Context) ProductLicenseImageArrayOutput {
	return o
}

func (o ProductLicenseImageArrayOutput) Index(i pulumi.IntInput) ProductLicenseImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProductLicenseImage {
		return vs[0].([]ProductLicenseImage)[vs[1].(int)]
	}).(ProductLicenseImageOutput)
}

type GetLicenseRecordsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetLicenseRecordsFilterInput is an input type that accepts GetLicenseRecordsFilterArgs and GetLicenseRecordsFilterOutput values.
// You can construct a concrete instance of `GetLicenseRecordsFilterInput` via:
//
//	GetLicenseRecordsFilterArgs{...}
type GetLicenseRecordsFilterInput interface {
	pulumi.Input

	ToGetLicenseRecordsFilterOutput() GetLicenseRecordsFilterOutput
	ToGetLicenseRecordsFilterOutputWithContext(context.Context) GetLicenseRecordsFilterOutput
}

type GetLicenseRecordsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetLicenseRecordsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsFilter)(nil)).Elem()
}

func (i GetLicenseRecordsFilterArgs) ToGetLicenseRecordsFilterOutput() GetLicenseRecordsFilterOutput {
	return i.ToGetLicenseRecordsFilterOutputWithContext(context.Background())
}

func (i GetLicenseRecordsFilterArgs) ToGetLicenseRecordsFilterOutputWithContext(ctx context.Context) GetLicenseRecordsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsFilterOutput)
}

// GetLicenseRecordsFilterArrayInput is an input type that accepts GetLicenseRecordsFilterArray and GetLicenseRecordsFilterArrayOutput values.
// You can construct a concrete instance of `GetLicenseRecordsFilterArrayInput` via:
//
//	GetLicenseRecordsFilterArray{ GetLicenseRecordsFilterArgs{...} }
type GetLicenseRecordsFilterArrayInput interface {
	pulumi.Input

	ToGetLicenseRecordsFilterArrayOutput() GetLicenseRecordsFilterArrayOutput
	ToGetLicenseRecordsFilterArrayOutputWithContext(context.Context) GetLicenseRecordsFilterArrayOutput
}

type GetLicenseRecordsFilterArray []GetLicenseRecordsFilterInput

func (GetLicenseRecordsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsFilter)(nil)).Elem()
}

func (i GetLicenseRecordsFilterArray) ToGetLicenseRecordsFilterArrayOutput() GetLicenseRecordsFilterArrayOutput {
	return i.ToGetLicenseRecordsFilterArrayOutputWithContext(context.Background())
}

func (i GetLicenseRecordsFilterArray) ToGetLicenseRecordsFilterArrayOutputWithContext(ctx context.Context) GetLicenseRecordsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsFilterArrayOutput)
}

type GetLicenseRecordsFilterOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsFilter)(nil)).Elem()
}

func (o GetLicenseRecordsFilterOutput) ToGetLicenseRecordsFilterOutput() GetLicenseRecordsFilterOutput {
	return o
}

func (o GetLicenseRecordsFilterOutput) ToGetLicenseRecordsFilterOutputWithContext(ctx context.Context) GetLicenseRecordsFilterOutput {
	return o
}

func (o GetLicenseRecordsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLicenseRecordsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetLicenseRecordsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetLicenseRecordsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLicenseRecordsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetLicenseRecordsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsFilter)(nil)).Elem()
}

func (o GetLicenseRecordsFilterArrayOutput) ToGetLicenseRecordsFilterArrayOutput() GetLicenseRecordsFilterArrayOutput {
	return o
}

func (o GetLicenseRecordsFilterArrayOutput) ToGetLicenseRecordsFilterArrayOutputWithContext(ctx context.Context) GetLicenseRecordsFilterArrayOutput {
	return o
}

func (o GetLicenseRecordsFilterArrayOutput) Index(i pulumi.IntInput) GetLicenseRecordsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLicenseRecordsFilter {
		return vs[0].([]GetLicenseRecordsFilter)[vs[1].(int)]
	}).(GetLicenseRecordsFilterOutput)
}

type GetLicenseRecordsLicenseRecordCollection struct {
	Items []GetLicenseRecordsLicenseRecordCollectionItem `pulumi:"items"`
}

// GetLicenseRecordsLicenseRecordCollectionInput is an input type that accepts GetLicenseRecordsLicenseRecordCollectionArgs and GetLicenseRecordsLicenseRecordCollectionOutput values.
// You can construct a concrete instance of `GetLicenseRecordsLicenseRecordCollectionInput` via:
//
//	GetLicenseRecordsLicenseRecordCollectionArgs{...}
type GetLicenseRecordsLicenseRecordCollectionInput interface {
	pulumi.Input

	ToGetLicenseRecordsLicenseRecordCollectionOutput() GetLicenseRecordsLicenseRecordCollectionOutput
	ToGetLicenseRecordsLicenseRecordCollectionOutputWithContext(context.Context) GetLicenseRecordsLicenseRecordCollectionOutput
}

type GetLicenseRecordsLicenseRecordCollectionArgs struct {
	Items GetLicenseRecordsLicenseRecordCollectionItemArrayInput `pulumi:"items"`
}

func (GetLicenseRecordsLicenseRecordCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollection)(nil)).Elem()
}

func (i GetLicenseRecordsLicenseRecordCollectionArgs) ToGetLicenseRecordsLicenseRecordCollectionOutput() GetLicenseRecordsLicenseRecordCollectionOutput {
	return i.ToGetLicenseRecordsLicenseRecordCollectionOutputWithContext(context.Background())
}

func (i GetLicenseRecordsLicenseRecordCollectionArgs) ToGetLicenseRecordsLicenseRecordCollectionOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsLicenseRecordCollectionOutput)
}

// GetLicenseRecordsLicenseRecordCollectionArrayInput is an input type that accepts GetLicenseRecordsLicenseRecordCollectionArray and GetLicenseRecordsLicenseRecordCollectionArrayOutput values.
// You can construct a concrete instance of `GetLicenseRecordsLicenseRecordCollectionArrayInput` via:
//
//	GetLicenseRecordsLicenseRecordCollectionArray{ GetLicenseRecordsLicenseRecordCollectionArgs{...} }
type GetLicenseRecordsLicenseRecordCollectionArrayInput interface {
	pulumi.Input

	ToGetLicenseRecordsLicenseRecordCollectionArrayOutput() GetLicenseRecordsLicenseRecordCollectionArrayOutput
	ToGetLicenseRecordsLicenseRecordCollectionArrayOutputWithContext(context.Context) GetLicenseRecordsLicenseRecordCollectionArrayOutput
}

type GetLicenseRecordsLicenseRecordCollectionArray []GetLicenseRecordsLicenseRecordCollectionInput

func (GetLicenseRecordsLicenseRecordCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsLicenseRecordCollection)(nil)).Elem()
}

func (i GetLicenseRecordsLicenseRecordCollectionArray) ToGetLicenseRecordsLicenseRecordCollectionArrayOutput() GetLicenseRecordsLicenseRecordCollectionArrayOutput {
	return i.ToGetLicenseRecordsLicenseRecordCollectionArrayOutputWithContext(context.Background())
}

func (i GetLicenseRecordsLicenseRecordCollectionArray) ToGetLicenseRecordsLicenseRecordCollectionArrayOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsLicenseRecordCollectionArrayOutput)
}

type GetLicenseRecordsLicenseRecordCollectionOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsLicenseRecordCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollection)(nil)).Elem()
}

func (o GetLicenseRecordsLicenseRecordCollectionOutput) ToGetLicenseRecordsLicenseRecordCollectionOutput() GetLicenseRecordsLicenseRecordCollectionOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionOutput) ToGetLicenseRecordsLicenseRecordCollectionOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionOutput) Items() GetLicenseRecordsLicenseRecordCollectionItemArrayOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollection) []GetLicenseRecordsLicenseRecordCollectionItem {
		return v.Items
	}).(GetLicenseRecordsLicenseRecordCollectionItemArrayOutput)
}

type GetLicenseRecordsLicenseRecordCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsLicenseRecordCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsLicenseRecordCollection)(nil)).Elem()
}

func (o GetLicenseRecordsLicenseRecordCollectionArrayOutput) ToGetLicenseRecordsLicenseRecordCollectionArrayOutput() GetLicenseRecordsLicenseRecordCollectionArrayOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionArrayOutput) ToGetLicenseRecordsLicenseRecordCollectionArrayOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionArrayOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionArrayOutput) Index(i pulumi.IntInput) GetLicenseRecordsLicenseRecordCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLicenseRecordsLicenseRecordCollection {
		return vs[0].([]GetLicenseRecordsLicenseRecordCollection)[vs[1].(int)]
	}).(GetLicenseRecordsLicenseRecordCollectionOutput)
}

type GetLicenseRecordsLicenseRecordCollectionItem struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The license record display name. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate string `pulumi:"expirationDate"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	Id string `pulumi:"id"`
	// Specifies if the license record term is perpertual.
	IsPerpetual bool `pulumi:"isPerpetual"`
	// Specifies if the license count is unlimited.
	IsUnlimited bool `pulumi:"isUnlimited"`
	// The number of license units added by the user for the given license record. Default 1
	LicenseCount int `pulumi:"licenseCount"`
	// The product license unit.
	LicenseUnit string `pulumi:"licenseUnit"`
	// The license record product ID.
	ProductId string `pulumi:"productId"`
	// The product license name with which the license record is associated.
	ProductLicense string `pulumi:"productLicense"`
	// Unique product license identifier.
	ProductLicenseId string `pulumi:"productLicenseId"`
	// The current license record state.
	State string `pulumi:"state"`
	// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	SupportEndDate string `pulumi:"supportEndDate"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetLicenseRecordsLicenseRecordCollectionItemInput is an input type that accepts GetLicenseRecordsLicenseRecordCollectionItemArgs and GetLicenseRecordsLicenseRecordCollectionItemOutput values.
// You can construct a concrete instance of `GetLicenseRecordsLicenseRecordCollectionItemInput` via:
//
//	GetLicenseRecordsLicenseRecordCollectionItemArgs{...}
type GetLicenseRecordsLicenseRecordCollectionItemInput interface {
	pulumi.Input

	ToGetLicenseRecordsLicenseRecordCollectionItemOutput() GetLicenseRecordsLicenseRecordCollectionItemOutput
	ToGetLicenseRecordsLicenseRecordCollectionItemOutputWithContext(context.Context) GetLicenseRecordsLicenseRecordCollectionItemOutput
}

type GetLicenseRecordsLicenseRecordCollectionItemArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput `pulumi:"definedTags"`
	// The license record display name. Avoid entering confidential information.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput `pulumi:"freeformTags"`
	// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies if the license record term is perpertual.
	IsPerpetual pulumi.BoolInput `pulumi:"isPerpetual"`
	// Specifies if the license count is unlimited.
	IsUnlimited pulumi.BoolInput `pulumi:"isUnlimited"`
	// The number of license units added by the user for the given license record. Default 1
	LicenseCount pulumi.IntInput `pulumi:"licenseCount"`
	// The product license unit.
	LicenseUnit pulumi.StringInput `pulumi:"licenseUnit"`
	// The license record product ID.
	ProductId pulumi.StringInput `pulumi:"productId"`
	// The product license name with which the license record is associated.
	ProductLicense pulumi.StringInput `pulumi:"productLicense"`
	// Unique product license identifier.
	ProductLicenseId pulumi.StringInput `pulumi:"productLicenseId"`
	// The current license record state.
	State pulumi.StringInput `pulumi:"state"`
	// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
	SupportEndDate pulumi.StringInput `pulumi:"supportEndDate"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput `pulumi:"systemTags"`
	// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetLicenseRecordsLicenseRecordCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionItem)(nil)).Elem()
}

func (i GetLicenseRecordsLicenseRecordCollectionItemArgs) ToGetLicenseRecordsLicenseRecordCollectionItemOutput() GetLicenseRecordsLicenseRecordCollectionItemOutput {
	return i.ToGetLicenseRecordsLicenseRecordCollectionItemOutputWithContext(context.Background())
}

func (i GetLicenseRecordsLicenseRecordCollectionItemArgs) ToGetLicenseRecordsLicenseRecordCollectionItemOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsLicenseRecordCollectionItemOutput)
}

// GetLicenseRecordsLicenseRecordCollectionItemArrayInput is an input type that accepts GetLicenseRecordsLicenseRecordCollectionItemArray and GetLicenseRecordsLicenseRecordCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetLicenseRecordsLicenseRecordCollectionItemArrayInput` via:
//
//	GetLicenseRecordsLicenseRecordCollectionItemArray{ GetLicenseRecordsLicenseRecordCollectionItemArgs{...} }
type GetLicenseRecordsLicenseRecordCollectionItemArrayInput interface {
	pulumi.Input

	ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutput() GetLicenseRecordsLicenseRecordCollectionItemArrayOutput
	ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutputWithContext(context.Context) GetLicenseRecordsLicenseRecordCollectionItemArrayOutput
}

type GetLicenseRecordsLicenseRecordCollectionItemArray []GetLicenseRecordsLicenseRecordCollectionItemInput

func (GetLicenseRecordsLicenseRecordCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsLicenseRecordCollectionItem)(nil)).Elem()
}

func (i GetLicenseRecordsLicenseRecordCollectionItemArray) ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutput() GetLicenseRecordsLicenseRecordCollectionItemArrayOutput {
	return i.ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetLicenseRecordsLicenseRecordCollectionItemArray) ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLicenseRecordsLicenseRecordCollectionItemArrayOutput)
}

type GetLicenseRecordsLicenseRecordCollectionItemOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsLicenseRecordCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionItem)(nil)).Elem()
}

func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ToGetLicenseRecordsLicenseRecordCollectionItemOutput() GetLicenseRecordsLicenseRecordCollectionItemOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ToGetLicenseRecordsLicenseRecordCollectionItemOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionItemOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) where the license record is created.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The license record display name. Avoid entering confidential information.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The license record end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The license record [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies if the license record term is perpertual.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) IsPerpetual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) bool { return v.IsPerpetual }).(pulumi.BoolOutput)
}

// Specifies if the license count is unlimited.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) IsUnlimited() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) bool { return v.IsUnlimited }).(pulumi.BoolOutput)
}

// The number of license units added by the user for the given license record. Default 1
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) LicenseCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) int { return v.LicenseCount }).(pulumi.IntOutput)
}

// The product license unit.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) LicenseUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.LicenseUnit }).(pulumi.StringOutput)
}

// The license record product ID.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.ProductId }).(pulumi.StringOutput)
}

// The product license name with which the license record is associated.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ProductLicense() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.ProductLicense }).(pulumi.StringOutput)
}

// Unique product license identifier.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) ProductLicenseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.ProductLicenseId }).(pulumi.StringOutput)
}

// The current license record state.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.State }).(pulumi.StringOutput)
}

// The license record support end date in [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Example: `2018-09-12`
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) SupportEndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.SupportEndDate }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the license record was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the license record was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o GetLicenseRecordsLicenseRecordCollectionItemOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetLicenseRecordsLicenseRecordCollectionItem) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetLicenseRecordsLicenseRecordCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetLicenseRecordsLicenseRecordCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLicenseRecordsLicenseRecordCollectionItem)(nil)).Elem()
}

func (o GetLicenseRecordsLicenseRecordCollectionItemArrayOutput) ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutput() GetLicenseRecordsLicenseRecordCollectionItemArrayOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionItemArrayOutput) ToGetLicenseRecordsLicenseRecordCollectionItemArrayOutputWithContext(ctx context.Context) GetLicenseRecordsLicenseRecordCollectionItemArrayOutput {
	return o
}

func (o GetLicenseRecordsLicenseRecordCollectionItemArrayOutput) Index(i pulumi.IntInput) GetLicenseRecordsLicenseRecordCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLicenseRecordsLicenseRecordCollectionItem {
		return vs[0].([]GetLicenseRecordsLicenseRecordCollectionItem)[vs[1].(int)]
	}).(GetLicenseRecordsLicenseRecordCollectionItemOutput)
}

type GetProductLicenseConsumersItem struct {
	// Specifies if all options are available.
	AreAllOptionsAvailable bool `pulumi:"areAllOptionsAvailable"`
	// Specifies if the base license is available.
	IsBaseLicenseAvailable bool `pulumi:"isBaseLicenseAvailable"`
	// The product license unit.
	LicenseUnitType string `pulumi:"licenseUnitType"`
	// Number of license units consumed by the resource.
	LicenseUnitsConsumed float64 `pulumi:"licenseUnitsConsumed"`
	// Collection of missing product licenses.
	MissingProducts []GetProductLicenseConsumersItemMissingProduct `pulumi:"missingProducts"`
	// The resource product name.
	ProductName string `pulumi:"productName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the resource.
	ResourceCompartmentId string `pulumi:"resourceCompartmentId"`
	// The display name of the compartment that contains the resource.
	ResourceCompartmentName string `pulumi:"resourceCompartmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
	ResourceId string `pulumi:"resourceId"`
	// The display name of the resource.
	ResourceName string `pulumi:"resourceName"`
	// Number of units of the resource
	ResourceUnitCount float64 `pulumi:"resourceUnitCount"`
	// The unit type for the resource.
	ResourceUnitType string `pulumi:"resourceUnitType"`
}

// GetProductLicenseConsumersItemInput is an input type that accepts GetProductLicenseConsumersItemArgs and GetProductLicenseConsumersItemOutput values.
// You can construct a concrete instance of `GetProductLicenseConsumersItemInput` via:
//
//	GetProductLicenseConsumersItemArgs{...}
type GetProductLicenseConsumersItemInput interface {
	pulumi.Input

	ToGetProductLicenseConsumersItemOutput() GetProductLicenseConsumersItemOutput
	ToGetProductLicenseConsumersItemOutputWithContext(context.Context) GetProductLicenseConsumersItemOutput
}

type GetProductLicenseConsumersItemArgs struct {
	// Specifies if all options are available.
	AreAllOptionsAvailable pulumi.BoolInput `pulumi:"areAllOptionsAvailable"`
	// Specifies if the base license is available.
	IsBaseLicenseAvailable pulumi.BoolInput `pulumi:"isBaseLicenseAvailable"`
	// The product license unit.
	LicenseUnitType pulumi.StringInput `pulumi:"licenseUnitType"`
	// Number of license units consumed by the resource.
	LicenseUnitsConsumed pulumi.Float64Input `pulumi:"licenseUnitsConsumed"`
	// Collection of missing product licenses.
	MissingProducts GetProductLicenseConsumersItemMissingProductArrayInput `pulumi:"missingProducts"`
	// The resource product name.
	ProductName pulumi.StringInput `pulumi:"productName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the resource.
	ResourceCompartmentId pulumi.StringInput `pulumi:"resourceCompartmentId"`
	// The display name of the compartment that contains the resource.
	ResourceCompartmentName pulumi.StringInput `pulumi:"resourceCompartmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The display name of the resource.
	ResourceName pulumi.StringInput `pulumi:"resourceName"`
	// Number of units of the resource
	ResourceUnitCount pulumi.Float64Input `pulumi:"resourceUnitCount"`
	// The unit type for the resource.
	ResourceUnitType pulumi.StringInput `pulumi:"resourceUnitType"`
}

func (GetProductLicenseConsumersItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseConsumersItem)(nil)).Elem()
}

func (i GetProductLicenseConsumersItemArgs) ToGetProductLicenseConsumersItemOutput() GetProductLicenseConsumersItemOutput {
	return i.ToGetProductLicenseConsumersItemOutputWithContext(context.Background())
}

func (i GetProductLicenseConsumersItemArgs) ToGetProductLicenseConsumersItemOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseConsumersItemOutput)
}

// GetProductLicenseConsumersItemArrayInput is an input type that accepts GetProductLicenseConsumersItemArray and GetProductLicenseConsumersItemArrayOutput values.
// You can construct a concrete instance of `GetProductLicenseConsumersItemArrayInput` via:
//
//	GetProductLicenseConsumersItemArray{ GetProductLicenseConsumersItemArgs{...} }
type GetProductLicenseConsumersItemArrayInput interface {
	pulumi.Input

	ToGetProductLicenseConsumersItemArrayOutput() GetProductLicenseConsumersItemArrayOutput
	ToGetProductLicenseConsumersItemArrayOutputWithContext(context.Context) GetProductLicenseConsumersItemArrayOutput
}

type GetProductLicenseConsumersItemArray []GetProductLicenseConsumersItemInput

func (GetProductLicenseConsumersItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseConsumersItem)(nil)).Elem()
}

func (i GetProductLicenseConsumersItemArray) ToGetProductLicenseConsumersItemArrayOutput() GetProductLicenseConsumersItemArrayOutput {
	return i.ToGetProductLicenseConsumersItemArrayOutputWithContext(context.Background())
}

func (i GetProductLicenseConsumersItemArray) ToGetProductLicenseConsumersItemArrayOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseConsumersItemArrayOutput)
}

type GetProductLicenseConsumersItemOutput struct{ *pulumi.OutputState }

func (GetProductLicenseConsumersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseConsumersItem)(nil)).Elem()
}

func (o GetProductLicenseConsumersItemOutput) ToGetProductLicenseConsumersItemOutput() GetProductLicenseConsumersItemOutput {
	return o
}

func (o GetProductLicenseConsumersItemOutput) ToGetProductLicenseConsumersItemOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemOutput {
	return o
}

// Specifies if all options are available.
func (o GetProductLicenseConsumersItemOutput) AreAllOptionsAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) bool { return v.AreAllOptionsAvailable }).(pulumi.BoolOutput)
}

// Specifies if the base license is available.
func (o GetProductLicenseConsumersItemOutput) IsBaseLicenseAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) bool { return v.IsBaseLicenseAvailable }).(pulumi.BoolOutput)
}

// The product license unit.
func (o GetProductLicenseConsumersItemOutput) LicenseUnitType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.LicenseUnitType }).(pulumi.StringOutput)
}

// Number of license units consumed by the resource.
func (o GetProductLicenseConsumersItemOutput) LicenseUnitsConsumed() pulumi.Float64Output {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) float64 { return v.LicenseUnitsConsumed }).(pulumi.Float64Output)
}

// Collection of missing product licenses.
func (o GetProductLicenseConsumersItemOutput) MissingProducts() GetProductLicenseConsumersItemMissingProductArrayOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) []GetProductLicenseConsumersItemMissingProduct {
		return v.MissingProducts
	}).(GetProductLicenseConsumersItemMissingProductArrayOutput)
}

// The resource product name.
func (o GetProductLicenseConsumersItemOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ProductName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the resource.
func (o GetProductLicenseConsumersItemOutput) ResourceCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ResourceCompartmentId }).(pulumi.StringOutput)
}

// The display name of the compartment that contains the resource.
func (o GetProductLicenseConsumersItemOutput) ResourceCompartmentName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ResourceCompartmentName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
func (o GetProductLicenseConsumersItemOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The display name of the resource.
func (o GetProductLicenseConsumersItemOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ResourceName }).(pulumi.StringOutput)
}

// Number of units of the resource
func (o GetProductLicenseConsumersItemOutput) ResourceUnitCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) float64 { return v.ResourceUnitCount }).(pulumi.Float64Output)
}

// The unit type for the resource.
func (o GetProductLicenseConsumersItemOutput) ResourceUnitType() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItem) string { return v.ResourceUnitType }).(pulumi.StringOutput)
}

type GetProductLicenseConsumersItemArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicenseConsumersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseConsumersItem)(nil)).Elem()
}

func (o GetProductLicenseConsumersItemArrayOutput) ToGetProductLicenseConsumersItemArrayOutput() GetProductLicenseConsumersItemArrayOutput {
	return o
}

func (o GetProductLicenseConsumersItemArrayOutput) ToGetProductLicenseConsumersItemArrayOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemArrayOutput {
	return o
}

func (o GetProductLicenseConsumersItemArrayOutput) Index(i pulumi.IntInput) GetProductLicenseConsumersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicenseConsumersItem {
		return vs[0].([]GetProductLicenseConsumersItem)[vs[1].(int)]
	}).(GetProductLicenseConsumersItemOutput)
}

type GetProductLicenseConsumersItemMissingProduct struct {
	// Product category base or option.
	Category string `pulumi:"category"`
	// Units required for the missing product.
	Count float64 `pulumi:"count"`
	// Name of the product.
	Name string `pulumi:"name"`
}

// GetProductLicenseConsumersItemMissingProductInput is an input type that accepts GetProductLicenseConsumersItemMissingProductArgs and GetProductLicenseConsumersItemMissingProductOutput values.
// You can construct a concrete instance of `GetProductLicenseConsumersItemMissingProductInput` via:
//
//	GetProductLicenseConsumersItemMissingProductArgs{...}
type GetProductLicenseConsumersItemMissingProductInput interface {
	pulumi.Input

	ToGetProductLicenseConsumersItemMissingProductOutput() GetProductLicenseConsumersItemMissingProductOutput
	ToGetProductLicenseConsumersItemMissingProductOutputWithContext(context.Context) GetProductLicenseConsumersItemMissingProductOutput
}

type GetProductLicenseConsumersItemMissingProductArgs struct {
	// Product category base or option.
	Category pulumi.StringInput `pulumi:"category"`
	// Units required for the missing product.
	Count pulumi.Float64Input `pulumi:"count"`
	// Name of the product.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetProductLicenseConsumersItemMissingProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseConsumersItemMissingProduct)(nil)).Elem()
}

func (i GetProductLicenseConsumersItemMissingProductArgs) ToGetProductLicenseConsumersItemMissingProductOutput() GetProductLicenseConsumersItemMissingProductOutput {
	return i.ToGetProductLicenseConsumersItemMissingProductOutputWithContext(context.Background())
}

func (i GetProductLicenseConsumersItemMissingProductArgs) ToGetProductLicenseConsumersItemMissingProductOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemMissingProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseConsumersItemMissingProductOutput)
}

// GetProductLicenseConsumersItemMissingProductArrayInput is an input type that accepts GetProductLicenseConsumersItemMissingProductArray and GetProductLicenseConsumersItemMissingProductArrayOutput values.
// You can construct a concrete instance of `GetProductLicenseConsumersItemMissingProductArrayInput` via:
//
//	GetProductLicenseConsumersItemMissingProductArray{ GetProductLicenseConsumersItemMissingProductArgs{...} }
type GetProductLicenseConsumersItemMissingProductArrayInput interface {
	pulumi.Input

	ToGetProductLicenseConsumersItemMissingProductArrayOutput() GetProductLicenseConsumersItemMissingProductArrayOutput
	ToGetProductLicenseConsumersItemMissingProductArrayOutputWithContext(context.Context) GetProductLicenseConsumersItemMissingProductArrayOutput
}

type GetProductLicenseConsumersItemMissingProductArray []GetProductLicenseConsumersItemMissingProductInput

func (GetProductLicenseConsumersItemMissingProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseConsumersItemMissingProduct)(nil)).Elem()
}

func (i GetProductLicenseConsumersItemMissingProductArray) ToGetProductLicenseConsumersItemMissingProductArrayOutput() GetProductLicenseConsumersItemMissingProductArrayOutput {
	return i.ToGetProductLicenseConsumersItemMissingProductArrayOutputWithContext(context.Background())
}

func (i GetProductLicenseConsumersItemMissingProductArray) ToGetProductLicenseConsumersItemMissingProductArrayOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemMissingProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseConsumersItemMissingProductArrayOutput)
}

type GetProductLicenseConsumersItemMissingProductOutput struct{ *pulumi.OutputState }

func (GetProductLicenseConsumersItemMissingProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseConsumersItemMissingProduct)(nil)).Elem()
}

func (o GetProductLicenseConsumersItemMissingProductOutput) ToGetProductLicenseConsumersItemMissingProductOutput() GetProductLicenseConsumersItemMissingProductOutput {
	return o
}

func (o GetProductLicenseConsumersItemMissingProductOutput) ToGetProductLicenseConsumersItemMissingProductOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemMissingProductOutput {
	return o
}

// Product category base or option.
func (o GetProductLicenseConsumersItemMissingProductOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItemMissingProduct) string { return v.Category }).(pulumi.StringOutput)
}

// Units required for the missing product.
func (o GetProductLicenseConsumersItemMissingProductOutput) Count() pulumi.Float64Output {
	return o.ApplyT(func(v GetProductLicenseConsumersItemMissingProduct) float64 { return v.Count }).(pulumi.Float64Output)
}

// Name of the product.
func (o GetProductLicenseConsumersItemMissingProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseConsumersItemMissingProduct) string { return v.Name }).(pulumi.StringOutput)
}

type GetProductLicenseConsumersItemMissingProductArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicenseConsumersItemMissingProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseConsumersItemMissingProduct)(nil)).Elem()
}

func (o GetProductLicenseConsumersItemMissingProductArrayOutput) ToGetProductLicenseConsumersItemMissingProductArrayOutput() GetProductLicenseConsumersItemMissingProductArrayOutput {
	return o
}

func (o GetProductLicenseConsumersItemMissingProductArrayOutput) ToGetProductLicenseConsumersItemMissingProductArrayOutputWithContext(ctx context.Context) GetProductLicenseConsumersItemMissingProductArrayOutput {
	return o
}

func (o GetProductLicenseConsumersItemMissingProductArrayOutput) Index(i pulumi.IntInput) GetProductLicenseConsumersItemMissingProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicenseConsumersItemMissingProduct {
		return vs[0].([]GetProductLicenseConsumersItemMissingProduct)[vs[1].(int)]
	}).(GetProductLicenseConsumersItemMissingProductOutput)
}

type GetProductLicenseImage struct {
	// The image ID associated with the product license.
	Id string `pulumi:"id"`
	// The image listing ID.
	ListingId string `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName string `pulumi:"listingName"`
	// The image package version.
	PackageVersion string `pulumi:"packageVersion"`
	// The image publisher.
	Publisher string `pulumi:"publisher"`
}

// GetProductLicenseImageInput is an input type that accepts GetProductLicenseImageArgs and GetProductLicenseImageOutput values.
// You can construct a concrete instance of `GetProductLicenseImageInput` via:
//
//	GetProductLicenseImageArgs{...}
type GetProductLicenseImageInput interface {
	pulumi.Input

	ToGetProductLicenseImageOutput() GetProductLicenseImageOutput
	ToGetProductLicenseImageOutputWithContext(context.Context) GetProductLicenseImageOutput
}

type GetProductLicenseImageArgs struct {
	// The image ID associated with the product license.
	Id pulumi.StringInput `pulumi:"id"`
	// The image listing ID.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName pulumi.StringInput `pulumi:"listingName"`
	// The image package version.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The image publisher.
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (GetProductLicenseImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseImage)(nil)).Elem()
}

func (i GetProductLicenseImageArgs) ToGetProductLicenseImageOutput() GetProductLicenseImageOutput {
	return i.ToGetProductLicenseImageOutputWithContext(context.Background())
}

func (i GetProductLicenseImageArgs) ToGetProductLicenseImageOutputWithContext(ctx context.Context) GetProductLicenseImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseImageOutput)
}

// GetProductLicenseImageArrayInput is an input type that accepts GetProductLicenseImageArray and GetProductLicenseImageArrayOutput values.
// You can construct a concrete instance of `GetProductLicenseImageArrayInput` via:
//
//	GetProductLicenseImageArray{ GetProductLicenseImageArgs{...} }
type GetProductLicenseImageArrayInput interface {
	pulumi.Input

	ToGetProductLicenseImageArrayOutput() GetProductLicenseImageArrayOutput
	ToGetProductLicenseImageArrayOutputWithContext(context.Context) GetProductLicenseImageArrayOutput
}

type GetProductLicenseImageArray []GetProductLicenseImageInput

func (GetProductLicenseImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseImage)(nil)).Elem()
}

func (i GetProductLicenseImageArray) ToGetProductLicenseImageArrayOutput() GetProductLicenseImageArrayOutput {
	return i.ToGetProductLicenseImageArrayOutputWithContext(context.Background())
}

func (i GetProductLicenseImageArray) ToGetProductLicenseImageArrayOutputWithContext(ctx context.Context) GetProductLicenseImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicenseImageArrayOutput)
}

type GetProductLicenseImageOutput struct{ *pulumi.OutputState }

func (GetProductLicenseImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicenseImage)(nil)).Elem()
}

func (o GetProductLicenseImageOutput) ToGetProductLicenseImageOutput() GetProductLicenseImageOutput {
	return o
}

func (o GetProductLicenseImageOutput) ToGetProductLicenseImageOutputWithContext(ctx context.Context) GetProductLicenseImageOutput {
	return o
}

// The image ID associated with the product license.
func (o GetProductLicenseImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseImage) string { return v.Id }).(pulumi.StringOutput)
}

// The image listing ID.
func (o GetProductLicenseImageOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseImage) string { return v.ListingId }).(pulumi.StringOutput)
}

// The listing name associated with the product license.
func (o GetProductLicenseImageOutput) ListingName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseImage) string { return v.ListingName }).(pulumi.StringOutput)
}

// The image package version.
func (o GetProductLicenseImageOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseImage) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The image publisher.
func (o GetProductLicenseImageOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicenseImage) string { return v.Publisher }).(pulumi.StringOutput)
}

type GetProductLicenseImageArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicenseImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicenseImage)(nil)).Elem()
}

func (o GetProductLicenseImageArrayOutput) ToGetProductLicenseImageArrayOutput() GetProductLicenseImageArrayOutput {
	return o
}

func (o GetProductLicenseImageArrayOutput) ToGetProductLicenseImageArrayOutputWithContext(ctx context.Context) GetProductLicenseImageArrayOutput {
	return o
}

func (o GetProductLicenseImageArrayOutput) Index(i pulumi.IntInput) GetProductLicenseImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicenseImage {
		return vs[0].([]GetProductLicenseImage)[vs[1].(int)]
	}).(GetProductLicenseImageOutput)
}

type GetProductLicensesFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetProductLicensesFilterInput is an input type that accepts GetProductLicensesFilterArgs and GetProductLicensesFilterOutput values.
// You can construct a concrete instance of `GetProductLicensesFilterInput` via:
//
//	GetProductLicensesFilterArgs{...}
type GetProductLicensesFilterInput interface {
	pulumi.Input

	ToGetProductLicensesFilterOutput() GetProductLicensesFilterOutput
	ToGetProductLicensesFilterOutputWithContext(context.Context) GetProductLicensesFilterOutput
}

type GetProductLicensesFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetProductLicensesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesFilter)(nil)).Elem()
}

func (i GetProductLicensesFilterArgs) ToGetProductLicensesFilterOutput() GetProductLicensesFilterOutput {
	return i.ToGetProductLicensesFilterOutputWithContext(context.Background())
}

func (i GetProductLicensesFilterArgs) ToGetProductLicensesFilterOutputWithContext(ctx context.Context) GetProductLicensesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesFilterOutput)
}

// GetProductLicensesFilterArrayInput is an input type that accepts GetProductLicensesFilterArray and GetProductLicensesFilterArrayOutput values.
// You can construct a concrete instance of `GetProductLicensesFilterArrayInput` via:
//
//	GetProductLicensesFilterArray{ GetProductLicensesFilterArgs{...} }
type GetProductLicensesFilterArrayInput interface {
	pulumi.Input

	ToGetProductLicensesFilterArrayOutput() GetProductLicensesFilterArrayOutput
	ToGetProductLicensesFilterArrayOutputWithContext(context.Context) GetProductLicensesFilterArrayOutput
}

type GetProductLicensesFilterArray []GetProductLicensesFilterInput

func (GetProductLicensesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesFilter)(nil)).Elem()
}

func (i GetProductLicensesFilterArray) ToGetProductLicensesFilterArrayOutput() GetProductLicensesFilterArrayOutput {
	return i.ToGetProductLicensesFilterArrayOutputWithContext(context.Background())
}

func (i GetProductLicensesFilterArray) ToGetProductLicensesFilterArrayOutputWithContext(ctx context.Context) GetProductLicensesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesFilterArrayOutput)
}

type GetProductLicensesFilterOutput struct{ *pulumi.OutputState }

func (GetProductLicensesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesFilter)(nil)).Elem()
}

func (o GetProductLicensesFilterOutput) ToGetProductLicensesFilterOutput() GetProductLicensesFilterOutput {
	return o
}

func (o GetProductLicensesFilterOutput) ToGetProductLicensesFilterOutputWithContext(ctx context.Context) GetProductLicensesFilterOutput {
	return o
}

func (o GetProductLicensesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetProductLicensesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProductLicensesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetProductLicensesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProductLicensesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetProductLicensesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicensesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesFilter)(nil)).Elem()
}

func (o GetProductLicensesFilterArrayOutput) ToGetProductLicensesFilterArrayOutput() GetProductLicensesFilterArrayOutput {
	return o
}

func (o GetProductLicensesFilterArrayOutput) ToGetProductLicensesFilterArrayOutputWithContext(ctx context.Context) GetProductLicensesFilterArrayOutput {
	return o
}

func (o GetProductLicensesFilterArrayOutput) Index(i pulumi.IntInput) GetProductLicensesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicensesFilter {
		return vs[0].([]GetProductLicensesFilter)[vs[1].(int)]
	}).(GetProductLicensesFilterOutput)
}

type GetProductLicensesProductLicenseCollection struct {
	Items []GetProductLicensesProductLicenseCollectionItem `pulumi:"items"`
}

// GetProductLicensesProductLicenseCollectionInput is an input type that accepts GetProductLicensesProductLicenseCollectionArgs and GetProductLicensesProductLicenseCollectionOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionInput` via:
//
//	GetProductLicensesProductLicenseCollectionArgs{...}
type GetProductLicensesProductLicenseCollectionInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionOutput() GetProductLicensesProductLicenseCollectionOutput
	ToGetProductLicensesProductLicenseCollectionOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionOutput
}

type GetProductLicensesProductLicenseCollectionArgs struct {
	Items GetProductLicensesProductLicenseCollectionItemArrayInput `pulumi:"items"`
}

func (GetProductLicensesProductLicenseCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollection)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionArgs) ToGetProductLicensesProductLicenseCollectionOutput() GetProductLicensesProductLicenseCollectionOutput {
	return i.ToGetProductLicensesProductLicenseCollectionOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionArgs) ToGetProductLicensesProductLicenseCollectionOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionOutput)
}

// GetProductLicensesProductLicenseCollectionArrayInput is an input type that accepts GetProductLicensesProductLicenseCollectionArray and GetProductLicensesProductLicenseCollectionArrayOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionArrayInput` via:
//
//	GetProductLicensesProductLicenseCollectionArray{ GetProductLicensesProductLicenseCollectionArgs{...} }
type GetProductLicensesProductLicenseCollectionArrayInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionArrayOutput() GetProductLicensesProductLicenseCollectionArrayOutput
	ToGetProductLicensesProductLicenseCollectionArrayOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionArrayOutput
}

type GetProductLicensesProductLicenseCollectionArray []GetProductLicensesProductLicenseCollectionInput

func (GetProductLicensesProductLicenseCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollection)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionArray) ToGetProductLicensesProductLicenseCollectionArrayOutput() GetProductLicensesProductLicenseCollectionArrayOutput {
	return i.ToGetProductLicensesProductLicenseCollectionArrayOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionArray) ToGetProductLicensesProductLicenseCollectionArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionArrayOutput)
}

type GetProductLicensesProductLicenseCollectionOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollection)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionOutput) ToGetProductLicensesProductLicenseCollectionOutput() GetProductLicensesProductLicenseCollectionOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionOutput) ToGetProductLicensesProductLicenseCollectionOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionOutput) Items() GetProductLicensesProductLicenseCollectionItemArrayOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollection) []GetProductLicensesProductLicenseCollectionItem {
		return v.Items
	}).(GetProductLicensesProductLicenseCollectionItemArrayOutput)
}

type GetProductLicensesProductLicenseCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollection)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionArrayOutput) ToGetProductLicensesProductLicenseCollectionArrayOutput() GetProductLicensesProductLicenseCollectionArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionArrayOutput) ToGetProductLicensesProductLicenseCollectionArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionArrayOutput) Index(i pulumi.IntInput) GetProductLicensesProductLicenseCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicensesProductLicenseCollection {
		return vs[0].([]GetProductLicensesProductLicenseCollection)[vs[1].(int)]
	}).(GetProductLicensesProductLicenseCollectionOutput)
}

type GetProductLicensesProductLicenseCollectionItem struct {
	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount int `pulumi:"activeLicenseRecordCount"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// License record name
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The image ID associated with the product license.
	Id string `pulumi:"id"`
	// The images associated with the product license.
	Images []GetProductLicensesProductLicenseCollectionItemImage `pulumi:"images"`
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed bool `pulumi:"isOverSubscribed"`
	// Specifies if the license unit count is unlimited.
	IsUnlimited bool `pulumi:"isUnlimited"`
	// Specifies whether the vendor is Oracle or a third party.
	IsVendorOracle bool `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit string `pulumi:"licenseUnit"`
	// The current product license state.
	State string `pulumi:"state"`
	// The current product license status.
	Status string `pulumi:"status"`
	// Status description for the current product license status.
	StatusDescription string `pulumi:"statusDescription"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount int `pulumi:"totalActiveLicenseUnitCount"`
	// The number of license records associated with the product license.
	TotalLicenseRecordCount int `pulumi:"totalLicenseRecordCount"`
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed float64 `pulumi:"totalLicenseUnitsConsumed"`
	// The vendor of the ProductLicense
	VendorName string `pulumi:"vendorName"`
}

// GetProductLicensesProductLicenseCollectionItemInput is an input type that accepts GetProductLicensesProductLicenseCollectionItemArgs and GetProductLicensesProductLicenseCollectionItemOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionItemInput` via:
//
//	GetProductLicensesProductLicenseCollectionItemArgs{...}
type GetProductLicensesProductLicenseCollectionItemInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionItemOutput() GetProductLicensesProductLicenseCollectionItemOutput
	ToGetProductLicensesProductLicenseCollectionItemOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionItemOutput
}

type GetProductLicensesProductLicenseCollectionItemArgs struct {
	// The number of active license records associated with the product license.
	ActiveLicenseRecordCount pulumi.IntInput `pulumi:"activeLicenseRecordCount"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput `pulumi:"definedTags"`
	// License record name
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput `pulumi:"freeformTags"`
	// The image ID associated with the product license.
	Id pulumi.StringInput `pulumi:"id"`
	// The images associated with the product license.
	Images GetProductLicensesProductLicenseCollectionItemImageArrayInput `pulumi:"images"`
	// Specifies whether or not the product license is oversubscribed.
	IsOverSubscribed pulumi.BoolInput `pulumi:"isOverSubscribed"`
	// Specifies if the license unit count is unlimited.
	IsUnlimited pulumi.BoolInput `pulumi:"isUnlimited"`
	// Specifies whether the vendor is Oracle or a third party.
	IsVendorOracle pulumi.BoolInput `pulumi:"isVendorOracle"`
	// The product license unit.
	LicenseUnit pulumi.StringInput `pulumi:"licenseUnit"`
	// The current product license state.
	State pulumi.StringInput `pulumi:"state"`
	// The current product license status.
	Status pulumi.StringInput `pulumi:"status"`
	// Status description for the current product license status.
	StatusDescription pulumi.StringInput `pulumi:"statusDescription"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput `pulumi:"systemTags"`
	// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
	// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
	TotalActiveLicenseUnitCount pulumi.IntInput `pulumi:"totalActiveLicenseUnitCount"`
	// The number of license records associated with the product license.
	TotalLicenseRecordCount pulumi.IntInput `pulumi:"totalLicenseRecordCount"`
	// The number of license units consumed. Updated after each allocation run.
	TotalLicenseUnitsConsumed pulumi.Float64Input `pulumi:"totalLicenseUnitsConsumed"`
	// The vendor of the ProductLicense
	VendorName pulumi.StringInput `pulumi:"vendorName"`
}

func (GetProductLicensesProductLicenseCollectionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItem)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionItemArgs) ToGetProductLicensesProductLicenseCollectionItemOutput() GetProductLicensesProductLicenseCollectionItemOutput {
	return i.ToGetProductLicensesProductLicenseCollectionItemOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionItemArgs) ToGetProductLicensesProductLicenseCollectionItemOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionItemOutput)
}

// GetProductLicensesProductLicenseCollectionItemArrayInput is an input type that accepts GetProductLicensesProductLicenseCollectionItemArray and GetProductLicensesProductLicenseCollectionItemArrayOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionItemArrayInput` via:
//
//	GetProductLicensesProductLicenseCollectionItemArray{ GetProductLicensesProductLicenseCollectionItemArgs{...} }
type GetProductLicensesProductLicenseCollectionItemArrayInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionItemArrayOutput() GetProductLicensesProductLicenseCollectionItemArrayOutput
	ToGetProductLicensesProductLicenseCollectionItemArrayOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionItemArrayOutput
}

type GetProductLicensesProductLicenseCollectionItemArray []GetProductLicensesProductLicenseCollectionItemInput

func (GetProductLicensesProductLicenseCollectionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollectionItem)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionItemArray) ToGetProductLicensesProductLicenseCollectionItemArrayOutput() GetProductLicensesProductLicenseCollectionItemArrayOutput {
	return i.ToGetProductLicensesProductLicenseCollectionItemArrayOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionItemArray) ToGetProductLicensesProductLicenseCollectionItemArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionItemArrayOutput)
}

type GetProductLicensesProductLicenseCollectionItemOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItem)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionItemOutput) ToGetProductLicensesProductLicenseCollectionItemOutput() GetProductLicensesProductLicenseCollectionItemOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemOutput) ToGetProductLicensesProductLicenseCollectionItemOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemOutput {
	return o
}

// The number of active license records associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemOutput) ActiveLicenseRecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) int { return v.ActiveLicenseRecordCount }).(pulumi.IntOutput)
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) used for the license record, product license, and configuration.
func (o GetProductLicensesProductLicenseCollectionItemOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetProductLicensesProductLicenseCollectionItemOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// License record name
func (o GetProductLicensesProductLicenseCollectionItemOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetProductLicensesProductLicenseCollectionItemOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The image ID associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.Id }).(pulumi.StringOutput)
}

// The images associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemOutput) Images() GetProductLicensesProductLicenseCollectionItemImageArrayOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) []GetProductLicensesProductLicenseCollectionItemImage {
		return v.Images
	}).(GetProductLicensesProductLicenseCollectionItemImageArrayOutput)
}

// Specifies whether or not the product license is oversubscribed.
func (o GetProductLicensesProductLicenseCollectionItemOutput) IsOverSubscribed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) bool { return v.IsOverSubscribed }).(pulumi.BoolOutput)
}

// Specifies if the license unit count is unlimited.
func (o GetProductLicensesProductLicenseCollectionItemOutput) IsUnlimited() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) bool { return v.IsUnlimited }).(pulumi.BoolOutput)
}

// Specifies whether the vendor is Oracle or a third party.
func (o GetProductLicensesProductLicenseCollectionItemOutput) IsVendorOracle() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) bool { return v.IsVendorOracle }).(pulumi.BoolOutput)
}

// The product license unit.
func (o GetProductLicensesProductLicenseCollectionItemOutput) LicenseUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.LicenseUnit }).(pulumi.StringOutput)
}

// The current product license state.
func (o GetProductLicensesProductLicenseCollectionItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.State }).(pulumi.StringOutput)
}

// The current product license status.
func (o GetProductLicensesProductLicenseCollectionItemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.Status }).(pulumi.StringOutput)
}

// Status description for the current product license status.
func (o GetProductLicensesProductLicenseCollectionItemOutput) StatusDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.StatusDescription }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetProductLicensesProductLicenseCollectionItemOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the product license was created. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o GetProductLicensesProductLicenseCollectionItemOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the product license was updated. An [RFC 3339](https://tools.ietf.org/html/rfc3339)-formatted datetime string.
func (o GetProductLicensesProductLicenseCollectionItemOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The total number of licenses available for the product license, calculated by adding up all the license counts for active license records associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemOutput) TotalActiveLicenseUnitCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) int { return v.TotalActiveLicenseUnitCount }).(pulumi.IntOutput)
}

// The number of license records associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemOutput) TotalLicenseRecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) int { return v.TotalLicenseRecordCount }).(pulumi.IntOutput)
}

// The number of license units consumed. Updated after each allocation run.
func (o GetProductLicensesProductLicenseCollectionItemOutput) TotalLicenseUnitsConsumed() pulumi.Float64Output {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) float64 { return v.TotalLicenseUnitsConsumed }).(pulumi.Float64Output)
}

// The vendor of the ProductLicense
func (o GetProductLicensesProductLicenseCollectionItemOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItem) string { return v.VendorName }).(pulumi.StringOutput)
}

type GetProductLicensesProductLicenseCollectionItemArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollectionItem)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionItemArrayOutput) ToGetProductLicensesProductLicenseCollectionItemArrayOutput() GetProductLicensesProductLicenseCollectionItemArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemArrayOutput) ToGetProductLicensesProductLicenseCollectionItemArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemArrayOutput) Index(i pulumi.IntInput) GetProductLicensesProductLicenseCollectionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicensesProductLicenseCollectionItem {
		return vs[0].([]GetProductLicensesProductLicenseCollectionItem)[vs[1].(int)]
	}).(GetProductLicensesProductLicenseCollectionItemOutput)
}

type GetProductLicensesProductLicenseCollectionItemImage struct {
	// The image ID associated with the product license.
	Id string `pulumi:"id"`
	// The image listing ID.
	ListingId string `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName string `pulumi:"listingName"`
	// The image package version.
	PackageVersion string `pulumi:"packageVersion"`
	// The image publisher.
	Publisher string `pulumi:"publisher"`
}

// GetProductLicensesProductLicenseCollectionItemImageInput is an input type that accepts GetProductLicensesProductLicenseCollectionItemImageArgs and GetProductLicensesProductLicenseCollectionItemImageOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionItemImageInput` via:
//
//	GetProductLicensesProductLicenseCollectionItemImageArgs{...}
type GetProductLicensesProductLicenseCollectionItemImageInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionItemImageOutput() GetProductLicensesProductLicenseCollectionItemImageOutput
	ToGetProductLicensesProductLicenseCollectionItemImageOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionItemImageOutput
}

type GetProductLicensesProductLicenseCollectionItemImageArgs struct {
	// The image ID associated with the product license.
	Id pulumi.StringInput `pulumi:"id"`
	// The image listing ID.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// The listing name associated with the product license.
	ListingName pulumi.StringInput `pulumi:"listingName"`
	// The image package version.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The image publisher.
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (GetProductLicensesProductLicenseCollectionItemImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemImage)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionItemImageArgs) ToGetProductLicensesProductLicenseCollectionItemImageOutput() GetProductLicensesProductLicenseCollectionItemImageOutput {
	return i.ToGetProductLicensesProductLicenseCollectionItemImageOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionItemImageArgs) ToGetProductLicensesProductLicenseCollectionItemImageOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionItemImageOutput)
}

// GetProductLicensesProductLicenseCollectionItemImageArrayInput is an input type that accepts GetProductLicensesProductLicenseCollectionItemImageArray and GetProductLicensesProductLicenseCollectionItemImageArrayOutput values.
// You can construct a concrete instance of `GetProductLicensesProductLicenseCollectionItemImageArrayInput` via:
//
//	GetProductLicensesProductLicenseCollectionItemImageArray{ GetProductLicensesProductLicenseCollectionItemImageArgs{...} }
type GetProductLicensesProductLicenseCollectionItemImageArrayInput interface {
	pulumi.Input

	ToGetProductLicensesProductLicenseCollectionItemImageArrayOutput() GetProductLicensesProductLicenseCollectionItemImageArrayOutput
	ToGetProductLicensesProductLicenseCollectionItemImageArrayOutputWithContext(context.Context) GetProductLicensesProductLicenseCollectionItemImageArrayOutput
}

type GetProductLicensesProductLicenseCollectionItemImageArray []GetProductLicensesProductLicenseCollectionItemImageInput

func (GetProductLicensesProductLicenseCollectionItemImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollectionItemImage)(nil)).Elem()
}

func (i GetProductLicensesProductLicenseCollectionItemImageArray) ToGetProductLicensesProductLicenseCollectionItemImageArrayOutput() GetProductLicensesProductLicenseCollectionItemImageArrayOutput {
	return i.ToGetProductLicensesProductLicenseCollectionItemImageArrayOutputWithContext(context.Background())
}

func (i GetProductLicensesProductLicenseCollectionItemImageArray) ToGetProductLicensesProductLicenseCollectionItemImageArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProductLicensesProductLicenseCollectionItemImageArrayOutput)
}

type GetProductLicensesProductLicenseCollectionItemImageOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionItemImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemImage)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionItemImageOutput) ToGetProductLicensesProductLicenseCollectionItemImageOutput() GetProductLicensesProductLicenseCollectionItemImageOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemImageOutput) ToGetProductLicensesProductLicenseCollectionItemImageOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemImageOutput {
	return o
}

// The image ID associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItemImage) string { return v.Id }).(pulumi.StringOutput)
}

// The image listing ID.
func (o GetProductLicensesProductLicenseCollectionItemImageOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItemImage) string { return v.ListingId }).(pulumi.StringOutput)
}

// The listing name associated with the product license.
func (o GetProductLicensesProductLicenseCollectionItemImageOutput) ListingName() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItemImage) string { return v.ListingName }).(pulumi.StringOutput)
}

// The image package version.
func (o GetProductLicensesProductLicenseCollectionItemImageOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItemImage) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The image publisher.
func (o GetProductLicensesProductLicenseCollectionItemImageOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductLicensesProductLicenseCollectionItemImage) string { return v.Publisher }).(pulumi.StringOutput)
}

type GetProductLicensesProductLicenseCollectionItemImageArrayOutput struct{ *pulumi.OutputState }

func (GetProductLicensesProductLicenseCollectionItemImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProductLicensesProductLicenseCollectionItemImage)(nil)).Elem()
}

func (o GetProductLicensesProductLicenseCollectionItemImageArrayOutput) ToGetProductLicensesProductLicenseCollectionItemImageArrayOutput() GetProductLicensesProductLicenseCollectionItemImageArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemImageArrayOutput) ToGetProductLicensesProductLicenseCollectionItemImageArrayOutputWithContext(ctx context.Context) GetProductLicensesProductLicenseCollectionItemImageArrayOutput {
	return o
}

func (o GetProductLicensesProductLicenseCollectionItemImageArrayOutput) Index(i pulumi.IntInput) GetProductLicensesProductLicenseCollectionItemImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProductLicensesProductLicenseCollectionItemImage {
		return vs[0].([]GetProductLicensesProductLicenseCollectionItemImage)[vs[1].(int)]
	}).(GetProductLicensesProductLicenseCollectionItemImageOutput)
}

type GetTopUtilizedProductLicensesItem struct {
	// Specifies if the license unit count is unlimited.
	IsUnlimited bool `pulumi:"isUnlimited"`
	// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ProductLicenseId string `pulumi:"productLicenseId"`
	// The product type.
	ProductType string `pulumi:"productType"`
	// The current product license status.
	Status string `pulumi:"status"`
	// Total number of license units in the product license provided by the user.
	TotalLicenseUnitCount int `pulumi:"totalLicenseUnitCount"`
	// Number of license units consumed.
	TotalUnitsConsumed float64 `pulumi:"totalUnitsConsumed"`
	// The product license unit.
	UnitType string `pulumi:"unitType"`
}

// GetTopUtilizedProductLicensesItemInput is an input type that accepts GetTopUtilizedProductLicensesItemArgs and GetTopUtilizedProductLicensesItemOutput values.
// You can construct a concrete instance of `GetTopUtilizedProductLicensesItemInput` via:
//
//	GetTopUtilizedProductLicensesItemArgs{...}
type GetTopUtilizedProductLicensesItemInput interface {
	pulumi.Input

	ToGetTopUtilizedProductLicensesItemOutput() GetTopUtilizedProductLicensesItemOutput
	ToGetTopUtilizedProductLicensesItemOutputWithContext(context.Context) GetTopUtilizedProductLicensesItemOutput
}

type GetTopUtilizedProductLicensesItemArgs struct {
	// Specifies if the license unit count is unlimited.
	IsUnlimited pulumi.BoolInput `pulumi:"isUnlimited"`
	// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ProductLicenseId pulumi.StringInput `pulumi:"productLicenseId"`
	// The product type.
	ProductType pulumi.StringInput `pulumi:"productType"`
	// The current product license status.
	Status pulumi.StringInput `pulumi:"status"`
	// Total number of license units in the product license provided by the user.
	TotalLicenseUnitCount pulumi.IntInput `pulumi:"totalLicenseUnitCount"`
	// Number of license units consumed.
	TotalUnitsConsumed pulumi.Float64Input `pulumi:"totalUnitsConsumed"`
	// The product license unit.
	UnitType pulumi.StringInput `pulumi:"unitType"`
}

func (GetTopUtilizedProductLicensesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopUtilizedProductLicensesItem)(nil)).Elem()
}

func (i GetTopUtilizedProductLicensesItemArgs) ToGetTopUtilizedProductLicensesItemOutput() GetTopUtilizedProductLicensesItemOutput {
	return i.ToGetTopUtilizedProductLicensesItemOutputWithContext(context.Background())
}

func (i GetTopUtilizedProductLicensesItemArgs) ToGetTopUtilizedProductLicensesItemOutputWithContext(ctx context.Context) GetTopUtilizedProductLicensesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopUtilizedProductLicensesItemOutput)
}

// GetTopUtilizedProductLicensesItemArrayInput is an input type that accepts GetTopUtilizedProductLicensesItemArray and GetTopUtilizedProductLicensesItemArrayOutput values.
// You can construct a concrete instance of `GetTopUtilizedProductLicensesItemArrayInput` via:
//
//	GetTopUtilizedProductLicensesItemArray{ GetTopUtilizedProductLicensesItemArgs{...} }
type GetTopUtilizedProductLicensesItemArrayInput interface {
	pulumi.Input

	ToGetTopUtilizedProductLicensesItemArrayOutput() GetTopUtilizedProductLicensesItemArrayOutput
	ToGetTopUtilizedProductLicensesItemArrayOutputWithContext(context.Context) GetTopUtilizedProductLicensesItemArrayOutput
}

type GetTopUtilizedProductLicensesItemArray []GetTopUtilizedProductLicensesItemInput

func (GetTopUtilizedProductLicensesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopUtilizedProductLicensesItem)(nil)).Elem()
}

func (i GetTopUtilizedProductLicensesItemArray) ToGetTopUtilizedProductLicensesItemArrayOutput() GetTopUtilizedProductLicensesItemArrayOutput {
	return i.ToGetTopUtilizedProductLicensesItemArrayOutputWithContext(context.Background())
}

func (i GetTopUtilizedProductLicensesItemArray) ToGetTopUtilizedProductLicensesItemArrayOutputWithContext(ctx context.Context) GetTopUtilizedProductLicensesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopUtilizedProductLicensesItemArrayOutput)
}

type GetTopUtilizedProductLicensesItemOutput struct{ *pulumi.OutputState }

func (GetTopUtilizedProductLicensesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopUtilizedProductLicensesItem)(nil)).Elem()
}

func (o GetTopUtilizedProductLicensesItemOutput) ToGetTopUtilizedProductLicensesItemOutput() GetTopUtilizedProductLicensesItemOutput {
	return o
}

func (o GetTopUtilizedProductLicensesItemOutput) ToGetTopUtilizedProductLicensesItemOutputWithContext(ctx context.Context) GetTopUtilizedProductLicensesItemOutput {
	return o
}

// Specifies if the license unit count is unlimited.
func (o GetTopUtilizedProductLicensesItemOutput) IsUnlimited() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) bool { return v.IsUnlimited }).(pulumi.BoolOutput)
}

// The product license [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o GetTopUtilizedProductLicensesItemOutput) ProductLicenseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) string { return v.ProductLicenseId }).(pulumi.StringOutput)
}

// The product type.
func (o GetTopUtilizedProductLicensesItemOutput) ProductType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) string { return v.ProductType }).(pulumi.StringOutput)
}

// The current product license status.
func (o GetTopUtilizedProductLicensesItemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) string { return v.Status }).(pulumi.StringOutput)
}

// Total number of license units in the product license provided by the user.
func (o GetTopUtilizedProductLicensesItemOutput) TotalLicenseUnitCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) int { return v.TotalLicenseUnitCount }).(pulumi.IntOutput)
}

// Number of license units consumed.
func (o GetTopUtilizedProductLicensesItemOutput) TotalUnitsConsumed() pulumi.Float64Output {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) float64 { return v.TotalUnitsConsumed }).(pulumi.Float64Output)
}

// The product license unit.
func (o GetTopUtilizedProductLicensesItemOutput) UnitType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedProductLicensesItem) string { return v.UnitType }).(pulumi.StringOutput)
}

type GetTopUtilizedProductLicensesItemArrayOutput struct{ *pulumi.OutputState }

func (GetTopUtilizedProductLicensesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopUtilizedProductLicensesItem)(nil)).Elem()
}

func (o GetTopUtilizedProductLicensesItemArrayOutput) ToGetTopUtilizedProductLicensesItemArrayOutput() GetTopUtilizedProductLicensesItemArrayOutput {
	return o
}

func (o GetTopUtilizedProductLicensesItemArrayOutput) ToGetTopUtilizedProductLicensesItemArrayOutputWithContext(ctx context.Context) GetTopUtilizedProductLicensesItemArrayOutput {
	return o
}

func (o GetTopUtilizedProductLicensesItemArrayOutput) Index(i pulumi.IntInput) GetTopUtilizedProductLicensesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopUtilizedProductLicensesItem {
		return vs[0].([]GetTopUtilizedProductLicensesItem)[vs[1].(int)]
	}).(GetTopUtilizedProductLicensesItemOutput)
}

type GetTopUtilizedResourcesItem struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that contains the resource.
	ResourceCompartmentId string `pulumi:"resourceCompartmentId"`
	// The display name of the compartment that contains the resource.
	ResourceCompartmentName string `pulumi:"resourceCompartmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
	ResourceId string `pulumi:"resourceId"`
	// Resource canonical name.
	ResourceName string `pulumi:"resourceName"`
	// Number of license units consumed by the resource.
	TotalUnits float64 `pulumi:"totalUnits"`
	// The resource unit.
	UnitType string `pulumi:"unitType"`
}

// GetTopUtilizedResourcesItemInput is an input type that accepts GetTopUtilizedResourcesItemArgs and GetTopUtilizedResourcesItemOutput values.
// You can construct a concrete instance of `GetTopUtilizedResourcesItemInput` via:
//
//	GetTopUtilizedResourcesItemArgs{...}
type GetTopUtilizedResourcesItemInput interface {
	pulumi.Input

	ToGetTopUtilizedResourcesItemOutput() GetTopUtilizedResourcesItemOutput
	ToGetTopUtilizedResourcesItemOutputWithContext(context.Context) GetTopUtilizedResourcesItemOutput
}

type GetTopUtilizedResourcesItemArgs struct {
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that contains the resource.
	ResourceCompartmentId pulumi.StringInput `pulumi:"resourceCompartmentId"`
	// The display name of the compartment that contains the resource.
	ResourceCompartmentName pulumi.StringInput `pulumi:"resourceCompartmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Resource canonical name.
	ResourceName pulumi.StringInput `pulumi:"resourceName"`
	// Number of license units consumed by the resource.
	TotalUnits pulumi.Float64Input `pulumi:"totalUnits"`
	// The resource unit.
	UnitType pulumi.StringInput `pulumi:"unitType"`
}

func (GetTopUtilizedResourcesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopUtilizedResourcesItem)(nil)).Elem()
}

func (i GetTopUtilizedResourcesItemArgs) ToGetTopUtilizedResourcesItemOutput() GetTopUtilizedResourcesItemOutput {
	return i.ToGetTopUtilizedResourcesItemOutputWithContext(context.Background())
}

func (i GetTopUtilizedResourcesItemArgs) ToGetTopUtilizedResourcesItemOutputWithContext(ctx context.Context) GetTopUtilizedResourcesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopUtilizedResourcesItemOutput)
}

// GetTopUtilizedResourcesItemArrayInput is an input type that accepts GetTopUtilizedResourcesItemArray and GetTopUtilizedResourcesItemArrayOutput values.
// You can construct a concrete instance of `GetTopUtilizedResourcesItemArrayInput` via:
//
//	GetTopUtilizedResourcesItemArray{ GetTopUtilizedResourcesItemArgs{...} }
type GetTopUtilizedResourcesItemArrayInput interface {
	pulumi.Input

	ToGetTopUtilizedResourcesItemArrayOutput() GetTopUtilizedResourcesItemArrayOutput
	ToGetTopUtilizedResourcesItemArrayOutputWithContext(context.Context) GetTopUtilizedResourcesItemArrayOutput
}

type GetTopUtilizedResourcesItemArray []GetTopUtilizedResourcesItemInput

func (GetTopUtilizedResourcesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopUtilizedResourcesItem)(nil)).Elem()
}

func (i GetTopUtilizedResourcesItemArray) ToGetTopUtilizedResourcesItemArrayOutput() GetTopUtilizedResourcesItemArrayOutput {
	return i.ToGetTopUtilizedResourcesItemArrayOutputWithContext(context.Background())
}

func (i GetTopUtilizedResourcesItemArray) ToGetTopUtilizedResourcesItemArrayOutputWithContext(ctx context.Context) GetTopUtilizedResourcesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopUtilizedResourcesItemArrayOutput)
}

type GetTopUtilizedResourcesItemOutput struct{ *pulumi.OutputState }

func (GetTopUtilizedResourcesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopUtilizedResourcesItem)(nil)).Elem()
}

func (o GetTopUtilizedResourcesItemOutput) ToGetTopUtilizedResourcesItemOutput() GetTopUtilizedResourcesItemOutput {
	return o
}

func (o GetTopUtilizedResourcesItemOutput) ToGetTopUtilizedResourcesItemOutputWithContext(ctx context.Context) GetTopUtilizedResourcesItemOutput {
	return o
}

// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) that contains the resource.
func (o GetTopUtilizedResourcesItemOutput) ResourceCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) string { return v.ResourceCompartmentId }).(pulumi.StringOutput)
}

// The display name of the compartment that contains the resource.
func (o GetTopUtilizedResourcesItemOutput) ResourceCompartmentName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) string { return v.ResourceCompartmentName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the resource.
func (o GetTopUtilizedResourcesItemOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Resource canonical name.
func (o GetTopUtilizedResourcesItemOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) string { return v.ResourceName }).(pulumi.StringOutput)
}

// Number of license units consumed by the resource.
func (o GetTopUtilizedResourcesItemOutput) TotalUnits() pulumi.Float64Output {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) float64 { return v.TotalUnits }).(pulumi.Float64Output)
}

// The resource unit.
func (o GetTopUtilizedResourcesItemOutput) UnitType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopUtilizedResourcesItem) string { return v.UnitType }).(pulumi.StringOutput)
}

type GetTopUtilizedResourcesItemArrayOutput struct{ *pulumi.OutputState }

func (GetTopUtilizedResourcesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopUtilizedResourcesItem)(nil)).Elem()
}

func (o GetTopUtilizedResourcesItemArrayOutput) ToGetTopUtilizedResourcesItemArrayOutput() GetTopUtilizedResourcesItemArrayOutput {
	return o
}

func (o GetTopUtilizedResourcesItemArrayOutput) ToGetTopUtilizedResourcesItemArrayOutputWithContext(ctx context.Context) GetTopUtilizedResourcesItemArrayOutput {
	return o
}

func (o GetTopUtilizedResourcesItemArrayOutput) Index(i pulumi.IntInput) GetTopUtilizedResourcesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopUtilizedResourcesItem {
		return vs[0].([]GetTopUtilizedResourcesItem)[vs[1].(int)]
	}).(GetTopUtilizedResourcesItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductLicenseImageInput)(nil)).Elem(), ProductLicenseImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductLicenseImageArrayInput)(nil)).Elem(), ProductLicenseImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsFilterInput)(nil)).Elem(), GetLicenseRecordsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsFilterArrayInput)(nil)).Elem(), GetLicenseRecordsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionInput)(nil)).Elem(), GetLicenseRecordsLicenseRecordCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionArrayInput)(nil)).Elem(), GetLicenseRecordsLicenseRecordCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionItemInput)(nil)).Elem(), GetLicenseRecordsLicenseRecordCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLicenseRecordsLicenseRecordCollectionItemArrayInput)(nil)).Elem(), GetLicenseRecordsLicenseRecordCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseConsumersItemInput)(nil)).Elem(), GetProductLicenseConsumersItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseConsumersItemArrayInput)(nil)).Elem(), GetProductLicenseConsumersItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseConsumersItemMissingProductInput)(nil)).Elem(), GetProductLicenseConsumersItemMissingProductArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseConsumersItemMissingProductArrayInput)(nil)).Elem(), GetProductLicenseConsumersItemMissingProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseImageInput)(nil)).Elem(), GetProductLicenseImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicenseImageArrayInput)(nil)).Elem(), GetProductLicenseImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesFilterInput)(nil)).Elem(), GetProductLicensesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesFilterArrayInput)(nil)).Elem(), GetProductLicensesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionArrayInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemArrayInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemImageInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionItemImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProductLicensesProductLicenseCollectionItemImageArrayInput)(nil)).Elem(), GetProductLicensesProductLicenseCollectionItemImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopUtilizedProductLicensesItemInput)(nil)).Elem(), GetTopUtilizedProductLicensesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopUtilizedProductLicensesItemArrayInput)(nil)).Elem(), GetTopUtilizedProductLicensesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopUtilizedResourcesItemInput)(nil)).Elem(), GetTopUtilizedResourcesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopUtilizedResourcesItemArrayInput)(nil)).Elem(), GetTopUtilizedResourcesItemArray{})
	pulumi.RegisterOutputType(ProductLicenseImageOutput{})
	pulumi.RegisterOutputType(ProductLicenseImageArrayOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsFilterOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsLicenseRecordCollectionOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsLicenseRecordCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsLicenseRecordCollectionItemOutput{})
	pulumi.RegisterOutputType(GetLicenseRecordsLicenseRecordCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicenseConsumersItemOutput{})
	pulumi.RegisterOutputType(GetProductLicenseConsumersItemArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicenseConsumersItemMissingProductOutput{})
	pulumi.RegisterOutputType(GetProductLicenseConsumersItemMissingProductArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicenseImageOutput{})
	pulumi.RegisterOutputType(GetProductLicenseImageArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicensesFilterOutput{})
	pulumi.RegisterOutputType(GetProductLicensesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionItemOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionItemArrayOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionItemImageOutput{})
	pulumi.RegisterOutputType(GetProductLicensesProductLicenseCollectionItemImageArrayOutput{})
	pulumi.RegisterOutputType(GetTopUtilizedProductLicensesItemOutput{})
	pulumi.RegisterOutputType(GetTopUtilizedProductLicensesItemArrayOutput{})
	pulumi.RegisterOutputType(GetTopUtilizedResourcesItemOutput{})
	pulumi.RegisterOutputType(GetTopUtilizedResourcesItemArrayOutput{})
}
