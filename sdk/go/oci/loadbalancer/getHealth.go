// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Load Balancer Health resource in Oracle Cloud Infrastructure Load Balancer service.
//
// Gets the health status for the specified load balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LoadBalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LoadBalancer.GetHealth(ctx, &loadbalancer.GetHealthArgs{
//				LoadBalancerId: oci_load_balancer_load_balancer.Test_load_balancer.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetHealth(ctx *pulumi.Context, args *GetHealthArgs, opts ...pulumi.InvokeOption) (*GetHealthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHealthResult
	err := ctx.Invoke("oci:LoadBalancer/getHealth:getHealth", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHealth.
type GetHealthArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to return health status for.
	LoadBalancerId string `pulumi:"loadBalancerId"`
}

// A collection of values returned by getHealth.
type GetHealthResult struct {
	// A list of backend sets that are currently in the `CRITICAL` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet`
	CriticalStateBackendSetNames []string `pulumi:"criticalStateBackendSetNames"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The overall health status of the load balancer.
	// *  **OK:** All backend sets associated with the load balancer return a status of `OK`.
	// *  **WARNING:** At least one of the backend sets associated with the load balancer returns a status of `WARNING`, no backend sets return a status of `CRITICAL`, and the load balancer life cycle state is `ACTIVE`.
	// *  **CRITICAL:** One or more of the backend sets associated with the load balancer return a status of `CRITICAL`.
	// *  **UNKNOWN:** If any one of the following conditions is true:
	// *  The load balancer life cycle state is not `ACTIVE`.
	// *  No backend sets are defined for the load balancer.
	// *  More than half of the backend sets associated with the load balancer return a status of `UNKNOWN`, none of the backend sets return a status of `WARNING` or `CRITICAL`, and the load balancer life cycle state is `ACTIVE`.
	// *  The system could not retrieve metrics for any reason.
	Status string `pulumi:"status"`
	// The total number of backend sets associated with this load balancer.  Example: `4`
	TotalBackendSetCount int `pulumi:"totalBackendSetCount"`
	// A list of backend sets that are currently in the `UNKNOWN` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet2`
	UnknownStateBackendSetNames []string `pulumi:"unknownStateBackendSetNames"`
	// A list of backend sets that are currently in the `WARNING` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet3`
	WarningStateBackendSetNames []string `pulumi:"warningStateBackendSetNames"`
}

func GetHealthOutput(ctx *pulumi.Context, args GetHealthOutputArgs, opts ...pulumi.InvokeOption) GetHealthResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHealthResult, error) {
			args := v.(GetHealthArgs)
			r, err := GetHealth(ctx, &args, opts...)
			var s GetHealthResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHealthResultOutput)
}

// A collection of arguments for invoking getHealth.
type GetHealthOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to return health status for.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
}

func (GetHealthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHealthArgs)(nil)).Elem()
}

// A collection of values returned by getHealth.
type GetHealthResultOutput struct{ *pulumi.OutputState }

func (GetHealthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHealthResult)(nil)).Elem()
}

func (o GetHealthResultOutput) ToGetHealthResultOutput() GetHealthResultOutput {
	return o
}

func (o GetHealthResultOutput) ToGetHealthResultOutputWithContext(ctx context.Context) GetHealthResultOutput {
	return o
}

// A list of backend sets that are currently in the `CRITICAL` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet`
func (o GetHealthResultOutput) CriticalStateBackendSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHealthResult) []string { return v.CriticalStateBackendSetNames }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHealthResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHealthResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHealthResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHealthResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The overall health status of the load balancer.
// *  **OK:** All backend sets associated with the load balancer return a status of `OK`.
// *  **WARNING:** At least one of the backend sets associated with the load balancer returns a status of `WARNING`, no backend sets return a status of `CRITICAL`, and the load balancer life cycle state is `ACTIVE`.
// *  **CRITICAL:** One or more of the backend sets associated with the load balancer return a status of `CRITICAL`.
// *  **UNKNOWN:** If any one of the following conditions is true:
// *  The load balancer life cycle state is not `ACTIVE`.
// *  No backend sets are defined for the load balancer.
// *  More than half of the backend sets associated with the load balancer return a status of `UNKNOWN`, none of the backend sets return a status of `WARNING` or `CRITICAL`, and the load balancer life cycle state is `ACTIVE`.
// *  The system could not retrieve metrics for any reason.
func (o GetHealthResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetHealthResult) string { return v.Status }).(pulumi.StringOutput)
}

// The total number of backend sets associated with this load balancer.  Example: `4`
func (o GetHealthResultOutput) TotalBackendSetCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetHealthResult) int { return v.TotalBackendSetCount }).(pulumi.IntOutput)
}

// A list of backend sets that are currently in the `UNKNOWN` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet2`
func (o GetHealthResultOutput) UnknownStateBackendSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHealthResult) []string { return v.UnknownStateBackendSetNames }).(pulumi.StringArrayOutput)
}

// A list of backend sets that are currently in the `WARNING` health state. The list identifies each backend set by the friendly name you assigned when you created it.  Example: `exampleBackendSet3`
func (o GetHealthResultOutput) WarningStateBackendSetNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHealthResult) []string { return v.WarningStateBackendSetNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHealthResultOutput{})
}
