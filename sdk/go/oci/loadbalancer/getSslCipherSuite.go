// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Ssl Cipher Suite resource in Oracle Cloud Infrastructure Load Balancer service.
//
// Gets the specified SSL cipher suite's configuration information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/loadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.GetSslCipherSuite(ctx, &loadbalancer.GetSslCipherSuiteArgs{
//				LoadBalancerId: testLoadBalancer.Id,
//				Name:           sslCipherSuiteName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSslCipherSuite(ctx *pulumi.Context, args *LookupSslCipherSuiteArgs, opts ...pulumi.InvokeOption) (*LookupSslCipherSuiteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSslCipherSuiteResult
	err := ctx.Invoke("oci:LoadBalancer/getSslCipherSuite:getSslCipherSuite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSslCipherSuite.
type LookupSslCipherSuiteArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The name of the SSL cipher suite to retrieve.
	//
	// example: `exampleCipherSuite`
	Name string `pulumi:"name"`
}

// A collection of values returned by getSslCipherSuite.
type LookupSslCipherSuiteResult struct {
	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers        []string `pulumi:"ciphers"`
	Id             string   `pulumi:"id"`
	LoadBalancerId string   `pulumi:"loadBalancerId"`
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name  string `pulumi:"name"`
	State string `pulumi:"state"`
}

func LookupSslCipherSuiteOutput(ctx *pulumi.Context, args LookupSslCipherSuiteOutputArgs, opts ...pulumi.InvokeOption) LookupSslCipherSuiteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSslCipherSuiteResultOutput, error) {
			args := v.(LookupSslCipherSuiteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:LoadBalancer/getSslCipherSuite:getSslCipherSuite", args, LookupSslCipherSuiteResultOutput{}, options).(LookupSslCipherSuiteResultOutput), nil
		}).(LookupSslCipherSuiteResultOutput)
}

// A collection of arguments for invoking getSslCipherSuite.
type LookupSslCipherSuiteOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The name of the SSL cipher suite to retrieve.
	//
	// example: `exampleCipherSuite`
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSslCipherSuiteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSslCipherSuiteArgs)(nil)).Elem()
}

// A collection of values returned by getSslCipherSuite.
type LookupSslCipherSuiteResultOutput struct{ *pulumi.OutputState }

func (LookupSslCipherSuiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSslCipherSuiteResult)(nil)).Elem()
}

func (o LookupSslCipherSuiteResultOutput) ToLookupSslCipherSuiteResultOutput() LookupSslCipherSuiteResultOutput {
	return o
}

func (o LookupSslCipherSuiteResultOutput) ToLookupSslCipherSuiteResultOutputWithContext(ctx context.Context) LookupSslCipherSuiteResultOutput {
	return o
}

// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
func (o LookupSslCipherSuiteResultOutput) Ciphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSslCipherSuiteResult) []string { return v.Ciphers }).(pulumi.StringArrayOutput)
}

func (o LookupSslCipherSuiteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSslCipherSuiteResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSslCipherSuiteResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSslCipherSuiteResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
func (o LookupSslCipherSuiteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSslCipherSuiteResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSslCipherSuiteResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSslCipherSuiteResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSslCipherSuiteResultOutput{})
}
