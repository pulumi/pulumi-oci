// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Log Analytics Entity Topology resource in Oracle Cloud Infrastructure Log Analytics service.
//
// Return a log analytics entity topology collection that contains a set of log analytics entities and a set of relationships between those, for the input source entity.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LogAnalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LogAnalytics.GetLogAnalyticsEntityTopology(ctx, &loganalytics.GetLogAnalyticsEntityTopologyArgs{
//				LogAnalyticsEntityId: testLogAnalyticsEntity.Id,
//				Namespace:            logAnalyticsEntityTopologyNamespace,
//				MetadataEquals:       logAnalyticsEntityTopologyMetadataEquals,
//				State:                pulumi.StringRef(logAnalyticsEntityTopologyState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetLogAnalyticsEntityTopology(ctx *pulumi.Context, args *GetLogAnalyticsEntityTopologyArgs, opts ...pulumi.InvokeOption) (*GetLogAnalyticsEntityTopologyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLogAnalyticsEntityTopologyResult
	err := ctx.Invoke("oci:LogAnalytics/getLogAnalyticsEntityTopology:getLogAnalyticsEntityTopology", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogAnalyticsEntityTopology.
type GetLogAnalyticsEntityTopologyArgs struct {
	// The log analytics entity OCID.
	LogAnalyticsEntityId string `pulumi:"logAnalyticsEntityId"`
	// A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format "{name}:{value}:{type}".  All inputs are case-insensitive.
	MetadataEquals []string `pulumi:"metadataEquals"`
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
	// A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getLogAnalyticsEntityTopology.
type GetLogAnalyticsEntityTopologyResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An array of entity metadata.
	Items                []GetLogAnalyticsEntityTopologyItem `pulumi:"items"`
	LogAnalyticsEntityId string                              `pulumi:"logAnalyticsEntityId"`
	MetadataEquals       []string                            `pulumi:"metadataEquals"`
	Namespace            string                              `pulumi:"namespace"`
	// The current state of the log analytics entity.
	State *string `pulumi:"state"`
}

func GetLogAnalyticsEntityTopologyOutput(ctx *pulumi.Context, args GetLogAnalyticsEntityTopologyOutputArgs, opts ...pulumi.InvokeOption) GetLogAnalyticsEntityTopologyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLogAnalyticsEntityTopologyResult, error) {
			args := v.(GetLogAnalyticsEntityTopologyArgs)
			r, err := GetLogAnalyticsEntityTopology(ctx, &args, opts...)
			var s GetLogAnalyticsEntityTopologyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLogAnalyticsEntityTopologyResultOutput)
}

// A collection of arguments for invoking getLogAnalyticsEntityTopology.
type GetLogAnalyticsEntityTopologyOutputArgs struct {
	// The log analytics entity OCID.
	LogAnalyticsEntityId pulumi.StringInput `pulumi:"logAnalyticsEntityId"`
	// A filter to return only log analytics entities whose metadata name, value and type matches the specified string. Each item in the array has the format "{name}:{value}:{type}".  All inputs are case-insensitive.
	MetadataEquals pulumi.StringArrayInput `pulumi:"metadataEquals"`
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// A filter to return only those log analytics entities with the specified lifecycle state. The state value is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetLogAnalyticsEntityTopologyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogAnalyticsEntityTopologyArgs)(nil)).Elem()
}

// A collection of values returned by getLogAnalyticsEntityTopology.
type GetLogAnalyticsEntityTopologyResultOutput struct{ *pulumi.OutputState }

func (GetLogAnalyticsEntityTopologyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogAnalyticsEntityTopologyResult)(nil)).Elem()
}

func (o GetLogAnalyticsEntityTopologyResultOutput) ToGetLogAnalyticsEntityTopologyResultOutput() GetLogAnalyticsEntityTopologyResultOutput {
	return o
}

func (o GetLogAnalyticsEntityTopologyResultOutput) ToGetLogAnalyticsEntityTopologyResultOutputWithContext(ctx context.Context) GetLogAnalyticsEntityTopologyResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetLogAnalyticsEntityTopologyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) string { return v.Id }).(pulumi.StringOutput)
}

// An array of entity metadata.
func (o GetLogAnalyticsEntityTopologyResultOutput) Items() GetLogAnalyticsEntityTopologyItemArrayOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) []GetLogAnalyticsEntityTopologyItem { return v.Items }).(GetLogAnalyticsEntityTopologyItemArrayOutput)
}

func (o GetLogAnalyticsEntityTopologyResultOutput) LogAnalyticsEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) string { return v.LogAnalyticsEntityId }).(pulumi.StringOutput)
}

func (o GetLogAnalyticsEntityTopologyResultOutput) MetadataEquals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) []string { return v.MetadataEquals }).(pulumi.StringArrayOutput)
}

func (o GetLogAnalyticsEntityTopologyResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// The current state of the log analytics entity.
func (o GetLogAnalyticsEntityTopologyResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLogAnalyticsEntityTopologyResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLogAnalyticsEntityTopologyResultOutput{})
}
