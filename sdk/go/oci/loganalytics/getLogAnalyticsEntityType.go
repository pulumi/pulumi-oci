// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Log Analytics Entity Type resource in Oracle Cloud Infrastructure Log Analytics service.
//
// Retrieve the log analytics entity type with the given name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/loganalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loganalytics.GetLogAnalyticsEntityType(ctx, &loganalytics.GetLogAnalyticsEntityTypeArgs{
//				EntityTypeName: logAnalyticsEntityTypeName,
//				Namespace:      logAnalyticsEntityTypeNamespace,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLogAnalyticsEntityType(ctx *pulumi.Context, args *LookupLogAnalyticsEntityTypeArgs, opts ...pulumi.InvokeOption) (*LookupLogAnalyticsEntityTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogAnalyticsEntityTypeResult
	err := ctx.Invoke("oci:LogAnalytics/getLogAnalyticsEntityType:getLogAnalyticsEntityType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogAnalyticsEntityType.
type LookupLogAnalyticsEntityTypeArgs struct {
	// Log analytics entity type name.
	EntityTypeName string `pulumi:"entityTypeName"`
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
}

// A collection of values returned by getLogAnalyticsEntityType.
type LookupLogAnalyticsEntityTypeResult struct {
	// Log analytics entity type category. Category will be used for grouping and filtering.
	Category string `pulumi:"category"`
	// Log analytics entity type group. That can be CLOUD (OCI) or NON_CLOUD otherwise.
	CloudType      string `pulumi:"cloudType"`
	EntityTypeName string `pulumi:"entityTypeName"`
	Id             string `pulumi:"id"`
	// Internal name for the log analytics entity type.
	InternalName                     string `pulumi:"internalName"`
	ManagementAgentEligibilityStatus string `pulumi:"managementAgentEligibilityStatus"`
	// Log analytics entity type property name.
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
	// The parameters used in file patterns specified in log sources for this log analytics entity type.
	Properties []GetLogAnalyticsEntityTypeProperty `pulumi:"properties"`
	// The current lifecycle state of the log analytics entity type.
	State string `pulumi:"state"`
	// Time the log analytics entity type was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupLogAnalyticsEntityTypeOutput(ctx *pulumi.Context, args LookupLogAnalyticsEntityTypeOutputArgs, opts ...pulumi.InvokeOption) LookupLogAnalyticsEntityTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLogAnalyticsEntityTypeResultOutput, error) {
			args := v.(LookupLogAnalyticsEntityTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:LogAnalytics/getLogAnalyticsEntityType:getLogAnalyticsEntityType", args, LookupLogAnalyticsEntityTypeResultOutput{}, options).(LookupLogAnalyticsEntityTypeResultOutput), nil
		}).(LookupLogAnalyticsEntityTypeResultOutput)
}

// A collection of arguments for invoking getLogAnalyticsEntityType.
type LookupLogAnalyticsEntityTypeOutputArgs struct {
	// Log analytics entity type name.
	EntityTypeName pulumi.StringInput `pulumi:"entityTypeName"`
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (LookupLogAnalyticsEntityTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogAnalyticsEntityTypeArgs)(nil)).Elem()
}

// A collection of values returned by getLogAnalyticsEntityType.
type LookupLogAnalyticsEntityTypeResultOutput struct{ *pulumi.OutputState }

func (LookupLogAnalyticsEntityTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogAnalyticsEntityTypeResult)(nil)).Elem()
}

func (o LookupLogAnalyticsEntityTypeResultOutput) ToLookupLogAnalyticsEntityTypeResultOutput() LookupLogAnalyticsEntityTypeResultOutput {
	return o
}

func (o LookupLogAnalyticsEntityTypeResultOutput) ToLookupLogAnalyticsEntityTypeResultOutputWithContext(ctx context.Context) LookupLogAnalyticsEntityTypeResultOutput {
	return o
}

// Log analytics entity type category. Category will be used for grouping and filtering.
func (o LookupLogAnalyticsEntityTypeResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.Category }).(pulumi.StringOutput)
}

// Log analytics entity type group. That can be CLOUD (OCI) or NON_CLOUD otherwise.
func (o LookupLogAnalyticsEntityTypeResultOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.CloudType }).(pulumi.StringOutput)
}

func (o LookupLogAnalyticsEntityTypeResultOutput) EntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.EntityTypeName }).(pulumi.StringOutput)
}

func (o LookupLogAnalyticsEntityTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Internal name for the log analytics entity type.
func (o LookupLogAnalyticsEntityTypeResultOutput) InternalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.InternalName }).(pulumi.StringOutput)
}

func (o LookupLogAnalyticsEntityTypeResultOutput) ManagementAgentEligibilityStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.ManagementAgentEligibilityStatus }).(pulumi.StringOutput)
}

// Log analytics entity type property name.
func (o LookupLogAnalyticsEntityTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupLogAnalyticsEntityTypeResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// The parameters used in file patterns specified in log sources for this log analytics entity type.
func (o LookupLogAnalyticsEntityTypeResultOutput) Properties() GetLogAnalyticsEntityTypePropertyArrayOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) []GetLogAnalyticsEntityTypeProperty { return v.Properties }).(GetLogAnalyticsEntityTypePropertyArrayOutput)
}

// The current lifecycle state of the log analytics entity type.
func (o LookupLogAnalyticsEntityTypeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.State }).(pulumi.StringOutput)
}

// Time the log analytics entity type was created. An RFC3339 formatted datetime string.
func (o LookupLogAnalyticsEntityTypeResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Time the log analytics entity type was updated. An RFC3339 formatted datetime string.
func (o LookupLogAnalyticsEntityTypeResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogAnalyticsEntityTypeResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogAnalyticsEntityTypeResultOutput{})
}
