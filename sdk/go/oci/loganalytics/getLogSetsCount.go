// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Log Sets Count resource in Oracle Cloud Infrastructure Log Analytics service.
//
// This API returns the count of distinct log sets.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LogAnalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LogAnalytics.GetLogSetsCount(ctx, &loganalytics.GetLogSetsCountArgs{
//				Namespace: logSetsCountNamespace,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLogSetsCount(ctx *pulumi.Context, args *GetLogSetsCountArgs, opts ...pulumi.InvokeOption) (*GetLogSetsCountResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLogSetsCountResult
	err := ctx.Invoke("oci:LogAnalytics/getLogSetsCount:getLogSetsCount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogSetsCount.
type GetLogSetsCountArgs struct {
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
}

// A collection of values returned by getLogSetsCount.
type GetLogSetsCountResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// This is the total number of log sets the tenancy has configured.
	LogSetsCount string `pulumi:"logSetsCount"`
	Namespace    string `pulumi:"namespace"`
}

func GetLogSetsCountOutput(ctx *pulumi.Context, args GetLogSetsCountOutputArgs, opts ...pulumi.InvokeOption) GetLogSetsCountResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLogSetsCountResult, error) {
			args := v.(GetLogSetsCountArgs)
			r, err := GetLogSetsCount(ctx, &args, opts...)
			var s GetLogSetsCountResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetLogSetsCountResultOutput)
}

// A collection of arguments for invoking getLogSetsCount.
type GetLogSetsCountOutputArgs struct {
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GetLogSetsCountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogSetsCountArgs)(nil)).Elem()
}

// A collection of values returned by getLogSetsCount.
type GetLogSetsCountResultOutput struct{ *pulumi.OutputState }

func (GetLogSetsCountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogSetsCountResult)(nil)).Elem()
}

func (o GetLogSetsCountResultOutput) ToGetLogSetsCountResultOutput() GetLogSetsCountResultOutput {
	return o
}

func (o GetLogSetsCountResultOutput) ToGetLogSetsCountResultOutputWithContext(ctx context.Context) GetLogSetsCountResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetLogSetsCountResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogSetsCountResult) string { return v.Id }).(pulumi.StringOutput)
}

// This is the total number of log sets the tenancy has configured.
func (o GetLogSetsCountResultOutput) LogSetsCount() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogSetsCountResult) string { return v.LogSetsCount }).(pulumi.StringOutput)
}

func (o GetLogSetsCountResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogSetsCountResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLogSetsCountResultOutput{})
}
