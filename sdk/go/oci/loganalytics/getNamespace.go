// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Namespace resource in Oracle Cloud Infrastructure Log Analytics service.
//
// # This API gets the namespace details of a tenancy already onboarded in Logging Analytics Application
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/loganalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loganalytics.GetNamespace(ctx, &loganalytics.GetNamespaceArgs{
//				Namespace: namespaceNamespace,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNamespace(ctx *pulumi.Context, args *LookupNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNamespaceResult
	err := ctx.Invoke("oci:LogAnalytics/getNamespace:getNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNamespace.
type LookupNamespaceArgs struct {
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
}

// A collection of values returned by getNamespace.
type LookupNamespaceResult struct {
	// The is the tenancy ID
	CompartmentId string `pulumi:"compartmentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// This indicates if old data can be archived for a tenancy
	IsArchivingEnabled bool `pulumi:"isArchivingEnabled"`
	// This indicates if the tenancy is data ever ingested
	IsDataEverIngested bool `pulumi:"isDataEverIngested"`
	IsLogsetEnabled    bool `pulumi:"isLogsetEnabled"`
	// This indicates if the tenancy is onboarded to Logging Analytics
	IsOnboarded bool `pulumi:"isOnboarded"`
	// This is the namespace name of a tenancy
	// * `is_logSet_enabled` - This indicates if the tenancy is logSet enable
	Namespace string `pulumi:"namespace"`
}

func LookupNamespaceOutput(ctx *pulumi.Context, args LookupNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupNamespaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNamespaceResultOutput, error) {
			args := v.(LookupNamespaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:LogAnalytics/getNamespace:getNamespace", args, LookupNamespaceResultOutput{}, options).(LookupNamespaceResultOutput), nil
		}).(LookupNamespaceResultOutput)
}

// A collection of arguments for invoking getNamespace.
type LookupNamespaceOutputArgs struct {
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (LookupNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceArgs)(nil)).Elem()
}

// A collection of values returned by getNamespace.
type LookupNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceResult)(nil)).Elem()
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutput() LookupNamespaceResultOutput {
	return o
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutputWithContext(ctx context.Context) LookupNamespaceResultOutput {
	return o
}

// The is the tenancy ID
func (o LookupNamespaceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNamespaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// This indicates if old data can be archived for a tenancy
func (o LookupNamespaceResultOutput) IsArchivingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNamespaceResult) bool { return v.IsArchivingEnabled }).(pulumi.BoolOutput)
}

// This indicates if the tenancy is data ever ingested
func (o LookupNamespaceResultOutput) IsDataEverIngested() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNamespaceResult) bool { return v.IsDataEverIngested }).(pulumi.BoolOutput)
}

func (o LookupNamespaceResultOutput) IsLogsetEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNamespaceResult) bool { return v.IsLogsetEnabled }).(pulumi.BoolOutput)
}

// This indicates if the tenancy is onboarded to Logging Analytics
func (o LookupNamespaceResultOutput) IsOnboarded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNamespaceResult) bool { return v.IsOnboarded }).(pulumi.BoolOutput)
}

// This is the namespace name of a tenancy
// * `is_logSet_enabled` - This indicates if the tenancy is logSet enable
func (o LookupNamespaceResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamespaceResultOutput{})
}
