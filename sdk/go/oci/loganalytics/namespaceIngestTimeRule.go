// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Namespace Ingest Time Rule resource in Oracle Cloud Infrastructure Log Analytics service.
//
// Creates a new ingest time rule in the specified compartment. You may also specify optional information such as description, defined tags, and free-form tags.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/LogAnalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := LogAnalytics.NewNamespaceIngestTimeRule(ctx, "testNamespaceIngestTimeRule", &LogAnalytics.NamespaceIngestTimeRuleArgs{
//				Actions: loganalytics.NamespaceIngestTimeRuleActionArray{
//					&loganalytics.NamespaceIngestTimeRuleActionArgs{
//						CompartmentId: pulumi.Any(_var.Compartment_id),
//						MetricName:    pulumi.Any(oci_monitoring_metric.Test_metric.Name),
//						Namespace:     pulumi.Any(_var.Namespace_ingest_time_rule_actions_namespace),
//						Type:          pulumi.Any(_var.Namespace_ingest_time_rule_actions_type),
//						Dimensions:    pulumi.Any(_var.Namespace_ingest_time_rule_actions_dimensions),
//						ResourceGroup: pulumi.Any(_var.Namespace_ingest_time_rule_actions_resource_group),
//					},
//				},
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				Conditions: &loganalytics.NamespaceIngestTimeRuleConditionsArgs{
//					FieldName:     pulumi.Any(_var.Namespace_ingest_time_rule_conditions_field_name),
//					FieldOperator: pulumi.Any(_var.Namespace_ingest_time_rule_conditions_field_operator),
//					FieldValue:    pulumi.Any(_var.Namespace_ingest_time_rule_conditions_field_value),
//					Kind:          pulumi.Any(_var.Namespace_ingest_time_rule_conditions_kind),
//					AdditionalConditions: loganalytics.NamespaceIngestTimeRuleConditionsAdditionalConditionArray{
//						&loganalytics.NamespaceIngestTimeRuleConditionsAdditionalConditionArgs{
//							ConditionField:    pulumi.Any(_var.Namespace_ingest_time_rule_conditions_additional_conditions_condition_field),
//							ConditionOperator: pulumi.Any(_var.Namespace_ingest_time_rule_conditions_additional_conditions_condition_operator),
//							ConditionValue:    pulumi.Any(_var.Namespace_ingest_time_rule_conditions_additional_conditions_condition_value),
//						},
//					},
//				},
//				DisplayName: pulumi.Any(_var.Namespace_ingest_time_rule_display_name),
//				Namespace:   pulumi.Any(_var.Namespace_ingest_time_rule_namespace),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Namespace_ingest_time_rule_description),
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NamespaceIngestTimeRules can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:LogAnalytics/namespaceIngestTimeRule:NamespaceIngestTimeRule test_namespace_ingest_time_rule "namespaces/{namespaceName}/ingestTimeRules/{ingestTimeRuleId}"
//
// ```
type NamespaceIngestTimeRule struct {
	pulumi.CustomResourceState

	// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
	Actions NamespaceIngestTimeRuleActionArrayOutput `pulumi:"actions"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The condition(s) to evaluate for an ingest time rule.
	Conditions NamespaceIngestTimeRuleConditionsOutput `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The ingest time rule display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags     pulumi.MapOutput    `pulumi:"freeformTags"`
	IngestTimeRuleId pulumi.StringOutput `pulumi:"ingestTimeRuleId"`
	// A flag indicating whether or not the ingest time rule is enabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The Logging Analytics namespace used for the request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The current state of the ingest time rule.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewNamespaceIngestTimeRule registers a new resource with the given unique name, arguments, and options.
func NewNamespaceIngestTimeRule(ctx *pulumi.Context,
	name string, args *NamespaceIngestTimeRuleArgs, opts ...pulumi.ResourceOption) (*NamespaceIngestTimeRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespaceIngestTimeRule
	err := ctx.RegisterResource("oci:LogAnalytics/namespaceIngestTimeRule:NamespaceIngestTimeRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceIngestTimeRule gets an existing NamespaceIngestTimeRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceIngestTimeRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceIngestTimeRuleState, opts ...pulumi.ResourceOption) (*NamespaceIngestTimeRule, error) {
	var resource NamespaceIngestTimeRule
	err := ctx.ReadResource("oci:LogAnalytics/namespaceIngestTimeRule:NamespaceIngestTimeRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceIngestTimeRule resources.
type namespaceIngestTimeRuleState struct {
	// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
	Actions []NamespaceIngestTimeRuleAction `pulumi:"actions"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The condition(s) to evaluate for an ingest time rule.
	Conditions *NamespaceIngestTimeRuleConditions `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description *string `pulumi:"description"`
	// (Updatable) The ingest time rule display name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags     map[string]interface{} `pulumi:"freeformTags"`
	IngestTimeRuleId *string                `pulumi:"ingestTimeRuleId"`
	// A flag indicating whether or not the ingest time rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The Logging Analytics namespace used for the request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Namespace *string `pulumi:"namespace"`
	// The current state of the ingest time rule.
	State *string `pulumi:"state"`
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type NamespaceIngestTimeRuleState struct {
	// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
	Actions NamespaceIngestTimeRuleActionArrayInput
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The condition(s) to evaluate for an ingest time rule.
	Conditions NamespaceIngestTimeRuleConditionsPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description for this resource.
	Description pulumi.StringPtrInput
	// (Updatable) The ingest time rule display name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags     pulumi.MapInput
	IngestTimeRuleId pulumi.StringPtrInput
	// A flag indicating whether or not the ingest time rule is enabled.
	IsEnabled pulumi.BoolPtrInput
	// The Logging Analytics namespace used for the request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Namespace pulumi.StringPtrInput
	// The current state of the ingest time rule.
	State pulumi.StringPtrInput
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (NamespaceIngestTimeRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIngestTimeRuleState)(nil)).Elem()
}

type namespaceIngestTimeRuleArgs struct {
	// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
	Actions []NamespaceIngestTimeRuleAction `pulumi:"actions"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) The condition(s) to evaluate for an ingest time rule.
	Conditions NamespaceIngestTimeRuleConditions `pulumi:"conditions"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description *string `pulumi:"description"`
	// (Updatable) The ingest time rule display name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The Logging Analytics namespace used for the request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Namespace string `pulumi:"namespace"`
}

// The set of arguments for constructing a NamespaceIngestTimeRule resource.
type NamespaceIngestTimeRuleArgs struct {
	// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
	Actions NamespaceIngestTimeRuleActionArrayInput
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput
	// (Updatable) The condition(s) to evaluate for an ingest time rule.
	Conditions NamespaceIngestTimeRuleConditionsInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description for this resource.
	Description pulumi.StringPtrInput
	// (Updatable) The ingest time rule display name.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The Logging Analytics namespace used for the request.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Namespace pulumi.StringInput
}

func (NamespaceIngestTimeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIngestTimeRuleArgs)(nil)).Elem()
}

type NamespaceIngestTimeRuleInput interface {
	pulumi.Input

	ToNamespaceIngestTimeRuleOutput() NamespaceIngestTimeRuleOutput
	ToNamespaceIngestTimeRuleOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleOutput
}

func (*NamespaceIngestTimeRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIngestTimeRule)(nil)).Elem()
}

func (i *NamespaceIngestTimeRule) ToNamespaceIngestTimeRuleOutput() NamespaceIngestTimeRuleOutput {
	return i.ToNamespaceIngestTimeRuleOutputWithContext(context.Background())
}

func (i *NamespaceIngestTimeRule) ToNamespaceIngestTimeRuleOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIngestTimeRuleOutput)
}

// NamespaceIngestTimeRuleArrayInput is an input type that accepts NamespaceIngestTimeRuleArray and NamespaceIngestTimeRuleArrayOutput values.
// You can construct a concrete instance of `NamespaceIngestTimeRuleArrayInput` via:
//
//	NamespaceIngestTimeRuleArray{ NamespaceIngestTimeRuleArgs{...} }
type NamespaceIngestTimeRuleArrayInput interface {
	pulumi.Input

	ToNamespaceIngestTimeRuleArrayOutput() NamespaceIngestTimeRuleArrayOutput
	ToNamespaceIngestTimeRuleArrayOutputWithContext(context.Context) NamespaceIngestTimeRuleArrayOutput
}

type NamespaceIngestTimeRuleArray []NamespaceIngestTimeRuleInput

func (NamespaceIngestTimeRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceIngestTimeRule)(nil)).Elem()
}

func (i NamespaceIngestTimeRuleArray) ToNamespaceIngestTimeRuleArrayOutput() NamespaceIngestTimeRuleArrayOutput {
	return i.ToNamespaceIngestTimeRuleArrayOutputWithContext(context.Background())
}

func (i NamespaceIngestTimeRuleArray) ToNamespaceIngestTimeRuleArrayOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIngestTimeRuleArrayOutput)
}

// NamespaceIngestTimeRuleMapInput is an input type that accepts NamespaceIngestTimeRuleMap and NamespaceIngestTimeRuleMapOutput values.
// You can construct a concrete instance of `NamespaceIngestTimeRuleMapInput` via:
//
//	NamespaceIngestTimeRuleMap{ "key": NamespaceIngestTimeRuleArgs{...} }
type NamespaceIngestTimeRuleMapInput interface {
	pulumi.Input

	ToNamespaceIngestTimeRuleMapOutput() NamespaceIngestTimeRuleMapOutput
	ToNamespaceIngestTimeRuleMapOutputWithContext(context.Context) NamespaceIngestTimeRuleMapOutput
}

type NamespaceIngestTimeRuleMap map[string]NamespaceIngestTimeRuleInput

func (NamespaceIngestTimeRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceIngestTimeRule)(nil)).Elem()
}

func (i NamespaceIngestTimeRuleMap) ToNamespaceIngestTimeRuleMapOutput() NamespaceIngestTimeRuleMapOutput {
	return i.ToNamespaceIngestTimeRuleMapOutputWithContext(context.Background())
}

func (i NamespaceIngestTimeRuleMap) ToNamespaceIngestTimeRuleMapOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIngestTimeRuleMapOutput)
}

type NamespaceIngestTimeRuleOutput struct{ *pulumi.OutputState }

func (NamespaceIngestTimeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIngestTimeRule)(nil)).Elem()
}

func (o NamespaceIngestTimeRuleOutput) ToNamespaceIngestTimeRuleOutput() NamespaceIngestTimeRuleOutput {
	return o
}

func (o NamespaceIngestTimeRuleOutput) ToNamespaceIngestTimeRuleOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleOutput {
	return o
}

// (Updatable) The action(s) to be performed if the ingest time rule condition(s) are satisfied.
func (o NamespaceIngestTimeRuleOutput) Actions() NamespaceIngestTimeRuleActionArrayOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) NamespaceIngestTimeRuleActionArrayOutput { return v.Actions }).(NamespaceIngestTimeRuleActionArrayOutput)
}

// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o NamespaceIngestTimeRuleOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The condition(s) to evaluate for an ingest time rule.
func (o NamespaceIngestTimeRuleOutput) Conditions() NamespaceIngestTimeRuleConditionsOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) NamespaceIngestTimeRuleConditionsOutput { return v.Conditions }).(NamespaceIngestTimeRuleConditionsOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o NamespaceIngestTimeRuleOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Description for this resource.
func (o NamespaceIngestTimeRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The ingest time rule display name.
func (o NamespaceIngestTimeRuleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o NamespaceIngestTimeRuleOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

func (o NamespaceIngestTimeRuleOutput) IngestTimeRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.IngestTimeRuleId }).(pulumi.StringOutput)
}

// A flag indicating whether or not the ingest time rule is enabled.
func (o NamespaceIngestTimeRuleOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The Logging Analytics namespace used for the request.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o NamespaceIngestTimeRuleOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The current state of the ingest time rule.
func (o NamespaceIngestTimeRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the resource was created, in the format defined by RFC3339.
func (o NamespaceIngestTimeRuleOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the resource was last updated, in the format defined by RFC3339.
func (o NamespaceIngestTimeRuleOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIngestTimeRule) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type NamespaceIngestTimeRuleArrayOutput struct{ *pulumi.OutputState }

func (NamespaceIngestTimeRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceIngestTimeRule)(nil)).Elem()
}

func (o NamespaceIngestTimeRuleArrayOutput) ToNamespaceIngestTimeRuleArrayOutput() NamespaceIngestTimeRuleArrayOutput {
	return o
}

func (o NamespaceIngestTimeRuleArrayOutput) ToNamespaceIngestTimeRuleArrayOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleArrayOutput {
	return o
}

func (o NamespaceIngestTimeRuleArrayOutput) Index(i pulumi.IntInput) NamespaceIngestTimeRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespaceIngestTimeRule {
		return vs[0].([]*NamespaceIngestTimeRule)[vs[1].(int)]
	}).(NamespaceIngestTimeRuleOutput)
}

type NamespaceIngestTimeRuleMapOutput struct{ *pulumi.OutputState }

func (NamespaceIngestTimeRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceIngestTimeRule)(nil)).Elem()
}

func (o NamespaceIngestTimeRuleMapOutput) ToNamespaceIngestTimeRuleMapOutput() NamespaceIngestTimeRuleMapOutput {
	return o
}

func (o NamespaceIngestTimeRuleMapOutput) ToNamespaceIngestTimeRuleMapOutputWithContext(ctx context.Context) NamespaceIngestTimeRuleMapOutput {
	return o
}

func (o NamespaceIngestTimeRuleMapOutput) MapIndex(k pulumi.StringInput) NamespaceIngestTimeRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespaceIngestTimeRule {
		return vs[0].(map[string]*NamespaceIngestTimeRule)[vs[1].(string)]
	}).(NamespaceIngestTimeRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIngestTimeRuleInput)(nil)).Elem(), &NamespaceIngestTimeRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIngestTimeRuleArrayInput)(nil)).Elem(), NamespaceIngestTimeRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIngestTimeRuleMapInput)(nil)).Elem(), NamespaceIngestTimeRuleMap{})
	pulumi.RegisterOutputType(NamespaceIngestTimeRuleOutput{})
	pulumi.RegisterOutputType(NamespaceIngestTimeRuleArrayOutput{})
	pulumi.RegisterOutputType(NamespaceIngestTimeRuleMapOutput{})
}
