// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loganalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Namespace Lookup resource in Oracle Cloud Infrastructure Log Analytics service.
//
// Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/loganalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loganalytics.NewNamespaceLookup(ctx, "test_namespace_lookup", &loganalytics.NamespaceLookupArgs{
//				LookupName:         pulumi.Any(namespaceLookupLookupName),
//				Namespace:          pulumi.Any(namespaceLookupNamespace),
//				RegisterLookupFile: pulumi.Any(namespaceLookupRegisterLookupFile),
//				Type:               pulumi.Any(namespaceLookupType),
//				Categories: loganalytics.NamespaceLookupCategoryArray{
//					&loganalytics.NamespaceLookupCategoryArgs{
//						Description: pulumi.Any(namespaceLookupCategoriesDescription),
//						DisplayName: pulumi.Any(namespaceLookupCategoriesDisplayName),
//						IsSystem:    pulumi.Any(namespaceLookupCategoriesIsSystem),
//						Name:        pulumi.Any(namespaceLookupCategoriesName),
//						Type:        pulumi.Any(namespaceLookupCategoriesType),
//					},
//				},
//				CharEncoding:      pulumi.Any(namespaceLookupCharEncoding),
//				CompartmentId:     pulumi.Any(namespaceLookupCompartmentId),
//				DefaultMatchValue: pulumi.Any(namespaceLookupDefaultMatchValue),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				Description: pulumi.Any(namespaceLookupDescription),
//				Fields: loganalytics.NamespaceLookupFieldArray{
//					&loganalytics.NamespaceLookupFieldArgs{
//						CommonFieldName:   pulumi.Any(namespaceLookupFieldsCommonFieldName),
//						DefaultMatchValue: pulumi.Any(namespaceLookupFieldsDefaultMatchValue),
//						DisplayName:       pulumi.Any(namespaceLookupFieldsDisplayName),
//						IsCommonField:     pulumi.Any(namespaceLookupFieldsIsCommonField),
//						MatchOperator:     pulumi.Any(namespaceLookupFieldsMatchOperator),
//						Name:              pulumi.Any(namespaceLookupFieldsName),
//						Position:          pulumi.Any(namespaceLookupFieldsPosition),
//					},
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				IsHidden:   pulumi.Any(namespaceLookupIsHidden),
//				MaxMatches: pulumi.Any(namespaceLookupMaxMatches),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NamespaceLookups can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:LogAnalytics/namespaceLookup:NamespaceLookup test_namespace_lookup "namespaces/{namespaceName}/lookups/{lookupName}"
// ```
type NamespaceLookup struct {
	pulumi.CustomResourceState

	// The active edit version.
	ActiveEditVersion pulumi.StringOutput `pulumi:"activeEditVersion"`
	// The canonical link.
	CanonicalLink pulumi.StringOutput `pulumi:"canonicalLink"`
	// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
	Categories NamespaceLookupCategoryArrayOutput `pulumi:"categories"`
	// The character encoding of the uploaded file.
	CharEncoding pulumi.StringPtrOutput `pulumi:"charEncoding"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The default match value.
	DefaultMatchValue pulumi.StringPtrOutput `pulumi:"defaultMatchValue"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) The lookup description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The edit version.
	EditVersion pulumi.StringOutput `pulumi:"editVersion"`
	// (Updatable) The lookup fields.
	Fields NamespaceLookupFieldArrayOutput `pulumi:"fields"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// A flag indicating if the lookup is custom (user-defined) or built in.
	IsBuiltIn pulumi.StringOutput `pulumi:"isBuiltIn"`
	// A flag indicating whether or not the new lookup should be hidden.
	IsHidden pulumi.BoolOutput `pulumi:"isHidden"`
	// The lookup display name.
	LookupDisplayName pulumi.StringOutput `pulumi:"lookupDisplayName"`
	// The lookup OCID.
	LookupId pulumi.StringOutput `pulumi:"lookupId"`
	// The name of the lookup to operate on.
	LookupName pulumi.StringOutput `pulumi:"lookupName"`
	// The lookup reference as an integer.
	LookupReference pulumi.StringOutput `pulumi:"lookupReference"`
	// The lookup reference as a string.
	LookupReferenceString pulumi.StringOutput `pulumi:"lookupReferenceString"`
	// (Updatable) The maximum number of matches.
	MaxMatches pulumi.StringPtrOutput `pulumi:"maxMatches"`
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// AutoLookups
	ReferringSources NamespaceLookupReferringSourceArrayOutput `pulumi:"referringSources"`
	// Path to the file containing data for lookup creation.
	RegisterLookupFile pulumi.StringOutput `pulumi:"registerLookupFile"`
	// StatusSummary
	StatusSummaries NamespaceLookupStatusSummaryArrayOutput `pulumi:"statusSummaries"`
	// The last updated date.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The lookup type. Valid values are Lookup, Dictionary or Module.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceLookup registers a new resource with the given unique name, arguments, and options.
func NewNamespaceLookup(ctx *pulumi.Context,
	name string, args *NamespaceLookupArgs, opts ...pulumi.ResourceOption) (*NamespaceLookup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LookupName == nil {
		return nil, errors.New("invalid value for required argument 'LookupName'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.RegisterLookupFile == nil {
		return nil, errors.New("invalid value for required argument 'RegisterLookupFile'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NamespaceLookup
	err := ctx.RegisterResource("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceLookup gets an existing NamespaceLookup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceLookup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceLookupState, opts ...pulumi.ResourceOption) (*NamespaceLookup, error) {
	var resource NamespaceLookup
	err := ctx.ReadResource("oci:LogAnalytics/namespaceLookup:NamespaceLookup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceLookup resources.
type namespaceLookupState struct {
	// The active edit version.
	ActiveEditVersion *string `pulumi:"activeEditVersion"`
	// The canonical link.
	CanonicalLink *string `pulumi:"canonicalLink"`
	// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
	Categories []NamespaceLookupCategory `pulumi:"categories"`
	// The character encoding of the uploaded file.
	CharEncoding *string `pulumi:"charEncoding"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The default match value.
	DefaultMatchValue *string `pulumi:"defaultMatchValue"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The lookup description.
	Description *string `pulumi:"description"`
	// The edit version.
	EditVersion *string `pulumi:"editVersion"`
	// (Updatable) The lookup fields.
	Fields []NamespaceLookupField `pulumi:"fields"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// A flag indicating if the lookup is custom (user-defined) or built in.
	IsBuiltIn *string `pulumi:"isBuiltIn"`
	// A flag indicating whether or not the new lookup should be hidden.
	IsHidden *bool `pulumi:"isHidden"`
	// The lookup display name.
	LookupDisplayName *string `pulumi:"lookupDisplayName"`
	// The lookup OCID.
	LookupId *string `pulumi:"lookupId"`
	// The name of the lookup to operate on.
	LookupName *string `pulumi:"lookupName"`
	// The lookup reference as an integer.
	LookupReference *string `pulumi:"lookupReference"`
	// The lookup reference as a string.
	LookupReferenceString *string `pulumi:"lookupReferenceString"`
	// (Updatable) The maximum number of matches.
	MaxMatches *string `pulumi:"maxMatches"`
	// The Logging Analytics namespace used for the request.
	Namespace *string `pulumi:"namespace"`
	// AutoLookups
	ReferringSources []NamespaceLookupReferringSource `pulumi:"referringSources"`
	// Path to the file containing data for lookup creation.
	RegisterLookupFile *string `pulumi:"registerLookupFile"`
	// StatusSummary
	StatusSummaries []NamespaceLookupStatusSummary `pulumi:"statusSummaries"`
	// The last updated date.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The lookup type. Valid values are Lookup, Dictionary or Module.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type *string `pulumi:"type"`
}

type NamespaceLookupState struct {
	// The active edit version.
	ActiveEditVersion pulumi.StringPtrInput
	// The canonical link.
	CanonicalLink pulumi.StringPtrInput
	// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
	Categories NamespaceLookupCategoryArrayInput
	// The character encoding of the uploaded file.
	CharEncoding pulumi.StringPtrInput
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The default match value.
	DefaultMatchValue pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The lookup description.
	Description pulumi.StringPtrInput
	// The edit version.
	EditVersion pulumi.StringPtrInput
	// (Updatable) The lookup fields.
	Fields NamespaceLookupFieldArrayInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// A flag indicating if the lookup is custom (user-defined) or built in.
	IsBuiltIn pulumi.StringPtrInput
	// A flag indicating whether or not the new lookup should be hidden.
	IsHidden pulumi.BoolPtrInput
	// The lookup display name.
	LookupDisplayName pulumi.StringPtrInput
	// The lookup OCID.
	LookupId pulumi.StringPtrInput
	// The name of the lookup to operate on.
	LookupName pulumi.StringPtrInput
	// The lookup reference as an integer.
	LookupReference pulumi.StringPtrInput
	// The lookup reference as a string.
	LookupReferenceString pulumi.StringPtrInput
	// (Updatable) The maximum number of matches.
	MaxMatches pulumi.StringPtrInput
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringPtrInput
	// AutoLookups
	ReferringSources NamespaceLookupReferringSourceArrayInput
	// Path to the file containing data for lookup creation.
	RegisterLookupFile pulumi.StringPtrInput
	// StatusSummary
	StatusSummaries NamespaceLookupStatusSummaryArrayInput
	// The last updated date.
	TimeUpdated pulumi.StringPtrInput
	// The lookup type. Valid values are Lookup, Dictionary or Module.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringPtrInput
}

func (NamespaceLookupState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceLookupState)(nil)).Elem()
}

type namespaceLookupArgs struct {
	// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
	Categories []NamespaceLookupCategory `pulumi:"categories"`
	// The character encoding of the uploaded file.
	CharEncoding *string `pulumi:"charEncoding"`
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The default match value.
	DefaultMatchValue *string `pulumi:"defaultMatchValue"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The lookup description.
	Description *string `pulumi:"description"`
	// (Updatable) The lookup fields.
	Fields []NamespaceLookupField `pulumi:"fields"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// A flag indicating whether or not the new lookup should be hidden.
	IsHidden *bool `pulumi:"isHidden"`
	// The name of the lookup to operate on.
	LookupName string `pulumi:"lookupName"`
	// (Updatable) The maximum number of matches.
	MaxMatches *string `pulumi:"maxMatches"`
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
	// Path to the file containing data for lookup creation.
	RegisterLookupFile string `pulumi:"registerLookupFile"`
	// The lookup type. Valid values are Lookup, Dictionary or Module.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NamespaceLookup resource.
type NamespaceLookupArgs struct {
	// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
	Categories NamespaceLookupCategoryArrayInput
	// The character encoding of the uploaded file.
	CharEncoding pulumi.StringPtrInput
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The default match value.
	DefaultMatchValue pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The lookup description.
	Description pulumi.StringPtrInput
	// (Updatable) The lookup fields.
	Fields NamespaceLookupFieldArrayInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// A flag indicating whether or not the new lookup should be hidden.
	IsHidden pulumi.BoolPtrInput
	// The name of the lookup to operate on.
	LookupName pulumi.StringInput
	// (Updatable) The maximum number of matches.
	MaxMatches pulumi.StringPtrInput
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput
	// Path to the file containing data for lookup creation.
	RegisterLookupFile pulumi.StringInput
	// The lookup type. Valid values are Lookup, Dictionary or Module.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Type pulumi.StringInput
}

func (NamespaceLookupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceLookupArgs)(nil)).Elem()
}

type NamespaceLookupInput interface {
	pulumi.Input

	ToNamespaceLookupOutput() NamespaceLookupOutput
	ToNamespaceLookupOutputWithContext(ctx context.Context) NamespaceLookupOutput
}

func (*NamespaceLookup) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceLookup)(nil)).Elem()
}

func (i *NamespaceLookup) ToNamespaceLookupOutput() NamespaceLookupOutput {
	return i.ToNamespaceLookupOutputWithContext(context.Background())
}

func (i *NamespaceLookup) ToNamespaceLookupOutputWithContext(ctx context.Context) NamespaceLookupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceLookupOutput)
}

// NamespaceLookupArrayInput is an input type that accepts NamespaceLookupArray and NamespaceLookupArrayOutput values.
// You can construct a concrete instance of `NamespaceLookupArrayInput` via:
//
//	NamespaceLookupArray{ NamespaceLookupArgs{...} }
type NamespaceLookupArrayInput interface {
	pulumi.Input

	ToNamespaceLookupArrayOutput() NamespaceLookupArrayOutput
	ToNamespaceLookupArrayOutputWithContext(context.Context) NamespaceLookupArrayOutput
}

type NamespaceLookupArray []NamespaceLookupInput

func (NamespaceLookupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceLookup)(nil)).Elem()
}

func (i NamespaceLookupArray) ToNamespaceLookupArrayOutput() NamespaceLookupArrayOutput {
	return i.ToNamespaceLookupArrayOutputWithContext(context.Background())
}

func (i NamespaceLookupArray) ToNamespaceLookupArrayOutputWithContext(ctx context.Context) NamespaceLookupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceLookupArrayOutput)
}

// NamespaceLookupMapInput is an input type that accepts NamespaceLookupMap and NamespaceLookupMapOutput values.
// You can construct a concrete instance of `NamespaceLookupMapInput` via:
//
//	NamespaceLookupMap{ "key": NamespaceLookupArgs{...} }
type NamespaceLookupMapInput interface {
	pulumi.Input

	ToNamespaceLookupMapOutput() NamespaceLookupMapOutput
	ToNamespaceLookupMapOutputWithContext(context.Context) NamespaceLookupMapOutput
}

type NamespaceLookupMap map[string]NamespaceLookupInput

func (NamespaceLookupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceLookup)(nil)).Elem()
}

func (i NamespaceLookupMap) ToNamespaceLookupMapOutput() NamespaceLookupMapOutput {
	return i.ToNamespaceLookupMapOutputWithContext(context.Background())
}

func (i NamespaceLookupMap) ToNamespaceLookupMapOutputWithContext(ctx context.Context) NamespaceLookupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceLookupMapOutput)
}

type NamespaceLookupOutput struct{ *pulumi.OutputState }

func (NamespaceLookupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceLookup)(nil)).Elem()
}

func (o NamespaceLookupOutput) ToNamespaceLookupOutput() NamespaceLookupOutput {
	return o
}

func (o NamespaceLookupOutput) ToNamespaceLookupOutputWithContext(ctx context.Context) NamespaceLookupOutput {
	return o
}

// The active edit version.
func (o NamespaceLookupOutput) ActiveEditVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.ActiveEditVersion }).(pulumi.StringOutput)
}

// The canonical link.
func (o NamespaceLookupOutput) CanonicalLink() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.CanonicalLink }).(pulumi.StringOutput)
}

// (Updatable) An array of categories to assign to the lookup. Specifying the name attribute for each category would suffice. Oracle-defined category assignments cannot be removed.
func (o NamespaceLookupOutput) Categories() NamespaceLookupCategoryArrayOutput {
	return o.ApplyT(func(v *NamespaceLookup) NamespaceLookupCategoryArrayOutput { return v.Categories }).(NamespaceLookupCategoryArrayOutput)
}

// The character encoding of the uploaded file.
func (o NamespaceLookupOutput) CharEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringPtrOutput { return v.CharEncoding }).(pulumi.StringPtrOutput)
}

// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
func (o NamespaceLookupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The default match value.
func (o NamespaceLookupOutput) DefaultMatchValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringPtrOutput { return v.DefaultMatchValue }).(pulumi.StringPtrOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o NamespaceLookupOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) The lookup description.
func (o NamespaceLookupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The edit version.
func (o NamespaceLookupOutput) EditVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.EditVersion }).(pulumi.StringOutput)
}

// (Updatable) The lookup fields.
func (o NamespaceLookupOutput) Fields() NamespaceLookupFieldArrayOutput {
	return o.ApplyT(func(v *NamespaceLookup) NamespaceLookupFieldArrayOutput { return v.Fields }).(NamespaceLookupFieldArrayOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o NamespaceLookupOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// A flag indicating if the lookup is custom (user-defined) or built in.
func (o NamespaceLookupOutput) IsBuiltIn() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.IsBuiltIn }).(pulumi.StringOutput)
}

// A flag indicating whether or not the new lookup should be hidden.
func (o NamespaceLookupOutput) IsHidden() pulumi.BoolOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.BoolOutput { return v.IsHidden }).(pulumi.BoolOutput)
}

// The lookup display name.
func (o NamespaceLookupOutput) LookupDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.LookupDisplayName }).(pulumi.StringOutput)
}

// The lookup OCID.
func (o NamespaceLookupOutput) LookupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.LookupId }).(pulumi.StringOutput)
}

// The name of the lookup to operate on.
func (o NamespaceLookupOutput) LookupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.LookupName }).(pulumi.StringOutput)
}

// The lookup reference as an integer.
func (o NamespaceLookupOutput) LookupReference() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.LookupReference }).(pulumi.StringOutput)
}

// The lookup reference as a string.
func (o NamespaceLookupOutput) LookupReferenceString() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.LookupReferenceString }).(pulumi.StringOutput)
}

// (Updatable) The maximum number of matches.
func (o NamespaceLookupOutput) MaxMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringPtrOutput { return v.MaxMatches }).(pulumi.StringPtrOutput)
}

// The Logging Analytics namespace used for the request.
func (o NamespaceLookupOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// AutoLookups
func (o NamespaceLookupOutput) ReferringSources() NamespaceLookupReferringSourceArrayOutput {
	return o.ApplyT(func(v *NamespaceLookup) NamespaceLookupReferringSourceArrayOutput { return v.ReferringSources }).(NamespaceLookupReferringSourceArrayOutput)
}

// Path to the file containing data for lookup creation.
func (o NamespaceLookupOutput) RegisterLookupFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.RegisterLookupFile }).(pulumi.StringOutput)
}

// StatusSummary
func (o NamespaceLookupOutput) StatusSummaries() NamespaceLookupStatusSummaryArrayOutput {
	return o.ApplyT(func(v *NamespaceLookup) NamespaceLookupStatusSummaryArrayOutput { return v.StatusSummaries }).(NamespaceLookupStatusSummaryArrayOutput)
}

// The last updated date.
func (o NamespaceLookupOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The lookup type. Valid values are Lookup, Dictionary or Module.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o NamespaceLookupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceLookup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NamespaceLookupArrayOutput struct{ *pulumi.OutputState }

func (NamespaceLookupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NamespaceLookup)(nil)).Elem()
}

func (o NamespaceLookupArrayOutput) ToNamespaceLookupArrayOutput() NamespaceLookupArrayOutput {
	return o
}

func (o NamespaceLookupArrayOutput) ToNamespaceLookupArrayOutputWithContext(ctx context.Context) NamespaceLookupArrayOutput {
	return o
}

func (o NamespaceLookupArrayOutput) Index(i pulumi.IntInput) NamespaceLookupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NamespaceLookup {
		return vs[0].([]*NamespaceLookup)[vs[1].(int)]
	}).(NamespaceLookupOutput)
}

type NamespaceLookupMapOutput struct{ *pulumi.OutputState }

func (NamespaceLookupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NamespaceLookup)(nil)).Elem()
}

func (o NamespaceLookupMapOutput) ToNamespaceLookupMapOutput() NamespaceLookupMapOutput {
	return o
}

func (o NamespaceLookupMapOutput) ToNamespaceLookupMapOutputWithContext(ctx context.Context) NamespaceLookupMapOutput {
	return o
}

func (o NamespaceLookupMapOutput) MapIndex(k pulumi.StringInput) NamespaceLookupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NamespaceLookup {
		return vs[0].(map[string]*NamespaceLookup)[vs[1].(string)]
	}).(NamespaceLookupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceLookupInput)(nil)).Elem(), &NamespaceLookup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceLookupArrayInput)(nil)).Elem(), NamespaceLookupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceLookupMapInput)(nil)).Elem(), NamespaceLookupMap{})
	pulumi.RegisterOutputType(NamespaceLookupOutput{})
	pulumi.RegisterOutputType(NamespaceLookupArrayOutput{})
	pulumi.RegisterOutputType(NamespaceLookupMapOutput{})
}
