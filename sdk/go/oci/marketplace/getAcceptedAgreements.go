// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marketplace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Accepted Agreements in Oracle Cloud Infrastructure Marketplace service.
//
// Lists the terms of use agreements that have been accepted in the specified compartment.
// You can filter results by specifying query parameters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/marketplace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := marketplace.GetAcceptedAgreements(ctx, &marketplace.GetAcceptedAgreementsArgs{
//				CompartmentId:       compartmentId,
//				AcceptedAgreementId: pulumi.StringRef(testAcceptedAgreement.Id),
//				DisplayName:         pulumi.StringRef(acceptedAgreementDisplayName),
//				ListingId:           pulumi.StringRef(testListing.Id),
//				PackageVersion:      pulumi.StringRef(acceptedAgreementPackageVersion),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAcceptedAgreements(ctx *pulumi.Context, args *GetAcceptedAgreementsArgs, opts ...pulumi.InvokeOption) (*GetAcceptedAgreementsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAcceptedAgreementsResult
	err := ctx.Invoke("oci:Marketplace/getAcceptedAgreements:getAcceptedAgreements", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAcceptedAgreements.
type GetAcceptedAgreementsArgs struct {
	// The unique identifier for the accepted terms of use agreement.
	AcceptedAgreementId *string `pulumi:"acceptedAgreementId"`
	// The unique identifier for the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The display name of the resource.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetAcceptedAgreementsFilter `pulumi:"filters"`
	// The unique identifier for the listing.
	ListingId *string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion *string `pulumi:"packageVersion"`
}

// A collection of values returned by getAcceptedAgreements.
type GetAcceptedAgreementsResult struct {
	AcceptedAgreementId *string `pulumi:"acceptedAgreementId"`
	// The list of accepted_agreements.
	AcceptedAgreements []GetAcceptedAgreementsAcceptedAgreement `pulumi:"acceptedAgreements"`
	// The unique identifier for the compartment where the agreement was accepted.
	CompartmentId string `pulumi:"compartmentId"`
	// A display name for the accepted agreement.
	DisplayName *string                       `pulumi:"displayName"`
	Filters     []GetAcceptedAgreementsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The unique identifier for the listing associated with the agreement.
	ListingId *string `pulumi:"listingId"`
	// The package version associated with the agreement.
	PackageVersion *string `pulumi:"packageVersion"`
}

func GetAcceptedAgreementsOutput(ctx *pulumi.Context, args GetAcceptedAgreementsOutputArgs, opts ...pulumi.InvokeOption) GetAcceptedAgreementsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAcceptedAgreementsResultOutput, error) {
			args := v.(GetAcceptedAgreementsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Marketplace/getAcceptedAgreements:getAcceptedAgreements", args, GetAcceptedAgreementsResultOutput{}, options).(GetAcceptedAgreementsResultOutput), nil
		}).(GetAcceptedAgreementsResultOutput)
}

// A collection of arguments for invoking getAcceptedAgreements.
type GetAcceptedAgreementsOutputArgs struct {
	// The unique identifier for the accepted terms of use agreement.
	AcceptedAgreementId pulumi.StringPtrInput `pulumi:"acceptedAgreementId"`
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The display name of the resource.
	DisplayName pulumi.StringPtrInput                 `pulumi:"displayName"`
	Filters     GetAcceptedAgreementsFilterArrayInput `pulumi:"filters"`
	// The unique identifier for the listing.
	ListingId pulumi.StringPtrInput `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringPtrInput `pulumi:"packageVersion"`
}

func (GetAcceptedAgreementsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsArgs)(nil)).Elem()
}

// A collection of values returned by getAcceptedAgreements.
type GetAcceptedAgreementsResultOutput struct{ *pulumi.OutputState }

func (GetAcceptedAgreementsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsResult)(nil)).Elem()
}

func (o GetAcceptedAgreementsResultOutput) ToGetAcceptedAgreementsResultOutput() GetAcceptedAgreementsResultOutput {
	return o
}

func (o GetAcceptedAgreementsResultOutput) ToGetAcceptedAgreementsResultOutputWithContext(ctx context.Context) GetAcceptedAgreementsResultOutput {
	return o
}

func (o GetAcceptedAgreementsResultOutput) AcceptedAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) *string { return v.AcceptedAgreementId }).(pulumi.StringPtrOutput)
}

// The list of accepted_agreements.
func (o GetAcceptedAgreementsResultOutput) AcceptedAgreements() GetAcceptedAgreementsAcceptedAgreementArrayOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) []GetAcceptedAgreementsAcceptedAgreement {
		return v.AcceptedAgreements
	}).(GetAcceptedAgreementsAcceptedAgreementArrayOutput)
}

// The unique identifier for the compartment where the agreement was accepted.
func (o GetAcceptedAgreementsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// A display name for the accepted agreement.
func (o GetAcceptedAgreementsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetAcceptedAgreementsResultOutput) Filters() GetAcceptedAgreementsFilterArrayOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) []GetAcceptedAgreementsFilter { return v.Filters }).(GetAcceptedAgreementsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAcceptedAgreementsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique identifier for the listing associated with the agreement.
func (o GetAcceptedAgreementsResultOutput) ListingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) *string { return v.ListingId }).(pulumi.StringPtrOutput)
}

// The package version associated with the agreement.
func (o GetAcceptedAgreementsResultOutput) PackageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsResult) *string { return v.PackageVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAcceptedAgreementsResultOutput{})
}
