// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marketplace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Listing Packages in Oracle Cloud Infrastructure Marketplace service.
//
// Gets the list of packages for a listing.
//
// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
//
// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
// listing resource version, create a subscription by issuing a
// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
//
// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/marketplace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := marketplace.GetListingPackages(ctx, &marketplace.GetListingPackagesArgs{
//				ListingId:      testListing.Id,
//				CompartmentId:  pulumi.StringRef(compartmentId),
//				PackageType:    pulumi.StringRef(listingPackagePackageType),
//				PackageVersion: pulumi.StringRef(listingPackagePackageVersion),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetListingPackages(ctx *pulumi.Context, args *GetListingPackagesArgs, opts ...pulumi.InvokeOption) (*GetListingPackagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetListingPackagesResult
	err := ctx.Invoke("oci:Marketplace/getListingPackages:getListingPackages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListingPackages.
type GetListingPackagesArgs struct {
	// The unique identifier for the compartment.
	CompartmentId *string                    `pulumi:"compartmentId"`
	Filters       []GetListingPackagesFilter `pulumi:"filters"`
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// A filter to return only packages that match the given package type exactly.
	PackageType *string `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion *string `pulumi:"packageVersion"`
}

// A collection of values returned by getListingPackages.
type GetListingPackagesResult struct {
	CompartmentId *string                    `pulumi:"compartmentId"`
	Filters       []GetListingPackagesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the listing that the specified package belongs to.
	ListingId string `pulumi:"listingId"`
	// The list of listing_packages.
	ListingPackages []GetListingPackagesListingPackage `pulumi:"listingPackages"`
	// The specified package's type.
	PackageType    *string `pulumi:"packageType"`
	PackageVersion *string `pulumi:"packageVersion"`
}

func GetListingPackagesOutput(ctx *pulumi.Context, args GetListingPackagesOutputArgs, opts ...pulumi.InvokeOption) GetListingPackagesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetListingPackagesResultOutput, error) {
			args := v.(GetListingPackagesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Marketplace/getListingPackages:getListingPackages", args, GetListingPackagesResultOutput{}, options).(GetListingPackagesResultOutput), nil
		}).(GetListingPackagesResultOutput)
}

// A collection of arguments for invoking getListingPackages.
type GetListingPackagesOutputArgs struct {
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringPtrInput              `pulumi:"compartmentId"`
	Filters       GetListingPackagesFilterArrayInput `pulumi:"filters"`
	// The unique identifier for the listing.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// A filter to return only packages that match the given package type exactly.
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringPtrInput `pulumi:"packageVersion"`
}

func (GetListingPackagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesArgs)(nil)).Elem()
}

// A collection of values returned by getListingPackages.
type GetListingPackagesResultOutput struct{ *pulumi.OutputState }

func (GetListingPackagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesResult)(nil)).Elem()
}

func (o GetListingPackagesResultOutput) ToGetListingPackagesResultOutput() GetListingPackagesResultOutput {
	return o
}

func (o GetListingPackagesResultOutput) ToGetListingPackagesResultOutputWithContext(ctx context.Context) GetListingPackagesResultOutput {
	return o
}

func (o GetListingPackagesResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListingPackagesResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetListingPackagesResultOutput) Filters() GetListingPackagesFilterArrayOutput {
	return o.ApplyT(func(v GetListingPackagesResult) []GetListingPackagesFilter { return v.Filters }).(GetListingPackagesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetListingPackagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the listing that the specified package belongs to.
func (o GetListingPackagesResultOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesResult) string { return v.ListingId }).(pulumi.StringOutput)
}

// The list of listing_packages.
func (o GetListingPackagesResultOutput) ListingPackages() GetListingPackagesListingPackageArrayOutput {
	return o.ApplyT(func(v GetListingPackagesResult) []GetListingPackagesListingPackage { return v.ListingPackages }).(GetListingPackagesListingPackageArrayOutput)
}

// The specified package's type.
func (o GetListingPackagesResultOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListingPackagesResult) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

func (o GetListingPackagesResultOutput) PackageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetListingPackagesResult) *string { return v.PackageVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetListingPackagesResultOutput{})
}
