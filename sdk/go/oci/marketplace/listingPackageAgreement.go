// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package marketplace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides details about a specific Listing Package Agreement resource in Oracle Cloud Infrastructure Marketplace service.
//
// This resource can be used to retrieve the time-based signature of terms of use agreement for a package that can be used to
// accept the agreement.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Marketplace"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Marketplace.NewListingPackageAgreement(ctx, "testListingPackageAgreement", &Marketplace.ListingPackageAgreementArgs{
// 			AgreementId:    pulumi.Any(oci_marketplace_agreement.Test_agreement.Id),
// 			ListingId:      pulumi.Any(oci_marketplace_listing.Test_listing.Id),
// 			PackageVersion: pulumi.Any(_var.Listing_package_agreement_package_version),
// 			CompartmentId:  pulumi.Any(_var.Compartment_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type ListingPackageAgreement struct {
	pulumi.CustomResourceState

	// The unique identifier for the agreement.
	AgreementId pulumi.StringOutput `pulumi:"agreementId"`
	// Who authored the agreement.
	Author pulumi.StringOutput `pulumi:"author"`
	// The unique identifier for the compartment, required in gov regions.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The content URL of the agreement.
	ContentUrl pulumi.StringOutput `pulumi:"contentUrl"`
	// The unique identifier for the listing.
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringOutput `pulumi:"packageVersion"`
	// Textual prompt to read and accept the agreement.
	Prompt pulumi.StringOutput `pulumi:"prompt"`
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature pulumi.StringOutput `pulumi:"signature"`
}

// NewListingPackageAgreement registers a new resource with the given unique name, arguments, and options.
func NewListingPackageAgreement(ctx *pulumi.Context,
	name string, args *ListingPackageAgreementArgs, opts ...pulumi.ResourceOption) (*ListingPackageAgreement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgreementId == nil {
		return nil, errors.New("invalid value for required argument 'AgreementId'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.PackageVersion == nil {
		return nil, errors.New("invalid value for required argument 'PackageVersion'")
	}
	var resource ListingPackageAgreement
	err := ctx.RegisterResource("oci:Marketplace/listingPackageAgreement:ListingPackageAgreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListingPackageAgreement gets an existing ListingPackageAgreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListingPackageAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListingPackageAgreementState, opts ...pulumi.ResourceOption) (*ListingPackageAgreement, error) {
	var resource ListingPackageAgreement
	err := ctx.ReadResource("oci:Marketplace/listingPackageAgreement:ListingPackageAgreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListingPackageAgreement resources.
type listingPackageAgreementState struct {
	// The unique identifier for the agreement.
	AgreementId *string `pulumi:"agreementId"`
	// Who authored the agreement.
	Author *string `pulumi:"author"`
	// The unique identifier for the compartment, required in gov regions.
	CompartmentId *string `pulumi:"compartmentId"`
	// The content URL of the agreement.
	ContentUrl *string `pulumi:"contentUrl"`
	// The unique identifier for the listing.
	ListingId *string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion *string `pulumi:"packageVersion"`
	// Textual prompt to read and accept the agreement.
	Prompt *string `pulumi:"prompt"`
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature *string `pulumi:"signature"`
}

type ListingPackageAgreementState struct {
	// The unique identifier for the agreement.
	AgreementId pulumi.StringPtrInput
	// Who authored the agreement.
	Author pulumi.StringPtrInput
	// The unique identifier for the compartment, required in gov regions.
	CompartmentId pulumi.StringPtrInput
	// The content URL of the agreement.
	ContentUrl pulumi.StringPtrInput
	// The unique identifier for the listing.
	ListingId pulumi.StringPtrInput
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringPtrInput
	// Textual prompt to read and accept the agreement.
	Prompt pulumi.StringPtrInput
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature pulumi.StringPtrInput
}

func (ListingPackageAgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*listingPackageAgreementState)(nil)).Elem()
}

type listingPackageAgreementArgs struct {
	// The unique identifier for the agreement.
	AgreementId string `pulumi:"agreementId"`
	// The unique identifier for the compartment, required in gov regions.
	CompartmentId *string `pulumi:"compartmentId"`
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion string `pulumi:"packageVersion"`
}

// The set of arguments for constructing a ListingPackageAgreement resource.
type ListingPackageAgreementArgs struct {
	// The unique identifier for the agreement.
	AgreementId pulumi.StringInput
	// The unique identifier for the compartment, required in gov regions.
	CompartmentId pulumi.StringPtrInput
	// The unique identifier for the listing.
	ListingId pulumi.StringInput
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringInput
}

func (ListingPackageAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listingPackageAgreementArgs)(nil)).Elem()
}

type ListingPackageAgreementInput interface {
	pulumi.Input

	ToListingPackageAgreementOutput() ListingPackageAgreementOutput
	ToListingPackageAgreementOutputWithContext(ctx context.Context) ListingPackageAgreementOutput
}

func (*ListingPackageAgreement) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingPackageAgreement)(nil)).Elem()
}

func (i *ListingPackageAgreement) ToListingPackageAgreementOutput() ListingPackageAgreementOutput {
	return i.ToListingPackageAgreementOutputWithContext(context.Background())
}

func (i *ListingPackageAgreement) ToListingPackageAgreementOutputWithContext(ctx context.Context) ListingPackageAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingPackageAgreementOutput)
}

// ListingPackageAgreementArrayInput is an input type that accepts ListingPackageAgreementArray and ListingPackageAgreementArrayOutput values.
// You can construct a concrete instance of `ListingPackageAgreementArrayInput` via:
//
//          ListingPackageAgreementArray{ ListingPackageAgreementArgs{...} }
type ListingPackageAgreementArrayInput interface {
	pulumi.Input

	ToListingPackageAgreementArrayOutput() ListingPackageAgreementArrayOutput
	ToListingPackageAgreementArrayOutputWithContext(context.Context) ListingPackageAgreementArrayOutput
}

type ListingPackageAgreementArray []ListingPackageAgreementInput

func (ListingPackageAgreementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingPackageAgreement)(nil)).Elem()
}

func (i ListingPackageAgreementArray) ToListingPackageAgreementArrayOutput() ListingPackageAgreementArrayOutput {
	return i.ToListingPackageAgreementArrayOutputWithContext(context.Background())
}

func (i ListingPackageAgreementArray) ToListingPackageAgreementArrayOutputWithContext(ctx context.Context) ListingPackageAgreementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingPackageAgreementArrayOutput)
}

// ListingPackageAgreementMapInput is an input type that accepts ListingPackageAgreementMap and ListingPackageAgreementMapOutput values.
// You can construct a concrete instance of `ListingPackageAgreementMapInput` via:
//
//          ListingPackageAgreementMap{ "key": ListingPackageAgreementArgs{...} }
type ListingPackageAgreementMapInput interface {
	pulumi.Input

	ToListingPackageAgreementMapOutput() ListingPackageAgreementMapOutput
	ToListingPackageAgreementMapOutputWithContext(context.Context) ListingPackageAgreementMapOutput
}

type ListingPackageAgreementMap map[string]ListingPackageAgreementInput

func (ListingPackageAgreementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingPackageAgreement)(nil)).Elem()
}

func (i ListingPackageAgreementMap) ToListingPackageAgreementMapOutput() ListingPackageAgreementMapOutput {
	return i.ToListingPackageAgreementMapOutputWithContext(context.Background())
}

func (i ListingPackageAgreementMap) ToListingPackageAgreementMapOutputWithContext(ctx context.Context) ListingPackageAgreementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListingPackageAgreementMapOutput)
}

type ListingPackageAgreementOutput struct{ *pulumi.OutputState }

func (ListingPackageAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListingPackageAgreement)(nil)).Elem()
}

func (o ListingPackageAgreementOutput) ToListingPackageAgreementOutput() ListingPackageAgreementOutput {
	return o
}

func (o ListingPackageAgreementOutput) ToListingPackageAgreementOutputWithContext(ctx context.Context) ListingPackageAgreementOutput {
	return o
}

type ListingPackageAgreementArrayOutput struct{ *pulumi.OutputState }

func (ListingPackageAgreementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListingPackageAgreement)(nil)).Elem()
}

func (o ListingPackageAgreementArrayOutput) ToListingPackageAgreementArrayOutput() ListingPackageAgreementArrayOutput {
	return o
}

func (o ListingPackageAgreementArrayOutput) ToListingPackageAgreementArrayOutputWithContext(ctx context.Context) ListingPackageAgreementArrayOutput {
	return o
}

func (o ListingPackageAgreementArrayOutput) Index(i pulumi.IntInput) ListingPackageAgreementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListingPackageAgreement {
		return vs[0].([]*ListingPackageAgreement)[vs[1].(int)]
	}).(ListingPackageAgreementOutput)
}

type ListingPackageAgreementMapOutput struct{ *pulumi.OutputState }

func (ListingPackageAgreementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListingPackageAgreement)(nil)).Elem()
}

func (o ListingPackageAgreementMapOutput) ToListingPackageAgreementMapOutput() ListingPackageAgreementMapOutput {
	return o
}

func (o ListingPackageAgreementMapOutput) ToListingPackageAgreementMapOutputWithContext(ctx context.Context) ListingPackageAgreementMapOutput {
	return o
}

func (o ListingPackageAgreementMapOutput) MapIndex(k pulumi.StringInput) ListingPackageAgreementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListingPackageAgreement {
		return vs[0].(map[string]*ListingPackageAgreement)[vs[1].(string)]
	}).(ListingPackageAgreementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListingPackageAgreementInput)(nil)).Elem(), &ListingPackageAgreement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingPackageAgreementArrayInput)(nil)).Elem(), ListingPackageAgreementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListingPackageAgreementMapInput)(nil)).Elem(), ListingPackageAgreementMap{})
	pulumi.RegisterOutputType(ListingPackageAgreementOutput{})
	pulumi.RegisterOutputType(ListingPackageAgreementArrayOutput{})
	pulumi.RegisterOutputType(ListingPackageAgreementMapOutput{})
}
