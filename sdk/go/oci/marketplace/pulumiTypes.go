// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marketplace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type PublicationIcon struct {
	// The content URL of the upload data.
	ContentUrl *string `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension *string `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType *string `pulumi:"mimeType"`
	// (Updatable) The name of the contact.
	Name *string `pulumi:"name"`
}

// PublicationIconInput is an input type that accepts PublicationIconArgs and PublicationIconOutput values.
// You can construct a concrete instance of `PublicationIconInput` via:
//
//	PublicationIconArgs{...}
type PublicationIconInput interface {
	pulumi.Input

	ToPublicationIconOutput() PublicationIconOutput
	ToPublicationIconOutputWithContext(context.Context) PublicationIconOutput
}

type PublicationIconArgs struct {
	// The content URL of the upload data.
	ContentUrl pulumi.StringPtrInput `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension pulumi.StringPtrInput `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType pulumi.StringPtrInput `pulumi:"mimeType"`
	// (Updatable) The name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PublicationIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationIcon)(nil)).Elem()
}

func (i PublicationIconArgs) ToPublicationIconOutput() PublicationIconOutput {
	return i.ToPublicationIconOutputWithContext(context.Background())
}

func (i PublicationIconArgs) ToPublicationIconOutputWithContext(ctx context.Context) PublicationIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationIconOutput)
}

func (i PublicationIconArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationIcon] {
	return pulumix.Output[PublicationIcon]{
		OutputState: i.ToPublicationIconOutputWithContext(ctx).OutputState,
	}
}

// PublicationIconArrayInput is an input type that accepts PublicationIconArray and PublicationIconArrayOutput values.
// You can construct a concrete instance of `PublicationIconArrayInput` via:
//
//	PublicationIconArray{ PublicationIconArgs{...} }
type PublicationIconArrayInput interface {
	pulumi.Input

	ToPublicationIconArrayOutput() PublicationIconArrayOutput
	ToPublicationIconArrayOutputWithContext(context.Context) PublicationIconArrayOutput
}

type PublicationIconArray []PublicationIconInput

func (PublicationIconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationIcon)(nil)).Elem()
}

func (i PublicationIconArray) ToPublicationIconArrayOutput() PublicationIconArrayOutput {
	return i.ToPublicationIconArrayOutputWithContext(context.Background())
}

func (i PublicationIconArray) ToPublicationIconArrayOutputWithContext(ctx context.Context) PublicationIconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationIconArrayOutput)
}

func (i PublicationIconArray) ToOutput(ctx context.Context) pulumix.Output[[]PublicationIcon] {
	return pulumix.Output[[]PublicationIcon]{
		OutputState: i.ToPublicationIconArrayOutputWithContext(ctx).OutputState,
	}
}

type PublicationIconOutput struct{ *pulumi.OutputState }

func (PublicationIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationIcon)(nil)).Elem()
}

func (o PublicationIconOutput) ToPublicationIconOutput() PublicationIconOutput {
	return o
}

func (o PublicationIconOutput) ToPublicationIconOutputWithContext(ctx context.Context) PublicationIconOutput {
	return o
}

func (o PublicationIconOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationIcon] {
	return pulumix.Output[PublicationIcon]{
		OutputState: o.OutputState,
	}
}

// The content URL of the upload data.
func (o PublicationIconOutput) ContentUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationIcon) *string { return v.ContentUrl }).(pulumi.StringPtrOutput)
}

// The file extension of the upload data.
func (o PublicationIconOutput) FileExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationIcon) *string { return v.FileExtension }).(pulumi.StringPtrOutput)
}

// The MIME type of the upload data.
func (o PublicationIconOutput) MimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationIcon) *string { return v.MimeType }).(pulumi.StringPtrOutput)
}

// (Updatable) The name of the contact.
func (o PublicationIconOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationIcon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PublicationIconArrayOutput struct{ *pulumi.OutputState }

func (PublicationIconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationIcon)(nil)).Elem()
}

func (o PublicationIconArrayOutput) ToPublicationIconArrayOutput() PublicationIconArrayOutput {
	return o
}

func (o PublicationIconArrayOutput) ToPublicationIconArrayOutputWithContext(ctx context.Context) PublicationIconArrayOutput {
	return o
}

func (o PublicationIconArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PublicationIcon] {
	return pulumix.Output[[]PublicationIcon]{
		OutputState: o.OutputState,
	}
}

func (o PublicationIconArrayOutput) Index(i pulumi.IntInput) PublicationIconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicationIcon {
		return vs[0].([]PublicationIcon)[vs[1].(int)]
	}).(PublicationIconOutput)
}

type PublicationPackageDetails struct {
	// The end user license agreeement (EULA) that consumers of this listing must accept.
	Eulas []PublicationPackageDetailsEula `pulumi:"eulas"`
	// The unique identifier for the base image of the publication.
	ImageId *string `pulumi:"imageId"`
	// The operating system used by the listing.
	OperatingSystem PublicationPackageDetailsOperatingSystem `pulumi:"operatingSystem"`
	// The package's type.
	PackageType string `pulumi:"packageType"`
	// The package version.
	PackageVersion string `pulumi:"packageVersion"`
}

// PublicationPackageDetailsInput is an input type that accepts PublicationPackageDetailsArgs and PublicationPackageDetailsOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsInput` via:
//
//	PublicationPackageDetailsArgs{...}
type PublicationPackageDetailsInput interface {
	pulumi.Input

	ToPublicationPackageDetailsOutput() PublicationPackageDetailsOutput
	ToPublicationPackageDetailsOutputWithContext(context.Context) PublicationPackageDetailsOutput
}

type PublicationPackageDetailsArgs struct {
	// The end user license agreeement (EULA) that consumers of this listing must accept.
	Eulas PublicationPackageDetailsEulaArrayInput `pulumi:"eulas"`
	// The unique identifier for the base image of the publication.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// The operating system used by the listing.
	OperatingSystem PublicationPackageDetailsOperatingSystemInput `pulumi:"operatingSystem"`
	// The package's type.
	PackageType pulumi.StringInput `pulumi:"packageType"`
	// The package version.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
}

func (PublicationPackageDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetails)(nil)).Elem()
}

func (i PublicationPackageDetailsArgs) ToPublicationPackageDetailsOutput() PublicationPackageDetailsOutput {
	return i.ToPublicationPackageDetailsOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsArgs) ToPublicationPackageDetailsOutputWithContext(ctx context.Context) PublicationPackageDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsOutput)
}

func (i PublicationPackageDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetails] {
	return pulumix.Output[PublicationPackageDetails]{
		OutputState: i.ToPublicationPackageDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i PublicationPackageDetailsArgs) ToPublicationPackageDetailsPtrOutput() PublicationPackageDetailsPtrOutput {
	return i.ToPublicationPackageDetailsPtrOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsArgs) ToPublicationPackageDetailsPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsOutput).ToPublicationPackageDetailsPtrOutputWithContext(ctx)
}

// PublicationPackageDetailsPtrInput is an input type that accepts PublicationPackageDetailsArgs, PublicationPackageDetailsPtr and PublicationPackageDetailsPtrOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsPtrInput` via:
//
//	        PublicationPackageDetailsArgs{...}
//
//	or:
//
//	        nil
type PublicationPackageDetailsPtrInput interface {
	pulumi.Input

	ToPublicationPackageDetailsPtrOutput() PublicationPackageDetailsPtrOutput
	ToPublicationPackageDetailsPtrOutputWithContext(context.Context) PublicationPackageDetailsPtrOutput
}

type publicationPackageDetailsPtrType PublicationPackageDetailsArgs

func PublicationPackageDetailsPtr(v *PublicationPackageDetailsArgs) PublicationPackageDetailsPtrInput {
	return (*publicationPackageDetailsPtrType)(v)
}

func (*publicationPackageDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPackageDetails)(nil)).Elem()
}

func (i *publicationPackageDetailsPtrType) ToPublicationPackageDetailsPtrOutput() PublicationPackageDetailsPtrOutput {
	return i.ToPublicationPackageDetailsPtrOutputWithContext(context.Background())
}

func (i *publicationPackageDetailsPtrType) ToPublicationPackageDetailsPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsPtrOutput)
}

func (i *publicationPackageDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*PublicationPackageDetails] {
	return pulumix.Output[*PublicationPackageDetails]{
		OutputState: i.ToPublicationPackageDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

type PublicationPackageDetailsOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetails)(nil)).Elem()
}

func (o PublicationPackageDetailsOutput) ToPublicationPackageDetailsOutput() PublicationPackageDetailsOutput {
	return o
}

func (o PublicationPackageDetailsOutput) ToPublicationPackageDetailsOutputWithContext(ctx context.Context) PublicationPackageDetailsOutput {
	return o
}

func (o PublicationPackageDetailsOutput) ToPublicationPackageDetailsPtrOutput() PublicationPackageDetailsPtrOutput {
	return o.ToPublicationPackageDetailsPtrOutputWithContext(context.Background())
}

func (o PublicationPackageDetailsOutput) ToPublicationPackageDetailsPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicationPackageDetails) *PublicationPackageDetails {
		return &v
	}).(PublicationPackageDetailsPtrOutput)
}

func (o PublicationPackageDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetails] {
	return pulumix.Output[PublicationPackageDetails]{
		OutputState: o.OutputState,
	}
}

// The end user license agreeement (EULA) that consumers of this listing must accept.
func (o PublicationPackageDetailsOutput) Eulas() PublicationPackageDetailsEulaArrayOutput {
	return o.ApplyT(func(v PublicationPackageDetails) []PublicationPackageDetailsEula { return v.Eulas }).(PublicationPackageDetailsEulaArrayOutput)
}

// The unique identifier for the base image of the publication.
func (o PublicationPackageDetailsOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationPackageDetails) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The operating system used by the listing.
func (o PublicationPackageDetailsOutput) OperatingSystem() PublicationPackageDetailsOperatingSystemOutput {
	return o.ApplyT(func(v PublicationPackageDetails) PublicationPackageDetailsOperatingSystem { return v.OperatingSystem }).(PublicationPackageDetailsOperatingSystemOutput)
}

// The package's type.
func (o PublicationPackageDetailsOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v PublicationPackageDetails) string { return v.PackageType }).(pulumi.StringOutput)
}

// The package version.
func (o PublicationPackageDetailsOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PublicationPackageDetails) string { return v.PackageVersion }).(pulumi.StringOutput)
}

type PublicationPackageDetailsPtrOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPackageDetails)(nil)).Elem()
}

func (o PublicationPackageDetailsPtrOutput) ToPublicationPackageDetailsPtrOutput() PublicationPackageDetailsPtrOutput {
	return o
}

func (o PublicationPackageDetailsPtrOutput) ToPublicationPackageDetailsPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsPtrOutput {
	return o
}

func (o PublicationPackageDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PublicationPackageDetails] {
	return pulumix.Output[*PublicationPackageDetails]{
		OutputState: o.OutputState,
	}
}

func (o PublicationPackageDetailsPtrOutput) Elem() PublicationPackageDetailsOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) PublicationPackageDetails {
		if v != nil {
			return *v
		}
		var ret PublicationPackageDetails
		return ret
	}).(PublicationPackageDetailsOutput)
}

// The end user license agreeement (EULA) that consumers of this listing must accept.
func (o PublicationPackageDetailsPtrOutput) Eulas() PublicationPackageDetailsEulaArrayOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) []PublicationPackageDetailsEula {
		if v == nil {
			return nil
		}
		return v.Eulas
	}).(PublicationPackageDetailsEulaArrayOutput)
}

// The unique identifier for the base image of the publication.
func (o PublicationPackageDetailsPtrOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) *string {
		if v == nil {
			return nil
		}
		return v.ImageId
	}).(pulumi.StringPtrOutput)
}

// The operating system used by the listing.
func (o PublicationPackageDetailsPtrOutput) OperatingSystem() PublicationPackageDetailsOperatingSystemPtrOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) *PublicationPackageDetailsOperatingSystem {
		if v == nil {
			return nil
		}
		return &v.OperatingSystem
	}).(PublicationPackageDetailsOperatingSystemPtrOutput)
}

// The package's type.
func (o PublicationPackageDetailsPtrOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) *string {
		if v == nil {
			return nil
		}
		return &v.PackageType
	}).(pulumi.StringPtrOutput)
}

// The package version.
func (o PublicationPackageDetailsPtrOutput) PackageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPackageDetails) *string {
		if v == nil {
			return nil
		}
		return &v.PackageVersion
	}).(pulumi.StringPtrOutput)
}

type PublicationPackageDetailsEula struct {
	// The end user license agreement's type.
	EulaType string `pulumi:"eulaType"`
	// The text of the end user license agreement.
	LicenseText *string `pulumi:"licenseText"`
}

// PublicationPackageDetailsEulaInput is an input type that accepts PublicationPackageDetailsEulaArgs and PublicationPackageDetailsEulaOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsEulaInput` via:
//
//	PublicationPackageDetailsEulaArgs{...}
type PublicationPackageDetailsEulaInput interface {
	pulumi.Input

	ToPublicationPackageDetailsEulaOutput() PublicationPackageDetailsEulaOutput
	ToPublicationPackageDetailsEulaOutputWithContext(context.Context) PublicationPackageDetailsEulaOutput
}

type PublicationPackageDetailsEulaArgs struct {
	// The end user license agreement's type.
	EulaType pulumi.StringInput `pulumi:"eulaType"`
	// The text of the end user license agreement.
	LicenseText pulumi.StringPtrInput `pulumi:"licenseText"`
}

func (PublicationPackageDetailsEulaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetailsEula)(nil)).Elem()
}

func (i PublicationPackageDetailsEulaArgs) ToPublicationPackageDetailsEulaOutput() PublicationPackageDetailsEulaOutput {
	return i.ToPublicationPackageDetailsEulaOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsEulaArgs) ToPublicationPackageDetailsEulaOutputWithContext(ctx context.Context) PublicationPackageDetailsEulaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsEulaOutput)
}

func (i PublicationPackageDetailsEulaArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetailsEula] {
	return pulumix.Output[PublicationPackageDetailsEula]{
		OutputState: i.ToPublicationPackageDetailsEulaOutputWithContext(ctx).OutputState,
	}
}

// PublicationPackageDetailsEulaArrayInput is an input type that accepts PublicationPackageDetailsEulaArray and PublicationPackageDetailsEulaArrayOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsEulaArrayInput` via:
//
//	PublicationPackageDetailsEulaArray{ PublicationPackageDetailsEulaArgs{...} }
type PublicationPackageDetailsEulaArrayInput interface {
	pulumi.Input

	ToPublicationPackageDetailsEulaArrayOutput() PublicationPackageDetailsEulaArrayOutput
	ToPublicationPackageDetailsEulaArrayOutputWithContext(context.Context) PublicationPackageDetailsEulaArrayOutput
}

type PublicationPackageDetailsEulaArray []PublicationPackageDetailsEulaInput

func (PublicationPackageDetailsEulaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationPackageDetailsEula)(nil)).Elem()
}

func (i PublicationPackageDetailsEulaArray) ToPublicationPackageDetailsEulaArrayOutput() PublicationPackageDetailsEulaArrayOutput {
	return i.ToPublicationPackageDetailsEulaArrayOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsEulaArray) ToPublicationPackageDetailsEulaArrayOutputWithContext(ctx context.Context) PublicationPackageDetailsEulaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsEulaArrayOutput)
}

func (i PublicationPackageDetailsEulaArray) ToOutput(ctx context.Context) pulumix.Output[[]PublicationPackageDetailsEula] {
	return pulumix.Output[[]PublicationPackageDetailsEula]{
		OutputState: i.ToPublicationPackageDetailsEulaArrayOutputWithContext(ctx).OutputState,
	}
}

type PublicationPackageDetailsEulaOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsEulaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetailsEula)(nil)).Elem()
}

func (o PublicationPackageDetailsEulaOutput) ToPublicationPackageDetailsEulaOutput() PublicationPackageDetailsEulaOutput {
	return o
}

func (o PublicationPackageDetailsEulaOutput) ToPublicationPackageDetailsEulaOutputWithContext(ctx context.Context) PublicationPackageDetailsEulaOutput {
	return o
}

func (o PublicationPackageDetailsEulaOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetailsEula] {
	return pulumix.Output[PublicationPackageDetailsEula]{
		OutputState: o.OutputState,
	}
}

// The end user license agreement's type.
func (o PublicationPackageDetailsEulaOutput) EulaType() pulumi.StringOutput {
	return o.ApplyT(func(v PublicationPackageDetailsEula) string { return v.EulaType }).(pulumi.StringOutput)
}

// The text of the end user license agreement.
func (o PublicationPackageDetailsEulaOutput) LicenseText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationPackageDetailsEula) *string { return v.LicenseText }).(pulumi.StringPtrOutput)
}

type PublicationPackageDetailsEulaArrayOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsEulaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationPackageDetailsEula)(nil)).Elem()
}

func (o PublicationPackageDetailsEulaArrayOutput) ToPublicationPackageDetailsEulaArrayOutput() PublicationPackageDetailsEulaArrayOutput {
	return o
}

func (o PublicationPackageDetailsEulaArrayOutput) ToPublicationPackageDetailsEulaArrayOutputWithContext(ctx context.Context) PublicationPackageDetailsEulaArrayOutput {
	return o
}

func (o PublicationPackageDetailsEulaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PublicationPackageDetailsEula] {
	return pulumix.Output[[]PublicationPackageDetailsEula]{
		OutputState: o.OutputState,
	}
}

func (o PublicationPackageDetailsEulaArrayOutput) Index(i pulumi.IntInput) PublicationPackageDetailsEulaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicationPackageDetailsEula {
		return vs[0].([]PublicationPackageDetailsEula)[vs[1].(int)]
	}).(PublicationPackageDetailsEulaOutput)
}

type PublicationPackageDetailsOperatingSystem struct {
	// (Updatable) The name of the contact.
	Name *string `pulumi:"name"`
}

// PublicationPackageDetailsOperatingSystemInput is an input type that accepts PublicationPackageDetailsOperatingSystemArgs and PublicationPackageDetailsOperatingSystemOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsOperatingSystemInput` via:
//
//	PublicationPackageDetailsOperatingSystemArgs{...}
type PublicationPackageDetailsOperatingSystemInput interface {
	pulumi.Input

	ToPublicationPackageDetailsOperatingSystemOutput() PublicationPackageDetailsOperatingSystemOutput
	ToPublicationPackageDetailsOperatingSystemOutputWithContext(context.Context) PublicationPackageDetailsOperatingSystemOutput
}

type PublicationPackageDetailsOperatingSystemArgs struct {
	// (Updatable) The name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PublicationPackageDetailsOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetailsOperatingSystem)(nil)).Elem()
}

func (i PublicationPackageDetailsOperatingSystemArgs) ToPublicationPackageDetailsOperatingSystemOutput() PublicationPackageDetailsOperatingSystemOutput {
	return i.ToPublicationPackageDetailsOperatingSystemOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsOperatingSystemArgs) ToPublicationPackageDetailsOperatingSystemOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsOperatingSystemOutput)
}

func (i PublicationPackageDetailsOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetailsOperatingSystem] {
	return pulumix.Output[PublicationPackageDetailsOperatingSystem]{
		OutputState: i.ToPublicationPackageDetailsOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

func (i PublicationPackageDetailsOperatingSystemArgs) ToPublicationPackageDetailsOperatingSystemPtrOutput() PublicationPackageDetailsOperatingSystemPtrOutput {
	return i.ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(context.Background())
}

func (i PublicationPackageDetailsOperatingSystemArgs) ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsOperatingSystemOutput).ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx)
}

// PublicationPackageDetailsOperatingSystemPtrInput is an input type that accepts PublicationPackageDetailsOperatingSystemArgs, PublicationPackageDetailsOperatingSystemPtr and PublicationPackageDetailsOperatingSystemPtrOutput values.
// You can construct a concrete instance of `PublicationPackageDetailsOperatingSystemPtrInput` via:
//
//	        PublicationPackageDetailsOperatingSystemArgs{...}
//
//	or:
//
//	        nil
type PublicationPackageDetailsOperatingSystemPtrInput interface {
	pulumi.Input

	ToPublicationPackageDetailsOperatingSystemPtrOutput() PublicationPackageDetailsOperatingSystemPtrOutput
	ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(context.Context) PublicationPackageDetailsOperatingSystemPtrOutput
}

type publicationPackageDetailsOperatingSystemPtrType PublicationPackageDetailsOperatingSystemArgs

func PublicationPackageDetailsOperatingSystemPtr(v *PublicationPackageDetailsOperatingSystemArgs) PublicationPackageDetailsOperatingSystemPtrInput {
	return (*publicationPackageDetailsOperatingSystemPtrType)(v)
}

func (*publicationPackageDetailsOperatingSystemPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPackageDetailsOperatingSystem)(nil)).Elem()
}

func (i *publicationPackageDetailsOperatingSystemPtrType) ToPublicationPackageDetailsOperatingSystemPtrOutput() PublicationPackageDetailsOperatingSystemPtrOutput {
	return i.ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(context.Background())
}

func (i *publicationPackageDetailsOperatingSystemPtrType) ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPackageDetailsOperatingSystemPtrOutput)
}

func (i *publicationPackageDetailsOperatingSystemPtrType) ToOutput(ctx context.Context) pulumix.Output[*PublicationPackageDetailsOperatingSystem] {
	return pulumix.Output[*PublicationPackageDetailsOperatingSystem]{
		OutputState: i.ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx).OutputState,
	}
}

type PublicationPackageDetailsOperatingSystemOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationPackageDetailsOperatingSystem)(nil)).Elem()
}

func (o PublicationPackageDetailsOperatingSystemOutput) ToPublicationPackageDetailsOperatingSystemOutput() PublicationPackageDetailsOperatingSystemOutput {
	return o
}

func (o PublicationPackageDetailsOperatingSystemOutput) ToPublicationPackageDetailsOperatingSystemOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemOutput {
	return o
}

func (o PublicationPackageDetailsOperatingSystemOutput) ToPublicationPackageDetailsOperatingSystemPtrOutput() PublicationPackageDetailsOperatingSystemPtrOutput {
	return o.ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(context.Background())
}

func (o PublicationPackageDetailsOperatingSystemOutput) ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicationPackageDetailsOperatingSystem) *PublicationPackageDetailsOperatingSystem {
		return &v
	}).(PublicationPackageDetailsOperatingSystemPtrOutput)
}

func (o PublicationPackageDetailsOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationPackageDetailsOperatingSystem] {
	return pulumix.Output[PublicationPackageDetailsOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// (Updatable) The name of the contact.
func (o PublicationPackageDetailsOperatingSystemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationPackageDetailsOperatingSystem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PublicationPackageDetailsOperatingSystemPtrOutput struct{ *pulumi.OutputState }

func (PublicationPackageDetailsOperatingSystemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPackageDetailsOperatingSystem)(nil)).Elem()
}

func (o PublicationPackageDetailsOperatingSystemPtrOutput) ToPublicationPackageDetailsOperatingSystemPtrOutput() PublicationPackageDetailsOperatingSystemPtrOutput {
	return o
}

func (o PublicationPackageDetailsOperatingSystemPtrOutput) ToPublicationPackageDetailsOperatingSystemPtrOutputWithContext(ctx context.Context) PublicationPackageDetailsOperatingSystemPtrOutput {
	return o
}

func (o PublicationPackageDetailsOperatingSystemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PublicationPackageDetailsOperatingSystem] {
	return pulumix.Output[*PublicationPackageDetailsOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o PublicationPackageDetailsOperatingSystemPtrOutput) Elem() PublicationPackageDetailsOperatingSystemOutput {
	return o.ApplyT(func(v *PublicationPackageDetailsOperatingSystem) PublicationPackageDetailsOperatingSystem {
		if v != nil {
			return *v
		}
		var ret PublicationPackageDetailsOperatingSystem
		return ret
	}).(PublicationPackageDetailsOperatingSystemOutput)
}

// (Updatable) The name of the contact.
func (o PublicationPackageDetailsOperatingSystemPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPackageDetailsOperatingSystem) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type PublicationSupportContact struct {
	// (Updatable) The email of the contact.
	Email *string `pulumi:"email"`
	// (Updatable) The name of the contact.
	Name *string `pulumi:"name"`
	// (Updatable) The phone number of the contact.
	Phone *string `pulumi:"phone"`
	// (Updatable) The email subject line to use when contacting support.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Subject *string `pulumi:"subject"`
}

// PublicationSupportContactInput is an input type that accepts PublicationSupportContactArgs and PublicationSupportContactOutput values.
// You can construct a concrete instance of `PublicationSupportContactInput` via:
//
//	PublicationSupportContactArgs{...}
type PublicationSupportContactInput interface {
	pulumi.Input

	ToPublicationSupportContactOutput() PublicationSupportContactOutput
	ToPublicationSupportContactOutputWithContext(context.Context) PublicationSupportContactOutput
}

type PublicationSupportContactArgs struct {
	// (Updatable) The email of the contact.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// (Updatable) The name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Updatable) The phone number of the contact.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// (Updatable) The email subject line to use when contacting support.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (PublicationSupportContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationSupportContact)(nil)).Elem()
}

func (i PublicationSupportContactArgs) ToPublicationSupportContactOutput() PublicationSupportContactOutput {
	return i.ToPublicationSupportContactOutputWithContext(context.Background())
}

func (i PublicationSupportContactArgs) ToPublicationSupportContactOutputWithContext(ctx context.Context) PublicationSupportContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationSupportContactOutput)
}

func (i PublicationSupportContactArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationSupportContact] {
	return pulumix.Output[PublicationSupportContact]{
		OutputState: i.ToPublicationSupportContactOutputWithContext(ctx).OutputState,
	}
}

// PublicationSupportContactArrayInput is an input type that accepts PublicationSupportContactArray and PublicationSupportContactArrayOutput values.
// You can construct a concrete instance of `PublicationSupportContactArrayInput` via:
//
//	PublicationSupportContactArray{ PublicationSupportContactArgs{...} }
type PublicationSupportContactArrayInput interface {
	pulumi.Input

	ToPublicationSupportContactArrayOutput() PublicationSupportContactArrayOutput
	ToPublicationSupportContactArrayOutputWithContext(context.Context) PublicationSupportContactArrayOutput
}

type PublicationSupportContactArray []PublicationSupportContactInput

func (PublicationSupportContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationSupportContact)(nil)).Elem()
}

func (i PublicationSupportContactArray) ToPublicationSupportContactArrayOutput() PublicationSupportContactArrayOutput {
	return i.ToPublicationSupportContactArrayOutputWithContext(context.Background())
}

func (i PublicationSupportContactArray) ToPublicationSupportContactArrayOutputWithContext(ctx context.Context) PublicationSupportContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationSupportContactArrayOutput)
}

func (i PublicationSupportContactArray) ToOutput(ctx context.Context) pulumix.Output[[]PublicationSupportContact] {
	return pulumix.Output[[]PublicationSupportContact]{
		OutputState: i.ToPublicationSupportContactArrayOutputWithContext(ctx).OutputState,
	}
}

type PublicationSupportContactOutput struct{ *pulumi.OutputState }

func (PublicationSupportContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationSupportContact)(nil)).Elem()
}

func (o PublicationSupportContactOutput) ToPublicationSupportContactOutput() PublicationSupportContactOutput {
	return o
}

func (o PublicationSupportContactOutput) ToPublicationSupportContactOutputWithContext(ctx context.Context) PublicationSupportContactOutput {
	return o
}

func (o PublicationSupportContactOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationSupportContact] {
	return pulumix.Output[PublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

// (Updatable) The email of the contact.
func (o PublicationSupportContactOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationSupportContact) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// (Updatable) The name of the contact.
func (o PublicationSupportContactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationSupportContact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Updatable) The phone number of the contact.
func (o PublicationSupportContactOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationSupportContact) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// (Updatable) The email subject line to use when contacting support.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o PublicationSupportContactOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationSupportContact) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type PublicationSupportContactArrayOutput struct{ *pulumi.OutputState }

func (PublicationSupportContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationSupportContact)(nil)).Elem()
}

func (o PublicationSupportContactArrayOutput) ToPublicationSupportContactArrayOutput() PublicationSupportContactArrayOutput {
	return o
}

func (o PublicationSupportContactArrayOutput) ToPublicationSupportContactArrayOutputWithContext(ctx context.Context) PublicationSupportContactArrayOutput {
	return o
}

func (o PublicationSupportContactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PublicationSupportContact] {
	return pulumix.Output[[]PublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

func (o PublicationSupportContactArrayOutput) Index(i pulumi.IntInput) PublicationSupportContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicationSupportContact {
		return vs[0].([]PublicationSupportContact)[vs[1].(int)]
	}).(PublicationSupportContactOutput)
}

type PublicationSupportedOperatingSystem struct {
	// (Updatable) The name of the contact.
	Name *string `pulumi:"name"`
}

// PublicationSupportedOperatingSystemInput is an input type that accepts PublicationSupportedOperatingSystemArgs and PublicationSupportedOperatingSystemOutput values.
// You can construct a concrete instance of `PublicationSupportedOperatingSystemInput` via:
//
//	PublicationSupportedOperatingSystemArgs{...}
type PublicationSupportedOperatingSystemInput interface {
	pulumi.Input

	ToPublicationSupportedOperatingSystemOutput() PublicationSupportedOperatingSystemOutput
	ToPublicationSupportedOperatingSystemOutputWithContext(context.Context) PublicationSupportedOperatingSystemOutput
}

type PublicationSupportedOperatingSystemArgs struct {
	// (Updatable) The name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PublicationSupportedOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i PublicationSupportedOperatingSystemArgs) ToPublicationSupportedOperatingSystemOutput() PublicationSupportedOperatingSystemOutput {
	return i.ToPublicationSupportedOperatingSystemOutputWithContext(context.Background())
}

func (i PublicationSupportedOperatingSystemArgs) ToPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) PublicationSupportedOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationSupportedOperatingSystemOutput)
}

func (i PublicationSupportedOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[PublicationSupportedOperatingSystem] {
	return pulumix.Output[PublicationSupportedOperatingSystem]{
		OutputState: i.ToPublicationSupportedOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// PublicationSupportedOperatingSystemArrayInput is an input type that accepts PublicationSupportedOperatingSystemArray and PublicationSupportedOperatingSystemArrayOutput values.
// You can construct a concrete instance of `PublicationSupportedOperatingSystemArrayInput` via:
//
//	PublicationSupportedOperatingSystemArray{ PublicationSupportedOperatingSystemArgs{...} }
type PublicationSupportedOperatingSystemArrayInput interface {
	pulumi.Input

	ToPublicationSupportedOperatingSystemArrayOutput() PublicationSupportedOperatingSystemArrayOutput
	ToPublicationSupportedOperatingSystemArrayOutputWithContext(context.Context) PublicationSupportedOperatingSystemArrayOutput
}

type PublicationSupportedOperatingSystemArray []PublicationSupportedOperatingSystemInput

func (PublicationSupportedOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i PublicationSupportedOperatingSystemArray) ToPublicationSupportedOperatingSystemArrayOutput() PublicationSupportedOperatingSystemArrayOutput {
	return i.ToPublicationSupportedOperatingSystemArrayOutputWithContext(context.Background())
}

func (i PublicationSupportedOperatingSystemArray) ToPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) PublicationSupportedOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationSupportedOperatingSystemArrayOutput)
}

func (i PublicationSupportedOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]PublicationSupportedOperatingSystem] {
	return pulumix.Output[[]PublicationSupportedOperatingSystem]{
		OutputState: i.ToPublicationSupportedOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type PublicationSupportedOperatingSystemOutput struct{ *pulumi.OutputState }

func (PublicationSupportedOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o PublicationSupportedOperatingSystemOutput) ToPublicationSupportedOperatingSystemOutput() PublicationSupportedOperatingSystemOutput {
	return o
}

func (o PublicationSupportedOperatingSystemOutput) ToPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) PublicationSupportedOperatingSystemOutput {
	return o
}

func (o PublicationSupportedOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[PublicationSupportedOperatingSystem] {
	return pulumix.Output[PublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// (Updatable) The name of the contact.
func (o PublicationSupportedOperatingSystemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicationSupportedOperatingSystem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PublicationSupportedOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (PublicationSupportedOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o PublicationSupportedOperatingSystemArrayOutput) ToPublicationSupportedOperatingSystemArrayOutput() PublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o PublicationSupportedOperatingSystemArrayOutput) ToPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) PublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o PublicationSupportedOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PublicationSupportedOperatingSystem] {
	return pulumix.Output[[]PublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o PublicationSupportedOperatingSystemArrayOutput) Index(i pulumi.IntInput) PublicationSupportedOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicationSupportedOperatingSystem {
		return vs[0].([]PublicationSupportedOperatingSystem)[vs[1].(int)]
	}).(PublicationSupportedOperatingSystemOutput)
}

type GetAcceptedAgreementsAcceptedAgreement struct {
	// The unique identifier for the terms of use agreement itself.
	AgreementId string `pulumi:"agreementId"`
	// The unique identifier for the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The display name of the resource.
	DisplayName string `pulumi:"displayName"`
	// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The unique identifier for the acceptance of the agreement within a specific compartment.
	Id string `pulumi:"id"`
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion string `pulumi:"packageVersion"`
	Signature      string `pulumi:"signature"`
	// The time the agreement was accepted.
	TimeAccepted string `pulumi:"timeAccepted"`
}

// GetAcceptedAgreementsAcceptedAgreementInput is an input type that accepts GetAcceptedAgreementsAcceptedAgreementArgs and GetAcceptedAgreementsAcceptedAgreementOutput values.
// You can construct a concrete instance of `GetAcceptedAgreementsAcceptedAgreementInput` via:
//
//	GetAcceptedAgreementsAcceptedAgreementArgs{...}
type GetAcceptedAgreementsAcceptedAgreementInput interface {
	pulumi.Input

	ToGetAcceptedAgreementsAcceptedAgreementOutput() GetAcceptedAgreementsAcceptedAgreementOutput
	ToGetAcceptedAgreementsAcceptedAgreementOutputWithContext(context.Context) GetAcceptedAgreementsAcceptedAgreementOutput
}

type GetAcceptedAgreementsAcceptedAgreementArgs struct {
	// The unique identifier for the terms of use agreement itself.
	AgreementId pulumi.StringInput `pulumi:"agreementId"`
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// The display name of the resource.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The unique identifier for the acceptance of the agreement within a specific compartment.
	Id pulumi.StringInput `pulumi:"id"`
	// The unique identifier for the listing.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	Signature      pulumi.StringInput `pulumi:"signature"`
	// The time the agreement was accepted.
	TimeAccepted pulumi.StringInput `pulumi:"timeAccepted"`
}

func (GetAcceptedAgreementsAcceptedAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsAcceptedAgreement)(nil)).Elem()
}

func (i GetAcceptedAgreementsAcceptedAgreementArgs) ToGetAcceptedAgreementsAcceptedAgreementOutput() GetAcceptedAgreementsAcceptedAgreementOutput {
	return i.ToGetAcceptedAgreementsAcceptedAgreementOutputWithContext(context.Background())
}

func (i GetAcceptedAgreementsAcceptedAgreementArgs) ToGetAcceptedAgreementsAcceptedAgreementOutputWithContext(ctx context.Context) GetAcceptedAgreementsAcceptedAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceptedAgreementsAcceptedAgreementOutput)
}

func (i GetAcceptedAgreementsAcceptedAgreementArgs) ToOutput(ctx context.Context) pulumix.Output[GetAcceptedAgreementsAcceptedAgreement] {
	return pulumix.Output[GetAcceptedAgreementsAcceptedAgreement]{
		OutputState: i.ToGetAcceptedAgreementsAcceptedAgreementOutputWithContext(ctx).OutputState,
	}
}

// GetAcceptedAgreementsAcceptedAgreementArrayInput is an input type that accepts GetAcceptedAgreementsAcceptedAgreementArray and GetAcceptedAgreementsAcceptedAgreementArrayOutput values.
// You can construct a concrete instance of `GetAcceptedAgreementsAcceptedAgreementArrayInput` via:
//
//	GetAcceptedAgreementsAcceptedAgreementArray{ GetAcceptedAgreementsAcceptedAgreementArgs{...} }
type GetAcceptedAgreementsAcceptedAgreementArrayInput interface {
	pulumi.Input

	ToGetAcceptedAgreementsAcceptedAgreementArrayOutput() GetAcceptedAgreementsAcceptedAgreementArrayOutput
	ToGetAcceptedAgreementsAcceptedAgreementArrayOutputWithContext(context.Context) GetAcceptedAgreementsAcceptedAgreementArrayOutput
}

type GetAcceptedAgreementsAcceptedAgreementArray []GetAcceptedAgreementsAcceptedAgreementInput

func (GetAcceptedAgreementsAcceptedAgreementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAcceptedAgreementsAcceptedAgreement)(nil)).Elem()
}

func (i GetAcceptedAgreementsAcceptedAgreementArray) ToGetAcceptedAgreementsAcceptedAgreementArrayOutput() GetAcceptedAgreementsAcceptedAgreementArrayOutput {
	return i.ToGetAcceptedAgreementsAcceptedAgreementArrayOutputWithContext(context.Background())
}

func (i GetAcceptedAgreementsAcceptedAgreementArray) ToGetAcceptedAgreementsAcceptedAgreementArrayOutputWithContext(ctx context.Context) GetAcceptedAgreementsAcceptedAgreementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceptedAgreementsAcceptedAgreementArrayOutput)
}

func (i GetAcceptedAgreementsAcceptedAgreementArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAcceptedAgreementsAcceptedAgreement] {
	return pulumix.Output[[]GetAcceptedAgreementsAcceptedAgreement]{
		OutputState: i.ToGetAcceptedAgreementsAcceptedAgreementArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAcceptedAgreementsAcceptedAgreementOutput struct{ *pulumi.OutputState }

func (GetAcceptedAgreementsAcceptedAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsAcceptedAgreement)(nil)).Elem()
}

func (o GetAcceptedAgreementsAcceptedAgreementOutput) ToGetAcceptedAgreementsAcceptedAgreementOutput() GetAcceptedAgreementsAcceptedAgreementOutput {
	return o
}

func (o GetAcceptedAgreementsAcceptedAgreementOutput) ToGetAcceptedAgreementsAcceptedAgreementOutputWithContext(ctx context.Context) GetAcceptedAgreementsAcceptedAgreementOutput {
	return o
}

func (o GetAcceptedAgreementsAcceptedAgreementOutput) ToOutput(ctx context.Context) pulumix.Output[GetAcceptedAgreementsAcceptedAgreement] {
	return pulumix.Output[GetAcceptedAgreementsAcceptedAgreement]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the terms of use agreement itself.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) AgreementId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.AgreementId }).(pulumi.StringOutput)
}

// The unique identifier for the compartment.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o GetAcceptedAgreementsAcceptedAgreementOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The display name of the resource.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o GetAcceptedAgreementsAcceptedAgreementOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The unique identifier for the acceptance of the agreement within a specific compartment.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.Id }).(pulumi.StringOutput)
}

// The unique identifier for the listing.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.ListingId }).(pulumi.StringOutput)
}

// The version of the package. Package versions are unique within a listing.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.PackageVersion }).(pulumi.StringOutput)
}

func (o GetAcceptedAgreementsAcceptedAgreementOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.Signature }).(pulumi.StringOutput)
}

// The time the agreement was accepted.
func (o GetAcceptedAgreementsAcceptedAgreementOutput) TimeAccepted() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsAcceptedAgreement) string { return v.TimeAccepted }).(pulumi.StringOutput)
}

type GetAcceptedAgreementsAcceptedAgreementArrayOutput struct{ *pulumi.OutputState }

func (GetAcceptedAgreementsAcceptedAgreementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAcceptedAgreementsAcceptedAgreement)(nil)).Elem()
}

func (o GetAcceptedAgreementsAcceptedAgreementArrayOutput) ToGetAcceptedAgreementsAcceptedAgreementArrayOutput() GetAcceptedAgreementsAcceptedAgreementArrayOutput {
	return o
}

func (o GetAcceptedAgreementsAcceptedAgreementArrayOutput) ToGetAcceptedAgreementsAcceptedAgreementArrayOutputWithContext(ctx context.Context) GetAcceptedAgreementsAcceptedAgreementArrayOutput {
	return o
}

func (o GetAcceptedAgreementsAcceptedAgreementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAcceptedAgreementsAcceptedAgreement] {
	return pulumix.Output[[]GetAcceptedAgreementsAcceptedAgreement]{
		OutputState: o.OutputState,
	}
}

func (o GetAcceptedAgreementsAcceptedAgreementArrayOutput) Index(i pulumi.IntInput) GetAcceptedAgreementsAcceptedAgreementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAcceptedAgreementsAcceptedAgreement {
		return vs[0].([]GetAcceptedAgreementsAcceptedAgreement)[vs[1].(int)]
	}).(GetAcceptedAgreementsAcceptedAgreementOutput)
}

type GetAcceptedAgreementsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetAcceptedAgreementsFilterInput is an input type that accepts GetAcceptedAgreementsFilterArgs and GetAcceptedAgreementsFilterOutput values.
// You can construct a concrete instance of `GetAcceptedAgreementsFilterInput` via:
//
//	GetAcceptedAgreementsFilterArgs{...}
type GetAcceptedAgreementsFilterInput interface {
	pulumi.Input

	ToGetAcceptedAgreementsFilterOutput() GetAcceptedAgreementsFilterOutput
	ToGetAcceptedAgreementsFilterOutputWithContext(context.Context) GetAcceptedAgreementsFilterOutput
}

type GetAcceptedAgreementsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetAcceptedAgreementsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsFilter)(nil)).Elem()
}

func (i GetAcceptedAgreementsFilterArgs) ToGetAcceptedAgreementsFilterOutput() GetAcceptedAgreementsFilterOutput {
	return i.ToGetAcceptedAgreementsFilterOutputWithContext(context.Background())
}

func (i GetAcceptedAgreementsFilterArgs) ToGetAcceptedAgreementsFilterOutputWithContext(ctx context.Context) GetAcceptedAgreementsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceptedAgreementsFilterOutput)
}

func (i GetAcceptedAgreementsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetAcceptedAgreementsFilter] {
	return pulumix.Output[GetAcceptedAgreementsFilter]{
		OutputState: i.ToGetAcceptedAgreementsFilterOutputWithContext(ctx).OutputState,
	}
}

// GetAcceptedAgreementsFilterArrayInput is an input type that accepts GetAcceptedAgreementsFilterArray and GetAcceptedAgreementsFilterArrayOutput values.
// You can construct a concrete instance of `GetAcceptedAgreementsFilterArrayInput` via:
//
//	GetAcceptedAgreementsFilterArray{ GetAcceptedAgreementsFilterArgs{...} }
type GetAcceptedAgreementsFilterArrayInput interface {
	pulumi.Input

	ToGetAcceptedAgreementsFilterArrayOutput() GetAcceptedAgreementsFilterArrayOutput
	ToGetAcceptedAgreementsFilterArrayOutputWithContext(context.Context) GetAcceptedAgreementsFilterArrayOutput
}

type GetAcceptedAgreementsFilterArray []GetAcceptedAgreementsFilterInput

func (GetAcceptedAgreementsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAcceptedAgreementsFilter)(nil)).Elem()
}

func (i GetAcceptedAgreementsFilterArray) ToGetAcceptedAgreementsFilterArrayOutput() GetAcceptedAgreementsFilterArrayOutput {
	return i.ToGetAcceptedAgreementsFilterArrayOutputWithContext(context.Background())
}

func (i GetAcceptedAgreementsFilterArray) ToGetAcceptedAgreementsFilterArrayOutputWithContext(ctx context.Context) GetAcceptedAgreementsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAcceptedAgreementsFilterArrayOutput)
}

func (i GetAcceptedAgreementsFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAcceptedAgreementsFilter] {
	return pulumix.Output[[]GetAcceptedAgreementsFilter]{
		OutputState: i.ToGetAcceptedAgreementsFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAcceptedAgreementsFilterOutput struct{ *pulumi.OutputState }

func (GetAcceptedAgreementsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAcceptedAgreementsFilter)(nil)).Elem()
}

func (o GetAcceptedAgreementsFilterOutput) ToGetAcceptedAgreementsFilterOutput() GetAcceptedAgreementsFilterOutput {
	return o
}

func (o GetAcceptedAgreementsFilterOutput) ToGetAcceptedAgreementsFilterOutputWithContext(ctx context.Context) GetAcceptedAgreementsFilterOutput {
	return o
}

func (o GetAcceptedAgreementsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetAcceptedAgreementsFilter] {
	return pulumix.Output[GetAcceptedAgreementsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetAcceptedAgreementsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAcceptedAgreementsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetAcceptedAgreementsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAcceptedAgreementsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetAcceptedAgreementsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetAcceptedAgreementsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAcceptedAgreementsFilter)(nil)).Elem()
}

func (o GetAcceptedAgreementsFilterArrayOutput) ToGetAcceptedAgreementsFilterArrayOutput() GetAcceptedAgreementsFilterArrayOutput {
	return o
}

func (o GetAcceptedAgreementsFilterArrayOutput) ToGetAcceptedAgreementsFilterArrayOutputWithContext(ctx context.Context) GetAcceptedAgreementsFilterArrayOutput {
	return o
}

func (o GetAcceptedAgreementsFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAcceptedAgreementsFilter] {
	return pulumix.Output[[]GetAcceptedAgreementsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetAcceptedAgreementsFilterArrayOutput) Index(i pulumi.IntInput) GetAcceptedAgreementsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAcceptedAgreementsFilter {
		return vs[0].([]GetAcceptedAgreementsFilter)[vs[1].(int)]
	}).(GetAcceptedAgreementsFilterOutput)
}

type GetCategoriesCategory struct {
	// Name of the product category.
	Name string `pulumi:"name"`
}

// GetCategoriesCategoryInput is an input type that accepts GetCategoriesCategoryArgs and GetCategoriesCategoryOutput values.
// You can construct a concrete instance of `GetCategoriesCategoryInput` via:
//
//	GetCategoriesCategoryArgs{...}
type GetCategoriesCategoryInput interface {
	pulumi.Input

	ToGetCategoriesCategoryOutput() GetCategoriesCategoryOutput
	ToGetCategoriesCategoryOutputWithContext(context.Context) GetCategoriesCategoryOutput
}

type GetCategoriesCategoryArgs struct {
	// Name of the product category.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetCategoriesCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCategoriesCategory)(nil)).Elem()
}

func (i GetCategoriesCategoryArgs) ToGetCategoriesCategoryOutput() GetCategoriesCategoryOutput {
	return i.ToGetCategoriesCategoryOutputWithContext(context.Background())
}

func (i GetCategoriesCategoryArgs) ToGetCategoriesCategoryOutputWithContext(ctx context.Context) GetCategoriesCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCategoriesCategoryOutput)
}

func (i GetCategoriesCategoryArgs) ToOutput(ctx context.Context) pulumix.Output[GetCategoriesCategory] {
	return pulumix.Output[GetCategoriesCategory]{
		OutputState: i.ToGetCategoriesCategoryOutputWithContext(ctx).OutputState,
	}
}

// GetCategoriesCategoryArrayInput is an input type that accepts GetCategoriesCategoryArray and GetCategoriesCategoryArrayOutput values.
// You can construct a concrete instance of `GetCategoriesCategoryArrayInput` via:
//
//	GetCategoriesCategoryArray{ GetCategoriesCategoryArgs{...} }
type GetCategoriesCategoryArrayInput interface {
	pulumi.Input

	ToGetCategoriesCategoryArrayOutput() GetCategoriesCategoryArrayOutput
	ToGetCategoriesCategoryArrayOutputWithContext(context.Context) GetCategoriesCategoryArrayOutput
}

type GetCategoriesCategoryArray []GetCategoriesCategoryInput

func (GetCategoriesCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCategoriesCategory)(nil)).Elem()
}

func (i GetCategoriesCategoryArray) ToGetCategoriesCategoryArrayOutput() GetCategoriesCategoryArrayOutput {
	return i.ToGetCategoriesCategoryArrayOutputWithContext(context.Background())
}

func (i GetCategoriesCategoryArray) ToGetCategoriesCategoryArrayOutputWithContext(ctx context.Context) GetCategoriesCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCategoriesCategoryArrayOutput)
}

func (i GetCategoriesCategoryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCategoriesCategory] {
	return pulumix.Output[[]GetCategoriesCategory]{
		OutputState: i.ToGetCategoriesCategoryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCategoriesCategoryOutput struct{ *pulumi.OutputState }

func (GetCategoriesCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCategoriesCategory)(nil)).Elem()
}

func (o GetCategoriesCategoryOutput) ToGetCategoriesCategoryOutput() GetCategoriesCategoryOutput {
	return o
}

func (o GetCategoriesCategoryOutput) ToGetCategoriesCategoryOutputWithContext(ctx context.Context) GetCategoriesCategoryOutput {
	return o
}

func (o GetCategoriesCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[GetCategoriesCategory] {
	return pulumix.Output[GetCategoriesCategory]{
		OutputState: o.OutputState,
	}
}

// Name of the product category.
func (o GetCategoriesCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCategoriesCategory) string { return v.Name }).(pulumi.StringOutput)
}

type GetCategoriesCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetCategoriesCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCategoriesCategory)(nil)).Elem()
}

func (o GetCategoriesCategoryArrayOutput) ToGetCategoriesCategoryArrayOutput() GetCategoriesCategoryArrayOutput {
	return o
}

func (o GetCategoriesCategoryArrayOutput) ToGetCategoriesCategoryArrayOutputWithContext(ctx context.Context) GetCategoriesCategoryArrayOutput {
	return o
}

func (o GetCategoriesCategoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCategoriesCategory] {
	return pulumix.Output[[]GetCategoriesCategory]{
		OutputState: o.OutputState,
	}
}

func (o GetCategoriesCategoryArrayOutput) Index(i pulumi.IntInput) GetCategoriesCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCategoriesCategory {
		return vs[0].([]GetCategoriesCategory)[vs[1].(int)]
	}).(GetCategoriesCategoryOutput)
}

type GetCategoriesFilter struct {
	// Name of the product category.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetCategoriesFilterInput is an input type that accepts GetCategoriesFilterArgs and GetCategoriesFilterOutput values.
// You can construct a concrete instance of `GetCategoriesFilterInput` via:
//
//	GetCategoriesFilterArgs{...}
type GetCategoriesFilterInput interface {
	pulumi.Input

	ToGetCategoriesFilterOutput() GetCategoriesFilterOutput
	ToGetCategoriesFilterOutputWithContext(context.Context) GetCategoriesFilterOutput
}

type GetCategoriesFilterArgs struct {
	// Name of the product category.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetCategoriesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCategoriesFilter)(nil)).Elem()
}

func (i GetCategoriesFilterArgs) ToGetCategoriesFilterOutput() GetCategoriesFilterOutput {
	return i.ToGetCategoriesFilterOutputWithContext(context.Background())
}

func (i GetCategoriesFilterArgs) ToGetCategoriesFilterOutputWithContext(ctx context.Context) GetCategoriesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCategoriesFilterOutput)
}

func (i GetCategoriesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetCategoriesFilter] {
	return pulumix.Output[GetCategoriesFilter]{
		OutputState: i.ToGetCategoriesFilterOutputWithContext(ctx).OutputState,
	}
}

// GetCategoriesFilterArrayInput is an input type that accepts GetCategoriesFilterArray and GetCategoriesFilterArrayOutput values.
// You can construct a concrete instance of `GetCategoriesFilterArrayInput` via:
//
//	GetCategoriesFilterArray{ GetCategoriesFilterArgs{...} }
type GetCategoriesFilterArrayInput interface {
	pulumi.Input

	ToGetCategoriesFilterArrayOutput() GetCategoriesFilterArrayOutput
	ToGetCategoriesFilterArrayOutputWithContext(context.Context) GetCategoriesFilterArrayOutput
}

type GetCategoriesFilterArray []GetCategoriesFilterInput

func (GetCategoriesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCategoriesFilter)(nil)).Elem()
}

func (i GetCategoriesFilterArray) ToGetCategoriesFilterArrayOutput() GetCategoriesFilterArrayOutput {
	return i.ToGetCategoriesFilterArrayOutputWithContext(context.Background())
}

func (i GetCategoriesFilterArray) ToGetCategoriesFilterArrayOutputWithContext(ctx context.Context) GetCategoriesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCategoriesFilterArrayOutput)
}

func (i GetCategoriesFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCategoriesFilter] {
	return pulumix.Output[[]GetCategoriesFilter]{
		OutputState: i.ToGetCategoriesFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCategoriesFilterOutput struct{ *pulumi.OutputState }

func (GetCategoriesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCategoriesFilter)(nil)).Elem()
}

func (o GetCategoriesFilterOutput) ToGetCategoriesFilterOutput() GetCategoriesFilterOutput {
	return o
}

func (o GetCategoriesFilterOutput) ToGetCategoriesFilterOutputWithContext(ctx context.Context) GetCategoriesFilterOutput {
	return o
}

func (o GetCategoriesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetCategoriesFilter] {
	return pulumix.Output[GetCategoriesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the product category.
func (o GetCategoriesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCategoriesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCategoriesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCategoriesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetCategoriesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCategoriesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetCategoriesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetCategoriesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCategoriesFilter)(nil)).Elem()
}

func (o GetCategoriesFilterArrayOutput) ToGetCategoriesFilterArrayOutput() GetCategoriesFilterArrayOutput {
	return o
}

func (o GetCategoriesFilterArrayOutput) ToGetCategoriesFilterArrayOutputWithContext(ctx context.Context) GetCategoriesFilterArrayOutput {
	return o
}

func (o GetCategoriesFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCategoriesFilter] {
	return pulumix.Output[[]GetCategoriesFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetCategoriesFilterArrayOutput) Index(i pulumi.IntInput) GetCategoriesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCategoriesFilter {
		return vs[0].([]GetCategoriesFilter)[vs[1].(int)]
	}).(GetCategoriesFilterOutput)
}

type GetListingBanner struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingBannerInput is an input type that accepts GetListingBannerArgs and GetListingBannerOutput values.
// You can construct a concrete instance of `GetListingBannerInput` via:
//
//	GetListingBannerArgs{...}
type GetListingBannerInput interface {
	pulumi.Input

	ToGetListingBannerOutput() GetListingBannerOutput
	ToGetListingBannerOutputWithContext(context.Context) GetListingBannerOutput
}

type GetListingBannerArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingBannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingBanner)(nil)).Elem()
}

func (i GetListingBannerArgs) ToGetListingBannerOutput() GetListingBannerOutput {
	return i.ToGetListingBannerOutputWithContext(context.Background())
}

func (i GetListingBannerArgs) ToGetListingBannerOutputWithContext(ctx context.Context) GetListingBannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingBannerOutput)
}

func (i GetListingBannerArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingBanner] {
	return pulumix.Output[GetListingBanner]{
		OutputState: i.ToGetListingBannerOutputWithContext(ctx).OutputState,
	}
}

// GetListingBannerArrayInput is an input type that accepts GetListingBannerArray and GetListingBannerArrayOutput values.
// You can construct a concrete instance of `GetListingBannerArrayInput` via:
//
//	GetListingBannerArray{ GetListingBannerArgs{...} }
type GetListingBannerArrayInput interface {
	pulumi.Input

	ToGetListingBannerArrayOutput() GetListingBannerArrayOutput
	ToGetListingBannerArrayOutputWithContext(context.Context) GetListingBannerArrayOutput
}

type GetListingBannerArray []GetListingBannerInput

func (GetListingBannerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingBanner)(nil)).Elem()
}

func (i GetListingBannerArray) ToGetListingBannerArrayOutput() GetListingBannerArrayOutput {
	return i.ToGetListingBannerArrayOutputWithContext(context.Background())
}

func (i GetListingBannerArray) ToGetListingBannerArrayOutputWithContext(ctx context.Context) GetListingBannerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingBannerArrayOutput)
}

func (i GetListingBannerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingBanner] {
	return pulumix.Output[[]GetListingBanner]{
		OutputState: i.ToGetListingBannerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingBannerOutput struct{ *pulumi.OutputState }

func (GetListingBannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingBanner)(nil)).Elem()
}

func (o GetListingBannerOutput) ToGetListingBannerOutput() GetListingBannerOutput {
	return o
}

func (o GetListingBannerOutput) ToGetListingBannerOutputWithContext(ctx context.Context) GetListingBannerOutput {
	return o
}

func (o GetListingBannerOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingBanner] {
	return pulumix.Output[GetListingBanner]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingBannerOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingBanner) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingBannerOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingBanner) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingBannerOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingBanner) string { return v.MimeType }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingBannerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingBanner) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingBannerArrayOutput struct{ *pulumi.OutputState }

func (GetListingBannerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingBanner)(nil)).Elem()
}

func (o GetListingBannerArrayOutput) ToGetListingBannerArrayOutput() GetListingBannerArrayOutput {
	return o
}

func (o GetListingBannerArrayOutput) ToGetListingBannerArrayOutputWithContext(ctx context.Context) GetListingBannerArrayOutput {
	return o
}

func (o GetListingBannerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingBanner] {
	return pulumix.Output[[]GetListingBanner]{
		OutputState: o.OutputState,
	}
}

func (o GetListingBannerArrayOutput) Index(i pulumi.IntInput) GetListingBannerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingBanner {
		return vs[0].([]GetListingBanner)[vs[1].(int)]
	}).(GetListingBannerOutput)
}

type GetListingDocumentationLink struct {
	// The category that the document belongs to.
	DocumentCategory string `pulumi:"documentCategory"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
	// The URL of the resource.
	Url string `pulumi:"url"`
}

// GetListingDocumentationLinkInput is an input type that accepts GetListingDocumentationLinkArgs and GetListingDocumentationLinkOutput values.
// You can construct a concrete instance of `GetListingDocumentationLinkInput` via:
//
//	GetListingDocumentationLinkArgs{...}
type GetListingDocumentationLinkInput interface {
	pulumi.Input

	ToGetListingDocumentationLinkOutput() GetListingDocumentationLinkOutput
	ToGetListingDocumentationLinkOutputWithContext(context.Context) GetListingDocumentationLinkOutput
}

type GetListingDocumentationLinkArgs struct {
	// The category that the document belongs to.
	DocumentCategory pulumi.StringInput `pulumi:"documentCategory"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the resource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListingDocumentationLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingDocumentationLink)(nil)).Elem()
}

func (i GetListingDocumentationLinkArgs) ToGetListingDocumentationLinkOutput() GetListingDocumentationLinkOutput {
	return i.ToGetListingDocumentationLinkOutputWithContext(context.Background())
}

func (i GetListingDocumentationLinkArgs) ToGetListingDocumentationLinkOutputWithContext(ctx context.Context) GetListingDocumentationLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingDocumentationLinkOutput)
}

func (i GetListingDocumentationLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingDocumentationLink] {
	return pulumix.Output[GetListingDocumentationLink]{
		OutputState: i.ToGetListingDocumentationLinkOutputWithContext(ctx).OutputState,
	}
}

// GetListingDocumentationLinkArrayInput is an input type that accepts GetListingDocumentationLinkArray and GetListingDocumentationLinkArrayOutput values.
// You can construct a concrete instance of `GetListingDocumentationLinkArrayInput` via:
//
//	GetListingDocumentationLinkArray{ GetListingDocumentationLinkArgs{...} }
type GetListingDocumentationLinkArrayInput interface {
	pulumi.Input

	ToGetListingDocumentationLinkArrayOutput() GetListingDocumentationLinkArrayOutput
	ToGetListingDocumentationLinkArrayOutputWithContext(context.Context) GetListingDocumentationLinkArrayOutput
}

type GetListingDocumentationLinkArray []GetListingDocumentationLinkInput

func (GetListingDocumentationLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingDocumentationLink)(nil)).Elem()
}

func (i GetListingDocumentationLinkArray) ToGetListingDocumentationLinkArrayOutput() GetListingDocumentationLinkArrayOutput {
	return i.ToGetListingDocumentationLinkArrayOutputWithContext(context.Background())
}

func (i GetListingDocumentationLinkArray) ToGetListingDocumentationLinkArrayOutputWithContext(ctx context.Context) GetListingDocumentationLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingDocumentationLinkArrayOutput)
}

func (i GetListingDocumentationLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingDocumentationLink] {
	return pulumix.Output[[]GetListingDocumentationLink]{
		OutputState: i.ToGetListingDocumentationLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingDocumentationLinkOutput struct{ *pulumi.OutputState }

func (GetListingDocumentationLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingDocumentationLink)(nil)).Elem()
}

func (o GetListingDocumentationLinkOutput) ToGetListingDocumentationLinkOutput() GetListingDocumentationLinkOutput {
	return o
}

func (o GetListingDocumentationLinkOutput) ToGetListingDocumentationLinkOutputWithContext(ctx context.Context) GetListingDocumentationLinkOutput {
	return o
}

func (o GetListingDocumentationLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingDocumentationLink] {
	return pulumix.Output[GetListingDocumentationLink]{
		OutputState: o.OutputState,
	}
}

// The category that the document belongs to.
func (o GetListingDocumentationLinkOutput) DocumentCategory() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingDocumentationLink) string { return v.DocumentCategory }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingDocumentationLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingDocumentationLink) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the resource.
func (o GetListingDocumentationLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingDocumentationLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetListingDocumentationLinkArrayOutput struct{ *pulumi.OutputState }

func (GetListingDocumentationLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingDocumentationLink)(nil)).Elem()
}

func (o GetListingDocumentationLinkArrayOutput) ToGetListingDocumentationLinkArrayOutput() GetListingDocumentationLinkArrayOutput {
	return o
}

func (o GetListingDocumentationLinkArrayOutput) ToGetListingDocumentationLinkArrayOutputWithContext(ctx context.Context) GetListingDocumentationLinkArrayOutput {
	return o
}

func (o GetListingDocumentationLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingDocumentationLink] {
	return pulumix.Output[[]GetListingDocumentationLink]{
		OutputState: o.OutputState,
	}
}

func (o GetListingDocumentationLinkArrayOutput) Index(i pulumi.IntInput) GetListingDocumentationLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingDocumentationLink {
		return vs[0].([]GetListingDocumentationLink)[vs[1].(int)]
	}).(GetListingDocumentationLinkOutput)
}

type GetListingIcon struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingIconInput is an input type that accepts GetListingIconArgs and GetListingIconOutput values.
// You can construct a concrete instance of `GetListingIconInput` via:
//
//	GetListingIconArgs{...}
type GetListingIconInput interface {
	pulumi.Input

	ToGetListingIconOutput() GetListingIconOutput
	ToGetListingIconOutputWithContext(context.Context) GetListingIconOutput
}

type GetListingIconArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingIcon)(nil)).Elem()
}

func (i GetListingIconArgs) ToGetListingIconOutput() GetListingIconOutput {
	return i.ToGetListingIconOutputWithContext(context.Background())
}

func (i GetListingIconArgs) ToGetListingIconOutputWithContext(ctx context.Context) GetListingIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingIconOutput)
}

func (i GetListingIconArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingIcon] {
	return pulumix.Output[GetListingIcon]{
		OutputState: i.ToGetListingIconOutputWithContext(ctx).OutputState,
	}
}

// GetListingIconArrayInput is an input type that accepts GetListingIconArray and GetListingIconArrayOutput values.
// You can construct a concrete instance of `GetListingIconArrayInput` via:
//
//	GetListingIconArray{ GetListingIconArgs{...} }
type GetListingIconArrayInput interface {
	pulumi.Input

	ToGetListingIconArrayOutput() GetListingIconArrayOutput
	ToGetListingIconArrayOutputWithContext(context.Context) GetListingIconArrayOutput
}

type GetListingIconArray []GetListingIconInput

func (GetListingIconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingIcon)(nil)).Elem()
}

func (i GetListingIconArray) ToGetListingIconArrayOutput() GetListingIconArrayOutput {
	return i.ToGetListingIconArrayOutputWithContext(context.Background())
}

func (i GetListingIconArray) ToGetListingIconArrayOutputWithContext(ctx context.Context) GetListingIconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingIconArrayOutput)
}

func (i GetListingIconArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingIcon] {
	return pulumix.Output[[]GetListingIcon]{
		OutputState: i.ToGetListingIconArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingIconOutput struct{ *pulumi.OutputState }

func (GetListingIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingIcon)(nil)).Elem()
}

func (o GetListingIconOutput) ToGetListingIconOutput() GetListingIconOutput {
	return o
}

func (o GetListingIconOutput) ToGetListingIconOutputWithContext(ctx context.Context) GetListingIconOutput {
	return o
}

func (o GetListingIconOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingIcon] {
	return pulumix.Output[GetListingIcon]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingIconOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingIcon) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingIconOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingIcon) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingIconOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingIcon) string { return v.MimeType }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingIconOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingIcon) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingIconArrayOutput struct{ *pulumi.OutputState }

func (GetListingIconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingIcon)(nil)).Elem()
}

func (o GetListingIconArrayOutput) ToGetListingIconArrayOutput() GetListingIconArrayOutput {
	return o
}

func (o GetListingIconArrayOutput) ToGetListingIconArrayOutputWithContext(ctx context.Context) GetListingIconArrayOutput {
	return o
}

func (o GetListingIconArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingIcon] {
	return pulumix.Output[[]GetListingIcon]{
		OutputState: o.OutputState,
	}
}

func (o GetListingIconArrayOutput) Index(i pulumi.IntInput) GetListingIconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingIcon {
		return vs[0].([]GetListingIcon)[vs[1].(int)]
	}).(GetListingIconOutput)
}

type GetListingLanguage struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingLanguageInput is an input type that accepts GetListingLanguageArgs and GetListingLanguageOutput values.
// You can construct a concrete instance of `GetListingLanguageInput` via:
//
//	GetListingLanguageArgs{...}
type GetListingLanguageInput interface {
	pulumi.Input

	ToGetListingLanguageOutput() GetListingLanguageOutput
	ToGetListingLanguageOutputWithContext(context.Context) GetListingLanguageOutput
}

type GetListingLanguageArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingLanguageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingLanguage)(nil)).Elem()
}

func (i GetListingLanguageArgs) ToGetListingLanguageOutput() GetListingLanguageOutput {
	return i.ToGetListingLanguageOutputWithContext(context.Background())
}

func (i GetListingLanguageArgs) ToGetListingLanguageOutputWithContext(ctx context.Context) GetListingLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingLanguageOutput)
}

func (i GetListingLanguageArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingLanguage] {
	return pulumix.Output[GetListingLanguage]{
		OutputState: i.ToGetListingLanguageOutputWithContext(ctx).OutputState,
	}
}

// GetListingLanguageArrayInput is an input type that accepts GetListingLanguageArray and GetListingLanguageArrayOutput values.
// You can construct a concrete instance of `GetListingLanguageArrayInput` via:
//
//	GetListingLanguageArray{ GetListingLanguageArgs{...} }
type GetListingLanguageArrayInput interface {
	pulumi.Input

	ToGetListingLanguageArrayOutput() GetListingLanguageArrayOutput
	ToGetListingLanguageArrayOutputWithContext(context.Context) GetListingLanguageArrayOutput
}

type GetListingLanguageArray []GetListingLanguageInput

func (GetListingLanguageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingLanguage)(nil)).Elem()
}

func (i GetListingLanguageArray) ToGetListingLanguageArrayOutput() GetListingLanguageArrayOutput {
	return i.ToGetListingLanguageArrayOutputWithContext(context.Background())
}

func (i GetListingLanguageArray) ToGetListingLanguageArrayOutputWithContext(ctx context.Context) GetListingLanguageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingLanguageArrayOutput)
}

func (i GetListingLanguageArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingLanguage] {
	return pulumix.Output[[]GetListingLanguage]{
		OutputState: i.ToGetListingLanguageArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingLanguageOutput struct{ *pulumi.OutputState }

func (GetListingLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingLanguage)(nil)).Elem()
}

func (o GetListingLanguageOutput) ToGetListingLanguageOutput() GetListingLanguageOutput {
	return o
}

func (o GetListingLanguageOutput) ToGetListingLanguageOutputWithContext(ctx context.Context) GetListingLanguageOutput {
	return o
}

func (o GetListingLanguageOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingLanguage] {
	return pulumix.Output[GetListingLanguage]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingLanguageOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingLanguage) string { return v.Code }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingLanguageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingLanguage) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingLanguageArrayOutput struct{ *pulumi.OutputState }

func (GetListingLanguageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingLanguage)(nil)).Elem()
}

func (o GetListingLanguageArrayOutput) ToGetListingLanguageArrayOutput() GetListingLanguageArrayOutput {
	return o
}

func (o GetListingLanguageArrayOutput) ToGetListingLanguageArrayOutputWithContext(ctx context.Context) GetListingLanguageArrayOutput {
	return o
}

func (o GetListingLanguageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingLanguage] {
	return pulumix.Output[[]GetListingLanguage]{
		OutputState: o.OutputState,
	}
}

func (o GetListingLanguageArrayOutput) Index(i pulumi.IntInput) GetListingLanguageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingLanguage {
		return vs[0].([]GetListingLanguage)[vs[1].(int)]
	}).(GetListingLanguageOutput)
}

type GetListingLink struct {
	// The anchor tag.
	Href string `pulumi:"href"`
	// Reference links to the previous page, next page, and other pages.
	Rel string `pulumi:"rel"`
}

// GetListingLinkInput is an input type that accepts GetListingLinkArgs and GetListingLinkOutput values.
// You can construct a concrete instance of `GetListingLinkInput` via:
//
//	GetListingLinkArgs{...}
type GetListingLinkInput interface {
	pulumi.Input

	ToGetListingLinkOutput() GetListingLinkOutput
	ToGetListingLinkOutputWithContext(context.Context) GetListingLinkOutput
}

type GetListingLinkArgs struct {
	// The anchor tag.
	Href pulumi.StringInput `pulumi:"href"`
	// Reference links to the previous page, next page, and other pages.
	Rel pulumi.StringInput `pulumi:"rel"`
}

func (GetListingLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingLink)(nil)).Elem()
}

func (i GetListingLinkArgs) ToGetListingLinkOutput() GetListingLinkOutput {
	return i.ToGetListingLinkOutputWithContext(context.Background())
}

func (i GetListingLinkArgs) ToGetListingLinkOutputWithContext(ctx context.Context) GetListingLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingLinkOutput)
}

func (i GetListingLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingLink] {
	return pulumix.Output[GetListingLink]{
		OutputState: i.ToGetListingLinkOutputWithContext(ctx).OutputState,
	}
}

// GetListingLinkArrayInput is an input type that accepts GetListingLinkArray and GetListingLinkArrayOutput values.
// You can construct a concrete instance of `GetListingLinkArrayInput` via:
//
//	GetListingLinkArray{ GetListingLinkArgs{...} }
type GetListingLinkArrayInput interface {
	pulumi.Input

	ToGetListingLinkArrayOutput() GetListingLinkArrayOutput
	ToGetListingLinkArrayOutputWithContext(context.Context) GetListingLinkArrayOutput
}

type GetListingLinkArray []GetListingLinkInput

func (GetListingLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingLink)(nil)).Elem()
}

func (i GetListingLinkArray) ToGetListingLinkArrayOutput() GetListingLinkArrayOutput {
	return i.ToGetListingLinkArrayOutputWithContext(context.Background())
}

func (i GetListingLinkArray) ToGetListingLinkArrayOutputWithContext(ctx context.Context) GetListingLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingLinkArrayOutput)
}

func (i GetListingLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingLink] {
	return pulumix.Output[[]GetListingLink]{
		OutputState: i.ToGetListingLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingLinkOutput struct{ *pulumi.OutputState }

func (GetListingLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingLink)(nil)).Elem()
}

func (o GetListingLinkOutput) ToGetListingLinkOutput() GetListingLinkOutput {
	return o
}

func (o GetListingLinkOutput) ToGetListingLinkOutputWithContext(ctx context.Context) GetListingLinkOutput {
	return o
}

func (o GetListingLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingLink] {
	return pulumix.Output[GetListingLink]{
		OutputState: o.OutputState,
	}
}

// The anchor tag.
func (o GetListingLinkOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingLink) string { return v.Href }).(pulumi.StringOutput)
}

// Reference links to the previous page, next page, and other pages.
func (o GetListingLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetListingLinkArrayOutput struct{ *pulumi.OutputState }

func (GetListingLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingLink)(nil)).Elem()
}

func (o GetListingLinkArrayOutput) ToGetListingLinkArrayOutput() GetListingLinkArrayOutput {
	return o
}

func (o GetListingLinkArrayOutput) ToGetListingLinkArrayOutputWithContext(ctx context.Context) GetListingLinkArrayOutput {
	return o
}

func (o GetListingLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingLink] {
	return pulumix.Output[[]GetListingLink]{
		OutputState: o.OutputState,
	}
}

func (o GetListingLinkArrayOutput) Index(i pulumi.IntInput) GetListingLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingLink {
		return vs[0].([]GetListingLink)[vs[1].(int)]
	}).(GetListingLinkOutput)
}

type GetListingPackageAgreementsAgreement struct {
	// Who authored the agreement.
	Author string `pulumi:"author"`
	// The content URL of the agreement.
	ContentUrl string `pulumi:"contentUrl"`
	// The unique identifier for the agreement.
	Id string `pulumi:"id"`
	// Textual prompt to read and accept the agreement.
	Prompt string `pulumi:"prompt"`
}

// GetListingPackageAgreementsAgreementInput is an input type that accepts GetListingPackageAgreementsAgreementArgs and GetListingPackageAgreementsAgreementOutput values.
// You can construct a concrete instance of `GetListingPackageAgreementsAgreementInput` via:
//
//	GetListingPackageAgreementsAgreementArgs{...}
type GetListingPackageAgreementsAgreementInput interface {
	pulumi.Input

	ToGetListingPackageAgreementsAgreementOutput() GetListingPackageAgreementsAgreementOutput
	ToGetListingPackageAgreementsAgreementOutputWithContext(context.Context) GetListingPackageAgreementsAgreementOutput
}

type GetListingPackageAgreementsAgreementArgs struct {
	// Who authored the agreement.
	Author pulumi.StringInput `pulumi:"author"`
	// The content URL of the agreement.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The unique identifier for the agreement.
	Id pulumi.StringInput `pulumi:"id"`
	// Textual prompt to read and accept the agreement.
	Prompt pulumi.StringInput `pulumi:"prompt"`
}

func (GetListingPackageAgreementsAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageAgreementsAgreement)(nil)).Elem()
}

func (i GetListingPackageAgreementsAgreementArgs) ToGetListingPackageAgreementsAgreementOutput() GetListingPackageAgreementsAgreementOutput {
	return i.ToGetListingPackageAgreementsAgreementOutputWithContext(context.Background())
}

func (i GetListingPackageAgreementsAgreementArgs) ToGetListingPackageAgreementsAgreementOutputWithContext(ctx context.Context) GetListingPackageAgreementsAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageAgreementsAgreementOutput)
}

func (i GetListingPackageAgreementsAgreementArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageAgreementsAgreement] {
	return pulumix.Output[GetListingPackageAgreementsAgreement]{
		OutputState: i.ToGetListingPackageAgreementsAgreementOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageAgreementsAgreementArrayInput is an input type that accepts GetListingPackageAgreementsAgreementArray and GetListingPackageAgreementsAgreementArrayOutput values.
// You can construct a concrete instance of `GetListingPackageAgreementsAgreementArrayInput` via:
//
//	GetListingPackageAgreementsAgreementArray{ GetListingPackageAgreementsAgreementArgs{...} }
type GetListingPackageAgreementsAgreementArrayInput interface {
	pulumi.Input

	ToGetListingPackageAgreementsAgreementArrayOutput() GetListingPackageAgreementsAgreementArrayOutput
	ToGetListingPackageAgreementsAgreementArrayOutputWithContext(context.Context) GetListingPackageAgreementsAgreementArrayOutput
}

type GetListingPackageAgreementsAgreementArray []GetListingPackageAgreementsAgreementInput

func (GetListingPackageAgreementsAgreementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageAgreementsAgreement)(nil)).Elem()
}

func (i GetListingPackageAgreementsAgreementArray) ToGetListingPackageAgreementsAgreementArrayOutput() GetListingPackageAgreementsAgreementArrayOutput {
	return i.ToGetListingPackageAgreementsAgreementArrayOutputWithContext(context.Background())
}

func (i GetListingPackageAgreementsAgreementArray) ToGetListingPackageAgreementsAgreementArrayOutputWithContext(ctx context.Context) GetListingPackageAgreementsAgreementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageAgreementsAgreementArrayOutput)
}

func (i GetListingPackageAgreementsAgreementArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageAgreementsAgreement] {
	return pulumix.Output[[]GetListingPackageAgreementsAgreement]{
		OutputState: i.ToGetListingPackageAgreementsAgreementArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageAgreementsAgreementOutput struct{ *pulumi.OutputState }

func (GetListingPackageAgreementsAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageAgreementsAgreement)(nil)).Elem()
}

func (o GetListingPackageAgreementsAgreementOutput) ToGetListingPackageAgreementsAgreementOutput() GetListingPackageAgreementsAgreementOutput {
	return o
}

func (o GetListingPackageAgreementsAgreementOutput) ToGetListingPackageAgreementsAgreementOutputWithContext(ctx context.Context) GetListingPackageAgreementsAgreementOutput {
	return o
}

func (o GetListingPackageAgreementsAgreementOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageAgreementsAgreement] {
	return pulumix.Output[GetListingPackageAgreementsAgreement]{
		OutputState: o.OutputState,
	}
}

// Who authored the agreement.
func (o GetListingPackageAgreementsAgreementOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsAgreement) string { return v.Author }).(pulumi.StringOutput)
}

// The content URL of the agreement.
func (o GetListingPackageAgreementsAgreementOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsAgreement) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The unique identifier for the agreement.
func (o GetListingPackageAgreementsAgreementOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsAgreement) string { return v.Id }).(pulumi.StringOutput)
}

// Textual prompt to read and accept the agreement.
func (o GetListingPackageAgreementsAgreementOutput) Prompt() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsAgreement) string { return v.Prompt }).(pulumi.StringOutput)
}

type GetListingPackageAgreementsAgreementArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageAgreementsAgreementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageAgreementsAgreement)(nil)).Elem()
}

func (o GetListingPackageAgreementsAgreementArrayOutput) ToGetListingPackageAgreementsAgreementArrayOutput() GetListingPackageAgreementsAgreementArrayOutput {
	return o
}

func (o GetListingPackageAgreementsAgreementArrayOutput) ToGetListingPackageAgreementsAgreementArrayOutputWithContext(ctx context.Context) GetListingPackageAgreementsAgreementArrayOutput {
	return o
}

func (o GetListingPackageAgreementsAgreementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageAgreementsAgreement] {
	return pulumix.Output[[]GetListingPackageAgreementsAgreement]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageAgreementsAgreementArrayOutput) Index(i pulumi.IntInput) GetListingPackageAgreementsAgreementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageAgreementsAgreement {
		return vs[0].([]GetListingPackageAgreementsAgreement)[vs[1].(int)]
	}).(GetListingPackageAgreementsAgreementOutput)
}

type GetListingPackageAgreementsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetListingPackageAgreementsFilterInput is an input type that accepts GetListingPackageAgreementsFilterArgs and GetListingPackageAgreementsFilterOutput values.
// You can construct a concrete instance of `GetListingPackageAgreementsFilterInput` via:
//
//	GetListingPackageAgreementsFilterArgs{...}
type GetListingPackageAgreementsFilterInput interface {
	pulumi.Input

	ToGetListingPackageAgreementsFilterOutput() GetListingPackageAgreementsFilterOutput
	ToGetListingPackageAgreementsFilterOutputWithContext(context.Context) GetListingPackageAgreementsFilterOutput
}

type GetListingPackageAgreementsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetListingPackageAgreementsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageAgreementsFilter)(nil)).Elem()
}

func (i GetListingPackageAgreementsFilterArgs) ToGetListingPackageAgreementsFilterOutput() GetListingPackageAgreementsFilterOutput {
	return i.ToGetListingPackageAgreementsFilterOutputWithContext(context.Background())
}

func (i GetListingPackageAgreementsFilterArgs) ToGetListingPackageAgreementsFilterOutputWithContext(ctx context.Context) GetListingPackageAgreementsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageAgreementsFilterOutput)
}

func (i GetListingPackageAgreementsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageAgreementsFilter] {
	return pulumix.Output[GetListingPackageAgreementsFilter]{
		OutputState: i.ToGetListingPackageAgreementsFilterOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageAgreementsFilterArrayInput is an input type that accepts GetListingPackageAgreementsFilterArray and GetListingPackageAgreementsFilterArrayOutput values.
// You can construct a concrete instance of `GetListingPackageAgreementsFilterArrayInput` via:
//
//	GetListingPackageAgreementsFilterArray{ GetListingPackageAgreementsFilterArgs{...} }
type GetListingPackageAgreementsFilterArrayInput interface {
	pulumi.Input

	ToGetListingPackageAgreementsFilterArrayOutput() GetListingPackageAgreementsFilterArrayOutput
	ToGetListingPackageAgreementsFilterArrayOutputWithContext(context.Context) GetListingPackageAgreementsFilterArrayOutput
}

type GetListingPackageAgreementsFilterArray []GetListingPackageAgreementsFilterInput

func (GetListingPackageAgreementsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageAgreementsFilter)(nil)).Elem()
}

func (i GetListingPackageAgreementsFilterArray) ToGetListingPackageAgreementsFilterArrayOutput() GetListingPackageAgreementsFilterArrayOutput {
	return i.ToGetListingPackageAgreementsFilterArrayOutputWithContext(context.Background())
}

func (i GetListingPackageAgreementsFilterArray) ToGetListingPackageAgreementsFilterArrayOutputWithContext(ctx context.Context) GetListingPackageAgreementsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageAgreementsFilterArrayOutput)
}

func (i GetListingPackageAgreementsFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageAgreementsFilter] {
	return pulumix.Output[[]GetListingPackageAgreementsFilter]{
		OutputState: i.ToGetListingPackageAgreementsFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageAgreementsFilterOutput struct{ *pulumi.OutputState }

func (GetListingPackageAgreementsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageAgreementsFilter)(nil)).Elem()
}

func (o GetListingPackageAgreementsFilterOutput) ToGetListingPackageAgreementsFilterOutput() GetListingPackageAgreementsFilterOutput {
	return o
}

func (o GetListingPackageAgreementsFilterOutput) ToGetListingPackageAgreementsFilterOutputWithContext(ctx context.Context) GetListingPackageAgreementsFilterOutput {
	return o
}

func (o GetListingPackageAgreementsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageAgreementsFilter] {
	return pulumix.Output[GetListingPackageAgreementsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageAgreementsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetListingPackageAgreementsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetListingPackageAgreementsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingPackageAgreementsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetListingPackageAgreementsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageAgreementsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageAgreementsFilter)(nil)).Elem()
}

func (o GetListingPackageAgreementsFilterArrayOutput) ToGetListingPackageAgreementsFilterArrayOutput() GetListingPackageAgreementsFilterArrayOutput {
	return o
}

func (o GetListingPackageAgreementsFilterArrayOutput) ToGetListingPackageAgreementsFilterArrayOutputWithContext(ctx context.Context) GetListingPackageAgreementsFilterArrayOutput {
	return o
}

func (o GetListingPackageAgreementsFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageAgreementsFilter] {
	return pulumix.Output[[]GetListingPackageAgreementsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageAgreementsFilterArrayOutput) Index(i pulumi.IntInput) GetListingPackageAgreementsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageAgreementsFilter {
		return vs[0].([]GetListingPackageAgreementsFilter)[vs[1].(int)]
	}).(GetListingPackageAgreementsFilterOutput)
}

type GetListingPackageOperatingSystem struct {
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackageOperatingSystemInput is an input type that accepts GetListingPackageOperatingSystemArgs and GetListingPackageOperatingSystemOutput values.
// You can construct a concrete instance of `GetListingPackageOperatingSystemInput` via:
//
//	GetListingPackageOperatingSystemArgs{...}
type GetListingPackageOperatingSystemInput interface {
	pulumi.Input

	ToGetListingPackageOperatingSystemOutput() GetListingPackageOperatingSystemOutput
	ToGetListingPackageOperatingSystemOutputWithContext(context.Context) GetListingPackageOperatingSystemOutput
}

type GetListingPackageOperatingSystemArgs struct {
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackageOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageOperatingSystem)(nil)).Elem()
}

func (i GetListingPackageOperatingSystemArgs) ToGetListingPackageOperatingSystemOutput() GetListingPackageOperatingSystemOutput {
	return i.ToGetListingPackageOperatingSystemOutputWithContext(context.Background())
}

func (i GetListingPackageOperatingSystemArgs) ToGetListingPackageOperatingSystemOutputWithContext(ctx context.Context) GetListingPackageOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageOperatingSystemOutput)
}

func (i GetListingPackageOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageOperatingSystem] {
	return pulumix.Output[GetListingPackageOperatingSystem]{
		OutputState: i.ToGetListingPackageOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageOperatingSystemArrayInput is an input type that accepts GetListingPackageOperatingSystemArray and GetListingPackageOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetListingPackageOperatingSystemArrayInput` via:
//
//	GetListingPackageOperatingSystemArray{ GetListingPackageOperatingSystemArgs{...} }
type GetListingPackageOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetListingPackageOperatingSystemArrayOutput() GetListingPackageOperatingSystemArrayOutput
	ToGetListingPackageOperatingSystemArrayOutputWithContext(context.Context) GetListingPackageOperatingSystemArrayOutput
}

type GetListingPackageOperatingSystemArray []GetListingPackageOperatingSystemInput

func (GetListingPackageOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageOperatingSystem)(nil)).Elem()
}

func (i GetListingPackageOperatingSystemArray) ToGetListingPackageOperatingSystemArrayOutput() GetListingPackageOperatingSystemArrayOutput {
	return i.ToGetListingPackageOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetListingPackageOperatingSystemArray) ToGetListingPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingPackageOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageOperatingSystemArrayOutput)
}

func (i GetListingPackageOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageOperatingSystem] {
	return pulumix.Output[[]GetListingPackageOperatingSystem]{
		OutputState: i.ToGetListingPackageOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetListingPackageOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageOperatingSystem)(nil)).Elem()
}

func (o GetListingPackageOperatingSystemOutput) ToGetListingPackageOperatingSystemOutput() GetListingPackageOperatingSystemOutput {
	return o
}

func (o GetListingPackageOperatingSystemOutput) ToGetListingPackageOperatingSystemOutputWithContext(ctx context.Context) GetListingPackageOperatingSystemOutput {
	return o
}

func (o GetListingPackageOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageOperatingSystem] {
	return pulumix.Output[GetListingPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the variable.
func (o GetListingPackageOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackageOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageOperatingSystem)(nil)).Elem()
}

func (o GetListingPackageOperatingSystemArrayOutput) ToGetListingPackageOperatingSystemArrayOutput() GetListingPackageOperatingSystemArrayOutput {
	return o
}

func (o GetListingPackageOperatingSystemArrayOutput) ToGetListingPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingPackageOperatingSystemArrayOutput {
	return o
}

func (o GetListingPackageOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageOperatingSystem] {
	return pulumix.Output[[]GetListingPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetListingPackageOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageOperatingSystem {
		return vs[0].([]GetListingPackageOperatingSystem)[vs[1].(int)]
	}).(GetListingPackageOperatingSystemOutput)
}

type GetListingPackagePricing struct {
	// The currency of the pricing model.
	Currency string `pulumi:"currency"`
	// The model for international market pricing.
	InternationalMarketPrices []GetListingPackagePricingInternationalMarketPrice `pulumi:"internationalMarketPrices"`
	// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
	PayGoStrategy string `pulumi:"payGoStrategy"`
	// The pricing rate.
	Rate float64 `pulumi:"rate"`
	// The type of the pricing model.
	Type string `pulumi:"type"`
}

// GetListingPackagePricingInput is an input type that accepts GetListingPackagePricingArgs and GetListingPackagePricingOutput values.
// You can construct a concrete instance of `GetListingPackagePricingInput` via:
//
//	GetListingPackagePricingArgs{...}
type GetListingPackagePricingInput interface {
	pulumi.Input

	ToGetListingPackagePricingOutput() GetListingPackagePricingOutput
	ToGetListingPackagePricingOutputWithContext(context.Context) GetListingPackagePricingOutput
}

type GetListingPackagePricingArgs struct {
	// The currency of the pricing model.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The model for international market pricing.
	InternationalMarketPrices GetListingPackagePricingInternationalMarketPriceArrayInput `pulumi:"internationalMarketPrices"`
	// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
	PayGoStrategy pulumi.StringInput `pulumi:"payGoStrategy"`
	// The pricing rate.
	Rate pulumi.Float64Input `pulumi:"rate"`
	// The type of the pricing model.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetListingPackagePricingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagePricing)(nil)).Elem()
}

func (i GetListingPackagePricingArgs) ToGetListingPackagePricingOutput() GetListingPackagePricingOutput {
	return i.ToGetListingPackagePricingOutputWithContext(context.Background())
}

func (i GetListingPackagePricingArgs) ToGetListingPackagePricingOutputWithContext(ctx context.Context) GetListingPackagePricingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagePricingOutput)
}

func (i GetListingPackagePricingArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagePricing] {
	return pulumix.Output[GetListingPackagePricing]{
		OutputState: i.ToGetListingPackagePricingOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagePricingArrayInput is an input type that accepts GetListingPackagePricingArray and GetListingPackagePricingArrayOutput values.
// You can construct a concrete instance of `GetListingPackagePricingArrayInput` via:
//
//	GetListingPackagePricingArray{ GetListingPackagePricingArgs{...} }
type GetListingPackagePricingArrayInput interface {
	pulumi.Input

	ToGetListingPackagePricingArrayOutput() GetListingPackagePricingArrayOutput
	ToGetListingPackagePricingArrayOutputWithContext(context.Context) GetListingPackagePricingArrayOutput
}

type GetListingPackagePricingArray []GetListingPackagePricingInput

func (GetListingPackagePricingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagePricing)(nil)).Elem()
}

func (i GetListingPackagePricingArray) ToGetListingPackagePricingArrayOutput() GetListingPackagePricingArrayOutput {
	return i.ToGetListingPackagePricingArrayOutputWithContext(context.Background())
}

func (i GetListingPackagePricingArray) ToGetListingPackagePricingArrayOutputWithContext(ctx context.Context) GetListingPackagePricingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagePricingArrayOutput)
}

func (i GetListingPackagePricingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagePricing] {
	return pulumix.Output[[]GetListingPackagePricing]{
		OutputState: i.ToGetListingPackagePricingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagePricingOutput struct{ *pulumi.OutputState }

func (GetListingPackagePricingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagePricing)(nil)).Elem()
}

func (o GetListingPackagePricingOutput) ToGetListingPackagePricingOutput() GetListingPackagePricingOutput {
	return o
}

func (o GetListingPackagePricingOutput) ToGetListingPackagePricingOutputWithContext(ctx context.Context) GetListingPackagePricingOutput {
	return o
}

func (o GetListingPackagePricingOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagePricing] {
	return pulumix.Output[GetListingPackagePricing]{
		OutputState: o.OutputState,
	}
}

// The currency of the pricing model.
func (o GetListingPackagePricingOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagePricing) string { return v.Currency }).(pulumi.StringOutput)
}

// The model for international market pricing.
func (o GetListingPackagePricingOutput) InternationalMarketPrices() GetListingPackagePricingInternationalMarketPriceArrayOutput {
	return o.ApplyT(func(v GetListingPackagePricing) []GetListingPackagePricingInternationalMarketPrice {
		return v.InternationalMarketPrices
	}).(GetListingPackagePricingInternationalMarketPriceArrayOutput)
}

// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
func (o GetListingPackagePricingOutput) PayGoStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagePricing) string { return v.PayGoStrategy }).(pulumi.StringOutput)
}

// The pricing rate.
func (o GetListingPackagePricingOutput) Rate() pulumi.Float64Output {
	return o.ApplyT(func(v GetListingPackagePricing) float64 { return v.Rate }).(pulumi.Float64Output)
}

// The type of the pricing model.
func (o GetListingPackagePricingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagePricing) string { return v.Type }).(pulumi.StringOutput)
}

type GetListingPackagePricingArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagePricingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagePricing)(nil)).Elem()
}

func (o GetListingPackagePricingArrayOutput) ToGetListingPackagePricingArrayOutput() GetListingPackagePricingArrayOutput {
	return o
}

func (o GetListingPackagePricingArrayOutput) ToGetListingPackagePricingArrayOutputWithContext(ctx context.Context) GetListingPackagePricingArrayOutput {
	return o
}

func (o GetListingPackagePricingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagePricing] {
	return pulumix.Output[[]GetListingPackagePricing]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagePricingArrayOutput) Index(i pulumi.IntInput) GetListingPackagePricingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagePricing {
		return vs[0].([]GetListingPackagePricing)[vs[1].(int)]
	}).(GetListingPackagePricingOutput)
}

type GetListingPackagePricingInternationalMarketPrice struct {
	// The currency of the pricing model.
	CurrencyCode string `pulumi:"currencyCode"`
	// The symbol of the currency
	CurrencySymbol string `pulumi:"currencySymbol"`
	// The pricing rate.
	Rate float64 `pulumi:"rate"`
}

// GetListingPackagePricingInternationalMarketPriceInput is an input type that accepts GetListingPackagePricingInternationalMarketPriceArgs and GetListingPackagePricingInternationalMarketPriceOutput values.
// You can construct a concrete instance of `GetListingPackagePricingInternationalMarketPriceInput` via:
//
//	GetListingPackagePricingInternationalMarketPriceArgs{...}
type GetListingPackagePricingInternationalMarketPriceInput interface {
	pulumi.Input

	ToGetListingPackagePricingInternationalMarketPriceOutput() GetListingPackagePricingInternationalMarketPriceOutput
	ToGetListingPackagePricingInternationalMarketPriceOutputWithContext(context.Context) GetListingPackagePricingInternationalMarketPriceOutput
}

type GetListingPackagePricingInternationalMarketPriceArgs struct {
	// The currency of the pricing model.
	CurrencyCode pulumi.StringInput `pulumi:"currencyCode"`
	// The symbol of the currency
	CurrencySymbol pulumi.StringInput `pulumi:"currencySymbol"`
	// The pricing rate.
	Rate pulumi.Float64Input `pulumi:"rate"`
}

func (GetListingPackagePricingInternationalMarketPriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (i GetListingPackagePricingInternationalMarketPriceArgs) ToGetListingPackagePricingInternationalMarketPriceOutput() GetListingPackagePricingInternationalMarketPriceOutput {
	return i.ToGetListingPackagePricingInternationalMarketPriceOutputWithContext(context.Background())
}

func (i GetListingPackagePricingInternationalMarketPriceArgs) ToGetListingPackagePricingInternationalMarketPriceOutputWithContext(ctx context.Context) GetListingPackagePricingInternationalMarketPriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagePricingInternationalMarketPriceOutput)
}

func (i GetListingPackagePricingInternationalMarketPriceArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[GetListingPackagePricingInternationalMarketPrice]{
		OutputState: i.ToGetListingPackagePricingInternationalMarketPriceOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagePricingInternationalMarketPriceArrayInput is an input type that accepts GetListingPackagePricingInternationalMarketPriceArray and GetListingPackagePricingInternationalMarketPriceArrayOutput values.
// You can construct a concrete instance of `GetListingPackagePricingInternationalMarketPriceArrayInput` via:
//
//	GetListingPackagePricingInternationalMarketPriceArray{ GetListingPackagePricingInternationalMarketPriceArgs{...} }
type GetListingPackagePricingInternationalMarketPriceArrayInput interface {
	pulumi.Input

	ToGetListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagePricingInternationalMarketPriceArrayOutput
	ToGetListingPackagePricingInternationalMarketPriceArrayOutputWithContext(context.Context) GetListingPackagePricingInternationalMarketPriceArrayOutput
}

type GetListingPackagePricingInternationalMarketPriceArray []GetListingPackagePricingInternationalMarketPriceInput

func (GetListingPackagePricingInternationalMarketPriceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (i GetListingPackagePricingInternationalMarketPriceArray) ToGetListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagePricingInternationalMarketPriceArrayOutput {
	return i.ToGetListingPackagePricingInternationalMarketPriceArrayOutputWithContext(context.Background())
}

func (i GetListingPackagePricingInternationalMarketPriceArray) ToGetListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx context.Context) GetListingPackagePricingInternationalMarketPriceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagePricingInternationalMarketPriceArrayOutput)
}

func (i GetListingPackagePricingInternationalMarketPriceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[[]GetListingPackagePricingInternationalMarketPrice]{
		OutputState: i.ToGetListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagePricingInternationalMarketPriceOutput struct{ *pulumi.OutputState }

func (GetListingPackagePricingInternationalMarketPriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (o GetListingPackagePricingInternationalMarketPriceOutput) ToGetListingPackagePricingInternationalMarketPriceOutput() GetListingPackagePricingInternationalMarketPriceOutput {
	return o
}

func (o GetListingPackagePricingInternationalMarketPriceOutput) ToGetListingPackagePricingInternationalMarketPriceOutputWithContext(ctx context.Context) GetListingPackagePricingInternationalMarketPriceOutput {
	return o
}

func (o GetListingPackagePricingInternationalMarketPriceOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[GetListingPackagePricingInternationalMarketPrice]{
		OutputState: o.OutputState,
	}
}

// The currency of the pricing model.
func (o GetListingPackagePricingInternationalMarketPriceOutput) CurrencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagePricingInternationalMarketPrice) string { return v.CurrencyCode }).(pulumi.StringOutput)
}

// The symbol of the currency
func (o GetListingPackagePricingInternationalMarketPriceOutput) CurrencySymbol() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagePricingInternationalMarketPrice) string { return v.CurrencySymbol }).(pulumi.StringOutput)
}

// The pricing rate.
func (o GetListingPackagePricingInternationalMarketPriceOutput) Rate() pulumi.Float64Output {
	return o.ApplyT(func(v GetListingPackagePricingInternationalMarketPrice) float64 { return v.Rate }).(pulumi.Float64Output)
}

type GetListingPackagePricingInternationalMarketPriceArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagePricingInternationalMarketPriceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (o GetListingPackagePricingInternationalMarketPriceArrayOutput) ToGetListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagePricingInternationalMarketPriceArrayOutput {
	return o
}

func (o GetListingPackagePricingInternationalMarketPriceArrayOutput) ToGetListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx context.Context) GetListingPackagePricingInternationalMarketPriceArrayOutput {
	return o
}

func (o GetListingPackagePricingInternationalMarketPriceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[[]GetListingPackagePricingInternationalMarketPrice]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagePricingInternationalMarketPriceArrayOutput) Index(i pulumi.IntInput) GetListingPackagePricingInternationalMarketPriceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagePricingInternationalMarketPrice {
		return vs[0].([]GetListingPackagePricingInternationalMarketPrice)[vs[1].(int)]
	}).(GetListingPackagePricingInternationalMarketPriceOutput)
}

type GetListingPackageRegion struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Countries in the region.
	Countries []GetListingPackageRegionCountry `pulumi:"countries"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackageRegionInput is an input type that accepts GetListingPackageRegionArgs and GetListingPackageRegionOutput values.
// You can construct a concrete instance of `GetListingPackageRegionInput` via:
//
//	GetListingPackageRegionArgs{...}
type GetListingPackageRegionInput interface {
	pulumi.Input

	ToGetListingPackageRegionOutput() GetListingPackageRegionOutput
	ToGetListingPackageRegionOutputWithContext(context.Context) GetListingPackageRegionOutput
}

type GetListingPackageRegionArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Countries in the region.
	Countries GetListingPackageRegionCountryArrayInput `pulumi:"countries"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackageRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageRegion)(nil)).Elem()
}

func (i GetListingPackageRegionArgs) ToGetListingPackageRegionOutput() GetListingPackageRegionOutput {
	return i.ToGetListingPackageRegionOutputWithContext(context.Background())
}

func (i GetListingPackageRegionArgs) ToGetListingPackageRegionOutputWithContext(ctx context.Context) GetListingPackageRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageRegionOutput)
}

func (i GetListingPackageRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageRegion] {
	return pulumix.Output[GetListingPackageRegion]{
		OutputState: i.ToGetListingPackageRegionOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageRegionArrayInput is an input type that accepts GetListingPackageRegionArray and GetListingPackageRegionArrayOutput values.
// You can construct a concrete instance of `GetListingPackageRegionArrayInput` via:
//
//	GetListingPackageRegionArray{ GetListingPackageRegionArgs{...} }
type GetListingPackageRegionArrayInput interface {
	pulumi.Input

	ToGetListingPackageRegionArrayOutput() GetListingPackageRegionArrayOutput
	ToGetListingPackageRegionArrayOutputWithContext(context.Context) GetListingPackageRegionArrayOutput
}

type GetListingPackageRegionArray []GetListingPackageRegionInput

func (GetListingPackageRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageRegion)(nil)).Elem()
}

func (i GetListingPackageRegionArray) ToGetListingPackageRegionArrayOutput() GetListingPackageRegionArrayOutput {
	return i.ToGetListingPackageRegionArrayOutputWithContext(context.Background())
}

func (i GetListingPackageRegionArray) ToGetListingPackageRegionArrayOutputWithContext(ctx context.Context) GetListingPackageRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageRegionArrayOutput)
}

func (i GetListingPackageRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageRegion] {
	return pulumix.Output[[]GetListingPackageRegion]{
		OutputState: i.ToGetListingPackageRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageRegionOutput struct{ *pulumi.OutputState }

func (GetListingPackageRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageRegion)(nil)).Elem()
}

func (o GetListingPackageRegionOutput) ToGetListingPackageRegionOutput() GetListingPackageRegionOutput {
	return o
}

func (o GetListingPackageRegionOutput) ToGetListingPackageRegionOutputWithContext(ctx context.Context) GetListingPackageRegionOutput {
	return o
}

func (o GetListingPackageRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageRegion] {
	return pulumix.Output[GetListingPackageRegion]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingPackageRegionOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageRegion) string { return v.Code }).(pulumi.StringOutput)
}

// Countries in the region.
func (o GetListingPackageRegionOutput) Countries() GetListingPackageRegionCountryArrayOutput {
	return o.ApplyT(func(v GetListingPackageRegion) []GetListingPackageRegionCountry { return v.Countries }).(GetListingPackageRegionCountryArrayOutput)
}

// The name of the variable.
func (o GetListingPackageRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackageRegionArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageRegion)(nil)).Elem()
}

func (o GetListingPackageRegionArrayOutput) ToGetListingPackageRegionArrayOutput() GetListingPackageRegionArrayOutput {
	return o
}

func (o GetListingPackageRegionArrayOutput) ToGetListingPackageRegionArrayOutputWithContext(ctx context.Context) GetListingPackageRegionArrayOutput {
	return o
}

func (o GetListingPackageRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageRegion] {
	return pulumix.Output[[]GetListingPackageRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageRegionArrayOutput) Index(i pulumi.IntInput) GetListingPackageRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageRegion {
		return vs[0].([]GetListingPackageRegion)[vs[1].(int)]
	}).(GetListingPackageRegionOutput)
}

type GetListingPackageRegionCountry struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackageRegionCountryInput is an input type that accepts GetListingPackageRegionCountryArgs and GetListingPackageRegionCountryOutput values.
// You can construct a concrete instance of `GetListingPackageRegionCountryInput` via:
//
//	GetListingPackageRegionCountryArgs{...}
type GetListingPackageRegionCountryInput interface {
	pulumi.Input

	ToGetListingPackageRegionCountryOutput() GetListingPackageRegionCountryOutput
	ToGetListingPackageRegionCountryOutputWithContext(context.Context) GetListingPackageRegionCountryOutput
}

type GetListingPackageRegionCountryArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackageRegionCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageRegionCountry)(nil)).Elem()
}

func (i GetListingPackageRegionCountryArgs) ToGetListingPackageRegionCountryOutput() GetListingPackageRegionCountryOutput {
	return i.ToGetListingPackageRegionCountryOutputWithContext(context.Background())
}

func (i GetListingPackageRegionCountryArgs) ToGetListingPackageRegionCountryOutputWithContext(ctx context.Context) GetListingPackageRegionCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageRegionCountryOutput)
}

func (i GetListingPackageRegionCountryArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageRegionCountry] {
	return pulumix.Output[GetListingPackageRegionCountry]{
		OutputState: i.ToGetListingPackageRegionCountryOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageRegionCountryArrayInput is an input type that accepts GetListingPackageRegionCountryArray and GetListingPackageRegionCountryArrayOutput values.
// You can construct a concrete instance of `GetListingPackageRegionCountryArrayInput` via:
//
//	GetListingPackageRegionCountryArray{ GetListingPackageRegionCountryArgs{...} }
type GetListingPackageRegionCountryArrayInput interface {
	pulumi.Input

	ToGetListingPackageRegionCountryArrayOutput() GetListingPackageRegionCountryArrayOutput
	ToGetListingPackageRegionCountryArrayOutputWithContext(context.Context) GetListingPackageRegionCountryArrayOutput
}

type GetListingPackageRegionCountryArray []GetListingPackageRegionCountryInput

func (GetListingPackageRegionCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageRegionCountry)(nil)).Elem()
}

func (i GetListingPackageRegionCountryArray) ToGetListingPackageRegionCountryArrayOutput() GetListingPackageRegionCountryArrayOutput {
	return i.ToGetListingPackageRegionCountryArrayOutputWithContext(context.Background())
}

func (i GetListingPackageRegionCountryArray) ToGetListingPackageRegionCountryArrayOutputWithContext(ctx context.Context) GetListingPackageRegionCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageRegionCountryArrayOutput)
}

func (i GetListingPackageRegionCountryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageRegionCountry] {
	return pulumix.Output[[]GetListingPackageRegionCountry]{
		OutputState: i.ToGetListingPackageRegionCountryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageRegionCountryOutput struct{ *pulumi.OutputState }

func (GetListingPackageRegionCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageRegionCountry)(nil)).Elem()
}

func (o GetListingPackageRegionCountryOutput) ToGetListingPackageRegionCountryOutput() GetListingPackageRegionCountryOutput {
	return o
}

func (o GetListingPackageRegionCountryOutput) ToGetListingPackageRegionCountryOutputWithContext(ctx context.Context) GetListingPackageRegionCountryOutput {
	return o
}

func (o GetListingPackageRegionCountryOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageRegionCountry] {
	return pulumix.Output[GetListingPackageRegionCountry]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingPackageRegionCountryOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageRegionCountry) string { return v.Code }).(pulumi.StringOutput)
}

// The name of the variable.
func (o GetListingPackageRegionCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageRegionCountry) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackageRegionCountryArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageRegionCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageRegionCountry)(nil)).Elem()
}

func (o GetListingPackageRegionCountryArrayOutput) ToGetListingPackageRegionCountryArrayOutput() GetListingPackageRegionCountryArrayOutput {
	return o
}

func (o GetListingPackageRegionCountryArrayOutput) ToGetListingPackageRegionCountryArrayOutputWithContext(ctx context.Context) GetListingPackageRegionCountryArrayOutput {
	return o
}

func (o GetListingPackageRegionCountryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageRegionCountry] {
	return pulumix.Output[[]GetListingPackageRegionCountry]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageRegionCountryArrayOutput) Index(i pulumi.IntInput) GetListingPackageRegionCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageRegionCountry {
		return vs[0].([]GetListingPackageRegionCountry)[vs[1].(int)]
	}).(GetListingPackageRegionCountryOutput)
}

type GetListingPackageVariable struct {
	// The data type of the variable.
	DataType string `pulumi:"dataType"`
	// The variable's default value.
	DefaultValue string `pulumi:"defaultValue"`
	// A description of the variable.
	Description string `pulumi:"description"`
	// A brief textual description that helps to explain the variable.
	HintMessage string `pulumi:"hintMessage"`
	// Whether the variable is mandatory.
	IsMandatory bool `pulumi:"isMandatory"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackageVariableInput is an input type that accepts GetListingPackageVariableArgs and GetListingPackageVariableOutput values.
// You can construct a concrete instance of `GetListingPackageVariableInput` via:
//
//	GetListingPackageVariableArgs{...}
type GetListingPackageVariableInput interface {
	pulumi.Input

	ToGetListingPackageVariableOutput() GetListingPackageVariableOutput
	ToGetListingPackageVariableOutputWithContext(context.Context) GetListingPackageVariableOutput
}

type GetListingPackageVariableArgs struct {
	// The data type of the variable.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The variable's default value.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// A description of the variable.
	Description pulumi.StringInput `pulumi:"description"`
	// A brief textual description that helps to explain the variable.
	HintMessage pulumi.StringInput `pulumi:"hintMessage"`
	// Whether the variable is mandatory.
	IsMandatory pulumi.BoolInput `pulumi:"isMandatory"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackageVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageVariable)(nil)).Elem()
}

func (i GetListingPackageVariableArgs) ToGetListingPackageVariableOutput() GetListingPackageVariableOutput {
	return i.ToGetListingPackageVariableOutputWithContext(context.Background())
}

func (i GetListingPackageVariableArgs) ToGetListingPackageVariableOutputWithContext(ctx context.Context) GetListingPackageVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageVariableOutput)
}

func (i GetListingPackageVariableArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageVariable] {
	return pulumix.Output[GetListingPackageVariable]{
		OutputState: i.ToGetListingPackageVariableOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackageVariableArrayInput is an input type that accepts GetListingPackageVariableArray and GetListingPackageVariableArrayOutput values.
// You can construct a concrete instance of `GetListingPackageVariableArrayInput` via:
//
//	GetListingPackageVariableArray{ GetListingPackageVariableArgs{...} }
type GetListingPackageVariableArrayInput interface {
	pulumi.Input

	ToGetListingPackageVariableArrayOutput() GetListingPackageVariableArrayOutput
	ToGetListingPackageVariableArrayOutputWithContext(context.Context) GetListingPackageVariableArrayOutput
}

type GetListingPackageVariableArray []GetListingPackageVariableInput

func (GetListingPackageVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageVariable)(nil)).Elem()
}

func (i GetListingPackageVariableArray) ToGetListingPackageVariableArrayOutput() GetListingPackageVariableArrayOutput {
	return i.ToGetListingPackageVariableArrayOutputWithContext(context.Background())
}

func (i GetListingPackageVariableArray) ToGetListingPackageVariableArrayOutputWithContext(ctx context.Context) GetListingPackageVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackageVariableArrayOutput)
}

func (i GetListingPackageVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageVariable] {
	return pulumix.Output[[]GetListingPackageVariable]{
		OutputState: i.ToGetListingPackageVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackageVariableOutput struct{ *pulumi.OutputState }

func (GetListingPackageVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackageVariable)(nil)).Elem()
}

func (o GetListingPackageVariableOutput) ToGetListingPackageVariableOutput() GetListingPackageVariableOutput {
	return o
}

func (o GetListingPackageVariableOutput) ToGetListingPackageVariableOutputWithContext(ctx context.Context) GetListingPackageVariableOutput {
	return o
}

func (o GetListingPackageVariableOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackageVariable] {
	return pulumix.Output[GetListingPackageVariable]{
		OutputState: o.OutputState,
	}
}

// The data type of the variable.
func (o GetListingPackageVariableOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageVariable) string { return v.DataType }).(pulumi.StringOutput)
}

// The variable's default value.
func (o GetListingPackageVariableOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageVariable) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// A description of the variable.
func (o GetListingPackageVariableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageVariable) string { return v.Description }).(pulumi.StringOutput)
}

// A brief textual description that helps to explain the variable.
func (o GetListingPackageVariableOutput) HintMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageVariable) string { return v.HintMessage }).(pulumi.StringOutput)
}

// Whether the variable is mandatory.
func (o GetListingPackageVariableOutput) IsMandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListingPackageVariable) bool { return v.IsMandatory }).(pulumi.BoolOutput)
}

// The name of the variable.
func (o GetListingPackageVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackageVariable) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackageVariableArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackageVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackageVariable)(nil)).Elem()
}

func (o GetListingPackageVariableArrayOutput) ToGetListingPackageVariableArrayOutput() GetListingPackageVariableArrayOutput {
	return o
}

func (o GetListingPackageVariableArrayOutput) ToGetListingPackageVariableArrayOutputWithContext(ctx context.Context) GetListingPackageVariableArrayOutput {
	return o
}

func (o GetListingPackageVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackageVariable] {
	return pulumix.Output[[]GetListingPackageVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackageVariableArrayOutput) Index(i pulumi.IntInput) GetListingPackageVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackageVariable {
		return vs[0].([]GetListingPackageVariable)[vs[1].(int)]
	}).(GetListingPackageVariableOutput)
}

type GetListingPackagesFilter struct {
	// The name of the variable.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetListingPackagesFilterInput is an input type that accepts GetListingPackagesFilterArgs and GetListingPackagesFilterOutput values.
// You can construct a concrete instance of `GetListingPackagesFilterInput` via:
//
//	GetListingPackagesFilterArgs{...}
type GetListingPackagesFilterInput interface {
	pulumi.Input

	ToGetListingPackagesFilterOutput() GetListingPackagesFilterOutput
	ToGetListingPackagesFilterOutputWithContext(context.Context) GetListingPackagesFilterOutput
}

type GetListingPackagesFilterArgs struct {
	// The name of the variable.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetListingPackagesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesFilter)(nil)).Elem()
}

func (i GetListingPackagesFilterArgs) ToGetListingPackagesFilterOutput() GetListingPackagesFilterOutput {
	return i.ToGetListingPackagesFilterOutputWithContext(context.Background())
}

func (i GetListingPackagesFilterArgs) ToGetListingPackagesFilterOutputWithContext(ctx context.Context) GetListingPackagesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesFilterOutput)
}

func (i GetListingPackagesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesFilter] {
	return pulumix.Output[GetListingPackagesFilter]{
		OutputState: i.ToGetListingPackagesFilterOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesFilterArrayInput is an input type that accepts GetListingPackagesFilterArray and GetListingPackagesFilterArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesFilterArrayInput` via:
//
//	GetListingPackagesFilterArray{ GetListingPackagesFilterArgs{...} }
type GetListingPackagesFilterArrayInput interface {
	pulumi.Input

	ToGetListingPackagesFilterArrayOutput() GetListingPackagesFilterArrayOutput
	ToGetListingPackagesFilterArrayOutputWithContext(context.Context) GetListingPackagesFilterArrayOutput
}

type GetListingPackagesFilterArray []GetListingPackagesFilterInput

func (GetListingPackagesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesFilter)(nil)).Elem()
}

func (i GetListingPackagesFilterArray) ToGetListingPackagesFilterArrayOutput() GetListingPackagesFilterArrayOutput {
	return i.ToGetListingPackagesFilterArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesFilterArray) ToGetListingPackagesFilterArrayOutputWithContext(ctx context.Context) GetListingPackagesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesFilterArrayOutput)
}

func (i GetListingPackagesFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesFilter] {
	return pulumix.Output[[]GetListingPackagesFilter]{
		OutputState: i.ToGetListingPackagesFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesFilterOutput struct{ *pulumi.OutputState }

func (GetListingPackagesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesFilter)(nil)).Elem()
}

func (o GetListingPackagesFilterOutput) ToGetListingPackagesFilterOutput() GetListingPackagesFilterOutput {
	return o
}

func (o GetListingPackagesFilterOutput) ToGetListingPackagesFilterOutputWithContext(ctx context.Context) GetListingPackagesFilterOutput {
	return o
}

func (o GetListingPackagesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesFilter] {
	return pulumix.Output[GetListingPackagesFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the variable.
func (o GetListingPackagesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetListingPackagesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetListingPackagesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetListingPackagesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingPackagesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetListingPackagesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesFilter)(nil)).Elem()
}

func (o GetListingPackagesFilterArrayOutput) ToGetListingPackagesFilterArrayOutput() GetListingPackagesFilterArrayOutput {
	return o
}

func (o GetListingPackagesFilterArrayOutput) ToGetListingPackagesFilterArrayOutputWithContext(ctx context.Context) GetListingPackagesFilterArrayOutput {
	return o
}

func (o GetListingPackagesFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesFilter] {
	return pulumix.Output[[]GetListingPackagesFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesFilterArrayOutput) Index(i pulumi.IntInput) GetListingPackagesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesFilter {
		return vs[0].([]GetListingPackagesFilter)[vs[1].(int)]
	}).(GetListingPackagesFilterOutput)
}

type GetListingPackagesListingPackage struct {
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// The operating system used by the listing.
	OperatingSystems []GetListingPackagesListingPackageOperatingSystem `pulumi:"operatingSystems"`
	// A filter to return only packages that match the given package type exactly.
	PackageType string `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion string `pulumi:"packageVersion"`
	// The model for pricing.
	Pricings []GetListingPackagesListingPackagePricing `pulumi:"pricings"`
	// The regions where you can deploy the listing package. (Some packages have restrictions that limit their deployment to United States regions only.)
	Regions []GetListingPackagesListingPackageRegion `pulumi:"regions"`
	// The unique identifier for the package resource.
	ResourceId string `pulumi:"resourceId"`
	// The date and time this listing package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
}

// GetListingPackagesListingPackageInput is an input type that accepts GetListingPackagesListingPackageArgs and GetListingPackagesListingPackageOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageInput` via:
//
//	GetListingPackagesListingPackageArgs{...}
type GetListingPackagesListingPackageInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageOutput() GetListingPackagesListingPackageOutput
	ToGetListingPackagesListingPackageOutputWithContext(context.Context) GetListingPackagesListingPackageOutput
}

type GetListingPackagesListingPackageArgs struct {
	// The unique identifier for the listing.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// The operating system used by the listing.
	OperatingSystems GetListingPackagesListingPackageOperatingSystemArrayInput `pulumi:"operatingSystems"`
	// A filter to return only packages that match the given package type exactly.
	PackageType pulumi.StringInput `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The model for pricing.
	Pricings GetListingPackagesListingPackagePricingArrayInput `pulumi:"pricings"`
	// The regions where you can deploy the listing package. (Some packages have restrictions that limit their deployment to United States regions only.)
	Regions GetListingPackagesListingPackageRegionArrayInput `pulumi:"regions"`
	// The unique identifier for the package resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The date and time this listing package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
}

func (GetListingPackagesListingPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackage)(nil)).Elem()
}

func (i GetListingPackagesListingPackageArgs) ToGetListingPackagesListingPackageOutput() GetListingPackagesListingPackageOutput {
	return i.ToGetListingPackagesListingPackageOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageArgs) ToGetListingPackagesListingPackageOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageOutput)
}

func (i GetListingPackagesListingPackageArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackage] {
	return pulumix.Output[GetListingPackagesListingPackage]{
		OutputState: i.ToGetListingPackagesListingPackageOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackageArrayInput is an input type that accepts GetListingPackagesListingPackageArray and GetListingPackagesListingPackageArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageArrayInput` via:
//
//	GetListingPackagesListingPackageArray{ GetListingPackagesListingPackageArgs{...} }
type GetListingPackagesListingPackageArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageArrayOutput() GetListingPackagesListingPackageArrayOutput
	ToGetListingPackagesListingPackageArrayOutputWithContext(context.Context) GetListingPackagesListingPackageArrayOutput
}

type GetListingPackagesListingPackageArray []GetListingPackagesListingPackageInput

func (GetListingPackagesListingPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackage)(nil)).Elem()
}

func (i GetListingPackagesListingPackageArray) ToGetListingPackagesListingPackageArrayOutput() GetListingPackagesListingPackageArrayOutput {
	return i.ToGetListingPackagesListingPackageArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageArray) ToGetListingPackagesListingPackageArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageArrayOutput)
}

func (i GetListingPackagesListingPackageArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackage] {
	return pulumix.Output[[]GetListingPackagesListingPackage]{
		OutputState: i.ToGetListingPackagesListingPackageArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackageOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackage)(nil)).Elem()
}

func (o GetListingPackagesListingPackageOutput) ToGetListingPackagesListingPackageOutput() GetListingPackagesListingPackageOutput {
	return o
}

func (o GetListingPackagesListingPackageOutput) ToGetListingPackagesListingPackageOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOutput {
	return o
}

func (o GetListingPackagesListingPackageOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackage] {
	return pulumix.Output[GetListingPackagesListingPackage]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the listing.
func (o GetListingPackagesListingPackageOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) string { return v.ListingId }).(pulumi.StringOutput)
}

// The operating system used by the listing.
func (o GetListingPackagesListingPackageOutput) OperatingSystems() GetListingPackagesListingPackageOperatingSystemArrayOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) []GetListingPackagesListingPackageOperatingSystem {
		return v.OperatingSystems
	}).(GetListingPackagesListingPackageOperatingSystemArrayOutput)
}

// A filter to return only packages that match the given package type exactly.
func (o GetListingPackagesListingPackageOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) string { return v.PackageType }).(pulumi.StringOutput)
}

// The version of the package. Package versions are unique within a listing.
func (o GetListingPackagesListingPackageOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The model for pricing.
func (o GetListingPackagesListingPackageOutput) Pricings() GetListingPackagesListingPackagePricingArrayOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) []GetListingPackagesListingPackagePricing { return v.Pricings }).(GetListingPackagesListingPackagePricingArrayOutput)
}

// The regions where you can deploy the listing package. (Some packages have restrictions that limit their deployment to United States regions only.)
func (o GetListingPackagesListingPackageOutput) Regions() GetListingPackagesListingPackageRegionArrayOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) []GetListingPackagesListingPackageRegion { return v.Regions }).(GetListingPackagesListingPackageRegionArrayOutput)
}

// The unique identifier for the package resource.
func (o GetListingPackagesListingPackageOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The date and time this listing package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
func (o GetListingPackagesListingPackageOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackage) string { return v.TimeCreated }).(pulumi.StringOutput)
}

type GetListingPackagesListingPackageArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackage)(nil)).Elem()
}

func (o GetListingPackagesListingPackageArrayOutput) ToGetListingPackagesListingPackageArrayOutput() GetListingPackagesListingPackageArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageArrayOutput) ToGetListingPackagesListingPackageArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackage] {
	return pulumix.Output[[]GetListingPackagesListingPackage]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackageArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackage {
		return vs[0].([]GetListingPackagesListingPackage)[vs[1].(int)]
	}).(GetListingPackagesListingPackageOutput)
}

type GetListingPackagesListingPackageOperatingSystem struct {
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackagesListingPackageOperatingSystemInput is an input type that accepts GetListingPackagesListingPackageOperatingSystemArgs and GetListingPackagesListingPackageOperatingSystemOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageOperatingSystemInput` via:
//
//	GetListingPackagesListingPackageOperatingSystemArgs{...}
type GetListingPackagesListingPackageOperatingSystemInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageOperatingSystemOutput() GetListingPackagesListingPackageOperatingSystemOutput
	ToGetListingPackagesListingPackageOperatingSystemOutputWithContext(context.Context) GetListingPackagesListingPackageOperatingSystemOutput
}

type GetListingPackagesListingPackageOperatingSystemArgs struct {
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackagesListingPackageOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageOperatingSystem)(nil)).Elem()
}

func (i GetListingPackagesListingPackageOperatingSystemArgs) ToGetListingPackagesListingPackageOperatingSystemOutput() GetListingPackagesListingPackageOperatingSystemOutput {
	return i.ToGetListingPackagesListingPackageOperatingSystemOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageOperatingSystemArgs) ToGetListingPackagesListingPackageOperatingSystemOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageOperatingSystemOutput)
}

func (i GetListingPackagesListingPackageOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageOperatingSystem] {
	return pulumix.Output[GetListingPackagesListingPackageOperatingSystem]{
		OutputState: i.ToGetListingPackagesListingPackageOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackageOperatingSystemArrayInput is an input type that accepts GetListingPackagesListingPackageOperatingSystemArray and GetListingPackagesListingPackageOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageOperatingSystemArrayInput` via:
//
//	GetListingPackagesListingPackageOperatingSystemArray{ GetListingPackagesListingPackageOperatingSystemArgs{...} }
type GetListingPackagesListingPackageOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageOperatingSystemArrayOutput() GetListingPackagesListingPackageOperatingSystemArrayOutput
	ToGetListingPackagesListingPackageOperatingSystemArrayOutputWithContext(context.Context) GetListingPackagesListingPackageOperatingSystemArrayOutput
}

type GetListingPackagesListingPackageOperatingSystemArray []GetListingPackagesListingPackageOperatingSystemInput

func (GetListingPackagesListingPackageOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageOperatingSystem)(nil)).Elem()
}

func (i GetListingPackagesListingPackageOperatingSystemArray) ToGetListingPackagesListingPackageOperatingSystemArrayOutput() GetListingPackagesListingPackageOperatingSystemArrayOutput {
	return i.ToGetListingPackagesListingPackageOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageOperatingSystemArray) ToGetListingPackagesListingPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageOperatingSystemArrayOutput)
}

func (i GetListingPackagesListingPackageOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageOperatingSystem] {
	return pulumix.Output[[]GetListingPackagesListingPackageOperatingSystem]{
		OutputState: i.ToGetListingPackagesListingPackageOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackageOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageOperatingSystem)(nil)).Elem()
}

func (o GetListingPackagesListingPackageOperatingSystemOutput) ToGetListingPackagesListingPackageOperatingSystemOutput() GetListingPackagesListingPackageOperatingSystemOutput {
	return o
}

func (o GetListingPackagesListingPackageOperatingSystemOutput) ToGetListingPackagesListingPackageOperatingSystemOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOperatingSystemOutput {
	return o
}

func (o GetListingPackagesListingPackageOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageOperatingSystem] {
	return pulumix.Output[GetListingPackagesListingPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the variable.
func (o GetListingPackagesListingPackageOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackagesListingPackageOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageOperatingSystem)(nil)).Elem()
}

func (o GetListingPackagesListingPackageOperatingSystemArrayOutput) ToGetListingPackagesListingPackageOperatingSystemArrayOutput() GetListingPackagesListingPackageOperatingSystemArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageOperatingSystemArrayOutput) ToGetListingPackagesListingPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageOperatingSystemArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageOperatingSystem] {
	return pulumix.Output[[]GetListingPackagesListingPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackageOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackageOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackageOperatingSystem {
		return vs[0].([]GetListingPackagesListingPackageOperatingSystem)[vs[1].(int)]
	}).(GetListingPackagesListingPackageOperatingSystemOutput)
}

type GetListingPackagesListingPackagePricing struct {
	// The currency of the pricing model.
	Currency string `pulumi:"currency"`
	// The model for international market pricing.
	InternationalMarketPrices []GetListingPackagesListingPackagePricingInternationalMarketPrice `pulumi:"internationalMarketPrices"`
	// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
	PayGoStrategy string `pulumi:"payGoStrategy"`
	// The pricing rate.
	Rate float64 `pulumi:"rate"`
	// The type of the pricing model.
	Type string `pulumi:"type"`
}

// GetListingPackagesListingPackagePricingInput is an input type that accepts GetListingPackagesListingPackagePricingArgs and GetListingPackagesListingPackagePricingOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackagePricingInput` via:
//
//	GetListingPackagesListingPackagePricingArgs{...}
type GetListingPackagesListingPackagePricingInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackagePricingOutput() GetListingPackagesListingPackagePricingOutput
	ToGetListingPackagesListingPackagePricingOutputWithContext(context.Context) GetListingPackagesListingPackagePricingOutput
}

type GetListingPackagesListingPackagePricingArgs struct {
	// The currency of the pricing model.
	Currency pulumi.StringInput `pulumi:"currency"`
	// The model for international market pricing.
	InternationalMarketPrices GetListingPackagesListingPackagePricingInternationalMarketPriceArrayInput `pulumi:"internationalMarketPrices"`
	// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
	PayGoStrategy pulumi.StringInput `pulumi:"payGoStrategy"`
	// The pricing rate.
	Rate pulumi.Float64Input `pulumi:"rate"`
	// The type of the pricing model.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetListingPackagesListingPackagePricingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackagePricing)(nil)).Elem()
}

func (i GetListingPackagesListingPackagePricingArgs) ToGetListingPackagesListingPackagePricingOutput() GetListingPackagesListingPackagePricingOutput {
	return i.ToGetListingPackagesListingPackagePricingOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackagePricingArgs) ToGetListingPackagesListingPackagePricingOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackagePricingOutput)
}

func (i GetListingPackagesListingPackagePricingArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackagePricing] {
	return pulumix.Output[GetListingPackagesListingPackagePricing]{
		OutputState: i.ToGetListingPackagesListingPackagePricingOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackagePricingArrayInput is an input type that accepts GetListingPackagesListingPackagePricingArray and GetListingPackagesListingPackagePricingArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackagePricingArrayInput` via:
//
//	GetListingPackagesListingPackagePricingArray{ GetListingPackagesListingPackagePricingArgs{...} }
type GetListingPackagesListingPackagePricingArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackagePricingArrayOutput() GetListingPackagesListingPackagePricingArrayOutput
	ToGetListingPackagesListingPackagePricingArrayOutputWithContext(context.Context) GetListingPackagesListingPackagePricingArrayOutput
}

type GetListingPackagesListingPackagePricingArray []GetListingPackagesListingPackagePricingInput

func (GetListingPackagesListingPackagePricingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackagePricing)(nil)).Elem()
}

func (i GetListingPackagesListingPackagePricingArray) ToGetListingPackagesListingPackagePricingArrayOutput() GetListingPackagesListingPackagePricingArrayOutput {
	return i.ToGetListingPackagesListingPackagePricingArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackagePricingArray) ToGetListingPackagesListingPackagePricingArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackagePricingArrayOutput)
}

func (i GetListingPackagesListingPackagePricingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackagePricing] {
	return pulumix.Output[[]GetListingPackagesListingPackagePricing]{
		OutputState: i.ToGetListingPackagesListingPackagePricingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackagePricingOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackagePricingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackagePricing)(nil)).Elem()
}

func (o GetListingPackagesListingPackagePricingOutput) ToGetListingPackagesListingPackagePricingOutput() GetListingPackagesListingPackagePricingOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingOutput) ToGetListingPackagesListingPackagePricingOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackagePricing] {
	return pulumix.Output[GetListingPackagesListingPackagePricing]{
		OutputState: o.OutputState,
	}
}

// The currency of the pricing model.
func (o GetListingPackagesListingPackagePricingOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricing) string { return v.Currency }).(pulumi.StringOutput)
}

// The model for international market pricing.
func (o GetListingPackagesListingPackagePricingOutput) InternationalMarketPrices() GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricing) []GetListingPackagesListingPackagePricingInternationalMarketPrice {
		return v.InternationalMarketPrices
	}).(GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput)
}

// The type of pricing for a PAYGO model, eg PER_OCPU_LINEAR, PER_OCPU_MIN_BILLING, PER_INSTANCE.  Null if type is not PAYGO.
func (o GetListingPackagesListingPackagePricingOutput) PayGoStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricing) string { return v.PayGoStrategy }).(pulumi.StringOutput)
}

// The pricing rate.
func (o GetListingPackagesListingPackagePricingOutput) Rate() pulumi.Float64Output {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricing) float64 { return v.Rate }).(pulumi.Float64Output)
}

// The type of the pricing model.
func (o GetListingPackagesListingPackagePricingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricing) string { return v.Type }).(pulumi.StringOutput)
}

type GetListingPackagesListingPackagePricingArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackagePricingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackagePricing)(nil)).Elem()
}

func (o GetListingPackagesListingPackagePricingArrayOutput) ToGetListingPackagesListingPackagePricingArrayOutput() GetListingPackagesListingPackagePricingArrayOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingArrayOutput) ToGetListingPackagesListingPackagePricingArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingArrayOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackagePricing] {
	return pulumix.Output[[]GetListingPackagesListingPackagePricing]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackagePricingArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackagePricingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackagePricing {
		return vs[0].([]GetListingPackagesListingPackagePricing)[vs[1].(int)]
	}).(GetListingPackagesListingPackagePricingOutput)
}

type GetListingPackagesListingPackagePricingInternationalMarketPrice struct {
	// The currency of the pricing model.
	CurrencyCode string `pulumi:"currencyCode"`
	// The symbol of the currency
	CurrencySymbol string `pulumi:"currencySymbol"`
	// The pricing rate.
	Rate float64 `pulumi:"rate"`
}

// GetListingPackagesListingPackagePricingInternationalMarketPriceInput is an input type that accepts GetListingPackagesListingPackagePricingInternationalMarketPriceArgs and GetListingPackagesListingPackagePricingInternationalMarketPriceOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackagePricingInternationalMarketPriceInput` via:
//
//	GetListingPackagesListingPackagePricingInternationalMarketPriceArgs{...}
type GetListingPackagesListingPackagePricingInternationalMarketPriceInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceOutput
	ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutputWithContext(context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceOutput
}

type GetListingPackagesListingPackagePricingInternationalMarketPriceArgs struct {
	// The currency of the pricing model.
	CurrencyCode pulumi.StringInput `pulumi:"currencyCode"`
	// The symbol of the currency
	CurrencySymbol pulumi.StringInput `pulumi:"currencySymbol"`
	// The pricing rate.
	Rate pulumi.Float64Input `pulumi:"rate"`
}

func (GetListingPackagesListingPackagePricingInternationalMarketPriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArgs) ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceOutput {
	return i.ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArgs) ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackagePricingInternationalMarketPriceOutput)
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[GetListingPackagesListingPackagePricingInternationalMarketPrice]{
		OutputState: i.ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackagePricingInternationalMarketPriceArrayInput is an input type that accepts GetListingPackagesListingPackagePricingInternationalMarketPriceArray and GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackagePricingInternationalMarketPriceArrayInput` via:
//
//	GetListingPackagesListingPackagePricingInternationalMarketPriceArray{ GetListingPackagesListingPackagePricingInternationalMarketPriceArgs{...} }
type GetListingPackagesListingPackagePricingInternationalMarketPriceArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput
	ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutputWithContext(context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput
}

type GetListingPackagesListingPackagePricingInternationalMarketPriceArray []GetListingPackagesListingPackagePricingInternationalMarketPriceInput

func (GetListingPackagesListingPackagePricingInternationalMarketPriceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArray) ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput {
	return i.ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArray) ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput)
}

func (i GetListingPackagesListingPackagePricingInternationalMarketPriceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[[]GetListingPackagesListingPackagePricingInternationalMarketPrice]{
		OutputState: i.ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackagePricingInternationalMarketPriceOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) ToGetListingPackagesListingPackagePricingInternationalMarketPriceOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[GetListingPackagesListingPackagePricingInternationalMarketPrice]{
		OutputState: o.OutputState,
	}
}

// The currency of the pricing model.
func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) CurrencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricingInternationalMarketPrice) string { return v.CurrencyCode }).(pulumi.StringOutput)
}

// The symbol of the currency
func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) CurrencySymbol() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricingInternationalMarketPrice) string {
		return v.CurrencySymbol
	}).(pulumi.StringOutput)
}

// The pricing rate.
func (o GetListingPackagesListingPackagePricingInternationalMarketPriceOutput) Rate() pulumi.Float64Output {
	return o.ApplyT(func(v GetListingPackagesListingPackagePricingInternationalMarketPrice) float64 { return v.Rate }).(pulumi.Float64Output)
}

type GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackagePricingInternationalMarketPrice)(nil)).Elem()
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput) ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput() GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput) ToGetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput {
	return o
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackagePricingInternationalMarketPrice] {
	return pulumix.Output[[]GetListingPackagesListingPackagePricingInternationalMarketPrice]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackagePricingInternationalMarketPriceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackagePricingInternationalMarketPrice {
		return vs[0].([]GetListingPackagesListingPackagePricingInternationalMarketPrice)[vs[1].(int)]
	}).(GetListingPackagesListingPackagePricingInternationalMarketPriceOutput)
}

type GetListingPackagesListingPackageRegion struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Countries in the region.
	Countries []GetListingPackagesListingPackageRegionCountry `pulumi:"countries"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackagesListingPackageRegionInput is an input type that accepts GetListingPackagesListingPackageRegionArgs and GetListingPackagesListingPackageRegionOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageRegionInput` via:
//
//	GetListingPackagesListingPackageRegionArgs{...}
type GetListingPackagesListingPackageRegionInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageRegionOutput() GetListingPackagesListingPackageRegionOutput
	ToGetListingPackagesListingPackageRegionOutputWithContext(context.Context) GetListingPackagesListingPackageRegionOutput
}

type GetListingPackagesListingPackageRegionArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Countries in the region.
	Countries GetListingPackagesListingPackageRegionCountryArrayInput `pulumi:"countries"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackagesListingPackageRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageRegion)(nil)).Elem()
}

func (i GetListingPackagesListingPackageRegionArgs) ToGetListingPackagesListingPackageRegionOutput() GetListingPackagesListingPackageRegionOutput {
	return i.ToGetListingPackagesListingPackageRegionOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageRegionArgs) ToGetListingPackagesListingPackageRegionOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageRegionOutput)
}

func (i GetListingPackagesListingPackageRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageRegion] {
	return pulumix.Output[GetListingPackagesListingPackageRegion]{
		OutputState: i.ToGetListingPackagesListingPackageRegionOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackageRegionArrayInput is an input type that accepts GetListingPackagesListingPackageRegionArray and GetListingPackagesListingPackageRegionArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageRegionArrayInput` via:
//
//	GetListingPackagesListingPackageRegionArray{ GetListingPackagesListingPackageRegionArgs{...} }
type GetListingPackagesListingPackageRegionArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageRegionArrayOutput() GetListingPackagesListingPackageRegionArrayOutput
	ToGetListingPackagesListingPackageRegionArrayOutputWithContext(context.Context) GetListingPackagesListingPackageRegionArrayOutput
}

type GetListingPackagesListingPackageRegionArray []GetListingPackagesListingPackageRegionInput

func (GetListingPackagesListingPackageRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageRegion)(nil)).Elem()
}

func (i GetListingPackagesListingPackageRegionArray) ToGetListingPackagesListingPackageRegionArrayOutput() GetListingPackagesListingPackageRegionArrayOutput {
	return i.ToGetListingPackagesListingPackageRegionArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageRegionArray) ToGetListingPackagesListingPackageRegionArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageRegionArrayOutput)
}

func (i GetListingPackagesListingPackageRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageRegion] {
	return pulumix.Output[[]GetListingPackagesListingPackageRegion]{
		OutputState: i.ToGetListingPackagesListingPackageRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackageRegionOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageRegion)(nil)).Elem()
}

func (o GetListingPackagesListingPackageRegionOutput) ToGetListingPackagesListingPackageRegionOutput() GetListingPackagesListingPackageRegionOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionOutput) ToGetListingPackagesListingPackageRegionOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageRegion] {
	return pulumix.Output[GetListingPackagesListingPackageRegion]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingPackagesListingPackageRegionOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageRegion) string { return v.Code }).(pulumi.StringOutput)
}

// Countries in the region.
func (o GetListingPackagesListingPackageRegionOutput) Countries() GetListingPackagesListingPackageRegionCountryArrayOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageRegion) []GetListingPackagesListingPackageRegionCountry {
		return v.Countries
	}).(GetListingPackagesListingPackageRegionCountryArrayOutput)
}

// The name of the variable.
func (o GetListingPackagesListingPackageRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackagesListingPackageRegionArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageRegion)(nil)).Elem()
}

func (o GetListingPackagesListingPackageRegionArrayOutput) ToGetListingPackagesListingPackageRegionArrayOutput() GetListingPackagesListingPackageRegionArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionArrayOutput) ToGetListingPackagesListingPackageRegionArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageRegion] {
	return pulumix.Output[[]GetListingPackagesListingPackageRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackageRegionArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackageRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackageRegion {
		return vs[0].([]GetListingPackagesListingPackageRegion)[vs[1].(int)]
	}).(GetListingPackagesListingPackageRegionOutput)
}

type GetListingPackagesListingPackageRegionCountry struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetListingPackagesListingPackageRegionCountryInput is an input type that accepts GetListingPackagesListingPackageRegionCountryArgs and GetListingPackagesListingPackageRegionCountryOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageRegionCountryInput` via:
//
//	GetListingPackagesListingPackageRegionCountryArgs{...}
type GetListingPackagesListingPackageRegionCountryInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageRegionCountryOutput() GetListingPackagesListingPackageRegionCountryOutput
	ToGetListingPackagesListingPackageRegionCountryOutputWithContext(context.Context) GetListingPackagesListingPackageRegionCountryOutput
}

type GetListingPackagesListingPackageRegionCountryArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPackagesListingPackageRegionCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageRegionCountry)(nil)).Elem()
}

func (i GetListingPackagesListingPackageRegionCountryArgs) ToGetListingPackagesListingPackageRegionCountryOutput() GetListingPackagesListingPackageRegionCountryOutput {
	return i.ToGetListingPackagesListingPackageRegionCountryOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageRegionCountryArgs) ToGetListingPackagesListingPackageRegionCountryOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageRegionCountryOutput)
}

func (i GetListingPackagesListingPackageRegionCountryArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageRegionCountry] {
	return pulumix.Output[GetListingPackagesListingPackageRegionCountry]{
		OutputState: i.ToGetListingPackagesListingPackageRegionCountryOutputWithContext(ctx).OutputState,
	}
}

// GetListingPackagesListingPackageRegionCountryArrayInput is an input type that accepts GetListingPackagesListingPackageRegionCountryArray and GetListingPackagesListingPackageRegionCountryArrayOutput values.
// You can construct a concrete instance of `GetListingPackagesListingPackageRegionCountryArrayInput` via:
//
//	GetListingPackagesListingPackageRegionCountryArray{ GetListingPackagesListingPackageRegionCountryArgs{...} }
type GetListingPackagesListingPackageRegionCountryArrayInput interface {
	pulumi.Input

	ToGetListingPackagesListingPackageRegionCountryArrayOutput() GetListingPackagesListingPackageRegionCountryArrayOutput
	ToGetListingPackagesListingPackageRegionCountryArrayOutputWithContext(context.Context) GetListingPackagesListingPackageRegionCountryArrayOutput
}

type GetListingPackagesListingPackageRegionCountryArray []GetListingPackagesListingPackageRegionCountryInput

func (GetListingPackagesListingPackageRegionCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageRegionCountry)(nil)).Elem()
}

func (i GetListingPackagesListingPackageRegionCountryArray) ToGetListingPackagesListingPackageRegionCountryArrayOutput() GetListingPackagesListingPackageRegionCountryArrayOutput {
	return i.ToGetListingPackagesListingPackageRegionCountryArrayOutputWithContext(context.Background())
}

func (i GetListingPackagesListingPackageRegionCountryArray) ToGetListingPackagesListingPackageRegionCountryArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPackagesListingPackageRegionCountryArrayOutput)
}

func (i GetListingPackagesListingPackageRegionCountryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageRegionCountry] {
	return pulumix.Output[[]GetListingPackagesListingPackageRegionCountry]{
		OutputState: i.ToGetListingPackagesListingPackageRegionCountryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPackagesListingPackageRegionCountryOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageRegionCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPackagesListingPackageRegionCountry)(nil)).Elem()
}

func (o GetListingPackagesListingPackageRegionCountryOutput) ToGetListingPackagesListingPackageRegionCountryOutput() GetListingPackagesListingPackageRegionCountryOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionCountryOutput) ToGetListingPackagesListingPackageRegionCountryOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionCountryOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionCountryOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPackagesListingPackageRegionCountry] {
	return pulumix.Output[GetListingPackagesListingPackageRegionCountry]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingPackagesListingPackageRegionCountryOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageRegionCountry) string { return v.Code }).(pulumi.StringOutput)
}

// The name of the variable.
func (o GetListingPackagesListingPackageRegionCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPackagesListingPackageRegionCountry) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPackagesListingPackageRegionCountryArrayOutput struct{ *pulumi.OutputState }

func (GetListingPackagesListingPackageRegionCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPackagesListingPackageRegionCountry)(nil)).Elem()
}

func (o GetListingPackagesListingPackageRegionCountryArrayOutput) ToGetListingPackagesListingPackageRegionCountryArrayOutput() GetListingPackagesListingPackageRegionCountryArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionCountryArrayOutput) ToGetListingPackagesListingPackageRegionCountryArrayOutputWithContext(ctx context.Context) GetListingPackagesListingPackageRegionCountryArrayOutput {
	return o
}

func (o GetListingPackagesListingPackageRegionCountryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPackagesListingPackageRegionCountry] {
	return pulumix.Output[[]GetListingPackagesListingPackageRegionCountry]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPackagesListingPackageRegionCountryArrayOutput) Index(i pulumi.IntInput) GetListingPackagesListingPackageRegionCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPackagesListingPackageRegionCountry {
		return vs[0].([]GetListingPackagesListingPackageRegionCountry)[vs[1].(int)]
	}).(GetListingPackagesListingPackageRegionCountryOutput)
}

type GetListingPublisher struct {
	// The email address of the publisher.
	ContactEmail string `pulumi:"contactEmail"`
	// The phone number of the publisher.
	ContactPhone string `pulumi:"contactPhone"`
	// A description of the screenshot.
	Description string `pulumi:"description"`
	// The address of the publisher's headquarters.
	HqAddress string `pulumi:"hqAddress"`
	// The unique identifier for the publisher.
	Id string `pulumi:"id"`
	// Reference links.
	Links []GetListingPublisherLink `pulumi:"links"`
	// The model for upload data for images and icons.
	Logos []GetListingPublisherLogo `pulumi:"logos"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
	// The publisher's website.
	WebsiteUrl string `pulumi:"websiteUrl"`
	// The year the publisher's company or organization was founded.
	YearFounded string `pulumi:"yearFounded"`
}

// GetListingPublisherInput is an input type that accepts GetListingPublisherArgs and GetListingPublisherOutput values.
// You can construct a concrete instance of `GetListingPublisherInput` via:
//
//	GetListingPublisherArgs{...}
type GetListingPublisherInput interface {
	pulumi.Input

	ToGetListingPublisherOutput() GetListingPublisherOutput
	ToGetListingPublisherOutputWithContext(context.Context) GetListingPublisherOutput
}

type GetListingPublisherArgs struct {
	// The email address of the publisher.
	ContactEmail pulumi.StringInput `pulumi:"contactEmail"`
	// The phone number of the publisher.
	ContactPhone pulumi.StringInput `pulumi:"contactPhone"`
	// A description of the screenshot.
	Description pulumi.StringInput `pulumi:"description"`
	// The address of the publisher's headquarters.
	HqAddress pulumi.StringInput `pulumi:"hqAddress"`
	// The unique identifier for the publisher.
	Id pulumi.StringInput `pulumi:"id"`
	// Reference links.
	Links GetListingPublisherLinkArrayInput `pulumi:"links"`
	// The model for upload data for images and icons.
	Logos GetListingPublisherLogoArrayInput `pulumi:"logos"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The publisher's website.
	WebsiteUrl pulumi.StringInput `pulumi:"websiteUrl"`
	// The year the publisher's company or organization was founded.
	YearFounded pulumi.StringInput `pulumi:"yearFounded"`
}

func (GetListingPublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisher)(nil)).Elem()
}

func (i GetListingPublisherArgs) ToGetListingPublisherOutput() GetListingPublisherOutput {
	return i.ToGetListingPublisherOutputWithContext(context.Background())
}

func (i GetListingPublisherArgs) ToGetListingPublisherOutputWithContext(ctx context.Context) GetListingPublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherOutput)
}

func (i GetListingPublisherArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisher] {
	return pulumix.Output[GetListingPublisher]{
		OutputState: i.ToGetListingPublisherOutputWithContext(ctx).OutputState,
	}
}

// GetListingPublisherArrayInput is an input type that accepts GetListingPublisherArray and GetListingPublisherArrayOutput values.
// You can construct a concrete instance of `GetListingPublisherArrayInput` via:
//
//	GetListingPublisherArray{ GetListingPublisherArgs{...} }
type GetListingPublisherArrayInput interface {
	pulumi.Input

	ToGetListingPublisherArrayOutput() GetListingPublisherArrayOutput
	ToGetListingPublisherArrayOutputWithContext(context.Context) GetListingPublisherArrayOutput
}

type GetListingPublisherArray []GetListingPublisherInput

func (GetListingPublisherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisher)(nil)).Elem()
}

func (i GetListingPublisherArray) ToGetListingPublisherArrayOutput() GetListingPublisherArrayOutput {
	return i.ToGetListingPublisherArrayOutputWithContext(context.Background())
}

func (i GetListingPublisherArray) ToGetListingPublisherArrayOutputWithContext(ctx context.Context) GetListingPublisherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherArrayOutput)
}

func (i GetListingPublisherArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisher] {
	return pulumix.Output[[]GetListingPublisher]{
		OutputState: i.ToGetListingPublisherArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPublisherOutput struct{ *pulumi.OutputState }

func (GetListingPublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisher)(nil)).Elem()
}

func (o GetListingPublisherOutput) ToGetListingPublisherOutput() GetListingPublisherOutput {
	return o
}

func (o GetListingPublisherOutput) ToGetListingPublisherOutputWithContext(ctx context.Context) GetListingPublisherOutput {
	return o
}

func (o GetListingPublisherOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisher] {
	return pulumix.Output[GetListingPublisher]{
		OutputState: o.OutputState,
	}
}

// The email address of the publisher.
func (o GetListingPublisherOutput) ContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.ContactEmail }).(pulumi.StringOutput)
}

// The phone number of the publisher.
func (o GetListingPublisherOutput) ContactPhone() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.ContactPhone }).(pulumi.StringOutput)
}

// A description of the screenshot.
func (o GetListingPublisherOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.Description }).(pulumi.StringOutput)
}

// The address of the publisher's headquarters.
func (o GetListingPublisherOutput) HqAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.HqAddress }).(pulumi.StringOutput)
}

// The unique identifier for the publisher.
func (o GetListingPublisherOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.Id }).(pulumi.StringOutput)
}

// Reference links.
func (o GetListingPublisherOutput) Links() GetListingPublisherLinkArrayOutput {
	return o.ApplyT(func(v GetListingPublisher) []GetListingPublisherLink { return v.Links }).(GetListingPublisherLinkArrayOutput)
}

// The model for upload data for images and icons.
func (o GetListingPublisherOutput) Logos() GetListingPublisherLogoArrayOutput {
	return o.ApplyT(func(v GetListingPublisher) []GetListingPublisherLogo { return v.Logos }).(GetListingPublisherLogoArrayOutput)
}

// Text that describes the resource.
func (o GetListingPublisherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.Name }).(pulumi.StringOutput)
}

// The publisher's website.
func (o GetListingPublisherOutput) WebsiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.WebsiteUrl }).(pulumi.StringOutput)
}

// The year the publisher's company or organization was founded.
func (o GetListingPublisherOutput) YearFounded() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisher) string { return v.YearFounded }).(pulumi.StringOutput)
}

type GetListingPublisherArrayOutput struct{ *pulumi.OutputState }

func (GetListingPublisherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisher)(nil)).Elem()
}

func (o GetListingPublisherArrayOutput) ToGetListingPublisherArrayOutput() GetListingPublisherArrayOutput {
	return o
}

func (o GetListingPublisherArrayOutput) ToGetListingPublisherArrayOutputWithContext(ctx context.Context) GetListingPublisherArrayOutput {
	return o
}

func (o GetListingPublisherArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisher] {
	return pulumix.Output[[]GetListingPublisher]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPublisherArrayOutput) Index(i pulumi.IntInput) GetListingPublisherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPublisher {
		return vs[0].([]GetListingPublisher)[vs[1].(int)]
	}).(GetListingPublisherOutput)
}

type GetListingPublisherLink struct {
	// The anchor tag.
	Href string `pulumi:"href"`
	// Reference links to the previous page, next page, and other pages.
	Rel string `pulumi:"rel"`
}

// GetListingPublisherLinkInput is an input type that accepts GetListingPublisherLinkArgs and GetListingPublisherLinkOutput values.
// You can construct a concrete instance of `GetListingPublisherLinkInput` via:
//
//	GetListingPublisherLinkArgs{...}
type GetListingPublisherLinkInput interface {
	pulumi.Input

	ToGetListingPublisherLinkOutput() GetListingPublisherLinkOutput
	ToGetListingPublisherLinkOutputWithContext(context.Context) GetListingPublisherLinkOutput
}

type GetListingPublisherLinkArgs struct {
	// The anchor tag.
	Href pulumi.StringInput `pulumi:"href"`
	// Reference links to the previous page, next page, and other pages.
	Rel pulumi.StringInput `pulumi:"rel"`
}

func (GetListingPublisherLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisherLink)(nil)).Elem()
}

func (i GetListingPublisherLinkArgs) ToGetListingPublisherLinkOutput() GetListingPublisherLinkOutput {
	return i.ToGetListingPublisherLinkOutputWithContext(context.Background())
}

func (i GetListingPublisherLinkArgs) ToGetListingPublisherLinkOutputWithContext(ctx context.Context) GetListingPublisherLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherLinkOutput)
}

func (i GetListingPublisherLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisherLink] {
	return pulumix.Output[GetListingPublisherLink]{
		OutputState: i.ToGetListingPublisherLinkOutputWithContext(ctx).OutputState,
	}
}

// GetListingPublisherLinkArrayInput is an input type that accepts GetListingPublisherLinkArray and GetListingPublisherLinkArrayOutput values.
// You can construct a concrete instance of `GetListingPublisherLinkArrayInput` via:
//
//	GetListingPublisherLinkArray{ GetListingPublisherLinkArgs{...} }
type GetListingPublisherLinkArrayInput interface {
	pulumi.Input

	ToGetListingPublisherLinkArrayOutput() GetListingPublisherLinkArrayOutput
	ToGetListingPublisherLinkArrayOutputWithContext(context.Context) GetListingPublisherLinkArrayOutput
}

type GetListingPublisherLinkArray []GetListingPublisherLinkInput

func (GetListingPublisherLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisherLink)(nil)).Elem()
}

func (i GetListingPublisherLinkArray) ToGetListingPublisherLinkArrayOutput() GetListingPublisherLinkArrayOutput {
	return i.ToGetListingPublisherLinkArrayOutputWithContext(context.Background())
}

func (i GetListingPublisherLinkArray) ToGetListingPublisherLinkArrayOutputWithContext(ctx context.Context) GetListingPublisherLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherLinkArrayOutput)
}

func (i GetListingPublisherLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisherLink] {
	return pulumix.Output[[]GetListingPublisherLink]{
		OutputState: i.ToGetListingPublisherLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPublisherLinkOutput struct{ *pulumi.OutputState }

func (GetListingPublisherLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisherLink)(nil)).Elem()
}

func (o GetListingPublisherLinkOutput) ToGetListingPublisherLinkOutput() GetListingPublisherLinkOutput {
	return o
}

func (o GetListingPublisherLinkOutput) ToGetListingPublisherLinkOutputWithContext(ctx context.Context) GetListingPublisherLinkOutput {
	return o
}

func (o GetListingPublisherLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisherLink] {
	return pulumix.Output[GetListingPublisherLink]{
		OutputState: o.OutputState,
	}
}

// The anchor tag.
func (o GetListingPublisherLinkOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLink) string { return v.Href }).(pulumi.StringOutput)
}

// Reference links to the previous page, next page, and other pages.
func (o GetListingPublisherLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetListingPublisherLinkArrayOutput struct{ *pulumi.OutputState }

func (GetListingPublisherLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisherLink)(nil)).Elem()
}

func (o GetListingPublisherLinkArrayOutput) ToGetListingPublisherLinkArrayOutput() GetListingPublisherLinkArrayOutput {
	return o
}

func (o GetListingPublisherLinkArrayOutput) ToGetListingPublisherLinkArrayOutputWithContext(ctx context.Context) GetListingPublisherLinkArrayOutput {
	return o
}

func (o GetListingPublisherLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisherLink] {
	return pulumix.Output[[]GetListingPublisherLink]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPublisherLinkArrayOutput) Index(i pulumi.IntInput) GetListingPublisherLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPublisherLink {
		return vs[0].([]GetListingPublisherLink)[vs[1].(int)]
	}).(GetListingPublisherLinkOutput)
}

type GetListingPublisherLogo struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingPublisherLogoInput is an input type that accepts GetListingPublisherLogoArgs and GetListingPublisherLogoOutput values.
// You can construct a concrete instance of `GetListingPublisherLogoInput` via:
//
//	GetListingPublisherLogoArgs{...}
type GetListingPublisherLogoInput interface {
	pulumi.Input

	ToGetListingPublisherLogoOutput() GetListingPublisherLogoOutput
	ToGetListingPublisherLogoOutputWithContext(context.Context) GetListingPublisherLogoOutput
}

type GetListingPublisherLogoArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingPublisherLogoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisherLogo)(nil)).Elem()
}

func (i GetListingPublisherLogoArgs) ToGetListingPublisherLogoOutput() GetListingPublisherLogoOutput {
	return i.ToGetListingPublisherLogoOutputWithContext(context.Background())
}

func (i GetListingPublisherLogoArgs) ToGetListingPublisherLogoOutputWithContext(ctx context.Context) GetListingPublisherLogoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherLogoOutput)
}

func (i GetListingPublisherLogoArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisherLogo] {
	return pulumix.Output[GetListingPublisherLogo]{
		OutputState: i.ToGetListingPublisherLogoOutputWithContext(ctx).OutputState,
	}
}

// GetListingPublisherLogoArrayInput is an input type that accepts GetListingPublisherLogoArray and GetListingPublisherLogoArrayOutput values.
// You can construct a concrete instance of `GetListingPublisherLogoArrayInput` via:
//
//	GetListingPublisherLogoArray{ GetListingPublisherLogoArgs{...} }
type GetListingPublisherLogoArrayInput interface {
	pulumi.Input

	ToGetListingPublisherLogoArrayOutput() GetListingPublisherLogoArrayOutput
	ToGetListingPublisherLogoArrayOutputWithContext(context.Context) GetListingPublisherLogoArrayOutput
}

type GetListingPublisherLogoArray []GetListingPublisherLogoInput

func (GetListingPublisherLogoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisherLogo)(nil)).Elem()
}

func (i GetListingPublisherLogoArray) ToGetListingPublisherLogoArrayOutput() GetListingPublisherLogoArrayOutput {
	return i.ToGetListingPublisherLogoArrayOutputWithContext(context.Background())
}

func (i GetListingPublisherLogoArray) ToGetListingPublisherLogoArrayOutputWithContext(ctx context.Context) GetListingPublisherLogoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingPublisherLogoArrayOutput)
}

func (i GetListingPublisherLogoArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisherLogo] {
	return pulumix.Output[[]GetListingPublisherLogo]{
		OutputState: i.ToGetListingPublisherLogoArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingPublisherLogoOutput struct{ *pulumi.OutputState }

func (GetListingPublisherLogoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingPublisherLogo)(nil)).Elem()
}

func (o GetListingPublisherLogoOutput) ToGetListingPublisherLogoOutput() GetListingPublisherLogoOutput {
	return o
}

func (o GetListingPublisherLogoOutput) ToGetListingPublisherLogoOutputWithContext(ctx context.Context) GetListingPublisherLogoOutput {
	return o
}

func (o GetListingPublisherLogoOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingPublisherLogo] {
	return pulumix.Output[GetListingPublisherLogo]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingPublisherLogoOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLogo) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingPublisherLogoOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLogo) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingPublisherLogoOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLogo) string { return v.MimeType }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingPublisherLogoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingPublisherLogo) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingPublisherLogoArrayOutput struct{ *pulumi.OutputState }

func (GetListingPublisherLogoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingPublisherLogo)(nil)).Elem()
}

func (o GetListingPublisherLogoArrayOutput) ToGetListingPublisherLogoArrayOutput() GetListingPublisherLogoArrayOutput {
	return o
}

func (o GetListingPublisherLogoArrayOutput) ToGetListingPublisherLogoArrayOutputWithContext(ctx context.Context) GetListingPublisherLogoArrayOutput {
	return o
}

func (o GetListingPublisherLogoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingPublisherLogo] {
	return pulumix.Output[[]GetListingPublisherLogo]{
		OutputState: o.OutputState,
	}
}

func (o GetListingPublisherLogoArrayOutput) Index(i pulumi.IntInput) GetListingPublisherLogoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingPublisherLogo {
		return vs[0].([]GetListingPublisherLogo)[vs[1].(int)]
	}).(GetListingPublisherLogoOutput)
}

type GetListingRegion struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Countries in the region.
	Countries []GetListingRegionCountry `pulumi:"countries"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingRegionInput is an input type that accepts GetListingRegionArgs and GetListingRegionOutput values.
// You can construct a concrete instance of `GetListingRegionInput` via:
//
//	GetListingRegionArgs{...}
type GetListingRegionInput interface {
	pulumi.Input

	ToGetListingRegionOutput() GetListingRegionOutput
	ToGetListingRegionOutputWithContext(context.Context) GetListingRegionOutput
}

type GetListingRegionArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Countries in the region.
	Countries GetListingRegionCountryArrayInput `pulumi:"countries"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingRegion)(nil)).Elem()
}

func (i GetListingRegionArgs) ToGetListingRegionOutput() GetListingRegionOutput {
	return i.ToGetListingRegionOutputWithContext(context.Background())
}

func (i GetListingRegionArgs) ToGetListingRegionOutputWithContext(ctx context.Context) GetListingRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingRegionOutput)
}

func (i GetListingRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingRegion] {
	return pulumix.Output[GetListingRegion]{
		OutputState: i.ToGetListingRegionOutputWithContext(ctx).OutputState,
	}
}

// GetListingRegionArrayInput is an input type that accepts GetListingRegionArray and GetListingRegionArrayOutput values.
// You can construct a concrete instance of `GetListingRegionArrayInput` via:
//
//	GetListingRegionArray{ GetListingRegionArgs{...} }
type GetListingRegionArrayInput interface {
	pulumi.Input

	ToGetListingRegionArrayOutput() GetListingRegionArrayOutput
	ToGetListingRegionArrayOutputWithContext(context.Context) GetListingRegionArrayOutput
}

type GetListingRegionArray []GetListingRegionInput

func (GetListingRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingRegion)(nil)).Elem()
}

func (i GetListingRegionArray) ToGetListingRegionArrayOutput() GetListingRegionArrayOutput {
	return i.ToGetListingRegionArrayOutputWithContext(context.Background())
}

func (i GetListingRegionArray) ToGetListingRegionArrayOutputWithContext(ctx context.Context) GetListingRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingRegionArrayOutput)
}

func (i GetListingRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingRegion] {
	return pulumix.Output[[]GetListingRegion]{
		OutputState: i.ToGetListingRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingRegionOutput struct{ *pulumi.OutputState }

func (GetListingRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingRegion)(nil)).Elem()
}

func (o GetListingRegionOutput) ToGetListingRegionOutput() GetListingRegionOutput {
	return o
}

func (o GetListingRegionOutput) ToGetListingRegionOutputWithContext(ctx context.Context) GetListingRegionOutput {
	return o
}

func (o GetListingRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingRegion] {
	return pulumix.Output[GetListingRegion]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingRegionOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingRegion) string { return v.Code }).(pulumi.StringOutput)
}

// Countries in the region.
func (o GetListingRegionOutput) Countries() GetListingRegionCountryArrayOutput {
	return o.ApplyT(func(v GetListingRegion) []GetListingRegionCountry { return v.Countries }).(GetListingRegionCountryArrayOutput)
}

// Text that describes the resource.
func (o GetListingRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingRegionArrayOutput struct{ *pulumi.OutputState }

func (GetListingRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingRegion)(nil)).Elem()
}

func (o GetListingRegionArrayOutput) ToGetListingRegionArrayOutput() GetListingRegionArrayOutput {
	return o
}

func (o GetListingRegionArrayOutput) ToGetListingRegionArrayOutputWithContext(ctx context.Context) GetListingRegionArrayOutput {
	return o
}

func (o GetListingRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingRegion] {
	return pulumix.Output[[]GetListingRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetListingRegionArrayOutput) Index(i pulumi.IntInput) GetListingRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingRegion {
		return vs[0].([]GetListingRegion)[vs[1].(int)]
	}).(GetListingRegionOutput)
}

type GetListingRegionCountry struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingRegionCountryInput is an input type that accepts GetListingRegionCountryArgs and GetListingRegionCountryOutput values.
// You can construct a concrete instance of `GetListingRegionCountryInput` via:
//
//	GetListingRegionCountryArgs{...}
type GetListingRegionCountryInput interface {
	pulumi.Input

	ToGetListingRegionCountryOutput() GetListingRegionCountryOutput
	ToGetListingRegionCountryOutputWithContext(context.Context) GetListingRegionCountryOutput
}

type GetListingRegionCountryArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingRegionCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingRegionCountry)(nil)).Elem()
}

func (i GetListingRegionCountryArgs) ToGetListingRegionCountryOutput() GetListingRegionCountryOutput {
	return i.ToGetListingRegionCountryOutputWithContext(context.Background())
}

func (i GetListingRegionCountryArgs) ToGetListingRegionCountryOutputWithContext(ctx context.Context) GetListingRegionCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingRegionCountryOutput)
}

func (i GetListingRegionCountryArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingRegionCountry] {
	return pulumix.Output[GetListingRegionCountry]{
		OutputState: i.ToGetListingRegionCountryOutputWithContext(ctx).OutputState,
	}
}

// GetListingRegionCountryArrayInput is an input type that accepts GetListingRegionCountryArray and GetListingRegionCountryArrayOutput values.
// You can construct a concrete instance of `GetListingRegionCountryArrayInput` via:
//
//	GetListingRegionCountryArray{ GetListingRegionCountryArgs{...} }
type GetListingRegionCountryArrayInput interface {
	pulumi.Input

	ToGetListingRegionCountryArrayOutput() GetListingRegionCountryArrayOutput
	ToGetListingRegionCountryArrayOutputWithContext(context.Context) GetListingRegionCountryArrayOutput
}

type GetListingRegionCountryArray []GetListingRegionCountryInput

func (GetListingRegionCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingRegionCountry)(nil)).Elem()
}

func (i GetListingRegionCountryArray) ToGetListingRegionCountryArrayOutput() GetListingRegionCountryArrayOutput {
	return i.ToGetListingRegionCountryArrayOutputWithContext(context.Background())
}

func (i GetListingRegionCountryArray) ToGetListingRegionCountryArrayOutputWithContext(ctx context.Context) GetListingRegionCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingRegionCountryArrayOutput)
}

func (i GetListingRegionCountryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingRegionCountry] {
	return pulumix.Output[[]GetListingRegionCountry]{
		OutputState: i.ToGetListingRegionCountryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingRegionCountryOutput struct{ *pulumi.OutputState }

func (GetListingRegionCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingRegionCountry)(nil)).Elem()
}

func (o GetListingRegionCountryOutput) ToGetListingRegionCountryOutput() GetListingRegionCountryOutput {
	return o
}

func (o GetListingRegionCountryOutput) ToGetListingRegionCountryOutputWithContext(ctx context.Context) GetListingRegionCountryOutput {
	return o
}

func (o GetListingRegionCountryOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingRegionCountry] {
	return pulumix.Output[GetListingRegionCountry]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingRegionCountryOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingRegionCountry) string { return v.Code }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingRegionCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingRegionCountry) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingRegionCountryArrayOutput struct{ *pulumi.OutputState }

func (GetListingRegionCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingRegionCountry)(nil)).Elem()
}

func (o GetListingRegionCountryArrayOutput) ToGetListingRegionCountryArrayOutput() GetListingRegionCountryArrayOutput {
	return o
}

func (o GetListingRegionCountryArrayOutput) ToGetListingRegionCountryArrayOutputWithContext(ctx context.Context) GetListingRegionCountryArrayOutput {
	return o
}

func (o GetListingRegionCountryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingRegionCountry] {
	return pulumix.Output[[]GetListingRegionCountry]{
		OutputState: o.OutputState,
	}
}

func (o GetListingRegionCountryArrayOutput) Index(i pulumi.IntInput) GetListingRegionCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingRegionCountry {
		return vs[0].([]GetListingRegionCountry)[vs[1].(int)]
	}).(GetListingRegionCountryOutput)
}

type GetListingScreenshot struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// A description of the screenshot.
	Description string `pulumi:"description"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingScreenshotInput is an input type that accepts GetListingScreenshotArgs and GetListingScreenshotOutput values.
// You can construct a concrete instance of `GetListingScreenshotInput` via:
//
//	GetListingScreenshotArgs{...}
type GetListingScreenshotInput interface {
	pulumi.Input

	ToGetListingScreenshotOutput() GetListingScreenshotOutput
	ToGetListingScreenshotOutputWithContext(context.Context) GetListingScreenshotOutput
}

type GetListingScreenshotArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// A description of the screenshot.
	Description pulumi.StringInput `pulumi:"description"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingScreenshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingScreenshot)(nil)).Elem()
}

func (i GetListingScreenshotArgs) ToGetListingScreenshotOutput() GetListingScreenshotOutput {
	return i.ToGetListingScreenshotOutputWithContext(context.Background())
}

func (i GetListingScreenshotArgs) ToGetListingScreenshotOutputWithContext(ctx context.Context) GetListingScreenshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingScreenshotOutput)
}

func (i GetListingScreenshotArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingScreenshot] {
	return pulumix.Output[GetListingScreenshot]{
		OutputState: i.ToGetListingScreenshotOutputWithContext(ctx).OutputState,
	}
}

// GetListingScreenshotArrayInput is an input type that accepts GetListingScreenshotArray and GetListingScreenshotArrayOutput values.
// You can construct a concrete instance of `GetListingScreenshotArrayInput` via:
//
//	GetListingScreenshotArray{ GetListingScreenshotArgs{...} }
type GetListingScreenshotArrayInput interface {
	pulumi.Input

	ToGetListingScreenshotArrayOutput() GetListingScreenshotArrayOutput
	ToGetListingScreenshotArrayOutputWithContext(context.Context) GetListingScreenshotArrayOutput
}

type GetListingScreenshotArray []GetListingScreenshotInput

func (GetListingScreenshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingScreenshot)(nil)).Elem()
}

func (i GetListingScreenshotArray) ToGetListingScreenshotArrayOutput() GetListingScreenshotArrayOutput {
	return i.ToGetListingScreenshotArrayOutputWithContext(context.Background())
}

func (i GetListingScreenshotArray) ToGetListingScreenshotArrayOutputWithContext(ctx context.Context) GetListingScreenshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingScreenshotArrayOutput)
}

func (i GetListingScreenshotArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingScreenshot] {
	return pulumix.Output[[]GetListingScreenshot]{
		OutputState: i.ToGetListingScreenshotArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingScreenshotOutput struct{ *pulumi.OutputState }

func (GetListingScreenshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingScreenshot)(nil)).Elem()
}

func (o GetListingScreenshotOutput) ToGetListingScreenshotOutput() GetListingScreenshotOutput {
	return o
}

func (o GetListingScreenshotOutput) ToGetListingScreenshotOutputWithContext(ctx context.Context) GetListingScreenshotOutput {
	return o
}

func (o GetListingScreenshotOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingScreenshot] {
	return pulumix.Output[GetListingScreenshot]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingScreenshotOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingScreenshot) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// A description of the screenshot.
func (o GetListingScreenshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingScreenshot) string { return v.Description }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingScreenshotOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingScreenshot) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingScreenshotOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingScreenshot) string { return v.MimeType }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingScreenshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingScreenshot) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingScreenshotArrayOutput struct{ *pulumi.OutputState }

func (GetListingScreenshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingScreenshot)(nil)).Elem()
}

func (o GetListingScreenshotArrayOutput) ToGetListingScreenshotArrayOutput() GetListingScreenshotArrayOutput {
	return o
}

func (o GetListingScreenshotArrayOutput) ToGetListingScreenshotArrayOutputWithContext(ctx context.Context) GetListingScreenshotArrayOutput {
	return o
}

func (o GetListingScreenshotArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingScreenshot] {
	return pulumix.Output[[]GetListingScreenshot]{
		OutputState: o.OutputState,
	}
}

func (o GetListingScreenshotArrayOutput) Index(i pulumi.IntInput) GetListingScreenshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingScreenshot {
		return vs[0].([]GetListingScreenshot)[vs[1].(int)]
	}).(GetListingScreenshotOutput)
}

type GetListingSupportContact struct {
	// The email of the contact.
	Email string `pulumi:"email"`
	// Text that describes the resource.
	Name string `pulumi:"name"`
	// The phone number of the contact.
	Phone string `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject string `pulumi:"subject"`
}

// GetListingSupportContactInput is an input type that accepts GetListingSupportContactArgs and GetListingSupportContactOutput values.
// You can construct a concrete instance of `GetListingSupportContactInput` via:
//
//	GetListingSupportContactArgs{...}
type GetListingSupportContactInput interface {
	pulumi.Input

	ToGetListingSupportContactOutput() GetListingSupportContactOutput
	ToGetListingSupportContactOutputWithContext(context.Context) GetListingSupportContactOutput
}

type GetListingSupportContactArgs struct {
	// The email of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the contact.
	Phone pulumi.StringInput `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (GetListingSupportContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportContact)(nil)).Elem()
}

func (i GetListingSupportContactArgs) ToGetListingSupportContactOutput() GetListingSupportContactOutput {
	return i.ToGetListingSupportContactOutputWithContext(context.Background())
}

func (i GetListingSupportContactArgs) ToGetListingSupportContactOutputWithContext(ctx context.Context) GetListingSupportContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportContactOutput)
}

func (i GetListingSupportContactArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportContact] {
	return pulumix.Output[GetListingSupportContact]{
		OutputState: i.ToGetListingSupportContactOutputWithContext(ctx).OutputState,
	}
}

// GetListingSupportContactArrayInput is an input type that accepts GetListingSupportContactArray and GetListingSupportContactArrayOutput values.
// You can construct a concrete instance of `GetListingSupportContactArrayInput` via:
//
//	GetListingSupportContactArray{ GetListingSupportContactArgs{...} }
type GetListingSupportContactArrayInput interface {
	pulumi.Input

	ToGetListingSupportContactArrayOutput() GetListingSupportContactArrayOutput
	ToGetListingSupportContactArrayOutputWithContext(context.Context) GetListingSupportContactArrayOutput
}

type GetListingSupportContactArray []GetListingSupportContactInput

func (GetListingSupportContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportContact)(nil)).Elem()
}

func (i GetListingSupportContactArray) ToGetListingSupportContactArrayOutput() GetListingSupportContactArrayOutput {
	return i.ToGetListingSupportContactArrayOutputWithContext(context.Background())
}

func (i GetListingSupportContactArray) ToGetListingSupportContactArrayOutputWithContext(ctx context.Context) GetListingSupportContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportContactArrayOutput)
}

func (i GetListingSupportContactArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportContact] {
	return pulumix.Output[[]GetListingSupportContact]{
		OutputState: i.ToGetListingSupportContactArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingSupportContactOutput struct{ *pulumi.OutputState }

func (GetListingSupportContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportContact)(nil)).Elem()
}

func (o GetListingSupportContactOutput) ToGetListingSupportContactOutput() GetListingSupportContactOutput {
	return o
}

func (o GetListingSupportContactOutput) ToGetListingSupportContactOutputWithContext(ctx context.Context) GetListingSupportContactOutput {
	return o
}

func (o GetListingSupportContactOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportContact] {
	return pulumix.Output[GetListingSupportContact]{
		OutputState: o.OutputState,
	}
}

// The email of the contact.
func (o GetListingSupportContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportContact) string { return v.Email }).(pulumi.StringOutput)
}

// Text that describes the resource.
func (o GetListingSupportContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportContact) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the contact.
func (o GetListingSupportContactOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportContact) string { return v.Phone }).(pulumi.StringOutput)
}

// The email subject line to use when contacting support.
func (o GetListingSupportContactOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportContact) string { return v.Subject }).(pulumi.StringOutput)
}

type GetListingSupportContactArrayOutput struct{ *pulumi.OutputState }

func (GetListingSupportContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportContact)(nil)).Elem()
}

func (o GetListingSupportContactArrayOutput) ToGetListingSupportContactArrayOutput() GetListingSupportContactArrayOutput {
	return o
}

func (o GetListingSupportContactArrayOutput) ToGetListingSupportContactArrayOutputWithContext(ctx context.Context) GetListingSupportContactArrayOutput {
	return o
}

func (o GetListingSupportContactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportContact] {
	return pulumix.Output[[]GetListingSupportContact]{
		OutputState: o.OutputState,
	}
}

func (o GetListingSupportContactArrayOutput) Index(i pulumi.IntInput) GetListingSupportContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingSupportContact {
		return vs[0].([]GetListingSupportContact)[vs[1].(int)]
	}).(GetListingSupportContactOutput)
}

type GetListingSupportLink struct {
	// Text that describes the resource.
	Name string `pulumi:"name"`
	// The URL of the resource.
	Url string `pulumi:"url"`
}

// GetListingSupportLinkInput is an input type that accepts GetListingSupportLinkArgs and GetListingSupportLinkOutput values.
// You can construct a concrete instance of `GetListingSupportLinkInput` via:
//
//	GetListingSupportLinkArgs{...}
type GetListingSupportLinkInput interface {
	pulumi.Input

	ToGetListingSupportLinkOutput() GetListingSupportLinkOutput
	ToGetListingSupportLinkOutputWithContext(context.Context) GetListingSupportLinkOutput
}

type GetListingSupportLinkArgs struct {
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the resource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListingSupportLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportLink)(nil)).Elem()
}

func (i GetListingSupportLinkArgs) ToGetListingSupportLinkOutput() GetListingSupportLinkOutput {
	return i.ToGetListingSupportLinkOutputWithContext(context.Background())
}

func (i GetListingSupportLinkArgs) ToGetListingSupportLinkOutputWithContext(ctx context.Context) GetListingSupportLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportLinkOutput)
}

func (i GetListingSupportLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportLink] {
	return pulumix.Output[GetListingSupportLink]{
		OutputState: i.ToGetListingSupportLinkOutputWithContext(ctx).OutputState,
	}
}

// GetListingSupportLinkArrayInput is an input type that accepts GetListingSupportLinkArray and GetListingSupportLinkArrayOutput values.
// You can construct a concrete instance of `GetListingSupportLinkArrayInput` via:
//
//	GetListingSupportLinkArray{ GetListingSupportLinkArgs{...} }
type GetListingSupportLinkArrayInput interface {
	pulumi.Input

	ToGetListingSupportLinkArrayOutput() GetListingSupportLinkArrayOutput
	ToGetListingSupportLinkArrayOutputWithContext(context.Context) GetListingSupportLinkArrayOutput
}

type GetListingSupportLinkArray []GetListingSupportLinkInput

func (GetListingSupportLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportLink)(nil)).Elem()
}

func (i GetListingSupportLinkArray) ToGetListingSupportLinkArrayOutput() GetListingSupportLinkArrayOutput {
	return i.ToGetListingSupportLinkArrayOutputWithContext(context.Background())
}

func (i GetListingSupportLinkArray) ToGetListingSupportLinkArrayOutputWithContext(ctx context.Context) GetListingSupportLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportLinkArrayOutput)
}

func (i GetListingSupportLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportLink] {
	return pulumix.Output[[]GetListingSupportLink]{
		OutputState: i.ToGetListingSupportLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingSupportLinkOutput struct{ *pulumi.OutputState }

func (GetListingSupportLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportLink)(nil)).Elem()
}

func (o GetListingSupportLinkOutput) ToGetListingSupportLinkOutput() GetListingSupportLinkOutput {
	return o
}

func (o GetListingSupportLinkOutput) ToGetListingSupportLinkOutputWithContext(ctx context.Context) GetListingSupportLinkOutput {
	return o
}

func (o GetListingSupportLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportLink] {
	return pulumix.Output[GetListingSupportLink]{
		OutputState: o.OutputState,
	}
}

// Text that describes the resource.
func (o GetListingSupportLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportLink) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the resource.
func (o GetListingSupportLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetListingSupportLinkArrayOutput struct{ *pulumi.OutputState }

func (GetListingSupportLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportLink)(nil)).Elem()
}

func (o GetListingSupportLinkArrayOutput) ToGetListingSupportLinkArrayOutput() GetListingSupportLinkArrayOutput {
	return o
}

func (o GetListingSupportLinkArrayOutput) ToGetListingSupportLinkArrayOutputWithContext(ctx context.Context) GetListingSupportLinkArrayOutput {
	return o
}

func (o GetListingSupportLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportLink] {
	return pulumix.Output[[]GetListingSupportLink]{
		OutputState: o.OutputState,
	}
}

func (o GetListingSupportLinkArrayOutput) Index(i pulumi.IntInput) GetListingSupportLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingSupportLink {
		return vs[0].([]GetListingSupportLink)[vs[1].(int)]
	}).(GetListingSupportLinkOutput)
}

type GetListingSupportedOperatingSystem struct {
	// Text that describes the resource.
	Name string `pulumi:"name"`
}

// GetListingSupportedOperatingSystemInput is an input type that accepts GetListingSupportedOperatingSystemArgs and GetListingSupportedOperatingSystemOutput values.
// You can construct a concrete instance of `GetListingSupportedOperatingSystemInput` via:
//
//	GetListingSupportedOperatingSystemArgs{...}
type GetListingSupportedOperatingSystemInput interface {
	pulumi.Input

	ToGetListingSupportedOperatingSystemOutput() GetListingSupportedOperatingSystemOutput
	ToGetListingSupportedOperatingSystemOutputWithContext(context.Context) GetListingSupportedOperatingSystemOutput
}

type GetListingSupportedOperatingSystemArgs struct {
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingSupportedOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportedOperatingSystem)(nil)).Elem()
}

func (i GetListingSupportedOperatingSystemArgs) ToGetListingSupportedOperatingSystemOutput() GetListingSupportedOperatingSystemOutput {
	return i.ToGetListingSupportedOperatingSystemOutputWithContext(context.Background())
}

func (i GetListingSupportedOperatingSystemArgs) ToGetListingSupportedOperatingSystemOutputWithContext(ctx context.Context) GetListingSupportedOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportedOperatingSystemOutput)
}

func (i GetListingSupportedOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportedOperatingSystem] {
	return pulumix.Output[GetListingSupportedOperatingSystem]{
		OutputState: i.ToGetListingSupportedOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetListingSupportedOperatingSystemArrayInput is an input type that accepts GetListingSupportedOperatingSystemArray and GetListingSupportedOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetListingSupportedOperatingSystemArrayInput` via:
//
//	GetListingSupportedOperatingSystemArray{ GetListingSupportedOperatingSystemArgs{...} }
type GetListingSupportedOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetListingSupportedOperatingSystemArrayOutput() GetListingSupportedOperatingSystemArrayOutput
	ToGetListingSupportedOperatingSystemArrayOutputWithContext(context.Context) GetListingSupportedOperatingSystemArrayOutput
}

type GetListingSupportedOperatingSystemArray []GetListingSupportedOperatingSystemInput

func (GetListingSupportedOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportedOperatingSystem)(nil)).Elem()
}

func (i GetListingSupportedOperatingSystemArray) ToGetListingSupportedOperatingSystemArrayOutput() GetListingSupportedOperatingSystemArrayOutput {
	return i.ToGetListingSupportedOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetListingSupportedOperatingSystemArray) ToGetListingSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingSupportedOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingSupportedOperatingSystemArrayOutput)
}

func (i GetListingSupportedOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportedOperatingSystem] {
	return pulumix.Output[[]GetListingSupportedOperatingSystem]{
		OutputState: i.ToGetListingSupportedOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingSupportedOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetListingSupportedOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingSupportedOperatingSystem)(nil)).Elem()
}

func (o GetListingSupportedOperatingSystemOutput) ToGetListingSupportedOperatingSystemOutput() GetListingSupportedOperatingSystemOutput {
	return o
}

func (o GetListingSupportedOperatingSystemOutput) ToGetListingSupportedOperatingSystemOutputWithContext(ctx context.Context) GetListingSupportedOperatingSystemOutput {
	return o
}

func (o GetListingSupportedOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingSupportedOperatingSystem] {
	return pulumix.Output[GetListingSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// Text that describes the resource.
func (o GetListingSupportedOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingSupportedOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingSupportedOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetListingSupportedOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingSupportedOperatingSystem)(nil)).Elem()
}

func (o GetListingSupportedOperatingSystemArrayOutput) ToGetListingSupportedOperatingSystemArrayOutput() GetListingSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetListingSupportedOperatingSystemArrayOutput) ToGetListingSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetListingSupportedOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingSupportedOperatingSystem] {
	return pulumix.Output[[]GetListingSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetListingSupportedOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetListingSupportedOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingSupportedOperatingSystem {
		return vs[0].([]GetListingSupportedOperatingSystem)[vs[1].(int)]
	}).(GetListingSupportedOperatingSystemOutput)
}

type GetListingTaxesFilter struct {
	// Name of the tax code.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetListingTaxesFilterInput is an input type that accepts GetListingTaxesFilterArgs and GetListingTaxesFilterOutput values.
// You can construct a concrete instance of `GetListingTaxesFilterInput` via:
//
//	GetListingTaxesFilterArgs{...}
type GetListingTaxesFilterInput interface {
	pulumi.Input

	ToGetListingTaxesFilterOutput() GetListingTaxesFilterOutput
	ToGetListingTaxesFilterOutputWithContext(context.Context) GetListingTaxesFilterOutput
}

type GetListingTaxesFilterArgs struct {
	// Name of the tax code.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetListingTaxesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingTaxesFilter)(nil)).Elem()
}

func (i GetListingTaxesFilterArgs) ToGetListingTaxesFilterOutput() GetListingTaxesFilterOutput {
	return i.ToGetListingTaxesFilterOutputWithContext(context.Background())
}

func (i GetListingTaxesFilterArgs) ToGetListingTaxesFilterOutputWithContext(ctx context.Context) GetListingTaxesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingTaxesFilterOutput)
}

func (i GetListingTaxesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingTaxesFilter] {
	return pulumix.Output[GetListingTaxesFilter]{
		OutputState: i.ToGetListingTaxesFilterOutputWithContext(ctx).OutputState,
	}
}

// GetListingTaxesFilterArrayInput is an input type that accepts GetListingTaxesFilterArray and GetListingTaxesFilterArrayOutput values.
// You can construct a concrete instance of `GetListingTaxesFilterArrayInput` via:
//
//	GetListingTaxesFilterArray{ GetListingTaxesFilterArgs{...} }
type GetListingTaxesFilterArrayInput interface {
	pulumi.Input

	ToGetListingTaxesFilterArrayOutput() GetListingTaxesFilterArrayOutput
	ToGetListingTaxesFilterArrayOutputWithContext(context.Context) GetListingTaxesFilterArrayOutput
}

type GetListingTaxesFilterArray []GetListingTaxesFilterInput

func (GetListingTaxesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingTaxesFilter)(nil)).Elem()
}

func (i GetListingTaxesFilterArray) ToGetListingTaxesFilterArrayOutput() GetListingTaxesFilterArrayOutput {
	return i.ToGetListingTaxesFilterArrayOutputWithContext(context.Background())
}

func (i GetListingTaxesFilterArray) ToGetListingTaxesFilterArrayOutputWithContext(ctx context.Context) GetListingTaxesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingTaxesFilterArrayOutput)
}

func (i GetListingTaxesFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingTaxesFilter] {
	return pulumix.Output[[]GetListingTaxesFilter]{
		OutputState: i.ToGetListingTaxesFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingTaxesFilterOutput struct{ *pulumi.OutputState }

func (GetListingTaxesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingTaxesFilter)(nil)).Elem()
}

func (o GetListingTaxesFilterOutput) ToGetListingTaxesFilterOutput() GetListingTaxesFilterOutput {
	return o
}

func (o GetListingTaxesFilterOutput) ToGetListingTaxesFilterOutputWithContext(ctx context.Context) GetListingTaxesFilterOutput {
	return o
}

func (o GetListingTaxesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingTaxesFilter] {
	return pulumix.Output[GetListingTaxesFilter]{
		OutputState: o.OutputState,
	}
}

// Name of the tax code.
func (o GetListingTaxesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingTaxesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetListingTaxesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetListingTaxesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetListingTaxesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingTaxesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetListingTaxesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetListingTaxesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingTaxesFilter)(nil)).Elem()
}

func (o GetListingTaxesFilterArrayOutput) ToGetListingTaxesFilterArrayOutput() GetListingTaxesFilterArrayOutput {
	return o
}

func (o GetListingTaxesFilterArrayOutput) ToGetListingTaxesFilterArrayOutputWithContext(ctx context.Context) GetListingTaxesFilterArrayOutput {
	return o
}

func (o GetListingTaxesFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingTaxesFilter] {
	return pulumix.Output[[]GetListingTaxesFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetListingTaxesFilterArrayOutput) Index(i pulumi.IntInput) GetListingTaxesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingTaxesFilter {
		return vs[0].([]GetListingTaxesFilter)[vs[1].(int)]
	}).(GetListingTaxesFilterOutput)
}

type GetListingTaxesTax struct {
	// Unique code for the tax.
	Code string `pulumi:"code"`
	// Country, which imposes the tax.
	Country string `pulumi:"country"`
	// Name of the tax code.
	Name string `pulumi:"name"`
	// The URL with more details about this tax.
	Url string `pulumi:"url"`
}

// GetListingTaxesTaxInput is an input type that accepts GetListingTaxesTaxArgs and GetListingTaxesTaxOutput values.
// You can construct a concrete instance of `GetListingTaxesTaxInput` via:
//
//	GetListingTaxesTaxArgs{...}
type GetListingTaxesTaxInput interface {
	pulumi.Input

	ToGetListingTaxesTaxOutput() GetListingTaxesTaxOutput
	ToGetListingTaxesTaxOutputWithContext(context.Context) GetListingTaxesTaxOutput
}

type GetListingTaxesTaxArgs struct {
	// Unique code for the tax.
	Code pulumi.StringInput `pulumi:"code"`
	// Country, which imposes the tax.
	Country pulumi.StringInput `pulumi:"country"`
	// Name of the tax code.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL with more details about this tax.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListingTaxesTaxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingTaxesTax)(nil)).Elem()
}

func (i GetListingTaxesTaxArgs) ToGetListingTaxesTaxOutput() GetListingTaxesTaxOutput {
	return i.ToGetListingTaxesTaxOutputWithContext(context.Background())
}

func (i GetListingTaxesTaxArgs) ToGetListingTaxesTaxOutputWithContext(ctx context.Context) GetListingTaxesTaxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingTaxesTaxOutput)
}

func (i GetListingTaxesTaxArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingTaxesTax] {
	return pulumix.Output[GetListingTaxesTax]{
		OutputState: i.ToGetListingTaxesTaxOutputWithContext(ctx).OutputState,
	}
}

// GetListingTaxesTaxArrayInput is an input type that accepts GetListingTaxesTaxArray and GetListingTaxesTaxArrayOutput values.
// You can construct a concrete instance of `GetListingTaxesTaxArrayInput` via:
//
//	GetListingTaxesTaxArray{ GetListingTaxesTaxArgs{...} }
type GetListingTaxesTaxArrayInput interface {
	pulumi.Input

	ToGetListingTaxesTaxArrayOutput() GetListingTaxesTaxArrayOutput
	ToGetListingTaxesTaxArrayOutputWithContext(context.Context) GetListingTaxesTaxArrayOutput
}

type GetListingTaxesTaxArray []GetListingTaxesTaxInput

func (GetListingTaxesTaxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingTaxesTax)(nil)).Elem()
}

func (i GetListingTaxesTaxArray) ToGetListingTaxesTaxArrayOutput() GetListingTaxesTaxArrayOutput {
	return i.ToGetListingTaxesTaxArrayOutputWithContext(context.Background())
}

func (i GetListingTaxesTaxArray) ToGetListingTaxesTaxArrayOutputWithContext(ctx context.Context) GetListingTaxesTaxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingTaxesTaxArrayOutput)
}

func (i GetListingTaxesTaxArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingTaxesTax] {
	return pulumix.Output[[]GetListingTaxesTax]{
		OutputState: i.ToGetListingTaxesTaxArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingTaxesTaxOutput struct{ *pulumi.OutputState }

func (GetListingTaxesTaxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingTaxesTax)(nil)).Elem()
}

func (o GetListingTaxesTaxOutput) ToGetListingTaxesTaxOutput() GetListingTaxesTaxOutput {
	return o
}

func (o GetListingTaxesTaxOutput) ToGetListingTaxesTaxOutputWithContext(ctx context.Context) GetListingTaxesTaxOutput {
	return o
}

func (o GetListingTaxesTaxOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingTaxesTax] {
	return pulumix.Output[GetListingTaxesTax]{
		OutputState: o.OutputState,
	}
}

// Unique code for the tax.
func (o GetListingTaxesTaxOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingTaxesTax) string { return v.Code }).(pulumi.StringOutput)
}

// Country, which imposes the tax.
func (o GetListingTaxesTaxOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingTaxesTax) string { return v.Country }).(pulumi.StringOutput)
}

// Name of the tax code.
func (o GetListingTaxesTaxOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingTaxesTax) string { return v.Name }).(pulumi.StringOutput)
}

// The URL with more details about this tax.
func (o GetListingTaxesTaxOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingTaxesTax) string { return v.Url }).(pulumi.StringOutput)
}

type GetListingTaxesTaxArrayOutput struct{ *pulumi.OutputState }

func (GetListingTaxesTaxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingTaxesTax)(nil)).Elem()
}

func (o GetListingTaxesTaxArrayOutput) ToGetListingTaxesTaxArrayOutput() GetListingTaxesTaxArrayOutput {
	return o
}

func (o GetListingTaxesTaxArrayOutput) ToGetListingTaxesTaxArrayOutputWithContext(ctx context.Context) GetListingTaxesTaxArrayOutput {
	return o
}

func (o GetListingTaxesTaxArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingTaxesTax] {
	return pulumix.Output[[]GetListingTaxesTax]{
		OutputState: o.OutputState,
	}
}

func (o GetListingTaxesTaxArrayOutput) Index(i pulumi.IntInput) GetListingTaxesTaxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingTaxesTax {
		return vs[0].([]GetListingTaxesTax)[vs[1].(int)]
	}).(GetListingTaxesTaxOutput)
}

type GetListingVideo struct {
	// Text that describes the resource.
	Name string `pulumi:"name"`
	// The URL of the resource.
	Url string `pulumi:"url"`
}

// GetListingVideoInput is an input type that accepts GetListingVideoArgs and GetListingVideoOutput values.
// You can construct a concrete instance of `GetListingVideoInput` via:
//
//	GetListingVideoArgs{...}
type GetListingVideoInput interface {
	pulumi.Input

	ToGetListingVideoOutput() GetListingVideoOutput
	ToGetListingVideoOutputWithContext(context.Context) GetListingVideoOutput
}

type GetListingVideoArgs struct {
	// Text that describes the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the resource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListingVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingVideo)(nil)).Elem()
}

func (i GetListingVideoArgs) ToGetListingVideoOutput() GetListingVideoOutput {
	return i.ToGetListingVideoOutputWithContext(context.Background())
}

func (i GetListingVideoArgs) ToGetListingVideoOutputWithContext(ctx context.Context) GetListingVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingVideoOutput)
}

func (i GetListingVideoArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingVideo] {
	return pulumix.Output[GetListingVideo]{
		OutputState: i.ToGetListingVideoOutputWithContext(ctx).OutputState,
	}
}

// GetListingVideoArrayInput is an input type that accepts GetListingVideoArray and GetListingVideoArrayOutput values.
// You can construct a concrete instance of `GetListingVideoArrayInput` via:
//
//	GetListingVideoArray{ GetListingVideoArgs{...} }
type GetListingVideoArrayInput interface {
	pulumi.Input

	ToGetListingVideoArrayOutput() GetListingVideoArrayOutput
	ToGetListingVideoArrayOutputWithContext(context.Context) GetListingVideoArrayOutput
}

type GetListingVideoArray []GetListingVideoInput

func (GetListingVideoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingVideo)(nil)).Elem()
}

func (i GetListingVideoArray) ToGetListingVideoArrayOutput() GetListingVideoArrayOutput {
	return i.ToGetListingVideoArrayOutputWithContext(context.Background())
}

func (i GetListingVideoArray) ToGetListingVideoArrayOutputWithContext(ctx context.Context) GetListingVideoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingVideoArrayOutput)
}

func (i GetListingVideoArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingVideo] {
	return pulumix.Output[[]GetListingVideo]{
		OutputState: i.ToGetListingVideoArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingVideoOutput struct{ *pulumi.OutputState }

func (GetListingVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingVideo)(nil)).Elem()
}

func (o GetListingVideoOutput) ToGetListingVideoOutput() GetListingVideoOutput {
	return o
}

func (o GetListingVideoOutput) ToGetListingVideoOutputWithContext(ctx context.Context) GetListingVideoOutput {
	return o
}

func (o GetListingVideoOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingVideo] {
	return pulumix.Output[GetListingVideo]{
		OutputState: o.OutputState,
	}
}

// Text that describes the resource.
func (o GetListingVideoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingVideo) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the resource.
func (o GetListingVideoOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingVideo) string { return v.Url }).(pulumi.StringOutput)
}

type GetListingVideoArrayOutput struct{ *pulumi.OutputState }

func (GetListingVideoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingVideo)(nil)).Elem()
}

func (o GetListingVideoArrayOutput) ToGetListingVideoArrayOutput() GetListingVideoArrayOutput {
	return o
}

func (o GetListingVideoArrayOutput) ToGetListingVideoArrayOutputWithContext(ctx context.Context) GetListingVideoArrayOutput {
	return o
}

func (o GetListingVideoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingVideo] {
	return pulumix.Output[[]GetListingVideo]{
		OutputState: o.OutputState,
	}
}

func (o GetListingVideoArrayOutput) Index(i pulumi.IntInput) GetListingVideoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingVideo {
		return vs[0].([]GetListingVideo)[vs[1].(int)]
	}).(GetListingVideoOutput)
}

type GetListingsFilter struct {
	// The name of the listing.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetListingsFilterInput is an input type that accepts GetListingsFilterArgs and GetListingsFilterOutput values.
// You can construct a concrete instance of `GetListingsFilterInput` via:
//
//	GetListingsFilterArgs{...}
type GetListingsFilterInput interface {
	pulumi.Input

	ToGetListingsFilterOutput() GetListingsFilterOutput
	ToGetListingsFilterOutputWithContext(context.Context) GetListingsFilterOutput
}

type GetListingsFilterArgs struct {
	// The name of the listing.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetListingsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsFilter)(nil)).Elem()
}

func (i GetListingsFilterArgs) ToGetListingsFilterOutput() GetListingsFilterOutput {
	return i.ToGetListingsFilterOutputWithContext(context.Background())
}

func (i GetListingsFilterArgs) ToGetListingsFilterOutputWithContext(ctx context.Context) GetListingsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsFilterOutput)
}

func (i GetListingsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsFilter] {
	return pulumix.Output[GetListingsFilter]{
		OutputState: i.ToGetListingsFilterOutputWithContext(ctx).OutputState,
	}
}

// GetListingsFilterArrayInput is an input type that accepts GetListingsFilterArray and GetListingsFilterArrayOutput values.
// You can construct a concrete instance of `GetListingsFilterArrayInput` via:
//
//	GetListingsFilterArray{ GetListingsFilterArgs{...} }
type GetListingsFilterArrayInput interface {
	pulumi.Input

	ToGetListingsFilterArrayOutput() GetListingsFilterArrayOutput
	ToGetListingsFilterArrayOutputWithContext(context.Context) GetListingsFilterArrayOutput
}

type GetListingsFilterArray []GetListingsFilterInput

func (GetListingsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsFilter)(nil)).Elem()
}

func (i GetListingsFilterArray) ToGetListingsFilterArrayOutput() GetListingsFilterArrayOutput {
	return i.ToGetListingsFilterArrayOutputWithContext(context.Background())
}

func (i GetListingsFilterArray) ToGetListingsFilterArrayOutputWithContext(ctx context.Context) GetListingsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsFilterArrayOutput)
}

func (i GetListingsFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsFilter] {
	return pulumix.Output[[]GetListingsFilter]{
		OutputState: i.ToGetListingsFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsFilterOutput struct{ *pulumi.OutputState }

func (GetListingsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsFilter)(nil)).Elem()
}

func (o GetListingsFilterOutput) ToGetListingsFilterOutput() GetListingsFilterOutput {
	return o
}

func (o GetListingsFilterOutput) ToGetListingsFilterOutputWithContext(ctx context.Context) GetListingsFilterOutput {
	return o
}

func (o GetListingsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsFilter] {
	return pulumix.Output[GetListingsFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the listing.
func (o GetListingsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetListingsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetListingsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetListingsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetListingsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetListingsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsFilter)(nil)).Elem()
}

func (o GetListingsFilterArrayOutput) ToGetListingsFilterArrayOutput() GetListingsFilterArrayOutput {
	return o
}

func (o GetListingsFilterArrayOutput) ToGetListingsFilterArrayOutputWithContext(ctx context.Context) GetListingsFilterArrayOutput {
	return o
}

func (o GetListingsFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsFilter] {
	return pulumix.Output[[]GetListingsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsFilterArrayOutput) Index(i pulumi.IntInput) GetListingsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsFilter {
		return vs[0].([]GetListingsFilter)[vs[1].(int)]
	}).(GetListingsFilterOutput)
}

type GetListingsListing struct {
	// The model for upload data for images and icons.
	Banners []GetListingsListingBanner `pulumi:"banners"`
	// Product categories that the listing belongs to.
	Categories []string `pulumi:"categories"`
	// The list of compatible architectures supported by the listing
	CompatibleArchitectures []string `pulumi:"compatibleArchitectures"`
	// The default package version.
	DefaultPackageVersion string `pulumi:"defaultPackageVersion"`
	// Links to additional documentation provided by the publisher specifically for the listing.
	DocumentationLinks []GetListingsListingDocumentationLink `pulumi:"documentationLinks"`
	// The model for upload data for images and icons.
	Icons []GetListingsListingIcon `pulumi:"icons"`
	// The unique identifier for the publisher.
	Id string `pulumi:"id"`
	// Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
	IsFeatured bool `pulumi:"isFeatured"`
	// The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
	ListingType string `pulumi:"listingType"`
	// The name of the listing.
	Name string `pulumi:"name"`
	// A filter to return only packages that match the given package type exactly.
	PackageType  string   `pulumi:"packageType"`
	PricingTypes []string `pulumi:"pricingTypes"`
	// Summary details about the publisher of the listing.
	Publishers []GetListingsListingPublisher `pulumi:"publishers"`
	// The regions where the listing is eligible to be deployed.
	Regions []GetListingsListingRegion `pulumi:"regions"`
	// A short description of the listing.
	ShortDescription string `pulumi:"shortDescription"`
	// The list of operating systems supported by the listing.
	SupportedOperatingSystems []GetListingsListingSupportedOperatingSystem `pulumi:"supportedOperatingSystems"`
}

// GetListingsListingInput is an input type that accepts GetListingsListingArgs and GetListingsListingOutput values.
// You can construct a concrete instance of `GetListingsListingInput` via:
//
//	GetListingsListingArgs{...}
type GetListingsListingInput interface {
	pulumi.Input

	ToGetListingsListingOutput() GetListingsListingOutput
	ToGetListingsListingOutputWithContext(context.Context) GetListingsListingOutput
}

type GetListingsListingArgs struct {
	// The model for upload data for images and icons.
	Banners GetListingsListingBannerArrayInput `pulumi:"banners"`
	// Product categories that the listing belongs to.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// The list of compatible architectures supported by the listing
	CompatibleArchitectures pulumi.StringArrayInput `pulumi:"compatibleArchitectures"`
	// The default package version.
	DefaultPackageVersion pulumi.StringInput `pulumi:"defaultPackageVersion"`
	// Links to additional documentation provided by the publisher specifically for the listing.
	DocumentationLinks GetListingsListingDocumentationLinkArrayInput `pulumi:"documentationLinks"`
	// The model for upload data for images and icons.
	Icons GetListingsListingIconArrayInput `pulumi:"icons"`
	// The unique identifier for the publisher.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
	IsFeatured pulumi.BoolInput `pulumi:"isFeatured"`
	// The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
	ListingType pulumi.StringInput `pulumi:"listingType"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
	// A filter to return only packages that match the given package type exactly.
	PackageType  pulumi.StringInput      `pulumi:"packageType"`
	PricingTypes pulumi.StringArrayInput `pulumi:"pricingTypes"`
	// Summary details about the publisher of the listing.
	Publishers GetListingsListingPublisherArrayInput `pulumi:"publishers"`
	// The regions where the listing is eligible to be deployed.
	Regions GetListingsListingRegionArrayInput `pulumi:"regions"`
	// A short description of the listing.
	ShortDescription pulumi.StringInput `pulumi:"shortDescription"`
	// The list of operating systems supported by the listing.
	SupportedOperatingSystems GetListingsListingSupportedOperatingSystemArrayInput `pulumi:"supportedOperatingSystems"`
}

func (GetListingsListingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListing)(nil)).Elem()
}

func (i GetListingsListingArgs) ToGetListingsListingOutput() GetListingsListingOutput {
	return i.ToGetListingsListingOutputWithContext(context.Background())
}

func (i GetListingsListingArgs) ToGetListingsListingOutputWithContext(ctx context.Context) GetListingsListingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingOutput)
}

func (i GetListingsListingArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListing] {
	return pulumix.Output[GetListingsListing]{
		OutputState: i.ToGetListingsListingOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingArrayInput is an input type that accepts GetListingsListingArray and GetListingsListingArrayOutput values.
// You can construct a concrete instance of `GetListingsListingArrayInput` via:
//
//	GetListingsListingArray{ GetListingsListingArgs{...} }
type GetListingsListingArrayInput interface {
	pulumi.Input

	ToGetListingsListingArrayOutput() GetListingsListingArrayOutput
	ToGetListingsListingArrayOutputWithContext(context.Context) GetListingsListingArrayOutput
}

type GetListingsListingArray []GetListingsListingInput

func (GetListingsListingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListing)(nil)).Elem()
}

func (i GetListingsListingArray) ToGetListingsListingArrayOutput() GetListingsListingArrayOutput {
	return i.ToGetListingsListingArrayOutputWithContext(context.Background())
}

func (i GetListingsListingArray) ToGetListingsListingArrayOutputWithContext(ctx context.Context) GetListingsListingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingArrayOutput)
}

func (i GetListingsListingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListing] {
	return pulumix.Output[[]GetListingsListing]{
		OutputState: i.ToGetListingsListingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingOutput struct{ *pulumi.OutputState }

func (GetListingsListingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListing)(nil)).Elem()
}

func (o GetListingsListingOutput) ToGetListingsListingOutput() GetListingsListingOutput {
	return o
}

func (o GetListingsListingOutput) ToGetListingsListingOutputWithContext(ctx context.Context) GetListingsListingOutput {
	return o
}

func (o GetListingsListingOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListing] {
	return pulumix.Output[GetListingsListing]{
		OutputState: o.OutputState,
	}
}

// The model for upload data for images and icons.
func (o GetListingsListingOutput) Banners() GetListingsListingBannerArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingBanner { return v.Banners }).(GetListingsListingBannerArrayOutput)
}

// Product categories that the listing belongs to.
func (o GetListingsListingOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// The list of compatible architectures supported by the listing
func (o GetListingsListingOutput) CompatibleArchitectures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []string { return v.CompatibleArchitectures }).(pulumi.StringArrayOutput)
}

// The default package version.
func (o GetListingsListingOutput) DefaultPackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.DefaultPackageVersion }).(pulumi.StringOutput)
}

// Links to additional documentation provided by the publisher specifically for the listing.
func (o GetListingsListingOutput) DocumentationLinks() GetListingsListingDocumentationLinkArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingDocumentationLink { return v.DocumentationLinks }).(GetListingsListingDocumentationLinkArrayOutput)
}

// The model for upload data for images and icons.
func (o GetListingsListingOutput) Icons() GetListingsListingIconArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingIcon { return v.Icons }).(GetListingsListingIconArrayOutput)
}

// The unique identifier for the publisher.
func (o GetListingsListingOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether to show only featured listings. If this is set to `false` or is omitted, then all listings will be returned.
func (o GetListingsListingOutput) IsFeatured() pulumi.BoolOutput {
	return o.ApplyT(func(v GetListingsListing) bool { return v.IsFeatured }).(pulumi.BoolOutput)
}

// The publisher category to which the listing belongs. The publisher category informs where the listing appears for use.
func (o GetListingsListingOutput) ListingType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.ListingType }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.Name }).(pulumi.StringOutput)
}

// A filter to return only packages that match the given package type exactly.
func (o GetListingsListingOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.PackageType }).(pulumi.StringOutput)
}

func (o GetListingsListingOutput) PricingTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []string { return v.PricingTypes }).(pulumi.StringArrayOutput)
}

// Summary details about the publisher of the listing.
func (o GetListingsListingOutput) Publishers() GetListingsListingPublisherArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingPublisher { return v.Publishers }).(GetListingsListingPublisherArrayOutput)
}

// The regions where the listing is eligible to be deployed.
func (o GetListingsListingOutput) Regions() GetListingsListingRegionArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingRegion { return v.Regions }).(GetListingsListingRegionArrayOutput)
}

// A short description of the listing.
func (o GetListingsListingOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListing) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The list of operating systems supported by the listing.
func (o GetListingsListingOutput) SupportedOperatingSystems() GetListingsListingSupportedOperatingSystemArrayOutput {
	return o.ApplyT(func(v GetListingsListing) []GetListingsListingSupportedOperatingSystem {
		return v.SupportedOperatingSystems
	}).(GetListingsListingSupportedOperatingSystemArrayOutput)
}

type GetListingsListingArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListing)(nil)).Elem()
}

func (o GetListingsListingArrayOutput) ToGetListingsListingArrayOutput() GetListingsListingArrayOutput {
	return o
}

func (o GetListingsListingArrayOutput) ToGetListingsListingArrayOutputWithContext(ctx context.Context) GetListingsListingArrayOutput {
	return o
}

func (o GetListingsListingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListing] {
	return pulumix.Output[[]GetListingsListing]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingArrayOutput) Index(i pulumi.IntInput) GetListingsListingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListing {
		return vs[0].([]GetListingsListing)[vs[1].(int)]
	}).(GetListingsListingOutput)
}

type GetListingsListingBanner struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingBannerInput is an input type that accepts GetListingsListingBannerArgs and GetListingsListingBannerOutput values.
// You can construct a concrete instance of `GetListingsListingBannerInput` via:
//
//	GetListingsListingBannerArgs{...}
type GetListingsListingBannerInput interface {
	pulumi.Input

	ToGetListingsListingBannerOutput() GetListingsListingBannerOutput
	ToGetListingsListingBannerOutputWithContext(context.Context) GetListingsListingBannerOutput
}

type GetListingsListingBannerArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingBannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingBanner)(nil)).Elem()
}

func (i GetListingsListingBannerArgs) ToGetListingsListingBannerOutput() GetListingsListingBannerOutput {
	return i.ToGetListingsListingBannerOutputWithContext(context.Background())
}

func (i GetListingsListingBannerArgs) ToGetListingsListingBannerOutputWithContext(ctx context.Context) GetListingsListingBannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingBannerOutput)
}

func (i GetListingsListingBannerArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingBanner] {
	return pulumix.Output[GetListingsListingBanner]{
		OutputState: i.ToGetListingsListingBannerOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingBannerArrayInput is an input type that accepts GetListingsListingBannerArray and GetListingsListingBannerArrayOutput values.
// You can construct a concrete instance of `GetListingsListingBannerArrayInput` via:
//
//	GetListingsListingBannerArray{ GetListingsListingBannerArgs{...} }
type GetListingsListingBannerArrayInput interface {
	pulumi.Input

	ToGetListingsListingBannerArrayOutput() GetListingsListingBannerArrayOutput
	ToGetListingsListingBannerArrayOutputWithContext(context.Context) GetListingsListingBannerArrayOutput
}

type GetListingsListingBannerArray []GetListingsListingBannerInput

func (GetListingsListingBannerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingBanner)(nil)).Elem()
}

func (i GetListingsListingBannerArray) ToGetListingsListingBannerArrayOutput() GetListingsListingBannerArrayOutput {
	return i.ToGetListingsListingBannerArrayOutputWithContext(context.Background())
}

func (i GetListingsListingBannerArray) ToGetListingsListingBannerArrayOutputWithContext(ctx context.Context) GetListingsListingBannerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingBannerArrayOutput)
}

func (i GetListingsListingBannerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingBanner] {
	return pulumix.Output[[]GetListingsListingBanner]{
		OutputState: i.ToGetListingsListingBannerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingBannerOutput struct{ *pulumi.OutputState }

func (GetListingsListingBannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingBanner)(nil)).Elem()
}

func (o GetListingsListingBannerOutput) ToGetListingsListingBannerOutput() GetListingsListingBannerOutput {
	return o
}

func (o GetListingsListingBannerOutput) ToGetListingsListingBannerOutputWithContext(ctx context.Context) GetListingsListingBannerOutput {
	return o
}

func (o GetListingsListingBannerOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingBanner] {
	return pulumix.Output[GetListingsListingBanner]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingsListingBannerOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingBanner) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingsListingBannerOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingBanner) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingsListingBannerOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingBanner) string { return v.MimeType }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingBannerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingBanner) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingBannerArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingBannerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingBanner)(nil)).Elem()
}

func (o GetListingsListingBannerArrayOutput) ToGetListingsListingBannerArrayOutput() GetListingsListingBannerArrayOutput {
	return o
}

func (o GetListingsListingBannerArrayOutput) ToGetListingsListingBannerArrayOutputWithContext(ctx context.Context) GetListingsListingBannerArrayOutput {
	return o
}

func (o GetListingsListingBannerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingBanner] {
	return pulumix.Output[[]GetListingsListingBanner]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingBannerArrayOutput) Index(i pulumi.IntInput) GetListingsListingBannerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingBanner {
		return vs[0].([]GetListingsListingBanner)[vs[1].(int)]
	}).(GetListingsListingBannerOutput)
}

type GetListingsListingDocumentationLink struct {
	// The category that the document belongs to.
	DocumentCategory string `pulumi:"documentCategory"`
	// The name of the listing.
	Name string `pulumi:"name"`
	// The URL of the resource.
	Url string `pulumi:"url"`
}

// GetListingsListingDocumentationLinkInput is an input type that accepts GetListingsListingDocumentationLinkArgs and GetListingsListingDocumentationLinkOutput values.
// You can construct a concrete instance of `GetListingsListingDocumentationLinkInput` via:
//
//	GetListingsListingDocumentationLinkArgs{...}
type GetListingsListingDocumentationLinkInput interface {
	pulumi.Input

	ToGetListingsListingDocumentationLinkOutput() GetListingsListingDocumentationLinkOutput
	ToGetListingsListingDocumentationLinkOutputWithContext(context.Context) GetListingsListingDocumentationLinkOutput
}

type GetListingsListingDocumentationLinkArgs struct {
	// The category that the document belongs to.
	DocumentCategory pulumi.StringInput `pulumi:"documentCategory"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the resource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetListingsListingDocumentationLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingDocumentationLink)(nil)).Elem()
}

func (i GetListingsListingDocumentationLinkArgs) ToGetListingsListingDocumentationLinkOutput() GetListingsListingDocumentationLinkOutput {
	return i.ToGetListingsListingDocumentationLinkOutputWithContext(context.Background())
}

func (i GetListingsListingDocumentationLinkArgs) ToGetListingsListingDocumentationLinkOutputWithContext(ctx context.Context) GetListingsListingDocumentationLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingDocumentationLinkOutput)
}

func (i GetListingsListingDocumentationLinkArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingDocumentationLink] {
	return pulumix.Output[GetListingsListingDocumentationLink]{
		OutputState: i.ToGetListingsListingDocumentationLinkOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingDocumentationLinkArrayInput is an input type that accepts GetListingsListingDocumentationLinkArray and GetListingsListingDocumentationLinkArrayOutput values.
// You can construct a concrete instance of `GetListingsListingDocumentationLinkArrayInput` via:
//
//	GetListingsListingDocumentationLinkArray{ GetListingsListingDocumentationLinkArgs{...} }
type GetListingsListingDocumentationLinkArrayInput interface {
	pulumi.Input

	ToGetListingsListingDocumentationLinkArrayOutput() GetListingsListingDocumentationLinkArrayOutput
	ToGetListingsListingDocumentationLinkArrayOutputWithContext(context.Context) GetListingsListingDocumentationLinkArrayOutput
}

type GetListingsListingDocumentationLinkArray []GetListingsListingDocumentationLinkInput

func (GetListingsListingDocumentationLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingDocumentationLink)(nil)).Elem()
}

func (i GetListingsListingDocumentationLinkArray) ToGetListingsListingDocumentationLinkArrayOutput() GetListingsListingDocumentationLinkArrayOutput {
	return i.ToGetListingsListingDocumentationLinkArrayOutputWithContext(context.Background())
}

func (i GetListingsListingDocumentationLinkArray) ToGetListingsListingDocumentationLinkArrayOutputWithContext(ctx context.Context) GetListingsListingDocumentationLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingDocumentationLinkArrayOutput)
}

func (i GetListingsListingDocumentationLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingDocumentationLink] {
	return pulumix.Output[[]GetListingsListingDocumentationLink]{
		OutputState: i.ToGetListingsListingDocumentationLinkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingDocumentationLinkOutput struct{ *pulumi.OutputState }

func (GetListingsListingDocumentationLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingDocumentationLink)(nil)).Elem()
}

func (o GetListingsListingDocumentationLinkOutput) ToGetListingsListingDocumentationLinkOutput() GetListingsListingDocumentationLinkOutput {
	return o
}

func (o GetListingsListingDocumentationLinkOutput) ToGetListingsListingDocumentationLinkOutputWithContext(ctx context.Context) GetListingsListingDocumentationLinkOutput {
	return o
}

func (o GetListingsListingDocumentationLinkOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingDocumentationLink] {
	return pulumix.Output[GetListingsListingDocumentationLink]{
		OutputState: o.OutputState,
	}
}

// The category that the document belongs to.
func (o GetListingsListingDocumentationLinkOutput) DocumentCategory() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingDocumentationLink) string { return v.DocumentCategory }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingDocumentationLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingDocumentationLink) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the resource.
func (o GetListingsListingDocumentationLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingDocumentationLink) string { return v.Url }).(pulumi.StringOutput)
}

type GetListingsListingDocumentationLinkArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingDocumentationLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingDocumentationLink)(nil)).Elem()
}

func (o GetListingsListingDocumentationLinkArrayOutput) ToGetListingsListingDocumentationLinkArrayOutput() GetListingsListingDocumentationLinkArrayOutput {
	return o
}

func (o GetListingsListingDocumentationLinkArrayOutput) ToGetListingsListingDocumentationLinkArrayOutputWithContext(ctx context.Context) GetListingsListingDocumentationLinkArrayOutput {
	return o
}

func (o GetListingsListingDocumentationLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingDocumentationLink] {
	return pulumix.Output[[]GetListingsListingDocumentationLink]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingDocumentationLinkArrayOutput) Index(i pulumi.IntInput) GetListingsListingDocumentationLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingDocumentationLink {
		return vs[0].([]GetListingsListingDocumentationLink)[vs[1].(int)]
	}).(GetListingsListingDocumentationLinkOutput)
}

type GetListingsListingIcon struct {
	// The content URL of the screenshot.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType string `pulumi:"mimeType"`
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingIconInput is an input type that accepts GetListingsListingIconArgs and GetListingsListingIconOutput values.
// You can construct a concrete instance of `GetListingsListingIconInput` via:
//
//	GetListingsListingIconArgs{...}
type GetListingsListingIconInput interface {
	pulumi.Input

	ToGetListingsListingIconOutput() GetListingsListingIconOutput
	ToGetListingsListingIconOutputWithContext(context.Context) GetListingsListingIconOutput
}

type GetListingsListingIconArgs struct {
	// The content URL of the screenshot.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the screenshot.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the screenshot.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingIcon)(nil)).Elem()
}

func (i GetListingsListingIconArgs) ToGetListingsListingIconOutput() GetListingsListingIconOutput {
	return i.ToGetListingsListingIconOutputWithContext(context.Background())
}

func (i GetListingsListingIconArgs) ToGetListingsListingIconOutputWithContext(ctx context.Context) GetListingsListingIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingIconOutput)
}

func (i GetListingsListingIconArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingIcon] {
	return pulumix.Output[GetListingsListingIcon]{
		OutputState: i.ToGetListingsListingIconOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingIconArrayInput is an input type that accepts GetListingsListingIconArray and GetListingsListingIconArrayOutput values.
// You can construct a concrete instance of `GetListingsListingIconArrayInput` via:
//
//	GetListingsListingIconArray{ GetListingsListingIconArgs{...} }
type GetListingsListingIconArrayInput interface {
	pulumi.Input

	ToGetListingsListingIconArrayOutput() GetListingsListingIconArrayOutput
	ToGetListingsListingIconArrayOutputWithContext(context.Context) GetListingsListingIconArrayOutput
}

type GetListingsListingIconArray []GetListingsListingIconInput

func (GetListingsListingIconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingIcon)(nil)).Elem()
}

func (i GetListingsListingIconArray) ToGetListingsListingIconArrayOutput() GetListingsListingIconArrayOutput {
	return i.ToGetListingsListingIconArrayOutputWithContext(context.Background())
}

func (i GetListingsListingIconArray) ToGetListingsListingIconArrayOutputWithContext(ctx context.Context) GetListingsListingIconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingIconArrayOutput)
}

func (i GetListingsListingIconArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingIcon] {
	return pulumix.Output[[]GetListingsListingIcon]{
		OutputState: i.ToGetListingsListingIconArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingIconOutput struct{ *pulumi.OutputState }

func (GetListingsListingIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingIcon)(nil)).Elem()
}

func (o GetListingsListingIconOutput) ToGetListingsListingIconOutput() GetListingsListingIconOutput {
	return o
}

func (o GetListingsListingIconOutput) ToGetListingsListingIconOutputWithContext(ctx context.Context) GetListingsListingIconOutput {
	return o
}

func (o GetListingsListingIconOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingIcon] {
	return pulumix.Output[GetListingsListingIcon]{
		OutputState: o.OutputState,
	}
}

// The content URL of the screenshot.
func (o GetListingsListingIconOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingIcon) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the screenshot.
func (o GetListingsListingIconOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingIcon) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the screenshot.
func (o GetListingsListingIconOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingIcon) string { return v.MimeType }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingIconOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingIcon) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingIconArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingIconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingIcon)(nil)).Elem()
}

func (o GetListingsListingIconArrayOutput) ToGetListingsListingIconArrayOutput() GetListingsListingIconArrayOutput {
	return o
}

func (o GetListingsListingIconArrayOutput) ToGetListingsListingIconArrayOutputWithContext(ctx context.Context) GetListingsListingIconArrayOutput {
	return o
}

func (o GetListingsListingIconArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingIcon] {
	return pulumix.Output[[]GetListingsListingIcon]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingIconArrayOutput) Index(i pulumi.IntInput) GetListingsListingIconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingIcon {
		return vs[0].([]GetListingsListingIcon)[vs[1].(int)]
	}).(GetListingsListingIconOutput)
}

type GetListingsListingPublisher struct {
	// A description of the screenshot.
	Description string `pulumi:"description"`
	// The unique identifier for the publisher.
	Id string `pulumi:"id"`
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingPublisherInput is an input type that accepts GetListingsListingPublisherArgs and GetListingsListingPublisherOutput values.
// You can construct a concrete instance of `GetListingsListingPublisherInput` via:
//
//	GetListingsListingPublisherArgs{...}
type GetListingsListingPublisherInput interface {
	pulumi.Input

	ToGetListingsListingPublisherOutput() GetListingsListingPublisherOutput
	ToGetListingsListingPublisherOutputWithContext(context.Context) GetListingsListingPublisherOutput
}

type GetListingsListingPublisherArgs struct {
	// A description of the screenshot.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique identifier for the publisher.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingPublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingPublisher)(nil)).Elem()
}

func (i GetListingsListingPublisherArgs) ToGetListingsListingPublisherOutput() GetListingsListingPublisherOutput {
	return i.ToGetListingsListingPublisherOutputWithContext(context.Background())
}

func (i GetListingsListingPublisherArgs) ToGetListingsListingPublisherOutputWithContext(ctx context.Context) GetListingsListingPublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingPublisherOutput)
}

func (i GetListingsListingPublisherArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingPublisher] {
	return pulumix.Output[GetListingsListingPublisher]{
		OutputState: i.ToGetListingsListingPublisherOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingPublisherArrayInput is an input type that accepts GetListingsListingPublisherArray and GetListingsListingPublisherArrayOutput values.
// You can construct a concrete instance of `GetListingsListingPublisherArrayInput` via:
//
//	GetListingsListingPublisherArray{ GetListingsListingPublisherArgs{...} }
type GetListingsListingPublisherArrayInput interface {
	pulumi.Input

	ToGetListingsListingPublisherArrayOutput() GetListingsListingPublisherArrayOutput
	ToGetListingsListingPublisherArrayOutputWithContext(context.Context) GetListingsListingPublisherArrayOutput
}

type GetListingsListingPublisherArray []GetListingsListingPublisherInput

func (GetListingsListingPublisherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingPublisher)(nil)).Elem()
}

func (i GetListingsListingPublisherArray) ToGetListingsListingPublisherArrayOutput() GetListingsListingPublisherArrayOutput {
	return i.ToGetListingsListingPublisherArrayOutputWithContext(context.Background())
}

func (i GetListingsListingPublisherArray) ToGetListingsListingPublisherArrayOutputWithContext(ctx context.Context) GetListingsListingPublisherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingPublisherArrayOutput)
}

func (i GetListingsListingPublisherArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingPublisher] {
	return pulumix.Output[[]GetListingsListingPublisher]{
		OutputState: i.ToGetListingsListingPublisherArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingPublisherOutput struct{ *pulumi.OutputState }

func (GetListingsListingPublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingPublisher)(nil)).Elem()
}

func (o GetListingsListingPublisherOutput) ToGetListingsListingPublisherOutput() GetListingsListingPublisherOutput {
	return o
}

func (o GetListingsListingPublisherOutput) ToGetListingsListingPublisherOutputWithContext(ctx context.Context) GetListingsListingPublisherOutput {
	return o
}

func (o GetListingsListingPublisherOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingPublisher] {
	return pulumix.Output[GetListingsListingPublisher]{
		OutputState: o.OutputState,
	}
}

// A description of the screenshot.
func (o GetListingsListingPublisherOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingPublisher) string { return v.Description }).(pulumi.StringOutput)
}

// The unique identifier for the publisher.
func (o GetListingsListingPublisherOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingPublisher) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingPublisherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingPublisher) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingPublisherArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingPublisherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingPublisher)(nil)).Elem()
}

func (o GetListingsListingPublisherArrayOutput) ToGetListingsListingPublisherArrayOutput() GetListingsListingPublisherArrayOutput {
	return o
}

func (o GetListingsListingPublisherArrayOutput) ToGetListingsListingPublisherArrayOutputWithContext(ctx context.Context) GetListingsListingPublisherArrayOutput {
	return o
}

func (o GetListingsListingPublisherArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingPublisher] {
	return pulumix.Output[[]GetListingsListingPublisher]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingPublisherArrayOutput) Index(i pulumi.IntInput) GetListingsListingPublisherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingPublisher {
		return vs[0].([]GetListingsListingPublisher)[vs[1].(int)]
	}).(GetListingsListingPublisherOutput)
}

type GetListingsListingRegion struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// Countries in the region.
	Countries []GetListingsListingRegionCountry `pulumi:"countries"`
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingRegionInput is an input type that accepts GetListingsListingRegionArgs and GetListingsListingRegionOutput values.
// You can construct a concrete instance of `GetListingsListingRegionInput` via:
//
//	GetListingsListingRegionArgs{...}
type GetListingsListingRegionInput interface {
	pulumi.Input

	ToGetListingsListingRegionOutput() GetListingsListingRegionOutput
	ToGetListingsListingRegionOutputWithContext(context.Context) GetListingsListingRegionOutput
}

type GetListingsListingRegionArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// Countries in the region.
	Countries GetListingsListingRegionCountryArrayInput `pulumi:"countries"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingRegion)(nil)).Elem()
}

func (i GetListingsListingRegionArgs) ToGetListingsListingRegionOutput() GetListingsListingRegionOutput {
	return i.ToGetListingsListingRegionOutputWithContext(context.Background())
}

func (i GetListingsListingRegionArgs) ToGetListingsListingRegionOutputWithContext(ctx context.Context) GetListingsListingRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingRegionOutput)
}

func (i GetListingsListingRegionArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingRegion] {
	return pulumix.Output[GetListingsListingRegion]{
		OutputState: i.ToGetListingsListingRegionOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingRegionArrayInput is an input type that accepts GetListingsListingRegionArray and GetListingsListingRegionArrayOutput values.
// You can construct a concrete instance of `GetListingsListingRegionArrayInput` via:
//
//	GetListingsListingRegionArray{ GetListingsListingRegionArgs{...} }
type GetListingsListingRegionArrayInput interface {
	pulumi.Input

	ToGetListingsListingRegionArrayOutput() GetListingsListingRegionArrayOutput
	ToGetListingsListingRegionArrayOutputWithContext(context.Context) GetListingsListingRegionArrayOutput
}

type GetListingsListingRegionArray []GetListingsListingRegionInput

func (GetListingsListingRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingRegion)(nil)).Elem()
}

func (i GetListingsListingRegionArray) ToGetListingsListingRegionArrayOutput() GetListingsListingRegionArrayOutput {
	return i.ToGetListingsListingRegionArrayOutputWithContext(context.Background())
}

func (i GetListingsListingRegionArray) ToGetListingsListingRegionArrayOutputWithContext(ctx context.Context) GetListingsListingRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingRegionArrayOutput)
}

func (i GetListingsListingRegionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingRegion] {
	return pulumix.Output[[]GetListingsListingRegion]{
		OutputState: i.ToGetListingsListingRegionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingRegionOutput struct{ *pulumi.OutputState }

func (GetListingsListingRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingRegion)(nil)).Elem()
}

func (o GetListingsListingRegionOutput) ToGetListingsListingRegionOutput() GetListingsListingRegionOutput {
	return o
}

func (o GetListingsListingRegionOutput) ToGetListingsListingRegionOutputWithContext(ctx context.Context) GetListingsListingRegionOutput {
	return o
}

func (o GetListingsListingRegionOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingRegion] {
	return pulumix.Output[GetListingsListingRegion]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingsListingRegionOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingRegion) string { return v.Code }).(pulumi.StringOutput)
}

// Countries in the region.
func (o GetListingsListingRegionOutput) Countries() GetListingsListingRegionCountryArrayOutput {
	return o.ApplyT(func(v GetListingsListingRegion) []GetListingsListingRegionCountry { return v.Countries }).(GetListingsListingRegionCountryArrayOutput)
}

// The name of the listing.
func (o GetListingsListingRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingRegion) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingRegionArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingRegion)(nil)).Elem()
}

func (o GetListingsListingRegionArrayOutput) ToGetListingsListingRegionArrayOutput() GetListingsListingRegionArrayOutput {
	return o
}

func (o GetListingsListingRegionArrayOutput) ToGetListingsListingRegionArrayOutputWithContext(ctx context.Context) GetListingsListingRegionArrayOutput {
	return o
}

func (o GetListingsListingRegionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingRegion] {
	return pulumix.Output[[]GetListingsListingRegion]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingRegionArrayOutput) Index(i pulumi.IntInput) GetListingsListingRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingRegion {
		return vs[0].([]GetListingsListingRegion)[vs[1].(int)]
	}).(GetListingsListingRegionOutput)
}

type GetListingsListingRegionCountry struct {
	// A code assigned to the item.
	Code string `pulumi:"code"`
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingRegionCountryInput is an input type that accepts GetListingsListingRegionCountryArgs and GetListingsListingRegionCountryOutput values.
// You can construct a concrete instance of `GetListingsListingRegionCountryInput` via:
//
//	GetListingsListingRegionCountryArgs{...}
type GetListingsListingRegionCountryInput interface {
	pulumi.Input

	ToGetListingsListingRegionCountryOutput() GetListingsListingRegionCountryOutput
	ToGetListingsListingRegionCountryOutputWithContext(context.Context) GetListingsListingRegionCountryOutput
}

type GetListingsListingRegionCountryArgs struct {
	// A code assigned to the item.
	Code pulumi.StringInput `pulumi:"code"`
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingRegionCountryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingRegionCountry)(nil)).Elem()
}

func (i GetListingsListingRegionCountryArgs) ToGetListingsListingRegionCountryOutput() GetListingsListingRegionCountryOutput {
	return i.ToGetListingsListingRegionCountryOutputWithContext(context.Background())
}

func (i GetListingsListingRegionCountryArgs) ToGetListingsListingRegionCountryOutputWithContext(ctx context.Context) GetListingsListingRegionCountryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingRegionCountryOutput)
}

func (i GetListingsListingRegionCountryArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingRegionCountry] {
	return pulumix.Output[GetListingsListingRegionCountry]{
		OutputState: i.ToGetListingsListingRegionCountryOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingRegionCountryArrayInput is an input type that accepts GetListingsListingRegionCountryArray and GetListingsListingRegionCountryArrayOutput values.
// You can construct a concrete instance of `GetListingsListingRegionCountryArrayInput` via:
//
//	GetListingsListingRegionCountryArray{ GetListingsListingRegionCountryArgs{...} }
type GetListingsListingRegionCountryArrayInput interface {
	pulumi.Input

	ToGetListingsListingRegionCountryArrayOutput() GetListingsListingRegionCountryArrayOutput
	ToGetListingsListingRegionCountryArrayOutputWithContext(context.Context) GetListingsListingRegionCountryArrayOutput
}

type GetListingsListingRegionCountryArray []GetListingsListingRegionCountryInput

func (GetListingsListingRegionCountryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingRegionCountry)(nil)).Elem()
}

func (i GetListingsListingRegionCountryArray) ToGetListingsListingRegionCountryArrayOutput() GetListingsListingRegionCountryArrayOutput {
	return i.ToGetListingsListingRegionCountryArrayOutputWithContext(context.Background())
}

func (i GetListingsListingRegionCountryArray) ToGetListingsListingRegionCountryArrayOutputWithContext(ctx context.Context) GetListingsListingRegionCountryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingRegionCountryArrayOutput)
}

func (i GetListingsListingRegionCountryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingRegionCountry] {
	return pulumix.Output[[]GetListingsListingRegionCountry]{
		OutputState: i.ToGetListingsListingRegionCountryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingRegionCountryOutput struct{ *pulumi.OutputState }

func (GetListingsListingRegionCountryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingRegionCountry)(nil)).Elem()
}

func (o GetListingsListingRegionCountryOutput) ToGetListingsListingRegionCountryOutput() GetListingsListingRegionCountryOutput {
	return o
}

func (o GetListingsListingRegionCountryOutput) ToGetListingsListingRegionCountryOutputWithContext(ctx context.Context) GetListingsListingRegionCountryOutput {
	return o
}

func (o GetListingsListingRegionCountryOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingRegionCountry] {
	return pulumix.Output[GetListingsListingRegionCountry]{
		OutputState: o.OutputState,
	}
}

// A code assigned to the item.
func (o GetListingsListingRegionCountryOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingRegionCountry) string { return v.Code }).(pulumi.StringOutput)
}

// The name of the listing.
func (o GetListingsListingRegionCountryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingRegionCountry) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingRegionCountryArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingRegionCountryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingRegionCountry)(nil)).Elem()
}

func (o GetListingsListingRegionCountryArrayOutput) ToGetListingsListingRegionCountryArrayOutput() GetListingsListingRegionCountryArrayOutput {
	return o
}

func (o GetListingsListingRegionCountryArrayOutput) ToGetListingsListingRegionCountryArrayOutputWithContext(ctx context.Context) GetListingsListingRegionCountryArrayOutput {
	return o
}

func (o GetListingsListingRegionCountryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingRegionCountry] {
	return pulumix.Output[[]GetListingsListingRegionCountry]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingRegionCountryArrayOutput) Index(i pulumi.IntInput) GetListingsListingRegionCountryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingRegionCountry {
		return vs[0].([]GetListingsListingRegionCountry)[vs[1].(int)]
	}).(GetListingsListingRegionCountryOutput)
}

type GetListingsListingSupportedOperatingSystem struct {
	// The name of the listing.
	Name string `pulumi:"name"`
}

// GetListingsListingSupportedOperatingSystemInput is an input type that accepts GetListingsListingSupportedOperatingSystemArgs and GetListingsListingSupportedOperatingSystemOutput values.
// You can construct a concrete instance of `GetListingsListingSupportedOperatingSystemInput` via:
//
//	GetListingsListingSupportedOperatingSystemArgs{...}
type GetListingsListingSupportedOperatingSystemInput interface {
	pulumi.Input

	ToGetListingsListingSupportedOperatingSystemOutput() GetListingsListingSupportedOperatingSystemOutput
	ToGetListingsListingSupportedOperatingSystemOutputWithContext(context.Context) GetListingsListingSupportedOperatingSystemOutput
}

type GetListingsListingSupportedOperatingSystemArgs struct {
	// The name of the listing.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetListingsListingSupportedOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingSupportedOperatingSystem)(nil)).Elem()
}

func (i GetListingsListingSupportedOperatingSystemArgs) ToGetListingsListingSupportedOperatingSystemOutput() GetListingsListingSupportedOperatingSystemOutput {
	return i.ToGetListingsListingSupportedOperatingSystemOutputWithContext(context.Background())
}

func (i GetListingsListingSupportedOperatingSystemArgs) ToGetListingsListingSupportedOperatingSystemOutputWithContext(ctx context.Context) GetListingsListingSupportedOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingSupportedOperatingSystemOutput)
}

func (i GetListingsListingSupportedOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingSupportedOperatingSystem] {
	return pulumix.Output[GetListingsListingSupportedOperatingSystem]{
		OutputState: i.ToGetListingsListingSupportedOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetListingsListingSupportedOperatingSystemArrayInput is an input type that accepts GetListingsListingSupportedOperatingSystemArray and GetListingsListingSupportedOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetListingsListingSupportedOperatingSystemArrayInput` via:
//
//	GetListingsListingSupportedOperatingSystemArray{ GetListingsListingSupportedOperatingSystemArgs{...} }
type GetListingsListingSupportedOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetListingsListingSupportedOperatingSystemArrayOutput() GetListingsListingSupportedOperatingSystemArrayOutput
	ToGetListingsListingSupportedOperatingSystemArrayOutputWithContext(context.Context) GetListingsListingSupportedOperatingSystemArrayOutput
}

type GetListingsListingSupportedOperatingSystemArray []GetListingsListingSupportedOperatingSystemInput

func (GetListingsListingSupportedOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingSupportedOperatingSystem)(nil)).Elem()
}

func (i GetListingsListingSupportedOperatingSystemArray) ToGetListingsListingSupportedOperatingSystemArrayOutput() GetListingsListingSupportedOperatingSystemArrayOutput {
	return i.ToGetListingsListingSupportedOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetListingsListingSupportedOperatingSystemArray) ToGetListingsListingSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingsListingSupportedOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListingsListingSupportedOperatingSystemArrayOutput)
}

func (i GetListingsListingSupportedOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingSupportedOperatingSystem] {
	return pulumix.Output[[]GetListingsListingSupportedOperatingSystem]{
		OutputState: i.ToGetListingsListingSupportedOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetListingsListingSupportedOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetListingsListingSupportedOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListingsListingSupportedOperatingSystem)(nil)).Elem()
}

func (o GetListingsListingSupportedOperatingSystemOutput) ToGetListingsListingSupportedOperatingSystemOutput() GetListingsListingSupportedOperatingSystemOutput {
	return o
}

func (o GetListingsListingSupportedOperatingSystemOutput) ToGetListingsListingSupportedOperatingSystemOutputWithContext(ctx context.Context) GetListingsListingSupportedOperatingSystemOutput {
	return o
}

func (o GetListingsListingSupportedOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetListingsListingSupportedOperatingSystem] {
	return pulumix.Output[GetListingsListingSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the listing.
func (o GetListingsListingSupportedOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetListingsListingSupportedOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetListingsListingSupportedOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetListingsListingSupportedOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListingsListingSupportedOperatingSystem)(nil)).Elem()
}

func (o GetListingsListingSupportedOperatingSystemArrayOutput) ToGetListingsListingSupportedOperatingSystemArrayOutput() GetListingsListingSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetListingsListingSupportedOperatingSystemArrayOutput) ToGetListingsListingSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetListingsListingSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetListingsListingSupportedOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetListingsListingSupportedOperatingSystem] {
	return pulumix.Output[[]GetListingsListingSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetListingsListingSupportedOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetListingsListingSupportedOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListingsListingSupportedOperatingSystem {
		return vs[0].([]GetListingsListingSupportedOperatingSystem)[vs[1].(int)]
	}).(GetListingsListingSupportedOperatingSystemOutput)
}

type GetPublicationIcon struct {
	// The content URL of the upload data.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType string `pulumi:"mimeType"`
	// The name of the operating system.
	Name string `pulumi:"name"`
}

// GetPublicationIconInput is an input type that accepts GetPublicationIconArgs and GetPublicationIconOutput values.
// You can construct a concrete instance of `GetPublicationIconInput` via:
//
//	GetPublicationIconArgs{...}
type GetPublicationIconInput interface {
	pulumi.Input

	ToGetPublicationIconOutput() GetPublicationIconOutput
	ToGetPublicationIconOutputWithContext(context.Context) GetPublicationIconOutput
}

type GetPublicationIconArgs struct {
	// The content URL of the upload data.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// The name of the operating system.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationIcon)(nil)).Elem()
}

func (i GetPublicationIconArgs) ToGetPublicationIconOutput() GetPublicationIconOutput {
	return i.ToGetPublicationIconOutputWithContext(context.Background())
}

func (i GetPublicationIconArgs) ToGetPublicationIconOutputWithContext(ctx context.Context) GetPublicationIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationIconOutput)
}

func (i GetPublicationIconArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationIcon] {
	return pulumix.Output[GetPublicationIcon]{
		OutputState: i.ToGetPublicationIconOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationIconArrayInput is an input type that accepts GetPublicationIconArray and GetPublicationIconArrayOutput values.
// You can construct a concrete instance of `GetPublicationIconArrayInput` via:
//
//	GetPublicationIconArray{ GetPublicationIconArgs{...} }
type GetPublicationIconArrayInput interface {
	pulumi.Input

	ToGetPublicationIconArrayOutput() GetPublicationIconArrayOutput
	ToGetPublicationIconArrayOutputWithContext(context.Context) GetPublicationIconArrayOutput
}

type GetPublicationIconArray []GetPublicationIconInput

func (GetPublicationIconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationIcon)(nil)).Elem()
}

func (i GetPublicationIconArray) ToGetPublicationIconArrayOutput() GetPublicationIconArrayOutput {
	return i.ToGetPublicationIconArrayOutputWithContext(context.Background())
}

func (i GetPublicationIconArray) ToGetPublicationIconArrayOutputWithContext(ctx context.Context) GetPublicationIconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationIconArrayOutput)
}

func (i GetPublicationIconArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationIcon] {
	return pulumix.Output[[]GetPublicationIcon]{
		OutputState: i.ToGetPublicationIconArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationIconOutput struct{ *pulumi.OutputState }

func (GetPublicationIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationIcon)(nil)).Elem()
}

func (o GetPublicationIconOutput) ToGetPublicationIconOutput() GetPublicationIconOutput {
	return o
}

func (o GetPublicationIconOutput) ToGetPublicationIconOutputWithContext(ctx context.Context) GetPublicationIconOutput {
	return o
}

func (o GetPublicationIconOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationIcon] {
	return pulumix.Output[GetPublicationIcon]{
		OutputState: o.OutputState,
	}
}

// The content URL of the upload data.
func (o GetPublicationIconOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationIcon) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the upload data.
func (o GetPublicationIconOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationIcon) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the upload data.
func (o GetPublicationIconOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationIcon) string { return v.MimeType }).(pulumi.StringOutput)
}

// The name of the operating system.
func (o GetPublicationIconOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationIcon) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationIconArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationIconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationIcon)(nil)).Elem()
}

func (o GetPublicationIconArrayOutput) ToGetPublicationIconArrayOutput() GetPublicationIconArrayOutput {
	return o
}

func (o GetPublicationIconArrayOutput) ToGetPublicationIconArrayOutputWithContext(ctx context.Context) GetPublicationIconArrayOutput {
	return o
}

func (o GetPublicationIconArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationIcon] {
	return pulumix.Output[[]GetPublicationIcon]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationIconArrayOutput) Index(i pulumi.IntInput) GetPublicationIconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationIcon {
		return vs[0].([]GetPublicationIcon)[vs[1].(int)]
	}).(GetPublicationIconOutput)
}

type GetPublicationPackageDetail struct {
	Eulas            []GetPublicationPackageDetailEula            `pulumi:"eulas"`
	ImageId          string                                       `pulumi:"imageId"`
	OperatingSystems []GetPublicationPackageDetailOperatingSystem `pulumi:"operatingSystems"`
	// The listing's package type.
	PackageType    string `pulumi:"packageType"`
	PackageVersion string `pulumi:"packageVersion"`
}

// GetPublicationPackageDetailInput is an input type that accepts GetPublicationPackageDetailArgs and GetPublicationPackageDetailOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailInput` via:
//
//	GetPublicationPackageDetailArgs{...}
type GetPublicationPackageDetailInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailOutput() GetPublicationPackageDetailOutput
	ToGetPublicationPackageDetailOutputWithContext(context.Context) GetPublicationPackageDetailOutput
}

type GetPublicationPackageDetailArgs struct {
	Eulas            GetPublicationPackageDetailEulaArrayInput            `pulumi:"eulas"`
	ImageId          pulumi.StringInput                                   `pulumi:"imageId"`
	OperatingSystems GetPublicationPackageDetailOperatingSystemArrayInput `pulumi:"operatingSystems"`
	// The listing's package type.
	PackageType    pulumi.StringInput `pulumi:"packageType"`
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
}

func (GetPublicationPackageDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetail)(nil)).Elem()
}

func (i GetPublicationPackageDetailArgs) ToGetPublicationPackageDetailOutput() GetPublicationPackageDetailOutput {
	return i.ToGetPublicationPackageDetailOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailArgs) ToGetPublicationPackageDetailOutputWithContext(ctx context.Context) GetPublicationPackageDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailOutput)
}

func (i GetPublicationPackageDetailArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetail] {
	return pulumix.Output[GetPublicationPackageDetail]{
		OutputState: i.ToGetPublicationPackageDetailOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackageDetailArrayInput is an input type that accepts GetPublicationPackageDetailArray and GetPublicationPackageDetailArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailArrayInput` via:
//
//	GetPublicationPackageDetailArray{ GetPublicationPackageDetailArgs{...} }
type GetPublicationPackageDetailArrayInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailArrayOutput() GetPublicationPackageDetailArrayOutput
	ToGetPublicationPackageDetailArrayOutputWithContext(context.Context) GetPublicationPackageDetailArrayOutput
}

type GetPublicationPackageDetailArray []GetPublicationPackageDetailInput

func (GetPublicationPackageDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetail)(nil)).Elem()
}

func (i GetPublicationPackageDetailArray) ToGetPublicationPackageDetailArrayOutput() GetPublicationPackageDetailArrayOutput {
	return i.ToGetPublicationPackageDetailArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailArray) ToGetPublicationPackageDetailArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailArrayOutput)
}

func (i GetPublicationPackageDetailArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetail] {
	return pulumix.Output[[]GetPublicationPackageDetail]{
		OutputState: i.ToGetPublicationPackageDetailArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackageDetailOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetail)(nil)).Elem()
}

func (o GetPublicationPackageDetailOutput) ToGetPublicationPackageDetailOutput() GetPublicationPackageDetailOutput {
	return o
}

func (o GetPublicationPackageDetailOutput) ToGetPublicationPackageDetailOutputWithContext(ctx context.Context) GetPublicationPackageDetailOutput {
	return o
}

func (o GetPublicationPackageDetailOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetail] {
	return pulumix.Output[GetPublicationPackageDetail]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageDetailOutput) Eulas() GetPublicationPackageDetailEulaArrayOutput {
	return o.ApplyT(func(v GetPublicationPackageDetail) []GetPublicationPackageDetailEula { return v.Eulas }).(GetPublicationPackageDetailEulaArrayOutput)
}

func (o GetPublicationPackageDetailOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetail) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o GetPublicationPackageDetailOutput) OperatingSystems() GetPublicationPackageDetailOperatingSystemArrayOutput {
	return o.ApplyT(func(v GetPublicationPackageDetail) []GetPublicationPackageDetailOperatingSystem {
		return v.OperatingSystems
	}).(GetPublicationPackageDetailOperatingSystemArrayOutput)
}

// The listing's package type.
func (o GetPublicationPackageDetailOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetail) string { return v.PackageType }).(pulumi.StringOutput)
}

func (o GetPublicationPackageDetailOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetail) string { return v.PackageVersion }).(pulumi.StringOutput)
}

type GetPublicationPackageDetailArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetail)(nil)).Elem()
}

func (o GetPublicationPackageDetailArrayOutput) ToGetPublicationPackageDetailArrayOutput() GetPublicationPackageDetailArrayOutput {
	return o
}

func (o GetPublicationPackageDetailArrayOutput) ToGetPublicationPackageDetailArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailArrayOutput {
	return o
}

func (o GetPublicationPackageDetailArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetail] {
	return pulumix.Output[[]GetPublicationPackageDetail]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageDetailArrayOutput) Index(i pulumi.IntInput) GetPublicationPackageDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackageDetail {
		return vs[0].([]GetPublicationPackageDetail)[vs[1].(int)]
	}).(GetPublicationPackageDetailOutput)
}

type GetPublicationPackageDetailEula struct {
	EulaType    string `pulumi:"eulaType"`
	LicenseText string `pulumi:"licenseText"`
}

// GetPublicationPackageDetailEulaInput is an input type that accepts GetPublicationPackageDetailEulaArgs and GetPublicationPackageDetailEulaOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailEulaInput` via:
//
//	GetPublicationPackageDetailEulaArgs{...}
type GetPublicationPackageDetailEulaInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailEulaOutput() GetPublicationPackageDetailEulaOutput
	ToGetPublicationPackageDetailEulaOutputWithContext(context.Context) GetPublicationPackageDetailEulaOutput
}

type GetPublicationPackageDetailEulaArgs struct {
	EulaType    pulumi.StringInput `pulumi:"eulaType"`
	LicenseText pulumi.StringInput `pulumi:"licenseText"`
}

func (GetPublicationPackageDetailEulaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetailEula)(nil)).Elem()
}

func (i GetPublicationPackageDetailEulaArgs) ToGetPublicationPackageDetailEulaOutput() GetPublicationPackageDetailEulaOutput {
	return i.ToGetPublicationPackageDetailEulaOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailEulaArgs) ToGetPublicationPackageDetailEulaOutputWithContext(ctx context.Context) GetPublicationPackageDetailEulaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailEulaOutput)
}

func (i GetPublicationPackageDetailEulaArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetailEula] {
	return pulumix.Output[GetPublicationPackageDetailEula]{
		OutputState: i.ToGetPublicationPackageDetailEulaOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackageDetailEulaArrayInput is an input type that accepts GetPublicationPackageDetailEulaArray and GetPublicationPackageDetailEulaArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailEulaArrayInput` via:
//
//	GetPublicationPackageDetailEulaArray{ GetPublicationPackageDetailEulaArgs{...} }
type GetPublicationPackageDetailEulaArrayInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailEulaArrayOutput() GetPublicationPackageDetailEulaArrayOutput
	ToGetPublicationPackageDetailEulaArrayOutputWithContext(context.Context) GetPublicationPackageDetailEulaArrayOutput
}

type GetPublicationPackageDetailEulaArray []GetPublicationPackageDetailEulaInput

func (GetPublicationPackageDetailEulaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetailEula)(nil)).Elem()
}

func (i GetPublicationPackageDetailEulaArray) ToGetPublicationPackageDetailEulaArrayOutput() GetPublicationPackageDetailEulaArrayOutput {
	return i.ToGetPublicationPackageDetailEulaArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailEulaArray) ToGetPublicationPackageDetailEulaArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailEulaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailEulaArrayOutput)
}

func (i GetPublicationPackageDetailEulaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetailEula] {
	return pulumix.Output[[]GetPublicationPackageDetailEula]{
		OutputState: i.ToGetPublicationPackageDetailEulaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackageDetailEulaOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailEulaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetailEula)(nil)).Elem()
}

func (o GetPublicationPackageDetailEulaOutput) ToGetPublicationPackageDetailEulaOutput() GetPublicationPackageDetailEulaOutput {
	return o
}

func (o GetPublicationPackageDetailEulaOutput) ToGetPublicationPackageDetailEulaOutputWithContext(ctx context.Context) GetPublicationPackageDetailEulaOutput {
	return o
}

func (o GetPublicationPackageDetailEulaOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetailEula] {
	return pulumix.Output[GetPublicationPackageDetailEula]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageDetailEulaOutput) EulaType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetailEula) string { return v.EulaType }).(pulumi.StringOutput)
}

func (o GetPublicationPackageDetailEulaOutput) LicenseText() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetailEula) string { return v.LicenseText }).(pulumi.StringOutput)
}

type GetPublicationPackageDetailEulaArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailEulaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetailEula)(nil)).Elem()
}

func (o GetPublicationPackageDetailEulaArrayOutput) ToGetPublicationPackageDetailEulaArrayOutput() GetPublicationPackageDetailEulaArrayOutput {
	return o
}

func (o GetPublicationPackageDetailEulaArrayOutput) ToGetPublicationPackageDetailEulaArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailEulaArrayOutput {
	return o
}

func (o GetPublicationPackageDetailEulaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetailEula] {
	return pulumix.Output[[]GetPublicationPackageDetailEula]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageDetailEulaArrayOutput) Index(i pulumi.IntInput) GetPublicationPackageDetailEulaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackageDetailEula {
		return vs[0].([]GetPublicationPackageDetailEula)[vs[1].(int)]
	}).(GetPublicationPackageDetailEulaOutput)
}

type GetPublicationPackageDetailOperatingSystem struct {
	// The name of the operating system.
	Name string `pulumi:"name"`
}

// GetPublicationPackageDetailOperatingSystemInput is an input type that accepts GetPublicationPackageDetailOperatingSystemArgs and GetPublicationPackageDetailOperatingSystemOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailOperatingSystemInput` via:
//
//	GetPublicationPackageDetailOperatingSystemArgs{...}
type GetPublicationPackageDetailOperatingSystemInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailOperatingSystemOutput() GetPublicationPackageDetailOperatingSystemOutput
	ToGetPublicationPackageDetailOperatingSystemOutputWithContext(context.Context) GetPublicationPackageDetailOperatingSystemOutput
}

type GetPublicationPackageDetailOperatingSystemArgs struct {
	// The name of the operating system.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationPackageDetailOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (i GetPublicationPackageDetailOperatingSystemArgs) ToGetPublicationPackageDetailOperatingSystemOutput() GetPublicationPackageDetailOperatingSystemOutput {
	return i.ToGetPublicationPackageDetailOperatingSystemOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailOperatingSystemArgs) ToGetPublicationPackageDetailOperatingSystemOutputWithContext(ctx context.Context) GetPublicationPackageDetailOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailOperatingSystemOutput)
}

func (i GetPublicationPackageDetailOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[GetPublicationPackageDetailOperatingSystem]{
		OutputState: i.ToGetPublicationPackageDetailOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackageDetailOperatingSystemArrayInput is an input type that accepts GetPublicationPackageDetailOperatingSystemArray and GetPublicationPackageDetailOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackageDetailOperatingSystemArrayInput` via:
//
//	GetPublicationPackageDetailOperatingSystemArray{ GetPublicationPackageDetailOperatingSystemArgs{...} }
type GetPublicationPackageDetailOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationPackageDetailOperatingSystemArrayOutput
	ToGetPublicationPackageDetailOperatingSystemArrayOutputWithContext(context.Context) GetPublicationPackageDetailOperatingSystemArrayOutput
}

type GetPublicationPackageDetailOperatingSystemArray []GetPublicationPackageDetailOperatingSystemInput

func (GetPublicationPackageDetailOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (i GetPublicationPackageDetailOperatingSystemArray) ToGetPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationPackageDetailOperatingSystemArrayOutput {
	return i.ToGetPublicationPackageDetailOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackageDetailOperatingSystemArray) ToGetPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageDetailOperatingSystemArrayOutput)
}

func (i GetPublicationPackageDetailOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[[]GetPublicationPackageDetailOperatingSystem]{
		OutputState: i.ToGetPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackageDetailOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (o GetPublicationPackageDetailOperatingSystemOutput) ToGetPublicationPackageDetailOperatingSystemOutput() GetPublicationPackageDetailOperatingSystemOutput {
	return o
}

func (o GetPublicationPackageDetailOperatingSystemOutput) ToGetPublicationPackageDetailOperatingSystemOutputWithContext(ctx context.Context) GetPublicationPackageDetailOperatingSystemOutput {
	return o
}

func (o GetPublicationPackageDetailOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[GetPublicationPackageDetailOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the operating system.
func (o GetPublicationPackageDetailOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageDetailOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationPackageDetailOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageDetailOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (o GetPublicationPackageDetailOperatingSystemArrayOutput) ToGetPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationPackageDetailOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationPackageDetailOperatingSystemArrayOutput) ToGetPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationPackageDetailOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationPackageDetailOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[[]GetPublicationPackageDetailOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageDetailOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetPublicationPackageDetailOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackageDetailOperatingSystem {
		return vs[0].([]GetPublicationPackageDetailOperatingSystem)[vs[1].(int)]
	}).(GetPublicationPackageDetailOperatingSystemOutput)
}

type GetPublicationPackageOperatingSystem struct {
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetPublicationPackageOperatingSystemInput is an input type that accepts GetPublicationPackageOperatingSystemArgs and GetPublicationPackageOperatingSystemOutput values.
// You can construct a concrete instance of `GetPublicationPackageOperatingSystemInput` via:
//
//	GetPublicationPackageOperatingSystemArgs{...}
type GetPublicationPackageOperatingSystemInput interface {
	pulumi.Input

	ToGetPublicationPackageOperatingSystemOutput() GetPublicationPackageOperatingSystemOutput
	ToGetPublicationPackageOperatingSystemOutputWithContext(context.Context) GetPublicationPackageOperatingSystemOutput
}

type GetPublicationPackageOperatingSystemArgs struct {
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationPackageOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageOperatingSystem)(nil)).Elem()
}

func (i GetPublicationPackageOperatingSystemArgs) ToGetPublicationPackageOperatingSystemOutput() GetPublicationPackageOperatingSystemOutput {
	return i.ToGetPublicationPackageOperatingSystemOutputWithContext(context.Background())
}

func (i GetPublicationPackageOperatingSystemArgs) ToGetPublicationPackageOperatingSystemOutputWithContext(ctx context.Context) GetPublicationPackageOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageOperatingSystemOutput)
}

func (i GetPublicationPackageOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageOperatingSystem] {
	return pulumix.Output[GetPublicationPackageOperatingSystem]{
		OutputState: i.ToGetPublicationPackageOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackageOperatingSystemArrayInput is an input type that accepts GetPublicationPackageOperatingSystemArray and GetPublicationPackageOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackageOperatingSystemArrayInput` via:
//
//	GetPublicationPackageOperatingSystemArray{ GetPublicationPackageOperatingSystemArgs{...} }
type GetPublicationPackageOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetPublicationPackageOperatingSystemArrayOutput() GetPublicationPackageOperatingSystemArrayOutput
	ToGetPublicationPackageOperatingSystemArrayOutputWithContext(context.Context) GetPublicationPackageOperatingSystemArrayOutput
}

type GetPublicationPackageOperatingSystemArray []GetPublicationPackageOperatingSystemInput

func (GetPublicationPackageOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageOperatingSystem)(nil)).Elem()
}

func (i GetPublicationPackageOperatingSystemArray) ToGetPublicationPackageOperatingSystemArrayOutput() GetPublicationPackageOperatingSystemArrayOutput {
	return i.ToGetPublicationPackageOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackageOperatingSystemArray) ToGetPublicationPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationPackageOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageOperatingSystemArrayOutput)
}

func (i GetPublicationPackageOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageOperatingSystem] {
	return pulumix.Output[[]GetPublicationPackageOperatingSystem]{
		OutputState: i.ToGetPublicationPackageOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackageOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageOperatingSystem)(nil)).Elem()
}

func (o GetPublicationPackageOperatingSystemOutput) ToGetPublicationPackageOperatingSystemOutput() GetPublicationPackageOperatingSystemOutput {
	return o
}

func (o GetPublicationPackageOperatingSystemOutput) ToGetPublicationPackageOperatingSystemOutputWithContext(ctx context.Context) GetPublicationPackageOperatingSystemOutput {
	return o
}

func (o GetPublicationPackageOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageOperatingSystem] {
	return pulumix.Output[GetPublicationPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the variable.
func (o GetPublicationPackageOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationPackageOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageOperatingSystem)(nil)).Elem()
}

func (o GetPublicationPackageOperatingSystemArrayOutput) ToGetPublicationPackageOperatingSystemArrayOutput() GetPublicationPackageOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationPackageOperatingSystemArrayOutput) ToGetPublicationPackageOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationPackageOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationPackageOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageOperatingSystem] {
	return pulumix.Output[[]GetPublicationPackageOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetPublicationPackageOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackageOperatingSystem {
		return vs[0].([]GetPublicationPackageOperatingSystem)[vs[1].(int)]
	}).(GetPublicationPackageOperatingSystemOutput)
}

type GetPublicationPackageVariable struct {
	// The data type of the variable.
	DataType string `pulumi:"dataType"`
	// The variable's default value.
	DefaultValue string `pulumi:"defaultValue"`
	// A description of the variable.
	Description string `pulumi:"description"`
	// A brief textual description that helps to explain the variable.
	HintMessage string `pulumi:"hintMessage"`
	// Whether the variable is mandatory.
	IsMandatory bool `pulumi:"isMandatory"`
	// The name of the variable.
	Name string `pulumi:"name"`
}

// GetPublicationPackageVariableInput is an input type that accepts GetPublicationPackageVariableArgs and GetPublicationPackageVariableOutput values.
// You can construct a concrete instance of `GetPublicationPackageVariableInput` via:
//
//	GetPublicationPackageVariableArgs{...}
type GetPublicationPackageVariableInput interface {
	pulumi.Input

	ToGetPublicationPackageVariableOutput() GetPublicationPackageVariableOutput
	ToGetPublicationPackageVariableOutputWithContext(context.Context) GetPublicationPackageVariableOutput
}

type GetPublicationPackageVariableArgs struct {
	// The data type of the variable.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The variable's default value.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// A description of the variable.
	Description pulumi.StringInput `pulumi:"description"`
	// A brief textual description that helps to explain the variable.
	HintMessage pulumi.StringInput `pulumi:"hintMessage"`
	// Whether the variable is mandatory.
	IsMandatory pulumi.BoolInput `pulumi:"isMandatory"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationPackageVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageVariable)(nil)).Elem()
}

func (i GetPublicationPackageVariableArgs) ToGetPublicationPackageVariableOutput() GetPublicationPackageVariableOutput {
	return i.ToGetPublicationPackageVariableOutputWithContext(context.Background())
}

func (i GetPublicationPackageVariableArgs) ToGetPublicationPackageVariableOutputWithContext(ctx context.Context) GetPublicationPackageVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageVariableOutput)
}

func (i GetPublicationPackageVariableArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageVariable] {
	return pulumix.Output[GetPublicationPackageVariable]{
		OutputState: i.ToGetPublicationPackageVariableOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackageVariableArrayInput is an input type that accepts GetPublicationPackageVariableArray and GetPublicationPackageVariableArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackageVariableArrayInput` via:
//
//	GetPublicationPackageVariableArray{ GetPublicationPackageVariableArgs{...} }
type GetPublicationPackageVariableArrayInput interface {
	pulumi.Input

	ToGetPublicationPackageVariableArrayOutput() GetPublicationPackageVariableArrayOutput
	ToGetPublicationPackageVariableArrayOutputWithContext(context.Context) GetPublicationPackageVariableArrayOutput
}

type GetPublicationPackageVariableArray []GetPublicationPackageVariableInput

func (GetPublicationPackageVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageVariable)(nil)).Elem()
}

func (i GetPublicationPackageVariableArray) ToGetPublicationPackageVariableArrayOutput() GetPublicationPackageVariableArrayOutput {
	return i.ToGetPublicationPackageVariableArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackageVariableArray) ToGetPublicationPackageVariableArrayOutputWithContext(ctx context.Context) GetPublicationPackageVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackageVariableArrayOutput)
}

func (i GetPublicationPackageVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageVariable] {
	return pulumix.Output[[]GetPublicationPackageVariable]{
		OutputState: i.ToGetPublicationPackageVariableArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackageVariableOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackageVariable)(nil)).Elem()
}

func (o GetPublicationPackageVariableOutput) ToGetPublicationPackageVariableOutput() GetPublicationPackageVariableOutput {
	return o
}

func (o GetPublicationPackageVariableOutput) ToGetPublicationPackageVariableOutputWithContext(ctx context.Context) GetPublicationPackageVariableOutput {
	return o
}

func (o GetPublicationPackageVariableOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackageVariable] {
	return pulumix.Output[GetPublicationPackageVariable]{
		OutputState: o.OutputState,
	}
}

// The data type of the variable.
func (o GetPublicationPackageVariableOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) string { return v.DataType }).(pulumi.StringOutput)
}

// The variable's default value.
func (o GetPublicationPackageVariableOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// A description of the variable.
func (o GetPublicationPackageVariableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) string { return v.Description }).(pulumi.StringOutput)
}

// A brief textual description that helps to explain the variable.
func (o GetPublicationPackageVariableOutput) HintMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) string { return v.HintMessage }).(pulumi.StringOutput)
}

// Whether the variable is mandatory.
func (o GetPublicationPackageVariableOutput) IsMandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) bool { return v.IsMandatory }).(pulumi.BoolOutput)
}

// The name of the variable.
func (o GetPublicationPackageVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackageVariable) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationPackageVariableArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackageVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackageVariable)(nil)).Elem()
}

func (o GetPublicationPackageVariableArrayOutput) ToGetPublicationPackageVariableArrayOutput() GetPublicationPackageVariableArrayOutput {
	return o
}

func (o GetPublicationPackageVariableArrayOutput) ToGetPublicationPackageVariableArrayOutputWithContext(ctx context.Context) GetPublicationPackageVariableArrayOutput {
	return o
}

func (o GetPublicationPackageVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackageVariable] {
	return pulumix.Output[[]GetPublicationPackageVariable]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackageVariableArrayOutput) Index(i pulumi.IntInput) GetPublicationPackageVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackageVariable {
		return vs[0].([]GetPublicationPackageVariable)[vs[1].(int)]
	}).(GetPublicationPackageVariableOutput)
}

type GetPublicationPackagesFilter struct {
	// The name of the variable.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetPublicationPackagesFilterInput is an input type that accepts GetPublicationPackagesFilterArgs and GetPublicationPackagesFilterOutput values.
// You can construct a concrete instance of `GetPublicationPackagesFilterInput` via:
//
//	GetPublicationPackagesFilterArgs{...}
type GetPublicationPackagesFilterInput interface {
	pulumi.Input

	ToGetPublicationPackagesFilterOutput() GetPublicationPackagesFilterOutput
	ToGetPublicationPackagesFilterOutputWithContext(context.Context) GetPublicationPackagesFilterOutput
}

type GetPublicationPackagesFilterArgs struct {
	// The name of the variable.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPublicationPackagesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackagesFilter)(nil)).Elem()
}

func (i GetPublicationPackagesFilterArgs) ToGetPublicationPackagesFilterOutput() GetPublicationPackagesFilterOutput {
	return i.ToGetPublicationPackagesFilterOutputWithContext(context.Background())
}

func (i GetPublicationPackagesFilterArgs) ToGetPublicationPackagesFilterOutputWithContext(ctx context.Context) GetPublicationPackagesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackagesFilterOutput)
}

func (i GetPublicationPackagesFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackagesFilter] {
	return pulumix.Output[GetPublicationPackagesFilter]{
		OutputState: i.ToGetPublicationPackagesFilterOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackagesFilterArrayInput is an input type that accepts GetPublicationPackagesFilterArray and GetPublicationPackagesFilterArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackagesFilterArrayInput` via:
//
//	GetPublicationPackagesFilterArray{ GetPublicationPackagesFilterArgs{...} }
type GetPublicationPackagesFilterArrayInput interface {
	pulumi.Input

	ToGetPublicationPackagesFilterArrayOutput() GetPublicationPackagesFilterArrayOutput
	ToGetPublicationPackagesFilterArrayOutputWithContext(context.Context) GetPublicationPackagesFilterArrayOutput
}

type GetPublicationPackagesFilterArray []GetPublicationPackagesFilterInput

func (GetPublicationPackagesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackagesFilter)(nil)).Elem()
}

func (i GetPublicationPackagesFilterArray) ToGetPublicationPackagesFilterArrayOutput() GetPublicationPackagesFilterArrayOutput {
	return i.ToGetPublicationPackagesFilterArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackagesFilterArray) ToGetPublicationPackagesFilterArrayOutputWithContext(ctx context.Context) GetPublicationPackagesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackagesFilterArrayOutput)
}

func (i GetPublicationPackagesFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackagesFilter] {
	return pulumix.Output[[]GetPublicationPackagesFilter]{
		OutputState: i.ToGetPublicationPackagesFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackagesFilterOutput struct{ *pulumi.OutputState }

func (GetPublicationPackagesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackagesFilter)(nil)).Elem()
}

func (o GetPublicationPackagesFilterOutput) ToGetPublicationPackagesFilterOutput() GetPublicationPackagesFilterOutput {
	return o
}

func (o GetPublicationPackagesFilterOutput) ToGetPublicationPackagesFilterOutputWithContext(ctx context.Context) GetPublicationPackagesFilterOutput {
	return o
}

func (o GetPublicationPackagesFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackagesFilter] {
	return pulumix.Output[GetPublicationPackagesFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the variable.
func (o GetPublicationPackagesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPublicationPackagesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPublicationPackagesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetPublicationPackagesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPublicationPackagesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPublicationPackagesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackagesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackagesFilter)(nil)).Elem()
}

func (o GetPublicationPackagesFilterArrayOutput) ToGetPublicationPackagesFilterArrayOutput() GetPublicationPackagesFilterArrayOutput {
	return o
}

func (o GetPublicationPackagesFilterArrayOutput) ToGetPublicationPackagesFilterArrayOutputWithContext(ctx context.Context) GetPublicationPackagesFilterArrayOutput {
	return o
}

func (o GetPublicationPackagesFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackagesFilter] {
	return pulumix.Output[[]GetPublicationPackagesFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackagesFilterArrayOutput) Index(i pulumi.IntInput) GetPublicationPackagesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackagesFilter {
		return vs[0].([]GetPublicationPackagesFilter)[vs[1].(int)]
	}).(GetPublicationPackagesFilterOutput)
}

type GetPublicationPackagesPublicationPackage struct {
	// The ID of the listing that the specified package belongs to.
	ListingId string `pulumi:"listingId"`
	// A filter to return only packages that match the given package type exactly.
	PackageType string `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion string `pulumi:"packageVersion"`
	// The unique identifier for the package resource.
	ResourceId string `pulumi:"resourceId"`
	// The date and time the publication package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
}

// GetPublicationPackagesPublicationPackageInput is an input type that accepts GetPublicationPackagesPublicationPackageArgs and GetPublicationPackagesPublicationPackageOutput values.
// You can construct a concrete instance of `GetPublicationPackagesPublicationPackageInput` via:
//
//	GetPublicationPackagesPublicationPackageArgs{...}
type GetPublicationPackagesPublicationPackageInput interface {
	pulumi.Input

	ToGetPublicationPackagesPublicationPackageOutput() GetPublicationPackagesPublicationPackageOutput
	ToGetPublicationPackagesPublicationPackageOutputWithContext(context.Context) GetPublicationPackagesPublicationPackageOutput
}

type GetPublicationPackagesPublicationPackageArgs struct {
	// The ID of the listing that the specified package belongs to.
	ListingId pulumi.StringInput `pulumi:"listingId"`
	// A filter to return only packages that match the given package type exactly.
	PackageType pulumi.StringInput `pulumi:"packageType"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
	// The unique identifier for the package resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The date and time the publication package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
}

func (GetPublicationPackagesPublicationPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackagesPublicationPackage)(nil)).Elem()
}

func (i GetPublicationPackagesPublicationPackageArgs) ToGetPublicationPackagesPublicationPackageOutput() GetPublicationPackagesPublicationPackageOutput {
	return i.ToGetPublicationPackagesPublicationPackageOutputWithContext(context.Background())
}

func (i GetPublicationPackagesPublicationPackageArgs) ToGetPublicationPackagesPublicationPackageOutputWithContext(ctx context.Context) GetPublicationPackagesPublicationPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackagesPublicationPackageOutput)
}

func (i GetPublicationPackagesPublicationPackageArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackagesPublicationPackage] {
	return pulumix.Output[GetPublicationPackagesPublicationPackage]{
		OutputState: i.ToGetPublicationPackagesPublicationPackageOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationPackagesPublicationPackageArrayInput is an input type that accepts GetPublicationPackagesPublicationPackageArray and GetPublicationPackagesPublicationPackageArrayOutput values.
// You can construct a concrete instance of `GetPublicationPackagesPublicationPackageArrayInput` via:
//
//	GetPublicationPackagesPublicationPackageArray{ GetPublicationPackagesPublicationPackageArgs{...} }
type GetPublicationPackagesPublicationPackageArrayInput interface {
	pulumi.Input

	ToGetPublicationPackagesPublicationPackageArrayOutput() GetPublicationPackagesPublicationPackageArrayOutput
	ToGetPublicationPackagesPublicationPackageArrayOutputWithContext(context.Context) GetPublicationPackagesPublicationPackageArrayOutput
}

type GetPublicationPackagesPublicationPackageArray []GetPublicationPackagesPublicationPackageInput

func (GetPublicationPackagesPublicationPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackagesPublicationPackage)(nil)).Elem()
}

func (i GetPublicationPackagesPublicationPackageArray) ToGetPublicationPackagesPublicationPackageArrayOutput() GetPublicationPackagesPublicationPackageArrayOutput {
	return i.ToGetPublicationPackagesPublicationPackageArrayOutputWithContext(context.Background())
}

func (i GetPublicationPackagesPublicationPackageArray) ToGetPublicationPackagesPublicationPackageArrayOutputWithContext(ctx context.Context) GetPublicationPackagesPublicationPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationPackagesPublicationPackageArrayOutput)
}

func (i GetPublicationPackagesPublicationPackageArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackagesPublicationPackage] {
	return pulumix.Output[[]GetPublicationPackagesPublicationPackage]{
		OutputState: i.ToGetPublicationPackagesPublicationPackageArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationPackagesPublicationPackageOutput struct{ *pulumi.OutputState }

func (GetPublicationPackagesPublicationPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationPackagesPublicationPackage)(nil)).Elem()
}

func (o GetPublicationPackagesPublicationPackageOutput) ToGetPublicationPackagesPublicationPackageOutput() GetPublicationPackagesPublicationPackageOutput {
	return o
}

func (o GetPublicationPackagesPublicationPackageOutput) ToGetPublicationPackagesPublicationPackageOutputWithContext(ctx context.Context) GetPublicationPackagesPublicationPackageOutput {
	return o
}

func (o GetPublicationPackagesPublicationPackageOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationPackagesPublicationPackage] {
	return pulumix.Output[GetPublicationPackagesPublicationPackage]{
		OutputState: o.OutputState,
	}
}

// The ID of the listing that the specified package belongs to.
func (o GetPublicationPackagesPublicationPackageOutput) ListingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesPublicationPackage) string { return v.ListingId }).(pulumi.StringOutput)
}

// A filter to return only packages that match the given package type exactly.
func (o GetPublicationPackagesPublicationPackageOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesPublicationPackage) string { return v.PackageType }).(pulumi.StringOutput)
}

// The version of the package. Package versions are unique within a listing.
func (o GetPublicationPackagesPublicationPackageOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesPublicationPackage) string { return v.PackageVersion }).(pulumi.StringOutput)
}

// The unique identifier for the package resource.
func (o GetPublicationPackagesPublicationPackageOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesPublicationPackage) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The date and time the publication package was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
func (o GetPublicationPackagesPublicationPackageOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationPackagesPublicationPackage) string { return v.TimeCreated }).(pulumi.StringOutput)
}

type GetPublicationPackagesPublicationPackageArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationPackagesPublicationPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationPackagesPublicationPackage)(nil)).Elem()
}

func (o GetPublicationPackagesPublicationPackageArrayOutput) ToGetPublicationPackagesPublicationPackageArrayOutput() GetPublicationPackagesPublicationPackageArrayOutput {
	return o
}

func (o GetPublicationPackagesPublicationPackageArrayOutput) ToGetPublicationPackagesPublicationPackageArrayOutputWithContext(ctx context.Context) GetPublicationPackagesPublicationPackageArrayOutput {
	return o
}

func (o GetPublicationPackagesPublicationPackageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationPackagesPublicationPackage] {
	return pulumix.Output[[]GetPublicationPackagesPublicationPackage]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationPackagesPublicationPackageArrayOutput) Index(i pulumi.IntInput) GetPublicationPackagesPublicationPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationPackagesPublicationPackage {
		return vs[0].([]GetPublicationPackagesPublicationPackage)[vs[1].(int)]
	}).(GetPublicationPackagesPublicationPackageOutput)
}

type GetPublicationSupportContact struct {
	// The email of the contact.
	Email string `pulumi:"email"`
	// The name of the operating system.
	Name string `pulumi:"name"`
	// The phone number of the contact.
	Phone string `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject string `pulumi:"subject"`
}

// GetPublicationSupportContactInput is an input type that accepts GetPublicationSupportContactArgs and GetPublicationSupportContactOutput values.
// You can construct a concrete instance of `GetPublicationSupportContactInput` via:
//
//	GetPublicationSupportContactArgs{...}
type GetPublicationSupportContactInput interface {
	pulumi.Input

	ToGetPublicationSupportContactOutput() GetPublicationSupportContactOutput
	ToGetPublicationSupportContactOutputWithContext(context.Context) GetPublicationSupportContactOutput
}

type GetPublicationSupportContactArgs struct {
	// The email of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// The name of the operating system.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the contact.
	Phone pulumi.StringInput `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (GetPublicationSupportContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationSupportContact)(nil)).Elem()
}

func (i GetPublicationSupportContactArgs) ToGetPublicationSupportContactOutput() GetPublicationSupportContactOutput {
	return i.ToGetPublicationSupportContactOutputWithContext(context.Background())
}

func (i GetPublicationSupportContactArgs) ToGetPublicationSupportContactOutputWithContext(ctx context.Context) GetPublicationSupportContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationSupportContactOutput)
}

func (i GetPublicationSupportContactArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationSupportContact] {
	return pulumix.Output[GetPublicationSupportContact]{
		OutputState: i.ToGetPublicationSupportContactOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationSupportContactArrayInput is an input type that accepts GetPublicationSupportContactArray and GetPublicationSupportContactArrayOutput values.
// You can construct a concrete instance of `GetPublicationSupportContactArrayInput` via:
//
//	GetPublicationSupportContactArray{ GetPublicationSupportContactArgs{...} }
type GetPublicationSupportContactArrayInput interface {
	pulumi.Input

	ToGetPublicationSupportContactArrayOutput() GetPublicationSupportContactArrayOutput
	ToGetPublicationSupportContactArrayOutputWithContext(context.Context) GetPublicationSupportContactArrayOutput
}

type GetPublicationSupportContactArray []GetPublicationSupportContactInput

func (GetPublicationSupportContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationSupportContact)(nil)).Elem()
}

func (i GetPublicationSupportContactArray) ToGetPublicationSupportContactArrayOutput() GetPublicationSupportContactArrayOutput {
	return i.ToGetPublicationSupportContactArrayOutputWithContext(context.Background())
}

func (i GetPublicationSupportContactArray) ToGetPublicationSupportContactArrayOutputWithContext(ctx context.Context) GetPublicationSupportContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationSupportContactArrayOutput)
}

func (i GetPublicationSupportContactArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationSupportContact] {
	return pulumix.Output[[]GetPublicationSupportContact]{
		OutputState: i.ToGetPublicationSupportContactArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationSupportContactOutput struct{ *pulumi.OutputState }

func (GetPublicationSupportContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationSupportContact)(nil)).Elem()
}

func (o GetPublicationSupportContactOutput) ToGetPublicationSupportContactOutput() GetPublicationSupportContactOutput {
	return o
}

func (o GetPublicationSupportContactOutput) ToGetPublicationSupportContactOutputWithContext(ctx context.Context) GetPublicationSupportContactOutput {
	return o
}

func (o GetPublicationSupportContactOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationSupportContact] {
	return pulumix.Output[GetPublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

// The email of the contact.
func (o GetPublicationSupportContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationSupportContact) string { return v.Email }).(pulumi.StringOutput)
}

// The name of the operating system.
func (o GetPublicationSupportContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationSupportContact) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the contact.
func (o GetPublicationSupportContactOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationSupportContact) string { return v.Phone }).(pulumi.StringOutput)
}

// The email subject line to use when contacting support.
func (o GetPublicationSupportContactOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationSupportContact) string { return v.Subject }).(pulumi.StringOutput)
}

type GetPublicationSupportContactArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationSupportContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationSupportContact)(nil)).Elem()
}

func (o GetPublicationSupportContactArrayOutput) ToGetPublicationSupportContactArrayOutput() GetPublicationSupportContactArrayOutput {
	return o
}

func (o GetPublicationSupportContactArrayOutput) ToGetPublicationSupportContactArrayOutputWithContext(ctx context.Context) GetPublicationSupportContactArrayOutput {
	return o
}

func (o GetPublicationSupportContactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationSupportContact] {
	return pulumix.Output[[]GetPublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationSupportContactArrayOutput) Index(i pulumi.IntInput) GetPublicationSupportContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationSupportContact {
		return vs[0].([]GetPublicationSupportContact)[vs[1].(int)]
	}).(GetPublicationSupportContactOutput)
}

type GetPublicationSupportedOperatingSystem struct {
	// The name of the operating system.
	Name string `pulumi:"name"`
}

// GetPublicationSupportedOperatingSystemInput is an input type that accepts GetPublicationSupportedOperatingSystemArgs and GetPublicationSupportedOperatingSystemOutput values.
// You can construct a concrete instance of `GetPublicationSupportedOperatingSystemInput` via:
//
//	GetPublicationSupportedOperatingSystemArgs{...}
type GetPublicationSupportedOperatingSystemInput interface {
	pulumi.Input

	ToGetPublicationSupportedOperatingSystemOutput() GetPublicationSupportedOperatingSystemOutput
	ToGetPublicationSupportedOperatingSystemOutputWithContext(context.Context) GetPublicationSupportedOperatingSystemOutput
}

type GetPublicationSupportedOperatingSystemArgs struct {
	// The name of the operating system.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationSupportedOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i GetPublicationSupportedOperatingSystemArgs) ToGetPublicationSupportedOperatingSystemOutput() GetPublicationSupportedOperatingSystemOutput {
	return i.ToGetPublicationSupportedOperatingSystemOutputWithContext(context.Background())
}

func (i GetPublicationSupportedOperatingSystemArgs) ToGetPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) GetPublicationSupportedOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationSupportedOperatingSystemOutput)
}

func (i GetPublicationSupportedOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationSupportedOperatingSystem] {
	return pulumix.Output[GetPublicationSupportedOperatingSystem]{
		OutputState: i.ToGetPublicationSupportedOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationSupportedOperatingSystemArrayInput is an input type that accepts GetPublicationSupportedOperatingSystemArray and GetPublicationSupportedOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetPublicationSupportedOperatingSystemArrayInput` via:
//
//	GetPublicationSupportedOperatingSystemArray{ GetPublicationSupportedOperatingSystemArgs{...} }
type GetPublicationSupportedOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetPublicationSupportedOperatingSystemArrayOutput() GetPublicationSupportedOperatingSystemArrayOutput
	ToGetPublicationSupportedOperatingSystemArrayOutputWithContext(context.Context) GetPublicationSupportedOperatingSystemArrayOutput
}

type GetPublicationSupportedOperatingSystemArray []GetPublicationSupportedOperatingSystemInput

func (GetPublicationSupportedOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i GetPublicationSupportedOperatingSystemArray) ToGetPublicationSupportedOperatingSystemArrayOutput() GetPublicationSupportedOperatingSystemArrayOutput {
	return i.ToGetPublicationSupportedOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetPublicationSupportedOperatingSystemArray) ToGetPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationSupportedOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationSupportedOperatingSystemArrayOutput)
}

func (i GetPublicationSupportedOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationSupportedOperatingSystem] {
	return pulumix.Output[[]GetPublicationSupportedOperatingSystem]{
		OutputState: i.ToGetPublicationSupportedOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationSupportedOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetPublicationSupportedOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o GetPublicationSupportedOperatingSystemOutput) ToGetPublicationSupportedOperatingSystemOutput() GetPublicationSupportedOperatingSystemOutput {
	return o
}

func (o GetPublicationSupportedOperatingSystemOutput) ToGetPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) GetPublicationSupportedOperatingSystemOutput {
	return o
}

func (o GetPublicationSupportedOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationSupportedOperatingSystem] {
	return pulumix.Output[GetPublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the operating system.
func (o GetPublicationSupportedOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationSupportedOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationSupportedOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationSupportedOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o GetPublicationSupportedOperatingSystemArrayOutput) ToGetPublicationSupportedOperatingSystemArrayOutput() GetPublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationSupportedOperatingSystemArrayOutput) ToGetPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationSupportedOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationSupportedOperatingSystem] {
	return pulumix.Output[[]GetPublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationSupportedOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetPublicationSupportedOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationSupportedOperatingSystem {
		return vs[0].([]GetPublicationSupportedOperatingSystem)[vs[1].(int)]
	}).(GetPublicationSupportedOperatingSystemOutput)
}

type GetPublicationsFilter struct {
	// The name of the publication.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetPublicationsFilterInput is an input type that accepts GetPublicationsFilterArgs and GetPublicationsFilterOutput values.
// You can construct a concrete instance of `GetPublicationsFilterInput` via:
//
//	GetPublicationsFilterArgs{...}
type GetPublicationsFilterInput interface {
	pulumi.Input

	ToGetPublicationsFilterOutput() GetPublicationsFilterOutput
	ToGetPublicationsFilterOutputWithContext(context.Context) GetPublicationsFilterOutput
}

type GetPublicationsFilterArgs struct {
	// The name of the publication.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPublicationsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsFilter)(nil)).Elem()
}

func (i GetPublicationsFilterArgs) ToGetPublicationsFilterOutput() GetPublicationsFilterOutput {
	return i.ToGetPublicationsFilterOutputWithContext(context.Background())
}

func (i GetPublicationsFilterArgs) ToGetPublicationsFilterOutputWithContext(ctx context.Context) GetPublicationsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsFilterOutput)
}

func (i GetPublicationsFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsFilter] {
	return pulumix.Output[GetPublicationsFilter]{
		OutputState: i.ToGetPublicationsFilterOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsFilterArrayInput is an input type that accepts GetPublicationsFilterArray and GetPublicationsFilterArrayOutput values.
// You can construct a concrete instance of `GetPublicationsFilterArrayInput` via:
//
//	GetPublicationsFilterArray{ GetPublicationsFilterArgs{...} }
type GetPublicationsFilterArrayInput interface {
	pulumi.Input

	ToGetPublicationsFilterArrayOutput() GetPublicationsFilterArrayOutput
	ToGetPublicationsFilterArrayOutputWithContext(context.Context) GetPublicationsFilterArrayOutput
}

type GetPublicationsFilterArray []GetPublicationsFilterInput

func (GetPublicationsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsFilter)(nil)).Elem()
}

func (i GetPublicationsFilterArray) ToGetPublicationsFilterArrayOutput() GetPublicationsFilterArrayOutput {
	return i.ToGetPublicationsFilterArrayOutputWithContext(context.Background())
}

func (i GetPublicationsFilterArray) ToGetPublicationsFilterArrayOutputWithContext(ctx context.Context) GetPublicationsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsFilterArrayOutput)
}

func (i GetPublicationsFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsFilter] {
	return pulumix.Output[[]GetPublicationsFilter]{
		OutputState: i.ToGetPublicationsFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsFilterOutput struct{ *pulumi.OutputState }

func (GetPublicationsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsFilter)(nil)).Elem()
}

func (o GetPublicationsFilterOutput) ToGetPublicationsFilterOutput() GetPublicationsFilterOutput {
	return o
}

func (o GetPublicationsFilterOutput) ToGetPublicationsFilterOutputWithContext(ctx context.Context) GetPublicationsFilterOutput {
	return o
}

func (o GetPublicationsFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsFilter] {
	return pulumix.Output[GetPublicationsFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the publication.
func (o GetPublicationsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPublicationsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPublicationsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetPublicationsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPublicationsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPublicationsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsFilter)(nil)).Elem()
}

func (o GetPublicationsFilterArrayOutput) ToGetPublicationsFilterArrayOutput() GetPublicationsFilterArrayOutput {
	return o
}

func (o GetPublicationsFilterArrayOutput) ToGetPublicationsFilterArrayOutputWithContext(ctx context.Context) GetPublicationsFilterArrayOutput {
	return o
}

func (o GetPublicationsFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsFilter] {
	return pulumix.Output[[]GetPublicationsFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsFilterArrayOutput) Index(i pulumi.IntInput) GetPublicationsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsFilter {
		return vs[0].([]GetPublicationsFilter)[vs[1].(int)]
	}).(GetPublicationsFilterOutput)
}

type GetPublicationsPublication struct {
	// The unique identifier for the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The model for upload data for images and icons.
	Icons []GetPublicationsPublicationIcon `pulumi:"icons"`
	// The unique identifier for the publication in Marketplace.
	Id                      string `pulumi:"id"`
	IsAgreementAcknowledged bool   `pulumi:"isAgreementAcknowledged"`
	// The type of the listing.
	ListingType string `pulumi:"listingType"`
	// A long description of the publication to use in the listing.
	LongDescription string `pulumi:"longDescription"`
	// The name of the publication.
	Name           string                                    `pulumi:"name"`
	PackageDetails []GetPublicationsPublicationPackageDetail `pulumi:"packageDetails"`
	// The listing's package type.
	PackageType string `pulumi:"packageType"`
	// A short description of the publication to use in the listing.
	ShortDescription string `pulumi:"shortDescription"`
	// The lifecycle state of the publication.
	State string `pulumi:"state"`
	// Contact information for getting support from the publisher for the listing.
	SupportContacts []GetPublicationsPublicationSupportContact `pulumi:"supportContacts"`
	// The list of operating systems supported by the listing.
	SupportedOperatingSystems []GetPublicationsPublicationSupportedOperatingSystem `pulumi:"supportedOperatingSystems"`
	// The date and time the publication was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
}

// GetPublicationsPublicationInput is an input type that accepts GetPublicationsPublicationArgs and GetPublicationsPublicationOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationInput` via:
//
//	GetPublicationsPublicationArgs{...}
type GetPublicationsPublicationInput interface {
	pulumi.Input

	ToGetPublicationsPublicationOutput() GetPublicationsPublicationOutput
	ToGetPublicationsPublicationOutputWithContext(context.Context) GetPublicationsPublicationOutput
}

type GetPublicationsPublicationArgs struct {
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The model for upload data for images and icons.
	Icons GetPublicationsPublicationIconArrayInput `pulumi:"icons"`
	// The unique identifier for the publication in Marketplace.
	Id                      pulumi.StringInput `pulumi:"id"`
	IsAgreementAcknowledged pulumi.BoolInput   `pulumi:"isAgreementAcknowledged"`
	// The type of the listing.
	ListingType pulumi.StringInput `pulumi:"listingType"`
	// A long description of the publication to use in the listing.
	LongDescription pulumi.StringInput `pulumi:"longDescription"`
	// The name of the publication.
	Name           pulumi.StringInput                                `pulumi:"name"`
	PackageDetails GetPublicationsPublicationPackageDetailArrayInput `pulumi:"packageDetails"`
	// The listing's package type.
	PackageType pulumi.StringInput `pulumi:"packageType"`
	// A short description of the publication to use in the listing.
	ShortDescription pulumi.StringInput `pulumi:"shortDescription"`
	// The lifecycle state of the publication.
	State pulumi.StringInput `pulumi:"state"`
	// Contact information for getting support from the publisher for the listing.
	SupportContacts GetPublicationsPublicationSupportContactArrayInput `pulumi:"supportContacts"`
	// The list of operating systems supported by the listing.
	SupportedOperatingSystems GetPublicationsPublicationSupportedOperatingSystemArrayInput `pulumi:"supportedOperatingSystems"`
	// The date and time the publication was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
}

func (GetPublicationsPublicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublication)(nil)).Elem()
}

func (i GetPublicationsPublicationArgs) ToGetPublicationsPublicationOutput() GetPublicationsPublicationOutput {
	return i.ToGetPublicationsPublicationOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationArgs) ToGetPublicationsPublicationOutputWithContext(ctx context.Context) GetPublicationsPublicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationOutput)
}

func (i GetPublicationsPublicationArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublication] {
	return pulumix.Output[GetPublicationsPublication]{
		OutputState: i.ToGetPublicationsPublicationOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationArrayInput is an input type that accepts GetPublicationsPublicationArray and GetPublicationsPublicationArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationArrayInput` via:
//
//	GetPublicationsPublicationArray{ GetPublicationsPublicationArgs{...} }
type GetPublicationsPublicationArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationArrayOutput() GetPublicationsPublicationArrayOutput
	ToGetPublicationsPublicationArrayOutputWithContext(context.Context) GetPublicationsPublicationArrayOutput
}

type GetPublicationsPublicationArray []GetPublicationsPublicationInput

func (GetPublicationsPublicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublication)(nil)).Elem()
}

func (i GetPublicationsPublicationArray) ToGetPublicationsPublicationArrayOutput() GetPublicationsPublicationArrayOutput {
	return i.ToGetPublicationsPublicationArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationArray) ToGetPublicationsPublicationArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationArrayOutput)
}

func (i GetPublicationsPublicationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublication] {
	return pulumix.Output[[]GetPublicationsPublication]{
		OutputState: i.ToGetPublicationsPublicationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublication)(nil)).Elem()
}

func (o GetPublicationsPublicationOutput) ToGetPublicationsPublicationOutput() GetPublicationsPublicationOutput {
	return o
}

func (o GetPublicationsPublicationOutput) ToGetPublicationsPublicationOutputWithContext(ctx context.Context) GetPublicationsPublicationOutput {
	return o
}

func (o GetPublicationsPublicationOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublication] {
	return pulumix.Output[GetPublicationsPublication]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the compartment.
func (o GetPublicationsPublicationOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The defined tags associated with this resource, if any. Each key is predefined and scoped to namespaces. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
func (o GetPublicationsPublicationOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPublicationsPublication) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The freeform tags associated with this resource, if any. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
func (o GetPublicationsPublicationOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetPublicationsPublication) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The model for upload data for images and icons.
func (o GetPublicationsPublicationOutput) Icons() GetPublicationsPublicationIconArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublication) []GetPublicationsPublicationIcon { return v.Icons }).(GetPublicationsPublicationIconArrayOutput)
}

// The unique identifier for the publication in Marketplace.
func (o GetPublicationsPublicationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPublicationsPublicationOutput) IsAgreementAcknowledged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPublicationsPublication) bool { return v.IsAgreementAcknowledged }).(pulumi.BoolOutput)
}

// The type of the listing.
func (o GetPublicationsPublicationOutput) ListingType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.ListingType }).(pulumi.StringOutput)
}

// A long description of the publication to use in the listing.
func (o GetPublicationsPublicationOutput) LongDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.LongDescription }).(pulumi.StringOutput)
}

// The name of the publication.
func (o GetPublicationsPublicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPublicationsPublicationOutput) PackageDetails() GetPublicationsPublicationPackageDetailArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublication) []GetPublicationsPublicationPackageDetail { return v.PackageDetails }).(GetPublicationsPublicationPackageDetailArrayOutput)
}

// The listing's package type.
func (o GetPublicationsPublicationOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.PackageType }).(pulumi.StringOutput)
}

// A short description of the publication to use in the listing.
func (o GetPublicationsPublicationOutput) ShortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.ShortDescription }).(pulumi.StringOutput)
}

// The lifecycle state of the publication.
func (o GetPublicationsPublicationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.State }).(pulumi.StringOutput)
}

// Contact information for getting support from the publisher for the listing.
func (o GetPublicationsPublicationOutput) SupportContacts() GetPublicationsPublicationSupportContactArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublication) []GetPublicationsPublicationSupportContact {
		return v.SupportContacts
	}).(GetPublicationsPublicationSupportContactArrayOutput)
}

// The list of operating systems supported by the listing.
func (o GetPublicationsPublicationOutput) SupportedOperatingSystems() GetPublicationsPublicationSupportedOperatingSystemArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublication) []GetPublicationsPublicationSupportedOperatingSystem {
		return v.SupportedOperatingSystems
	}).(GetPublicationsPublicationSupportedOperatingSystemArrayOutput)
}

// The date and time the publication was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2016-08-25T21:10:29.600Z`
func (o GetPublicationsPublicationOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublication) string { return v.TimeCreated }).(pulumi.StringOutput)
}

type GetPublicationsPublicationArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublication)(nil)).Elem()
}

func (o GetPublicationsPublicationArrayOutput) ToGetPublicationsPublicationArrayOutput() GetPublicationsPublicationArrayOutput {
	return o
}

func (o GetPublicationsPublicationArrayOutput) ToGetPublicationsPublicationArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationArrayOutput {
	return o
}

func (o GetPublicationsPublicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublication] {
	return pulumix.Output[[]GetPublicationsPublication]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublication {
		return vs[0].([]GetPublicationsPublication)[vs[1].(int)]
	}).(GetPublicationsPublicationOutput)
}

type GetPublicationsPublicationIcon struct {
	// The content URL of the upload data.
	ContentUrl string `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension string `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType string `pulumi:"mimeType"`
	// The name of the publication.
	Name string `pulumi:"name"`
}

// GetPublicationsPublicationIconInput is an input type that accepts GetPublicationsPublicationIconArgs and GetPublicationsPublicationIconOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationIconInput` via:
//
//	GetPublicationsPublicationIconArgs{...}
type GetPublicationsPublicationIconInput interface {
	pulumi.Input

	ToGetPublicationsPublicationIconOutput() GetPublicationsPublicationIconOutput
	ToGetPublicationsPublicationIconOutputWithContext(context.Context) GetPublicationsPublicationIconOutput
}

type GetPublicationsPublicationIconArgs struct {
	// The content URL of the upload data.
	ContentUrl pulumi.StringInput `pulumi:"contentUrl"`
	// The file extension of the upload data.
	FileExtension pulumi.StringInput `pulumi:"fileExtension"`
	// The MIME type of the upload data.
	MimeType pulumi.StringInput `pulumi:"mimeType"`
	// The name of the publication.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationsPublicationIconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationIcon)(nil)).Elem()
}

func (i GetPublicationsPublicationIconArgs) ToGetPublicationsPublicationIconOutput() GetPublicationsPublicationIconOutput {
	return i.ToGetPublicationsPublicationIconOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationIconArgs) ToGetPublicationsPublicationIconOutputWithContext(ctx context.Context) GetPublicationsPublicationIconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationIconOutput)
}

func (i GetPublicationsPublicationIconArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationIcon] {
	return pulumix.Output[GetPublicationsPublicationIcon]{
		OutputState: i.ToGetPublicationsPublicationIconOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationIconArrayInput is an input type that accepts GetPublicationsPublicationIconArray and GetPublicationsPublicationIconArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationIconArrayInput` via:
//
//	GetPublicationsPublicationIconArray{ GetPublicationsPublicationIconArgs{...} }
type GetPublicationsPublicationIconArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationIconArrayOutput() GetPublicationsPublicationIconArrayOutput
	ToGetPublicationsPublicationIconArrayOutputWithContext(context.Context) GetPublicationsPublicationIconArrayOutput
}

type GetPublicationsPublicationIconArray []GetPublicationsPublicationIconInput

func (GetPublicationsPublicationIconArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationIcon)(nil)).Elem()
}

func (i GetPublicationsPublicationIconArray) ToGetPublicationsPublicationIconArrayOutput() GetPublicationsPublicationIconArrayOutput {
	return i.ToGetPublicationsPublicationIconArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationIconArray) ToGetPublicationsPublicationIconArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationIconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationIconArrayOutput)
}

func (i GetPublicationsPublicationIconArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationIcon] {
	return pulumix.Output[[]GetPublicationsPublicationIcon]{
		OutputState: i.ToGetPublicationsPublicationIconArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationIconOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationIconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationIcon)(nil)).Elem()
}

func (o GetPublicationsPublicationIconOutput) ToGetPublicationsPublicationIconOutput() GetPublicationsPublicationIconOutput {
	return o
}

func (o GetPublicationsPublicationIconOutput) ToGetPublicationsPublicationIconOutputWithContext(ctx context.Context) GetPublicationsPublicationIconOutput {
	return o
}

func (o GetPublicationsPublicationIconOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationIcon] {
	return pulumix.Output[GetPublicationsPublicationIcon]{
		OutputState: o.OutputState,
	}
}

// The content URL of the upload data.
func (o GetPublicationsPublicationIconOutput) ContentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationIcon) string { return v.ContentUrl }).(pulumi.StringOutput)
}

// The file extension of the upload data.
func (o GetPublicationsPublicationIconOutput) FileExtension() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationIcon) string { return v.FileExtension }).(pulumi.StringOutput)
}

// The MIME type of the upload data.
func (o GetPublicationsPublicationIconOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationIcon) string { return v.MimeType }).(pulumi.StringOutput)
}

// The name of the publication.
func (o GetPublicationsPublicationIconOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationIcon) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationsPublicationIconArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationIconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationIcon)(nil)).Elem()
}

func (o GetPublicationsPublicationIconArrayOutput) ToGetPublicationsPublicationIconArrayOutput() GetPublicationsPublicationIconArrayOutput {
	return o
}

func (o GetPublicationsPublicationIconArrayOutput) ToGetPublicationsPublicationIconArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationIconArrayOutput {
	return o
}

func (o GetPublicationsPublicationIconArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationIcon] {
	return pulumix.Output[[]GetPublicationsPublicationIcon]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationIconArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationIconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationIcon {
		return vs[0].([]GetPublicationsPublicationIcon)[vs[1].(int)]
	}).(GetPublicationsPublicationIconOutput)
}

type GetPublicationsPublicationPackageDetail struct {
	Eulas            []GetPublicationsPublicationPackageDetailEula            `pulumi:"eulas"`
	ImageId          string                                                   `pulumi:"imageId"`
	OperatingSystems []GetPublicationsPublicationPackageDetailOperatingSystem `pulumi:"operatingSystems"`
	// The listing's package type.
	PackageType    string `pulumi:"packageType"`
	PackageVersion string `pulumi:"packageVersion"`
}

// GetPublicationsPublicationPackageDetailInput is an input type that accepts GetPublicationsPublicationPackageDetailArgs and GetPublicationsPublicationPackageDetailOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailInput` via:
//
//	GetPublicationsPublicationPackageDetailArgs{...}
type GetPublicationsPublicationPackageDetailInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailOutput() GetPublicationsPublicationPackageDetailOutput
	ToGetPublicationsPublicationPackageDetailOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailOutput
}

type GetPublicationsPublicationPackageDetailArgs struct {
	Eulas            GetPublicationsPublicationPackageDetailEulaArrayInput            `pulumi:"eulas"`
	ImageId          pulumi.StringInput                                               `pulumi:"imageId"`
	OperatingSystems GetPublicationsPublicationPackageDetailOperatingSystemArrayInput `pulumi:"operatingSystems"`
	// The listing's package type.
	PackageType    pulumi.StringInput `pulumi:"packageType"`
	PackageVersion pulumi.StringInput `pulumi:"packageVersion"`
}

func (GetPublicationsPublicationPackageDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetail)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailArgs) ToGetPublicationsPublicationPackageDetailOutput() GetPublicationsPublicationPackageDetailOutput {
	return i.ToGetPublicationsPublicationPackageDetailOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailArgs) ToGetPublicationsPublicationPackageDetailOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailOutput)
}

func (i GetPublicationsPublicationPackageDetailArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetail] {
	return pulumix.Output[GetPublicationsPublicationPackageDetail]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationPackageDetailArrayInput is an input type that accepts GetPublicationsPublicationPackageDetailArray and GetPublicationsPublicationPackageDetailArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailArrayInput` via:
//
//	GetPublicationsPublicationPackageDetailArray{ GetPublicationsPublicationPackageDetailArgs{...} }
type GetPublicationsPublicationPackageDetailArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailArrayOutput() GetPublicationsPublicationPackageDetailArrayOutput
	ToGetPublicationsPublicationPackageDetailArrayOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailArrayOutput
}

type GetPublicationsPublicationPackageDetailArray []GetPublicationsPublicationPackageDetailInput

func (GetPublicationsPublicationPackageDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetail)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailArray) ToGetPublicationsPublicationPackageDetailArrayOutput() GetPublicationsPublicationPackageDetailArrayOutput {
	return i.ToGetPublicationsPublicationPackageDetailArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailArray) ToGetPublicationsPublicationPackageDetailArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailArrayOutput)
}

func (i GetPublicationsPublicationPackageDetailArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetail] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetail]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationPackageDetailOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetail)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailOutput) ToGetPublicationsPublicationPackageDetailOutput() GetPublicationsPublicationPackageDetailOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOutput) ToGetPublicationsPublicationPackageDetailOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetail] {
	return pulumix.Output[GetPublicationsPublicationPackageDetail]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationPackageDetailOutput) Eulas() GetPublicationsPublicationPackageDetailEulaArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetail) []GetPublicationsPublicationPackageDetailEula {
		return v.Eulas
	}).(GetPublicationsPublicationPackageDetailEulaArrayOutput)
}

func (o GetPublicationsPublicationPackageDetailOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetail) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o GetPublicationsPublicationPackageDetailOutput) OperatingSystems() GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetail) []GetPublicationsPublicationPackageDetailOperatingSystem {
		return v.OperatingSystems
	}).(GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput)
}

// The listing's package type.
func (o GetPublicationsPublicationPackageDetailOutput) PackageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetail) string { return v.PackageType }).(pulumi.StringOutput)
}

func (o GetPublicationsPublicationPackageDetailOutput) PackageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetail) string { return v.PackageVersion }).(pulumi.StringOutput)
}

type GetPublicationsPublicationPackageDetailArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetail)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailArrayOutput) ToGetPublicationsPublicationPackageDetailArrayOutput() GetPublicationsPublicationPackageDetailArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailArrayOutput) ToGetPublicationsPublicationPackageDetailArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetail] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetail]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationPackageDetailArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationPackageDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationPackageDetail {
		return vs[0].([]GetPublicationsPublicationPackageDetail)[vs[1].(int)]
	}).(GetPublicationsPublicationPackageDetailOutput)
}

type GetPublicationsPublicationPackageDetailEula struct {
	EulaType    string `pulumi:"eulaType"`
	LicenseText string `pulumi:"licenseText"`
}

// GetPublicationsPublicationPackageDetailEulaInput is an input type that accepts GetPublicationsPublicationPackageDetailEulaArgs and GetPublicationsPublicationPackageDetailEulaOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailEulaInput` via:
//
//	GetPublicationsPublicationPackageDetailEulaArgs{...}
type GetPublicationsPublicationPackageDetailEulaInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailEulaOutput() GetPublicationsPublicationPackageDetailEulaOutput
	ToGetPublicationsPublicationPackageDetailEulaOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailEulaOutput
}

type GetPublicationsPublicationPackageDetailEulaArgs struct {
	EulaType    pulumi.StringInput `pulumi:"eulaType"`
	LicenseText pulumi.StringInput `pulumi:"licenseText"`
}

func (GetPublicationsPublicationPackageDetailEulaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetailEula)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailEulaArgs) ToGetPublicationsPublicationPackageDetailEulaOutput() GetPublicationsPublicationPackageDetailEulaOutput {
	return i.ToGetPublicationsPublicationPackageDetailEulaOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailEulaArgs) ToGetPublicationsPublicationPackageDetailEulaOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailEulaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailEulaOutput)
}

func (i GetPublicationsPublicationPackageDetailEulaArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetailEula] {
	return pulumix.Output[GetPublicationsPublicationPackageDetailEula]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailEulaOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationPackageDetailEulaArrayInput is an input type that accepts GetPublicationsPublicationPackageDetailEulaArray and GetPublicationsPublicationPackageDetailEulaArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailEulaArrayInput` via:
//
//	GetPublicationsPublicationPackageDetailEulaArray{ GetPublicationsPublicationPackageDetailEulaArgs{...} }
type GetPublicationsPublicationPackageDetailEulaArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailEulaArrayOutput() GetPublicationsPublicationPackageDetailEulaArrayOutput
	ToGetPublicationsPublicationPackageDetailEulaArrayOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailEulaArrayOutput
}

type GetPublicationsPublicationPackageDetailEulaArray []GetPublicationsPublicationPackageDetailEulaInput

func (GetPublicationsPublicationPackageDetailEulaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetailEula)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailEulaArray) ToGetPublicationsPublicationPackageDetailEulaArrayOutput() GetPublicationsPublicationPackageDetailEulaArrayOutput {
	return i.ToGetPublicationsPublicationPackageDetailEulaArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailEulaArray) ToGetPublicationsPublicationPackageDetailEulaArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailEulaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailEulaArrayOutput)
}

func (i GetPublicationsPublicationPackageDetailEulaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetailEula] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetailEula]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailEulaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationPackageDetailEulaOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailEulaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetailEula)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailEulaOutput) ToGetPublicationsPublicationPackageDetailEulaOutput() GetPublicationsPublicationPackageDetailEulaOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailEulaOutput) ToGetPublicationsPublicationPackageDetailEulaOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailEulaOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailEulaOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetailEula] {
	return pulumix.Output[GetPublicationsPublicationPackageDetailEula]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationPackageDetailEulaOutput) EulaType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetailEula) string { return v.EulaType }).(pulumi.StringOutput)
}

func (o GetPublicationsPublicationPackageDetailEulaOutput) LicenseText() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetailEula) string { return v.LicenseText }).(pulumi.StringOutput)
}

type GetPublicationsPublicationPackageDetailEulaArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailEulaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetailEula)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailEulaArrayOutput) ToGetPublicationsPublicationPackageDetailEulaArrayOutput() GetPublicationsPublicationPackageDetailEulaArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailEulaArrayOutput) ToGetPublicationsPublicationPackageDetailEulaArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailEulaArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailEulaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetailEula] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetailEula]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationPackageDetailEulaArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationPackageDetailEulaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationPackageDetailEula {
		return vs[0].([]GetPublicationsPublicationPackageDetailEula)[vs[1].(int)]
	}).(GetPublicationsPublicationPackageDetailEulaOutput)
}

type GetPublicationsPublicationPackageDetailOperatingSystem struct {
	// The name of the publication.
	Name string `pulumi:"name"`
}

// GetPublicationsPublicationPackageDetailOperatingSystemInput is an input type that accepts GetPublicationsPublicationPackageDetailOperatingSystemArgs and GetPublicationsPublicationPackageDetailOperatingSystemOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailOperatingSystemInput` via:
//
//	GetPublicationsPublicationPackageDetailOperatingSystemArgs{...}
type GetPublicationsPublicationPackageDetailOperatingSystemInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailOperatingSystemOutput() GetPublicationsPublicationPackageDetailOperatingSystemOutput
	ToGetPublicationsPublicationPackageDetailOperatingSystemOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailOperatingSystemOutput
}

type GetPublicationsPublicationPackageDetailOperatingSystemArgs struct {
	// The name of the publication.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationsPublicationPackageDetailOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArgs) ToGetPublicationsPublicationPackageDetailOperatingSystemOutput() GetPublicationsPublicationPackageDetailOperatingSystemOutput {
	return i.ToGetPublicationsPublicationPackageDetailOperatingSystemOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArgs) ToGetPublicationsPublicationPackageDetailOperatingSystemOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailOperatingSystemOutput)
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[GetPublicationsPublicationPackageDetailOperatingSystem]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationPackageDetailOperatingSystemArrayInput is an input type that accepts GetPublicationsPublicationPackageDetailOperatingSystemArray and GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationPackageDetailOperatingSystemArrayInput` via:
//
//	GetPublicationsPublicationPackageDetailOperatingSystemArray{ GetPublicationsPublicationPackageDetailOperatingSystemArgs{...} }
type GetPublicationsPublicationPackageDetailOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput
	ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutputWithContext(context.Context) GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput
}

type GetPublicationsPublicationPackageDetailOperatingSystemArray []GetPublicationsPublicationPackageDetailOperatingSystemInput

func (GetPublicationsPublicationPackageDetailOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArray) ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput {
	return i.ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArray) ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput)
}

func (i GetPublicationsPublicationPackageDetailOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetailOperatingSystem]{
		OutputState: i.ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationPackageDetailOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemOutput) ToGetPublicationsPublicationPackageDetailOperatingSystemOutput() GetPublicationsPublicationPackageDetailOperatingSystemOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemOutput) ToGetPublicationsPublicationPackageDetailOperatingSystemOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOperatingSystemOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[GetPublicationsPublicationPackageDetailOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the publication.
func (o GetPublicationsPublicationPackageDetailOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationPackageDetailOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationPackageDetailOperatingSystem)(nil)).Elem()
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput) ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutput() GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput) ToGetPublicationsPublicationPackageDetailOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationPackageDetailOperatingSystem] {
	return pulumix.Output[[]GetPublicationsPublicationPackageDetailOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationPackageDetailOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationPackageDetailOperatingSystem {
		return vs[0].([]GetPublicationsPublicationPackageDetailOperatingSystem)[vs[1].(int)]
	}).(GetPublicationsPublicationPackageDetailOperatingSystemOutput)
}

type GetPublicationsPublicationSupportContact struct {
	// The email of the contact.
	Email string `pulumi:"email"`
	// The name of the publication.
	Name string `pulumi:"name"`
	// The phone number of the contact.
	Phone string `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject string `pulumi:"subject"`
}

// GetPublicationsPublicationSupportContactInput is an input type that accepts GetPublicationsPublicationSupportContactArgs and GetPublicationsPublicationSupportContactOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationSupportContactInput` via:
//
//	GetPublicationsPublicationSupportContactArgs{...}
type GetPublicationsPublicationSupportContactInput interface {
	pulumi.Input

	ToGetPublicationsPublicationSupportContactOutput() GetPublicationsPublicationSupportContactOutput
	ToGetPublicationsPublicationSupportContactOutputWithContext(context.Context) GetPublicationsPublicationSupportContactOutput
}

type GetPublicationsPublicationSupportContactArgs struct {
	// The email of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// The name of the publication.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the contact.
	Phone pulumi.StringInput `pulumi:"phone"`
	// The email subject line to use when contacting support.
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (GetPublicationsPublicationSupportContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationSupportContact)(nil)).Elem()
}

func (i GetPublicationsPublicationSupportContactArgs) ToGetPublicationsPublicationSupportContactOutput() GetPublicationsPublicationSupportContactOutput {
	return i.ToGetPublicationsPublicationSupportContactOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationSupportContactArgs) ToGetPublicationsPublicationSupportContactOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationSupportContactOutput)
}

func (i GetPublicationsPublicationSupportContactArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationSupportContact] {
	return pulumix.Output[GetPublicationsPublicationSupportContact]{
		OutputState: i.ToGetPublicationsPublicationSupportContactOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationSupportContactArrayInput is an input type that accepts GetPublicationsPublicationSupportContactArray and GetPublicationsPublicationSupportContactArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationSupportContactArrayInput` via:
//
//	GetPublicationsPublicationSupportContactArray{ GetPublicationsPublicationSupportContactArgs{...} }
type GetPublicationsPublicationSupportContactArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationSupportContactArrayOutput() GetPublicationsPublicationSupportContactArrayOutput
	ToGetPublicationsPublicationSupportContactArrayOutputWithContext(context.Context) GetPublicationsPublicationSupportContactArrayOutput
}

type GetPublicationsPublicationSupportContactArray []GetPublicationsPublicationSupportContactInput

func (GetPublicationsPublicationSupportContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationSupportContact)(nil)).Elem()
}

func (i GetPublicationsPublicationSupportContactArray) ToGetPublicationsPublicationSupportContactArrayOutput() GetPublicationsPublicationSupportContactArrayOutput {
	return i.ToGetPublicationsPublicationSupportContactArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationSupportContactArray) ToGetPublicationsPublicationSupportContactArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationSupportContactArrayOutput)
}

func (i GetPublicationsPublicationSupportContactArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationSupportContact] {
	return pulumix.Output[[]GetPublicationsPublicationSupportContact]{
		OutputState: i.ToGetPublicationsPublicationSupportContactArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationSupportContactOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationSupportContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationSupportContact)(nil)).Elem()
}

func (o GetPublicationsPublicationSupportContactOutput) ToGetPublicationsPublicationSupportContactOutput() GetPublicationsPublicationSupportContactOutput {
	return o
}

func (o GetPublicationsPublicationSupportContactOutput) ToGetPublicationsPublicationSupportContactOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportContactOutput {
	return o
}

func (o GetPublicationsPublicationSupportContactOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationSupportContact] {
	return pulumix.Output[GetPublicationsPublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

// The email of the contact.
func (o GetPublicationsPublicationSupportContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationSupportContact) string { return v.Email }).(pulumi.StringOutput)
}

// The name of the publication.
func (o GetPublicationsPublicationSupportContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationSupportContact) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the contact.
func (o GetPublicationsPublicationSupportContactOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationSupportContact) string { return v.Phone }).(pulumi.StringOutput)
}

// The email subject line to use when contacting support.
func (o GetPublicationsPublicationSupportContactOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationSupportContact) string { return v.Subject }).(pulumi.StringOutput)
}

type GetPublicationsPublicationSupportContactArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationSupportContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationSupportContact)(nil)).Elem()
}

func (o GetPublicationsPublicationSupportContactArrayOutput) ToGetPublicationsPublicationSupportContactArrayOutput() GetPublicationsPublicationSupportContactArrayOutput {
	return o
}

func (o GetPublicationsPublicationSupportContactArrayOutput) ToGetPublicationsPublicationSupportContactArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportContactArrayOutput {
	return o
}

func (o GetPublicationsPublicationSupportContactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationSupportContact] {
	return pulumix.Output[[]GetPublicationsPublicationSupportContact]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationSupportContactArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationSupportContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationSupportContact {
		return vs[0].([]GetPublicationsPublicationSupportContact)[vs[1].(int)]
	}).(GetPublicationsPublicationSupportContactOutput)
}

type GetPublicationsPublicationSupportedOperatingSystem struct {
	// The name of the publication.
	Name string `pulumi:"name"`
}

// GetPublicationsPublicationSupportedOperatingSystemInput is an input type that accepts GetPublicationsPublicationSupportedOperatingSystemArgs and GetPublicationsPublicationSupportedOperatingSystemOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationSupportedOperatingSystemInput` via:
//
//	GetPublicationsPublicationSupportedOperatingSystemArgs{...}
type GetPublicationsPublicationSupportedOperatingSystemInput interface {
	pulumi.Input

	ToGetPublicationsPublicationSupportedOperatingSystemOutput() GetPublicationsPublicationSupportedOperatingSystemOutput
	ToGetPublicationsPublicationSupportedOperatingSystemOutputWithContext(context.Context) GetPublicationsPublicationSupportedOperatingSystemOutput
}

type GetPublicationsPublicationSupportedOperatingSystemArgs struct {
	// The name of the publication.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublicationsPublicationSupportedOperatingSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i GetPublicationsPublicationSupportedOperatingSystemArgs) ToGetPublicationsPublicationSupportedOperatingSystemOutput() GetPublicationsPublicationSupportedOperatingSystemOutput {
	return i.ToGetPublicationsPublicationSupportedOperatingSystemOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationSupportedOperatingSystemArgs) ToGetPublicationsPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportedOperatingSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationSupportedOperatingSystemOutput)
}

func (i GetPublicationsPublicationSupportedOperatingSystemArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationSupportedOperatingSystem] {
	return pulumix.Output[GetPublicationsPublicationSupportedOperatingSystem]{
		OutputState: i.ToGetPublicationsPublicationSupportedOperatingSystemOutputWithContext(ctx).OutputState,
	}
}

// GetPublicationsPublicationSupportedOperatingSystemArrayInput is an input type that accepts GetPublicationsPublicationSupportedOperatingSystemArray and GetPublicationsPublicationSupportedOperatingSystemArrayOutput values.
// You can construct a concrete instance of `GetPublicationsPublicationSupportedOperatingSystemArrayInput` via:
//
//	GetPublicationsPublicationSupportedOperatingSystemArray{ GetPublicationsPublicationSupportedOperatingSystemArgs{...} }
type GetPublicationsPublicationSupportedOperatingSystemArrayInput interface {
	pulumi.Input

	ToGetPublicationsPublicationSupportedOperatingSystemArrayOutput() GetPublicationsPublicationSupportedOperatingSystemArrayOutput
	ToGetPublicationsPublicationSupportedOperatingSystemArrayOutputWithContext(context.Context) GetPublicationsPublicationSupportedOperatingSystemArrayOutput
}

type GetPublicationsPublicationSupportedOperatingSystemArray []GetPublicationsPublicationSupportedOperatingSystemInput

func (GetPublicationsPublicationSupportedOperatingSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (i GetPublicationsPublicationSupportedOperatingSystemArray) ToGetPublicationsPublicationSupportedOperatingSystemArrayOutput() GetPublicationsPublicationSupportedOperatingSystemArrayOutput {
	return i.ToGetPublicationsPublicationSupportedOperatingSystemArrayOutputWithContext(context.Background())
}

func (i GetPublicationsPublicationSupportedOperatingSystemArray) ToGetPublicationsPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportedOperatingSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublicationsPublicationSupportedOperatingSystemArrayOutput)
}

func (i GetPublicationsPublicationSupportedOperatingSystemArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationSupportedOperatingSystem] {
	return pulumix.Output[[]GetPublicationsPublicationSupportedOperatingSystem]{
		OutputState: i.ToGetPublicationsPublicationSupportedOperatingSystemArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublicationsPublicationSupportedOperatingSystemOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationSupportedOperatingSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublicationsPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o GetPublicationsPublicationSupportedOperatingSystemOutput) ToGetPublicationsPublicationSupportedOperatingSystemOutput() GetPublicationsPublicationSupportedOperatingSystemOutput {
	return o
}

func (o GetPublicationsPublicationSupportedOperatingSystemOutput) ToGetPublicationsPublicationSupportedOperatingSystemOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportedOperatingSystemOutput {
	return o
}

func (o GetPublicationsPublicationSupportedOperatingSystemOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublicationsPublicationSupportedOperatingSystem] {
	return pulumix.Output[GetPublicationsPublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

// The name of the publication.
func (o GetPublicationsPublicationSupportedOperatingSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublicationsPublicationSupportedOperatingSystem) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublicationsPublicationSupportedOperatingSystemArrayOutput struct{ *pulumi.OutputState }

func (GetPublicationsPublicationSupportedOperatingSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublicationsPublicationSupportedOperatingSystem)(nil)).Elem()
}

func (o GetPublicationsPublicationSupportedOperatingSystemArrayOutput) ToGetPublicationsPublicationSupportedOperatingSystemArrayOutput() GetPublicationsPublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationsPublicationSupportedOperatingSystemArrayOutput) ToGetPublicationsPublicationSupportedOperatingSystemArrayOutputWithContext(ctx context.Context) GetPublicationsPublicationSupportedOperatingSystemArrayOutput {
	return o
}

func (o GetPublicationsPublicationSupportedOperatingSystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublicationsPublicationSupportedOperatingSystem] {
	return pulumix.Output[[]GetPublicationsPublicationSupportedOperatingSystem]{
		OutputState: o.OutputState,
	}
}

func (o GetPublicationsPublicationSupportedOperatingSystemArrayOutput) Index(i pulumi.IntInput) GetPublicationsPublicationSupportedOperatingSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublicationsPublicationSupportedOperatingSystem {
		return vs[0].([]GetPublicationsPublicationSupportedOperatingSystem)[vs[1].(int)]
	}).(GetPublicationsPublicationSupportedOperatingSystemOutput)
}

type GetPublishersFilter struct {
	// The name of the publisher.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetPublishersFilterInput is an input type that accepts GetPublishersFilterArgs and GetPublishersFilterOutput values.
// You can construct a concrete instance of `GetPublishersFilterInput` via:
//
//	GetPublishersFilterArgs{...}
type GetPublishersFilterInput interface {
	pulumi.Input

	ToGetPublishersFilterOutput() GetPublishersFilterOutput
	ToGetPublishersFilterOutputWithContext(context.Context) GetPublishersFilterOutput
}

type GetPublishersFilterArgs struct {
	// The name of the publisher.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPublishersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishersFilter)(nil)).Elem()
}

func (i GetPublishersFilterArgs) ToGetPublishersFilterOutput() GetPublishersFilterOutput {
	return i.ToGetPublishersFilterOutputWithContext(context.Background())
}

func (i GetPublishersFilterArgs) ToGetPublishersFilterOutputWithContext(ctx context.Context) GetPublishersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublishersFilterOutput)
}

func (i GetPublishersFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublishersFilter] {
	return pulumix.Output[GetPublishersFilter]{
		OutputState: i.ToGetPublishersFilterOutputWithContext(ctx).OutputState,
	}
}

// GetPublishersFilterArrayInput is an input type that accepts GetPublishersFilterArray and GetPublishersFilterArrayOutput values.
// You can construct a concrete instance of `GetPublishersFilterArrayInput` via:
//
//	GetPublishersFilterArray{ GetPublishersFilterArgs{...} }
type GetPublishersFilterArrayInput interface {
	pulumi.Input

	ToGetPublishersFilterArrayOutput() GetPublishersFilterArrayOutput
	ToGetPublishersFilterArrayOutputWithContext(context.Context) GetPublishersFilterArrayOutput
}

type GetPublishersFilterArray []GetPublishersFilterInput

func (GetPublishersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublishersFilter)(nil)).Elem()
}

func (i GetPublishersFilterArray) ToGetPublishersFilterArrayOutput() GetPublishersFilterArrayOutput {
	return i.ToGetPublishersFilterArrayOutputWithContext(context.Background())
}

func (i GetPublishersFilterArray) ToGetPublishersFilterArrayOutputWithContext(ctx context.Context) GetPublishersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublishersFilterArrayOutput)
}

func (i GetPublishersFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublishersFilter] {
	return pulumix.Output[[]GetPublishersFilter]{
		OutputState: i.ToGetPublishersFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublishersFilterOutput struct{ *pulumi.OutputState }

func (GetPublishersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishersFilter)(nil)).Elem()
}

func (o GetPublishersFilterOutput) ToGetPublishersFilterOutput() GetPublishersFilterOutput {
	return o
}

func (o GetPublishersFilterOutput) ToGetPublishersFilterOutputWithContext(ctx context.Context) GetPublishersFilterOutput {
	return o
}

func (o GetPublishersFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublishersFilter] {
	return pulumix.Output[GetPublishersFilter]{
		OutputState: o.OutputState,
	}
}

// The name of the publisher.
func (o GetPublishersFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishersFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPublishersFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPublishersFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetPublishersFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPublishersFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPublishersFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPublishersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublishersFilter)(nil)).Elem()
}

func (o GetPublishersFilterArrayOutput) ToGetPublishersFilterArrayOutput() GetPublishersFilterArrayOutput {
	return o
}

func (o GetPublishersFilterArrayOutput) ToGetPublishersFilterArrayOutputWithContext(ctx context.Context) GetPublishersFilterArrayOutput {
	return o
}

func (o GetPublishersFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublishersFilter] {
	return pulumix.Output[[]GetPublishersFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetPublishersFilterArrayOutput) Index(i pulumi.IntInput) GetPublishersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublishersFilter {
		return vs[0].([]GetPublishersFilter)[vs[1].(int)]
	}).(GetPublishersFilterOutput)
}

type GetPublishersPublisher struct {
	// A description of the publisher.
	Description string `pulumi:"description"`
	// The unique identifier for the publisher.
	Id string `pulumi:"id"`
	// The name of the publisher.
	Name string `pulumi:"name"`
}

// GetPublishersPublisherInput is an input type that accepts GetPublishersPublisherArgs and GetPublishersPublisherOutput values.
// You can construct a concrete instance of `GetPublishersPublisherInput` via:
//
//	GetPublishersPublisherArgs{...}
type GetPublishersPublisherInput interface {
	pulumi.Input

	ToGetPublishersPublisherOutput() GetPublishersPublisherOutput
	ToGetPublishersPublisherOutputWithContext(context.Context) GetPublishersPublisherOutput
}

type GetPublishersPublisherArgs struct {
	// A description of the publisher.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique identifier for the publisher.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the publisher.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPublishersPublisherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishersPublisher)(nil)).Elem()
}

func (i GetPublishersPublisherArgs) ToGetPublishersPublisherOutput() GetPublishersPublisherOutput {
	return i.ToGetPublishersPublisherOutputWithContext(context.Background())
}

func (i GetPublishersPublisherArgs) ToGetPublishersPublisherOutputWithContext(ctx context.Context) GetPublishersPublisherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublishersPublisherOutput)
}

func (i GetPublishersPublisherArgs) ToOutput(ctx context.Context) pulumix.Output[GetPublishersPublisher] {
	return pulumix.Output[GetPublishersPublisher]{
		OutputState: i.ToGetPublishersPublisherOutputWithContext(ctx).OutputState,
	}
}

// GetPublishersPublisherArrayInput is an input type that accepts GetPublishersPublisherArray and GetPublishersPublisherArrayOutput values.
// You can construct a concrete instance of `GetPublishersPublisherArrayInput` via:
//
//	GetPublishersPublisherArray{ GetPublishersPublisherArgs{...} }
type GetPublishersPublisherArrayInput interface {
	pulumi.Input

	ToGetPublishersPublisherArrayOutput() GetPublishersPublisherArrayOutput
	ToGetPublishersPublisherArrayOutputWithContext(context.Context) GetPublishersPublisherArrayOutput
}

type GetPublishersPublisherArray []GetPublishersPublisherInput

func (GetPublishersPublisherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublishersPublisher)(nil)).Elem()
}

func (i GetPublishersPublisherArray) ToGetPublishersPublisherArrayOutput() GetPublishersPublisherArrayOutput {
	return i.ToGetPublishersPublisherArrayOutputWithContext(context.Background())
}

func (i GetPublishersPublisherArray) ToGetPublishersPublisherArrayOutputWithContext(ctx context.Context) GetPublishersPublisherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPublishersPublisherArrayOutput)
}

func (i GetPublishersPublisherArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPublishersPublisher] {
	return pulumix.Output[[]GetPublishersPublisher]{
		OutputState: i.ToGetPublishersPublisherArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPublishersPublisherOutput struct{ *pulumi.OutputState }

func (GetPublishersPublisherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishersPublisher)(nil)).Elem()
}

func (o GetPublishersPublisherOutput) ToGetPublishersPublisherOutput() GetPublishersPublisherOutput {
	return o
}

func (o GetPublishersPublisherOutput) ToGetPublishersPublisherOutputWithContext(ctx context.Context) GetPublishersPublisherOutput {
	return o
}

func (o GetPublishersPublisherOutput) ToOutput(ctx context.Context) pulumix.Output[GetPublishersPublisher] {
	return pulumix.Output[GetPublishersPublisher]{
		OutputState: o.OutputState,
	}
}

// A description of the publisher.
func (o GetPublishersPublisherOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishersPublisher) string { return v.Description }).(pulumi.StringOutput)
}

// The unique identifier for the publisher.
func (o GetPublishersPublisherOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishersPublisher) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the publisher.
func (o GetPublishersPublisherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishersPublisher) string { return v.Name }).(pulumi.StringOutput)
}

type GetPublishersPublisherArrayOutput struct{ *pulumi.OutputState }

func (GetPublishersPublisherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPublishersPublisher)(nil)).Elem()
}

func (o GetPublishersPublisherArrayOutput) ToGetPublishersPublisherArrayOutput() GetPublishersPublisherArrayOutput {
	return o
}

func (o GetPublishersPublisherArrayOutput) ToGetPublishersPublisherArrayOutputWithContext(ctx context.Context) GetPublishersPublisherArrayOutput {
	return o
}

func (o GetPublishersPublisherArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPublishersPublisher] {
	return pulumix.Output[[]GetPublishersPublisher]{
		OutputState: o.OutputState,
	}
}

func (o GetPublishersPublisherArrayOutput) Index(i pulumi.IntInput) GetPublishersPublisherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPublishersPublisher {
		return vs[0].([]GetPublishersPublisher)[vs[1].(int)]
	}).(GetPublishersPublisherOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationIconInput)(nil)).Elem(), PublicationIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationIconArrayInput)(nil)).Elem(), PublicationIconArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsInput)(nil)).Elem(), PublicationPackageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsPtrInput)(nil)).Elem(), PublicationPackageDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsEulaInput)(nil)).Elem(), PublicationPackageDetailsEulaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsEulaArrayInput)(nil)).Elem(), PublicationPackageDetailsEulaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsOperatingSystemInput)(nil)).Elem(), PublicationPackageDetailsOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPackageDetailsOperatingSystemPtrInput)(nil)).Elem(), PublicationPackageDetailsOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationSupportContactInput)(nil)).Elem(), PublicationSupportContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationSupportContactArrayInput)(nil)).Elem(), PublicationSupportContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationSupportedOperatingSystemInput)(nil)).Elem(), PublicationSupportedOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationSupportedOperatingSystemArrayInput)(nil)).Elem(), PublicationSupportedOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAcceptedAgreementsAcceptedAgreementInput)(nil)).Elem(), GetAcceptedAgreementsAcceptedAgreementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAcceptedAgreementsAcceptedAgreementArrayInput)(nil)).Elem(), GetAcceptedAgreementsAcceptedAgreementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAcceptedAgreementsFilterInput)(nil)).Elem(), GetAcceptedAgreementsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAcceptedAgreementsFilterArrayInput)(nil)).Elem(), GetAcceptedAgreementsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCategoriesCategoryInput)(nil)).Elem(), GetCategoriesCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCategoriesCategoryArrayInput)(nil)).Elem(), GetCategoriesCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCategoriesFilterInput)(nil)).Elem(), GetCategoriesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCategoriesFilterArrayInput)(nil)).Elem(), GetCategoriesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingBannerInput)(nil)).Elem(), GetListingBannerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingBannerArrayInput)(nil)).Elem(), GetListingBannerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingDocumentationLinkInput)(nil)).Elem(), GetListingDocumentationLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingDocumentationLinkArrayInput)(nil)).Elem(), GetListingDocumentationLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingIconInput)(nil)).Elem(), GetListingIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingIconArrayInput)(nil)).Elem(), GetListingIconArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingLanguageInput)(nil)).Elem(), GetListingLanguageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingLanguageArrayInput)(nil)).Elem(), GetListingLanguageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingLinkInput)(nil)).Elem(), GetListingLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingLinkArrayInput)(nil)).Elem(), GetListingLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageAgreementsAgreementInput)(nil)).Elem(), GetListingPackageAgreementsAgreementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageAgreementsAgreementArrayInput)(nil)).Elem(), GetListingPackageAgreementsAgreementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageAgreementsFilterInput)(nil)).Elem(), GetListingPackageAgreementsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageAgreementsFilterArrayInput)(nil)).Elem(), GetListingPackageAgreementsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageOperatingSystemInput)(nil)).Elem(), GetListingPackageOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageOperatingSystemArrayInput)(nil)).Elem(), GetListingPackageOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagePricingInput)(nil)).Elem(), GetListingPackagePricingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagePricingArrayInput)(nil)).Elem(), GetListingPackagePricingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagePricingInternationalMarketPriceInput)(nil)).Elem(), GetListingPackagePricingInternationalMarketPriceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagePricingInternationalMarketPriceArrayInput)(nil)).Elem(), GetListingPackagePricingInternationalMarketPriceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageRegionInput)(nil)).Elem(), GetListingPackageRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageRegionArrayInput)(nil)).Elem(), GetListingPackageRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageRegionCountryInput)(nil)).Elem(), GetListingPackageRegionCountryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageRegionCountryArrayInput)(nil)).Elem(), GetListingPackageRegionCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageVariableInput)(nil)).Elem(), GetListingPackageVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackageVariableArrayInput)(nil)).Elem(), GetListingPackageVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesFilterInput)(nil)).Elem(), GetListingPackagesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesFilterArrayInput)(nil)).Elem(), GetListingPackagesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageInput)(nil)).Elem(), GetListingPackagesListingPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageArrayInput)(nil)).Elem(), GetListingPackagesListingPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageOperatingSystemInput)(nil)).Elem(), GetListingPackagesListingPackageOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageOperatingSystemArrayInput)(nil)).Elem(), GetListingPackagesListingPackageOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackagePricingInput)(nil)).Elem(), GetListingPackagesListingPackagePricingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackagePricingArrayInput)(nil)).Elem(), GetListingPackagesListingPackagePricingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackagePricingInternationalMarketPriceInput)(nil)).Elem(), GetListingPackagesListingPackagePricingInternationalMarketPriceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackagePricingInternationalMarketPriceArrayInput)(nil)).Elem(), GetListingPackagesListingPackagePricingInternationalMarketPriceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageRegionInput)(nil)).Elem(), GetListingPackagesListingPackageRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageRegionArrayInput)(nil)).Elem(), GetListingPackagesListingPackageRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageRegionCountryInput)(nil)).Elem(), GetListingPackagesListingPackageRegionCountryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPackagesListingPackageRegionCountryArrayInput)(nil)).Elem(), GetListingPackagesListingPackageRegionCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherInput)(nil)).Elem(), GetListingPublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherArrayInput)(nil)).Elem(), GetListingPublisherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherLinkInput)(nil)).Elem(), GetListingPublisherLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherLinkArrayInput)(nil)).Elem(), GetListingPublisherLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherLogoInput)(nil)).Elem(), GetListingPublisherLogoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingPublisherLogoArrayInput)(nil)).Elem(), GetListingPublisherLogoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingRegionInput)(nil)).Elem(), GetListingRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingRegionArrayInput)(nil)).Elem(), GetListingRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingRegionCountryInput)(nil)).Elem(), GetListingRegionCountryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingRegionCountryArrayInput)(nil)).Elem(), GetListingRegionCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingScreenshotInput)(nil)).Elem(), GetListingScreenshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingScreenshotArrayInput)(nil)).Elem(), GetListingScreenshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportContactInput)(nil)).Elem(), GetListingSupportContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportContactArrayInput)(nil)).Elem(), GetListingSupportContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportLinkInput)(nil)).Elem(), GetListingSupportLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportLinkArrayInput)(nil)).Elem(), GetListingSupportLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportedOperatingSystemInput)(nil)).Elem(), GetListingSupportedOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingSupportedOperatingSystemArrayInput)(nil)).Elem(), GetListingSupportedOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingTaxesFilterInput)(nil)).Elem(), GetListingTaxesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingTaxesFilterArrayInput)(nil)).Elem(), GetListingTaxesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingTaxesTaxInput)(nil)).Elem(), GetListingTaxesTaxArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingTaxesTaxArrayInput)(nil)).Elem(), GetListingTaxesTaxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingVideoInput)(nil)).Elem(), GetListingVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingVideoArrayInput)(nil)).Elem(), GetListingVideoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsFilterInput)(nil)).Elem(), GetListingsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsFilterArrayInput)(nil)).Elem(), GetListingsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingInput)(nil)).Elem(), GetListingsListingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingArrayInput)(nil)).Elem(), GetListingsListingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingBannerInput)(nil)).Elem(), GetListingsListingBannerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingBannerArrayInput)(nil)).Elem(), GetListingsListingBannerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingDocumentationLinkInput)(nil)).Elem(), GetListingsListingDocumentationLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingDocumentationLinkArrayInput)(nil)).Elem(), GetListingsListingDocumentationLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingIconInput)(nil)).Elem(), GetListingsListingIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingIconArrayInput)(nil)).Elem(), GetListingsListingIconArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingPublisherInput)(nil)).Elem(), GetListingsListingPublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingPublisherArrayInput)(nil)).Elem(), GetListingsListingPublisherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingRegionInput)(nil)).Elem(), GetListingsListingRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingRegionArrayInput)(nil)).Elem(), GetListingsListingRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingRegionCountryInput)(nil)).Elem(), GetListingsListingRegionCountryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingRegionCountryArrayInput)(nil)).Elem(), GetListingsListingRegionCountryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingSupportedOperatingSystemInput)(nil)).Elem(), GetListingsListingSupportedOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListingsListingSupportedOperatingSystemArrayInput)(nil)).Elem(), GetListingsListingSupportedOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationIconInput)(nil)).Elem(), GetPublicationIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationIconArrayInput)(nil)).Elem(), GetPublicationIconArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailInput)(nil)).Elem(), GetPublicationPackageDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailArrayInput)(nil)).Elem(), GetPublicationPackageDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailEulaInput)(nil)).Elem(), GetPublicationPackageDetailEulaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailEulaArrayInput)(nil)).Elem(), GetPublicationPackageDetailEulaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailOperatingSystemInput)(nil)).Elem(), GetPublicationPackageDetailOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageDetailOperatingSystemArrayInput)(nil)).Elem(), GetPublicationPackageDetailOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageOperatingSystemInput)(nil)).Elem(), GetPublicationPackageOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageOperatingSystemArrayInput)(nil)).Elem(), GetPublicationPackageOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageVariableInput)(nil)).Elem(), GetPublicationPackageVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackageVariableArrayInput)(nil)).Elem(), GetPublicationPackageVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackagesFilterInput)(nil)).Elem(), GetPublicationPackagesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackagesFilterArrayInput)(nil)).Elem(), GetPublicationPackagesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackagesPublicationPackageInput)(nil)).Elem(), GetPublicationPackagesPublicationPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationPackagesPublicationPackageArrayInput)(nil)).Elem(), GetPublicationPackagesPublicationPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationSupportContactInput)(nil)).Elem(), GetPublicationSupportContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationSupportContactArrayInput)(nil)).Elem(), GetPublicationSupportContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationSupportedOperatingSystemInput)(nil)).Elem(), GetPublicationSupportedOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationSupportedOperatingSystemArrayInput)(nil)).Elem(), GetPublicationSupportedOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsFilterInput)(nil)).Elem(), GetPublicationsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsFilterArrayInput)(nil)).Elem(), GetPublicationsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationInput)(nil)).Elem(), GetPublicationsPublicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationArrayInput)(nil)).Elem(), GetPublicationsPublicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationIconInput)(nil)).Elem(), GetPublicationsPublicationIconArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationIconArrayInput)(nil)).Elem(), GetPublicationsPublicationIconArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailArrayInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailEulaInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailEulaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailEulaArrayInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailEulaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailOperatingSystemInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationPackageDetailOperatingSystemArrayInput)(nil)).Elem(), GetPublicationsPublicationPackageDetailOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationSupportContactInput)(nil)).Elem(), GetPublicationsPublicationSupportContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationSupportContactArrayInput)(nil)).Elem(), GetPublicationsPublicationSupportContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationSupportedOperatingSystemInput)(nil)).Elem(), GetPublicationsPublicationSupportedOperatingSystemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublicationsPublicationSupportedOperatingSystemArrayInput)(nil)).Elem(), GetPublicationsPublicationSupportedOperatingSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublishersFilterInput)(nil)).Elem(), GetPublishersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublishersFilterArrayInput)(nil)).Elem(), GetPublishersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublishersPublisherInput)(nil)).Elem(), GetPublishersPublisherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPublishersPublisherArrayInput)(nil)).Elem(), GetPublishersPublisherArray{})
	pulumi.RegisterOutputType(PublicationIconOutput{})
	pulumi.RegisterOutputType(PublicationIconArrayOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsPtrOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsEulaOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsEulaArrayOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsOperatingSystemOutput{})
	pulumi.RegisterOutputType(PublicationPackageDetailsOperatingSystemPtrOutput{})
	pulumi.RegisterOutputType(PublicationSupportContactOutput{})
	pulumi.RegisterOutputType(PublicationSupportContactArrayOutput{})
	pulumi.RegisterOutputType(PublicationSupportedOperatingSystemOutput{})
	pulumi.RegisterOutputType(PublicationSupportedOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetAcceptedAgreementsAcceptedAgreementOutput{})
	pulumi.RegisterOutputType(GetAcceptedAgreementsAcceptedAgreementArrayOutput{})
	pulumi.RegisterOutputType(GetAcceptedAgreementsFilterOutput{})
	pulumi.RegisterOutputType(GetAcceptedAgreementsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetCategoriesCategoryOutput{})
	pulumi.RegisterOutputType(GetCategoriesCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetCategoriesFilterOutput{})
	pulumi.RegisterOutputType(GetCategoriesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetListingBannerOutput{})
	pulumi.RegisterOutputType(GetListingBannerArrayOutput{})
	pulumi.RegisterOutputType(GetListingDocumentationLinkOutput{})
	pulumi.RegisterOutputType(GetListingDocumentationLinkArrayOutput{})
	pulumi.RegisterOutputType(GetListingIconOutput{})
	pulumi.RegisterOutputType(GetListingIconArrayOutput{})
	pulumi.RegisterOutputType(GetListingLanguageOutput{})
	pulumi.RegisterOutputType(GetListingLanguageArrayOutput{})
	pulumi.RegisterOutputType(GetListingLinkOutput{})
	pulumi.RegisterOutputType(GetListingLinkArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageAgreementsAgreementOutput{})
	pulumi.RegisterOutputType(GetListingPackageAgreementsAgreementArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageAgreementsFilterOutput{})
	pulumi.RegisterOutputType(GetListingPackageAgreementsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetListingPackageOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagePricingOutput{})
	pulumi.RegisterOutputType(GetListingPackagePricingArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagePricingInternationalMarketPriceOutput{})
	pulumi.RegisterOutputType(GetListingPackagePricingInternationalMarketPriceArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageRegionOutput{})
	pulumi.RegisterOutputType(GetListingPackageRegionArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageRegionCountryOutput{})
	pulumi.RegisterOutputType(GetListingPackageRegionCountryArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackageVariableOutput{})
	pulumi.RegisterOutputType(GetListingPackageVariableArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesFilterOutput{})
	pulumi.RegisterOutputType(GetListingPackagesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackagePricingOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackagePricingArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackagePricingInternationalMarketPriceOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackagePricingInternationalMarketPriceArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageRegionOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageRegionArrayOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageRegionCountryOutput{})
	pulumi.RegisterOutputType(GetListingPackagesListingPackageRegionCountryArrayOutput{})
	pulumi.RegisterOutputType(GetListingPublisherOutput{})
	pulumi.RegisterOutputType(GetListingPublisherArrayOutput{})
	pulumi.RegisterOutputType(GetListingPublisherLinkOutput{})
	pulumi.RegisterOutputType(GetListingPublisherLinkArrayOutput{})
	pulumi.RegisterOutputType(GetListingPublisherLogoOutput{})
	pulumi.RegisterOutputType(GetListingPublisherLogoArrayOutput{})
	pulumi.RegisterOutputType(GetListingRegionOutput{})
	pulumi.RegisterOutputType(GetListingRegionArrayOutput{})
	pulumi.RegisterOutputType(GetListingRegionCountryOutput{})
	pulumi.RegisterOutputType(GetListingRegionCountryArrayOutput{})
	pulumi.RegisterOutputType(GetListingScreenshotOutput{})
	pulumi.RegisterOutputType(GetListingScreenshotArrayOutput{})
	pulumi.RegisterOutputType(GetListingSupportContactOutput{})
	pulumi.RegisterOutputType(GetListingSupportContactArrayOutput{})
	pulumi.RegisterOutputType(GetListingSupportLinkOutput{})
	pulumi.RegisterOutputType(GetListingSupportLinkArrayOutput{})
	pulumi.RegisterOutputType(GetListingSupportedOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetListingSupportedOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetListingTaxesFilterOutput{})
	pulumi.RegisterOutputType(GetListingTaxesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetListingTaxesTaxOutput{})
	pulumi.RegisterOutputType(GetListingTaxesTaxArrayOutput{})
	pulumi.RegisterOutputType(GetListingVideoOutput{})
	pulumi.RegisterOutputType(GetListingVideoArrayOutput{})
	pulumi.RegisterOutputType(GetListingsFilterOutput{})
	pulumi.RegisterOutputType(GetListingsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingOutput{})
	pulumi.RegisterOutputType(GetListingsListingArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingBannerOutput{})
	pulumi.RegisterOutputType(GetListingsListingBannerArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingDocumentationLinkOutput{})
	pulumi.RegisterOutputType(GetListingsListingDocumentationLinkArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingIconOutput{})
	pulumi.RegisterOutputType(GetListingsListingIconArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingPublisherOutput{})
	pulumi.RegisterOutputType(GetListingsListingPublisherArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingRegionOutput{})
	pulumi.RegisterOutputType(GetListingsListingRegionArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingRegionCountryOutput{})
	pulumi.RegisterOutputType(GetListingsListingRegionCountryArrayOutput{})
	pulumi.RegisterOutputType(GetListingsListingSupportedOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetListingsListingSupportedOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationIconOutput{})
	pulumi.RegisterOutputType(GetPublicationIconArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailEulaOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailEulaArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageDetailOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageVariableOutput{})
	pulumi.RegisterOutputType(GetPublicationPackageVariableArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackagesFilterOutput{})
	pulumi.RegisterOutputType(GetPublicationPackagesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationPackagesPublicationPackageOutput{})
	pulumi.RegisterOutputType(GetPublicationPackagesPublicationPackageArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationSupportContactOutput{})
	pulumi.RegisterOutputType(GetPublicationSupportContactArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationSupportedOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetPublicationSupportedOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsFilterOutput{})
	pulumi.RegisterOutputType(GetPublicationsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationIconOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationIconArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailEulaOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailEulaArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationPackageDetailOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationSupportContactOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationSupportContactArrayOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationSupportedOperatingSystemOutput{})
	pulumi.RegisterOutputType(GetPublicationsPublicationSupportedOperatingSystemArrayOutput{})
	pulumi.RegisterOutputType(GetPublishersFilterOutput{})
	pulumi.RegisterOutputType(GetPublishersFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPublishersPublisherOutput{})
	pulumi.RegisterOutputType(GetPublishersPublisherArrayOutput{})
}
