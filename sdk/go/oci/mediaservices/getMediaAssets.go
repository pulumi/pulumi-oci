// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Media Assets in Oracle Cloud Infrastructure Media Services service.
//
// Returns a list of MediaAssetSummary.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/MediaServices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MediaServices.GetMediaAssets(ctx, &mediaservices.GetMediaAssetsArgs{
//				Bucket:                     pulumi.StringRef(mediaAssetBucket),
//				CompartmentId:              pulumi.StringRef(compartmentId),
//				DisplayName:                pulumi.StringRef(mediaAssetDisplayName),
//				DistributionChannelId:      pulumi.StringRef(testChannel.Id),
//				MasterMediaAssetId:         pulumi.StringRef(testMediaAsset.Id),
//				MediaWorkflowJobId:         pulumi.StringRef(testMediaWorkflowJob.Id),
//				Object:                     pulumi.StringRef(mediaAssetObject),
//				ParentMediaAssetId:         pulumi.StringRef(testMediaAsset.Id),
//				SourceMediaWorkflowId:      pulumi.StringRef(testMediaWorkflow.Id),
//				SourceMediaWorkflowVersion: pulumi.StringRef(mediaAssetSourceMediaWorkflowVersion),
//				State:                      pulumi.StringRef(mediaAssetState),
//				Type:                       pulumi.StringRef(mediaAssetType),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMediaAssets(ctx *pulumi.Context, args *GetMediaAssetsArgs, opts ...pulumi.InvokeOption) (*GetMediaAssetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMediaAssetsResult
	err := ctx.Invoke("oci:MediaServices/getMediaAssets:getMediaAssets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMediaAssets.
type GetMediaAssetsArgs struct {
	// Filter MediaAsset by the bucket where the object is stored.
	Bucket *string `pulumi:"bucket"`
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only the resources that match the entire display name given.
	DisplayName *string `pulumi:"displayName"`
	// Unique DistributionChannel identifier.
	DistributionChannelId *string                `pulumi:"distributionChannelId"`
	Filters               []GetMediaAssetsFilter `pulumi:"filters"`
	// Unique MediaAsset identifier of the first asset upload.
	MasterMediaAssetId *string `pulumi:"masterMediaAssetId"`
	// The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
	MediaWorkflowJobId *string `pulumi:"mediaWorkflowJobId"`
	// Filter MediaAsset by the name of the object in object storage.
	Object *string `pulumi:"object"`
	// Unique MediaAsset identifier of the asset from which this asset is derived.
	ParentMediaAssetId *string `pulumi:"parentMediaAssetId"`
	// The ID of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowId *string `pulumi:"sourceMediaWorkflowId"`
	// The version of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowVersion *string `pulumi:"sourceMediaWorkflowVersion"`
	// A filter to return only the resources with lifecycleState matching the given lifecycleState.
	State *string `pulumi:"state"`
	// Filter MediaAsset by the asset type.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getMediaAssets.
type GetMediaAssetsResult struct {
	// The name of the object storage bucket where this represented asset is located.
	Bucket *string `pulumi:"bucket"`
	// The compartment ID of the lock.
	CompartmentId *string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName           *string                `pulumi:"displayName"`
	DistributionChannelId *string                `pulumi:"distributionChannelId"`
	Filters               []GetMediaAssetsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the senior most asset from which this asset is derived.
	MasterMediaAssetId *string `pulumi:"masterMediaAssetId"`
	// The list of media_asset_collection.
	MediaAssetCollections []GetMediaAssetsMediaAssetCollection `pulumi:"mediaAssetCollections"`
	// The ID of the MediaWorkflowJob used to produce this asset.
	MediaWorkflowJobId *string `pulumi:"mediaWorkflowJobId"`
	// The object storage object name that identifies this asset.
	Object *string `pulumi:"object"`
	// The ID of the parent asset from which this asset is derived.
	ParentMediaAssetId *string `pulumi:"parentMediaAssetId"`
	// The ID of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowId *string `pulumi:"sourceMediaWorkflowId"`
	// The version of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowVersion *string `pulumi:"sourceMediaWorkflowVersion"`
	// The current state of the MediaAsset.
	State *string `pulumi:"state"`
	// The type of the media asset.
	Type *string `pulumi:"type"`
}

func GetMediaAssetsOutput(ctx *pulumi.Context, args GetMediaAssetsOutputArgs, opts ...pulumi.InvokeOption) GetMediaAssetsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetMediaAssetsResultOutput, error) {
			args := v.(GetMediaAssetsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:MediaServices/getMediaAssets:getMediaAssets", args, GetMediaAssetsResultOutput{}, options).(GetMediaAssetsResultOutput), nil
		}).(GetMediaAssetsResultOutput)
}

// A collection of arguments for invoking getMediaAssets.
type GetMediaAssetsOutputArgs struct {
	// Filter MediaAsset by the bucket where the object is stored.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only the resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Unique DistributionChannel identifier.
	DistributionChannelId pulumi.StringPtrInput          `pulumi:"distributionChannelId"`
	Filters               GetMediaAssetsFilterArrayInput `pulumi:"filters"`
	// Unique MediaAsset identifier of the first asset upload.
	MasterMediaAssetId pulumi.StringPtrInput `pulumi:"masterMediaAssetId"`
	// The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
	MediaWorkflowJobId pulumi.StringPtrInput `pulumi:"mediaWorkflowJobId"`
	// Filter MediaAsset by the name of the object in object storage.
	Object pulumi.StringPtrInput `pulumi:"object"`
	// Unique MediaAsset identifier of the asset from which this asset is derived.
	ParentMediaAssetId pulumi.StringPtrInput `pulumi:"parentMediaAssetId"`
	// The ID of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowId pulumi.StringPtrInput `pulumi:"sourceMediaWorkflowId"`
	// The version of the MediaWorkflow used to produce this asset.
	SourceMediaWorkflowVersion pulumi.StringPtrInput `pulumi:"sourceMediaWorkflowVersion"`
	// A filter to return only the resources with lifecycleState matching the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Filter MediaAsset by the asset type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetMediaAssetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaAssetsArgs)(nil)).Elem()
}

// A collection of values returned by getMediaAssets.
type GetMediaAssetsResultOutput struct{ *pulumi.OutputState }

func (GetMediaAssetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaAssetsResult)(nil)).Elem()
}

func (o GetMediaAssetsResultOutput) ToGetMediaAssetsResultOutput() GetMediaAssetsResultOutput {
	return o
}

func (o GetMediaAssetsResultOutput) ToGetMediaAssetsResultOutputWithContext(ctx context.Context) GetMediaAssetsResultOutput {
	return o
}

// The name of the object storage bucket where this represented asset is located.
func (o GetMediaAssetsResultOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The compartment ID of the lock.
func (o GetMediaAssetsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetMediaAssetsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetMediaAssetsResultOutput) DistributionChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.DistributionChannelId }).(pulumi.StringPtrOutput)
}

func (o GetMediaAssetsResultOutput) Filters() GetMediaAssetsFilterArrayOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) []GetMediaAssetsFilter { return v.Filters }).(GetMediaAssetsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMediaAssetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the senior most asset from which this asset is derived.
func (o GetMediaAssetsResultOutput) MasterMediaAssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.MasterMediaAssetId }).(pulumi.StringPtrOutput)
}

// The list of media_asset_collection.
func (o GetMediaAssetsResultOutput) MediaAssetCollections() GetMediaAssetsMediaAssetCollectionArrayOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) []GetMediaAssetsMediaAssetCollection { return v.MediaAssetCollections }).(GetMediaAssetsMediaAssetCollectionArrayOutput)
}

// The ID of the MediaWorkflowJob used to produce this asset.
func (o GetMediaAssetsResultOutput) MediaWorkflowJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.MediaWorkflowJobId }).(pulumi.StringPtrOutput)
}

// The object storage object name that identifies this asset.
func (o GetMediaAssetsResultOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.Object }).(pulumi.StringPtrOutput)
}

// The ID of the parent asset from which this asset is derived.
func (o GetMediaAssetsResultOutput) ParentMediaAssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.ParentMediaAssetId }).(pulumi.StringPtrOutput)
}

// The ID of the MediaWorkflow used to produce this asset.
func (o GetMediaAssetsResultOutput) SourceMediaWorkflowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.SourceMediaWorkflowId }).(pulumi.StringPtrOutput)
}

// The version of the MediaWorkflow used to produce this asset.
func (o GetMediaAssetsResultOutput) SourceMediaWorkflowVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.SourceMediaWorkflowVersion }).(pulumi.StringPtrOutput)
}

// The current state of the MediaAsset.
func (o GetMediaAssetsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The type of the media asset.
func (o GetMediaAssetsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaAssetsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMediaAssetsResultOutput{})
}
