// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetMediaWorkflowJobFact(ctx *pulumi.Context, args *GetMediaWorkflowJobFactArgs, opts ...pulumi.InvokeOption) (*GetMediaWorkflowJobFactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMediaWorkflowJobFactResult
	err := ctx.Invoke("oci:MediaServices/getMediaWorkflowJobFact:getMediaWorkflowJobFact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMediaWorkflowJobFact.
type GetMediaWorkflowJobFactArgs struct {
	Key                string `pulumi:"key"`
	MediaWorkflowJobId string `pulumi:"mediaWorkflowJobId"`
}

// A collection of values returned by getMediaWorkflowJobFact.
type GetMediaWorkflowJobFactResult struct {
	Detail string `pulumi:"detail"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string `pulumi:"id"`
	Key                string `pulumi:"key"`
	MediaWorkflowJobId string `pulumi:"mediaWorkflowJobId"`
	Name               string `pulumi:"name"`
	Type               string `pulumi:"type"`
}

func GetMediaWorkflowJobFactOutput(ctx *pulumi.Context, args GetMediaWorkflowJobFactOutputArgs, opts ...pulumi.InvokeOption) GetMediaWorkflowJobFactResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMediaWorkflowJobFactResult, error) {
			args := v.(GetMediaWorkflowJobFactArgs)
			r, err := GetMediaWorkflowJobFact(ctx, &args, opts...)
			var s GetMediaWorkflowJobFactResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMediaWorkflowJobFactResultOutput)
}

// A collection of arguments for invoking getMediaWorkflowJobFact.
type GetMediaWorkflowJobFactOutputArgs struct {
	Key                pulumi.StringInput `pulumi:"key"`
	MediaWorkflowJobId pulumi.StringInput `pulumi:"mediaWorkflowJobId"`
}

func (GetMediaWorkflowJobFactOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaWorkflowJobFactArgs)(nil)).Elem()
}

// A collection of values returned by getMediaWorkflowJobFact.
type GetMediaWorkflowJobFactResultOutput struct{ *pulumi.OutputState }

func (GetMediaWorkflowJobFactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaWorkflowJobFactResult)(nil)).Elem()
}

func (o GetMediaWorkflowJobFactResultOutput) ToGetMediaWorkflowJobFactResultOutput() GetMediaWorkflowJobFactResultOutput {
	return o
}

func (o GetMediaWorkflowJobFactResultOutput) ToGetMediaWorkflowJobFactResultOutputWithContext(ctx context.Context) GetMediaWorkflowJobFactResultOutput {
	return o
}

func (o GetMediaWorkflowJobFactResultOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.Detail }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMediaWorkflowJobFactResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMediaWorkflowJobFactResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetMediaWorkflowJobFactResultOutput) MediaWorkflowJobId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.MediaWorkflowJobId }).(pulumi.StringOutput)
}

func (o GetMediaWorkflowJobFactResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMediaWorkflowJobFactResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaWorkflowJobFactResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMediaWorkflowJobFactResultOutput{})
}
