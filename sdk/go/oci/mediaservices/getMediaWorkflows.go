// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Media Workflows in Oracle Cloud Infrastructure Media Services service.
//
// Lists the MediaWorkflows.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/MediaServices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MediaServices.GetMediaWorkflows(ctx, &mediaservices.GetMediaWorkflowsArgs{
//				CompartmentId: pulumi.StringRef(compartmentId),
//				DisplayName:   pulumi.StringRef(mediaWorkflowDisplayName),
//				Id:            pulumi.StringRef(mediaWorkflowId),
//				State:         pulumi.StringRef(mediaWorkflowState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetMediaWorkflows(ctx *pulumi.Context, args *GetMediaWorkflowsArgs, opts ...pulumi.InvokeOption) (*GetMediaWorkflowsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMediaWorkflowsResult
	err := ctx.Invoke("oci:MediaServices/getMediaWorkflows:getMediaWorkflows", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMediaWorkflows.
type GetMediaWorkflowsArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId *string `pulumi:"compartmentId"`
	// A filter to return only the resources that match the entire display name given.
	DisplayName *string                   `pulumi:"displayName"`
	Filters     []GetMediaWorkflowsFilter `pulumi:"filters"`
	// Unique MediaWorkflow identifier.
	Id *string `pulumi:"id"`
	// A filter to return only the resources with lifecycleState matching the given lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getMediaWorkflows.
type GetMediaWorkflowsResult struct {
	// The compartment ID of the lock.
	CompartmentId *string `pulumi:"compartmentId"`
	// Name of the Media Workflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string                   `pulumi:"displayName"`
	Filters     []GetMediaWorkflowsFilter `pulumi:"filters"`
	// Unique identifier that is immutable on creation.
	Id *string `pulumi:"id"`
	// The list of media_workflow_collection.
	MediaWorkflowCollections []GetMediaWorkflowsMediaWorkflowCollection `pulumi:"mediaWorkflowCollections"`
	// The current state of the MediaWorkflow.
	State *string `pulumi:"state"`
}

func GetMediaWorkflowsOutput(ctx *pulumi.Context, args GetMediaWorkflowsOutputArgs, opts ...pulumi.InvokeOption) GetMediaWorkflowsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMediaWorkflowsResult, error) {
			args := v.(GetMediaWorkflowsArgs)
			r, err := GetMediaWorkflows(ctx, &args, opts...)
			var s GetMediaWorkflowsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMediaWorkflowsResultOutput)
}

// A collection of arguments for invoking getMediaWorkflows.
type GetMediaWorkflowsOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A filter to return only the resources that match the entire display name given.
	DisplayName pulumi.StringPtrInput             `pulumi:"displayName"`
	Filters     GetMediaWorkflowsFilterArrayInput `pulumi:"filters"`
	// Unique MediaWorkflow identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to return only the resources with lifecycleState matching the given lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetMediaWorkflowsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaWorkflowsArgs)(nil)).Elem()
}

// A collection of values returned by getMediaWorkflows.
type GetMediaWorkflowsResultOutput struct{ *pulumi.OutputState }

func (GetMediaWorkflowsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaWorkflowsResult)(nil)).Elem()
}

func (o GetMediaWorkflowsResultOutput) ToGetMediaWorkflowsResultOutput() GetMediaWorkflowsResultOutput {
	return o
}

func (o GetMediaWorkflowsResultOutput) ToGetMediaWorkflowsResultOutputWithContext(ctx context.Context) GetMediaWorkflowsResultOutput {
	return o
}

// The compartment ID of the lock.
func (o GetMediaWorkflowsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// Name of the Media Workflow. Does not have to be unique, and it's changeable. Avoid entering confidential information.
func (o GetMediaWorkflowsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetMediaWorkflowsResultOutput) Filters() GetMediaWorkflowsFilterArrayOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) []GetMediaWorkflowsFilter { return v.Filters }).(GetMediaWorkflowsFilterArrayOutput)
}

// Unique identifier that is immutable on creation.
func (o GetMediaWorkflowsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of media_workflow_collection.
func (o GetMediaWorkflowsResultOutput) MediaWorkflowCollections() GetMediaWorkflowsMediaWorkflowCollectionArrayOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) []GetMediaWorkflowsMediaWorkflowCollection {
		return v.MediaWorkflowCollections
	}).(GetMediaWorkflowsMediaWorkflowCollectionArrayOutput)
}

// The current state of the MediaWorkflow.
func (o GetMediaWorkflowsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaWorkflowsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMediaWorkflowsResultOutput{})
}
