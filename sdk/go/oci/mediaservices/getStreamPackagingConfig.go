// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Stream Packaging Config resource in Oracle Cloud Infrastructure Media Services service.
//
// Gets a Stream Packaging Configuration by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/MediaServices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MediaServices.GetStreamPackagingConfig(ctx, &mediaservices.GetStreamPackagingConfigArgs{
//				StreamPackagingConfigId: testStreamPackagingConfigOciMediaServicesStreamPackagingConfig.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamPackagingConfig(ctx *pulumi.Context, args *LookupStreamPackagingConfigArgs, opts ...pulumi.InvokeOption) (*LookupStreamPackagingConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamPackagingConfigResult
	err := ctx.Invoke("oci:MediaServices/getStreamPackagingConfig:getStreamPackagingConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamPackagingConfig.
type LookupStreamPackagingConfigArgs struct {
	// Unique Stream Packaging Configuration path identifier.
	StreamPackagingConfigId string `pulumi:"streamPackagingConfigId"`
}

// A collection of values returned by getStreamPackagingConfig.
type LookupStreamPackagingConfigResult struct {
	// The compartment ID of the lock.
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The name of the stream packaging configuration. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId string `pulumi:"distributionChannelId"`
	// The encryption used by the stream packaging configuration.
	Encryptions []GetStreamPackagingConfigEncryption `pulumi:"encryptions"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// Unique identifier that is immutable on creation.
	Id             string `pulumi:"id"`
	IsLockOverride bool   `pulumi:"isLockOverride"`
	// Locks associated with this resource.
	Locks []GetStreamPackagingConfigLock `pulumi:"locks"`
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds int `pulumi:"segmentTimeInSeconds"`
	// The current state of the Packaging Configuration.
	State                   string `pulumi:"state"`
	StreamPackagingConfigId string `pulumi:"streamPackagingConfigId"`
	// The output format for the package.
	StreamPackagingFormat string `pulumi:"streamPackagingFormat"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupStreamPackagingConfigOutput(ctx *pulumi.Context, args LookupStreamPackagingConfigOutputArgs, opts ...pulumi.InvokeOption) LookupStreamPackagingConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStreamPackagingConfigResultOutput, error) {
			args := v.(LookupStreamPackagingConfigArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupStreamPackagingConfigResult
			secret, err := ctx.InvokePackageRaw("oci:MediaServices/getStreamPackagingConfig:getStreamPackagingConfig", args, &rv, "", opts...)
			if err != nil {
				return LookupStreamPackagingConfigResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupStreamPackagingConfigResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupStreamPackagingConfigResultOutput), nil
			}
			return output, nil
		}).(LookupStreamPackagingConfigResultOutput)
}

// A collection of arguments for invoking getStreamPackagingConfig.
type LookupStreamPackagingConfigOutputArgs struct {
	// Unique Stream Packaging Configuration path identifier.
	StreamPackagingConfigId pulumi.StringInput `pulumi:"streamPackagingConfigId"`
}

func (LookupStreamPackagingConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamPackagingConfigArgs)(nil)).Elem()
}

// A collection of values returned by getStreamPackagingConfig.
type LookupStreamPackagingConfigResultOutput struct{ *pulumi.OutputState }

func (LookupStreamPackagingConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamPackagingConfigResult)(nil)).Elem()
}

func (o LookupStreamPackagingConfigResultOutput) ToLookupStreamPackagingConfigResultOutput() LookupStreamPackagingConfigResultOutput {
	return o
}

func (o LookupStreamPackagingConfigResultOutput) ToLookupStreamPackagingConfigResultOutputWithContext(ctx context.Context) LookupStreamPackagingConfigResultOutput {
	return o
}

// The compartment ID of the lock.
func (o LookupStreamPackagingConfigResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupStreamPackagingConfigResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The name of the stream packaging configuration. Avoid entering confidential information.
func (o LookupStreamPackagingConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
func (o LookupStreamPackagingConfigResultOutput) DistributionChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.DistributionChannelId }).(pulumi.StringOutput)
}

// The encryption used by the stream packaging configuration.
func (o LookupStreamPackagingConfigResultOutput) Encryptions() GetStreamPackagingConfigEncryptionArrayOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) []GetStreamPackagingConfigEncryption { return v.Encryptions }).(GetStreamPackagingConfigEncryptionArrayOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupStreamPackagingConfigResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// Unique identifier that is immutable on creation.
func (o LookupStreamPackagingConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupStreamPackagingConfigResultOutput) IsLockOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) bool { return v.IsLockOverride }).(pulumi.BoolOutput)
}

// Locks associated with this resource.
func (o LookupStreamPackagingConfigResultOutput) Locks() GetStreamPackagingConfigLockArrayOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) []GetStreamPackagingConfigLock { return v.Locks }).(GetStreamPackagingConfigLockArrayOutput)
}

// The duration in seconds for each fragment.
func (o LookupStreamPackagingConfigResultOutput) SegmentTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) int { return v.SegmentTimeInSeconds }).(pulumi.IntOutput)
}

// The current state of the Packaging Configuration.
func (o LookupStreamPackagingConfigResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupStreamPackagingConfigResultOutput) StreamPackagingConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.StreamPackagingConfigId }).(pulumi.StringOutput)
}

// The output format for the package.
func (o LookupStreamPackagingConfigResultOutput) StreamPackagingFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.StreamPackagingFormat }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupStreamPackagingConfigResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time when the Packaging Configuration was created. An RFC3339 formatted datetime string.
func (o LookupStreamPackagingConfigResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
func (o LookupStreamPackagingConfigResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPackagingConfigResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamPackagingConfigResultOutput{})
}
