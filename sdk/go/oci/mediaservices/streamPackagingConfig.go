// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mediaservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Stream Packaging Config resource in Oracle Cloud Infrastructure Media Services service.
//
// Creates a new Packaging Configuration.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/MediaServices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MediaServices.NewStreamPackagingConfig(ctx, "testStreamPackagingConfig", &MediaServices.StreamPackagingConfigArgs{
//				DisplayName:           pulumi.Any(_var.Stream_packaging_config_display_name),
//				DistributionChannelId: pulumi.Any(oci_mysql_channel.Test_channel.Id),
//				SegmentTimeInSeconds:  pulumi.Any(_var.Stream_packaging_config_segment_time_in_seconds),
//				StreamPackagingFormat: pulumi.Any(_var.Stream_packaging_config_stream_packaging_format),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Encryption: &mediaservices.StreamPackagingConfigEncryptionArgs{
//					Algorithm: pulumi.Any(_var.Stream_packaging_config_encryption_algorithm),
//					KmsKeyId:  pulumi.Any(oci_kms_key.Test_key.Id),
//				},
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				Locks: mediaservices.StreamPackagingConfigLockArray{
//					&mediaservices.StreamPackagingConfigLockArgs{
//						CompartmentId:     pulumi.Any(_var.Compartment_id),
//						Type:              pulumi.Any(_var.Stream_packaging_config_locks_type),
//						Message:           pulumi.Any(_var.Stream_packaging_config_locks_message),
//						RelatedResourceId: pulumi.Any(oci_usage_proxy_resource.Test_resource.Id),
//						TimeCreated:       pulumi.Any(_var.Stream_packaging_config_locks_time_created),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// StreamPackagingConfigs can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:MediaServices/streamPackagingConfig:StreamPackagingConfig test_stream_packaging_config "id"
// ```
type StreamPackagingConfig struct {
	pulumi.CustomResourceState

	// The compartment ID of the lock.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId pulumi.StringOutput `pulumi:"distributionChannelId"`
	// The encryption used by the stream packaging configuration.
	Encryption StreamPackagingConfigEncryptionOutput `pulumi:"encryption"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags   pulumi.MapOutput  `pulumi:"freeformTags"`
	IsLockOverride pulumi.BoolOutput `pulumi:"isLockOverride"`
	// Locks associated with this resource.
	Locks StreamPackagingConfigLockArrayOutput `pulumi:"locks"`
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds pulumi.IntOutput `pulumi:"segmentTimeInSeconds"`
	// The current state of the Packaging Configuration.
	State pulumi.StringOutput `pulumi:"state"`
	// The output format for the package.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamPackagingFormat pulumi.StringOutput `pulumi:"streamPackagingFormat"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// When the lock was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewStreamPackagingConfig registers a new resource with the given unique name, arguments, and options.
func NewStreamPackagingConfig(ctx *pulumi.Context,
	name string, args *StreamPackagingConfigArgs, opts ...pulumi.ResourceOption) (*StreamPackagingConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.DistributionChannelId == nil {
		return nil, errors.New("invalid value for required argument 'DistributionChannelId'")
	}
	if args.SegmentTimeInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'SegmentTimeInSeconds'")
	}
	if args.StreamPackagingFormat == nil {
		return nil, errors.New("invalid value for required argument 'StreamPackagingFormat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamPackagingConfig
	err := ctx.RegisterResource("oci:MediaServices/streamPackagingConfig:StreamPackagingConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamPackagingConfig gets an existing StreamPackagingConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamPackagingConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamPackagingConfigState, opts ...pulumi.ResourceOption) (*StreamPackagingConfig, error) {
	var resource StreamPackagingConfig
	err := ctx.ReadResource("oci:MediaServices/streamPackagingConfig:StreamPackagingConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamPackagingConfig resources.
type streamPackagingConfigState struct {
	// The compartment ID of the lock.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId *string `pulumi:"distributionChannelId"`
	// The encryption used by the stream packaging configuration.
	Encryption *StreamPackagingConfigEncryption `pulumi:"encryption"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags   map[string]interface{} `pulumi:"freeformTags"`
	IsLockOverride *bool                  `pulumi:"isLockOverride"`
	// Locks associated with this resource.
	Locks []StreamPackagingConfigLock `pulumi:"locks"`
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds *int `pulumi:"segmentTimeInSeconds"`
	// The current state of the Packaging Configuration.
	State *string `pulumi:"state"`
	// The output format for the package.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamPackagingFormat *string `pulumi:"streamPackagingFormat"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// When the lock was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type StreamPackagingConfigState struct {
	// The compartment ID of the lock.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId pulumi.StringPtrInput
	// The encryption used by the stream packaging configuration.
	Encryption StreamPackagingConfigEncryptionPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags   pulumi.MapInput
	IsLockOverride pulumi.BoolPtrInput
	// Locks associated with this resource.
	Locks StreamPackagingConfigLockArrayInput
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds pulumi.IntPtrInput
	// The current state of the Packaging Configuration.
	State pulumi.StringPtrInput
	// The output format for the package.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamPackagingFormat pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// When the lock was created.
	TimeCreated pulumi.StringPtrInput
	// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (StreamPackagingConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamPackagingConfigState)(nil)).Elem()
}

type streamPackagingConfigArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId string `pulumi:"distributionChannelId"`
	// The encryption used by the stream packaging configuration.
	Encryption *StreamPackagingConfigEncryption `pulumi:"encryption"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags   map[string]interface{} `pulumi:"freeformTags"`
	IsLockOverride *bool                  `pulumi:"isLockOverride"`
	// Locks associated with this resource.
	Locks []StreamPackagingConfigLock `pulumi:"locks"`
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds int `pulumi:"segmentTimeInSeconds"`
	// The output format for the package.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamPackagingFormat string `pulumi:"streamPackagingFormat"`
}

// The set of arguments for constructing a StreamPackagingConfig resource.
type StreamPackagingConfigArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
	DistributionChannelId pulumi.StringInput
	// The encryption used by the stream packaging configuration.
	Encryption StreamPackagingConfigEncryptionPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags   pulumi.MapInput
	IsLockOverride pulumi.BoolPtrInput
	// Locks associated with this resource.
	Locks StreamPackagingConfigLockArrayInput
	// The duration in seconds for each fragment.
	SegmentTimeInSeconds pulumi.IntInput
	// The output format for the package.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	StreamPackagingFormat pulumi.StringInput
}

func (StreamPackagingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamPackagingConfigArgs)(nil)).Elem()
}

type StreamPackagingConfigInput interface {
	pulumi.Input

	ToStreamPackagingConfigOutput() StreamPackagingConfigOutput
	ToStreamPackagingConfigOutputWithContext(ctx context.Context) StreamPackagingConfigOutput
}

func (*StreamPackagingConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamPackagingConfig)(nil)).Elem()
}

func (i *StreamPackagingConfig) ToStreamPackagingConfigOutput() StreamPackagingConfigOutput {
	return i.ToStreamPackagingConfigOutputWithContext(context.Background())
}

func (i *StreamPackagingConfig) ToStreamPackagingConfigOutputWithContext(ctx context.Context) StreamPackagingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPackagingConfigOutput)
}

// StreamPackagingConfigArrayInput is an input type that accepts StreamPackagingConfigArray and StreamPackagingConfigArrayOutput values.
// You can construct a concrete instance of `StreamPackagingConfigArrayInput` via:
//
//	StreamPackagingConfigArray{ StreamPackagingConfigArgs{...} }
type StreamPackagingConfigArrayInput interface {
	pulumi.Input

	ToStreamPackagingConfigArrayOutput() StreamPackagingConfigArrayOutput
	ToStreamPackagingConfigArrayOutputWithContext(context.Context) StreamPackagingConfigArrayOutput
}

type StreamPackagingConfigArray []StreamPackagingConfigInput

func (StreamPackagingConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamPackagingConfig)(nil)).Elem()
}

func (i StreamPackagingConfigArray) ToStreamPackagingConfigArrayOutput() StreamPackagingConfigArrayOutput {
	return i.ToStreamPackagingConfigArrayOutputWithContext(context.Background())
}

func (i StreamPackagingConfigArray) ToStreamPackagingConfigArrayOutputWithContext(ctx context.Context) StreamPackagingConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPackagingConfigArrayOutput)
}

// StreamPackagingConfigMapInput is an input type that accepts StreamPackagingConfigMap and StreamPackagingConfigMapOutput values.
// You can construct a concrete instance of `StreamPackagingConfigMapInput` via:
//
//	StreamPackagingConfigMap{ "key": StreamPackagingConfigArgs{...} }
type StreamPackagingConfigMapInput interface {
	pulumi.Input

	ToStreamPackagingConfigMapOutput() StreamPackagingConfigMapOutput
	ToStreamPackagingConfigMapOutputWithContext(context.Context) StreamPackagingConfigMapOutput
}

type StreamPackagingConfigMap map[string]StreamPackagingConfigInput

func (StreamPackagingConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamPackagingConfig)(nil)).Elem()
}

func (i StreamPackagingConfigMap) ToStreamPackagingConfigMapOutput() StreamPackagingConfigMapOutput {
	return i.ToStreamPackagingConfigMapOutputWithContext(context.Background())
}

func (i StreamPackagingConfigMap) ToStreamPackagingConfigMapOutputWithContext(ctx context.Context) StreamPackagingConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPackagingConfigMapOutput)
}

type StreamPackagingConfigOutput struct{ *pulumi.OutputState }

func (StreamPackagingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamPackagingConfig)(nil)).Elem()
}

func (o StreamPackagingConfigOutput) ToStreamPackagingConfigOutput() StreamPackagingConfigOutput {
	return o
}

func (o StreamPackagingConfigOutput) ToStreamPackagingConfigOutputWithContext(ctx context.Context) StreamPackagingConfigOutput {
	return o
}

// The compartment ID of the lock.
func (o StreamPackagingConfigOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o StreamPackagingConfigOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) The name of the stream Packaging Configuration. Avoid entering confidential information.
func (o StreamPackagingConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Unique identifier of the Distribution Channel that this stream packaging configuration belongs to.
func (o StreamPackagingConfigOutput) DistributionChannelId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.DistributionChannelId }).(pulumi.StringOutput)
}

// The encryption used by the stream packaging configuration.
func (o StreamPackagingConfigOutput) Encryption() StreamPackagingConfigEncryptionOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) StreamPackagingConfigEncryptionOutput { return v.Encryption }).(StreamPackagingConfigEncryptionOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o StreamPackagingConfigOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

func (o StreamPackagingConfigOutput) IsLockOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.BoolOutput { return v.IsLockOverride }).(pulumi.BoolOutput)
}

// Locks associated with this resource.
func (o StreamPackagingConfigOutput) Locks() StreamPackagingConfigLockArrayOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) StreamPackagingConfigLockArrayOutput { return v.Locks }).(StreamPackagingConfigLockArrayOutput)
}

// The duration in seconds for each fragment.
func (o StreamPackagingConfigOutput) SegmentTimeInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.IntOutput { return v.SegmentTimeInSeconds }).(pulumi.IntOutput)
}

// The current state of the Packaging Configuration.
func (o StreamPackagingConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The output format for the package.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o StreamPackagingConfigOutput) StreamPackagingFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.StreamPackagingFormat }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o StreamPackagingConfigOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// When the lock was created.
func (o StreamPackagingConfigOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time when the Packaging Configuration was updated. An RFC3339 formatted datetime string.
func (o StreamPackagingConfigOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPackagingConfig) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type StreamPackagingConfigArrayOutput struct{ *pulumi.OutputState }

func (StreamPackagingConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamPackagingConfig)(nil)).Elem()
}

func (o StreamPackagingConfigArrayOutput) ToStreamPackagingConfigArrayOutput() StreamPackagingConfigArrayOutput {
	return o
}

func (o StreamPackagingConfigArrayOutput) ToStreamPackagingConfigArrayOutputWithContext(ctx context.Context) StreamPackagingConfigArrayOutput {
	return o
}

func (o StreamPackagingConfigArrayOutput) Index(i pulumi.IntInput) StreamPackagingConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamPackagingConfig {
		return vs[0].([]*StreamPackagingConfig)[vs[1].(int)]
	}).(StreamPackagingConfigOutput)
}

type StreamPackagingConfigMapOutput struct{ *pulumi.OutputState }

func (StreamPackagingConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamPackagingConfig)(nil)).Elem()
}

func (o StreamPackagingConfigMapOutput) ToStreamPackagingConfigMapOutput() StreamPackagingConfigMapOutput {
	return o
}

func (o StreamPackagingConfigMapOutput) ToStreamPackagingConfigMapOutputWithContext(ctx context.Context) StreamPackagingConfigMapOutput {
	return o
}

func (o StreamPackagingConfigMapOutput) MapIndex(k pulumi.StringInput) StreamPackagingConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamPackagingConfig {
		return vs[0].(map[string]*StreamPackagingConfig)[vs[1].(string)]
	}).(StreamPackagingConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPackagingConfigInput)(nil)).Elem(), &StreamPackagingConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPackagingConfigArrayInput)(nil)).Elem(), StreamPackagingConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPackagingConfigMapInput)(nil)).Elem(), StreamPackagingConfigMap{})
	pulumi.RegisterOutputType(StreamPackagingConfigOutput{})
	pulumi.RegisterOutputType(StreamPackagingConfigArrayOutput{})
	pulumi.RegisterOutputType(StreamPackagingConfigMapOutput{})
}
