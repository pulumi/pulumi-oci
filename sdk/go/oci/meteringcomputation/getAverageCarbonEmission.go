// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Average Carbon Emission resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the average carbon emissions summary by SKU.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/meteringcomputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := meteringcomputation.GetAverageCarbonEmission(ctx, &meteringcomputation.GetAverageCarbonEmissionArgs{
//				SkuPartNumber: averageCarbonEmissionSkuPartNumber,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAverageCarbonEmission(ctx *pulumi.Context, args *GetAverageCarbonEmissionArgs, opts ...pulumi.InvokeOption) (*GetAverageCarbonEmissionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAverageCarbonEmissionResult
	err := ctx.Invoke("oci:MeteringComputation/getAverageCarbonEmission:getAverageCarbonEmission", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAverageCarbonEmission.
type GetAverageCarbonEmissionArgs struct {
	// The SKU part number.
	SkuPartNumber string `pulumi:"skuPartNumber"`
}

// A collection of values returned by getAverageCarbonEmission.
type GetAverageCarbonEmissionResult struct {
	// The average carbon emissions by SKU.
	AverageCarbonEmission float64 `pulumi:"averageCarbonEmission"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The sku part number.
	SkuPartNumber string `pulumi:"skuPartNumber"`
}

func GetAverageCarbonEmissionOutput(ctx *pulumi.Context, args GetAverageCarbonEmissionOutputArgs, opts ...pulumi.InvokeOption) GetAverageCarbonEmissionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAverageCarbonEmissionResultOutput, error) {
			args := v.(GetAverageCarbonEmissionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:MeteringComputation/getAverageCarbonEmission:getAverageCarbonEmission", args, GetAverageCarbonEmissionResultOutput{}, options).(GetAverageCarbonEmissionResultOutput), nil
		}).(GetAverageCarbonEmissionResultOutput)
}

// A collection of arguments for invoking getAverageCarbonEmission.
type GetAverageCarbonEmissionOutputArgs struct {
	// The SKU part number.
	SkuPartNumber pulumi.StringInput `pulumi:"skuPartNumber"`
}

func (GetAverageCarbonEmissionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAverageCarbonEmissionArgs)(nil)).Elem()
}

// A collection of values returned by getAverageCarbonEmission.
type GetAverageCarbonEmissionResultOutput struct{ *pulumi.OutputState }

func (GetAverageCarbonEmissionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAverageCarbonEmissionResult)(nil)).Elem()
}

func (o GetAverageCarbonEmissionResultOutput) ToGetAverageCarbonEmissionResultOutput() GetAverageCarbonEmissionResultOutput {
	return o
}

func (o GetAverageCarbonEmissionResultOutput) ToGetAverageCarbonEmissionResultOutputWithContext(ctx context.Context) GetAverageCarbonEmissionResultOutput {
	return o
}

// The average carbon emissions by SKU.
func (o GetAverageCarbonEmissionResultOutput) AverageCarbonEmission() pulumi.Float64Output {
	return o.ApplyT(func(v GetAverageCarbonEmissionResult) float64 { return v.AverageCarbonEmission }).(pulumi.Float64Output)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAverageCarbonEmissionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAverageCarbonEmissionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The sku part number.
func (o GetAverageCarbonEmissionResultOutput) SkuPartNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetAverageCarbonEmissionResult) string { return v.SkuPartNumber }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAverageCarbonEmissionResultOutput{})
}
