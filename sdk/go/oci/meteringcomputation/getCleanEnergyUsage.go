// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Clean Energy Usage resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the clean energy usage summary by region.
func GetCleanEnergyUsage(ctx *pulumi.Context, args *GetCleanEnergyUsageArgs, opts ...pulumi.InvokeOption) (*GetCleanEnergyUsageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCleanEnergyUsageResult
	err := ctx.Invoke("oci:MeteringComputation/getCleanEnergyUsage:getCleanEnergyUsage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCleanEnergyUsage.
type GetCleanEnergyUsageArgs struct {
	// The region.
	Region string `pulumi:"region"`
}

// A collection of values returned by getCleanEnergyUsage.
type GetCleanEnergyUsageResult struct {
	// The availability domain.
	Ad string `pulumi:"ad"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The region.
	Region string `pulumi:"region"`
	// The percentage of clean enery used.
	Usage float64 `pulumi:"usage"`
}

func GetCleanEnergyUsageOutput(ctx *pulumi.Context, args GetCleanEnergyUsageOutputArgs, opts ...pulumi.InvokeOption) GetCleanEnergyUsageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCleanEnergyUsageResult, error) {
			args := v.(GetCleanEnergyUsageArgs)
			r, err := GetCleanEnergyUsage(ctx, &args, opts...)
			var s GetCleanEnergyUsageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCleanEnergyUsageResultOutput)
}

// A collection of arguments for invoking getCleanEnergyUsage.
type GetCleanEnergyUsageOutputArgs struct {
	// The region.
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetCleanEnergyUsageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCleanEnergyUsageArgs)(nil)).Elem()
}

// A collection of values returned by getCleanEnergyUsage.
type GetCleanEnergyUsageResultOutput struct{ *pulumi.OutputState }

func (GetCleanEnergyUsageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCleanEnergyUsageResult)(nil)).Elem()
}

func (o GetCleanEnergyUsageResultOutput) ToGetCleanEnergyUsageResultOutput() GetCleanEnergyUsageResultOutput {
	return o
}

func (o GetCleanEnergyUsageResultOutput) ToGetCleanEnergyUsageResultOutputWithContext(ctx context.Context) GetCleanEnergyUsageResultOutput {
	return o
}

// The availability domain.
func (o GetCleanEnergyUsageResultOutput) Ad() pulumi.StringOutput {
	return o.ApplyT(func(v GetCleanEnergyUsageResult) string { return v.Ad }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCleanEnergyUsageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCleanEnergyUsageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The region.
func (o GetCleanEnergyUsageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCleanEnergyUsageResult) string { return v.Region }).(pulumi.StringOutput)
}

// The percentage of clean enery used.
func (o GetCleanEnergyUsageResultOutput) Usage() pulumi.Float64Output {
	return o.ApplyT(func(v GetCleanEnergyUsageResult) float64 { return v.Usage }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(GetCleanEnergyUsageResultOutput{})
}
