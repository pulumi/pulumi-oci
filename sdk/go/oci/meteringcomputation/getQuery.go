// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Query resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the saved query.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/MeteringComputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MeteringComputation.GetQuery(ctx, &meteringcomputation.GetQueryArgs{
//				QueryId: testQueryOciMeteringComputationQuery.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupQuery(ctx *pulumi.Context, args *LookupQueryArgs, opts ...pulumi.InvokeOption) (*LookupQueryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupQueryResult
	err := ctx.Invoke("oci:MeteringComputation/getQuery:getQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuery.
type LookupQueryArgs struct {
	// The query unique OCID.
	QueryId string `pulumi:"queryId"`
}

// A collection of values returned by getQuery.
type LookupQueryResult struct {
	// The compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// The query OCID.
	Id string `pulumi:"id"`
	// The common fields for queries.
	QueryDefinitions []GetQueryQueryDefinition `pulumi:"queryDefinitions"`
	QueryId          string                    `pulumi:"queryId"`
}

func LookupQueryOutput(ctx *pulumi.Context, args LookupQueryOutputArgs, opts ...pulumi.InvokeOption) LookupQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQueryResult, error) {
			args := v.(LookupQueryArgs)
			r, err := LookupQuery(ctx, &args, opts...)
			var s LookupQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQueryResultOutput)
}

// A collection of arguments for invoking getQuery.
type LookupQueryOutputArgs struct {
	// The query unique OCID.
	QueryId pulumi.StringInput `pulumi:"queryId"`
}

func (LookupQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueryArgs)(nil)).Elem()
}

// A collection of values returned by getQuery.
type LookupQueryResultOutput struct{ *pulumi.OutputState }

func (LookupQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueryResult)(nil)).Elem()
}

func (o LookupQueryResultOutput) ToLookupQueryResultOutput() LookupQueryResultOutput {
	return o
}

func (o LookupQueryResultOutput) ToLookupQueryResultOutputWithContext(ctx context.Context) LookupQueryResultOutput {
	return o
}

// The compartment OCID.
func (o LookupQueryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The query OCID.
func (o LookupQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

// The common fields for queries.
func (o LookupQueryResultOutput) QueryDefinitions() GetQueryQueryDefinitionArrayOutput {
	return o.ApplyT(func(v LookupQueryResult) []GetQueryQueryDefinition { return v.QueryDefinitions }).(GetQueryQueryDefinitionArrayOutput)
}

func (o LookupQueryResultOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueryResult) string { return v.QueryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueryResultOutput{})
}
