// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Usage Carbon Emissions Config resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the configuration list for the UI drop-down list of carbon emission console.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/MeteringComputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MeteringComputation.GetUsageCarbonEmissionsConfig(ctx, &meteringcomputation.GetUsageCarbonEmissionsConfigArgs{
//				TenantId: oci_metering_computation_tenant.Test_tenant.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUsageCarbonEmissionsConfig(ctx *pulumi.Context, args *GetUsageCarbonEmissionsConfigArgs, opts ...pulumi.InvokeOption) (*GetUsageCarbonEmissionsConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsageCarbonEmissionsConfigResult
	err := ctx.Invoke("oci:MeteringComputation/getUsageCarbonEmissionsConfig:getUsageCarbonEmissionsConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsageCarbonEmissionsConfig.
type GetUsageCarbonEmissionsConfigArgs struct {
	// tenant id
	TenantId string `pulumi:"tenantId"`
}

// A collection of values returned by getUsageCarbonEmissionsConfig.
type GetUsageCarbonEmissionsConfigResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of available configurations.
	Items    []GetUsageCarbonEmissionsConfigItem `pulumi:"items"`
	TenantId string                              `pulumi:"tenantId"`
}

func GetUsageCarbonEmissionsConfigOutput(ctx *pulumi.Context, args GetUsageCarbonEmissionsConfigOutputArgs, opts ...pulumi.InvokeOption) GetUsageCarbonEmissionsConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsageCarbonEmissionsConfigResult, error) {
			args := v.(GetUsageCarbonEmissionsConfigArgs)
			r, err := GetUsageCarbonEmissionsConfig(ctx, &args, opts...)
			var s GetUsageCarbonEmissionsConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsageCarbonEmissionsConfigResultOutput)
}

// A collection of arguments for invoking getUsageCarbonEmissionsConfig.
type GetUsageCarbonEmissionsConfigOutputArgs struct {
	// tenant id
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetUsageCarbonEmissionsConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsageCarbonEmissionsConfigArgs)(nil)).Elem()
}

// A collection of values returned by getUsageCarbonEmissionsConfig.
type GetUsageCarbonEmissionsConfigResultOutput struct{ *pulumi.OutputState }

func (GetUsageCarbonEmissionsConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsageCarbonEmissionsConfigResult)(nil)).Elem()
}

func (o GetUsageCarbonEmissionsConfigResultOutput) ToGetUsageCarbonEmissionsConfigResultOutput() GetUsageCarbonEmissionsConfigResultOutput {
	return o
}

func (o GetUsageCarbonEmissionsConfigResultOutput) ToGetUsageCarbonEmissionsConfigResultOutputWithContext(ctx context.Context) GetUsageCarbonEmissionsConfigResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsageCarbonEmissionsConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of available configurations.
func (o GetUsageCarbonEmissionsConfigResultOutput) Items() GetUsageCarbonEmissionsConfigItemArrayOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsConfigResult) []GetUsageCarbonEmissionsConfigItem { return v.Items }).(GetUsageCarbonEmissionsConfigItemArrayOutput)
}

func (o GetUsageCarbonEmissionsConfigResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsConfigResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsageCarbonEmissionsConfigResultOutput{})
}
