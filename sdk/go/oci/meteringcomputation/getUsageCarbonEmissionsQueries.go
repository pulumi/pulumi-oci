// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Usage Carbon Emissions Queries in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the usage carbon emissions saved query list.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/MeteringComputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := MeteringComputation.GetUsageCarbonEmissionsQueries(ctx, &meteringcomputation.GetUsageCarbonEmissionsQueriesArgs{
//				CompartmentId: compartmentId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetUsageCarbonEmissionsQueries(ctx *pulumi.Context, args *GetUsageCarbonEmissionsQueriesArgs, opts ...pulumi.InvokeOption) (*GetUsageCarbonEmissionsQueriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUsageCarbonEmissionsQueriesResult
	err := ctx.Invoke("oci:MeteringComputation/getUsageCarbonEmissionsQueries:getUsageCarbonEmissionsQueries", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsageCarbonEmissionsQueries.
type GetUsageCarbonEmissionsQueriesArgs struct {
	// The compartment ID in which to list resources.
	CompartmentId string                                 `pulumi:"compartmentId"`
	Filters       []GetUsageCarbonEmissionsQueriesFilter `pulumi:"filters"`
}

// A collection of values returned by getUsageCarbonEmissionsQueries.
type GetUsageCarbonEmissionsQueriesResult struct {
	// The compartment OCID.
	CompartmentId string                                 `pulumi:"compartmentId"`
	Filters       []GetUsageCarbonEmissionsQueriesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of usage_carbon_emissions_query_collection.
	UsageCarbonEmissionsQueryCollections []GetUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollection `pulumi:"usageCarbonEmissionsQueryCollections"`
}

func GetUsageCarbonEmissionsQueriesOutput(ctx *pulumi.Context, args GetUsageCarbonEmissionsQueriesOutputArgs, opts ...pulumi.InvokeOption) GetUsageCarbonEmissionsQueriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsageCarbonEmissionsQueriesResult, error) {
			args := v.(GetUsageCarbonEmissionsQueriesArgs)
			r, err := GetUsageCarbonEmissionsQueries(ctx, &args, opts...)
			var s GetUsageCarbonEmissionsQueriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsageCarbonEmissionsQueriesResultOutput)
}

// A collection of arguments for invoking getUsageCarbonEmissionsQueries.
type GetUsageCarbonEmissionsQueriesOutputArgs struct {
	// The compartment ID in which to list resources.
	CompartmentId pulumi.StringInput                             `pulumi:"compartmentId"`
	Filters       GetUsageCarbonEmissionsQueriesFilterArrayInput `pulumi:"filters"`
}

func (GetUsageCarbonEmissionsQueriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsageCarbonEmissionsQueriesArgs)(nil)).Elem()
}

// A collection of values returned by getUsageCarbonEmissionsQueries.
type GetUsageCarbonEmissionsQueriesResultOutput struct{ *pulumi.OutputState }

func (GetUsageCarbonEmissionsQueriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsageCarbonEmissionsQueriesResult)(nil)).Elem()
}

func (o GetUsageCarbonEmissionsQueriesResultOutput) ToGetUsageCarbonEmissionsQueriesResultOutput() GetUsageCarbonEmissionsQueriesResultOutput {
	return o
}

func (o GetUsageCarbonEmissionsQueriesResultOutput) ToGetUsageCarbonEmissionsQueriesResultOutputWithContext(ctx context.Context) GetUsageCarbonEmissionsQueriesResultOutput {
	return o
}

// The compartment OCID.
func (o GetUsageCarbonEmissionsQueriesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsQueriesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetUsageCarbonEmissionsQueriesResultOutput) Filters() GetUsageCarbonEmissionsQueriesFilterArrayOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsQueriesResult) []GetUsageCarbonEmissionsQueriesFilter { return v.Filters }).(GetUsageCarbonEmissionsQueriesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsageCarbonEmissionsQueriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsQueriesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of usage_carbon_emissions_query_collection.
func (o GetUsageCarbonEmissionsQueriesResultOutput) UsageCarbonEmissionsQueryCollections() GetUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionArrayOutput {
	return o.ApplyT(func(v GetUsageCarbonEmissionsQueriesResult) []GetUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollection {
		return v.UsageCarbonEmissionsQueryCollections
	}).(GetUsageCarbonEmissionsQueriesUsageCarbonEmissionsQueryCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsageCarbonEmissionsQueriesResultOutput{})
}
