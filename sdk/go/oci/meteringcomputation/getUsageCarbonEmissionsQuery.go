// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Usage Carbon Emissions Query resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the usage carbon emissions saved query.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/meteringcomputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := meteringcomputation.GetUsageCarbonEmissionsQuery(ctx, &meteringcomputation.GetUsageCarbonEmissionsQueryArgs{
//				UsageCarbonEmissionsQueryId: testUsageCarbonEmissionsQueryOciMeteringComputationUsageCarbonEmissionsQuery.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUsageCarbonEmissionsQuery(ctx *pulumi.Context, args *LookupUsageCarbonEmissionsQueryArgs, opts ...pulumi.InvokeOption) (*LookupUsageCarbonEmissionsQueryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUsageCarbonEmissionsQueryResult
	err := ctx.Invoke("oci:MeteringComputation/getUsageCarbonEmissionsQuery:getUsageCarbonEmissionsQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsageCarbonEmissionsQuery.
type LookupUsageCarbonEmissionsQueryArgs struct {
	// The query unique OCID.
	UsageCarbonEmissionsQueryId string `pulumi:"usageCarbonEmissionsQueryId"`
}

// A collection of values returned by getUsageCarbonEmissionsQuery.
type LookupUsageCarbonEmissionsQueryResult struct {
	// The compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// The query OCID.
	Id string `pulumi:"id"`
	// The common fields for queries.
	QueryDefinitions            []GetUsageCarbonEmissionsQueryQueryDefinition `pulumi:"queryDefinitions"`
	UsageCarbonEmissionsQueryId string                                        `pulumi:"usageCarbonEmissionsQueryId"`
}

func LookupUsageCarbonEmissionsQueryOutput(ctx *pulumi.Context, args LookupUsageCarbonEmissionsQueryOutputArgs, opts ...pulumi.InvokeOption) LookupUsageCarbonEmissionsQueryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUsageCarbonEmissionsQueryResultOutput, error) {
			args := v.(LookupUsageCarbonEmissionsQueryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:MeteringComputation/getUsageCarbonEmissionsQuery:getUsageCarbonEmissionsQuery", args, LookupUsageCarbonEmissionsQueryResultOutput{}, options).(LookupUsageCarbonEmissionsQueryResultOutput), nil
		}).(LookupUsageCarbonEmissionsQueryResultOutput)
}

// A collection of arguments for invoking getUsageCarbonEmissionsQuery.
type LookupUsageCarbonEmissionsQueryOutputArgs struct {
	// The query unique OCID.
	UsageCarbonEmissionsQueryId pulumi.StringInput `pulumi:"usageCarbonEmissionsQueryId"`
}

func (LookupUsageCarbonEmissionsQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsageCarbonEmissionsQueryArgs)(nil)).Elem()
}

// A collection of values returned by getUsageCarbonEmissionsQuery.
type LookupUsageCarbonEmissionsQueryResultOutput struct{ *pulumi.OutputState }

func (LookupUsageCarbonEmissionsQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsageCarbonEmissionsQueryResult)(nil)).Elem()
}

func (o LookupUsageCarbonEmissionsQueryResultOutput) ToLookupUsageCarbonEmissionsQueryResultOutput() LookupUsageCarbonEmissionsQueryResultOutput {
	return o
}

func (o LookupUsageCarbonEmissionsQueryResultOutput) ToLookupUsageCarbonEmissionsQueryResultOutputWithContext(ctx context.Context) LookupUsageCarbonEmissionsQueryResultOutput {
	return o
}

// The compartment OCID.
func (o LookupUsageCarbonEmissionsQueryResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsageCarbonEmissionsQueryResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The query OCID.
func (o LookupUsageCarbonEmissionsQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsageCarbonEmissionsQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

// The common fields for queries.
func (o LookupUsageCarbonEmissionsQueryResultOutput) QueryDefinitions() GetUsageCarbonEmissionsQueryQueryDefinitionArrayOutput {
	return o.ApplyT(func(v LookupUsageCarbonEmissionsQueryResult) []GetUsageCarbonEmissionsQueryQueryDefinition {
		return v.QueryDefinitions
	}).(GetUsageCarbonEmissionsQueryQueryDefinitionArrayOutput)
}

func (o LookupUsageCarbonEmissionsQueryResultOutput) UsageCarbonEmissionsQueryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsageCarbonEmissionsQueryResult) string { return v.UsageCarbonEmissionsQueryId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUsageCarbonEmissionsQueryResultOutput{})
}
