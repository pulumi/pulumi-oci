// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Usage Carbon Emissions Query resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Returns the created usage carbon emissions query.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/meteringcomputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := meteringcomputation.NewUsageCarbonEmissionsQuery(ctx, "test_usage_carbon_emissions_query", &meteringcomputation.UsageCarbonEmissionsQueryArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				QueryDefinition: &meteringcomputation.UsageCarbonEmissionsQueryQueryDefinitionArgs{
//					CostAnalysisUi: &meteringcomputation.UsageCarbonEmissionsQueryQueryDefinitionCostAnalysisUiArgs{
//						Graph:             pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionCostAnalysisUiGraph),
//						IsCumulativeGraph: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionCostAnalysisUiIsCumulativeGraph),
//					},
//					DisplayName: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionDisplayName),
//					ReportQuery: &meteringcomputation.UsageCarbonEmissionsQueryQueryDefinitionReportQueryArgs{
//						TenantId:         pulumi.Any(testTenant.Id),
//						CompartmentDepth: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryCompartmentDepth),
//						DateRangeName:    pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryDateRangeName),
//						GroupBies:        pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryGroupBy),
//						GroupByTags: meteringcomputation.UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArray{
//							&meteringcomputation.UsageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagArgs{
//								Key:       pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagKey),
//								Namespace: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagNamespace),
//								Value:     pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryGroupByTagValue),
//							},
//						},
//						IsAggregateByTime:               pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryIsAggregateByTime),
//						TimeUsageEnded:                  pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryTimeUsageEnded),
//						TimeUsageStarted:                pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryTimeUsageStarted),
//						UsageCarbonEmissionsQueryFilter: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionReportQueryUsageCarbonEmissionsQueryFilter),
//					},
//					Version: pulumi.Any(usageCarbonEmissionsQueryQueryDefinitionVersion),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// UsageCarbonEmissionsQueries can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:MeteringComputation/usageCarbonEmissionsQuery:UsageCarbonEmissionsQuery test_usage_carbon_emissions_query "id"
// ```
type UsageCarbonEmissionsQuery struct {
	pulumi.CustomResourceState

	// The compartment OCID.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The common fields for queries.
	QueryDefinition UsageCarbonEmissionsQueryQueryDefinitionOutput `pulumi:"queryDefinition"`
}

// NewUsageCarbonEmissionsQuery registers a new resource with the given unique name, arguments, and options.
func NewUsageCarbonEmissionsQuery(ctx *pulumi.Context,
	name string, args *UsageCarbonEmissionsQueryArgs, opts ...pulumi.ResourceOption) (*UsageCarbonEmissionsQuery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.QueryDefinition == nil {
		return nil, errors.New("invalid value for required argument 'QueryDefinition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsageCarbonEmissionsQuery
	err := ctx.RegisterResource("oci:MeteringComputation/usageCarbonEmissionsQuery:UsageCarbonEmissionsQuery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageCarbonEmissionsQuery gets an existing UsageCarbonEmissionsQuery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageCarbonEmissionsQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageCarbonEmissionsQueryState, opts ...pulumi.ResourceOption) (*UsageCarbonEmissionsQuery, error) {
	var resource UsageCarbonEmissionsQuery
	err := ctx.ReadResource("oci:MeteringComputation/usageCarbonEmissionsQuery:UsageCarbonEmissionsQuery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageCarbonEmissionsQuery resources.
type usageCarbonEmissionsQueryState struct {
	// The compartment OCID.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The common fields for queries.
	QueryDefinition *UsageCarbonEmissionsQueryQueryDefinition `pulumi:"queryDefinition"`
}

type UsageCarbonEmissionsQueryState struct {
	// The compartment OCID.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The common fields for queries.
	QueryDefinition UsageCarbonEmissionsQueryQueryDefinitionPtrInput
}

func (UsageCarbonEmissionsQueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageCarbonEmissionsQueryState)(nil)).Elem()
}

type usageCarbonEmissionsQueryArgs struct {
	// The compartment OCID.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) The common fields for queries.
	QueryDefinition UsageCarbonEmissionsQueryQueryDefinition `pulumi:"queryDefinition"`
}

// The set of arguments for constructing a UsageCarbonEmissionsQuery resource.
type UsageCarbonEmissionsQueryArgs struct {
	// The compartment OCID.
	CompartmentId pulumi.StringInput
	// (Updatable) The common fields for queries.
	QueryDefinition UsageCarbonEmissionsQueryQueryDefinitionInput
}

func (UsageCarbonEmissionsQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageCarbonEmissionsQueryArgs)(nil)).Elem()
}

type UsageCarbonEmissionsQueryInput interface {
	pulumi.Input

	ToUsageCarbonEmissionsQueryOutput() UsageCarbonEmissionsQueryOutput
	ToUsageCarbonEmissionsQueryOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryOutput
}

func (*UsageCarbonEmissionsQuery) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (i *UsageCarbonEmissionsQuery) ToUsageCarbonEmissionsQueryOutput() UsageCarbonEmissionsQueryOutput {
	return i.ToUsageCarbonEmissionsQueryOutputWithContext(context.Background())
}

func (i *UsageCarbonEmissionsQuery) ToUsageCarbonEmissionsQueryOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageCarbonEmissionsQueryOutput)
}

// UsageCarbonEmissionsQueryArrayInput is an input type that accepts UsageCarbonEmissionsQueryArray and UsageCarbonEmissionsQueryArrayOutput values.
// You can construct a concrete instance of `UsageCarbonEmissionsQueryArrayInput` via:
//
//	UsageCarbonEmissionsQueryArray{ UsageCarbonEmissionsQueryArgs{...} }
type UsageCarbonEmissionsQueryArrayInput interface {
	pulumi.Input

	ToUsageCarbonEmissionsQueryArrayOutput() UsageCarbonEmissionsQueryArrayOutput
	ToUsageCarbonEmissionsQueryArrayOutputWithContext(context.Context) UsageCarbonEmissionsQueryArrayOutput
}

type UsageCarbonEmissionsQueryArray []UsageCarbonEmissionsQueryInput

func (UsageCarbonEmissionsQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (i UsageCarbonEmissionsQueryArray) ToUsageCarbonEmissionsQueryArrayOutput() UsageCarbonEmissionsQueryArrayOutput {
	return i.ToUsageCarbonEmissionsQueryArrayOutputWithContext(context.Background())
}

func (i UsageCarbonEmissionsQueryArray) ToUsageCarbonEmissionsQueryArrayOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageCarbonEmissionsQueryArrayOutput)
}

// UsageCarbonEmissionsQueryMapInput is an input type that accepts UsageCarbonEmissionsQueryMap and UsageCarbonEmissionsQueryMapOutput values.
// You can construct a concrete instance of `UsageCarbonEmissionsQueryMapInput` via:
//
//	UsageCarbonEmissionsQueryMap{ "key": UsageCarbonEmissionsQueryArgs{...} }
type UsageCarbonEmissionsQueryMapInput interface {
	pulumi.Input

	ToUsageCarbonEmissionsQueryMapOutput() UsageCarbonEmissionsQueryMapOutput
	ToUsageCarbonEmissionsQueryMapOutputWithContext(context.Context) UsageCarbonEmissionsQueryMapOutput
}

type UsageCarbonEmissionsQueryMap map[string]UsageCarbonEmissionsQueryInput

func (UsageCarbonEmissionsQueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (i UsageCarbonEmissionsQueryMap) ToUsageCarbonEmissionsQueryMapOutput() UsageCarbonEmissionsQueryMapOutput {
	return i.ToUsageCarbonEmissionsQueryMapOutputWithContext(context.Background())
}

func (i UsageCarbonEmissionsQueryMap) ToUsageCarbonEmissionsQueryMapOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageCarbonEmissionsQueryMapOutput)
}

type UsageCarbonEmissionsQueryOutput struct{ *pulumi.OutputState }

func (UsageCarbonEmissionsQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (o UsageCarbonEmissionsQueryOutput) ToUsageCarbonEmissionsQueryOutput() UsageCarbonEmissionsQueryOutput {
	return o
}

func (o UsageCarbonEmissionsQueryOutput) ToUsageCarbonEmissionsQueryOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryOutput {
	return o
}

// The compartment OCID.
func (o UsageCarbonEmissionsQueryOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageCarbonEmissionsQuery) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The common fields for queries.
func (o UsageCarbonEmissionsQueryOutput) QueryDefinition() UsageCarbonEmissionsQueryQueryDefinitionOutput {
	return o.ApplyT(func(v *UsageCarbonEmissionsQuery) UsageCarbonEmissionsQueryQueryDefinitionOutput {
		return v.QueryDefinition
	}).(UsageCarbonEmissionsQueryQueryDefinitionOutput)
}

type UsageCarbonEmissionsQueryArrayOutput struct{ *pulumi.OutputState }

func (UsageCarbonEmissionsQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (o UsageCarbonEmissionsQueryArrayOutput) ToUsageCarbonEmissionsQueryArrayOutput() UsageCarbonEmissionsQueryArrayOutput {
	return o
}

func (o UsageCarbonEmissionsQueryArrayOutput) ToUsageCarbonEmissionsQueryArrayOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryArrayOutput {
	return o
}

func (o UsageCarbonEmissionsQueryArrayOutput) Index(i pulumi.IntInput) UsageCarbonEmissionsQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsageCarbonEmissionsQuery {
		return vs[0].([]*UsageCarbonEmissionsQuery)[vs[1].(int)]
	}).(UsageCarbonEmissionsQueryOutput)
}

type UsageCarbonEmissionsQueryMapOutput struct{ *pulumi.OutputState }

func (UsageCarbonEmissionsQueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageCarbonEmissionsQuery)(nil)).Elem()
}

func (o UsageCarbonEmissionsQueryMapOutput) ToUsageCarbonEmissionsQueryMapOutput() UsageCarbonEmissionsQueryMapOutput {
	return o
}

func (o UsageCarbonEmissionsQueryMapOutput) ToUsageCarbonEmissionsQueryMapOutputWithContext(ctx context.Context) UsageCarbonEmissionsQueryMapOutput {
	return o
}

func (o UsageCarbonEmissionsQueryMapOutput) MapIndex(k pulumi.StringInput) UsageCarbonEmissionsQueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsageCarbonEmissionsQuery {
		return vs[0].(map[string]*UsageCarbonEmissionsQuery)[vs[1].(string)]
	}).(UsageCarbonEmissionsQueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsageCarbonEmissionsQueryInput)(nil)).Elem(), &UsageCarbonEmissionsQuery{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageCarbonEmissionsQueryArrayInput)(nil)).Elem(), UsageCarbonEmissionsQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageCarbonEmissionsQueryMapInput)(nil)).Elem(), UsageCarbonEmissionsQueryMap{})
	pulumi.RegisterOutputType(UsageCarbonEmissionsQueryOutput{})
	pulumi.RegisterOutputType(UsageCarbonEmissionsQueryArrayOutput{})
	pulumi.RegisterOutputType(UsageCarbonEmissionsQueryMapOutput{})
}
