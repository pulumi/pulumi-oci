// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package meteringcomputation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Usage Statement Email Recipients Group resource in Oracle Cloud Infrastructure Metering Computation service.
//
// Add a list of email recipients that can receive usage statements for the subscription.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/meteringcomputation"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := meteringcomputation.NewUsageStatementEmailRecipientsGroup(ctx, "test_usage_statement_email_recipients_group", &meteringcomputation.UsageStatementEmailRecipientsGroupArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				RecipientsLists: meteringcomputation.UsageStatementEmailRecipientsGroupRecipientsListArray{
//					&meteringcomputation.UsageStatementEmailRecipientsGroupRecipientsListArgs{
//						EmailId:   pulumi.Any(testEmail.Id),
//						State:     pulumi.Any(usageStatementEmailRecipientsGroupRecipientsListState),
//						FirstName: pulumi.Any(usageStatementEmailRecipientsGroupRecipientsListFirstName),
//						LastName:  pulumi.Any(usageStatementEmailRecipientsGroupRecipientsListLastName),
//					},
//				},
//				SubscriptionId: pulumi.Any(testSubscription.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// UsageStatementEmailRecipientsGroups can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:MeteringComputation/usageStatementEmailRecipientsGroup:UsageStatementEmailRecipientsGroup test_usage_statement_email_recipients_group "usageStatements/{subscriptionId}/emailRecipientsGroups/{emailRecipientsGroupId}/compartmentId/{compartmentId}"
// ```
type UsageStatementEmailRecipientsGroup struct {
	pulumi.CustomResourceState

	// (Updatable) The customer tenancy.
	CompartmentId          pulumi.StringOutput `pulumi:"compartmentId"`
	EmailRecipientsGroupId pulumi.StringOutput `pulumi:"emailRecipientsGroupId"`
	// (Updatable) The list of recipient will receive the usage statement email.
	RecipientsLists UsageStatementEmailRecipientsGroupRecipientsListArrayOutput `pulumi:"recipientsLists"`
	// The email recipient group lifecycle state.
	State pulumi.StringOutput `pulumi:"state"`
	// The UsageStatement Subscription unique OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewUsageStatementEmailRecipientsGroup registers a new resource with the given unique name, arguments, and options.
func NewUsageStatementEmailRecipientsGroup(ctx *pulumi.Context,
	name string, args *UsageStatementEmailRecipientsGroupArgs, opts ...pulumi.ResourceOption) (*UsageStatementEmailRecipientsGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.RecipientsLists == nil {
		return nil, errors.New("invalid value for required argument 'RecipientsLists'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UsageStatementEmailRecipientsGroup
	err := ctx.RegisterResource("oci:MeteringComputation/usageStatementEmailRecipientsGroup:UsageStatementEmailRecipientsGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsageStatementEmailRecipientsGroup gets an existing UsageStatementEmailRecipientsGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsageStatementEmailRecipientsGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsageStatementEmailRecipientsGroupState, opts ...pulumi.ResourceOption) (*UsageStatementEmailRecipientsGroup, error) {
	var resource UsageStatementEmailRecipientsGroup
	err := ctx.ReadResource("oci:MeteringComputation/usageStatementEmailRecipientsGroup:UsageStatementEmailRecipientsGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsageStatementEmailRecipientsGroup resources.
type usageStatementEmailRecipientsGroupState struct {
	// (Updatable) The customer tenancy.
	CompartmentId          *string `pulumi:"compartmentId"`
	EmailRecipientsGroupId *string `pulumi:"emailRecipientsGroupId"`
	// (Updatable) The list of recipient will receive the usage statement email.
	RecipientsLists []UsageStatementEmailRecipientsGroupRecipientsList `pulumi:"recipientsLists"`
	// The email recipient group lifecycle state.
	State *string `pulumi:"state"`
	// The UsageStatement Subscription unique OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type UsageStatementEmailRecipientsGroupState struct {
	// (Updatable) The customer tenancy.
	CompartmentId          pulumi.StringPtrInput
	EmailRecipientsGroupId pulumi.StringPtrInput
	// (Updatable) The list of recipient will receive the usage statement email.
	RecipientsLists UsageStatementEmailRecipientsGroupRecipientsListArrayInput
	// The email recipient group lifecycle state.
	State pulumi.StringPtrInput
	// The UsageStatement Subscription unique OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringPtrInput
}

func (UsageStatementEmailRecipientsGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*usageStatementEmailRecipientsGroupState)(nil)).Elem()
}

type usageStatementEmailRecipientsGroupArgs struct {
	// (Updatable) The customer tenancy.
	CompartmentId          string  `pulumi:"compartmentId"`
	EmailRecipientsGroupId *string `pulumi:"emailRecipientsGroupId"`
	// (Updatable) The list of recipient will receive the usage statement email.
	RecipientsLists []UsageStatementEmailRecipientsGroupRecipientsList `pulumi:"recipientsLists"`
	// The UsageStatement Subscription unique OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a UsageStatementEmailRecipientsGroup resource.
type UsageStatementEmailRecipientsGroupArgs struct {
	// (Updatable) The customer tenancy.
	CompartmentId          pulumi.StringInput
	EmailRecipientsGroupId pulumi.StringPtrInput
	// (Updatable) The list of recipient will receive the usage statement email.
	RecipientsLists UsageStatementEmailRecipientsGroupRecipientsListArrayInput
	// The UsageStatement Subscription unique OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	SubscriptionId pulumi.StringInput
}

func (UsageStatementEmailRecipientsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usageStatementEmailRecipientsGroupArgs)(nil)).Elem()
}

type UsageStatementEmailRecipientsGroupInput interface {
	pulumi.Input

	ToUsageStatementEmailRecipientsGroupOutput() UsageStatementEmailRecipientsGroupOutput
	ToUsageStatementEmailRecipientsGroupOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupOutput
}

func (*UsageStatementEmailRecipientsGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (i *UsageStatementEmailRecipientsGroup) ToUsageStatementEmailRecipientsGroupOutput() UsageStatementEmailRecipientsGroupOutput {
	return i.ToUsageStatementEmailRecipientsGroupOutputWithContext(context.Background())
}

func (i *UsageStatementEmailRecipientsGroup) ToUsageStatementEmailRecipientsGroupOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageStatementEmailRecipientsGroupOutput)
}

// UsageStatementEmailRecipientsGroupArrayInput is an input type that accepts UsageStatementEmailRecipientsGroupArray and UsageStatementEmailRecipientsGroupArrayOutput values.
// You can construct a concrete instance of `UsageStatementEmailRecipientsGroupArrayInput` via:
//
//	UsageStatementEmailRecipientsGroupArray{ UsageStatementEmailRecipientsGroupArgs{...} }
type UsageStatementEmailRecipientsGroupArrayInput interface {
	pulumi.Input

	ToUsageStatementEmailRecipientsGroupArrayOutput() UsageStatementEmailRecipientsGroupArrayOutput
	ToUsageStatementEmailRecipientsGroupArrayOutputWithContext(context.Context) UsageStatementEmailRecipientsGroupArrayOutput
}

type UsageStatementEmailRecipientsGroupArray []UsageStatementEmailRecipientsGroupInput

func (UsageStatementEmailRecipientsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (i UsageStatementEmailRecipientsGroupArray) ToUsageStatementEmailRecipientsGroupArrayOutput() UsageStatementEmailRecipientsGroupArrayOutput {
	return i.ToUsageStatementEmailRecipientsGroupArrayOutputWithContext(context.Background())
}

func (i UsageStatementEmailRecipientsGroupArray) ToUsageStatementEmailRecipientsGroupArrayOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageStatementEmailRecipientsGroupArrayOutput)
}

// UsageStatementEmailRecipientsGroupMapInput is an input type that accepts UsageStatementEmailRecipientsGroupMap and UsageStatementEmailRecipientsGroupMapOutput values.
// You can construct a concrete instance of `UsageStatementEmailRecipientsGroupMapInput` via:
//
//	UsageStatementEmailRecipientsGroupMap{ "key": UsageStatementEmailRecipientsGroupArgs{...} }
type UsageStatementEmailRecipientsGroupMapInput interface {
	pulumi.Input

	ToUsageStatementEmailRecipientsGroupMapOutput() UsageStatementEmailRecipientsGroupMapOutput
	ToUsageStatementEmailRecipientsGroupMapOutputWithContext(context.Context) UsageStatementEmailRecipientsGroupMapOutput
}

type UsageStatementEmailRecipientsGroupMap map[string]UsageStatementEmailRecipientsGroupInput

func (UsageStatementEmailRecipientsGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (i UsageStatementEmailRecipientsGroupMap) ToUsageStatementEmailRecipientsGroupMapOutput() UsageStatementEmailRecipientsGroupMapOutput {
	return i.ToUsageStatementEmailRecipientsGroupMapOutputWithContext(context.Background())
}

func (i UsageStatementEmailRecipientsGroupMap) ToUsageStatementEmailRecipientsGroupMapOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageStatementEmailRecipientsGroupMapOutput)
}

type UsageStatementEmailRecipientsGroupOutput struct{ *pulumi.OutputState }

func (UsageStatementEmailRecipientsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (o UsageStatementEmailRecipientsGroupOutput) ToUsageStatementEmailRecipientsGroupOutput() UsageStatementEmailRecipientsGroupOutput {
	return o
}

func (o UsageStatementEmailRecipientsGroupOutput) ToUsageStatementEmailRecipientsGroupOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupOutput {
	return o
}

// (Updatable) The customer tenancy.
func (o UsageStatementEmailRecipientsGroupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageStatementEmailRecipientsGroup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o UsageStatementEmailRecipientsGroupOutput) EmailRecipientsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageStatementEmailRecipientsGroup) pulumi.StringOutput { return v.EmailRecipientsGroupId }).(pulumi.StringOutput)
}

// (Updatable) The list of recipient will receive the usage statement email.
func (o UsageStatementEmailRecipientsGroupOutput) RecipientsLists() UsageStatementEmailRecipientsGroupRecipientsListArrayOutput {
	return o.ApplyT(func(v *UsageStatementEmailRecipientsGroup) UsageStatementEmailRecipientsGroupRecipientsListArrayOutput {
		return v.RecipientsLists
	}).(UsageStatementEmailRecipientsGroupRecipientsListArrayOutput)
}

// The email recipient group lifecycle state.
func (o UsageStatementEmailRecipientsGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageStatementEmailRecipientsGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The UsageStatement Subscription unique OCID.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o UsageStatementEmailRecipientsGroupOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *UsageStatementEmailRecipientsGroup) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type UsageStatementEmailRecipientsGroupArrayOutput struct{ *pulumi.OutputState }

func (UsageStatementEmailRecipientsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (o UsageStatementEmailRecipientsGroupArrayOutput) ToUsageStatementEmailRecipientsGroupArrayOutput() UsageStatementEmailRecipientsGroupArrayOutput {
	return o
}

func (o UsageStatementEmailRecipientsGroupArrayOutput) ToUsageStatementEmailRecipientsGroupArrayOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupArrayOutput {
	return o
}

func (o UsageStatementEmailRecipientsGroupArrayOutput) Index(i pulumi.IntInput) UsageStatementEmailRecipientsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsageStatementEmailRecipientsGroup {
		return vs[0].([]*UsageStatementEmailRecipientsGroup)[vs[1].(int)]
	}).(UsageStatementEmailRecipientsGroupOutput)
}

type UsageStatementEmailRecipientsGroupMapOutput struct{ *pulumi.OutputState }

func (UsageStatementEmailRecipientsGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsageStatementEmailRecipientsGroup)(nil)).Elem()
}

func (o UsageStatementEmailRecipientsGroupMapOutput) ToUsageStatementEmailRecipientsGroupMapOutput() UsageStatementEmailRecipientsGroupMapOutput {
	return o
}

func (o UsageStatementEmailRecipientsGroupMapOutput) ToUsageStatementEmailRecipientsGroupMapOutputWithContext(ctx context.Context) UsageStatementEmailRecipientsGroupMapOutput {
	return o
}

func (o UsageStatementEmailRecipientsGroupMapOutput) MapIndex(k pulumi.StringInput) UsageStatementEmailRecipientsGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsageStatementEmailRecipientsGroup {
		return vs[0].(map[string]*UsageStatementEmailRecipientsGroup)[vs[1].(string)]
	}).(UsageStatementEmailRecipientsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsageStatementEmailRecipientsGroupInput)(nil)).Elem(), &UsageStatementEmailRecipientsGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageStatementEmailRecipientsGroupArrayInput)(nil)).Elem(), UsageStatementEmailRecipientsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsageStatementEmailRecipientsGroupMapInput)(nil)).Elem(), UsageStatementEmailRecipientsGroupMap{})
	pulumi.RegisterOutputType(UsageStatementEmailRecipientsGroupOutput{})
	pulumi.RegisterOutputType(UsageStatementEmailRecipientsGroupArrayOutput{})
	pulumi.RegisterOutputType(UsageStatementEmailRecipientsGroupMapOutput{})
}
