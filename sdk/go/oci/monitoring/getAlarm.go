// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Alarm resource in Oracle Cloud Infrastructure Monitoring service.
//
// Gets the specified alarm.
// For more information, see
// [Getting an Alarm](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm.htm).
// For important limits information, see
// [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
//
// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
// or transactions, per second (TPS) for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitoring.GetAlarm(ctx, &monitoring.GetAlarmArgs{
//				AlarmId: testAlarmOciMonitoringAlarm.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAlarm(ctx *pulumi.Context, args *LookupAlarmArgs, opts ...pulumi.InvokeOption) (*LookupAlarmResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlarmResult
	err := ctx.Invoke("oci:Monitoring/getAlarm:getAlarm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarm.
type LookupAlarmArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of an alarm.
	AlarmId string `pulumi:"alarmId"`
}

// A collection of values returned by getAlarm.
type LookupAlarmResult struct {
	AlarmId string `pulumi:"alarmId"`
	// The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body string `pulumi:"body"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId string `pulumi:"compartmentId"`
	// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A list of destinations for alarm notifications. Each destination is represented by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a related resource, such as a [topic](https://docs.cloud.oracle.com/iaas/api/#/en/notification/latest/NotificationTopic). Supported destination services: Notifications, Streaming. Limit: One destination per supported destination service.
	Destinations []string `pulumi:"destinations"`
	// A user-friendly name for the alarm. It does not have to be unique, and it's changeable.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
	Id string `pulumi:"id"`
	// Whether the alarm is enabled.  Example: `true`
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether the alarm sends a separate message for each metric stream. See [Creating an Alarm That Splits Messages by Metric Stream](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-split.htm). Example: `true`
	IsNotificationsPerMetricDimensionEnabled bool `pulumi:"isNotificationsPerMetricDimensionEnabled"`
	// The format to use for alarm notifications. The formats are:
	MessageFormat string `pulumi:"messageFormat"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId string `pulumi:"metricCompartmentId"`
	// When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree bool `pulumi:"metricCompartmentIdInSubtree"`
	// The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace string `pulumi:"namespace"`
	// The version of the alarm notification to be delivered. Allowed value: `1.X` The value must start with a number (up to four digits), followed by a period and an uppercase X.
	NotificationVersion string `pulumi:"notificationVersion"`
	// A set of overrides that control evaluations of the alarm.
	Overrides []GetAlarmOverride `pulumi:"overrides"`
	// The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING". For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING".
	PendingDuration string `pulumi:"pendingDuration"`
	// The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query string `pulumi:"query"`
	// The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration string `pulumi:"repeatNotificationDuration"`
	// The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution string `pulumi:"resolution"`
	// Resource group to match for metric data retrieved by the alarm. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
	ResourceGroup string `pulumi:"resourceGroup"`
	// Identifier of the alarm's base values for alarm evaluation, for use when the alarm contains overrides.  A valid ruleName value starts with an alphabetic character and includes only alphanumeric characters, underscores and square brackets.  Minimum number of characters: 3. Default value is `BASE`. For information about alarm overrides, see [AlarmOverride](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/latest/datatypes/AlarmOverride).
	RuleName string `pulumi:"ruleName"`
	// The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity string `pulumi:"severity"`
	// The current lifecycle state of the alarm.  Example: `DELETED`
	State string `pulumi:"state"`
	// The configuration details for suppressing an alarm.
	Suppressions []GetAlarmSuppressionType `pulumi:"suppressions"`
	// The date and time the alarm was created. Format defined by RFC3339.  Example: `2023-02-01T01:02:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2023-02-03T01:02:29.600Z`
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupAlarmOutput(ctx *pulumi.Context, args LookupAlarmOutputArgs, opts ...pulumi.InvokeOption) LookupAlarmResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlarmResult, error) {
			args := v.(LookupAlarmArgs)
			r, err := LookupAlarm(ctx, &args, opts...)
			var s LookupAlarmResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAlarmResultOutput)
}

// A collection of arguments for invoking getAlarm.
type LookupAlarmOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of an alarm.
	AlarmId pulumi.StringInput `pulumi:"alarmId"`
}

func (LookupAlarmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmArgs)(nil)).Elem()
}

// A collection of values returned by getAlarm.
type LookupAlarmResultOutput struct{ *pulumi.OutputState }

func (LookupAlarmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlarmResult)(nil)).Elem()
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutput() LookupAlarmResultOutput {
	return o
}

func (o LookupAlarmResultOutput) ToLookupAlarmResultOutputWithContext(ctx context.Context) LookupAlarmResultOutput {
	return o
}

func (o LookupAlarmResultOutput) AlarmId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.AlarmId }).(pulumi.StringOutput)
}

// The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
func (o LookupAlarmResultOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Body }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
func (o LookupAlarmResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
func (o LookupAlarmResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAlarmResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A list of destinations for alarm notifications. Each destination is represented by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a related resource, such as a [topic](https://docs.cloud.oracle.com/iaas/api/#/en/notification/latest/NotificationTopic). Supported destination services: Notifications, Streaming. Limit: One destination per supported destination service.
func (o LookupAlarmResultOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// A user-friendly name for the alarm. It does not have to be unique, and it's changeable.
func (o LookupAlarmResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
func (o LookupAlarmResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAlarmResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the alarm.
func (o LookupAlarmResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the alarm is enabled.  Example: `true`
func (o LookupAlarmResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlarmResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Whether the alarm sends a separate message for each metric stream. See [Creating an Alarm That Splits Messages by Metric Stream](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-split.htm). Example: `true`
func (o LookupAlarmResultOutput) IsNotificationsPerMetricDimensionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlarmResult) bool { return v.IsNotificationsPerMetricDimensionEnabled }).(pulumi.BoolOutput)
}

// The format to use for alarm notifications. The formats are:
func (o LookupAlarmResultOutput) MessageFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.MessageFormat }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
func (o LookupAlarmResultOutput) MetricCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.MetricCompartmentId }).(pulumi.StringOutput)
}

// When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
func (o LookupAlarmResultOutput) MetricCompartmentIdInSubtree() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlarmResult) bool { return v.MetricCompartmentIdInSubtree }).(pulumi.BoolOutput)
}

// The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
func (o LookupAlarmResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// The version of the alarm notification to be delivered. Allowed value: `1.X` The value must start with a number (up to four digits), followed by a period and an uppercase X.
func (o LookupAlarmResultOutput) NotificationVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.NotificationVersion }).(pulumi.StringOutput)
}

// A set of overrides that control evaluations of the alarm.
func (o LookupAlarmResultOutput) Overrides() GetAlarmOverrideArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []GetAlarmOverride { return v.Overrides }).(GetAlarmOverrideArrayOutput)
}

// The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING". For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING".
func (o LookupAlarmResultOutput) PendingDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.PendingDuration }).(pulumi.StringOutput)
}

// The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval depend on the specified time range. More interval values are supported for smaller time ranges. You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`. For information about writing MQL expressions, see [Editing the MQL Expression for a Query](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-mql.htm). For details about MQL, see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service. See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
func (o LookupAlarmResultOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Query }).(pulumi.StringOutput)
}

// The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
func (o LookupAlarmResultOutput) RepeatNotificationDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.RepeatNotificationDuration }).(pulumi.StringOutput)
}

// The time between calculated aggregation windows for the alarm. Supported value: `1m`
func (o LookupAlarmResultOutput) Resolution() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Resolution }).(pulumi.StringOutput)
}

// Resource group to match for metric data retrieved by the alarm. A resource group is a custom string that you can match when retrieving custom metrics. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($).  Example: `frontend-fleet`
func (o LookupAlarmResultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// Identifier of the alarm's base values for alarm evaluation, for use when the alarm contains overrides.  A valid ruleName value starts with an alphabetic character and includes only alphanumeric characters, underscores and square brackets.  Minimum number of characters: 3. Default value is `BASE`. For information about alarm overrides, see [AlarmOverride](https://docs.cloud.oracle.com/iaas/api/#/en/monitoring/latest/datatypes/AlarmOverride).
func (o LookupAlarmResultOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.RuleName }).(pulumi.StringOutput)
}

// The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
func (o LookupAlarmResultOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.Severity }).(pulumi.StringOutput)
}

// The current lifecycle state of the alarm.  Example: `DELETED`
func (o LookupAlarmResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.State }).(pulumi.StringOutput)
}

// The configuration details for suppressing an alarm.
func (o LookupAlarmResultOutput) Suppressions() GetAlarmSuppressionTypeArrayOutput {
	return o.ApplyT(func(v LookupAlarmResult) []GetAlarmSuppressionType { return v.Suppressions }).(GetAlarmSuppressionTypeArrayOutput)
}

// The date and time the alarm was created. Format defined by RFC3339.  Example: `2023-02-01T01:02:29.600Z`
func (o LookupAlarmResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2023-02-03T01:02:29.600Z`
func (o LookupAlarmResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlarmResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlarmResultOutput{})
}
