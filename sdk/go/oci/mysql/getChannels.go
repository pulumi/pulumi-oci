// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Channels in Oracle Cloud Infrastructure MySQL Database service.
//
// Lists all the Channels that match the specified filters.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.GetChannels(ctx, &mysql.GetChannelsArgs{
//				CompartmentId: compartmentId,
//				ChannelId:     pulumi.StringRef(testChannel.Id),
//				DbSystemId:    pulumi.StringRef(testDbSystem.Id),
//				DisplayName:   pulumi.StringRef(channelDisplayName),
//				IsEnabled:     pulumi.BoolRef(channelIsEnabled),
//				State:         pulumi.StringRef(channelState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetChannels(ctx *pulumi.Context, args *GetChannelsArgs, opts ...pulumi.InvokeOption) (*GetChannelsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetChannelsResult
	err := ctx.Invoke("oci:Mysql/getChannels:getChannels", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getChannels.
type GetChannelsArgs struct {
	// The OCID of the Channel.
	ChannelId *string `pulumi:"channelId"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId *string `pulumi:"dbSystemId"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetChannelsFilter `pulumi:"filters"`
	// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The LifecycleState of the Channel.
	State *string `pulumi:"state"`
}

// A collection of values returned by getChannels.
type GetChannelsResult struct {
	ChannelId *string `pulumi:"channelId"`
	// The list of channels.
	Channels []GetChannelsChannel `pulumi:"channels"`
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The OCID of the source DB System.
	DbSystemId *string `pulumi:"dbSystemId"`
	// The user-friendly name for the Channel. It does not have to be unique.
	DisplayName *string             `pulumi:"displayName"`
	Filters     []GetChannelsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the Channel has been enabled by the user.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The state of the Channel.
	State *string `pulumi:"state"`
}

func GetChannelsOutput(ctx *pulumi.Context, args GetChannelsOutputArgs, opts ...pulumi.InvokeOption) GetChannelsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetChannelsResult, error) {
			args := v.(GetChannelsArgs)
			r, err := GetChannels(ctx, &args, opts...)
			var s GetChannelsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetChannelsResultOutput)
}

// A collection of arguments for invoking getChannels.
type GetChannelsOutputArgs struct {
	// The OCID of the Channel.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// The compartment [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringPtrInput `pulumi:"dbSystemId"`
	// A filter to return only the resource matching the given display name exactly.
	DisplayName pulumi.StringPtrInput       `pulumi:"displayName"`
	Filters     GetChannelsFilterArrayInput `pulumi:"filters"`
	// If true, returns only Channels that are enabled. If false, returns only Channels that are disabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The LifecycleState of the Channel.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetChannelsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsArgs)(nil)).Elem()
}

// A collection of values returned by getChannels.
type GetChannelsResultOutput struct{ *pulumi.OutputState }

func (GetChannelsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChannelsResult)(nil)).Elem()
}

func (o GetChannelsResultOutput) ToGetChannelsResultOutput() GetChannelsResultOutput {
	return o
}

func (o GetChannelsResultOutput) ToGetChannelsResultOutputWithContext(ctx context.Context) GetChannelsResultOutput {
	return o
}

func (o GetChannelsResultOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChannelsResult) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// The list of channels.
func (o GetChannelsResultOutput) Channels() GetChannelsChannelArrayOutput {
	return o.ApplyT(func(v GetChannelsResult) []GetChannelsChannel { return v.Channels }).(GetChannelsChannelArrayOutput)
}

// The OCID of the compartment.
func (o GetChannelsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The OCID of the source DB System.
func (o GetChannelsResultOutput) DbSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChannelsResult) *string { return v.DbSystemId }).(pulumi.StringPtrOutput)
}

// The user-friendly name for the Channel. It does not have to be unique.
func (o GetChannelsResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChannelsResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetChannelsResultOutput) Filters() GetChannelsFilterArrayOutput {
	return o.ApplyT(func(v GetChannelsResult) []GetChannelsFilter { return v.Filters }).(GetChannelsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetChannelsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChannelsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Channel has been enabled by the user.
func (o GetChannelsResultOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetChannelsResult) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The state of the Channel.
func (o GetChannelsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetChannelsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetChannelsResultOutput{})
}
