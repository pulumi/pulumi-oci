// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific HeatWave cluster resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Gets information about the HeatWave cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mysql.GetHeatWaveCluster(ctx, &mysql.GetHeatWaveClusterArgs{
//				DbSystemId: testDbSystem.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupHeatWaveCluster(ctx *pulumi.Context, args *LookupHeatWaveClusterArgs, opts ...pulumi.InvokeOption) (*LookupHeatWaveClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHeatWaveClusterResult
	err := ctx.Invoke("oci:Mysql/getHeatWaveCluster:getHeatWaveCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHeatWaveCluster.
type LookupHeatWaveClusterArgs struct {
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
}

// A collection of values returned by getHeatWaveCluster.
type LookupHeatWaveClusterResult struct {
	// A HeatWave node is a compute host that is part of a HeatWave cluster.
	ClusterNodes []GetHeatWaveClusterClusterNode `pulumi:"clusterNodes"`
	// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
	ClusterSize int `pulumi:"clusterSize"`
	// The OCID of the parent DB System this HeatWave cluster is attached to.
	DbSystemId string `pulumi:"dbSystemId"`
	Id         string `pulumi:"id"`
	// Lakehouse enabled status for the HeatWave cluster.
	IsLakehouseEnabled bool `pulumi:"isLakehouseEnabled"`
	// Additional information about the current lifecycleState.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The shape determines resources to allocate to the HeatWave nodes - CPU cores, memory.
	ShapeName string `pulumi:"shapeName"`
	// The current state of the HeatWave cluster.
	State string `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupHeatWaveClusterOutput(ctx *pulumi.Context, args LookupHeatWaveClusterOutputArgs, opts ...pulumi.InvokeOption) LookupHeatWaveClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupHeatWaveClusterResultOutput, error) {
			args := v.(LookupHeatWaveClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Mysql/getHeatWaveCluster:getHeatWaveCluster", args, LookupHeatWaveClusterResultOutput{}, options).(LookupHeatWaveClusterResultOutput), nil
		}).(LookupHeatWaveClusterResultOutput)
}

// A collection of arguments for invoking getHeatWaveCluster.
type LookupHeatWaveClusterOutputArgs struct {
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput `pulumi:"dbSystemId"`
}

func (LookupHeatWaveClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHeatWaveClusterArgs)(nil)).Elem()
}

// A collection of values returned by getHeatWaveCluster.
type LookupHeatWaveClusterResultOutput struct{ *pulumi.OutputState }

func (LookupHeatWaveClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHeatWaveClusterResult)(nil)).Elem()
}

func (o LookupHeatWaveClusterResultOutput) ToLookupHeatWaveClusterResultOutput() LookupHeatWaveClusterResultOutput {
	return o
}

func (o LookupHeatWaveClusterResultOutput) ToLookupHeatWaveClusterResultOutputWithContext(ctx context.Context) LookupHeatWaveClusterResultOutput {
	return o
}

// A HeatWave node is a compute host that is part of a HeatWave cluster.
func (o LookupHeatWaveClusterResultOutput) ClusterNodes() GetHeatWaveClusterClusterNodeArrayOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) []GetHeatWaveClusterClusterNode { return v.ClusterNodes }).(GetHeatWaveClusterClusterNodeArrayOutput)
}

// The number of analytics-processing compute instances, of the specified shape, in the HeatWave cluster.
func (o LookupHeatWaveClusterResultOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// The OCID of the parent DB System this HeatWave cluster is attached to.
func (o LookupHeatWaveClusterResultOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.DbSystemId }).(pulumi.StringOutput)
}

func (o LookupHeatWaveClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Lakehouse enabled status for the HeatWave cluster.
func (o LookupHeatWaveClusterResultOutput) IsLakehouseEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) bool { return v.IsLakehouseEnabled }).(pulumi.BoolOutput)
}

// Additional information about the current lifecycleState.
func (o LookupHeatWaveClusterResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The shape determines resources to allocate to the HeatWave nodes - CPU cores, memory.
func (o LookupHeatWaveClusterResultOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.ShapeName }).(pulumi.StringOutput)
}

// The current state of the HeatWave cluster.
func (o LookupHeatWaveClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o LookupHeatWaveClusterResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o LookupHeatWaveClusterResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHeatWaveClusterResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHeatWaveClusterResultOutput{})
}
