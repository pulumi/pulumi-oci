// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Mysql Backup resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Create a backup of a DB System.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewMysqlBackup(ctx, "testMysqlBackup", &Mysql.MysqlBackupArgs{
//				DbSystemId: pulumi.Any(oci_mysql_mysql_db_system.Test_db_system.Id),
//				BackupType: pulumi.Any(_var.Mysql_backup_backup_type),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Mysql_backup_description),
//				DisplayName: pulumi.Any(_var.Mysql_backup_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				RetentionInDays: pulumi.Any(_var.Mysql_backup_retention_in_days),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MysqlBackups can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Mysql/mysqlBackup:MysqlBackup test_mysql_backup "id"
//
// ```
type MysqlBackup struct {
	pulumi.CustomResourceState

	// The size of the backup in base-2 (IEC) gibibytes. (GiB).
	BackupSizeInGbs pulumi.IntOutput `pulumi:"backupSizeInGbs"`
	// The type of backup.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// (Updatable) The OCID of the compartment the backup exists in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Indicates how the backup was created: manually, automatic, or by an Operator.
	CreationType pulumi.StringOutput `pulumi:"creationType"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntOutput `pulumi:"dataStorageSizeInGb"`
	// The OCID of the DB System the Backup is associated with.
	DbSystemId pulumi.StringOutput `pulumi:"dbSystemId"`
	// Snapshot of the DbSystem details at the time of the backup
	DbSystemSnapshots MysqlBackupDbSystemSnapshotArrayOutput `pulumi:"dbSystemSnapshots"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-supplied description for the backup.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-supplied display name for the backup.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringOutput `pulumi:"mysqlVersion"`
	// (Updatable) Number of days to retain this backup.
	RetentionInDays pulumi.IntOutput `pulumi:"retentionInDays"`
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// The state of the backup.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the backup record was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time at which the backup was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMysqlBackup registers a new resource with the given unique name, arguments, and options.
func NewMysqlBackup(ctx *pulumi.Context,
	name string, args *MysqlBackupArgs, opts ...pulumi.ResourceOption) (*MysqlBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbSystemId == nil {
		return nil, errors.New("invalid value for required argument 'DbSystemId'")
	}
	var resource MysqlBackup
	err := ctx.RegisterResource("oci:Mysql/mysqlBackup:MysqlBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlBackup gets an existing MysqlBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlBackupState, opts ...pulumi.ResourceOption) (*MysqlBackup, error) {
	var resource MysqlBackup
	err := ctx.ReadResource("oci:Mysql/mysqlBackup:MysqlBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlBackup resources.
type mysqlBackupState struct {
	// The size of the backup in base-2 (IEC) gibibytes. (GiB).
	BackupSizeInGbs *int `pulumi:"backupSizeInGbs"`
	// The type of backup.
	BackupType *string `pulumi:"backupType"`
	// (Updatable) The OCID of the compartment the backup exists in.
	CompartmentId *string `pulumi:"compartmentId"`
	// Indicates how the backup was created: manually, automatic, or by an Operator.
	CreationType *string `pulumi:"creationType"`
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb *int `pulumi:"dataStorageSizeInGb"`
	// The OCID of the DB System the Backup is associated with.
	DbSystemId *string `pulumi:"dbSystemId"`
	// Snapshot of the DbSystem details at the time of the backup
	DbSystemSnapshots []MysqlBackupDbSystemSnapshot `pulumi:"dbSystemSnapshots"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-supplied description for the backup.
	Description *string `pulumi:"description"`
	// (Updatable) A user-supplied display name for the backup.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Additional information about the current lifecycleState.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The MySQL server version of the DB System used for backup.
	MysqlVersion *string `pulumi:"mysqlVersion"`
	// (Updatable) Number of days to retain this backup.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The shape of the DB System instance used for backup.
	ShapeName *string `pulumi:"shapeName"`
	// The state of the backup.
	State *string `pulumi:"state"`
	// The time the backup record was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time at which the backup was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MysqlBackupState struct {
	// The size of the backup in base-2 (IEC) gibibytes. (GiB).
	BackupSizeInGbs pulumi.IntPtrInput
	// The type of backup.
	BackupType pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment the backup exists in.
	CompartmentId pulumi.StringPtrInput
	// Indicates how the backup was created: manually, automatic, or by an Operator.
	CreationType pulumi.StringPtrInput
	// Initial size of the data volume in GiBs that will be created and attached.
	DataStorageSizeInGb pulumi.IntPtrInput
	// The OCID of the DB System the Backup is associated with.
	DbSystemId pulumi.StringPtrInput
	// Snapshot of the DbSystem details at the time of the backup
	DbSystemSnapshots MysqlBackupDbSystemSnapshotArrayInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-supplied description for the backup.
	Description pulumi.StringPtrInput
	// (Updatable) A user-supplied display name for the backup.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringPtrInput
	// The MySQL server version of the DB System used for backup.
	MysqlVersion pulumi.StringPtrInput
	// (Updatable) Number of days to retain this backup.
	RetentionInDays pulumi.IntPtrInput
	// The shape of the DB System instance used for backup.
	ShapeName pulumi.StringPtrInput
	// The state of the backup.
	State pulumi.StringPtrInput
	// The time the backup record was created.
	TimeCreated pulumi.StringPtrInput
	// The time at which the backup was updated.
	TimeUpdated pulumi.StringPtrInput
}

func (MysqlBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlBackupState)(nil)).Elem()
}

type mysqlBackupArgs struct {
	// The type of backup.
	BackupType *string `pulumi:"backupType"`
	// (Updatable) The OCID of the compartment the backup exists in.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the DB System the Backup is associated with.
	DbSystemId string `pulumi:"dbSystemId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-supplied description for the backup.
	Description *string `pulumi:"description"`
	// (Updatable) A user-supplied display name for the backup.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Number of days to retain this backup.
	RetentionInDays *int `pulumi:"retentionInDays"`
}

// The set of arguments for constructing a MysqlBackup resource.
type MysqlBackupArgs struct {
	// The type of backup.
	BackupType pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment the backup exists in.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the DB System the Backup is associated with.
	DbSystemId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-supplied description for the backup.
	Description pulumi.StringPtrInput
	// (Updatable) A user-supplied display name for the backup.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Number of days to retain this backup.
	RetentionInDays pulumi.IntPtrInput
}

func (MysqlBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlBackupArgs)(nil)).Elem()
}

type MysqlBackupInput interface {
	pulumi.Input

	ToMysqlBackupOutput() MysqlBackupOutput
	ToMysqlBackupOutputWithContext(ctx context.Context) MysqlBackupOutput
}

func (*MysqlBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackup)(nil)).Elem()
}

func (i *MysqlBackup) ToMysqlBackupOutput() MysqlBackupOutput {
	return i.ToMysqlBackupOutputWithContext(context.Background())
}

func (i *MysqlBackup) ToMysqlBackupOutputWithContext(ctx context.Context) MysqlBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupOutput)
}

// MysqlBackupArrayInput is an input type that accepts MysqlBackupArray and MysqlBackupArrayOutput values.
// You can construct a concrete instance of `MysqlBackupArrayInput` via:
//
//	MysqlBackupArray{ MysqlBackupArgs{...} }
type MysqlBackupArrayInput interface {
	pulumi.Input

	ToMysqlBackupArrayOutput() MysqlBackupArrayOutput
	ToMysqlBackupArrayOutputWithContext(context.Context) MysqlBackupArrayOutput
}

type MysqlBackupArray []MysqlBackupInput

func (MysqlBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlBackup)(nil)).Elem()
}

func (i MysqlBackupArray) ToMysqlBackupArrayOutput() MysqlBackupArrayOutput {
	return i.ToMysqlBackupArrayOutputWithContext(context.Background())
}

func (i MysqlBackupArray) ToMysqlBackupArrayOutputWithContext(ctx context.Context) MysqlBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupArrayOutput)
}

// MysqlBackupMapInput is an input type that accepts MysqlBackupMap and MysqlBackupMapOutput values.
// You can construct a concrete instance of `MysqlBackupMapInput` via:
//
//	MysqlBackupMap{ "key": MysqlBackupArgs{...} }
type MysqlBackupMapInput interface {
	pulumi.Input

	ToMysqlBackupMapOutput() MysqlBackupMapOutput
	ToMysqlBackupMapOutputWithContext(context.Context) MysqlBackupMapOutput
}

type MysqlBackupMap map[string]MysqlBackupInput

func (MysqlBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlBackup)(nil)).Elem()
}

func (i MysqlBackupMap) ToMysqlBackupMapOutput() MysqlBackupMapOutput {
	return i.ToMysqlBackupMapOutputWithContext(context.Background())
}

func (i MysqlBackupMap) ToMysqlBackupMapOutputWithContext(ctx context.Context) MysqlBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupMapOutput)
}

type MysqlBackupOutput struct{ *pulumi.OutputState }

func (MysqlBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackup)(nil)).Elem()
}

func (o MysqlBackupOutput) ToMysqlBackupOutput() MysqlBackupOutput {
	return o
}

func (o MysqlBackupOutput) ToMysqlBackupOutputWithContext(ctx context.Context) MysqlBackupOutput {
	return o
}

// The size of the backup in base-2 (IEC) gibibytes. (GiB).
func (o MysqlBackupOutput) BackupSizeInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.IntOutput { return v.BackupSizeInGbs }).(pulumi.IntOutput)
}

// The type of backup.
func (o MysqlBackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// (Updatable) The OCID of the compartment the backup exists in.
func (o MysqlBackupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Indicates how the backup was created: manually, automatic, or by an Operator.
func (o MysqlBackupOutput) CreationType() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.CreationType }).(pulumi.StringOutput)
}

// Initial size of the data volume in GiBs that will be created and attached.
func (o MysqlBackupOutput) DataStorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.IntOutput { return v.DataStorageSizeInGb }).(pulumi.IntOutput)
}

// The OCID of the DB System the Backup is associated with.
func (o MysqlBackupOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.DbSystemId }).(pulumi.StringOutput)
}

// Snapshot of the DbSystem details at the time of the backup
func (o MysqlBackupOutput) DbSystemSnapshots() MysqlBackupDbSystemSnapshotArrayOutput {
	return o.ApplyT(func(v *MysqlBackup) MysqlBackupDbSystemSnapshotArrayOutput { return v.DbSystemSnapshots }).(MysqlBackupDbSystemSnapshotArrayOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlBackupOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) A user-supplied description for the backup.
func (o MysqlBackupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) A user-supplied display name for the backup.
func (o MysqlBackupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlBackupOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// Additional information about the current lifecycleState.
func (o MysqlBackupOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The MySQL server version of the DB System used for backup.
func (o MysqlBackupOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.MysqlVersion }).(pulumi.StringOutput)
}

// (Updatable) Number of days to retain this backup.
func (o MysqlBackupOutput) RetentionInDays() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.IntOutput { return v.RetentionInDays }).(pulumi.IntOutput)
}

// The shape of the DB System instance used for backup.
func (o MysqlBackupOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.ShapeName }).(pulumi.StringOutput)
}

// The state of the backup.
func (o MysqlBackupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time the backup record was created.
func (o MysqlBackupOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time at which the backup was updated.
func (o MysqlBackupOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBackup) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type MysqlBackupArrayOutput struct{ *pulumi.OutputState }

func (MysqlBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlBackup)(nil)).Elem()
}

func (o MysqlBackupArrayOutput) ToMysqlBackupArrayOutput() MysqlBackupArrayOutput {
	return o
}

func (o MysqlBackupArrayOutput) ToMysqlBackupArrayOutputWithContext(ctx context.Context) MysqlBackupArrayOutput {
	return o
}

func (o MysqlBackupArrayOutput) Index(i pulumi.IntInput) MysqlBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlBackup {
		return vs[0].([]*MysqlBackup)[vs[1].(int)]
	}).(MysqlBackupOutput)
}

type MysqlBackupMapOutput struct{ *pulumi.OutputState }

func (MysqlBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlBackup)(nil)).Elem()
}

func (o MysqlBackupMapOutput) ToMysqlBackupMapOutput() MysqlBackupMapOutput {
	return o
}

func (o MysqlBackupMapOutput) ToMysqlBackupMapOutputWithContext(ctx context.Context) MysqlBackupMapOutput {
	return o
}

func (o MysqlBackupMapOutput) MapIndex(k pulumi.StringInput) MysqlBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlBackup {
		return vs[0].(map[string]*MysqlBackup)[vs[1].(string)]
	}).(MysqlBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBackupInput)(nil)).Elem(), &MysqlBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBackupArrayInput)(nil)).Elem(), MysqlBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBackupMapInput)(nil)).Elem(), MysqlBackupMap{})
	pulumi.RegisterOutputType(MysqlBackupOutput{})
	pulumi.RegisterOutputType(MysqlBackupArrayOutput{})
	pulumi.RegisterOutputType(MysqlBackupMapOutput{})
}
