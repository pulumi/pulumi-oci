// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Mysql Configuration resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Creates a new Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewMysqlConfiguration(ctx, "testMysqlConfiguration", &Mysql.MysqlConfigurationArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				ShapeName:     pulumi.Any(oci_mysql_shape.Test_shape.Name),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Mysql_configuration_description),
//				DisplayName: pulumi.Any(_var.Mysql_configuration_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				InitVariables: &mysql.MysqlConfigurationInitVariablesArgs{
//					LowerCaseTableNames: pulumi.Any(_var.Mysql_configuration_init_variables_lower_case_table_names),
//				},
//				ParentConfigurationId: pulumi.Any(oci_audit_configuration.Test_configuration.Id),
//				Variables: &mysql.MysqlConfigurationVariablesArgs{
//					Autocommit:                             pulumi.Any(_var.Mysql_configuration_variables_autocommit),
//					BigTables:                              pulumi.Any(_var.Mysql_configuration_variables_big_tables),
//					BinlogExpireLogsSeconds:                pulumi.Any(_var.Mysql_configuration_variables_binlog_expire_logs_seconds),
//					BinlogRowMetadata:                      pulumi.Any(_var.Mysql_configuration_variables_binlog_row_metadata),
//					BinlogRowValueOptions:                  pulumi.Any(_var.Mysql_configuration_variables_binlog_row_value_options),
//					BinlogTransactionCompression:           pulumi.Any(_var.Mysql_configuration_variables_binlog_transaction_compression),
//					CompletionType:                         pulumi.Any(_var.Mysql_configuration_variables_completion_type),
//					ConnectTimeout:                         pulumi.Any(_var.Mysql_configuration_variables_connect_timeout),
//					ConnectionMemoryChunkSize:              pulumi.Any(_var.Mysql_configuration_variables_connection_memory_chunk_size),
//					ConnectionMemoryLimit:                  pulumi.Any(_var.Mysql_configuration_variables_connection_memory_limit),
//					CteMaxRecursionDepth:                   pulumi.Any(_var.Mysql_configuration_variables_cte_max_recursion_depth),
//					DefaultAuthenticationPlugin:            pulumi.Any(_var.Mysql_configuration_variables_default_authentication_plugin),
//					ForeignKeyChecks:                       pulumi.Any(_var.Mysql_configuration_variables_foreign_key_checks),
//					GeneratedRandomPasswordLength:          pulumi.Any(_var.Mysql_configuration_variables_generated_random_password_length),
//					GlobalConnectionMemoryLimit:            pulumi.Any(_var.Mysql_configuration_variables_global_connection_memory_limit),
//					GlobalConnectionMemoryTracking:         pulumi.Any(_var.Mysql_configuration_variables_global_connection_memory_tracking),
//					GroupReplicationConsistency:            pulumi.Any(_var.Mysql_configuration_variables_group_replication_consistency),
//					InformationSchemaStatsExpiry:           pulumi.Any(_var.Mysql_configuration_variables_information_schema_stats_expiry),
//					InnodbBufferPoolDumpPct:                pulumi.Any(_var.Mysql_configuration_variables_innodb_buffer_pool_dump_pct),
//					InnodbBufferPoolInstances:              pulumi.Any(_var.Mysql_configuration_variables_innodb_buffer_pool_instances),
//					InnodbBufferPoolSize:                   pulumi.Any(_var.Mysql_configuration_variables_innodb_buffer_pool_size),
//					InnodbDdlBufferSize:                    pulumi.Any(_var.Mysql_configuration_variables_innodb_ddl_buffer_size),
//					InnodbDdlThreads:                       pulumi.Any(_var.Mysql_configuration_variables_innodb_ddl_threads),
//					InnodbFtEnableStopword:                 pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_enable_stopword),
//					InnodbFtMaxTokenSize:                   pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_max_token_size),
//					InnodbFtMinTokenSize:                   pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_min_token_size),
//					InnodbFtNumWordOptimize:                pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_num_word_optimize),
//					InnodbFtResultCacheLimit:               pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_result_cache_limit),
//					InnodbFtServerStopwordTable:            pulumi.Any(_var.Mysql_configuration_variables_innodb_ft_server_stopword_table),
//					InnodbLockWaitTimeout:                  pulumi.Any(_var.Mysql_configuration_variables_innodb_lock_wait_timeout),
//					InnodbLogWriterThreads:                 pulumi.Any(_var.Mysql_configuration_variables_innodb_log_writer_threads),
//					InnodbMaxPurgeLag:                      pulumi.Any(_var.Mysql_configuration_variables_innodb_max_purge_lag),
//					InnodbMaxPurgeLagDelay:                 pulumi.Any(_var.Mysql_configuration_variables_innodb_max_purge_lag_delay),
//					InnodbStatsPersistentSamplePages:       pulumi.Any(_var.Mysql_configuration_variables_innodb_stats_persistent_sample_pages),
//					InnodbStatsTransientSamplePages:        pulumi.Any(_var.Mysql_configuration_variables_innodb_stats_transient_sample_pages),
//					InteractiveTimeout:                     pulumi.Any(_var.Mysql_configuration_variables_interactive_timeout),
//					LocalInfile:                            pulumi.Any(_var.Mysql_configuration_variables_local_infile),
//					MandatoryRoles:                         pulumi.Any(_var.Mysql_configuration_variables_mandatory_roles),
//					MaxAllowedPacket:                       pulumi.Any(_var.Mysql_configuration_variables_max_allowed_packet),
//					MaxBinlogCacheSize:                     pulumi.Any(_var.Mysql_configuration_variables_max_binlog_cache_size),
//					MaxConnectErrors:                       pulumi.Any(_var.Mysql_configuration_variables_max_connect_errors),
//					MaxConnections:                         pulumi.Any(_var.Mysql_configuration_variables_max_connections),
//					MaxExecutionTime:                       pulumi.Any(_var.Mysql_configuration_variables_max_execution_time),
//					MaxHeapTableSize:                       pulumi.Any(_var.Mysql_configuration_variables_max_heap_table_size),
//					MaxPreparedStmtCount:                   pulumi.Any(_var.Mysql_configuration_variables_max_prepared_stmt_count),
//					MysqlFirewallMode:                      pulumi.Any(_var.Mysql_configuration_variables_mysql_firewall_mode),
//					MysqlZstdDefaultCompressionLevel:       pulumi.Any(_var.Mysql_configuration_variables_mysql_zstd_default_compression_level),
//					MysqlxConnectTimeout:                   pulumi.Any(_var.Mysql_configuration_variables_mysqlx_connect_timeout),
//					MysqlxDeflateDefaultCompressionLevel:   pulumi.Any(_var.Mysql_configuration_variables_mysqlx_deflate_default_compression_level),
//					MysqlxDeflateMaxClientCompressionLevel: pulumi.Any(_var.Mysql_configuration_variables_mysqlx_deflate_max_client_compression_level),
//					MysqlxDocumentIdUniquePrefix:           pulumi.Any(_var.Mysql_configuration_variables_mysqlx_document_id_unique_prefix),
//					MysqlxEnableHelloNotice:                pulumi.Any(_var.Mysql_configuration_variables_mysqlx_enable_hello_notice),
//					MysqlxIdleWorkerThreadTimeout:          pulumi.Any(_var.Mysql_configuration_variables_mysqlx_idle_worker_thread_timeout),
//					MysqlxInteractiveTimeout:               pulumi.Any(_var.Mysql_configuration_variables_mysqlx_interactive_timeout),
//					MysqlxLz4defaultCompressionLevel:       pulumi.Any(_var.Mysql_configuration_variables_mysqlx_lz4default_compression_level),
//					MysqlxLz4maxClientCompressionLevel:     pulumi.Any(_var.Mysql_configuration_variables_mysqlx_lz4max_client_compression_level),
//					MysqlxMaxAllowedPacket:                 pulumi.Any(_var.Mysql_configuration_variables_mysqlx_max_allowed_packet),
//					MysqlxMinWorkerThreads:                 pulumi.Any(_var.Mysql_configuration_variables_mysqlx_min_worker_threads),
//					MysqlxReadTimeout:                      pulumi.Any(_var.Mysql_configuration_variables_mysqlx_read_timeout),
//					MysqlxWaitTimeout:                      pulumi.Any(_var.Mysql_configuration_variables_mysqlx_wait_timeout),
//					MysqlxWriteTimeout:                     pulumi.Any(_var.Mysql_configuration_variables_mysqlx_write_timeout),
//					MysqlxZstdDefaultCompressionLevel:      pulumi.Any(_var.Mysql_configuration_variables_mysqlx_zstd_default_compression_level),
//					MysqlxZstdMaxClientCompressionLevel:    pulumi.Any(_var.Mysql_configuration_variables_mysqlx_zstd_max_client_compression_level),
//					NetReadTimeout:                         pulumi.Any(_var.Mysql_configuration_variables_net_read_timeout),
//					NetWriteTimeout:                        pulumi.Any(_var.Mysql_configuration_variables_net_write_timeout),
//					ParserMaxMemSize:                       pulumi.Any(_var.Mysql_configuration_variables_parser_max_mem_size),
//					QueryAllocBlockSize:                    pulumi.Any(_var.Mysql_configuration_variables_query_alloc_block_size),
//					QueryPreallocSize:                      pulumi.Any(_var.Mysql_configuration_variables_query_prealloc_size),
//					RegexpTimeLimit:                        pulumi.Any(_var.Mysql_configuration_variables_regexp_time_limit),
//					SortBufferSize:                         pulumi.Any(_var.Mysql_configuration_variables_sort_buffer_size),
//					SqlMode:                                pulumi.Any(_var.Mysql_configuration_variables_sql_mode),
//					SqlRequirePrimaryKey:                   pulumi.Any(_var.Mysql_configuration_variables_sql_require_primary_key),
//					SqlWarnings:                            pulumi.Any(_var.Mysql_configuration_variables_sql_warnings),
//					ThreadPoolDedicatedListeners:           pulumi.Any(_var.Mysql_configuration_variables_thread_pool_dedicated_listeners),
//					ThreadPoolMaxTransactionsLimit:         pulumi.Any(_var.Mysql_configuration_variables_thread_pool_max_transactions_limit),
//					TimeZone:                               pulumi.Any(_var.Mysql_configuration_variables_time_zone),
//					TmpTableSize:                           pulumi.Any(_var.Mysql_configuration_variables_tmp_table_size),
//					TransactionIsolation:                   pulumi.Any(_var.Mysql_configuration_variables_transaction_isolation),
//					WaitTimeout:                            pulumi.Any(_var.Mysql_configuration_variables_wait_timeout),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MysqlConfigurations can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Mysql/mysqlConfiguration:MysqlConfiguration test_mysql_configuration "configurations/{configurationId}"
//
// ```
type MysqlConfiguration struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) User-provided data about the Configuration.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The display name of the Configuration.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
	InitVariables MysqlConfigurationInitVariablesOutput `pulumi:"initVariables"`
	// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
	ParentConfigurationId pulumi.StringOutput `pulumi:"parentConfigurationId"`
	// The name of the associated Shape.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// The current state of the Configuration.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The Configuration type, DEFAULT or CUSTOM.
	Type pulumi.StringOutput `pulumi:"type"`
	// User-defined service variables.
	Variables MysqlConfigurationVariablesOutput `pulumi:"variables"`
}

// NewMysqlConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMysqlConfiguration(ctx *pulumi.Context,
	name string, args *MysqlConfigurationArgs, opts ...pulumi.ResourceOption) (*MysqlConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MysqlConfiguration
	err := ctx.RegisterResource("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlConfiguration gets an existing MysqlConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlConfigurationState, opts ...pulumi.ResourceOption) (*MysqlConfiguration, error) {
	var resource MysqlConfiguration
	err := ctx.ReadResource("oci:Mysql/mysqlConfiguration:MysqlConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlConfiguration resources.
type mysqlConfigurationState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User-provided data about the Configuration.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the Configuration.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
	InitVariables *MysqlConfigurationInitVariables `pulumi:"initVariables"`
	// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
	ParentConfigurationId *string `pulumi:"parentConfigurationId"`
	// The name of the associated Shape.
	ShapeName *string `pulumi:"shapeName"`
	// The current state of the Configuration.
	State *string `pulumi:"state"`
	// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The Configuration type, DEFAULT or CUSTOM.
	Type *string `pulumi:"type"`
	// User-defined service variables.
	Variables *MysqlConfigurationVariables `pulumi:"variables"`
}

type MysqlConfigurationState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User-provided data about the Configuration.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the Configuration.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
	InitVariables MysqlConfigurationInitVariablesPtrInput
	// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
	ParentConfigurationId pulumi.StringPtrInput
	// The name of the associated Shape.
	ShapeName pulumi.StringPtrInput
	// The current state of the Configuration.
	State pulumi.StringPtrInput
	// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
	// The Configuration type, DEFAULT or CUSTOM.
	Type pulumi.StringPtrInput
	// User-defined service variables.
	Variables MysqlConfigurationVariablesPtrInput
}

func (MysqlConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlConfigurationState)(nil)).Elem()
}

type mysqlConfigurationArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User-provided data about the Configuration.
	Description *string `pulumi:"description"`
	// (Updatable) The display name of the Configuration.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
	InitVariables *MysqlConfigurationInitVariables `pulumi:"initVariables"`
	// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
	ParentConfigurationId *string `pulumi:"parentConfigurationId"`
	// The name of the associated Shape.
	ShapeName string `pulumi:"shapeName"`
	// User-defined service variables.
	Variables *MysqlConfigurationVariables `pulumi:"variables"`
}

// The set of arguments for constructing a MysqlConfiguration resource.
type MysqlConfigurationArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User-provided data about the Configuration.
	Description pulumi.StringPtrInput
	// (Updatable) The display name of the Configuration.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
	InitVariables MysqlConfigurationInitVariablesPtrInput
	// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
	ParentConfigurationId pulumi.StringPtrInput
	// The name of the associated Shape.
	ShapeName pulumi.StringInput
	// User-defined service variables.
	Variables MysqlConfigurationVariablesPtrInput
}

func (MysqlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlConfigurationArgs)(nil)).Elem()
}

type MysqlConfigurationInput interface {
	pulumi.Input

	ToMysqlConfigurationOutput() MysqlConfigurationOutput
	ToMysqlConfigurationOutputWithContext(ctx context.Context) MysqlConfigurationOutput
}

func (*MysqlConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlConfiguration)(nil)).Elem()
}

func (i *MysqlConfiguration) ToMysqlConfigurationOutput() MysqlConfigurationOutput {
	return i.ToMysqlConfigurationOutputWithContext(context.Background())
}

func (i *MysqlConfiguration) ToMysqlConfigurationOutputWithContext(ctx context.Context) MysqlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlConfigurationOutput)
}

func (i *MysqlConfiguration) ToOutput(ctx context.Context) pulumix.Output[*MysqlConfiguration] {
	return pulumix.Output[*MysqlConfiguration]{
		OutputState: i.ToMysqlConfigurationOutputWithContext(ctx).OutputState,
	}
}

// MysqlConfigurationArrayInput is an input type that accepts MysqlConfigurationArray and MysqlConfigurationArrayOutput values.
// You can construct a concrete instance of `MysqlConfigurationArrayInput` via:
//
//	MysqlConfigurationArray{ MysqlConfigurationArgs{...} }
type MysqlConfigurationArrayInput interface {
	pulumi.Input

	ToMysqlConfigurationArrayOutput() MysqlConfigurationArrayOutput
	ToMysqlConfigurationArrayOutputWithContext(context.Context) MysqlConfigurationArrayOutput
}

type MysqlConfigurationArray []MysqlConfigurationInput

func (MysqlConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlConfiguration)(nil)).Elem()
}

func (i MysqlConfigurationArray) ToMysqlConfigurationArrayOutput() MysqlConfigurationArrayOutput {
	return i.ToMysqlConfigurationArrayOutputWithContext(context.Background())
}

func (i MysqlConfigurationArray) ToMysqlConfigurationArrayOutputWithContext(ctx context.Context) MysqlConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlConfigurationArrayOutput)
}

func (i MysqlConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]*MysqlConfiguration] {
	return pulumix.Output[[]*MysqlConfiguration]{
		OutputState: i.ToMysqlConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// MysqlConfigurationMapInput is an input type that accepts MysqlConfigurationMap and MysqlConfigurationMapOutput values.
// You can construct a concrete instance of `MysqlConfigurationMapInput` via:
//
//	MysqlConfigurationMap{ "key": MysqlConfigurationArgs{...} }
type MysqlConfigurationMapInput interface {
	pulumi.Input

	ToMysqlConfigurationMapOutput() MysqlConfigurationMapOutput
	ToMysqlConfigurationMapOutputWithContext(context.Context) MysqlConfigurationMapOutput
}

type MysqlConfigurationMap map[string]MysqlConfigurationInput

func (MysqlConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlConfiguration)(nil)).Elem()
}

func (i MysqlConfigurationMap) ToMysqlConfigurationMapOutput() MysqlConfigurationMapOutput {
	return i.ToMysqlConfigurationMapOutputWithContext(context.Background())
}

func (i MysqlConfigurationMap) ToMysqlConfigurationMapOutputWithContext(ctx context.Context) MysqlConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlConfigurationMapOutput)
}

func (i MysqlConfigurationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*MysqlConfiguration] {
	return pulumix.Output[map[string]*MysqlConfiguration]{
		OutputState: i.ToMysqlConfigurationMapOutputWithContext(ctx).OutputState,
	}
}

type MysqlConfigurationOutput struct{ *pulumi.OutputState }

func (MysqlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlConfiguration)(nil)).Elem()
}

func (o MysqlConfigurationOutput) ToMysqlConfigurationOutput() MysqlConfigurationOutput {
	return o
}

func (o MysqlConfigurationOutput) ToMysqlConfigurationOutputWithContext(ctx context.Context) MysqlConfigurationOutput {
	return o
}

func (o MysqlConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*MysqlConfiguration] {
	return pulumix.Output[*MysqlConfiguration]{
		OutputState: o.OutputState,
	}
}

// The OCID of the compartment.
func (o MysqlConfigurationOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o MysqlConfigurationOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) User-provided data about the Configuration.
func (o MysqlConfigurationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The display name of the Configuration.
func (o MysqlConfigurationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o MysqlConfigurationOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// User-defined service variables set only at DB system initialization. These variables cannot be changed later at runtime.
func (o MysqlConfigurationOutput) InitVariables() MysqlConfigurationInitVariablesOutput {
	return o.ApplyT(func(v *MysqlConfiguration) MysqlConfigurationInitVariablesOutput { return v.InitVariables }).(MysqlConfigurationInitVariablesOutput)
}

// The OCID of the Configuration from which the new Configuration is derived. The values in CreateConfigurationDetails.variables supersede the variables of the parent Configuration.
func (o MysqlConfigurationOutput) ParentConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.ParentConfigurationId }).(pulumi.StringOutput)
}

// The name of the associated Shape.
func (o MysqlConfigurationOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.ShapeName }).(pulumi.StringOutput)
}

// The current state of the Configuration.
func (o MysqlConfigurationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the Configuration was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o MysqlConfigurationOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the Configuration was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o MysqlConfigurationOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The Configuration type, DEFAULT or CUSTOM.
func (o MysqlConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// User-defined service variables.
func (o MysqlConfigurationOutput) Variables() MysqlConfigurationVariablesOutput {
	return o.ApplyT(func(v *MysqlConfiguration) MysqlConfigurationVariablesOutput { return v.Variables }).(MysqlConfigurationVariablesOutput)
}

type MysqlConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MysqlConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlConfiguration)(nil)).Elem()
}

func (o MysqlConfigurationArrayOutput) ToMysqlConfigurationArrayOutput() MysqlConfigurationArrayOutput {
	return o
}

func (o MysqlConfigurationArrayOutput) ToMysqlConfigurationArrayOutputWithContext(ctx context.Context) MysqlConfigurationArrayOutput {
	return o
}

func (o MysqlConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*MysqlConfiguration] {
	return pulumix.Output[[]*MysqlConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MysqlConfigurationArrayOutput) Index(i pulumi.IntInput) MysqlConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlConfiguration {
		return vs[0].([]*MysqlConfiguration)[vs[1].(int)]
	}).(MysqlConfigurationOutput)
}

type MysqlConfigurationMapOutput struct{ *pulumi.OutputState }

func (MysqlConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlConfiguration)(nil)).Elem()
}

func (o MysqlConfigurationMapOutput) ToMysqlConfigurationMapOutput() MysqlConfigurationMapOutput {
	return o
}

func (o MysqlConfigurationMapOutput) ToMysqlConfigurationMapOutputWithContext(ctx context.Context) MysqlConfigurationMapOutput {
	return o
}

func (o MysqlConfigurationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*MysqlConfiguration] {
	return pulumix.Output[map[string]*MysqlConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MysqlConfigurationMapOutput) MapIndex(k pulumi.StringInput) MysqlConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlConfiguration {
		return vs[0].(map[string]*MysqlConfiguration)[vs[1].(string)]
	}).(MysqlConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlConfigurationInput)(nil)).Elem(), &MysqlConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlConfigurationArrayInput)(nil)).Elem(), MysqlConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlConfigurationMapInput)(nil)).Elem(), MysqlConfigurationMap{})
	pulumi.RegisterOutputType(MysqlConfigurationOutput{})
	pulumi.RegisterOutputType(MysqlConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MysqlConfigurationMapOutput{})
}
