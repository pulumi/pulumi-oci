// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Replica resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Creates a DB System read replica.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewReplica(ctx, "testReplica", &Mysql.ReplicaArgs{
//				DbSystemId: pulumi.Any(oci_mysql_mysql_db_system.Test_mysql_db_system.Id),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Replica_description),
//				DisplayName: pulumi.Any(_var.Replica_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				IsDeleteProtected: pulumi.Any(_var.Replica_is_delete_protected),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Replicas can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Mysql/replica:Replica test_replica "id"
//
// ```
type Replica struct {
	pulumi.CustomResourceState

	// The name of the Availability Domain the read replica is located in.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The OCID of the compartment that contains the read replica.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID of the DB System the read replica is associated with.
	DbSystemId pulumi.StringOutput `pulumi:"dbSystemId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) User provided description of the read replica.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The name of the Fault Domain the read replica is located in.
	FaultDomain pulumi.StringOutput `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The IP address the read replica is configured to listen on.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	IsDeleteProtected pulumi.BoolOutput `pulumi:"isDeleteProtected"`
	// A message describing the state of the read replica.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The MySQL version used by the read replica.
	MysqlVersion pulumi.StringOutput `pulumi:"mysqlVersion"`
	// The port the read replica is configured to listen on.
	Port pulumi.IntOutput `pulumi:"port"`
	// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntOutput `pulumi:"portX"`
	// The state of the read replica.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the read replica was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the read replica was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewReplica registers a new resource with the given unique name, arguments, and options.
func NewReplica(ctx *pulumi.Context,
	name string, args *ReplicaArgs, opts ...pulumi.ResourceOption) (*Replica, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbSystemId == nil {
		return nil, errors.New("invalid value for required argument 'DbSystemId'")
	}
	var resource Replica
	err := ctx.RegisterResource("oci:Mysql/replica:Replica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplica gets an existing Replica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaState, opts ...pulumi.ResourceOption) (*Replica, error) {
	var resource Replica
	err := ctx.ReadResource("oci:Mysql/replica:Replica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Replica resources.
type replicaState struct {
	// The name of the Availability Domain the read replica is located in.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The OCID of the compartment that contains the read replica.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the DB System the read replica is associated with.
	DbSystemId *string `pulumi:"dbSystemId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User provided description of the read replica.
	Description *string `pulumi:"description"`
	// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The name of the Fault Domain the read replica is located in.
	FaultDomain *string `pulumi:"faultDomain"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The IP address the read replica is configured to listen on.
	IpAddress *string `pulumi:"ipAddress"`
	// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	IsDeleteProtected *bool `pulumi:"isDeleteProtected"`
	// A message describing the state of the read replica.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The MySQL version used by the read replica.
	MysqlVersion *string `pulumi:"mysqlVersion"`
	// The port the read replica is configured to listen on.
	Port *int `pulumi:"port"`
	// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
	PortX *int `pulumi:"portX"`
	// The state of the read replica.
	State *string `pulumi:"state"`
	// The date and time the read replica was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the read replica was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ReplicaState struct {
	// The name of the Availability Domain the read replica is located in.
	AvailabilityDomain pulumi.StringPtrInput
	// The OCID of the compartment that contains the read replica.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the DB System the read replica is associated with.
	DbSystemId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User provided description of the read replica.
	Description pulumi.StringPtrInput
	// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// The name of the Fault Domain the read replica is located in.
	FaultDomain pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The IP address the read replica is configured to listen on.
	IpAddress pulumi.StringPtrInput
	// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	IsDeleteProtected pulumi.BoolPtrInput
	// A message describing the state of the read replica.
	LifecycleDetails pulumi.StringPtrInput
	// The MySQL version used by the read replica.
	MysqlVersion pulumi.StringPtrInput
	// The port the read replica is configured to listen on.
	Port pulumi.IntPtrInput
	// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
	PortX pulumi.IntPtrInput
	// The state of the read replica.
	State pulumi.StringPtrInput
	// The date and time the read replica was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The time the read replica was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
}

func (ReplicaState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaState)(nil)).Elem()
}

type replicaArgs struct {
	// The OCID of the DB System the read replica is associated with.
	DbSystemId string `pulumi:"dbSystemId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User provided description of the read replica.
	Description *string `pulumi:"description"`
	// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	IsDeleteProtected *bool `pulumi:"isDeleteProtected"`
}

// The set of arguments for constructing a Replica resource.
type ReplicaArgs struct {
	// The OCID of the DB System the read replica is associated with.
	DbSystemId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User provided description of the read replica.
	Description pulumi.StringPtrInput
	// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	IsDeleteProtected pulumi.BoolPtrInput
}

func (ReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaArgs)(nil)).Elem()
}

type ReplicaInput interface {
	pulumi.Input

	ToReplicaOutput() ReplicaOutput
	ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput
}

func (*Replica) ElementType() reflect.Type {
	return reflect.TypeOf((**Replica)(nil)).Elem()
}

func (i *Replica) ToReplicaOutput() ReplicaOutput {
	return i.ToReplicaOutputWithContext(context.Background())
}

func (i *Replica) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaOutput)
}

// ReplicaArrayInput is an input type that accepts ReplicaArray and ReplicaArrayOutput values.
// You can construct a concrete instance of `ReplicaArrayInput` via:
//
//	ReplicaArray{ ReplicaArgs{...} }
type ReplicaArrayInput interface {
	pulumi.Input

	ToReplicaArrayOutput() ReplicaArrayOutput
	ToReplicaArrayOutputWithContext(context.Context) ReplicaArrayOutput
}

type ReplicaArray []ReplicaInput

func (ReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Replica)(nil)).Elem()
}

func (i ReplicaArray) ToReplicaArrayOutput() ReplicaArrayOutput {
	return i.ToReplicaArrayOutputWithContext(context.Background())
}

func (i ReplicaArray) ToReplicaArrayOutputWithContext(ctx context.Context) ReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaArrayOutput)
}

// ReplicaMapInput is an input type that accepts ReplicaMap and ReplicaMapOutput values.
// You can construct a concrete instance of `ReplicaMapInput` via:
//
//	ReplicaMap{ "key": ReplicaArgs{...} }
type ReplicaMapInput interface {
	pulumi.Input

	ToReplicaMapOutput() ReplicaMapOutput
	ToReplicaMapOutputWithContext(context.Context) ReplicaMapOutput
}

type ReplicaMap map[string]ReplicaInput

func (ReplicaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Replica)(nil)).Elem()
}

func (i ReplicaMap) ToReplicaMapOutput() ReplicaMapOutput {
	return i.ToReplicaMapOutputWithContext(context.Background())
}

func (i ReplicaMap) ToReplicaMapOutputWithContext(ctx context.Context) ReplicaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaMapOutput)
}

type ReplicaOutput struct{ *pulumi.OutputState }

func (ReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Replica)(nil)).Elem()
}

func (o ReplicaOutput) ToReplicaOutput() ReplicaOutput {
	return o
}

func (o ReplicaOutput) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return o
}

// The name of the Availability Domain the read replica is located in.
func (o ReplicaOutput) AvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.AvailabilityDomain }).(pulumi.StringOutput)
}

// The OCID of the compartment that contains the read replica.
func (o ReplicaOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The OCID of the DB System the read replica is associated with.
func (o ReplicaOutput) DbSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.DbSystemId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o ReplicaOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Replica) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) User provided description of the read replica.
func (o ReplicaOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) The user-friendly name for the read replica. It does not have to be unique.
func (o ReplicaOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the Fault Domain the read replica is located in.
func (o ReplicaOutput) FaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.FaultDomain }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ReplicaOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Replica) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// The IP address the read replica is configured to listen on.
func (o ReplicaOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// (Updatable) Specifies whether the read replica can be deleted. Set to true to prevent deletion, false (default) to allow. Note that if a read replica is delete protected it also prevents the entire DB System from being deleted. If the DB System is delete protected, read replicas can still be deleted individually if they are not delete  protected themselves.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ReplicaOutput) IsDeleteProtected() pulumi.BoolOutput {
	return o.ApplyT(func(v *Replica) pulumi.BoolOutput { return v.IsDeleteProtected }).(pulumi.BoolOutput)
}

// A message describing the state of the read replica.
func (o ReplicaOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The MySQL version used by the read replica.
func (o ReplicaOutput) MysqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.MysqlVersion }).(pulumi.StringOutput)
}

// The port the read replica is configured to listen on.
func (o ReplicaOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Replica) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The TCP network port on which X Plugin listens for connections. This is the X Plugin equivalent of port.
func (o ReplicaOutput) PortX() pulumi.IntOutput {
	return o.ApplyT(func(v *Replica) pulumi.IntOutput { return v.PortX }).(pulumi.IntOutput)
}

// The state of the read replica.
func (o ReplicaOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The date and time the read replica was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o ReplicaOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the read replica was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
func (o ReplicaOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Replica) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ReplicaArrayOutput struct{ *pulumi.OutputState }

func (ReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Replica)(nil)).Elem()
}

func (o ReplicaArrayOutput) ToReplicaArrayOutput() ReplicaArrayOutput {
	return o
}

func (o ReplicaArrayOutput) ToReplicaArrayOutputWithContext(ctx context.Context) ReplicaArrayOutput {
	return o
}

func (o ReplicaArrayOutput) Index(i pulumi.IntInput) ReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Replica {
		return vs[0].([]*Replica)[vs[1].(int)]
	}).(ReplicaOutput)
}

type ReplicaMapOutput struct{ *pulumi.OutputState }

func (ReplicaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Replica)(nil)).Elem()
}

func (o ReplicaMapOutput) ToReplicaMapOutput() ReplicaMapOutput {
	return o
}

func (o ReplicaMapOutput) ToReplicaMapOutputWithContext(ctx context.Context) ReplicaMapOutput {
	return o
}

func (o ReplicaMapOutput) MapIndex(k pulumi.StringInput) ReplicaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Replica {
		return vs[0].(map[string]*Replica)[vs[1].(string)]
	}).(ReplicaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaInput)(nil)).Elem(), &Replica{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaArrayInput)(nil)).Elem(), ReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaMapInput)(nil)).Elem(), ReplicaMap{})
	pulumi.RegisterOutputType(ReplicaOutput{})
	pulumi.RegisterOutputType(ReplicaArrayOutput{})
	pulumi.RegisterOutputType(ReplicaMapOutput{})
}
