// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Network Firewall Policy Decryption Profile resource in Oracle Cloud Infrastructure Network Firewall service.
//
// Get Decryption Profile by the given name in the context of network firewall policy.
func LookupNetworkFirewallPolicyDecryptionProfile(ctx *pulumi.Context, args *LookupNetworkFirewallPolicyDecryptionProfileArgs, opts ...pulumi.InvokeOption) (*LookupNetworkFirewallPolicyDecryptionProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkFirewallPolicyDecryptionProfileResult
	err := ctx.Invoke("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkFirewallPolicyDecryptionProfile.
type LookupNetworkFirewallPolicyDecryptionProfileArgs struct {
	// Unique Name of the decryption profile.
	Name string `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId string `pulumi:"networkFirewallPolicyId"`
}

// A collection of values returned by getNetworkFirewallPolicyDecryptionProfile.
type LookupNetworkFirewallPolicyDecryptionProfileResult struct {
	// Whether to block sessions if the server's certificate uses extensions other than key usage and/or extended key usage.
	AreCertificateExtensionsRestricted bool   `pulumi:"areCertificateExtensionsRestricted"`
	Id                                 string `pulumi:"id"`
	// Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
	IsAutoIncludeAltName bool `pulumi:"isAutoIncludeAltName"`
	// Whether to block sessions if server's certificate is expired.
	IsExpiredCertificateBlocked bool `pulumi:"isExpiredCertificateBlocked"`
	// Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
	IsOutOfCapacityBlocked bool `pulumi:"isOutOfCapacityBlocked"`
	// Whether to block sessions if the revocation status check for server's certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
	IsRevocationStatusTimeoutBlocked bool `pulumi:"isRevocationStatusTimeoutBlocked"`
	// Whether to block sessions if the revocation status check for server's certificate results in "unknown".
	IsUnknownRevocationStatusBlocked bool `pulumi:"isUnknownRevocationStatusBlocked"`
	// Whether to block sessions if SSL cipher suite is not supported.
	IsUnsupportedCipherBlocked bool `pulumi:"isUnsupportedCipherBlocked"`
	// Whether to block sessions if SSL version is not supported.
	IsUnsupportedVersionBlocked bool `pulumi:"isUnsupportedVersionBlocked"`
	// Whether to block sessions if server's certificate is issued by an untrusted certificate authority (CA).
	IsUntrustedIssuerBlocked bool `pulumi:"isUntrustedIssuerBlocked"`
	// Unique Name of the decryption profile.
	Name                    string `pulumi:"name"`
	NetworkFirewallPolicyId string `pulumi:"networkFirewallPolicyId"`
	// OCID of the Network Firewall Policy this decryption profile belongs to.
	ParentResourceId string `pulumi:"parentResourceId"`
	// Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
	Type string `pulumi:"type"`
}

func LookupNetworkFirewallPolicyDecryptionProfileOutput(ctx *pulumi.Context, args LookupNetworkFirewallPolicyDecryptionProfileOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkFirewallPolicyDecryptionProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkFirewallPolicyDecryptionProfileResultOutput, error) {
			args := v.(LookupNetworkFirewallPolicyDecryptionProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:NetworkFirewall/getNetworkFirewallPolicyDecryptionProfile:getNetworkFirewallPolicyDecryptionProfile", args, LookupNetworkFirewallPolicyDecryptionProfileResultOutput{}, options).(LookupNetworkFirewallPolicyDecryptionProfileResultOutput), nil
		}).(LookupNetworkFirewallPolicyDecryptionProfileResultOutput)
}

// A collection of arguments for invoking getNetworkFirewallPolicyDecryptionProfile.
type LookupNetworkFirewallPolicyDecryptionProfileOutputArgs struct {
	// Unique Name of the decryption profile.
	Name pulumi.StringInput `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringInput `pulumi:"networkFirewallPolicyId"`
}

func (LookupNetworkFirewallPolicyDecryptionProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkFirewallPolicyDecryptionProfileArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkFirewallPolicyDecryptionProfile.
type LookupNetworkFirewallPolicyDecryptionProfileResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkFirewallPolicyDecryptionProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkFirewallPolicyDecryptionProfileResult)(nil)).Elem()
}

func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) ToLookupNetworkFirewallPolicyDecryptionProfileResultOutput() LookupNetworkFirewallPolicyDecryptionProfileResultOutput {
	return o
}

func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) ToLookupNetworkFirewallPolicyDecryptionProfileResultOutputWithContext(ctx context.Context) LookupNetworkFirewallPolicyDecryptionProfileResultOutput {
	return o
}

// Whether to block sessions if the server's certificate uses extensions other than key usage and/or extended key usage.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) AreCertificateExtensionsRestricted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool {
		return v.AreCertificateExtensionsRestricted
	}).(pulumi.BoolOutput)
}

func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to automatically append SAN to impersonating certificate if server certificate is missing SAN.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsAutoIncludeAltName() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsAutoIncludeAltName }).(pulumi.BoolOutput)
}

// Whether to block sessions if server's certificate is expired.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsExpiredCertificateBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsExpiredCertificateBlocked }).(pulumi.BoolOutput)
}

// Whether to block sessions if the firewall is temporarily unable to decrypt their traffic.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsOutOfCapacityBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsOutOfCapacityBlocked }).(pulumi.BoolOutput)
}

// Whether to block sessions if the revocation status check for server's certificate does not succeed within the maximum allowed time (defaulting to 5 seconds).
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsRevocationStatusTimeoutBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool {
		return v.IsRevocationStatusTimeoutBlocked
	}).(pulumi.BoolOutput)
}

// Whether to block sessions if the revocation status check for server's certificate results in "unknown".
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsUnknownRevocationStatusBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool {
		return v.IsUnknownRevocationStatusBlocked
	}).(pulumi.BoolOutput)
}

// Whether to block sessions if SSL cipher suite is not supported.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsUnsupportedCipherBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsUnsupportedCipherBlocked }).(pulumi.BoolOutput)
}

// Whether to block sessions if SSL version is not supported.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsUnsupportedVersionBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsUnsupportedVersionBlocked }).(pulumi.BoolOutput)
}

// Whether to block sessions if server's certificate is issued by an untrusted certificate authority (CA).
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) IsUntrustedIssuerBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) bool { return v.IsUntrustedIssuerBlocked }).(pulumi.BoolOutput)
}

// Unique Name of the decryption profile.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) NetworkFirewallPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) string { return v.NetworkFirewallPolicyId }).(pulumi.StringOutput)
}

// OCID of the Network Firewall Policy this decryption profile belongs to.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) ParentResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) string { return v.ParentResourceId }).(pulumi.StringOutput)
}

// Describes the type of Decryption Profile SslForwardProxy or SslInboundInspection.
func (o LookupNetworkFirewallPolicyDecryptionProfileResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkFirewallPolicyDecryptionProfileResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkFirewallPolicyDecryptionProfileResultOutput{})
}
