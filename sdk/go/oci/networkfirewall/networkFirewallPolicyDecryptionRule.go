// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Network Firewall Policy Decryption Rule resource in Oracle Cloud Infrastructure Network Firewall service.
//
// Creates a new Decryption Rule for the Network Firewall Policy.
//
// ## Import
//
// NetworkFirewallPolicyDecryptionRules can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import oci:NetworkFirewall/networkFirewallPolicyDecryptionRule:NetworkFirewallPolicyDecryptionRule test_network_firewall_policy_decryption_rule "networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}"
// ```
type NetworkFirewallPolicyDecryptionRule struct {
	pulumi.CustomResourceState

	// (Updatable) Action:
	// * NO_DECRYPT - Matching traffic is not decrypted.
	// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
	Action pulumi.StringOutput `pulumi:"action"`
	// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
	Condition NetworkFirewallPolicyDecryptionRuleConditionOutput `pulumi:"condition"`
	// (Updatable) The name of the decryption profile to use.
	DecryptionProfile pulumi.StringPtrOutput `pulumi:"decryptionProfile"`
	// Name for the decryption rule, must be unique within the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringOutput `pulumi:"networkFirewallPolicyId"`
	// OCID of the Network Firewall Policy this decryption rule belongs to.
	ParentResourceId pulumi.StringOutput `pulumi:"parentResourceId"`
	// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
	Position      NetworkFirewallPolicyDecryptionRulePositionOutput `pulumi:"position"`
	PriorityOrder pulumi.StringPtrOutput                            `pulumi:"priorityOrder"`
	// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
}

// NewNetworkFirewallPolicyDecryptionRule registers a new resource with the given unique name, arguments, and options.
func NewNetworkFirewallPolicyDecryptionRule(ctx *pulumi.Context,
	name string, args *NetworkFirewallPolicyDecryptionRuleArgs, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyDecryptionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.NetworkFirewallPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFirewallPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkFirewallPolicyDecryptionRule
	err := ctx.RegisterResource("oci:NetworkFirewall/networkFirewallPolicyDecryptionRule:NetworkFirewallPolicyDecryptionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFirewallPolicyDecryptionRule gets an existing NetworkFirewallPolicyDecryptionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFirewallPolicyDecryptionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFirewallPolicyDecryptionRuleState, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyDecryptionRule, error) {
	var resource NetworkFirewallPolicyDecryptionRule
	err := ctx.ReadResource("oci:NetworkFirewall/networkFirewallPolicyDecryptionRule:NetworkFirewallPolicyDecryptionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFirewallPolicyDecryptionRule resources.
type networkFirewallPolicyDecryptionRuleState struct {
	// (Updatable) Action:
	// * NO_DECRYPT - Matching traffic is not decrypted.
	// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
	Action *string `pulumi:"action"`
	// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
	Condition *NetworkFirewallPolicyDecryptionRuleCondition `pulumi:"condition"`
	// (Updatable) The name of the decryption profile to use.
	DecryptionProfile *string `pulumi:"decryptionProfile"`
	// Name for the decryption rule, must be unique within the policy.
	Name *string `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId *string `pulumi:"networkFirewallPolicyId"`
	// OCID of the Network Firewall Policy this decryption rule belongs to.
	ParentResourceId *string `pulumi:"parentResourceId"`
	// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
	Position      *NetworkFirewallPolicyDecryptionRulePosition `pulumi:"position"`
	PriorityOrder *string                                      `pulumi:"priorityOrder"`
	// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
	Secret *string `pulumi:"secret"`
}

type NetworkFirewallPolicyDecryptionRuleState struct {
	// (Updatable) Action:
	// * NO_DECRYPT - Matching traffic is not decrypted.
	// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
	Action pulumi.StringPtrInput
	// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
	Condition NetworkFirewallPolicyDecryptionRuleConditionPtrInput
	// (Updatable) The name of the decryption profile to use.
	DecryptionProfile pulumi.StringPtrInput
	// Name for the decryption rule, must be unique within the policy.
	Name pulumi.StringPtrInput
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringPtrInput
	// OCID of the Network Firewall Policy this decryption rule belongs to.
	ParentResourceId pulumi.StringPtrInput
	// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
	Position      NetworkFirewallPolicyDecryptionRulePositionPtrInput
	PriorityOrder pulumi.StringPtrInput
	// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
	Secret pulumi.StringPtrInput
}

func (NetworkFirewallPolicyDecryptionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyDecryptionRuleState)(nil)).Elem()
}

type networkFirewallPolicyDecryptionRuleArgs struct {
	// (Updatable) Action:
	// * NO_DECRYPT - Matching traffic is not decrypted.
	// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
	Action string `pulumi:"action"`
	// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
	Condition NetworkFirewallPolicyDecryptionRuleCondition `pulumi:"condition"`
	// (Updatable) The name of the decryption profile to use.
	DecryptionProfile *string `pulumi:"decryptionProfile"`
	// Name for the decryption rule, must be unique within the policy.
	Name *string `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId string `pulumi:"networkFirewallPolicyId"`
	// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
	Position      *NetworkFirewallPolicyDecryptionRulePosition `pulumi:"position"`
	PriorityOrder *string                                      `pulumi:"priorityOrder"`
	// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
	Secret *string `pulumi:"secret"`
}

// The set of arguments for constructing a NetworkFirewallPolicyDecryptionRule resource.
type NetworkFirewallPolicyDecryptionRuleArgs struct {
	// (Updatable) Action:
	// * NO_DECRYPT - Matching traffic is not decrypted.
	// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
	Action pulumi.StringInput
	// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
	Condition NetworkFirewallPolicyDecryptionRuleConditionInput
	// (Updatable) The name of the decryption profile to use.
	DecryptionProfile pulumi.StringPtrInput
	// Name for the decryption rule, must be unique within the policy.
	Name pulumi.StringPtrInput
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringInput
	// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
	Position      NetworkFirewallPolicyDecryptionRulePositionPtrInput
	PriorityOrder pulumi.StringPtrInput
	// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
	Secret pulumi.StringPtrInput
}

func (NetworkFirewallPolicyDecryptionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyDecryptionRuleArgs)(nil)).Elem()
}

type NetworkFirewallPolicyDecryptionRuleInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyDecryptionRuleOutput() NetworkFirewallPolicyDecryptionRuleOutput
	ToNetworkFirewallPolicyDecryptionRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleOutput
}

func (*NetworkFirewallPolicyDecryptionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (i *NetworkFirewallPolicyDecryptionRule) ToNetworkFirewallPolicyDecryptionRuleOutput() NetworkFirewallPolicyDecryptionRuleOutput {
	return i.ToNetworkFirewallPolicyDecryptionRuleOutputWithContext(context.Background())
}

func (i *NetworkFirewallPolicyDecryptionRule) ToNetworkFirewallPolicyDecryptionRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyDecryptionRuleOutput)
}

// NetworkFirewallPolicyDecryptionRuleArrayInput is an input type that accepts NetworkFirewallPolicyDecryptionRuleArray and NetworkFirewallPolicyDecryptionRuleArrayOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyDecryptionRuleArrayInput` via:
//
//	NetworkFirewallPolicyDecryptionRuleArray{ NetworkFirewallPolicyDecryptionRuleArgs{...} }
type NetworkFirewallPolicyDecryptionRuleArrayInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyDecryptionRuleArrayOutput() NetworkFirewallPolicyDecryptionRuleArrayOutput
	ToNetworkFirewallPolicyDecryptionRuleArrayOutputWithContext(context.Context) NetworkFirewallPolicyDecryptionRuleArrayOutput
}

type NetworkFirewallPolicyDecryptionRuleArray []NetworkFirewallPolicyDecryptionRuleInput

func (NetworkFirewallPolicyDecryptionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyDecryptionRuleArray) ToNetworkFirewallPolicyDecryptionRuleArrayOutput() NetworkFirewallPolicyDecryptionRuleArrayOutput {
	return i.ToNetworkFirewallPolicyDecryptionRuleArrayOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyDecryptionRuleArray) ToNetworkFirewallPolicyDecryptionRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyDecryptionRuleArrayOutput)
}

// NetworkFirewallPolicyDecryptionRuleMapInput is an input type that accepts NetworkFirewallPolicyDecryptionRuleMap and NetworkFirewallPolicyDecryptionRuleMapOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyDecryptionRuleMapInput` via:
//
//	NetworkFirewallPolicyDecryptionRuleMap{ "key": NetworkFirewallPolicyDecryptionRuleArgs{...} }
type NetworkFirewallPolicyDecryptionRuleMapInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyDecryptionRuleMapOutput() NetworkFirewallPolicyDecryptionRuleMapOutput
	ToNetworkFirewallPolicyDecryptionRuleMapOutputWithContext(context.Context) NetworkFirewallPolicyDecryptionRuleMapOutput
}

type NetworkFirewallPolicyDecryptionRuleMap map[string]NetworkFirewallPolicyDecryptionRuleInput

func (NetworkFirewallPolicyDecryptionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (i NetworkFirewallPolicyDecryptionRuleMap) ToNetworkFirewallPolicyDecryptionRuleMapOutput() NetworkFirewallPolicyDecryptionRuleMapOutput {
	return i.ToNetworkFirewallPolicyDecryptionRuleMapOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyDecryptionRuleMap) ToNetworkFirewallPolicyDecryptionRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyDecryptionRuleMapOutput)
}

type NetworkFirewallPolicyDecryptionRuleOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyDecryptionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyDecryptionRuleOutput) ToNetworkFirewallPolicyDecryptionRuleOutput() NetworkFirewallPolicyDecryptionRuleOutput {
	return o
}

func (o NetworkFirewallPolicyDecryptionRuleOutput) ToNetworkFirewallPolicyDecryptionRuleOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleOutput {
	return o
}

// (Updatable) Action:
// * NO_DECRYPT - Matching traffic is not decrypted.
// * DECRYPT - Matching traffic is decrypted with the specified `secret` according to the specified `decryptionProfile`.
func (o NetworkFirewallPolicyDecryptionRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// (Updatable) Match criteria used in Decryption Rule used on the firewall policy rules. The resources mentioned must already be present in the policy before being referenced in the rule.
func (o NetworkFirewallPolicyDecryptionRuleOutput) Condition() NetworkFirewallPolicyDecryptionRuleConditionOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) NetworkFirewallPolicyDecryptionRuleConditionOutput {
		return v.Condition
	}).(NetworkFirewallPolicyDecryptionRuleConditionOutput)
}

// (Updatable) The name of the decryption profile to use.
func (o NetworkFirewallPolicyDecryptionRuleOutput) DecryptionProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringPtrOutput { return v.DecryptionProfile }).(pulumi.StringPtrOutput)
}

// Name for the decryption rule, must be unique within the policy.
func (o NetworkFirewallPolicyDecryptionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique Network Firewall Policy identifier
func (o NetworkFirewallPolicyDecryptionRuleOutput) NetworkFirewallPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringOutput { return v.NetworkFirewallPolicyId }).(pulumi.StringOutput)
}

// OCID of the Network Firewall Policy this decryption rule belongs to.
func (o NetworkFirewallPolicyDecryptionRuleOutput) ParentResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringOutput { return v.ParentResourceId }).(pulumi.StringOutput)
}

// (Updatable) An object which defines the position of the rule. Only one of `afterRule` or `beforeRule` should be provided.
func (o NetworkFirewallPolicyDecryptionRuleOutput) Position() NetworkFirewallPolicyDecryptionRulePositionOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) NetworkFirewallPolicyDecryptionRulePositionOutput {
		return v.Position
	}).(NetworkFirewallPolicyDecryptionRulePositionOutput)
}

func (o NetworkFirewallPolicyDecryptionRuleOutput) PriorityOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringPtrOutput { return v.PriorityOrder }).(pulumi.StringPtrOutput)
}

// (Updatable) The name of a mapped secret. Its `type` must match that of the specified decryption profile.
func (o NetworkFirewallPolicyDecryptionRuleOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyDecryptionRule) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

type NetworkFirewallPolicyDecryptionRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyDecryptionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyDecryptionRuleArrayOutput) ToNetworkFirewallPolicyDecryptionRuleArrayOutput() NetworkFirewallPolicyDecryptionRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyDecryptionRuleArrayOutput) ToNetworkFirewallPolicyDecryptionRuleArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleArrayOutput {
	return o
}

func (o NetworkFirewallPolicyDecryptionRuleArrayOutput) Index(i pulumi.IntInput) NetworkFirewallPolicyDecryptionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyDecryptionRule {
		return vs[0].([]*NetworkFirewallPolicyDecryptionRule)[vs[1].(int)]
	}).(NetworkFirewallPolicyDecryptionRuleOutput)
}

type NetworkFirewallPolicyDecryptionRuleMapOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyDecryptionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyDecryptionRule)(nil)).Elem()
}

func (o NetworkFirewallPolicyDecryptionRuleMapOutput) ToNetworkFirewallPolicyDecryptionRuleMapOutput() NetworkFirewallPolicyDecryptionRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyDecryptionRuleMapOutput) ToNetworkFirewallPolicyDecryptionRuleMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyDecryptionRuleMapOutput {
	return o
}

func (o NetworkFirewallPolicyDecryptionRuleMapOutput) MapIndex(k pulumi.StringInput) NetworkFirewallPolicyDecryptionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyDecryptionRule {
		return vs[0].(map[string]*NetworkFirewallPolicyDecryptionRule)[vs[1].(string)]
	}).(NetworkFirewallPolicyDecryptionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyDecryptionRuleInput)(nil)).Elem(), &NetworkFirewallPolicyDecryptionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyDecryptionRuleArrayInput)(nil)).Elem(), NetworkFirewallPolicyDecryptionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyDecryptionRuleMapInput)(nil)).Elem(), NetworkFirewallPolicyDecryptionRuleMap{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyDecryptionRuleOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyDecryptionRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyDecryptionRuleMapOutput{})
}
