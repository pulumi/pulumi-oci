// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfirewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Network Firewall Policy Mapped Secret resource in Oracle Cloud Infrastructure Network Firewall service.
//
// Creates a new Mapped Secret for the Network Firewall Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/networkfirewall"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkfirewall.NewNetworkFirewallPolicyMappedSecret(ctx, "test_network_firewall_policy_mapped_secret", &networkfirewall.NetworkFirewallPolicyMappedSecretArgs{
//				Name:                    pulumi.Any(networkFirewallPolicyMappedSecretName),
//				NetworkFirewallPolicyId: pulumi.Any(testNetworkFirewallPolicy.Id),
//				Source:                  pulumi.Any(networkFirewallPolicyMappedSecretSource),
//				Type:                    pulumi.Any(networkFirewallPolicyMappedSecretType),
//				VaultSecretId:           pulumi.Any(testSecret.Id),
//				VersionNumber:           pulumi.Any(networkFirewallPolicyMappedSecretVersionNumber),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NetworkFirewallPolicyMappedSecrets can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import oci:NetworkFirewall/networkFirewallPolicyMappedSecret:NetworkFirewallPolicyMappedSecret test_network_firewall_policy_mapped_secret "networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}"
// ```
type NetworkFirewallPolicyMappedSecret struct {
	pulumi.CustomResourceState

	// Unique name to identify the group of urls to be used in the policy rules.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringOutput `pulumi:"networkFirewallPolicyId"`
	// OCID of the Network Firewall Policy this Mapped Secret belongs to.
	ParentResourceId pulumi.StringOutput `pulumi:"parentResourceId"`
	// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
	Source pulumi.StringOutput `pulumi:"source"`
	// Type of the secrets mapped based on the policy.
	// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
	// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
	Type pulumi.StringOutput `pulumi:"type"`
	// (Updatable) OCID for the Vault Secret to be used.
	VaultSecretId pulumi.StringOutput `pulumi:"vaultSecretId"`
	// (Updatable) Version number of the secret to be used.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VersionNumber pulumi.IntOutput `pulumi:"versionNumber"`
}

// NewNetworkFirewallPolicyMappedSecret registers a new resource with the given unique name, arguments, and options.
func NewNetworkFirewallPolicyMappedSecret(ctx *pulumi.Context,
	name string, args *NetworkFirewallPolicyMappedSecretArgs, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyMappedSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkFirewallPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkFirewallPolicyId'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VaultSecretId == nil {
		return nil, errors.New("invalid value for required argument 'VaultSecretId'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkFirewallPolicyMappedSecret
	err := ctx.RegisterResource("oci:NetworkFirewall/networkFirewallPolicyMappedSecret:NetworkFirewallPolicyMappedSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkFirewallPolicyMappedSecret gets an existing NetworkFirewallPolicyMappedSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkFirewallPolicyMappedSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkFirewallPolicyMappedSecretState, opts ...pulumi.ResourceOption) (*NetworkFirewallPolicyMappedSecret, error) {
	var resource NetworkFirewallPolicyMappedSecret
	err := ctx.ReadResource("oci:NetworkFirewall/networkFirewallPolicyMappedSecret:NetworkFirewallPolicyMappedSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkFirewallPolicyMappedSecret resources.
type networkFirewallPolicyMappedSecretState struct {
	// Unique name to identify the group of urls to be used in the policy rules.
	Name *string `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId *string `pulumi:"networkFirewallPolicyId"`
	// OCID of the Network Firewall Policy this Mapped Secret belongs to.
	ParentResourceId *string `pulumi:"parentResourceId"`
	// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
	Source *string `pulumi:"source"`
	// Type of the secrets mapped based on the policy.
	// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
	// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
	Type *string `pulumi:"type"`
	// (Updatable) OCID for the Vault Secret to be used.
	VaultSecretId *string `pulumi:"vaultSecretId"`
	// (Updatable) Version number of the secret to be used.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VersionNumber *int `pulumi:"versionNumber"`
}

type NetworkFirewallPolicyMappedSecretState struct {
	// Unique name to identify the group of urls to be used in the policy rules.
	Name pulumi.StringPtrInput
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringPtrInput
	// OCID of the Network Firewall Policy this Mapped Secret belongs to.
	ParentResourceId pulumi.StringPtrInput
	// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
	Source pulumi.StringPtrInput
	// Type of the secrets mapped based on the policy.
	// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
	// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
	Type pulumi.StringPtrInput
	// (Updatable) OCID for the Vault Secret to be used.
	VaultSecretId pulumi.StringPtrInput
	// (Updatable) Version number of the secret to be used.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VersionNumber pulumi.IntPtrInput
}

func (NetworkFirewallPolicyMappedSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyMappedSecretState)(nil)).Elem()
}

type networkFirewallPolicyMappedSecretArgs struct {
	// Unique name to identify the group of urls to be used in the policy rules.
	Name *string `pulumi:"name"`
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId string `pulumi:"networkFirewallPolicyId"`
	// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
	Source string `pulumi:"source"`
	// Type of the secrets mapped based on the policy.
	// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
	// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
	Type string `pulumi:"type"`
	// (Updatable) OCID for the Vault Secret to be used.
	VaultSecretId string `pulumi:"vaultSecretId"`
	// (Updatable) Version number of the secret to be used.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VersionNumber int `pulumi:"versionNumber"`
}

// The set of arguments for constructing a NetworkFirewallPolicyMappedSecret resource.
type NetworkFirewallPolicyMappedSecretArgs struct {
	// Unique name to identify the group of urls to be used in the policy rules.
	Name pulumi.StringPtrInput
	// Unique Network Firewall Policy identifier
	NetworkFirewallPolicyId pulumi.StringInput
	// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
	Source pulumi.StringInput
	// Type of the secrets mapped based on the policy.
	// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
	// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
	Type pulumi.StringInput
	// (Updatable) OCID for the Vault Secret to be used.
	VaultSecretId pulumi.StringInput
	// (Updatable) Version number of the secret to be used.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VersionNumber pulumi.IntInput
}

func (NetworkFirewallPolicyMappedSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkFirewallPolicyMappedSecretArgs)(nil)).Elem()
}

type NetworkFirewallPolicyMappedSecretInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyMappedSecretOutput() NetworkFirewallPolicyMappedSecretOutput
	ToNetworkFirewallPolicyMappedSecretOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretOutput
}

func (*NetworkFirewallPolicyMappedSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (i *NetworkFirewallPolicyMappedSecret) ToNetworkFirewallPolicyMappedSecretOutput() NetworkFirewallPolicyMappedSecretOutput {
	return i.ToNetworkFirewallPolicyMappedSecretOutputWithContext(context.Background())
}

func (i *NetworkFirewallPolicyMappedSecret) ToNetworkFirewallPolicyMappedSecretOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyMappedSecretOutput)
}

// NetworkFirewallPolicyMappedSecretArrayInput is an input type that accepts NetworkFirewallPolicyMappedSecretArray and NetworkFirewallPolicyMappedSecretArrayOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyMappedSecretArrayInput` via:
//
//	NetworkFirewallPolicyMappedSecretArray{ NetworkFirewallPolicyMappedSecretArgs{...} }
type NetworkFirewallPolicyMappedSecretArrayInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyMappedSecretArrayOutput() NetworkFirewallPolicyMappedSecretArrayOutput
	ToNetworkFirewallPolicyMappedSecretArrayOutputWithContext(context.Context) NetworkFirewallPolicyMappedSecretArrayOutput
}

type NetworkFirewallPolicyMappedSecretArray []NetworkFirewallPolicyMappedSecretInput

func (NetworkFirewallPolicyMappedSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (i NetworkFirewallPolicyMappedSecretArray) ToNetworkFirewallPolicyMappedSecretArrayOutput() NetworkFirewallPolicyMappedSecretArrayOutput {
	return i.ToNetworkFirewallPolicyMappedSecretArrayOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyMappedSecretArray) ToNetworkFirewallPolicyMappedSecretArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyMappedSecretArrayOutput)
}

// NetworkFirewallPolicyMappedSecretMapInput is an input type that accepts NetworkFirewallPolicyMappedSecretMap and NetworkFirewallPolicyMappedSecretMapOutput values.
// You can construct a concrete instance of `NetworkFirewallPolicyMappedSecretMapInput` via:
//
//	NetworkFirewallPolicyMappedSecretMap{ "key": NetworkFirewallPolicyMappedSecretArgs{...} }
type NetworkFirewallPolicyMappedSecretMapInput interface {
	pulumi.Input

	ToNetworkFirewallPolicyMappedSecretMapOutput() NetworkFirewallPolicyMappedSecretMapOutput
	ToNetworkFirewallPolicyMappedSecretMapOutputWithContext(context.Context) NetworkFirewallPolicyMappedSecretMapOutput
}

type NetworkFirewallPolicyMappedSecretMap map[string]NetworkFirewallPolicyMappedSecretInput

func (NetworkFirewallPolicyMappedSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (i NetworkFirewallPolicyMappedSecretMap) ToNetworkFirewallPolicyMappedSecretMapOutput() NetworkFirewallPolicyMappedSecretMapOutput {
	return i.ToNetworkFirewallPolicyMappedSecretMapOutputWithContext(context.Background())
}

func (i NetworkFirewallPolicyMappedSecretMap) ToNetworkFirewallPolicyMappedSecretMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkFirewallPolicyMappedSecretMapOutput)
}

type NetworkFirewallPolicyMappedSecretOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyMappedSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (o NetworkFirewallPolicyMappedSecretOutput) ToNetworkFirewallPolicyMappedSecretOutput() NetworkFirewallPolicyMappedSecretOutput {
	return o
}

func (o NetworkFirewallPolicyMappedSecretOutput) ToNetworkFirewallPolicyMappedSecretOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretOutput {
	return o
}

// Unique name to identify the group of urls to be used in the policy rules.
func (o NetworkFirewallPolicyMappedSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique Network Firewall Policy identifier
func (o NetworkFirewallPolicyMappedSecretOutput) NetworkFirewallPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.NetworkFirewallPolicyId }).(pulumi.StringOutput)
}

// OCID of the Network Firewall Policy this Mapped Secret belongs to.
func (o NetworkFirewallPolicyMappedSecretOutput) ParentResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.ParentResourceId }).(pulumi.StringOutput)
}

// Source of the secrets, where the secrets are stored. The only accepted value is `OCI_VAULT`
func (o NetworkFirewallPolicyMappedSecretOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Type of the secrets mapped based on the policy.
// * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
// * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
func (o NetworkFirewallPolicyMappedSecretOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// (Updatable) OCID for the Vault Secret to be used.
func (o NetworkFirewallPolicyMappedSecretOutput) VaultSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.StringOutput { return v.VaultSecretId }).(pulumi.StringOutput)
}

// (Updatable) Version number of the secret to be used.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o NetworkFirewallPolicyMappedSecretOutput) VersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkFirewallPolicyMappedSecret) pulumi.IntOutput { return v.VersionNumber }).(pulumi.IntOutput)
}

type NetworkFirewallPolicyMappedSecretArrayOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyMappedSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (o NetworkFirewallPolicyMappedSecretArrayOutput) ToNetworkFirewallPolicyMappedSecretArrayOutput() NetworkFirewallPolicyMappedSecretArrayOutput {
	return o
}

func (o NetworkFirewallPolicyMappedSecretArrayOutput) ToNetworkFirewallPolicyMappedSecretArrayOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretArrayOutput {
	return o
}

func (o NetworkFirewallPolicyMappedSecretArrayOutput) Index(i pulumi.IntInput) NetworkFirewallPolicyMappedSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyMappedSecret {
		return vs[0].([]*NetworkFirewallPolicyMappedSecret)[vs[1].(int)]
	}).(NetworkFirewallPolicyMappedSecretOutput)
}

type NetworkFirewallPolicyMappedSecretMapOutput struct{ *pulumi.OutputState }

func (NetworkFirewallPolicyMappedSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkFirewallPolicyMappedSecret)(nil)).Elem()
}

func (o NetworkFirewallPolicyMappedSecretMapOutput) ToNetworkFirewallPolicyMappedSecretMapOutput() NetworkFirewallPolicyMappedSecretMapOutput {
	return o
}

func (o NetworkFirewallPolicyMappedSecretMapOutput) ToNetworkFirewallPolicyMappedSecretMapOutputWithContext(ctx context.Context) NetworkFirewallPolicyMappedSecretMapOutput {
	return o
}

func (o NetworkFirewallPolicyMappedSecretMapOutput) MapIndex(k pulumi.StringInput) NetworkFirewallPolicyMappedSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkFirewallPolicyMappedSecret {
		return vs[0].(map[string]*NetworkFirewallPolicyMappedSecret)[vs[1].(string)]
	}).(NetworkFirewallPolicyMappedSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyMappedSecretInput)(nil)).Elem(), &NetworkFirewallPolicyMappedSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyMappedSecretArrayInput)(nil)).Elem(), NetworkFirewallPolicyMappedSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkFirewallPolicyMappedSecretMapInput)(nil)).Elem(), NetworkFirewallPolicyMappedSecretMap{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyMappedSecretOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyMappedSecretArrayOutput{})
	pulumi.RegisterOutputType(NetworkFirewallPolicyMappedSecretMapOutput{})
}
