// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkloadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Backend Set resource in Oracle Cloud Infrastructure Network Load Balancer service.
//
// Adds a backend set to a network load balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/networkloadbalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := networkloadbalancer.NewBackendSet(ctx, "test_backend_set", &networkloadbalancer.BackendSetArgs{
//				HealthChecker: &networkloadbalancer.BackendSetHealthCheckerArgs{
//					Protocol: pulumi.Any(backendSetHealthCheckerProtocol),
//					Dns: &networkloadbalancer.BackendSetHealthCheckerDnsArgs{
//						DomainName:        pulumi.Any(testDomain.Name),
//						QueryClass:        pulumi.Any(backendSetHealthCheckerDnsQueryClass),
//						QueryType:         pulumi.Any(backendSetHealthCheckerDnsQueryType),
//						Rcodes:            pulumi.Any(backendSetHealthCheckerDnsRcodes),
//						TransportProtocol: pulumi.Any(backendSetHealthCheckerDnsTransportProtocol),
//					},
//					IntervalInMillis:  pulumi.Any(backendSetHealthCheckerIntervalInMillis),
//					Port:              pulumi.Any(backendSetHealthCheckerPort),
//					RequestData:       pulumi.Any(backendSetHealthCheckerRequestData),
//					ResponseBodyRegex: pulumi.Any(backendSetHealthCheckerResponseBodyRegex),
//					ResponseData:      pulumi.Any(backendSetHealthCheckerResponseData),
//					Retries:           pulumi.Any(backendSetHealthCheckerRetries),
//					ReturnCode:        pulumi.Any(backendSetHealthCheckerReturnCode),
//					TimeoutInMillis:   pulumi.Any(backendSetHealthCheckerTimeoutInMillis),
//					UrlPath:           pulumi.Any(backendSetHealthCheckerUrlPath),
//				},
//				Name:                                    pulumi.Any(backendSetName),
//				NetworkLoadBalancerId:                   pulumi.Any(testNetworkLoadBalancer.Id),
//				Policy:                                  pulumi.Any(backendSetPolicy),
//				AreOperationallyActiveBackendsPreferred: pulumi.Any(backendSetAreOperationallyActiveBackendsPreferred),
//				IpVersion:                               pulumi.Any(backendSetIpVersion),
//				IsFailOpen:                              pulumi.Any(backendSetIsFailOpen),
//				IsInstantFailoverEnabled:                pulumi.Any(backendSetIsInstantFailoverEnabled),
//				IsInstantFailoverTcpResetEnabled:        pulumi.Any(backendSetIsInstantFailoverTcpResetEnabled),
//				IsPreserveSource:                        pulumi.Any(backendSetIsPreserveSource),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BackendSets can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:NetworkLoadBalancer/backendSet:BackendSet test_backend_set "networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}"
// ```
type BackendSet struct {
	pulumi.CustomResourceState

	// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred pulumi.BoolOutput `pulumi:"areOperationallyActiveBackendsPreferred"`
	// (Updatable) An array of backends to be associated with the backend set.
	Backends BackendSetBackendArrayOutput `pulumi:"backends"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
	HealthChecker BackendSetHealthCheckerOutput `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolOutput `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolOutput `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled pulumi.BoolOutput `pulumi:"isInstantFailoverTcpResetEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolOutput `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringOutput `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringOutput `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewBackendSet registers a new resource with the given unique name, arguments, and options.
func NewBackendSet(ctx *pulumi.Context,
	name string, args *BackendSetArgs, opts ...pulumi.ResourceOption) (*BackendSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthChecker == nil {
		return nil, errors.New("invalid value for required argument 'HealthChecker'")
	}
	if args.NetworkLoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkLoadBalancerId'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendSet
	err := ctx.RegisterResource("oci:NetworkLoadBalancer/backendSet:BackendSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendSet gets an existing BackendSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendSetState, opts ...pulumi.ResourceOption) (*BackendSet, error) {
	var resource BackendSet
	err := ctx.ReadResource("oci:NetworkLoadBalancer/backendSet:BackendSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendSet resources.
type backendSetState struct {
	// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred *bool `pulumi:"areOperationallyActiveBackendsPreferred"`
	// (Updatable) An array of backends to be associated with the backend set.
	Backends []BackendSetBackend `pulumi:"backends"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
	HealthChecker *BackendSetHealthChecker `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion *string `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen *bool `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled *bool `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled *bool `pulumi:"isInstantFailoverTcpResetEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource *bool `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy *string `pulumi:"policy"`
}

type BackendSetState struct {
	// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred pulumi.BoolPtrInput
	// (Updatable) An array of backends to be associated with the backend set.
	Backends BackendSetBackendArrayInput
	// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
	HealthChecker BackendSetHealthCheckerPtrInput
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringPtrInput
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolPtrInput
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolPtrInput
	// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled pulumi.BoolPtrInput
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolPtrInput
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringPtrInput
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringPtrInput
}

func (BackendSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendSetState)(nil)).Elem()
}

type backendSetArgs struct {
	// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred *bool `pulumi:"areOperationallyActiveBackendsPreferred"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
	HealthChecker BackendSetHealthChecker `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion *string `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen *bool `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled *bool `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled *bool `pulumi:"isInstantFailoverTcpResetEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource *bool `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a BackendSet resource.
type BackendSetArgs struct {
	// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred pulumi.BoolPtrInput
	// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
	HealthChecker BackendSetHealthCheckerInput
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringPtrInput
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolPtrInput
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolPtrInput
	// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled pulumi.BoolPtrInput
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolPtrInput
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringInput
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringInput
}

func (BackendSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendSetArgs)(nil)).Elem()
}

type BackendSetInput interface {
	pulumi.Input

	ToBackendSetOutput() BackendSetOutput
	ToBackendSetOutputWithContext(ctx context.Context) BackendSetOutput
}

func (*BackendSet) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendSet)(nil)).Elem()
}

func (i *BackendSet) ToBackendSetOutput() BackendSetOutput {
	return i.ToBackendSetOutputWithContext(context.Background())
}

func (i *BackendSet) ToBackendSetOutputWithContext(ctx context.Context) BackendSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendSetOutput)
}

// BackendSetArrayInput is an input type that accepts BackendSetArray and BackendSetArrayOutput values.
// You can construct a concrete instance of `BackendSetArrayInput` via:
//
//	BackendSetArray{ BackendSetArgs{...} }
type BackendSetArrayInput interface {
	pulumi.Input

	ToBackendSetArrayOutput() BackendSetArrayOutput
	ToBackendSetArrayOutputWithContext(context.Context) BackendSetArrayOutput
}

type BackendSetArray []BackendSetInput

func (BackendSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendSet)(nil)).Elem()
}

func (i BackendSetArray) ToBackendSetArrayOutput() BackendSetArrayOutput {
	return i.ToBackendSetArrayOutputWithContext(context.Background())
}

func (i BackendSetArray) ToBackendSetArrayOutputWithContext(ctx context.Context) BackendSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendSetArrayOutput)
}

// BackendSetMapInput is an input type that accepts BackendSetMap and BackendSetMapOutput values.
// You can construct a concrete instance of `BackendSetMapInput` via:
//
//	BackendSetMap{ "key": BackendSetArgs{...} }
type BackendSetMapInput interface {
	pulumi.Input

	ToBackendSetMapOutput() BackendSetMapOutput
	ToBackendSetMapOutputWithContext(context.Context) BackendSetMapOutput
}

type BackendSetMap map[string]BackendSetInput

func (BackendSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendSet)(nil)).Elem()
}

func (i BackendSetMap) ToBackendSetMapOutput() BackendSetMapOutput {
	return i.ToBackendSetMapOutputWithContext(context.Background())
}

func (i BackendSetMap) ToBackendSetMapOutputWithContext(ctx context.Context) BackendSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendSetMapOutput)
}

type BackendSetOutput struct{ *pulumi.OutputState }

func (BackendSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendSet)(nil)).Elem()
}

func (o BackendSetOutput) ToBackendSetOutput() BackendSetOutput {
	return o
}

func (o BackendSetOutput) ToBackendSetOutputWithContext(ctx context.Context) BackendSetOutput {
	return o
}

// (Updatable) If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
func (o BackendSetOutput) AreOperationallyActiveBackendsPreferred() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.BoolOutput { return v.AreOperationallyActiveBackendsPreferred }).(pulumi.BoolOutput)
}

// (Updatable) An array of backends to be associated with the backend set.
func (o BackendSetOutput) Backends() BackendSetBackendArrayOutput {
	return o.ApplyT(func(v *BackendSet) BackendSetBackendArrayOutput { return v.Backends }).(BackendSetBackendArrayOutput)
}

// (Updatable) The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-policy.htm).
func (o BackendSetOutput) HealthChecker() BackendSetHealthCheckerOutput {
	return o.ApplyT(func(v *BackendSet) BackendSetHealthCheckerOutput { return v.HealthChecker }).(BackendSetHealthCheckerOutput)
}

// (Updatable) IP version associated with the backend set.
func (o BackendSetOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
func (o BackendSetOutput) IsFailOpen() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.BoolOutput { return v.IsFailOpen }).(pulumi.BoolOutput)
}

// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
func (o BackendSetOutput) IsInstantFailoverEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.BoolOutput { return v.IsInstantFailoverEnabled }).(pulumi.BoolOutput)
}

// (Updatable) If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
func (o BackendSetOutput) IsInstantFailoverTcpResetEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.BoolOutput { return v.IsInstantFailoverTcpResetEnabled }).(pulumi.BoolOutput)
}

// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
func (o BackendSetOutput) IsPreserveSource() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.BoolOutput { return v.IsPreserveSource }).(pulumi.BoolOutput)
}

// A user-friendly name for the backend set that must be unique and cannot be changed.
//
// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
//
// Example: `exampleBackendSet`
func (o BackendSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
func (o BackendSetOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.StringOutput { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE“
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o BackendSetOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendSet) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type BackendSetArrayOutput struct{ *pulumi.OutputState }

func (BackendSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendSet)(nil)).Elem()
}

func (o BackendSetArrayOutput) ToBackendSetArrayOutput() BackendSetArrayOutput {
	return o
}

func (o BackendSetArrayOutput) ToBackendSetArrayOutputWithContext(ctx context.Context) BackendSetArrayOutput {
	return o
}

func (o BackendSetArrayOutput) Index(i pulumi.IntInput) BackendSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendSet {
		return vs[0].([]*BackendSet)[vs[1].(int)]
	}).(BackendSetOutput)
}

type BackendSetMapOutput struct{ *pulumi.OutputState }

func (BackendSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendSet)(nil)).Elem()
}

func (o BackendSetMapOutput) ToBackendSetMapOutput() BackendSetMapOutput {
	return o
}

func (o BackendSetMapOutput) ToBackendSetMapOutputWithContext(ctx context.Context) BackendSetMapOutput {
	return o
}

func (o BackendSetMapOutput) MapIndex(k pulumi.StringInput) BackendSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendSet {
		return vs[0].(map[string]*BackendSet)[vs[1].(string)]
	}).(BackendSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendSetInput)(nil)).Elem(), &BackendSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendSetArrayInput)(nil)).Elem(), BackendSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendSetMapInput)(nil)).Elem(), BackendSetMap{})
	pulumi.RegisterOutputType(BackendSetOutput{})
	pulumi.RegisterOutputType(BackendSetArrayOutput{})
	pulumi.RegisterOutputType(BackendSetMapOutput{})
}
