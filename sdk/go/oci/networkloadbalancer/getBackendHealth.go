// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkloadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Backend Health resource in Oracle Cloud Infrastructure Network Load Balancer service.
//
// Retrieves the current health status of the specified backend server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/NetworkLoadBalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := NetworkLoadBalancer.GetBackendHealth(ctx, &networkloadbalancer.GetBackendHealthArgs{
//				BackendName:           testBackend.Name,
//				BackendSetName:        testBackendSet.Name,
//				NetworkLoadBalancerId: testNetworkLoadBalancer.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBackendHealth(ctx *pulumi.Context, args *GetBackendHealthArgs, opts ...pulumi.InvokeOption) (*GetBackendHealthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBackendHealthResult
	err := ctx.Invoke("oci:NetworkLoadBalancer/getBackendHealth:getBackendHealth", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackendHealth.
type GetBackendHealthArgs struct {
	// The name of the backend server to retrieve health status for. If the backend was created with an explicitly specified name, that name should be used here. If the backend was created without explicitly specifying the name, but was created using ipAddress, this is specified as <ipAddress>:<port>. If the backend was created without explicitly specifying the name, but was created using targetId, this is specified as <targetId>:<port>.  Example: `10.0.0.3:8080` or `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:8080`
	BackendName string `pulumi:"backendName"`
	// The name of the backend set associated with the backend server for which to retrieve the health status.  Example: `exampleBackendSet`
	BackendSetName string `pulumi:"backendSetName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
}

// A collection of values returned by getBackendHealth.
type GetBackendHealthResult struct {
	BackendName    string `pulumi:"backendName"`
	BackendSetName string `pulumi:"backendSetName"`
	// A list of the most recent health check results returned for the specified backend server.
	HealthCheckResults []GetBackendHealthHealthCheckResult `pulumi:"healthCheckResults"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string `pulumi:"id"`
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// The general health status of the specified backend server.
	// *   **OK:**  All health check probes return `OK`
	// *   **WARNING:** At least one of the health check probes does not return `OK`
	// *   **CRITICAL:** None of the health check probes return `OK`. *
	// *   **UNKNOWN:** One of the health checks probes return `UNKNOWN`,
	// *   or the system is unable to retrieve metrics at this time.
	Status string `pulumi:"status"`
}

func GetBackendHealthOutput(ctx *pulumi.Context, args GetBackendHealthOutputArgs, opts ...pulumi.InvokeOption) GetBackendHealthResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBackendHealthResultOutput, error) {
			args := v.(GetBackendHealthArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetBackendHealthResult
			secret, err := ctx.InvokePackageRaw("oci:NetworkLoadBalancer/getBackendHealth:getBackendHealth", args, &rv, "", opts...)
			if err != nil {
				return GetBackendHealthResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetBackendHealthResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetBackendHealthResultOutput), nil
			}
			return output, nil
		}).(GetBackendHealthResultOutput)
}

// A collection of arguments for invoking getBackendHealth.
type GetBackendHealthOutputArgs struct {
	// The name of the backend server to retrieve health status for. If the backend was created with an explicitly specified name, that name should be used here. If the backend was created without explicitly specifying the name, but was created using ipAddress, this is specified as <ipAddress>:<port>. If the backend was created without explicitly specifying the name, but was created using targetId, this is specified as <targetId>:<port>.  Example: `10.0.0.3:8080` or `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:8080`
	BackendName pulumi.StringInput `pulumi:"backendName"`
	// The name of the backend set associated with the backend server for which to retrieve the health status.  Example: `exampleBackendSet`
	BackendSetName pulumi.StringInput `pulumi:"backendSetName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
}

func (GetBackendHealthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthArgs)(nil)).Elem()
}

// A collection of values returned by getBackendHealth.
type GetBackendHealthResultOutput struct{ *pulumi.OutputState }

func (GetBackendHealthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthResult)(nil)).Elem()
}

func (o GetBackendHealthResultOutput) ToGetBackendHealthResultOutput() GetBackendHealthResultOutput {
	return o
}

func (o GetBackendHealthResultOutput) ToGetBackendHealthResultOutputWithContext(ctx context.Context) GetBackendHealthResultOutput {
	return o
}

func (o GetBackendHealthResultOutput) BackendName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthResult) string { return v.BackendName }).(pulumi.StringOutput)
}

func (o GetBackendHealthResultOutput) BackendSetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthResult) string { return v.BackendSetName }).(pulumi.StringOutput)
}

// A list of the most recent health check results returned for the specified backend server.
func (o GetBackendHealthResultOutput) HealthCheckResults() GetBackendHealthHealthCheckResultArrayOutput {
	return o.ApplyT(func(v GetBackendHealthResult) []GetBackendHealthHealthCheckResult { return v.HealthCheckResults }).(GetBackendHealthHealthCheckResultArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBackendHealthResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBackendHealthResultOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthResult) string { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// The general health status of the specified backend server.
// *   **OK:**  All health check probes return `OK`
// *   **WARNING:** At least one of the health check probes does not return `OK`
// *   **CRITICAL:** None of the health check probes return `OK`. *
// *   **UNKNOWN:** One of the health checks probes return `UNKNOWN`,
// *   or the system is unable to retrieve metrics at this time.
func (o GetBackendHealthResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBackendHealthResultOutput{})
}
