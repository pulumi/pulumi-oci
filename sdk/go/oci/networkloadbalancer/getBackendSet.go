// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkloadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Backend Set resource in Oracle Cloud Infrastructure Network Load Balancer service.
//
// Retrieves the configuration information for the specified backend set.
func LookupBackendSet(ctx *pulumi.Context, args *LookupBackendSetArgs, opts ...pulumi.InvokeOption) (*LookupBackendSetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackendSetResult
	err := ctx.Invoke("oci:NetworkLoadBalancer/getBackendSet:getBackendSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackendSet.
type LookupBackendSetArgs struct {
	// The name of the backend set to retrieve.  Example: `exampleBackendSet`
	BackendSetName string `pulumi:"backendSetName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
}

// A collection of values returned by getBackendSet.
type LookupBackendSetResult struct {
	// If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
	AreOperationallyActiveBackendsPreferred bool   `pulumi:"areOperationallyActiveBackendsPreferred"`
	BackendSetName                          string `pulumi:"backendSetName"`
	// An array of backends.
	Backends []GetBackendSetBackend `pulumi:"backends"`
	// The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-management.htm).
	HealthCheckers []GetBackendSetHealthChecker `pulumi:"healthCheckers"`
	Id             string                       `pulumi:"id"`
	// IP version associated with the backend set.
	IpVersion string `pulumi:"ipVersion"`
	// If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen bool `pulumi:"isFailOpen"`
	// If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled bool `pulumi:"isInstantFailoverEnabled"`
	// If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
	IsInstantFailoverTcpResetEnabled bool `pulumi:"isInstantFailoverTcpResetEnabled"`
	// If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource bool `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	Name                  string `pulumi:"name"`
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// The network load balancer policy for the backend set.  Example: `FIVE_TUPLE`
	Policy string `pulumi:"policy"`
}

func LookupBackendSetOutput(ctx *pulumi.Context, args LookupBackendSetOutputArgs, opts ...pulumi.InvokeOption) LookupBackendSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBackendSetResultOutput, error) {
			args := v.(LookupBackendSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:NetworkLoadBalancer/getBackendSet:getBackendSet", args, LookupBackendSetResultOutput{}, options).(LookupBackendSetResultOutput), nil
		}).(LookupBackendSetResultOutput)
}

// A collection of arguments for invoking getBackendSet.
type LookupBackendSetOutputArgs struct {
	// The name of the backend set to retrieve.  Example: `exampleBackendSet`
	BackendSetName pulumi.StringInput `pulumi:"backendSetName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringInput `pulumi:"networkLoadBalancerId"`
}

func (LookupBackendSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendSetArgs)(nil)).Elem()
}

// A collection of values returned by getBackendSet.
type LookupBackendSetResultOutput struct{ *pulumi.OutputState }

func (LookupBackendSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendSetResult)(nil)).Elem()
}

func (o LookupBackendSetResultOutput) ToLookupBackendSetResultOutput() LookupBackendSetResultOutput {
	return o
}

func (o LookupBackendSetResultOutput) ToLookupBackendSetResultOutputWithContext(ctx context.Context) LookupBackendSetResultOutput {
	return o
}

// If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
func (o LookupBackendSetResultOutput) AreOperationallyActiveBackendsPreferred() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendSetResult) bool { return v.AreOperationallyActiveBackendsPreferred }).(pulumi.BoolOutput)
}

func (o LookupBackendSetResultOutput) BackendSetName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.BackendSetName }).(pulumi.StringOutput)
}

// An array of backends.
func (o LookupBackendSetResultOutput) Backends() GetBackendSetBackendArrayOutput {
	return o.ApplyT(func(v LookupBackendSetResult) []GetBackendSetBackend { return v.Backends }).(GetBackendSetBackendArrayOutput)
}

// The health check policy configuration. For more information, see [Editing Network Load Balancer Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/NetworkLoadBalancer/HealthCheckPolicies/update-health-check-management.htm).
func (o LookupBackendSetResultOutput) HealthCheckers() GetBackendSetHealthCheckerArrayOutput {
	return o.ApplyT(func(v LookupBackendSetResult) []GetBackendSetHealthChecker { return v.HealthCheckers }).(GetBackendSetHealthCheckerArrayOutput)
}

func (o LookupBackendSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP version associated with the backend set.
func (o LookupBackendSetResultOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.IpVersion }).(pulumi.StringOutput)
}

// If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
func (o LookupBackendSetResultOutput) IsFailOpen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendSetResult) bool { return v.IsFailOpen }).(pulumi.BoolOutput)
}

// If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
func (o LookupBackendSetResultOutput) IsInstantFailoverEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendSetResult) bool { return v.IsInstantFailoverEnabled }).(pulumi.BoolOutput)
}

// If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover. By default, TCP RST is enabled.
func (o LookupBackendSetResultOutput) IsInstantFailoverTcpResetEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendSetResult) bool { return v.IsInstantFailoverTcpResetEnabled }).(pulumi.BoolOutput)
}

// If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
func (o LookupBackendSetResultOutput) IsPreserveSource() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendSetResult) bool { return v.IsPreserveSource }).(pulumi.BoolOutput)
}

// A user-friendly name for the backend set that must be unique and cannot be changed.
func (o LookupBackendSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupBackendSetResultOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// The network load balancer policy for the backend set.  Example: `FIVE_TUPLE`
func (o LookupBackendSetResultOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendSetResult) string { return v.Policy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackendSetResultOutput{})
}
