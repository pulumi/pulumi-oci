// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkloadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Network Load Balancers Backend Sets Unified resource in Oracle Cloud Infrastructure Network Load Balancer service.
//
// Adds a backend set to a network load balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/NetworkLoadBalancer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := NetworkLoadBalancer.NewNetworkLoadBalancersBackendSetsUnified(ctx, "test_network_load_balancers_backend_sets_unified", &NetworkLoadBalancer.NetworkLoadBalancersBackendSetsUnifiedArgs{
//				HealthChecker: &networkloadbalancer.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerArgs{
//					Protocol: pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerProtocol),
//					Dns: &networkloadbalancer.NetworkLoadBalancersBackendSetsUnifiedHealthCheckerDnsArgs{
//						DomainName:        pulumi.Any(testDomain.Name),
//						QueryClass:        pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsQueryClass),
//						QueryType:         pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsQueryType),
//						Rcodes:            pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsRcodes),
//						TransportProtocol: pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerDnsTransportProtocol),
//					},
//					IntervalInMillis:  pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerIntervalInMillis),
//					Port:              pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerPort),
//					RequestData:       pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerRequestData),
//					ResponseBodyRegex: pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerResponseBodyRegex),
//					ResponseData:      pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerResponseData),
//					Retries:           pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerRetries),
//					ReturnCode:        pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerReturnCode),
//					TimeoutInMillis:   pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerTimeoutInMillis),
//					UrlPath:           pulumi.Any(networkLoadBalancersBackendSetsUnifiedHealthCheckerUrlPath),
//				},
//				Name:                  pulumi.Any(networkLoadBalancersBackendSetsUnifiedName),
//				NetworkLoadBalancerId: pulumi.Any(testNetworkLoadBalancer.Id),
//				Policy:                pulumi.Any(networkLoadBalancersBackendSetsUnifiedPolicy),
//				Backends: networkloadbalancer.NetworkLoadBalancersBackendSetsUnifiedBackendArray{
//					&networkloadbalancer.NetworkLoadBalancersBackendSetsUnifiedBackendArgs{
//						Port:      pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsPort),
//						IpAddress: pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsIpAddress),
//						IsBackup:  pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsIsBackup),
//						IsDrain:   pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsIsDrain),
//						IsOffline: pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsIsOffline),
//						Name:      pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsName),
//						TargetId:  pulumi.Any(testTarget.Id),
//						Weight:    pulumi.Any(networkLoadBalancersBackendSetsUnifiedBackendsWeight),
//					},
//				},
//				IpVersion:                pulumi.Any(networkLoadBalancersBackendSetsUnifiedIpVersion),
//				IsFailOpen:               pulumi.Any(networkLoadBalancersBackendSetsUnifiedIsFailOpen),
//				IsInstantFailoverEnabled: pulumi.Any(networkLoadBalancersBackendSetsUnifiedIsInstantFailoverEnabled),
//				IsPreserveSource:         pulumi.Any(networkLoadBalancersBackendSetsUnifiedIsPreserveSource),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NetworkLoadBalancersBackendSetsUnified can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified test_network_load_balancers_backend_sets_unified "networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}"
// ```
type NetworkLoadBalancersBackendSetsUnified struct {
	pulumi.CustomResourceState

	// (Updatable) An array of backends to be associated with the backend set.
	Backends NetworkLoadBalancersBackendSetsUnifiedBackendArrayOutput `pulumi:"backends"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
	HealthChecker NetworkLoadBalancersBackendSetsUnifiedHealthCheckerOutput `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolOutput `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolOutput `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolOutput `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringOutput `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringOutput `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewNetworkLoadBalancersBackendSetsUnified registers a new resource with the given unique name, arguments, and options.
func NewNetworkLoadBalancersBackendSetsUnified(ctx *pulumi.Context,
	name string, args *NetworkLoadBalancersBackendSetsUnifiedArgs, opts ...pulumi.ResourceOption) (*NetworkLoadBalancersBackendSetsUnified, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthChecker == nil {
		return nil, errors.New("invalid value for required argument 'HealthChecker'")
	}
	if args.NetworkLoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkLoadBalancerId'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkLoadBalancersBackendSetsUnified
	err := ctx.RegisterResource("oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkLoadBalancersBackendSetsUnified gets an existing NetworkLoadBalancersBackendSetsUnified resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkLoadBalancersBackendSetsUnified(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkLoadBalancersBackendSetsUnifiedState, opts ...pulumi.ResourceOption) (*NetworkLoadBalancersBackendSetsUnified, error) {
	var resource NetworkLoadBalancersBackendSetsUnified
	err := ctx.ReadResource("oci:NetworkLoadBalancer/networkLoadBalancersBackendSetsUnified:NetworkLoadBalancersBackendSetsUnified", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkLoadBalancersBackendSetsUnified resources.
type networkLoadBalancersBackendSetsUnifiedState struct {
	// (Updatable) An array of backends to be associated with the backend set.
	Backends []NetworkLoadBalancersBackendSetsUnifiedBackend `pulumi:"backends"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
	HealthChecker *NetworkLoadBalancersBackendSetsUnifiedHealthChecker `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion *string `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen *bool `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled *bool `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource *bool `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy *string `pulumi:"policy"`
}

type NetworkLoadBalancersBackendSetsUnifiedState struct {
	// (Updatable) An array of backends to be associated with the backend set.
	Backends NetworkLoadBalancersBackendSetsUnifiedBackendArrayInput
	// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
	HealthChecker NetworkLoadBalancersBackendSetsUnifiedHealthCheckerPtrInput
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringPtrInput
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolPtrInput
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolPtrInput
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolPtrInput
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringPtrInput
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringPtrInput
}

func (NetworkLoadBalancersBackendSetsUnifiedState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkLoadBalancersBackendSetsUnifiedState)(nil)).Elem()
}

type networkLoadBalancersBackendSetsUnifiedArgs struct {
	// (Updatable) An array of backends to be associated with the backend set.
	Backends []NetworkLoadBalancersBackendSetsUnifiedBackend `pulumi:"backends"`
	// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
	HealthChecker NetworkLoadBalancersBackendSetsUnifiedHealthChecker `pulumi:"healthChecker"`
	// (Updatable) IP version associated with the backend set.
	IpVersion *string `pulumi:"ipVersion"`
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen *bool `pulumi:"isFailOpen"`
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled *bool `pulumi:"isInstantFailoverEnabled"`
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource *bool `pulumi:"isPreserveSource"`
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy string `pulumi:"policy"`
}

// The set of arguments for constructing a NetworkLoadBalancersBackendSetsUnified resource.
type NetworkLoadBalancersBackendSetsUnifiedArgs struct {
	// (Updatable) An array of backends to be associated with the backend set.
	Backends NetworkLoadBalancersBackendSetsUnifiedBackendArrayInput
	// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
	HealthChecker NetworkLoadBalancersBackendSetsUnifiedHealthCheckerInput
	// (Updatable) IP version associated with the backend set.
	IpVersion pulumi.StringPtrInput
	// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
	IsFailOpen pulumi.BoolPtrInput
	// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
	IsInstantFailoverEnabled pulumi.BoolPtrInput
	// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
	IsPreserveSource pulumi.BoolPtrInput
	// A user-friendly name for the backend set that must be unique and cannot be changed.
	//
	// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
	//
	// Example: `exampleBackendSet`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringInput
	// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE``
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Policy pulumi.StringInput
}

func (NetworkLoadBalancersBackendSetsUnifiedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkLoadBalancersBackendSetsUnifiedArgs)(nil)).Elem()
}

type NetworkLoadBalancersBackendSetsUnifiedInput interface {
	pulumi.Input

	ToNetworkLoadBalancersBackendSetsUnifiedOutput() NetworkLoadBalancersBackendSetsUnifiedOutput
	ToNetworkLoadBalancersBackendSetsUnifiedOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedOutput
}

func (*NetworkLoadBalancersBackendSetsUnified) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (i *NetworkLoadBalancersBackendSetsUnified) ToNetworkLoadBalancersBackendSetsUnifiedOutput() NetworkLoadBalancersBackendSetsUnifiedOutput {
	return i.ToNetworkLoadBalancersBackendSetsUnifiedOutputWithContext(context.Background())
}

func (i *NetworkLoadBalancersBackendSetsUnified) ToNetworkLoadBalancersBackendSetsUnifiedOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancersBackendSetsUnifiedOutput)
}

// NetworkLoadBalancersBackendSetsUnifiedArrayInput is an input type that accepts NetworkLoadBalancersBackendSetsUnifiedArray and NetworkLoadBalancersBackendSetsUnifiedArrayOutput values.
// You can construct a concrete instance of `NetworkLoadBalancersBackendSetsUnifiedArrayInput` via:
//
//	NetworkLoadBalancersBackendSetsUnifiedArray{ NetworkLoadBalancersBackendSetsUnifiedArgs{...} }
type NetworkLoadBalancersBackendSetsUnifiedArrayInput interface {
	pulumi.Input

	ToNetworkLoadBalancersBackendSetsUnifiedArrayOutput() NetworkLoadBalancersBackendSetsUnifiedArrayOutput
	ToNetworkLoadBalancersBackendSetsUnifiedArrayOutputWithContext(context.Context) NetworkLoadBalancersBackendSetsUnifiedArrayOutput
}

type NetworkLoadBalancersBackendSetsUnifiedArray []NetworkLoadBalancersBackendSetsUnifiedInput

func (NetworkLoadBalancersBackendSetsUnifiedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (i NetworkLoadBalancersBackendSetsUnifiedArray) ToNetworkLoadBalancersBackendSetsUnifiedArrayOutput() NetworkLoadBalancersBackendSetsUnifiedArrayOutput {
	return i.ToNetworkLoadBalancersBackendSetsUnifiedArrayOutputWithContext(context.Background())
}

func (i NetworkLoadBalancersBackendSetsUnifiedArray) ToNetworkLoadBalancersBackendSetsUnifiedArrayOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancersBackendSetsUnifiedArrayOutput)
}

// NetworkLoadBalancersBackendSetsUnifiedMapInput is an input type that accepts NetworkLoadBalancersBackendSetsUnifiedMap and NetworkLoadBalancersBackendSetsUnifiedMapOutput values.
// You can construct a concrete instance of `NetworkLoadBalancersBackendSetsUnifiedMapInput` via:
//
//	NetworkLoadBalancersBackendSetsUnifiedMap{ "key": NetworkLoadBalancersBackendSetsUnifiedArgs{...} }
type NetworkLoadBalancersBackendSetsUnifiedMapInput interface {
	pulumi.Input

	ToNetworkLoadBalancersBackendSetsUnifiedMapOutput() NetworkLoadBalancersBackendSetsUnifiedMapOutput
	ToNetworkLoadBalancersBackendSetsUnifiedMapOutputWithContext(context.Context) NetworkLoadBalancersBackendSetsUnifiedMapOutput
}

type NetworkLoadBalancersBackendSetsUnifiedMap map[string]NetworkLoadBalancersBackendSetsUnifiedInput

func (NetworkLoadBalancersBackendSetsUnifiedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (i NetworkLoadBalancersBackendSetsUnifiedMap) ToNetworkLoadBalancersBackendSetsUnifiedMapOutput() NetworkLoadBalancersBackendSetsUnifiedMapOutput {
	return i.ToNetworkLoadBalancersBackendSetsUnifiedMapOutputWithContext(context.Background())
}

func (i NetworkLoadBalancersBackendSetsUnifiedMap) ToNetworkLoadBalancersBackendSetsUnifiedMapOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancersBackendSetsUnifiedMapOutput)
}

type NetworkLoadBalancersBackendSetsUnifiedOutput struct{ *pulumi.OutputState }

func (NetworkLoadBalancersBackendSetsUnifiedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (o NetworkLoadBalancersBackendSetsUnifiedOutput) ToNetworkLoadBalancersBackendSetsUnifiedOutput() NetworkLoadBalancersBackendSetsUnifiedOutput {
	return o
}

func (o NetworkLoadBalancersBackendSetsUnifiedOutput) ToNetworkLoadBalancersBackendSetsUnifiedOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedOutput {
	return o
}

// (Updatable) An array of backends to be associated with the backend set.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) Backends() NetworkLoadBalancersBackendSetsUnifiedBackendArrayOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) NetworkLoadBalancersBackendSetsUnifiedBackendArrayOutput {
		return v.Backends
	}).(NetworkLoadBalancersBackendSetsUnifiedBackendArrayOutput)
}

// (Updatable) The health check policy configuration. For more information, see [Editing Health Check Policies](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/editinghealthcheck.htm).
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) HealthChecker() NetworkLoadBalancersBackendSetsUnifiedHealthCheckerOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) NetworkLoadBalancersBackendSetsUnifiedHealthCheckerOutput {
		return v.HealthChecker
	}).(NetworkLoadBalancersBackendSetsUnifiedHealthCheckerOutput)
}

// (Updatable) IP version associated with the backend set.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// (Updatable) If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy. The value is false by default.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) IsFailOpen() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.BoolOutput { return v.IsFailOpen }).(pulumi.BoolOutput)
}

// (Updatable) If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) IsInstantFailoverEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.BoolOutput { return v.IsInstantFailoverEnabled }).(pulumi.BoolOutput)
}

// (Updatable) If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends. Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled. The value is true by default.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) IsPreserveSource() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.BoolOutput { return v.IsPreserveSource }).(pulumi.BoolOutput)
}

// A user-friendly name for the backend set that must be unique and cannot be changed.
//
// Valid backend set names include only alphanumeric characters, dashes, and underscores. Backend set names cannot contain spaces. Avoid entering confidential information.
//
// Example: `exampleBackendSet`
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) NetworkLoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.StringOutput { return v.NetworkLoadBalancerId }).(pulumi.StringOutput)
}

// (Updatable) The network load balancer policy for the backend set.  Example: `FIVE_TUPLE“
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o NetworkLoadBalancersBackendSetsUnifiedOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkLoadBalancersBackendSetsUnified) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

type NetworkLoadBalancersBackendSetsUnifiedArrayOutput struct{ *pulumi.OutputState }

func (NetworkLoadBalancersBackendSetsUnifiedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (o NetworkLoadBalancersBackendSetsUnifiedArrayOutput) ToNetworkLoadBalancersBackendSetsUnifiedArrayOutput() NetworkLoadBalancersBackendSetsUnifiedArrayOutput {
	return o
}

func (o NetworkLoadBalancersBackendSetsUnifiedArrayOutput) ToNetworkLoadBalancersBackendSetsUnifiedArrayOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedArrayOutput {
	return o
}

func (o NetworkLoadBalancersBackendSetsUnifiedArrayOutput) Index(i pulumi.IntInput) NetworkLoadBalancersBackendSetsUnifiedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkLoadBalancersBackendSetsUnified {
		return vs[0].([]*NetworkLoadBalancersBackendSetsUnified)[vs[1].(int)]
	}).(NetworkLoadBalancersBackendSetsUnifiedOutput)
}

type NetworkLoadBalancersBackendSetsUnifiedMapOutput struct{ *pulumi.OutputState }

func (NetworkLoadBalancersBackendSetsUnifiedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkLoadBalancersBackendSetsUnified)(nil)).Elem()
}

func (o NetworkLoadBalancersBackendSetsUnifiedMapOutput) ToNetworkLoadBalancersBackendSetsUnifiedMapOutput() NetworkLoadBalancersBackendSetsUnifiedMapOutput {
	return o
}

func (o NetworkLoadBalancersBackendSetsUnifiedMapOutput) ToNetworkLoadBalancersBackendSetsUnifiedMapOutputWithContext(ctx context.Context) NetworkLoadBalancersBackendSetsUnifiedMapOutput {
	return o
}

func (o NetworkLoadBalancersBackendSetsUnifiedMapOutput) MapIndex(k pulumi.StringInput) NetworkLoadBalancersBackendSetsUnifiedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkLoadBalancersBackendSetsUnified {
		return vs[0].(map[string]*NetworkLoadBalancersBackendSetsUnified)[vs[1].(string)]
	}).(NetworkLoadBalancersBackendSetsUnifiedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLoadBalancersBackendSetsUnifiedInput)(nil)).Elem(), &NetworkLoadBalancersBackendSetsUnified{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLoadBalancersBackendSetsUnifiedArrayInput)(nil)).Elem(), NetworkLoadBalancersBackendSetsUnifiedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLoadBalancersBackendSetsUnifiedMapInput)(nil)).Elem(), NetworkLoadBalancersBackendSetsUnifiedMap{})
	pulumi.RegisterOutputType(NetworkLoadBalancersBackendSetsUnifiedOutput{})
	pulumi.RegisterOutputType(NetworkLoadBalancersBackendSetsUnifiedArrayOutput{})
	pulumi.RegisterOutputType(NetworkLoadBalancersBackendSetsUnifiedMapOutput{})
}
