// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Index resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Get information about a single index.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Nosql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Nosql.GetIndex(ctx, &nosql.GetIndexArgs{
//				IndexName:     oci_nosql_index.Test_index.Name,
//				TableNameOrId: oci_nosql_table_name_or.Test_table_name_or.Id,
//				CompartmentId: _var.Compartment_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIndex(ctx *pulumi.Context, args *LookupIndexArgs, opts ...pulumi.InvokeOption) (*LookupIndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIndexResult
	err := ctx.Invoke("oci:Nosql/getIndex:getIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIndex.
type LookupIndexArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId string `pulumi:"compartmentId"`
	// The name of a table's index.
	IndexName string `pulumi:"indexName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// A collection of values returned by getIndex.
type LookupIndexResult struct {
	// Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	Id            string `pulumi:"id"`
	IndexName     string `pulumi:"indexName"`
	IsIfNotExists bool   `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []GetIndexKey `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// Index name.
	Name string `pulumi:"name"`
	// The state of an index.
	State string `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId string `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName     string `pulumi:"tableName"`
	TableNameOrId string `pulumi:"tableNameOrId"`
}

func LookupIndexOutput(ctx *pulumi.Context, args LookupIndexOutputArgs, opts ...pulumi.InvokeOption) LookupIndexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIndexResult, error) {
			args := v.(LookupIndexArgs)
			r, err := LookupIndex(ctx, &args, opts...)
			var s LookupIndexResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIndexResultOutput)
}

// A collection of arguments for invoking getIndex.
type LookupIndexOutputArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The name of a table's index.
	IndexName pulumi.StringInput `pulumi:"indexName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringInput `pulumi:"tableNameOrId"`
}

func (LookupIndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexArgs)(nil)).Elem()
}

// A collection of values returned by getIndex.
type LookupIndexResultOutput struct{ *pulumi.OutputState }

func (LookupIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexResult)(nil)).Elem()
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutput() LookupIndexResultOutput {
	return o
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutputWithContext(ctx context.Context) LookupIndexResultOutput {
	return o
}

// Compartment Identifier.
func (o LookupIndexResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o LookupIndexResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupIndexResultOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.IndexName }).(pulumi.StringOutput)
}

func (o LookupIndexResultOutput) IsIfNotExists() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIndexResult) bool { return v.IsIfNotExists }).(pulumi.BoolOutput)
}

// A set of keys for a secondary index.
func (o LookupIndexResultOutput) Keys() GetIndexKeyArrayOutput {
	return o.ApplyT(func(v LookupIndexResult) []GetIndexKey { return v.Keys }).(GetIndexKeyArrayOutput)
}

// A message describing the current state in more detail.
func (o LookupIndexResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Index name.
func (o LookupIndexResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.Name }).(pulumi.StringOutput)
}

// The state of an index.
func (o LookupIndexResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.State }).(pulumi.StringOutput)
}

// the OCID of the table to which this index belongs.
func (o LookupIndexResultOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.TableId }).(pulumi.StringOutput)
}

// The name of the table to which this index belongs.
func (o LookupIndexResultOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.TableName }).(pulumi.StringOutput)
}

func (o LookupIndexResultOutput) TableNameOrId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.TableNameOrId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIndexResultOutput{})
}
