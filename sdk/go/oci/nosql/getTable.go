// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Table resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Get table info by identifier.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci/Nosql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Nosql.GetTable(ctx, &nosql.GetTableArgs{
// 			TableNameOrId: oci_nosql_table_name_or.Test_table_name_or.Id,
// 			CompartmentId: _var.Compartment_id,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupTable(ctx *pulumi.Context, args *LookupTableArgs, opts ...pulumi.InvokeOption) (*LookupTableResult, error) {
	var rv LookupTableResult
	err := ctx.Invoke("oci:Nosql/getTable:getTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTable.
type LookupTableArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId string `pulumi:"compartmentId"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// A collection of values returned by getTable.
type LookupTableResult struct {
	// Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// A DDL statement representing the schema.
	DdlStatement string `pulumi:"ddlStatement"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier that is immutable.
	Id string `pulumi:"id"`
	// True if this table can be reclaimed after an idle period.
	IsAutoReclaimable bool `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// The column name.
	Name string `pulumi:"name"`
	// The table schema information as a JSON object.
	Schemas []GetTableSchema `pulumi:"schemas"`
	// The state of a table.
	State string `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Throughput and storage limits configuration of a table.
	TableLimits   []GetTableTableLimit `pulumi:"tableLimits"`
	TableNameOrId string               `pulumi:"tableNameOrId"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration string `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

func LookupTableOutput(ctx *pulumi.Context, args LookupTableOutputArgs, opts ...pulumi.InvokeOption) LookupTableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTableResult, error) {
			args := v.(LookupTableArgs)
			r, err := LookupTable(ctx, &args, opts...)
			var s LookupTableResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTableResultOutput)
}

// A collection of arguments for invoking getTable.
type LookupTableOutputArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringInput `pulumi:"tableNameOrId"`
}

func (LookupTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableArgs)(nil)).Elem()
}

// A collection of values returned by getTable.
type LookupTableResultOutput struct{ *pulumi.OutputState }

func (LookupTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableResult)(nil)).Elem()
}

func (o LookupTableResultOutput) ToLookupTableResultOutput() LookupTableResultOutput {
	return o
}

func (o LookupTableResultOutput) ToLookupTableResultOutputWithContext(ctx context.Context) LookupTableResultOutput {
	return o
}

// Compartment Identifier.
func (o LookupTableResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// A DDL statement representing the schema.
func (o LookupTableResultOutput) DdlStatement() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.DdlStatement }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
func (o LookupTableResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupTableResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupTableResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupTableResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique identifier that is immutable.
func (o LookupTableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.Id }).(pulumi.StringOutput)
}

// True if this table can be reclaimed after an idle period.
func (o LookupTableResultOutput) IsAutoReclaimable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTableResult) bool { return v.IsAutoReclaimable }).(pulumi.BoolOutput)
}

// A message describing the current state in more detail.
func (o LookupTableResultOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// The column name.
func (o LookupTableResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.Name }).(pulumi.StringOutput)
}

// The table schema information as a JSON object.
func (o LookupTableResultOutput) Schemas() GetTableSchemaArrayOutput {
	return o.ApplyT(func(v LookupTableResult) []GetTableSchema { return v.Schemas }).(GetTableSchemaArrayOutput)
}

// The state of a table.
func (o LookupTableResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.State }).(pulumi.StringOutput)
}

// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
func (o LookupTableResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupTableResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// Throughput and storage limits configuration of a table.
func (o LookupTableResultOutput) TableLimits() GetTableTableLimitArrayOutput {
	return o.ApplyT(func(v LookupTableResult) []GetTableTableLimit { return v.TableLimits }).(GetTableTableLimitArrayOutput)
}

func (o LookupTableResultOutput) TableNameOrId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.TableNameOrId }).(pulumi.StringOutput)
}

// The time the the table was created. An RFC3339 formatted datetime string.
func (o LookupTableResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
func (o LookupTableResultOutput) TimeOfExpiration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.TimeOfExpiration }).(pulumi.StringOutput)
}

// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
func (o LookupTableResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTableResultOutput{})
}
