// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Index resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Create a new index on the table identified by tableNameOrId.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Nosql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Nosql.NewIndex(ctx, "test_index", &Nosql.IndexArgs{
//				Keys: nosql.IndexKeyArray{
//					&nosql.IndexKeyArgs{
//						ColumnName:    pulumi.Any(indexKeysColumnName),
//						JsonFieldType: pulumi.Any(indexKeysJsonFieldType),
//						JsonPath:      pulumi.Any(indexKeysJsonPath),
//					},
//				},
//				Name:          pulumi.Any(indexName),
//				TableNameOrId: pulumi.Any(testTableNameOr.Id),
//				CompartmentId: pulumi.Any(compartmentId),
//				IsIfNotExists: pulumi.Any(indexIsIfNotExists),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Indexes can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Nosql/index:Index test_index "tables/{tableNameOrId}/indexes/{indexName}"
// ```
type Index struct {
	pulumi.CustomResourceState

	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolOutput `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys IndexKeyArrayOutput `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Index name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of an index.
	State pulumi.StringOutput `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId pulumi.StringOutput `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TableNameOrId pulumi.StringOutput `pulumi:"tableNameOrId"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keys == nil {
		return nil, errors.New("invalid value for required argument 'Keys'")
	}
	if args.TableNameOrId == nil {
		return nil, errors.New("invalid value for required argument 'TableNameOrId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("oci:Nosql/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("oci:Nosql/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId *string `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists *bool `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []IndexKey `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Index name.
	Name *string `pulumi:"name"`
	// The state of an index.
	State *string `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId *string `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName *string `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TableNameOrId *string `pulumi:"tableNameOrId"`
}

type IndexState struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringPtrInput
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolPtrInput
	// A set of keys for a secondary index.
	Keys IndexKeyArrayInput
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// Index name.
	Name pulumi.StringPtrInput
	// The state of an index.
	State pulumi.StringPtrInput
	// the OCID of the table to which this index belongs.
	TableId pulumi.StringPtrInput
	// The name of the table to which this index belongs.
	TableName pulumi.StringPtrInput
	// A table name within the compartment, or a table OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TableNameOrId pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId *string `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists *bool `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []IndexKey `pulumi:"keys"`
	// Index name.
	Name *string `pulumi:"name"`
	// A table name within the compartment, or a table OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringPtrInput
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolPtrInput
	// A set of keys for a secondary index.
	Keys IndexKeyArrayInput
	// Index name.
	Name pulumi.StringPtrInput
	// A table name within the compartment, or a table OCID.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TableNameOrId pulumi.StringInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
func (o IndexOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
func (o IndexOutput) IsIfNotExists() pulumi.BoolOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolOutput { return v.IsIfNotExists }).(pulumi.BoolOutput)
}

// A set of keys for a secondary index.
func (o IndexOutput) Keys() IndexKeyArrayOutput {
	return o.ApplyT(func(v *Index) IndexKeyArrayOutput { return v.Keys }).(IndexKeyArrayOutput)
}

// A message describing the current state in more detail.
func (o IndexOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Index name.
func (o IndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The state of an index.
func (o IndexOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// the OCID of the table to which this index belongs.
func (o IndexOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.TableId }).(pulumi.StringOutput)
}

// The name of the table to which this index belongs.
func (o IndexOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// A table name within the compartment, or a table OCID.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o IndexOutput) TableNameOrId() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.TableNameOrId }).(pulumi.StringOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
