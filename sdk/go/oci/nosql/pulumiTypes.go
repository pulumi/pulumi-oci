// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type IndexKey struct {
	// The name of a column to be included as an index key.
	ColumnName string `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType *string `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath *string `pulumi:"jsonPath"`
}

// IndexKeyInput is an input type that accepts IndexKeyArgs and IndexKeyOutput values.
// You can construct a concrete instance of `IndexKeyInput` via:
//
//	IndexKeyArgs{...}
type IndexKeyInput interface {
	pulumi.Input

	ToIndexKeyOutput() IndexKeyOutput
	ToIndexKeyOutputWithContext(context.Context) IndexKeyOutput
}

type IndexKeyArgs struct {
	// The name of a column to be included as an index key.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType pulumi.StringPtrInput `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath pulumi.StringPtrInput `pulumi:"jsonPath"`
}

func (IndexKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexKey)(nil)).Elem()
}

func (i IndexKeyArgs) ToIndexKeyOutput() IndexKeyOutput {
	return i.ToIndexKeyOutputWithContext(context.Background())
}

func (i IndexKeyArgs) ToIndexKeyOutputWithContext(ctx context.Context) IndexKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexKeyOutput)
}

// IndexKeyArrayInput is an input type that accepts IndexKeyArray and IndexKeyArrayOutput values.
// You can construct a concrete instance of `IndexKeyArrayInput` via:
//
//	IndexKeyArray{ IndexKeyArgs{...} }
type IndexKeyArrayInput interface {
	pulumi.Input

	ToIndexKeyArrayOutput() IndexKeyArrayOutput
	ToIndexKeyArrayOutputWithContext(context.Context) IndexKeyArrayOutput
}

type IndexKeyArray []IndexKeyInput

func (IndexKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexKey)(nil)).Elem()
}

func (i IndexKeyArray) ToIndexKeyArrayOutput() IndexKeyArrayOutput {
	return i.ToIndexKeyArrayOutputWithContext(context.Background())
}

func (i IndexKeyArray) ToIndexKeyArrayOutputWithContext(ctx context.Context) IndexKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexKeyArrayOutput)
}

type IndexKeyOutput struct{ *pulumi.OutputState }

func (IndexKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexKey)(nil)).Elem()
}

func (o IndexKeyOutput) ToIndexKeyOutput() IndexKeyOutput {
	return o
}

func (o IndexKeyOutput) ToIndexKeyOutputWithContext(ctx context.Context) IndexKeyOutput {
	return o
}

// The name of a column to be included as an index key.
func (o IndexKeyOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v IndexKey) string { return v.ColumnName }).(pulumi.StringOutput)
}

// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
func (o IndexKeyOutput) JsonFieldType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexKey) *string { return v.JsonFieldType }).(pulumi.StringPtrOutput)
}

// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
func (o IndexKeyOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexKey) *string { return v.JsonPath }).(pulumi.StringPtrOutput)
}

type IndexKeyArrayOutput struct{ *pulumi.OutputState }

func (IndexKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexKey)(nil)).Elem()
}

func (o IndexKeyArrayOutput) ToIndexKeyArrayOutput() IndexKeyArrayOutput {
	return o
}

func (o IndexKeyArrayOutput) ToIndexKeyArrayOutputWithContext(ctx context.Context) IndexKeyArrayOutput {
	return o
}

func (o IndexKeyArrayOutput) Index(i pulumi.IntInput) IndexKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexKey {
		return vs[0].([]IndexKey)[vs[1].(int)]
	}).(IndexKeyOutput)
}

type TableSchema struct {
	// The columns of a table.
	Columns []TableSchemaColumn `pulumi:"columns"`
	// The identity properties of a table, if any.
	Identities []TableSchemaIdentity `pulumi:"identities"`
	// A list of column names that make up a key.
	PrimaryKeys []string `pulumi:"primaryKeys"`
	// A list of column names that make up a key.
	ShardKeys []string `pulumi:"shardKeys"`
	// The default Time-to-Live for the table, in days.
	Ttl *int `pulumi:"ttl"`
}

// TableSchemaInput is an input type that accepts TableSchemaArgs and TableSchemaOutput values.
// You can construct a concrete instance of `TableSchemaInput` via:
//
//	TableSchemaArgs{...}
type TableSchemaInput interface {
	pulumi.Input

	ToTableSchemaOutput() TableSchemaOutput
	ToTableSchemaOutputWithContext(context.Context) TableSchemaOutput
}

type TableSchemaArgs struct {
	// The columns of a table.
	Columns TableSchemaColumnArrayInput `pulumi:"columns"`
	// The identity properties of a table, if any.
	Identities TableSchemaIdentityArrayInput `pulumi:"identities"`
	// A list of column names that make up a key.
	PrimaryKeys pulumi.StringArrayInput `pulumi:"primaryKeys"`
	// A list of column names that make up a key.
	ShardKeys pulumi.StringArrayInput `pulumi:"shardKeys"`
	// The default Time-to-Live for the table, in days.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

// TableSchemaArrayInput is an input type that accepts TableSchemaArray and TableSchemaArrayOutput values.
// You can construct a concrete instance of `TableSchemaArrayInput` via:
//
//	TableSchemaArray{ TableSchemaArgs{...} }
type TableSchemaArrayInput interface {
	pulumi.Input

	ToTableSchemaArrayOutput() TableSchemaArrayOutput
	ToTableSchemaArrayOutputWithContext(context.Context) TableSchemaArrayOutput
}

type TableSchemaArray []TableSchemaInput

func (TableSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchema)(nil)).Elem()
}

func (i TableSchemaArray) ToTableSchemaArrayOutput() TableSchemaArrayOutput {
	return i.ToTableSchemaArrayOutputWithContext(context.Background())
}

func (i TableSchemaArray) ToTableSchemaArrayOutputWithContext(ctx context.Context) TableSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaArrayOutput)
}

type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

// The columns of a table.
func (o TableSchemaOutput) Columns() TableSchemaColumnArrayOutput {
	return o.ApplyT(func(v TableSchema) []TableSchemaColumn { return v.Columns }).(TableSchemaColumnArrayOutput)
}

// The identity properties of a table, if any.
func (o TableSchemaOutput) Identities() TableSchemaIdentityArrayOutput {
	return o.ApplyT(func(v TableSchema) []TableSchemaIdentity { return v.Identities }).(TableSchemaIdentityArrayOutput)
}

// A list of column names that make up a key.
func (o TableSchemaOutput) PrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableSchema) []string { return v.PrimaryKeys }).(pulumi.StringArrayOutput)
}

// A list of column names that make up a key.
func (o TableSchemaOutput) ShardKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableSchema) []string { return v.ShardKeys }).(pulumi.StringArrayOutput)
}

// The default Time-to-Live for the table, in days.
func (o TableSchemaOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableSchema) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type TableSchemaArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchema)(nil)).Elem()
}

func (o TableSchemaArrayOutput) ToTableSchemaArrayOutput() TableSchemaArrayOutput {
	return o
}

func (o TableSchemaArrayOutput) ToTableSchemaArrayOutputWithContext(ctx context.Context) TableSchemaArrayOutput {
	return o
}

func (o TableSchemaArrayOutput) Index(i pulumi.IntInput) TableSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchema {
		return vs[0].([]TableSchema)[vs[1].(int)]
	}).(TableSchemaOutput)
}

type TableSchemaColumn struct {
	// The column default value.
	DefaultValue *string `pulumi:"defaultValue"`
	// True if the STRING column was declared AS UUID.
	IsAsUuid *bool `pulumi:"isAsUuid"`
	// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
	IsGenerated *bool `pulumi:"isGenerated"`
	// The column nullable flag.
	IsNullable *bool `pulumi:"isNullable"`
	// Table name.
	Name *string `pulumi:"name"`
	// The column type.
	Type *string `pulumi:"type"`
}

// TableSchemaColumnInput is an input type that accepts TableSchemaColumnArgs and TableSchemaColumnOutput values.
// You can construct a concrete instance of `TableSchemaColumnInput` via:
//
//	TableSchemaColumnArgs{...}
type TableSchemaColumnInput interface {
	pulumi.Input

	ToTableSchemaColumnOutput() TableSchemaColumnOutput
	ToTableSchemaColumnOutputWithContext(context.Context) TableSchemaColumnOutput
}

type TableSchemaColumnArgs struct {
	// The column default value.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// True if the STRING column was declared AS UUID.
	IsAsUuid pulumi.BoolPtrInput `pulumi:"isAsUuid"`
	// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
	IsGenerated pulumi.BoolPtrInput `pulumi:"isGenerated"`
	// The column nullable flag.
	IsNullable pulumi.BoolPtrInput `pulumi:"isNullable"`
	// Table name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The column type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TableSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaColumn)(nil)).Elem()
}

func (i TableSchemaColumnArgs) ToTableSchemaColumnOutput() TableSchemaColumnOutput {
	return i.ToTableSchemaColumnOutputWithContext(context.Background())
}

func (i TableSchemaColumnArgs) ToTableSchemaColumnOutputWithContext(ctx context.Context) TableSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaColumnOutput)
}

// TableSchemaColumnArrayInput is an input type that accepts TableSchemaColumnArray and TableSchemaColumnArrayOutput values.
// You can construct a concrete instance of `TableSchemaColumnArrayInput` via:
//
//	TableSchemaColumnArray{ TableSchemaColumnArgs{...} }
type TableSchemaColumnArrayInput interface {
	pulumi.Input

	ToTableSchemaColumnArrayOutput() TableSchemaColumnArrayOutput
	ToTableSchemaColumnArrayOutputWithContext(context.Context) TableSchemaColumnArrayOutput
}

type TableSchemaColumnArray []TableSchemaColumnInput

func (TableSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaColumn)(nil)).Elem()
}

func (i TableSchemaColumnArray) ToTableSchemaColumnArrayOutput() TableSchemaColumnArrayOutput {
	return i.ToTableSchemaColumnArrayOutputWithContext(context.Background())
}

func (i TableSchemaColumnArray) ToTableSchemaColumnArrayOutputWithContext(ctx context.Context) TableSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaColumnArrayOutput)
}

type TableSchemaColumnOutput struct{ *pulumi.OutputState }

func (TableSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaColumn)(nil)).Elem()
}

func (o TableSchemaColumnOutput) ToTableSchemaColumnOutput() TableSchemaColumnOutput {
	return o
}

func (o TableSchemaColumnOutput) ToTableSchemaColumnOutputWithContext(ctx context.Context) TableSchemaColumnOutput {
	return o
}

// The column default value.
func (o TableSchemaColumnOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// True if the STRING column was declared AS UUID.
func (o TableSchemaColumnOutput) IsAsUuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *bool { return v.IsAsUuid }).(pulumi.BoolPtrOutput)
}

// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
func (o TableSchemaColumnOutput) IsGenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *bool { return v.IsGenerated }).(pulumi.BoolPtrOutput)
}

// The column nullable flag.
func (o TableSchemaColumnOutput) IsNullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *bool { return v.IsNullable }).(pulumi.BoolPtrOutput)
}

// Table name.
func (o TableSchemaColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The column type.
func (o TableSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaColumn)(nil)).Elem()
}

func (o TableSchemaColumnArrayOutput) ToTableSchemaColumnArrayOutput() TableSchemaColumnArrayOutput {
	return o
}

func (o TableSchemaColumnArrayOutput) ToTableSchemaColumnArrayOutputWithContext(ctx context.Context) TableSchemaColumnArrayOutput {
	return o
}

func (o TableSchemaColumnArrayOutput) Index(i pulumi.IntInput) TableSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaColumn {
		return vs[0].([]TableSchemaColumn)[vs[1].(int)]
	}).(TableSchemaColumnOutput)
}

type TableSchemaIdentity struct {
	// The name of the identity column.
	ColumnName *string `pulumi:"columnName"`
	// True if the identity value is GENERATED ALWAYS.
	IsAlways *bool `pulumi:"isAlways"`
	// True if the identity value is GENERATED BY DEFAULT ON NULL.
	IsNull *bool `pulumi:"isNull"`
}

// TableSchemaIdentityInput is an input type that accepts TableSchemaIdentityArgs and TableSchemaIdentityOutput values.
// You can construct a concrete instance of `TableSchemaIdentityInput` via:
//
//	TableSchemaIdentityArgs{...}
type TableSchemaIdentityInput interface {
	pulumi.Input

	ToTableSchemaIdentityOutput() TableSchemaIdentityOutput
	ToTableSchemaIdentityOutputWithContext(context.Context) TableSchemaIdentityOutput
}

type TableSchemaIdentityArgs struct {
	// The name of the identity column.
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// True if the identity value is GENERATED ALWAYS.
	IsAlways pulumi.BoolPtrInput `pulumi:"isAlways"`
	// True if the identity value is GENERATED BY DEFAULT ON NULL.
	IsNull pulumi.BoolPtrInput `pulumi:"isNull"`
}

func (TableSchemaIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaIdentity)(nil)).Elem()
}

func (i TableSchemaIdentityArgs) ToTableSchemaIdentityOutput() TableSchemaIdentityOutput {
	return i.ToTableSchemaIdentityOutputWithContext(context.Background())
}

func (i TableSchemaIdentityArgs) ToTableSchemaIdentityOutputWithContext(ctx context.Context) TableSchemaIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaIdentityOutput)
}

// TableSchemaIdentityArrayInput is an input type that accepts TableSchemaIdentityArray and TableSchemaIdentityArrayOutput values.
// You can construct a concrete instance of `TableSchemaIdentityArrayInput` via:
//
//	TableSchemaIdentityArray{ TableSchemaIdentityArgs{...} }
type TableSchemaIdentityArrayInput interface {
	pulumi.Input

	ToTableSchemaIdentityArrayOutput() TableSchemaIdentityArrayOutput
	ToTableSchemaIdentityArrayOutputWithContext(context.Context) TableSchemaIdentityArrayOutput
}

type TableSchemaIdentityArray []TableSchemaIdentityInput

func (TableSchemaIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaIdentity)(nil)).Elem()
}

func (i TableSchemaIdentityArray) ToTableSchemaIdentityArrayOutput() TableSchemaIdentityArrayOutput {
	return i.ToTableSchemaIdentityArrayOutputWithContext(context.Background())
}

func (i TableSchemaIdentityArray) ToTableSchemaIdentityArrayOutputWithContext(ctx context.Context) TableSchemaIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaIdentityArrayOutput)
}

type TableSchemaIdentityOutput struct{ *pulumi.OutputState }

func (TableSchemaIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaIdentity)(nil)).Elem()
}

func (o TableSchemaIdentityOutput) ToTableSchemaIdentityOutput() TableSchemaIdentityOutput {
	return o
}

func (o TableSchemaIdentityOutput) ToTableSchemaIdentityOutputWithContext(ctx context.Context) TableSchemaIdentityOutput {
	return o
}

// The name of the identity column.
func (o TableSchemaIdentityOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableSchemaIdentity) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// True if the identity value is GENERATED ALWAYS.
func (o TableSchemaIdentityOutput) IsAlways() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableSchemaIdentity) *bool { return v.IsAlways }).(pulumi.BoolPtrOutput)
}

// True if the identity value is GENERATED BY DEFAULT ON NULL.
func (o TableSchemaIdentityOutput) IsNull() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableSchemaIdentity) *bool { return v.IsNull }).(pulumi.BoolPtrOutput)
}

type TableSchemaIdentityArrayOutput struct{ *pulumi.OutputState }

func (TableSchemaIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableSchemaIdentity)(nil)).Elem()
}

func (o TableSchemaIdentityArrayOutput) ToTableSchemaIdentityArrayOutput() TableSchemaIdentityArrayOutput {
	return o
}

func (o TableSchemaIdentityArrayOutput) ToTableSchemaIdentityArrayOutputWithContext(ctx context.Context) TableSchemaIdentityArrayOutput {
	return o
}

func (o TableSchemaIdentityArrayOutput) Index(i pulumi.IntInput) TableSchemaIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableSchemaIdentity {
		return vs[0].([]TableSchemaIdentity)[vs[1].(int)]
	}).(TableSchemaIdentityOutput)
}

type TableTableLimits struct {
	// (Updatable) The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode *string `pulumi:"capacityMode"`
	// (Updatable) Maximum sustained read throughput limit for the table.
	MaxReadUnits int `pulumi:"maxReadUnits"`
	// (Updatable) Maximum size of storage used by the table.
	MaxStorageInGbs int `pulumi:"maxStorageInGbs"`
	// (Updatable) Maximum sustained write throughput limit for the table.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	MaxWriteUnits int `pulumi:"maxWriteUnits"`
}

// TableTableLimitsInput is an input type that accepts TableTableLimitsArgs and TableTableLimitsOutput values.
// You can construct a concrete instance of `TableTableLimitsInput` via:
//
//	TableTableLimitsArgs{...}
type TableTableLimitsInput interface {
	pulumi.Input

	ToTableTableLimitsOutput() TableTableLimitsOutput
	ToTableTableLimitsOutputWithContext(context.Context) TableTableLimitsOutput
}

type TableTableLimitsArgs struct {
	// (Updatable) The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode pulumi.StringPtrInput `pulumi:"capacityMode"`
	// (Updatable) Maximum sustained read throughput limit for the table.
	MaxReadUnits pulumi.IntInput `pulumi:"maxReadUnits"`
	// (Updatable) Maximum size of storage used by the table.
	MaxStorageInGbs pulumi.IntInput `pulumi:"maxStorageInGbs"`
	// (Updatable) Maximum sustained write throughput limit for the table.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	MaxWriteUnits pulumi.IntInput `pulumi:"maxWriteUnits"`
}

func (TableTableLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTableLimits)(nil)).Elem()
}

func (i TableTableLimitsArgs) ToTableTableLimitsOutput() TableTableLimitsOutput {
	return i.ToTableTableLimitsOutputWithContext(context.Background())
}

func (i TableTableLimitsArgs) ToTableTableLimitsOutputWithContext(ctx context.Context) TableTableLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTableLimitsOutput)
}

func (i TableTableLimitsArgs) ToTableTableLimitsPtrOutput() TableTableLimitsPtrOutput {
	return i.ToTableTableLimitsPtrOutputWithContext(context.Background())
}

func (i TableTableLimitsArgs) ToTableTableLimitsPtrOutputWithContext(ctx context.Context) TableTableLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTableLimitsOutput).ToTableTableLimitsPtrOutputWithContext(ctx)
}

// TableTableLimitsPtrInput is an input type that accepts TableTableLimitsArgs, TableTableLimitsPtr and TableTableLimitsPtrOutput values.
// You can construct a concrete instance of `TableTableLimitsPtrInput` via:
//
//	        TableTableLimitsArgs{...}
//
//	or:
//
//	        nil
type TableTableLimitsPtrInput interface {
	pulumi.Input

	ToTableTableLimitsPtrOutput() TableTableLimitsPtrOutput
	ToTableTableLimitsPtrOutputWithContext(context.Context) TableTableLimitsPtrOutput
}

type tableTableLimitsPtrType TableTableLimitsArgs

func TableTableLimitsPtr(v *TableTableLimitsArgs) TableTableLimitsPtrInput {
	return (*tableTableLimitsPtrType)(v)
}

func (*tableTableLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTableLimits)(nil)).Elem()
}

func (i *tableTableLimitsPtrType) ToTableTableLimitsPtrOutput() TableTableLimitsPtrOutput {
	return i.ToTableTableLimitsPtrOutputWithContext(context.Background())
}

func (i *tableTableLimitsPtrType) ToTableTableLimitsPtrOutputWithContext(ctx context.Context) TableTableLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableTableLimitsPtrOutput)
}

type TableTableLimitsOutput struct{ *pulumi.OutputState }

func (TableTableLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableTableLimits)(nil)).Elem()
}

func (o TableTableLimitsOutput) ToTableTableLimitsOutput() TableTableLimitsOutput {
	return o
}

func (o TableTableLimitsOutput) ToTableTableLimitsOutputWithContext(ctx context.Context) TableTableLimitsOutput {
	return o
}

func (o TableTableLimitsOutput) ToTableTableLimitsPtrOutput() TableTableLimitsPtrOutput {
	return o.ToTableTableLimitsPtrOutputWithContext(context.Background())
}

func (o TableTableLimitsOutput) ToTableTableLimitsPtrOutputWithContext(ctx context.Context) TableTableLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableTableLimits) *TableTableLimits {
		return &v
	}).(TableTableLimitsPtrOutput)
}

// (Updatable) The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
func (o TableTableLimitsOutput) CapacityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableTableLimits) *string { return v.CapacityMode }).(pulumi.StringPtrOutput)
}

// (Updatable) Maximum sustained read throughput limit for the table.
func (o TableTableLimitsOutput) MaxReadUnits() pulumi.IntOutput {
	return o.ApplyT(func(v TableTableLimits) int { return v.MaxReadUnits }).(pulumi.IntOutput)
}

// (Updatable) Maximum size of storage used by the table.
func (o TableTableLimitsOutput) MaxStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v TableTableLimits) int { return v.MaxStorageInGbs }).(pulumi.IntOutput)
}

// (Updatable) Maximum sustained write throughput limit for the table.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o TableTableLimitsOutput) MaxWriteUnits() pulumi.IntOutput {
	return o.ApplyT(func(v TableTableLimits) int { return v.MaxWriteUnits }).(pulumi.IntOutput)
}

type TableTableLimitsPtrOutput struct{ *pulumi.OutputState }

func (TableTableLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableTableLimits)(nil)).Elem()
}

func (o TableTableLimitsPtrOutput) ToTableTableLimitsPtrOutput() TableTableLimitsPtrOutput {
	return o
}

func (o TableTableLimitsPtrOutput) ToTableTableLimitsPtrOutputWithContext(ctx context.Context) TableTableLimitsPtrOutput {
	return o
}

func (o TableTableLimitsPtrOutput) Elem() TableTableLimitsOutput {
	return o.ApplyT(func(v *TableTableLimits) TableTableLimits {
		if v != nil {
			return *v
		}
		var ret TableTableLimits
		return ret
	}).(TableTableLimitsOutput)
}

// (Updatable) The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
func (o TableTableLimitsPtrOutput) CapacityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableTableLimits) *string {
		if v == nil {
			return nil
		}
		return v.CapacityMode
	}).(pulumi.StringPtrOutput)
}

// (Updatable) Maximum sustained read throughput limit for the table.
func (o TableTableLimitsPtrOutput) MaxReadUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTableLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MaxReadUnits
	}).(pulumi.IntPtrOutput)
}

// (Updatable) Maximum size of storage used by the table.
func (o TableTableLimitsPtrOutput) MaxStorageInGbs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTableLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MaxStorageInGbs
	}).(pulumi.IntPtrOutput)
}

// (Updatable) Maximum sustained write throughput limit for the table.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o TableTableLimitsPtrOutput) MaxWriteUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableTableLimits) *int {
		if v == nil {
			return nil
		}
		return &v.MaxWriteUnits
	}).(pulumi.IntPtrOutput)
}

type GetIndexKey struct {
	// The name of a column to be included as an index key.
	ColumnName string `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType string `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath string `pulumi:"jsonPath"`
}

// GetIndexKeyInput is an input type that accepts GetIndexKeyArgs and GetIndexKeyOutput values.
// You can construct a concrete instance of `GetIndexKeyInput` via:
//
//	GetIndexKeyArgs{...}
type GetIndexKeyInput interface {
	pulumi.Input

	ToGetIndexKeyOutput() GetIndexKeyOutput
	ToGetIndexKeyOutputWithContext(context.Context) GetIndexKeyOutput
}

type GetIndexKeyArgs struct {
	// The name of a column to be included as an index key.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType pulumi.StringInput `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath pulumi.StringInput `pulumi:"jsonPath"`
}

func (GetIndexKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexKey)(nil)).Elem()
}

func (i GetIndexKeyArgs) ToGetIndexKeyOutput() GetIndexKeyOutput {
	return i.ToGetIndexKeyOutputWithContext(context.Background())
}

func (i GetIndexKeyArgs) ToGetIndexKeyOutputWithContext(ctx context.Context) GetIndexKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexKeyOutput)
}

// GetIndexKeyArrayInput is an input type that accepts GetIndexKeyArray and GetIndexKeyArrayOutput values.
// You can construct a concrete instance of `GetIndexKeyArrayInput` via:
//
//	GetIndexKeyArray{ GetIndexKeyArgs{...} }
type GetIndexKeyArrayInput interface {
	pulumi.Input

	ToGetIndexKeyArrayOutput() GetIndexKeyArrayOutput
	ToGetIndexKeyArrayOutputWithContext(context.Context) GetIndexKeyArrayOutput
}

type GetIndexKeyArray []GetIndexKeyInput

func (GetIndexKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexKey)(nil)).Elem()
}

func (i GetIndexKeyArray) ToGetIndexKeyArrayOutput() GetIndexKeyArrayOutput {
	return i.ToGetIndexKeyArrayOutputWithContext(context.Background())
}

func (i GetIndexKeyArray) ToGetIndexKeyArrayOutputWithContext(ctx context.Context) GetIndexKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexKeyArrayOutput)
}

type GetIndexKeyOutput struct{ *pulumi.OutputState }

func (GetIndexKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexKey)(nil)).Elem()
}

func (o GetIndexKeyOutput) ToGetIndexKeyOutput() GetIndexKeyOutput {
	return o
}

func (o GetIndexKeyOutput) ToGetIndexKeyOutputWithContext(ctx context.Context) GetIndexKeyOutput {
	return o
}

// The name of a column to be included as an index key.
func (o GetIndexKeyOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexKey) string { return v.ColumnName }).(pulumi.StringOutput)
}

// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
func (o GetIndexKeyOutput) JsonFieldType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexKey) string { return v.JsonFieldType }).(pulumi.StringOutput)
}

// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
func (o GetIndexKeyOutput) JsonPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexKey) string { return v.JsonPath }).(pulumi.StringOutput)
}

type GetIndexKeyArrayOutput struct{ *pulumi.OutputState }

func (GetIndexKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexKey)(nil)).Elem()
}

func (o GetIndexKeyArrayOutput) ToGetIndexKeyArrayOutput() GetIndexKeyArrayOutput {
	return o
}

func (o GetIndexKeyArrayOutput) ToGetIndexKeyArrayOutputWithContext(ctx context.Context) GetIndexKeyArrayOutput {
	return o
}

func (o GetIndexKeyArrayOutput) Index(i pulumi.IntInput) GetIndexKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIndexKey {
		return vs[0].([]GetIndexKey)[vs[1].(int)]
	}).(GetIndexKeyOutput)
}

type GetIndexesFilter struct {
	// A shell-globbing-style (*?[]) filter for names.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetIndexesFilterInput is an input type that accepts GetIndexesFilterArgs and GetIndexesFilterOutput values.
// You can construct a concrete instance of `GetIndexesFilterInput` via:
//
//	GetIndexesFilterArgs{...}
type GetIndexesFilterInput interface {
	pulumi.Input

	ToGetIndexesFilterOutput() GetIndexesFilterOutput
	ToGetIndexesFilterOutputWithContext(context.Context) GetIndexesFilterOutput
}

type GetIndexesFilterArgs struct {
	// A shell-globbing-style (*?[]) filter for names.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetIndexesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesFilter)(nil)).Elem()
}

func (i GetIndexesFilterArgs) ToGetIndexesFilterOutput() GetIndexesFilterOutput {
	return i.ToGetIndexesFilterOutputWithContext(context.Background())
}

func (i GetIndexesFilterArgs) ToGetIndexesFilterOutputWithContext(ctx context.Context) GetIndexesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesFilterOutput)
}

// GetIndexesFilterArrayInput is an input type that accepts GetIndexesFilterArray and GetIndexesFilterArrayOutput values.
// You can construct a concrete instance of `GetIndexesFilterArrayInput` via:
//
//	GetIndexesFilterArray{ GetIndexesFilterArgs{...} }
type GetIndexesFilterArrayInput interface {
	pulumi.Input

	ToGetIndexesFilterArrayOutput() GetIndexesFilterArrayOutput
	ToGetIndexesFilterArrayOutputWithContext(context.Context) GetIndexesFilterArrayOutput
}

type GetIndexesFilterArray []GetIndexesFilterInput

func (GetIndexesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesFilter)(nil)).Elem()
}

func (i GetIndexesFilterArray) ToGetIndexesFilterArrayOutput() GetIndexesFilterArrayOutput {
	return i.ToGetIndexesFilterArrayOutputWithContext(context.Background())
}

func (i GetIndexesFilterArray) ToGetIndexesFilterArrayOutputWithContext(ctx context.Context) GetIndexesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesFilterArrayOutput)
}

type GetIndexesFilterOutput struct{ *pulumi.OutputState }

func (GetIndexesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesFilter)(nil)).Elem()
}

func (o GetIndexesFilterOutput) ToGetIndexesFilterOutput() GetIndexesFilterOutput {
	return o
}

func (o GetIndexesFilterOutput) ToGetIndexesFilterOutputWithContext(ctx context.Context) GetIndexesFilterOutput {
	return o
}

// A shell-globbing-style (*?[]) filter for names.
func (o GetIndexesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetIndexesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIndexesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetIndexesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIndexesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetIndexesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetIndexesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesFilter)(nil)).Elem()
}

func (o GetIndexesFilterArrayOutput) ToGetIndexesFilterArrayOutput() GetIndexesFilterArrayOutput {
	return o
}

func (o GetIndexesFilterArrayOutput) ToGetIndexesFilterArrayOutputWithContext(ctx context.Context) GetIndexesFilterArrayOutput {
	return o
}

func (o GetIndexesFilterArrayOutput) Index(i pulumi.IntInput) GetIndexesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIndexesFilter {
		return vs[0].([]GetIndexesFilter)[vs[1].(int)]
	}).(GetIndexesFilterOutput)
}

type GetIndexesIndexCollection struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId string `pulumi:"compartmentId"`
	Id            string `pulumi:"id"`
	IsIfNotExists bool   `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []GetIndexesIndexCollectionKey `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// A shell-globbing-style (*?[]) filter for names.
	Name string `pulumi:"name"`
	// Filter list by the lifecycle state of the item.
	State string `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId string `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName string `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// GetIndexesIndexCollectionInput is an input type that accepts GetIndexesIndexCollectionArgs and GetIndexesIndexCollectionOutput values.
// You can construct a concrete instance of `GetIndexesIndexCollectionInput` via:
//
//	GetIndexesIndexCollectionArgs{...}
type GetIndexesIndexCollectionInput interface {
	pulumi.Input

	ToGetIndexesIndexCollectionOutput() GetIndexesIndexCollectionOutput
	ToGetIndexesIndexCollectionOutputWithContext(context.Context) GetIndexesIndexCollectionOutput
}

type GetIndexesIndexCollectionArgs struct {
	// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	Id            pulumi.StringInput `pulumi:"id"`
	IsIfNotExists pulumi.BoolInput   `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys GetIndexesIndexCollectionKeyArrayInput `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// A shell-globbing-style (*?[]) filter for names.
	Name pulumi.StringInput `pulumi:"name"`
	// Filter list by the lifecycle state of the item.
	State pulumi.StringInput `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId pulumi.StringInput `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringInput `pulumi:"tableNameOrId"`
}

func (GetIndexesIndexCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndexCollection)(nil)).Elem()
}

func (i GetIndexesIndexCollectionArgs) ToGetIndexesIndexCollectionOutput() GetIndexesIndexCollectionOutput {
	return i.ToGetIndexesIndexCollectionOutputWithContext(context.Background())
}

func (i GetIndexesIndexCollectionArgs) ToGetIndexesIndexCollectionOutputWithContext(ctx context.Context) GetIndexesIndexCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexCollectionOutput)
}

// GetIndexesIndexCollectionArrayInput is an input type that accepts GetIndexesIndexCollectionArray and GetIndexesIndexCollectionArrayOutput values.
// You can construct a concrete instance of `GetIndexesIndexCollectionArrayInput` via:
//
//	GetIndexesIndexCollectionArray{ GetIndexesIndexCollectionArgs{...} }
type GetIndexesIndexCollectionArrayInput interface {
	pulumi.Input

	ToGetIndexesIndexCollectionArrayOutput() GetIndexesIndexCollectionArrayOutput
	ToGetIndexesIndexCollectionArrayOutputWithContext(context.Context) GetIndexesIndexCollectionArrayOutput
}

type GetIndexesIndexCollectionArray []GetIndexesIndexCollectionInput

func (GetIndexesIndexCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndexCollection)(nil)).Elem()
}

func (i GetIndexesIndexCollectionArray) ToGetIndexesIndexCollectionArrayOutput() GetIndexesIndexCollectionArrayOutput {
	return i.ToGetIndexesIndexCollectionArrayOutputWithContext(context.Background())
}

func (i GetIndexesIndexCollectionArray) ToGetIndexesIndexCollectionArrayOutputWithContext(ctx context.Context) GetIndexesIndexCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexCollectionArrayOutput)
}

type GetIndexesIndexCollectionOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndexCollection)(nil)).Elem()
}

func (o GetIndexesIndexCollectionOutput) ToGetIndexesIndexCollectionOutput() GetIndexesIndexCollectionOutput {
	return o
}

func (o GetIndexesIndexCollectionOutput) ToGetIndexesIndexCollectionOutputWithContext(ctx context.Context) GetIndexesIndexCollectionOutput {
	return o
}

// The ID of a table's compartment. When a table is identified by name, the compartmentId is often needed to provide context for interpreting the name.
func (o GetIndexesIndexCollectionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetIndexesIndexCollectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIndexesIndexCollectionOutput) IsIfNotExists() pulumi.BoolOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) bool { return v.IsIfNotExists }).(pulumi.BoolOutput)
}

// A set of keys for a secondary index.
func (o GetIndexesIndexCollectionOutput) Keys() GetIndexesIndexCollectionKeyArrayOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) []GetIndexesIndexCollectionKey { return v.Keys }).(GetIndexesIndexCollectionKeyArrayOutput)
}

// A message describing the current state in more detail.
func (o GetIndexesIndexCollectionOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// A shell-globbing-style (*?[]) filter for names.
func (o GetIndexesIndexCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.Name }).(pulumi.StringOutput)
}

// Filter list by the lifecycle state of the item.
func (o GetIndexesIndexCollectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.State }).(pulumi.StringOutput)
}

// the OCID of the table to which this index belongs.
func (o GetIndexesIndexCollectionOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.TableId }).(pulumi.StringOutput)
}

// The name of the table to which this index belongs.
func (o GetIndexesIndexCollectionOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.TableName }).(pulumi.StringOutput)
}

// A table name within the compartment, or a table OCID.
func (o GetIndexesIndexCollectionOutput) TableNameOrId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollection) string { return v.TableNameOrId }).(pulumi.StringOutput)
}

type GetIndexesIndexCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndexCollection)(nil)).Elem()
}

func (o GetIndexesIndexCollectionArrayOutput) ToGetIndexesIndexCollectionArrayOutput() GetIndexesIndexCollectionArrayOutput {
	return o
}

func (o GetIndexesIndexCollectionArrayOutput) ToGetIndexesIndexCollectionArrayOutputWithContext(ctx context.Context) GetIndexesIndexCollectionArrayOutput {
	return o
}

func (o GetIndexesIndexCollectionArrayOutput) Index(i pulumi.IntInput) GetIndexesIndexCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIndexesIndexCollection {
		return vs[0].([]GetIndexesIndexCollection)[vs[1].(int)]
	}).(GetIndexesIndexCollectionOutput)
}

type GetIndexesIndexCollectionKey struct {
	// The name of a column to be included as an index key.
	ColumnName string `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType string `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath string `pulumi:"jsonPath"`
}

// GetIndexesIndexCollectionKeyInput is an input type that accepts GetIndexesIndexCollectionKeyArgs and GetIndexesIndexCollectionKeyOutput values.
// You can construct a concrete instance of `GetIndexesIndexCollectionKeyInput` via:
//
//	GetIndexesIndexCollectionKeyArgs{...}
type GetIndexesIndexCollectionKeyInput interface {
	pulumi.Input

	ToGetIndexesIndexCollectionKeyOutput() GetIndexesIndexCollectionKeyOutput
	ToGetIndexesIndexCollectionKeyOutputWithContext(context.Context) GetIndexesIndexCollectionKeyOutput
}

type GetIndexesIndexCollectionKeyArgs struct {
	// The name of a column to be included as an index key.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
	JsonFieldType pulumi.StringInput `pulumi:"jsonFieldType"`
	// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
	JsonPath pulumi.StringInput `pulumi:"jsonPath"`
}

func (GetIndexesIndexCollectionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndexCollectionKey)(nil)).Elem()
}

func (i GetIndexesIndexCollectionKeyArgs) ToGetIndexesIndexCollectionKeyOutput() GetIndexesIndexCollectionKeyOutput {
	return i.ToGetIndexesIndexCollectionKeyOutputWithContext(context.Background())
}

func (i GetIndexesIndexCollectionKeyArgs) ToGetIndexesIndexCollectionKeyOutputWithContext(ctx context.Context) GetIndexesIndexCollectionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexCollectionKeyOutput)
}

// GetIndexesIndexCollectionKeyArrayInput is an input type that accepts GetIndexesIndexCollectionKeyArray and GetIndexesIndexCollectionKeyArrayOutput values.
// You can construct a concrete instance of `GetIndexesIndexCollectionKeyArrayInput` via:
//
//	GetIndexesIndexCollectionKeyArray{ GetIndexesIndexCollectionKeyArgs{...} }
type GetIndexesIndexCollectionKeyArrayInput interface {
	pulumi.Input

	ToGetIndexesIndexCollectionKeyArrayOutput() GetIndexesIndexCollectionKeyArrayOutput
	ToGetIndexesIndexCollectionKeyArrayOutputWithContext(context.Context) GetIndexesIndexCollectionKeyArrayOutput
}

type GetIndexesIndexCollectionKeyArray []GetIndexesIndexCollectionKeyInput

func (GetIndexesIndexCollectionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndexCollectionKey)(nil)).Elem()
}

func (i GetIndexesIndexCollectionKeyArray) ToGetIndexesIndexCollectionKeyArrayOutput() GetIndexesIndexCollectionKeyArrayOutput {
	return i.ToGetIndexesIndexCollectionKeyArrayOutputWithContext(context.Background())
}

func (i GetIndexesIndexCollectionKeyArray) ToGetIndexesIndexCollectionKeyArrayOutputWithContext(ctx context.Context) GetIndexesIndexCollectionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIndexesIndexCollectionKeyArrayOutput)
}

type GetIndexesIndexCollectionKeyOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexCollectionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIndexesIndexCollectionKey)(nil)).Elem()
}

func (o GetIndexesIndexCollectionKeyOutput) ToGetIndexesIndexCollectionKeyOutput() GetIndexesIndexCollectionKeyOutput {
	return o
}

func (o GetIndexesIndexCollectionKeyOutput) ToGetIndexesIndexCollectionKeyOutputWithContext(ctx context.Context) GetIndexesIndexCollectionKeyOutput {
	return o
}

// The name of a column to be included as an index key.
func (o GetIndexesIndexCollectionKeyOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollectionKey) string { return v.ColumnName }).(pulumi.StringOutput)
}

// If the specified column is of type JSON, jsonFieldType contains the type of the field indicated by jsonPath.
func (o GetIndexesIndexCollectionKeyOutput) JsonFieldType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollectionKey) string { return v.JsonFieldType }).(pulumi.StringOutput)
}

// If the specified column is of type JSON, jsonPath contains a dotted path indicating the field within the JSON object that will be the index key.
func (o GetIndexesIndexCollectionKeyOutput) JsonPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetIndexesIndexCollectionKey) string { return v.JsonPath }).(pulumi.StringOutput)
}

type GetIndexesIndexCollectionKeyArrayOutput struct{ *pulumi.OutputState }

func (GetIndexesIndexCollectionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIndexesIndexCollectionKey)(nil)).Elem()
}

func (o GetIndexesIndexCollectionKeyArrayOutput) ToGetIndexesIndexCollectionKeyArrayOutput() GetIndexesIndexCollectionKeyArrayOutput {
	return o
}

func (o GetIndexesIndexCollectionKeyArrayOutput) ToGetIndexesIndexCollectionKeyArrayOutputWithContext(ctx context.Context) GetIndexesIndexCollectionKeyArrayOutput {
	return o
}

func (o GetIndexesIndexCollectionKeyArrayOutput) Index(i pulumi.IntInput) GetIndexesIndexCollectionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIndexesIndexCollectionKey {
		return vs[0].([]GetIndexesIndexCollectionKey)[vs[1].(int)]
	}).(GetIndexesIndexCollectionKeyOutput)
}

type GetTableSchema struct {
	// The columns of a table.
	Columns []GetTableSchemaColumn `pulumi:"columns"`
	// The identity properties of a table, if any.
	Identities []GetTableSchemaIdentity `pulumi:"identities"`
	// A list of column names that make up a key.
	PrimaryKeys []string `pulumi:"primaryKeys"`
	// A list of column names that make up a key.
	ShardKeys []string `pulumi:"shardKeys"`
	// The default Time-to-Live for the table, in days.
	Ttl int `pulumi:"ttl"`
}

// GetTableSchemaInput is an input type that accepts GetTableSchemaArgs and GetTableSchemaOutput values.
// You can construct a concrete instance of `GetTableSchemaInput` via:
//
//	GetTableSchemaArgs{...}
type GetTableSchemaInput interface {
	pulumi.Input

	ToGetTableSchemaOutput() GetTableSchemaOutput
	ToGetTableSchemaOutputWithContext(context.Context) GetTableSchemaOutput
}

type GetTableSchemaArgs struct {
	// The columns of a table.
	Columns GetTableSchemaColumnArrayInput `pulumi:"columns"`
	// The identity properties of a table, if any.
	Identities GetTableSchemaIdentityArrayInput `pulumi:"identities"`
	// A list of column names that make up a key.
	PrimaryKeys pulumi.StringArrayInput `pulumi:"primaryKeys"`
	// A list of column names that make up a key.
	ShardKeys pulumi.StringArrayInput `pulumi:"shardKeys"`
	// The default Time-to-Live for the table, in days.
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (GetTableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchema)(nil)).Elem()
}

func (i GetTableSchemaArgs) ToGetTableSchemaOutput() GetTableSchemaOutput {
	return i.ToGetTableSchemaOutputWithContext(context.Background())
}

func (i GetTableSchemaArgs) ToGetTableSchemaOutputWithContext(ctx context.Context) GetTableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaOutput)
}

// GetTableSchemaArrayInput is an input type that accepts GetTableSchemaArray and GetTableSchemaArrayOutput values.
// You can construct a concrete instance of `GetTableSchemaArrayInput` via:
//
//	GetTableSchemaArray{ GetTableSchemaArgs{...} }
type GetTableSchemaArrayInput interface {
	pulumi.Input

	ToGetTableSchemaArrayOutput() GetTableSchemaArrayOutput
	ToGetTableSchemaArrayOutputWithContext(context.Context) GetTableSchemaArrayOutput
}

type GetTableSchemaArray []GetTableSchemaInput

func (GetTableSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchema)(nil)).Elem()
}

func (i GetTableSchemaArray) ToGetTableSchemaArrayOutput() GetTableSchemaArrayOutput {
	return i.ToGetTableSchemaArrayOutputWithContext(context.Background())
}

func (i GetTableSchemaArray) ToGetTableSchemaArrayOutputWithContext(ctx context.Context) GetTableSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaArrayOutput)
}

type GetTableSchemaOutput struct{ *pulumi.OutputState }

func (GetTableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchema)(nil)).Elem()
}

func (o GetTableSchemaOutput) ToGetTableSchemaOutput() GetTableSchemaOutput {
	return o
}

func (o GetTableSchemaOutput) ToGetTableSchemaOutputWithContext(ctx context.Context) GetTableSchemaOutput {
	return o
}

// The columns of a table.
func (o GetTableSchemaOutput) Columns() GetTableSchemaColumnArrayOutput {
	return o.ApplyT(func(v GetTableSchema) []GetTableSchemaColumn { return v.Columns }).(GetTableSchemaColumnArrayOutput)
}

// The identity properties of a table, if any.
func (o GetTableSchemaOutput) Identities() GetTableSchemaIdentityArrayOutput {
	return o.ApplyT(func(v GetTableSchema) []GetTableSchemaIdentity { return v.Identities }).(GetTableSchemaIdentityArrayOutput)
}

// A list of column names that make up a key.
func (o GetTableSchemaOutput) PrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTableSchema) []string { return v.PrimaryKeys }).(pulumi.StringArrayOutput)
}

// A list of column names that make up a key.
func (o GetTableSchemaOutput) ShardKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTableSchema) []string { return v.ShardKeys }).(pulumi.StringArrayOutput)
}

// The default Time-to-Live for the table, in days.
func (o GetTableSchemaOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableSchema) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetTableSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetTableSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchema)(nil)).Elem()
}

func (o GetTableSchemaArrayOutput) ToGetTableSchemaArrayOutput() GetTableSchemaArrayOutput {
	return o
}

func (o GetTableSchemaArrayOutput) ToGetTableSchemaArrayOutputWithContext(ctx context.Context) GetTableSchemaArrayOutput {
	return o
}

func (o GetTableSchemaArrayOutput) Index(i pulumi.IntInput) GetTableSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableSchema {
		return vs[0].([]GetTableSchema)[vs[1].(int)]
	}).(GetTableSchemaOutput)
}

type GetTableSchemaColumn struct {
	// The column default value.
	DefaultValue string `pulumi:"defaultValue"`
	// True if the STRING column was declared AS UUID.
	IsAsUuid bool `pulumi:"isAsUuid"`
	// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
	IsGenerated bool `pulumi:"isGenerated"`
	// The column nullable flag.
	IsNullable bool `pulumi:"isNullable"`
	// The column name.
	Name string `pulumi:"name"`
	// The column type.
	Type string `pulumi:"type"`
}

// GetTableSchemaColumnInput is an input type that accepts GetTableSchemaColumnArgs and GetTableSchemaColumnOutput values.
// You can construct a concrete instance of `GetTableSchemaColumnInput` via:
//
//	GetTableSchemaColumnArgs{...}
type GetTableSchemaColumnInput interface {
	pulumi.Input

	ToGetTableSchemaColumnOutput() GetTableSchemaColumnOutput
	ToGetTableSchemaColumnOutputWithContext(context.Context) GetTableSchemaColumnOutput
}

type GetTableSchemaColumnArgs struct {
	// The column default value.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// True if the STRING column was declared AS UUID.
	IsAsUuid pulumi.BoolInput `pulumi:"isAsUuid"`
	// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
	IsGenerated pulumi.BoolInput `pulumi:"isGenerated"`
	// The column nullable flag.
	IsNullable pulumi.BoolInput `pulumi:"isNullable"`
	// The column name.
	Name pulumi.StringInput `pulumi:"name"`
	// The column type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTableSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchemaColumn)(nil)).Elem()
}

func (i GetTableSchemaColumnArgs) ToGetTableSchemaColumnOutput() GetTableSchemaColumnOutput {
	return i.ToGetTableSchemaColumnOutputWithContext(context.Background())
}

func (i GetTableSchemaColumnArgs) ToGetTableSchemaColumnOutputWithContext(ctx context.Context) GetTableSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaColumnOutput)
}

// GetTableSchemaColumnArrayInput is an input type that accepts GetTableSchemaColumnArray and GetTableSchemaColumnArrayOutput values.
// You can construct a concrete instance of `GetTableSchemaColumnArrayInput` via:
//
//	GetTableSchemaColumnArray{ GetTableSchemaColumnArgs{...} }
type GetTableSchemaColumnArrayInput interface {
	pulumi.Input

	ToGetTableSchemaColumnArrayOutput() GetTableSchemaColumnArrayOutput
	ToGetTableSchemaColumnArrayOutputWithContext(context.Context) GetTableSchemaColumnArrayOutput
}

type GetTableSchemaColumnArray []GetTableSchemaColumnInput

func (GetTableSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchemaColumn)(nil)).Elem()
}

func (i GetTableSchemaColumnArray) ToGetTableSchemaColumnArrayOutput() GetTableSchemaColumnArrayOutput {
	return i.ToGetTableSchemaColumnArrayOutputWithContext(context.Background())
}

func (i GetTableSchemaColumnArray) ToGetTableSchemaColumnArrayOutputWithContext(ctx context.Context) GetTableSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaColumnArrayOutput)
}

type GetTableSchemaColumnOutput struct{ *pulumi.OutputState }

func (GetTableSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchemaColumn)(nil)).Elem()
}

func (o GetTableSchemaColumnOutput) ToGetTableSchemaColumnOutput() GetTableSchemaColumnOutput {
	return o
}

func (o GetTableSchemaColumnOutput) ToGetTableSchemaColumnOutputWithContext(ctx context.Context) GetTableSchemaColumnOutput {
	return o
}

// The column default value.
func (o GetTableSchemaColumnOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// True if the STRING column was declared AS UUID.
func (o GetTableSchemaColumnOutput) IsAsUuid() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) bool { return v.IsAsUuid }).(pulumi.BoolOutput)
}

// True if the STRING AS UUID column is also GENERATED BY DEFAULT.
func (o GetTableSchemaColumnOutput) IsGenerated() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) bool { return v.IsGenerated }).(pulumi.BoolOutput)
}

// The column nullable flag.
func (o GetTableSchemaColumnOutput) IsNullable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) bool { return v.IsNullable }).(pulumi.BoolOutput)
}

// The column name.
func (o GetTableSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The column type.
func (o GetTableSchemaColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableSchemaColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetTableSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (GetTableSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchemaColumn)(nil)).Elem()
}

func (o GetTableSchemaColumnArrayOutput) ToGetTableSchemaColumnArrayOutput() GetTableSchemaColumnArrayOutput {
	return o
}

func (o GetTableSchemaColumnArrayOutput) ToGetTableSchemaColumnArrayOutputWithContext(ctx context.Context) GetTableSchemaColumnArrayOutput {
	return o
}

func (o GetTableSchemaColumnArrayOutput) Index(i pulumi.IntInput) GetTableSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableSchemaColumn {
		return vs[0].([]GetTableSchemaColumn)[vs[1].(int)]
	}).(GetTableSchemaColumnOutput)
}

type GetTableSchemaIdentity struct {
	// The name of the identity column.
	ColumnName string `pulumi:"columnName"`
	// True if the identity value is GENERATED ALWAYS.
	IsAlways bool `pulumi:"isAlways"`
	// True if the identity value is GENERATED BY DEFAULT ON NULL.
	IsNull bool `pulumi:"isNull"`
}

// GetTableSchemaIdentityInput is an input type that accepts GetTableSchemaIdentityArgs and GetTableSchemaIdentityOutput values.
// You can construct a concrete instance of `GetTableSchemaIdentityInput` via:
//
//	GetTableSchemaIdentityArgs{...}
type GetTableSchemaIdentityInput interface {
	pulumi.Input

	ToGetTableSchemaIdentityOutput() GetTableSchemaIdentityOutput
	ToGetTableSchemaIdentityOutputWithContext(context.Context) GetTableSchemaIdentityOutput
}

type GetTableSchemaIdentityArgs struct {
	// The name of the identity column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// True if the identity value is GENERATED ALWAYS.
	IsAlways pulumi.BoolInput `pulumi:"isAlways"`
	// True if the identity value is GENERATED BY DEFAULT ON NULL.
	IsNull pulumi.BoolInput `pulumi:"isNull"`
}

func (GetTableSchemaIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchemaIdentity)(nil)).Elem()
}

func (i GetTableSchemaIdentityArgs) ToGetTableSchemaIdentityOutput() GetTableSchemaIdentityOutput {
	return i.ToGetTableSchemaIdentityOutputWithContext(context.Background())
}

func (i GetTableSchemaIdentityArgs) ToGetTableSchemaIdentityOutputWithContext(ctx context.Context) GetTableSchemaIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaIdentityOutput)
}

// GetTableSchemaIdentityArrayInput is an input type that accepts GetTableSchemaIdentityArray and GetTableSchemaIdentityArrayOutput values.
// You can construct a concrete instance of `GetTableSchemaIdentityArrayInput` via:
//
//	GetTableSchemaIdentityArray{ GetTableSchemaIdentityArgs{...} }
type GetTableSchemaIdentityArrayInput interface {
	pulumi.Input

	ToGetTableSchemaIdentityArrayOutput() GetTableSchemaIdentityArrayOutput
	ToGetTableSchemaIdentityArrayOutputWithContext(context.Context) GetTableSchemaIdentityArrayOutput
}

type GetTableSchemaIdentityArray []GetTableSchemaIdentityInput

func (GetTableSchemaIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchemaIdentity)(nil)).Elem()
}

func (i GetTableSchemaIdentityArray) ToGetTableSchemaIdentityArrayOutput() GetTableSchemaIdentityArrayOutput {
	return i.ToGetTableSchemaIdentityArrayOutputWithContext(context.Background())
}

func (i GetTableSchemaIdentityArray) ToGetTableSchemaIdentityArrayOutputWithContext(ctx context.Context) GetTableSchemaIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableSchemaIdentityArrayOutput)
}

type GetTableSchemaIdentityOutput struct{ *pulumi.OutputState }

func (GetTableSchemaIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableSchemaIdentity)(nil)).Elem()
}

func (o GetTableSchemaIdentityOutput) ToGetTableSchemaIdentityOutput() GetTableSchemaIdentityOutput {
	return o
}

func (o GetTableSchemaIdentityOutput) ToGetTableSchemaIdentityOutputWithContext(ctx context.Context) GetTableSchemaIdentityOutput {
	return o
}

// The name of the identity column.
func (o GetTableSchemaIdentityOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableSchemaIdentity) string { return v.ColumnName }).(pulumi.StringOutput)
}

// True if the identity value is GENERATED ALWAYS.
func (o GetTableSchemaIdentityOutput) IsAlways() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableSchemaIdentity) bool { return v.IsAlways }).(pulumi.BoolOutput)
}

// True if the identity value is GENERATED BY DEFAULT ON NULL.
func (o GetTableSchemaIdentityOutput) IsNull() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTableSchemaIdentity) bool { return v.IsNull }).(pulumi.BoolOutput)
}

type GetTableSchemaIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetTableSchemaIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableSchemaIdentity)(nil)).Elem()
}

func (o GetTableSchemaIdentityArrayOutput) ToGetTableSchemaIdentityArrayOutput() GetTableSchemaIdentityArrayOutput {
	return o
}

func (o GetTableSchemaIdentityArrayOutput) ToGetTableSchemaIdentityArrayOutputWithContext(ctx context.Context) GetTableSchemaIdentityArrayOutput {
	return o
}

func (o GetTableSchemaIdentityArrayOutput) Index(i pulumi.IntInput) GetTableSchemaIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableSchemaIdentity {
		return vs[0].([]GetTableSchemaIdentity)[vs[1].(int)]
	}).(GetTableSchemaIdentityOutput)
}

type GetTableTableLimit struct {
	// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode string `pulumi:"capacityMode"`
	// Maximum sustained read throughput limit for the table.
	MaxReadUnits int `pulumi:"maxReadUnits"`
	// Maximum size of storage used by the table.
	MaxStorageInGbs int `pulumi:"maxStorageInGbs"`
	// Maximum sustained write throughput limit for the table.
	MaxWriteUnits int `pulumi:"maxWriteUnits"`
}

// GetTableTableLimitInput is an input type that accepts GetTableTableLimitArgs and GetTableTableLimitOutput values.
// You can construct a concrete instance of `GetTableTableLimitInput` via:
//
//	GetTableTableLimitArgs{...}
type GetTableTableLimitInput interface {
	pulumi.Input

	ToGetTableTableLimitOutput() GetTableTableLimitOutput
	ToGetTableTableLimitOutputWithContext(context.Context) GetTableTableLimitOutput
}

type GetTableTableLimitArgs struct {
	// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode pulumi.StringInput `pulumi:"capacityMode"`
	// Maximum sustained read throughput limit for the table.
	MaxReadUnits pulumi.IntInput `pulumi:"maxReadUnits"`
	// Maximum size of storage used by the table.
	MaxStorageInGbs pulumi.IntInput `pulumi:"maxStorageInGbs"`
	// Maximum sustained write throughput limit for the table.
	MaxWriteUnits pulumi.IntInput `pulumi:"maxWriteUnits"`
}

func (GetTableTableLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTableLimit)(nil)).Elem()
}

func (i GetTableTableLimitArgs) ToGetTableTableLimitOutput() GetTableTableLimitOutput {
	return i.ToGetTableTableLimitOutputWithContext(context.Background())
}

func (i GetTableTableLimitArgs) ToGetTableTableLimitOutputWithContext(ctx context.Context) GetTableTableLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableTableLimitOutput)
}

// GetTableTableLimitArrayInput is an input type that accepts GetTableTableLimitArray and GetTableTableLimitArrayOutput values.
// You can construct a concrete instance of `GetTableTableLimitArrayInput` via:
//
//	GetTableTableLimitArray{ GetTableTableLimitArgs{...} }
type GetTableTableLimitArrayInput interface {
	pulumi.Input

	ToGetTableTableLimitArrayOutput() GetTableTableLimitArrayOutput
	ToGetTableTableLimitArrayOutputWithContext(context.Context) GetTableTableLimitArrayOutput
}

type GetTableTableLimitArray []GetTableTableLimitInput

func (GetTableTableLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableTableLimit)(nil)).Elem()
}

func (i GetTableTableLimitArray) ToGetTableTableLimitArrayOutput() GetTableTableLimitArrayOutput {
	return i.ToGetTableTableLimitArrayOutputWithContext(context.Background())
}

func (i GetTableTableLimitArray) ToGetTableTableLimitArrayOutputWithContext(ctx context.Context) GetTableTableLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTableTableLimitArrayOutput)
}

type GetTableTableLimitOutput struct{ *pulumi.OutputState }

func (GetTableTableLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTableTableLimit)(nil)).Elem()
}

func (o GetTableTableLimitOutput) ToGetTableTableLimitOutput() GetTableTableLimitOutput {
	return o
}

func (o GetTableTableLimitOutput) ToGetTableTableLimitOutputWithContext(ctx context.Context) GetTableTableLimitOutput {
	return o
}

// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
func (o GetTableTableLimitOutput) CapacityMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetTableTableLimit) string { return v.CapacityMode }).(pulumi.StringOutput)
}

// Maximum sustained read throughput limit for the table.
func (o GetTableTableLimitOutput) MaxReadUnits() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableTableLimit) int { return v.MaxReadUnits }).(pulumi.IntOutput)
}

// Maximum size of storage used by the table.
func (o GetTableTableLimitOutput) MaxStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableTableLimit) int { return v.MaxStorageInGbs }).(pulumi.IntOutput)
}

// Maximum sustained write throughput limit for the table.
func (o GetTableTableLimitOutput) MaxWriteUnits() pulumi.IntOutput {
	return o.ApplyT(func(v GetTableTableLimit) int { return v.MaxWriteUnits }).(pulumi.IntOutput)
}

type GetTableTableLimitArrayOutput struct{ *pulumi.OutputState }

func (GetTableTableLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTableTableLimit)(nil)).Elem()
}

func (o GetTableTableLimitArrayOutput) ToGetTableTableLimitArrayOutput() GetTableTableLimitArrayOutput {
	return o
}

func (o GetTableTableLimitArrayOutput) ToGetTableTableLimitArrayOutputWithContext(ctx context.Context) GetTableTableLimitArrayOutput {
	return o
}

func (o GetTableTableLimitArrayOutput) Index(i pulumi.IntInput) GetTableTableLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTableTableLimit {
		return vs[0].([]GetTableTableLimit)[vs[1].(int)]
	}).(GetTableTableLimitOutput)
}

type GetTablesFilter struct {
	// A shell-globbing-style (*?[]) filter for names.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetTablesFilterInput is an input type that accepts GetTablesFilterArgs and GetTablesFilterOutput values.
// You can construct a concrete instance of `GetTablesFilterInput` via:
//
//	GetTablesFilterArgs{...}
type GetTablesFilterInput interface {
	pulumi.Input

	ToGetTablesFilterOutput() GetTablesFilterOutput
	ToGetTablesFilterOutputWithContext(context.Context) GetTablesFilterOutput
}

type GetTablesFilterArgs struct {
	// A shell-globbing-style (*?[]) filter for names.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetTablesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesFilter)(nil)).Elem()
}

func (i GetTablesFilterArgs) ToGetTablesFilterOutput() GetTablesFilterOutput {
	return i.ToGetTablesFilterOutputWithContext(context.Background())
}

func (i GetTablesFilterArgs) ToGetTablesFilterOutputWithContext(ctx context.Context) GetTablesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesFilterOutput)
}

// GetTablesFilterArrayInput is an input type that accepts GetTablesFilterArray and GetTablesFilterArrayOutput values.
// You can construct a concrete instance of `GetTablesFilterArrayInput` via:
//
//	GetTablesFilterArray{ GetTablesFilterArgs{...} }
type GetTablesFilterArrayInput interface {
	pulumi.Input

	ToGetTablesFilterArrayOutput() GetTablesFilterArrayOutput
	ToGetTablesFilterArrayOutputWithContext(context.Context) GetTablesFilterArrayOutput
}

type GetTablesFilterArray []GetTablesFilterInput

func (GetTablesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesFilter)(nil)).Elem()
}

func (i GetTablesFilterArray) ToGetTablesFilterArrayOutput() GetTablesFilterArrayOutput {
	return i.ToGetTablesFilterArrayOutputWithContext(context.Background())
}

func (i GetTablesFilterArray) ToGetTablesFilterArrayOutputWithContext(ctx context.Context) GetTablesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesFilterArrayOutput)
}

type GetTablesFilterOutput struct{ *pulumi.OutputState }

func (GetTablesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesFilter)(nil)).Elem()
}

func (o GetTablesFilterOutput) ToGetTablesFilterOutput() GetTablesFilterOutput {
	return o
}

func (o GetTablesFilterOutput) ToGetTablesFilterOutputWithContext(ctx context.Context) GetTablesFilterOutput {
	return o
}

// A shell-globbing-style (*?[]) filter for names.
func (o GetTablesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTablesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetTablesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTablesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetTablesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetTablesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesFilter)(nil)).Elem()
}

func (o GetTablesFilterArrayOutput) ToGetTablesFilterArrayOutput() GetTablesFilterArrayOutput {
	return o
}

func (o GetTablesFilterArrayOutput) ToGetTablesFilterArrayOutputWithContext(ctx context.Context) GetTablesFilterArrayOutput {
	return o
}

func (o GetTablesFilterArrayOutput) Index(i pulumi.IntInput) GetTablesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesFilter {
		return vs[0].([]GetTablesFilter)[vs[1].(int)]
	}).(GetTablesFilterOutput)
}

type GetTablesTableCollection struct {
	// The ID of a table's compartment.
	CompartmentId string `pulumi:"compartmentId"`
	DdlStatement  string `pulumi:"ddlStatement"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Unique identifier that is immutable.
	Id string `pulumi:"id"`
	// True if this table can be reclaimed after an idle period.
	IsAutoReclaimable bool `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails string `pulumi:"lifecycleDetails"`
	// A shell-globbing-style (*?[]) filter for names.
	Name    string                           `pulumi:"name"`
	Schemas []GetTablesTableCollectionSchema `pulumi:"schemas"`
	// Filter list by the lifecycle state of the item.
	State string `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// Throughput and storage limits configuration of a table.
	TableLimits []GetTablesTableCollectionTableLimit `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated string `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration string `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated string `pulumi:"timeUpdated"`
}

// GetTablesTableCollectionInput is an input type that accepts GetTablesTableCollectionArgs and GetTablesTableCollectionOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionInput` via:
//
//	GetTablesTableCollectionArgs{...}
type GetTablesTableCollectionInput interface {
	pulumi.Input

	ToGetTablesTableCollectionOutput() GetTablesTableCollectionOutput
	ToGetTablesTableCollectionOutputWithContext(context.Context) GetTablesTableCollectionOutput
}

type GetTablesTableCollectionArgs struct {
	// The ID of a table's compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	DdlStatement  pulumi.StringInput `pulumi:"ddlStatement"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// Unique identifier that is immutable.
	Id pulumi.StringInput `pulumi:"id"`
	// True if this table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolInput `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringInput `pulumi:"lifecycleDetails"`
	// A shell-globbing-style (*?[]) filter for names.
	Name    pulumi.StringInput                       `pulumi:"name"`
	Schemas GetTablesTableCollectionSchemaArrayInput `pulumi:"schemas"`
	// Filter list by the lifecycle state of the item.
	State pulumi.StringInput `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags pulumi.MapInput `pulumi:"systemTags"`
	// Throughput and storage limits configuration of a table.
	TableLimits GetTablesTableCollectionTableLimitArrayInput `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration pulumi.StringInput `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
}

func (GetTablesTableCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollection)(nil)).Elem()
}

func (i GetTablesTableCollectionArgs) ToGetTablesTableCollectionOutput() GetTablesTableCollectionOutput {
	return i.ToGetTablesTableCollectionOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionArgs) ToGetTablesTableCollectionOutputWithContext(ctx context.Context) GetTablesTableCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionOutput)
}

// GetTablesTableCollectionArrayInput is an input type that accepts GetTablesTableCollectionArray and GetTablesTableCollectionArrayOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionArrayInput` via:
//
//	GetTablesTableCollectionArray{ GetTablesTableCollectionArgs{...} }
type GetTablesTableCollectionArrayInput interface {
	pulumi.Input

	ToGetTablesTableCollectionArrayOutput() GetTablesTableCollectionArrayOutput
	ToGetTablesTableCollectionArrayOutputWithContext(context.Context) GetTablesTableCollectionArrayOutput
}

type GetTablesTableCollectionArray []GetTablesTableCollectionInput

func (GetTablesTableCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollection)(nil)).Elem()
}

func (i GetTablesTableCollectionArray) ToGetTablesTableCollectionArrayOutput() GetTablesTableCollectionArrayOutput {
	return i.ToGetTablesTableCollectionArrayOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionArray) ToGetTablesTableCollectionArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionArrayOutput)
}

type GetTablesTableCollectionOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollection)(nil)).Elem()
}

func (o GetTablesTableCollectionOutput) ToGetTablesTableCollectionOutput() GetTablesTableCollectionOutput {
	return o
}

func (o GetTablesTableCollectionOutput) ToGetTablesTableCollectionOutputWithContext(ctx context.Context) GetTablesTableCollectionOutput {
	return o
}

// The ID of a table's compartment.
func (o GetTablesTableCollectionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetTablesTableCollectionOutput) DdlStatement() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.DdlStatement }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
func (o GetTablesTableCollectionOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetTablesTableCollection) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetTablesTableCollectionOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetTablesTableCollection) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Unique identifier that is immutable.
func (o GetTablesTableCollectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.Id }).(pulumi.StringOutput)
}

// True if this table can be reclaimed after an idle period.
func (o GetTablesTableCollectionOutput) IsAutoReclaimable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollection) bool { return v.IsAutoReclaimable }).(pulumi.BoolOutput)
}

// A message describing the current state in more detail.
func (o GetTablesTableCollectionOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// A shell-globbing-style (*?[]) filter for names.
func (o GetTablesTableCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesTableCollectionOutput) Schemas() GetTablesTableCollectionSchemaArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollection) []GetTablesTableCollectionSchema { return v.Schemas }).(GetTablesTableCollectionSchemaArrayOutput)
}

// Filter list by the lifecycle state of the item.
func (o GetTablesTableCollectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.State }).(pulumi.StringOutput)
}

// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
func (o GetTablesTableCollectionOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetTablesTableCollection) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// Throughput and storage limits configuration of a table.
func (o GetTablesTableCollectionOutput) TableLimits() GetTablesTableCollectionTableLimitArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollection) []GetTablesTableCollectionTableLimit { return v.TableLimits }).(GetTablesTableCollectionTableLimitArrayOutput)
}

// The time the the table was created. An RFC3339 formatted datetime string.
func (o GetTablesTableCollectionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
func (o GetTablesTableCollectionOutput) TimeOfExpiration() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.TimeOfExpiration }).(pulumi.StringOutput)
}

// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
func (o GetTablesTableCollectionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollection) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

type GetTablesTableCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollection)(nil)).Elem()
}

func (o GetTablesTableCollectionArrayOutput) ToGetTablesTableCollectionArrayOutput() GetTablesTableCollectionArrayOutput {
	return o
}

func (o GetTablesTableCollectionArrayOutput) ToGetTablesTableCollectionArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionArrayOutput {
	return o
}

func (o GetTablesTableCollectionArrayOutput) Index(i pulumi.IntInput) GetTablesTableCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableCollection {
		return vs[0].([]GetTablesTableCollection)[vs[1].(int)]
	}).(GetTablesTableCollectionOutput)
}

type GetTablesTableCollectionSchema struct {
	Columns     []GetTablesTableCollectionSchemaColumn   `pulumi:"columns"`
	Identities  []GetTablesTableCollectionSchemaIdentity `pulumi:"identities"`
	PrimaryKeys []string                                 `pulumi:"primaryKeys"`
	ShardKeys   []string                                 `pulumi:"shardKeys"`
	Ttl         int                                      `pulumi:"ttl"`
}

// GetTablesTableCollectionSchemaInput is an input type that accepts GetTablesTableCollectionSchemaArgs and GetTablesTableCollectionSchemaOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaInput` via:
//
//	GetTablesTableCollectionSchemaArgs{...}
type GetTablesTableCollectionSchemaInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaOutput() GetTablesTableCollectionSchemaOutput
	ToGetTablesTableCollectionSchemaOutputWithContext(context.Context) GetTablesTableCollectionSchemaOutput
}

type GetTablesTableCollectionSchemaArgs struct {
	Columns     GetTablesTableCollectionSchemaColumnArrayInput   `pulumi:"columns"`
	Identities  GetTablesTableCollectionSchemaIdentityArrayInput `pulumi:"identities"`
	PrimaryKeys pulumi.StringArrayInput                          `pulumi:"primaryKeys"`
	ShardKeys   pulumi.StringArrayInput                          `pulumi:"shardKeys"`
	Ttl         pulumi.IntInput                                  `pulumi:"ttl"`
}

func (GetTablesTableCollectionSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchema)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaArgs) ToGetTablesTableCollectionSchemaOutput() GetTablesTableCollectionSchemaOutput {
	return i.ToGetTablesTableCollectionSchemaOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaArgs) ToGetTablesTableCollectionSchemaOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaOutput)
}

// GetTablesTableCollectionSchemaArrayInput is an input type that accepts GetTablesTableCollectionSchemaArray and GetTablesTableCollectionSchemaArrayOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaArrayInput` via:
//
//	GetTablesTableCollectionSchemaArray{ GetTablesTableCollectionSchemaArgs{...} }
type GetTablesTableCollectionSchemaArrayInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaArrayOutput() GetTablesTableCollectionSchemaArrayOutput
	ToGetTablesTableCollectionSchemaArrayOutputWithContext(context.Context) GetTablesTableCollectionSchemaArrayOutput
}

type GetTablesTableCollectionSchemaArray []GetTablesTableCollectionSchemaInput

func (GetTablesTableCollectionSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchema)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaArray) ToGetTablesTableCollectionSchemaArrayOutput() GetTablesTableCollectionSchemaArrayOutput {
	return i.ToGetTablesTableCollectionSchemaArrayOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaArray) ToGetTablesTableCollectionSchemaArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaArrayOutput)
}

type GetTablesTableCollectionSchemaOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchema)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaOutput) ToGetTablesTableCollectionSchemaOutput() GetTablesTableCollectionSchemaOutput {
	return o
}

func (o GetTablesTableCollectionSchemaOutput) ToGetTablesTableCollectionSchemaOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaOutput {
	return o
}

func (o GetTablesTableCollectionSchemaOutput) Columns() GetTablesTableCollectionSchemaColumnArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchema) []GetTablesTableCollectionSchemaColumn { return v.Columns }).(GetTablesTableCollectionSchemaColumnArrayOutput)
}

func (o GetTablesTableCollectionSchemaOutput) Identities() GetTablesTableCollectionSchemaIdentityArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchema) []GetTablesTableCollectionSchemaIdentity { return v.Identities }).(GetTablesTableCollectionSchemaIdentityArrayOutput)
}

func (o GetTablesTableCollectionSchemaOutput) PrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchema) []string { return v.PrimaryKeys }).(pulumi.StringArrayOutput)
}

func (o GetTablesTableCollectionSchemaOutput) ShardKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchema) []string { return v.ShardKeys }).(pulumi.StringArrayOutput)
}

func (o GetTablesTableCollectionSchemaOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchema) int { return v.Ttl }).(pulumi.IntOutput)
}

type GetTablesTableCollectionSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchema)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaArrayOutput) ToGetTablesTableCollectionSchemaArrayOutput() GetTablesTableCollectionSchemaArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaArrayOutput) ToGetTablesTableCollectionSchemaArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaArrayOutput) Index(i pulumi.IntInput) GetTablesTableCollectionSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableCollectionSchema {
		return vs[0].([]GetTablesTableCollectionSchema)[vs[1].(int)]
	}).(GetTablesTableCollectionSchemaOutput)
}

type GetTablesTableCollectionSchemaColumn struct {
	DefaultValue string `pulumi:"defaultValue"`
	IsAsUuid     bool   `pulumi:"isAsUuid"`
	IsGenerated  bool   `pulumi:"isGenerated"`
	IsNullable   bool   `pulumi:"isNullable"`
	// A shell-globbing-style (*?[]) filter for names.
	Name string `pulumi:"name"`
	Type string `pulumi:"type"`
}

// GetTablesTableCollectionSchemaColumnInput is an input type that accepts GetTablesTableCollectionSchemaColumnArgs and GetTablesTableCollectionSchemaColumnOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaColumnInput` via:
//
//	GetTablesTableCollectionSchemaColumnArgs{...}
type GetTablesTableCollectionSchemaColumnInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaColumnOutput() GetTablesTableCollectionSchemaColumnOutput
	ToGetTablesTableCollectionSchemaColumnOutputWithContext(context.Context) GetTablesTableCollectionSchemaColumnOutput
}

type GetTablesTableCollectionSchemaColumnArgs struct {
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	IsAsUuid     pulumi.BoolInput   `pulumi:"isAsUuid"`
	IsGenerated  pulumi.BoolInput   `pulumi:"isGenerated"`
	IsNullable   pulumi.BoolInput   `pulumi:"isNullable"`
	// A shell-globbing-style (*?[]) filter for names.
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTablesTableCollectionSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchemaColumn)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaColumnArgs) ToGetTablesTableCollectionSchemaColumnOutput() GetTablesTableCollectionSchemaColumnOutput {
	return i.ToGetTablesTableCollectionSchemaColumnOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaColumnArgs) ToGetTablesTableCollectionSchemaColumnOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaColumnOutput)
}

// GetTablesTableCollectionSchemaColumnArrayInput is an input type that accepts GetTablesTableCollectionSchemaColumnArray and GetTablesTableCollectionSchemaColumnArrayOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaColumnArrayInput` via:
//
//	GetTablesTableCollectionSchemaColumnArray{ GetTablesTableCollectionSchemaColumnArgs{...} }
type GetTablesTableCollectionSchemaColumnArrayInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaColumnArrayOutput() GetTablesTableCollectionSchemaColumnArrayOutput
	ToGetTablesTableCollectionSchemaColumnArrayOutputWithContext(context.Context) GetTablesTableCollectionSchemaColumnArrayOutput
}

type GetTablesTableCollectionSchemaColumnArray []GetTablesTableCollectionSchemaColumnInput

func (GetTablesTableCollectionSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchemaColumn)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaColumnArray) ToGetTablesTableCollectionSchemaColumnArrayOutput() GetTablesTableCollectionSchemaColumnArrayOutput {
	return i.ToGetTablesTableCollectionSchemaColumnArrayOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaColumnArray) ToGetTablesTableCollectionSchemaColumnArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaColumnArrayOutput)
}

type GetTablesTableCollectionSchemaColumnOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchemaColumn)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaColumnOutput) ToGetTablesTableCollectionSchemaColumnOutput() GetTablesTableCollectionSchemaColumnOutput {
	return o
}

func (o GetTablesTableCollectionSchemaColumnOutput) ToGetTablesTableCollectionSchemaColumnOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaColumnOutput {
	return o
}

func (o GetTablesTableCollectionSchemaColumnOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) string { return v.DefaultValue }).(pulumi.StringOutput)
}

func (o GetTablesTableCollectionSchemaColumnOutput) IsAsUuid() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) bool { return v.IsAsUuid }).(pulumi.BoolOutput)
}

func (o GetTablesTableCollectionSchemaColumnOutput) IsGenerated() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) bool { return v.IsGenerated }).(pulumi.BoolOutput)
}

func (o GetTablesTableCollectionSchemaColumnOutput) IsNullable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) bool { return v.IsNullable }).(pulumi.BoolOutput)
}

// A shell-globbing-style (*?[]) filter for names.
func (o GetTablesTableCollectionSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesTableCollectionSchemaColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetTablesTableCollectionSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchemaColumn)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaColumnArrayOutput) ToGetTablesTableCollectionSchemaColumnArrayOutput() GetTablesTableCollectionSchemaColumnArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaColumnArrayOutput) ToGetTablesTableCollectionSchemaColumnArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaColumnArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaColumnArrayOutput) Index(i pulumi.IntInput) GetTablesTableCollectionSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableCollectionSchemaColumn {
		return vs[0].([]GetTablesTableCollectionSchemaColumn)[vs[1].(int)]
	}).(GetTablesTableCollectionSchemaColumnOutput)
}

type GetTablesTableCollectionSchemaIdentity struct {
	ColumnName string `pulumi:"columnName"`
	IsAlways   bool   `pulumi:"isAlways"`
	IsNull     bool   `pulumi:"isNull"`
}

// GetTablesTableCollectionSchemaIdentityInput is an input type that accepts GetTablesTableCollectionSchemaIdentityArgs and GetTablesTableCollectionSchemaIdentityOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaIdentityInput` via:
//
//	GetTablesTableCollectionSchemaIdentityArgs{...}
type GetTablesTableCollectionSchemaIdentityInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaIdentityOutput() GetTablesTableCollectionSchemaIdentityOutput
	ToGetTablesTableCollectionSchemaIdentityOutputWithContext(context.Context) GetTablesTableCollectionSchemaIdentityOutput
}

type GetTablesTableCollectionSchemaIdentityArgs struct {
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	IsAlways   pulumi.BoolInput   `pulumi:"isAlways"`
	IsNull     pulumi.BoolInput   `pulumi:"isNull"`
}

func (GetTablesTableCollectionSchemaIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchemaIdentity)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaIdentityArgs) ToGetTablesTableCollectionSchemaIdentityOutput() GetTablesTableCollectionSchemaIdentityOutput {
	return i.ToGetTablesTableCollectionSchemaIdentityOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaIdentityArgs) ToGetTablesTableCollectionSchemaIdentityOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaIdentityOutput)
}

// GetTablesTableCollectionSchemaIdentityArrayInput is an input type that accepts GetTablesTableCollectionSchemaIdentityArray and GetTablesTableCollectionSchemaIdentityArrayOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionSchemaIdentityArrayInput` via:
//
//	GetTablesTableCollectionSchemaIdentityArray{ GetTablesTableCollectionSchemaIdentityArgs{...} }
type GetTablesTableCollectionSchemaIdentityArrayInput interface {
	pulumi.Input

	ToGetTablesTableCollectionSchemaIdentityArrayOutput() GetTablesTableCollectionSchemaIdentityArrayOutput
	ToGetTablesTableCollectionSchemaIdentityArrayOutputWithContext(context.Context) GetTablesTableCollectionSchemaIdentityArrayOutput
}

type GetTablesTableCollectionSchemaIdentityArray []GetTablesTableCollectionSchemaIdentityInput

func (GetTablesTableCollectionSchemaIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchemaIdentity)(nil)).Elem()
}

func (i GetTablesTableCollectionSchemaIdentityArray) ToGetTablesTableCollectionSchemaIdentityArrayOutput() GetTablesTableCollectionSchemaIdentityArrayOutput {
	return i.ToGetTablesTableCollectionSchemaIdentityArrayOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionSchemaIdentityArray) ToGetTablesTableCollectionSchemaIdentityArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionSchemaIdentityArrayOutput)
}

type GetTablesTableCollectionSchemaIdentityOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionSchemaIdentity)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaIdentityOutput) ToGetTablesTableCollectionSchemaIdentityOutput() GetTablesTableCollectionSchemaIdentityOutput {
	return o
}

func (o GetTablesTableCollectionSchemaIdentityOutput) ToGetTablesTableCollectionSchemaIdentityOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaIdentityOutput {
	return o
}

func (o GetTablesTableCollectionSchemaIdentityOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaIdentity) string { return v.ColumnName }).(pulumi.StringOutput)
}

func (o GetTablesTableCollectionSchemaIdentityOutput) IsAlways() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaIdentity) bool { return v.IsAlways }).(pulumi.BoolOutput)
}

func (o GetTablesTableCollectionSchemaIdentityOutput) IsNull() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTablesTableCollectionSchemaIdentity) bool { return v.IsNull }).(pulumi.BoolOutput)
}

type GetTablesTableCollectionSchemaIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionSchemaIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionSchemaIdentity)(nil)).Elem()
}

func (o GetTablesTableCollectionSchemaIdentityArrayOutput) ToGetTablesTableCollectionSchemaIdentityArrayOutput() GetTablesTableCollectionSchemaIdentityArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaIdentityArrayOutput) ToGetTablesTableCollectionSchemaIdentityArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionSchemaIdentityArrayOutput {
	return o
}

func (o GetTablesTableCollectionSchemaIdentityArrayOutput) Index(i pulumi.IntInput) GetTablesTableCollectionSchemaIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableCollectionSchemaIdentity {
		return vs[0].([]GetTablesTableCollectionSchemaIdentity)[vs[1].(int)]
	}).(GetTablesTableCollectionSchemaIdentityOutput)
}

type GetTablesTableCollectionTableLimit struct {
	// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode string `pulumi:"capacityMode"`
	// Maximum sustained read throughput limit for the table.
	MaxReadUnits int `pulumi:"maxReadUnits"`
	// Maximum size of storage used by the table.
	MaxStorageInGbs int `pulumi:"maxStorageInGbs"`
	// Maximum sustained write throughput limit for the table.
	MaxWriteUnits int `pulumi:"maxWriteUnits"`
}

// GetTablesTableCollectionTableLimitInput is an input type that accepts GetTablesTableCollectionTableLimitArgs and GetTablesTableCollectionTableLimitOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionTableLimitInput` via:
//
//	GetTablesTableCollectionTableLimitArgs{...}
type GetTablesTableCollectionTableLimitInput interface {
	pulumi.Input

	ToGetTablesTableCollectionTableLimitOutput() GetTablesTableCollectionTableLimitOutput
	ToGetTablesTableCollectionTableLimitOutputWithContext(context.Context) GetTablesTableCollectionTableLimitOutput
}

type GetTablesTableCollectionTableLimitArgs struct {
	// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
	CapacityMode pulumi.StringInput `pulumi:"capacityMode"`
	// Maximum sustained read throughput limit for the table.
	MaxReadUnits pulumi.IntInput `pulumi:"maxReadUnits"`
	// Maximum size of storage used by the table.
	MaxStorageInGbs pulumi.IntInput `pulumi:"maxStorageInGbs"`
	// Maximum sustained write throughput limit for the table.
	MaxWriteUnits pulumi.IntInput `pulumi:"maxWriteUnits"`
}

func (GetTablesTableCollectionTableLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionTableLimit)(nil)).Elem()
}

func (i GetTablesTableCollectionTableLimitArgs) ToGetTablesTableCollectionTableLimitOutput() GetTablesTableCollectionTableLimitOutput {
	return i.ToGetTablesTableCollectionTableLimitOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionTableLimitArgs) ToGetTablesTableCollectionTableLimitOutputWithContext(ctx context.Context) GetTablesTableCollectionTableLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionTableLimitOutput)
}

// GetTablesTableCollectionTableLimitArrayInput is an input type that accepts GetTablesTableCollectionTableLimitArray and GetTablesTableCollectionTableLimitArrayOutput values.
// You can construct a concrete instance of `GetTablesTableCollectionTableLimitArrayInput` via:
//
//	GetTablesTableCollectionTableLimitArray{ GetTablesTableCollectionTableLimitArgs{...} }
type GetTablesTableCollectionTableLimitArrayInput interface {
	pulumi.Input

	ToGetTablesTableCollectionTableLimitArrayOutput() GetTablesTableCollectionTableLimitArrayOutput
	ToGetTablesTableCollectionTableLimitArrayOutputWithContext(context.Context) GetTablesTableCollectionTableLimitArrayOutput
}

type GetTablesTableCollectionTableLimitArray []GetTablesTableCollectionTableLimitInput

func (GetTablesTableCollectionTableLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionTableLimit)(nil)).Elem()
}

func (i GetTablesTableCollectionTableLimitArray) ToGetTablesTableCollectionTableLimitArrayOutput() GetTablesTableCollectionTableLimitArrayOutput {
	return i.ToGetTablesTableCollectionTableLimitArrayOutputWithContext(context.Background())
}

func (i GetTablesTableCollectionTableLimitArray) ToGetTablesTableCollectionTableLimitArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionTableLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableCollectionTableLimitArrayOutput)
}

type GetTablesTableCollectionTableLimitOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionTableLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTableCollectionTableLimit)(nil)).Elem()
}

func (o GetTablesTableCollectionTableLimitOutput) ToGetTablesTableCollectionTableLimitOutput() GetTablesTableCollectionTableLimitOutput {
	return o
}

func (o GetTablesTableCollectionTableLimitOutput) ToGetTablesTableCollectionTableLimitOutputWithContext(ctx context.Context) GetTablesTableCollectionTableLimitOutput {
	return o
}

// The capacity mode of the table.  If capacityMode = ON_DEMAND, maxReadUnits and maxWriteUnits are not used, and both will have the value of zero.
func (o GetTablesTableCollectionTableLimitOutput) CapacityMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTableCollectionTableLimit) string { return v.CapacityMode }).(pulumi.StringOutput)
}

// Maximum sustained read throughput limit for the table.
func (o GetTablesTableCollectionTableLimitOutput) MaxReadUnits() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTableCollectionTableLimit) int { return v.MaxReadUnits }).(pulumi.IntOutput)
}

// Maximum size of storage used by the table.
func (o GetTablesTableCollectionTableLimitOutput) MaxStorageInGbs() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTableCollectionTableLimit) int { return v.MaxStorageInGbs }).(pulumi.IntOutput)
}

// Maximum sustained write throughput limit for the table.
func (o GetTablesTableCollectionTableLimitOutput) MaxWriteUnits() pulumi.IntOutput {
	return o.ApplyT(func(v GetTablesTableCollectionTableLimit) int { return v.MaxWriteUnits }).(pulumi.IntOutput)
}

type GetTablesTableCollectionTableLimitArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableCollectionTableLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTableCollectionTableLimit)(nil)).Elem()
}

func (o GetTablesTableCollectionTableLimitArrayOutput) ToGetTablesTableCollectionTableLimitArrayOutput() GetTablesTableCollectionTableLimitArrayOutput {
	return o
}

func (o GetTablesTableCollectionTableLimitArrayOutput) ToGetTablesTableCollectionTableLimitArrayOutputWithContext(ctx context.Context) GetTablesTableCollectionTableLimitArrayOutput {
	return o
}

func (o GetTablesTableCollectionTableLimitArrayOutput) Index(i pulumi.IntInput) GetTablesTableCollectionTableLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTableCollectionTableLimit {
		return vs[0].([]GetTablesTableCollectionTableLimit)[vs[1].(int)]
	}).(GetTablesTableCollectionTableLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexKeyInput)(nil)).Elem(), IndexKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexKeyArrayInput)(nil)).Elem(), IndexKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaArrayInput)(nil)).Elem(), TableSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaColumnInput)(nil)).Elem(), TableSchemaColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaColumnArrayInput)(nil)).Elem(), TableSchemaColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaIdentityInput)(nil)).Elem(), TableSchemaIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaIdentityArrayInput)(nil)).Elem(), TableSchemaIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTableLimitsInput)(nil)).Elem(), TableTableLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableTableLimitsPtrInput)(nil)).Elem(), TableTableLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexKeyInput)(nil)).Elem(), GetIndexKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexKeyArrayInput)(nil)).Elem(), GetIndexKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesFilterInput)(nil)).Elem(), GetIndexesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesFilterArrayInput)(nil)).Elem(), GetIndexesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexCollectionInput)(nil)).Elem(), GetIndexesIndexCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexCollectionArrayInput)(nil)).Elem(), GetIndexesIndexCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexCollectionKeyInput)(nil)).Elem(), GetIndexesIndexCollectionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIndexesIndexCollectionKeyArrayInput)(nil)).Elem(), GetIndexesIndexCollectionKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaInput)(nil)).Elem(), GetTableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaArrayInput)(nil)).Elem(), GetTableSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaColumnInput)(nil)).Elem(), GetTableSchemaColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaColumnArrayInput)(nil)).Elem(), GetTableSchemaColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaIdentityInput)(nil)).Elem(), GetTableSchemaIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableSchemaIdentityArrayInput)(nil)).Elem(), GetTableSchemaIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableTableLimitInput)(nil)).Elem(), GetTableTableLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTableTableLimitArrayInput)(nil)).Elem(), GetTableTableLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesFilterInput)(nil)).Elem(), GetTablesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesFilterArrayInput)(nil)).Elem(), GetTablesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionInput)(nil)).Elem(), GetTablesTableCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionArrayInput)(nil)).Elem(), GetTablesTableCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaInput)(nil)).Elem(), GetTablesTableCollectionSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaArrayInput)(nil)).Elem(), GetTablesTableCollectionSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaColumnInput)(nil)).Elem(), GetTablesTableCollectionSchemaColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaColumnArrayInput)(nil)).Elem(), GetTablesTableCollectionSchemaColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaIdentityInput)(nil)).Elem(), GetTablesTableCollectionSchemaIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionSchemaIdentityArrayInput)(nil)).Elem(), GetTablesTableCollectionSchemaIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionTableLimitInput)(nil)).Elem(), GetTablesTableCollectionTableLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTablesTableCollectionTableLimitArrayInput)(nil)).Elem(), GetTablesTableCollectionTableLimitArray{})
	pulumi.RegisterOutputType(IndexKeyOutput{})
	pulumi.RegisterOutputType(IndexKeyArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaColumnOutput{})
	pulumi.RegisterOutputType(TableSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaIdentityOutput{})
	pulumi.RegisterOutputType(TableSchemaIdentityArrayOutput{})
	pulumi.RegisterOutputType(TableTableLimitsOutput{})
	pulumi.RegisterOutputType(TableTableLimitsPtrOutput{})
	pulumi.RegisterOutputType(GetIndexKeyOutput{})
	pulumi.RegisterOutputType(GetIndexKeyArrayOutput{})
	pulumi.RegisterOutputType(GetIndexesFilterOutput{})
	pulumi.RegisterOutputType(GetIndexesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexCollectionOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexCollectionKeyOutput{})
	pulumi.RegisterOutputType(GetIndexesIndexCollectionKeyArrayOutput{})
	pulumi.RegisterOutputType(GetTableSchemaOutput{})
	pulumi.RegisterOutputType(GetTableSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetTableSchemaColumnOutput{})
	pulumi.RegisterOutputType(GetTableSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(GetTableSchemaIdentityOutput{})
	pulumi.RegisterOutputType(GetTableSchemaIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetTableTableLimitOutput{})
	pulumi.RegisterOutputType(GetTableTableLimitArrayOutput{})
	pulumi.RegisterOutputType(GetTablesFilterOutput{})
	pulumi.RegisterOutputType(GetTablesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaColumnOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaIdentityOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionSchemaIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionTableLimitOutput{})
	pulumi.RegisterOutputType(GetTablesTableCollectionTableLimitArrayOutput{})
}
