// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nosql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Table resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Create a new table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Nosql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Nosql.NewTable(ctx, "testTable", &Nosql.TableArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DdlStatement:  pulumi.Any(_var.Table_ddl_statement),
//				DefinedTags:   pulumi.Any(_var.Table_defined_tags),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				IsAutoReclaimable: pulumi.Any(_var.Table_is_auto_reclaimable),
//				TableLimits: &nosql.TableTableLimitsArgs{
//					MaxReadUnits:    pulumi.Any(_var.Table_table_limits_max_read_units),
//					MaxStorageInGbs: pulumi.Any(_var.Table_table_limits_max_storage_in_gbs),
//					MaxWriteUnits:   pulumi.Any(_var.Table_table_limits_max_write_units),
//					CapacityMode:    pulumi.Any(_var.Table_table_limits_capacity_mode),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tables can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Nosql/table:Table test_table "id"
//
// ```
type Table struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
	DdlStatement pulumi.StringOutput `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolOutput `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Table name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The table schema information as a JSON object.
	Schemas TableSchemaArrayOutput `pulumi:"schemas"`
	// The state of a table.
	State pulumi.StringOutput `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
	TableLimits TableTableLimitsOutput `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration pulumi.StringOutput `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DdlStatement == nil {
		return nil, errors.New("invalid value for required argument 'DdlStatement'")
	}
	var resource Table
	err := ctx.RegisterResource("oci:Nosql/table:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("oci:Nosql/table:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
	// (Updatable) Compartment Identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
	DdlStatement *string `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable *bool `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Table name.
	Name *string `pulumi:"name"`
	// The table schema information as a JSON object.
	Schemas []TableSchema `pulumi:"schemas"`
	// The state of a table.
	State *string `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
	TableLimits *TableTableLimits `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration *string `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type TableState struct {
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
	DdlStatement pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolPtrInput
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// Table name.
	Name pulumi.StringPtrInput
	// The table schema information as a JSON object.
	Schemas TableSchemaArrayInput
	// The state of a table.
	State pulumi.StringPtrInput
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags pulumi.MapInput
	// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
	TableLimits TableTableLimitsPtrInput
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration pulumi.StringPtrInput
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// (Updatable) Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
	DdlStatement string `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable *bool `pulumi:"isAutoReclaimable"`
	// Table name.
	Name *string `pulumi:"name"`
	// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
	TableLimits *TableTableLimits `pulumi:"tableLimits"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringInput
	// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
	DdlStatement pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolPtrInput
	// Table name.
	Name pulumi.StringPtrInput
	// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
	TableLimits TableTableLimitsPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

// TableArrayInput is an input type that accepts TableArray and TableArrayOutput values.
// You can construct a concrete instance of `TableArrayInput` via:
//
//	TableArray{ TableArgs{...} }
type TableArrayInput interface {
	pulumi.Input

	ToTableArrayOutput() TableArrayOutput
	ToTableArrayOutputWithContext(context.Context) TableArrayOutput
}

type TableArray []TableInput

func (TableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (i TableArray) ToTableArrayOutput() TableArrayOutput {
	return i.ToTableArrayOutputWithContext(context.Background())
}

func (i TableArray) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableArrayOutput)
}

// TableMapInput is an input type that accepts TableMap and TableMapOutput values.
// You can construct a concrete instance of `TableMapInput` via:
//
//	TableMap{ "key": TableArgs{...} }
type TableMapInput interface {
	pulumi.Input

	ToTableMapOutput() TableMapOutput
	ToTableMapOutputWithContext(context.Context) TableMapOutput
}

type TableMap map[string]TableInput

func (TableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (i TableMap) ToTableMapOutput() TableMapOutput {
	return i.ToTableMapOutputWithContext(context.Background())
}

func (i TableMap) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableMapOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// (Updatable) Compartment Identifier.
func (o TableOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Complete CREATE TABLE DDL statement. When update ddl_statement, it should be ALTER TABLE DDL statement.
func (o TableOutput) DdlStatement() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DdlStatement }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
func (o TableOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Table) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o TableOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Table) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// True if table can be reclaimed after an idle period.
func (o TableOutput) IsAutoReclaimable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolOutput { return v.IsAutoReclaimable }).(pulumi.BoolOutput)
}

// A message describing the current state in more detail.
func (o TableOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// Table name.
func (o TableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The table schema information as a JSON object.
func (o TableOutput) Schemas() TableSchemaArrayOutput {
	return o.ApplyT(func(v *Table) TableSchemaArrayOutput { return v.Schemas }).(TableSchemaArrayOutput)
}

// The state of a table.
func (o TableOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
func (o TableOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Table) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// (Updatable) Throughput and storage limits configuration of a table. It is required for top level table, must be null for child table as child table shares its top parent table's limits.
func (o TableOutput) TableLimits() TableTableLimitsOutput {
	return o.ApplyT(func(v *Table) TableTableLimitsOutput { return v.TableLimits }).(TableTableLimitsOutput)
}

// The time the the table was created. An RFC3339 formatted datetime string.
func (o TableOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
func (o TableOutput) TimeOfExpiration() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TimeOfExpiration }).(pulumi.StringOutput)
}

// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
func (o TableOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type TableArrayOutput struct{ *pulumi.OutputState }

func (TableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Table)(nil)).Elem()
}

func (o TableArrayOutput) ToTableArrayOutput() TableArrayOutput {
	return o
}

func (o TableArrayOutput) ToTableArrayOutputWithContext(ctx context.Context) TableArrayOutput {
	return o
}

func (o TableArrayOutput) Index(i pulumi.IntInput) TableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Table {
		return vs[0].([]*Table)[vs[1].(int)]
	}).(TableOutput)
}

type TableMapOutput struct{ *pulumi.OutputState }

func (TableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Table)(nil)).Elem()
}

func (o TableMapOutput) ToTableMapOutput() TableMapOutput {
	return o
}

func (o TableMapOutput) ToTableMapOutputWithContext(ctx context.Context) TableMapOutput {
	return o
}

func (o TableMapOutput) MapIndex(k pulumi.StringInput) TableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Table {
		return vs[0].(map[string]*Table)[vs[1].(string)]
	}).(TableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableArrayInput)(nil)).Elem(), TableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableMapInput)(nil)).Elem(), TableMap{})
	pulumi.RegisterOutputType(TableOutput{})
	pulumi.RegisterOutputType(TableArrayOutput{})
	pulumi.RegisterOutputType(TableMapOutput{})
}
