// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "oci:oci/apiPlatformApiPlatformInstance:ApiPlatformApiPlatformInstance":
		r = &ApiPlatformApiPlatformInstance{}
	case "oci:oci/apiaccesscontrolPrivilegedApiControl:ApiaccesscontrolPrivilegedApiControl":
		r = &ApiaccesscontrolPrivilegedApiControl{}
	case "oci:oci/apiaccesscontrolPrivilegedApiRequest:ApiaccesscontrolPrivilegedApiRequest":
		r = &ApiaccesscontrolPrivilegedApiRequest{}
	case "oci:oci/dbmulticloudMultiCloudResourceDiscovery:DbmulticloudMultiCloudResourceDiscovery":
		r = &DbmulticloudMultiCloudResourceDiscovery{}
	case "oci:oci/dbmulticloudOracleDbAzureBlobContainer:DbmulticloudOracleDbAzureBlobContainer":
		r = &DbmulticloudOracleDbAzureBlobContainer{}
	case "oci:oci/dbmulticloudOracleDbAzureBlobMount:DbmulticloudOracleDbAzureBlobMount":
		r = &DbmulticloudOracleDbAzureBlobMount{}
	case "oci:oci/dbmulticloudOracleDbAzureConnector:DbmulticloudOracleDbAzureConnector":
		r = &DbmulticloudOracleDbAzureConnector{}
	case "oci:oci/dbmulticloudOracleDbAzureVault:DbmulticloudOracleDbAzureVault":
		r = &DbmulticloudOracleDbAzureVault{}
	case "oci:oci/dbmulticloudOracleDbAzureVaultAssociation:DbmulticloudOracleDbAzureVaultAssociation":
		r = &DbmulticloudOracleDbAzureVaultAssociation{}
	case "oci:oci/managedKafkaKafkaCluster:ManagedKafkaKafkaCluster":
		r = &ManagedKafkaKafkaCluster{}
	case "oci:oci/managedKafkaKafkaClusterConfig:ManagedKafkaKafkaClusterConfig":
		r = &ManagedKafkaKafkaClusterConfig{}
	case "oci:oci/managedKafkaKafkaClusterSuperusersManagement:ManagedKafkaKafkaClusterSuperusersManagement":
		r = &ManagedKafkaKafkaClusterSuperusersManagement{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"oci",
		"oci/apiPlatformApiPlatformInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/apiaccesscontrolPrivilegedApiControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/apiaccesscontrolPrivilegedApiRequest",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudMultiCloudResourceDiscovery",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudOracleDbAzureBlobContainer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudOracleDbAzureBlobMount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudOracleDbAzureConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudOracleDbAzureVault",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/dbmulticloudOracleDbAzureVaultAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/managedKafkaKafkaCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/managedKafkaKafkaClusterConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"oci",
		"oci/managedKafkaKafkaClusterSuperusersManagement",
		&module{version},
	)
}
