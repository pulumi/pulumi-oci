// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Kafka Cluster Superusers Management resource in Oracle Cloud Infrastructure Managed Kafka service.
//
// Adds a SASL superuser to the Kafka cluster. A generated password will be updated to the specified vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/oci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oci.NewManagedKafkaKafkaClusterSuperusersManagement(ctx, "test_kafka_cluster_superusers_management", &oci.ManagedKafkaKafkaClusterSuperusersManagementArgs{
//				KafkaClusterId:  pulumi.Any(testKafkaCluster.Id),
//				EnableSuperuser: pulumi.Any(enableSuperuser),
//				CompartmentId:   pulumi.Any(compartmentId),
//				SecretId:        pulumi.Any(testSecret.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedKafkaKafkaClusterSuperusersManagement struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnableSuperuser pulumi.BoolOutput `pulumi:"enableSuperuser"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
	KafkaClusterId pulumi.StringOutput `pulumi:"kafkaClusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
}

// NewManagedKafkaKafkaClusterSuperusersManagement registers a new resource with the given unique name, arguments, and options.
func NewManagedKafkaKafkaClusterSuperusersManagement(ctx *pulumi.Context,
	name string, args *ManagedKafkaKafkaClusterSuperusersManagementArgs, opts ...pulumi.ResourceOption) (*ManagedKafkaKafkaClusterSuperusersManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableSuperuser == nil {
		return nil, errors.New("invalid value for required argument 'EnableSuperuser'")
	}
	if args.KafkaClusterId == nil {
		return nil, errors.New("invalid value for required argument 'KafkaClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedKafkaKafkaClusterSuperusersManagement
	err := ctx.RegisterResource("oci:oci/managedKafkaKafkaClusterSuperusersManagement:ManagedKafkaKafkaClusterSuperusersManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedKafkaKafkaClusterSuperusersManagement gets an existing ManagedKafkaKafkaClusterSuperusersManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedKafkaKafkaClusterSuperusersManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedKafkaKafkaClusterSuperusersManagementState, opts ...pulumi.ResourceOption) (*ManagedKafkaKafkaClusterSuperusersManagement, error) {
	var resource ManagedKafkaKafkaClusterSuperusersManagement
	err := ctx.ReadResource("oci:oci/managedKafkaKafkaClusterSuperusersManagement:ManagedKafkaKafkaClusterSuperusersManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedKafkaKafkaClusterSuperusersManagement resources.
type managedKafkaKafkaClusterSuperusersManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnableSuperuser *bool `pulumi:"enableSuperuser"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
	KafkaClusterId *string `pulumi:"kafkaClusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
	SecretId *string `pulumi:"secretId"`
}

type ManagedKafkaKafkaClusterSuperusersManagementState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnableSuperuser pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
	KafkaClusterId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
	SecretId pulumi.StringPtrInput
}

func (ManagedKafkaKafkaClusterSuperusersManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedKafkaKafkaClusterSuperusersManagementState)(nil)).Elem()
}

type managedKafkaKafkaClusterSuperusersManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnableSuperuser bool `pulumi:"enableSuperuser"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
	KafkaClusterId string `pulumi:"kafkaClusterId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
	SecretId *string `pulumi:"secretId"`
}

// The set of arguments for constructing a ManagedKafkaKafkaClusterSuperusersManagement resource.
type ManagedKafkaKafkaClusterSuperusersManagementArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	EnableSuperuser pulumi.BoolInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
	KafkaClusterId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
	SecretId pulumi.StringPtrInput
}

func (ManagedKafkaKafkaClusterSuperusersManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedKafkaKafkaClusterSuperusersManagementArgs)(nil)).Elem()
}

type ManagedKafkaKafkaClusterSuperusersManagementInput interface {
	pulumi.Input

	ToManagedKafkaKafkaClusterSuperusersManagementOutput() ManagedKafkaKafkaClusterSuperusersManagementOutput
	ToManagedKafkaKafkaClusterSuperusersManagementOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementOutput
}

func (*ManagedKafkaKafkaClusterSuperusersManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (i *ManagedKafkaKafkaClusterSuperusersManagement) ToManagedKafkaKafkaClusterSuperusersManagementOutput() ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return i.ToManagedKafkaKafkaClusterSuperusersManagementOutputWithContext(context.Background())
}

func (i *ManagedKafkaKafkaClusterSuperusersManagement) ToManagedKafkaKafkaClusterSuperusersManagementOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedKafkaKafkaClusterSuperusersManagementOutput)
}

// ManagedKafkaKafkaClusterSuperusersManagementArrayInput is an input type that accepts ManagedKafkaKafkaClusterSuperusersManagementArray and ManagedKafkaKafkaClusterSuperusersManagementArrayOutput values.
// You can construct a concrete instance of `ManagedKafkaKafkaClusterSuperusersManagementArrayInput` via:
//
//	ManagedKafkaKafkaClusterSuperusersManagementArray{ ManagedKafkaKafkaClusterSuperusersManagementArgs{...} }
type ManagedKafkaKafkaClusterSuperusersManagementArrayInput interface {
	pulumi.Input

	ToManagedKafkaKafkaClusterSuperusersManagementArrayOutput() ManagedKafkaKafkaClusterSuperusersManagementArrayOutput
	ToManagedKafkaKafkaClusterSuperusersManagementArrayOutputWithContext(context.Context) ManagedKafkaKafkaClusterSuperusersManagementArrayOutput
}

type ManagedKafkaKafkaClusterSuperusersManagementArray []ManagedKafkaKafkaClusterSuperusersManagementInput

func (ManagedKafkaKafkaClusterSuperusersManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (i ManagedKafkaKafkaClusterSuperusersManagementArray) ToManagedKafkaKafkaClusterSuperusersManagementArrayOutput() ManagedKafkaKafkaClusterSuperusersManagementArrayOutput {
	return i.ToManagedKafkaKafkaClusterSuperusersManagementArrayOutputWithContext(context.Background())
}

func (i ManagedKafkaKafkaClusterSuperusersManagementArray) ToManagedKafkaKafkaClusterSuperusersManagementArrayOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedKafkaKafkaClusterSuperusersManagementArrayOutput)
}

// ManagedKafkaKafkaClusterSuperusersManagementMapInput is an input type that accepts ManagedKafkaKafkaClusterSuperusersManagementMap and ManagedKafkaKafkaClusterSuperusersManagementMapOutput values.
// You can construct a concrete instance of `ManagedKafkaKafkaClusterSuperusersManagementMapInput` via:
//
//	ManagedKafkaKafkaClusterSuperusersManagementMap{ "key": ManagedKafkaKafkaClusterSuperusersManagementArgs{...} }
type ManagedKafkaKafkaClusterSuperusersManagementMapInput interface {
	pulumi.Input

	ToManagedKafkaKafkaClusterSuperusersManagementMapOutput() ManagedKafkaKafkaClusterSuperusersManagementMapOutput
	ToManagedKafkaKafkaClusterSuperusersManagementMapOutputWithContext(context.Context) ManagedKafkaKafkaClusterSuperusersManagementMapOutput
}

type ManagedKafkaKafkaClusterSuperusersManagementMap map[string]ManagedKafkaKafkaClusterSuperusersManagementInput

func (ManagedKafkaKafkaClusterSuperusersManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (i ManagedKafkaKafkaClusterSuperusersManagementMap) ToManagedKafkaKafkaClusterSuperusersManagementMapOutput() ManagedKafkaKafkaClusterSuperusersManagementMapOutput {
	return i.ToManagedKafkaKafkaClusterSuperusersManagementMapOutputWithContext(context.Background())
}

func (i ManagedKafkaKafkaClusterSuperusersManagementMap) ToManagedKafkaKafkaClusterSuperusersManagementMapOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedKafkaKafkaClusterSuperusersManagementMapOutput)
}

type ManagedKafkaKafkaClusterSuperusersManagementOutput struct{ *pulumi.OutputState }

func (ManagedKafkaKafkaClusterSuperusersManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) ToManagedKafkaKafkaClusterSuperusersManagementOutput() ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return o
}

func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) ToManagedKafkaKafkaClusterSuperusersManagementOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the superuser secret.
func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaKafkaClusterSuperusersManagement) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) A required field when set to `true` calls enable action and when set to `false` calls disable action.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) EnableSuperuser() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedKafkaKafkaClusterSuperusersManagement) pulumi.BoolOutput { return v.EnableSuperuser }).(pulumi.BoolOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the KafkaCluster.
func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) KafkaClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaKafkaClusterSuperusersManagement) pulumi.StringOutput { return v.KafkaClusterId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret that will be populated with the generated superuser password.
func (o ManagedKafkaKafkaClusterSuperusersManagementOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedKafkaKafkaClusterSuperusersManagement) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

type ManagedKafkaKafkaClusterSuperusersManagementArrayOutput struct{ *pulumi.OutputState }

func (ManagedKafkaKafkaClusterSuperusersManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (o ManagedKafkaKafkaClusterSuperusersManagementArrayOutput) ToManagedKafkaKafkaClusterSuperusersManagementArrayOutput() ManagedKafkaKafkaClusterSuperusersManagementArrayOutput {
	return o
}

func (o ManagedKafkaKafkaClusterSuperusersManagementArrayOutput) ToManagedKafkaKafkaClusterSuperusersManagementArrayOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementArrayOutput {
	return o
}

func (o ManagedKafkaKafkaClusterSuperusersManagementArrayOutput) Index(i pulumi.IntInput) ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedKafkaKafkaClusterSuperusersManagement {
		return vs[0].([]*ManagedKafkaKafkaClusterSuperusersManagement)[vs[1].(int)]
	}).(ManagedKafkaKafkaClusterSuperusersManagementOutput)
}

type ManagedKafkaKafkaClusterSuperusersManagementMapOutput struct{ *pulumi.OutputState }

func (ManagedKafkaKafkaClusterSuperusersManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedKafkaKafkaClusterSuperusersManagement)(nil)).Elem()
}

func (o ManagedKafkaKafkaClusterSuperusersManagementMapOutput) ToManagedKafkaKafkaClusterSuperusersManagementMapOutput() ManagedKafkaKafkaClusterSuperusersManagementMapOutput {
	return o
}

func (o ManagedKafkaKafkaClusterSuperusersManagementMapOutput) ToManagedKafkaKafkaClusterSuperusersManagementMapOutputWithContext(ctx context.Context) ManagedKafkaKafkaClusterSuperusersManagementMapOutput {
	return o
}

func (o ManagedKafkaKafkaClusterSuperusersManagementMapOutput) MapIndex(k pulumi.StringInput) ManagedKafkaKafkaClusterSuperusersManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedKafkaKafkaClusterSuperusersManagement {
		return vs[0].(map[string]*ManagedKafkaKafkaClusterSuperusersManagement)[vs[1].(string)]
	}).(ManagedKafkaKafkaClusterSuperusersManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedKafkaKafkaClusterSuperusersManagementInput)(nil)).Elem(), &ManagedKafkaKafkaClusterSuperusersManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedKafkaKafkaClusterSuperusersManagementArrayInput)(nil)).Elem(), ManagedKafkaKafkaClusterSuperusersManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedKafkaKafkaClusterSuperusersManagementMapInput)(nil)).Elem(), ManagedKafkaKafkaClusterSuperusersManagementMap{})
	pulumi.RegisterOutputType(ManagedKafkaKafkaClusterSuperusersManagementOutput{})
	pulumi.RegisterOutputType(ManagedKafkaKafkaClusterSuperusersManagementArrayOutput{})
	pulumi.RegisterOutputType(ManagedKafkaKafkaClusterSuperusersManagementMapOutput{})
}
