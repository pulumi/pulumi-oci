// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ocvp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Supported Vmware Software Versions in Oracle Cloud Infrastructure Oracle Cloud VMware Solution service.
//
// Lists the versions of bundled VMware software supported by the Oracle Cloud
// VMware Solution.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Ocvp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ocvp.GetSupportedVmwareSoftwareVersions(ctx, &ocvp.GetSupportedVmwareSoftwareVersionsArgs{
//				CompartmentId: _var.Compartment_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSupportedVmwareSoftwareVersions(ctx *pulumi.Context, args *GetSupportedVmwareSoftwareVersionsArgs, opts ...pulumi.InvokeOption) (*GetSupportedVmwareSoftwareVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSupportedVmwareSoftwareVersionsResult
	err := ctx.Invoke("oci:Ocvp/getSupportedVmwareSoftwareVersions:getSupportedVmwareSoftwareVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSupportedVmwareSoftwareVersions.
type GetSupportedVmwareSoftwareVersionsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string                                     `pulumi:"compartmentId"`
	Filters       []GetSupportedVmwareSoftwareVersionsFilter `pulumi:"filters"`
}

// A collection of values returned by getSupportedVmwareSoftwareVersions.
type GetSupportedVmwareSoftwareVersionsResult struct {
	CompartmentId string                                     `pulumi:"compartmentId"`
	Filters       []GetSupportedVmwareSoftwareVersionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id *string `pulumi:"id"`
	// A list of the supported versions of bundled VMware software.
	Items []GetSupportedVmwareSoftwareVersionsItem `pulumi:"items"`
}

func GetSupportedVmwareSoftwareVersionsOutput(ctx *pulumi.Context, args GetSupportedVmwareSoftwareVersionsOutputArgs, opts ...pulumi.InvokeOption) GetSupportedVmwareSoftwareVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSupportedVmwareSoftwareVersionsResult, error) {
			args := v.(GetSupportedVmwareSoftwareVersionsArgs)
			r, err := GetSupportedVmwareSoftwareVersions(ctx, &args, opts...)
			var s GetSupportedVmwareSoftwareVersionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSupportedVmwareSoftwareVersionsResultOutput)
}

// A collection of arguments for invoking getSupportedVmwareSoftwareVersions.
type GetSupportedVmwareSoftwareVersionsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput                                 `pulumi:"compartmentId"`
	Filters       GetSupportedVmwareSoftwareVersionsFilterArrayInput `pulumi:"filters"`
}

func (GetSupportedVmwareSoftwareVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getSupportedVmwareSoftwareVersions.
type GetSupportedVmwareSoftwareVersionsResultOutput struct{ *pulumi.OutputState }

func (GetSupportedVmwareSoftwareVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsResult)(nil)).Elem()
}

func (o GetSupportedVmwareSoftwareVersionsResultOutput) ToGetSupportedVmwareSoftwareVersionsResultOutput() GetSupportedVmwareSoftwareVersionsResultOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsResultOutput) ToGetSupportedVmwareSoftwareVersionsResultOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsResultOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetSupportedVmwareSoftwareVersionsResultOutput) Filters() GetSupportedVmwareSoftwareVersionsFilterArrayOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsResult) []GetSupportedVmwareSoftwareVersionsFilter {
		return v.Filters
	}).(GetSupportedVmwareSoftwareVersionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSupportedVmwareSoftwareVersionsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A list of the supported versions of bundled VMware software.
func (o GetSupportedVmwareSoftwareVersionsResultOutput) Items() GetSupportedVmwareSoftwareVersionsItemArrayOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsResult) []GetSupportedVmwareSoftwareVersionsItem {
		return v.Items
	}).(GetSupportedVmwareSoftwareVersionsItemArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSupportedVmwareSoftwareVersionsResultOutput{})
}
