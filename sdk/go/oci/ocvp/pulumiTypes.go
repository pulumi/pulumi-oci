// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ocvp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SddcHcxOnPremLicense struct {
	// HCX on-premise license key value.
	ActivationKey *string `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status *string `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName *string `pulumi:"systemName"`
}

// SddcHcxOnPremLicenseInput is an input type that accepts SddcHcxOnPremLicenseArgs and SddcHcxOnPremLicenseOutput values.
// You can construct a concrete instance of `SddcHcxOnPremLicenseInput` via:
//
//	SddcHcxOnPremLicenseArgs{...}
type SddcHcxOnPremLicenseInput interface {
	pulumi.Input

	ToSddcHcxOnPremLicenseOutput() SddcHcxOnPremLicenseOutput
	ToSddcHcxOnPremLicenseOutputWithContext(context.Context) SddcHcxOnPremLicenseOutput
}

type SddcHcxOnPremLicenseArgs struct {
	// HCX on-premise license key value.
	ActivationKey pulumi.StringPtrInput `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName pulumi.StringPtrInput `pulumi:"systemName"`
}

func (SddcHcxOnPremLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcHcxOnPremLicense)(nil)).Elem()
}

func (i SddcHcxOnPremLicenseArgs) ToSddcHcxOnPremLicenseOutput() SddcHcxOnPremLicenseOutput {
	return i.ToSddcHcxOnPremLicenseOutputWithContext(context.Background())
}

func (i SddcHcxOnPremLicenseArgs) ToSddcHcxOnPremLicenseOutputWithContext(ctx context.Context) SddcHcxOnPremLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcHcxOnPremLicenseOutput)
}

// SddcHcxOnPremLicenseArrayInput is an input type that accepts SddcHcxOnPremLicenseArray and SddcHcxOnPremLicenseArrayOutput values.
// You can construct a concrete instance of `SddcHcxOnPremLicenseArrayInput` via:
//
//	SddcHcxOnPremLicenseArray{ SddcHcxOnPremLicenseArgs{...} }
type SddcHcxOnPremLicenseArrayInput interface {
	pulumi.Input

	ToSddcHcxOnPremLicenseArrayOutput() SddcHcxOnPremLicenseArrayOutput
	ToSddcHcxOnPremLicenseArrayOutputWithContext(context.Context) SddcHcxOnPremLicenseArrayOutput
}

type SddcHcxOnPremLicenseArray []SddcHcxOnPremLicenseInput

func (SddcHcxOnPremLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcHcxOnPremLicense)(nil)).Elem()
}

func (i SddcHcxOnPremLicenseArray) ToSddcHcxOnPremLicenseArrayOutput() SddcHcxOnPremLicenseArrayOutput {
	return i.ToSddcHcxOnPremLicenseArrayOutputWithContext(context.Background())
}

func (i SddcHcxOnPremLicenseArray) ToSddcHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) SddcHcxOnPremLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcHcxOnPremLicenseArrayOutput)
}

type SddcHcxOnPremLicenseOutput struct{ *pulumi.OutputState }

func (SddcHcxOnPremLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcHcxOnPremLicense)(nil)).Elem()
}

func (o SddcHcxOnPremLicenseOutput) ToSddcHcxOnPremLicenseOutput() SddcHcxOnPremLicenseOutput {
	return o
}

func (o SddcHcxOnPremLicenseOutput) ToSddcHcxOnPremLicenseOutputWithContext(ctx context.Context) SddcHcxOnPremLicenseOutput {
	return o
}

// HCX on-premise license key value.
func (o SddcHcxOnPremLicenseOutput) ActivationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcHcxOnPremLicense) *string { return v.ActivationKey }).(pulumi.StringPtrOutput)
}

// status of HCX on-premise license.
func (o SddcHcxOnPremLicenseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcHcxOnPremLicense) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Name of the system that consumed the HCX on-premise license
func (o SddcHcxOnPremLicenseOutput) SystemName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcHcxOnPremLicense) *string { return v.SystemName }).(pulumi.StringPtrOutput)
}

type SddcHcxOnPremLicenseArrayOutput struct{ *pulumi.OutputState }

func (SddcHcxOnPremLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcHcxOnPremLicense)(nil)).Elem()
}

func (o SddcHcxOnPremLicenseArrayOutput) ToSddcHcxOnPremLicenseArrayOutput() SddcHcxOnPremLicenseArrayOutput {
	return o
}

func (o SddcHcxOnPremLicenseArrayOutput) ToSddcHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) SddcHcxOnPremLicenseArrayOutput {
	return o
}

func (o SddcHcxOnPremLicenseArrayOutput) Index(i pulumi.IntInput) SddcHcxOnPremLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SddcHcxOnPremLicense {
		return vs[0].([]SddcHcxOnPremLicense)[vs[1].(int)]
	}).(SddcHcxOnPremLicenseOutput)
}

type SddcUpgradeLicense struct {
	// vSphere license key value.
	LicenseKey *string `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType *string `pulumi:"licenseType"`
}

// SddcUpgradeLicenseInput is an input type that accepts SddcUpgradeLicenseArgs and SddcUpgradeLicenseOutput values.
// You can construct a concrete instance of `SddcUpgradeLicenseInput` via:
//
//	SddcUpgradeLicenseArgs{...}
type SddcUpgradeLicenseInput interface {
	pulumi.Input

	ToSddcUpgradeLicenseOutput() SddcUpgradeLicenseOutput
	ToSddcUpgradeLicenseOutputWithContext(context.Context) SddcUpgradeLicenseOutput
}

type SddcUpgradeLicenseArgs struct {
	// vSphere license key value.
	LicenseKey pulumi.StringPtrInput `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
}

func (SddcUpgradeLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcUpgradeLicense)(nil)).Elem()
}

func (i SddcUpgradeLicenseArgs) ToSddcUpgradeLicenseOutput() SddcUpgradeLicenseOutput {
	return i.ToSddcUpgradeLicenseOutputWithContext(context.Background())
}

func (i SddcUpgradeLicenseArgs) ToSddcUpgradeLicenseOutputWithContext(ctx context.Context) SddcUpgradeLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcUpgradeLicenseOutput)
}

// SddcUpgradeLicenseArrayInput is an input type that accepts SddcUpgradeLicenseArray and SddcUpgradeLicenseArrayOutput values.
// You can construct a concrete instance of `SddcUpgradeLicenseArrayInput` via:
//
//	SddcUpgradeLicenseArray{ SddcUpgradeLicenseArgs{...} }
type SddcUpgradeLicenseArrayInput interface {
	pulumi.Input

	ToSddcUpgradeLicenseArrayOutput() SddcUpgradeLicenseArrayOutput
	ToSddcUpgradeLicenseArrayOutputWithContext(context.Context) SddcUpgradeLicenseArrayOutput
}

type SddcUpgradeLicenseArray []SddcUpgradeLicenseInput

func (SddcUpgradeLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcUpgradeLicense)(nil)).Elem()
}

func (i SddcUpgradeLicenseArray) ToSddcUpgradeLicenseArrayOutput() SddcUpgradeLicenseArrayOutput {
	return i.ToSddcUpgradeLicenseArrayOutputWithContext(context.Background())
}

func (i SddcUpgradeLicenseArray) ToSddcUpgradeLicenseArrayOutputWithContext(ctx context.Context) SddcUpgradeLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcUpgradeLicenseArrayOutput)
}

type SddcUpgradeLicenseOutput struct{ *pulumi.OutputState }

func (SddcUpgradeLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcUpgradeLicense)(nil)).Elem()
}

func (o SddcUpgradeLicenseOutput) ToSddcUpgradeLicenseOutput() SddcUpgradeLicenseOutput {
	return o
}

func (o SddcUpgradeLicenseOutput) ToSddcUpgradeLicenseOutputWithContext(ctx context.Context) SddcUpgradeLicenseOutput {
	return o
}

// vSphere license key value.
func (o SddcUpgradeLicenseOutput) LicenseKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcUpgradeLicense) *string { return v.LicenseKey }).(pulumi.StringPtrOutput)
}

// vSphere license type.
func (o SddcUpgradeLicenseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcUpgradeLicense) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type SddcUpgradeLicenseArrayOutput struct{ *pulumi.OutputState }

func (SddcUpgradeLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcUpgradeLicense)(nil)).Elem()
}

func (o SddcUpgradeLicenseArrayOutput) ToSddcUpgradeLicenseArrayOutput() SddcUpgradeLicenseArrayOutput {
	return o
}

func (o SddcUpgradeLicenseArrayOutput) ToSddcUpgradeLicenseArrayOutputWithContext(ctx context.Context) SddcUpgradeLicenseArrayOutput {
	return o
}

func (o SddcUpgradeLicenseArrayOutput) Index(i pulumi.IntInput) SddcUpgradeLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SddcUpgradeLicense {
		return vs[0].([]SddcUpgradeLicense)[vs[1].(int)]
	}).(SddcUpgradeLicenseOutput)
}

type SddcVsphereUpgradeObject struct {
	// Binary object download link.
	DownloadLink *string `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription *string `pulumi:"linkDescription"`
}

// SddcVsphereUpgradeObjectInput is an input type that accepts SddcVsphereUpgradeObjectArgs and SddcVsphereUpgradeObjectOutput values.
// You can construct a concrete instance of `SddcVsphereUpgradeObjectInput` via:
//
//	SddcVsphereUpgradeObjectArgs{...}
type SddcVsphereUpgradeObjectInput interface {
	pulumi.Input

	ToSddcVsphereUpgradeObjectOutput() SddcVsphereUpgradeObjectOutput
	ToSddcVsphereUpgradeObjectOutputWithContext(context.Context) SddcVsphereUpgradeObjectOutput
}

type SddcVsphereUpgradeObjectArgs struct {
	// Binary object download link.
	DownloadLink pulumi.StringPtrInput `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription pulumi.StringPtrInput `pulumi:"linkDescription"`
}

func (SddcVsphereUpgradeObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcVsphereUpgradeObject)(nil)).Elem()
}

func (i SddcVsphereUpgradeObjectArgs) ToSddcVsphereUpgradeObjectOutput() SddcVsphereUpgradeObjectOutput {
	return i.ToSddcVsphereUpgradeObjectOutputWithContext(context.Background())
}

func (i SddcVsphereUpgradeObjectArgs) ToSddcVsphereUpgradeObjectOutputWithContext(ctx context.Context) SddcVsphereUpgradeObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcVsphereUpgradeObjectOutput)
}

// SddcVsphereUpgradeObjectArrayInput is an input type that accepts SddcVsphereUpgradeObjectArray and SddcVsphereUpgradeObjectArrayOutput values.
// You can construct a concrete instance of `SddcVsphereUpgradeObjectArrayInput` via:
//
//	SddcVsphereUpgradeObjectArray{ SddcVsphereUpgradeObjectArgs{...} }
type SddcVsphereUpgradeObjectArrayInput interface {
	pulumi.Input

	ToSddcVsphereUpgradeObjectArrayOutput() SddcVsphereUpgradeObjectArrayOutput
	ToSddcVsphereUpgradeObjectArrayOutputWithContext(context.Context) SddcVsphereUpgradeObjectArrayOutput
}

type SddcVsphereUpgradeObjectArray []SddcVsphereUpgradeObjectInput

func (SddcVsphereUpgradeObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcVsphereUpgradeObject)(nil)).Elem()
}

func (i SddcVsphereUpgradeObjectArray) ToSddcVsphereUpgradeObjectArrayOutput() SddcVsphereUpgradeObjectArrayOutput {
	return i.ToSddcVsphereUpgradeObjectArrayOutputWithContext(context.Background())
}

func (i SddcVsphereUpgradeObjectArray) ToSddcVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) SddcVsphereUpgradeObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SddcVsphereUpgradeObjectArrayOutput)
}

type SddcVsphereUpgradeObjectOutput struct{ *pulumi.OutputState }

func (SddcVsphereUpgradeObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SddcVsphereUpgradeObject)(nil)).Elem()
}

func (o SddcVsphereUpgradeObjectOutput) ToSddcVsphereUpgradeObjectOutput() SddcVsphereUpgradeObjectOutput {
	return o
}

func (o SddcVsphereUpgradeObjectOutput) ToSddcVsphereUpgradeObjectOutputWithContext(ctx context.Context) SddcVsphereUpgradeObjectOutput {
	return o
}

// Binary object download link.
func (o SddcVsphereUpgradeObjectOutput) DownloadLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcVsphereUpgradeObject) *string { return v.DownloadLink }).(pulumi.StringPtrOutput)
}

// Binary object description.
func (o SddcVsphereUpgradeObjectOutput) LinkDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SddcVsphereUpgradeObject) *string { return v.LinkDescription }).(pulumi.StringPtrOutput)
}

type SddcVsphereUpgradeObjectArrayOutput struct{ *pulumi.OutputState }

func (SddcVsphereUpgradeObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SddcVsphereUpgradeObject)(nil)).Elem()
}

func (o SddcVsphereUpgradeObjectArrayOutput) ToSddcVsphereUpgradeObjectArrayOutput() SddcVsphereUpgradeObjectArrayOutput {
	return o
}

func (o SddcVsphereUpgradeObjectArrayOutput) ToSddcVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) SddcVsphereUpgradeObjectArrayOutput {
	return o
}

func (o SddcVsphereUpgradeObjectArrayOutput) Index(i pulumi.IntInput) SddcVsphereUpgradeObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SddcVsphereUpgradeObject {
		return vs[0].([]SddcVsphereUpgradeObject)[vs[1].(int)]
	}).(SddcVsphereUpgradeObjectOutput)
}

type GetExsiHostsEsxiHostCollection struct {
	// Current billing cycle end date. If the value in `currentSku` and `nextSku` are different, the value specified in `nextSku` becomes the new `currentSKU` when the `contractEndDate` is reached. Example: `2016-08-25T21:10:29.600Z`
	BillingContractEndDate string `pulumi:"billingContractEndDate"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
	CapacityReservationId string `pulumi:"capacityReservationId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the SDDC.
	CompartmentId string `pulumi:"compartmentId"`
	// The availability domain of the ESXi host.
	ComputeAvailabilityDomain string `pulumi:"computeAvailabilityDomain"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute instance.
	ComputeInstanceId string `pulumi:"computeInstanceId"`
	// The billing option currently used by the ESXi host. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	CurrentSku string `pulumi:"currentSku"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is failed.
	FailedEsxiHostId string `pulumi:"failedEsxiHostId"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The date and time when the new esxi host should start billing cycle. [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2021-07-25T21:10:29.600Z`
	GracePeriodEndDate string `pulumi:"gracePeriodEndDate"`
	// The OCPU count of the ESXi host.
	HostOcpuCount float64 `pulumi:"hostOcpuCount"`
	// The compute shape name of the ESXi host. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
	HostShapeName string `pulumi:"hostShapeName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host.
	Id string `pulumi:"id"`
	// The billing option to switch to after the current billing cycle ends. If `nextSku` is null or empty, `currentSku` continues to the next billing cycle. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	NextSku string `pulumi:"nextSku"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that will be upgraded.
	NonUpgradedEsxiHostId string `pulumi:"nonUpgradedEsxiHostId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is newly created to replace the failed node.
	ReplacementEsxiHostId string `pulumi:"replacementEsxiHostId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
	SddcId string `pulumi:"sddcId"`
	// The lifecycle state of the resource.
	State string `pulumi:"state"`
	// The date and time the ESXi host was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time the ESXi host was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that is newly created to upgrade the original host.
	UpgradedReplacementEsxiHostId string `pulumi:"upgradedReplacementEsxiHostId"`
	// The version of VMware software that the Oracle Cloud VMware Solution installed on the ESXi hosts.
	VmwareSoftwareVersion string `pulumi:"vmwareSoftwareVersion"`
}

// GetExsiHostsEsxiHostCollectionInput is an input type that accepts GetExsiHostsEsxiHostCollectionArgs and GetExsiHostsEsxiHostCollectionOutput values.
// You can construct a concrete instance of `GetExsiHostsEsxiHostCollectionInput` via:
//
//	GetExsiHostsEsxiHostCollectionArgs{...}
type GetExsiHostsEsxiHostCollectionInput interface {
	pulumi.Input

	ToGetExsiHostsEsxiHostCollectionOutput() GetExsiHostsEsxiHostCollectionOutput
	ToGetExsiHostsEsxiHostCollectionOutputWithContext(context.Context) GetExsiHostsEsxiHostCollectionOutput
}

type GetExsiHostsEsxiHostCollectionArgs struct {
	// Current billing cycle end date. If the value in `currentSku` and `nextSku` are different, the value specified in `nextSku` becomes the new `currentSKU` when the `contractEndDate` is reached. Example: `2016-08-25T21:10:29.600Z`
	BillingContractEndDate pulumi.StringInput `pulumi:"billingContractEndDate"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
	CapacityReservationId pulumi.StringInput `pulumi:"capacityReservationId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the SDDC.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The availability domain of the ESXi host.
	ComputeAvailabilityDomain pulumi.StringInput `pulumi:"computeAvailabilityDomain"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute instance.
	ComputeInstanceId pulumi.StringInput `pulumi:"computeInstanceId"`
	// The billing option currently used by the ESXi host. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	CurrentSku pulumi.StringInput `pulumi:"currentSku"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is failed.
	FailedEsxiHostId pulumi.StringInput `pulumi:"failedEsxiHostId"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput `pulumi:"freeformTags"`
	// The date and time when the new esxi host should start billing cycle. [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2021-07-25T21:10:29.600Z`
	GracePeriodEndDate pulumi.StringInput `pulumi:"gracePeriodEndDate"`
	// The OCPU count of the ESXi host.
	HostOcpuCount pulumi.Float64Input `pulumi:"hostOcpuCount"`
	// The compute shape name of the ESXi host. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
	HostShapeName pulumi.StringInput `pulumi:"hostShapeName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host.
	Id pulumi.StringInput `pulumi:"id"`
	// The billing option to switch to after the current billing cycle ends. If `nextSku` is null or empty, `currentSku` continues to the next billing cycle. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	NextSku pulumi.StringInput `pulumi:"nextSku"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that will be upgraded.
	NonUpgradedEsxiHostId pulumi.StringInput `pulumi:"nonUpgradedEsxiHostId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is newly created to replace the failed node.
	ReplacementEsxiHostId pulumi.StringInput `pulumi:"replacementEsxiHostId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
	SddcId pulumi.StringInput `pulumi:"sddcId"`
	// The lifecycle state of the resource.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the ESXi host was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The date and time the ESXi host was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that is newly created to upgrade the original host.
	UpgradedReplacementEsxiHostId pulumi.StringInput `pulumi:"upgradedReplacementEsxiHostId"`
	// The version of VMware software that the Oracle Cloud VMware Solution installed on the ESXi hosts.
	VmwareSoftwareVersion pulumi.StringInput `pulumi:"vmwareSoftwareVersion"`
}

func (GetExsiHostsEsxiHostCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExsiHostsEsxiHostCollection)(nil)).Elem()
}

func (i GetExsiHostsEsxiHostCollectionArgs) ToGetExsiHostsEsxiHostCollectionOutput() GetExsiHostsEsxiHostCollectionOutput {
	return i.ToGetExsiHostsEsxiHostCollectionOutputWithContext(context.Background())
}

func (i GetExsiHostsEsxiHostCollectionArgs) ToGetExsiHostsEsxiHostCollectionOutputWithContext(ctx context.Context) GetExsiHostsEsxiHostCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExsiHostsEsxiHostCollectionOutput)
}

// GetExsiHostsEsxiHostCollectionArrayInput is an input type that accepts GetExsiHostsEsxiHostCollectionArray and GetExsiHostsEsxiHostCollectionArrayOutput values.
// You can construct a concrete instance of `GetExsiHostsEsxiHostCollectionArrayInput` via:
//
//	GetExsiHostsEsxiHostCollectionArray{ GetExsiHostsEsxiHostCollectionArgs{...} }
type GetExsiHostsEsxiHostCollectionArrayInput interface {
	pulumi.Input

	ToGetExsiHostsEsxiHostCollectionArrayOutput() GetExsiHostsEsxiHostCollectionArrayOutput
	ToGetExsiHostsEsxiHostCollectionArrayOutputWithContext(context.Context) GetExsiHostsEsxiHostCollectionArrayOutput
}

type GetExsiHostsEsxiHostCollectionArray []GetExsiHostsEsxiHostCollectionInput

func (GetExsiHostsEsxiHostCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExsiHostsEsxiHostCollection)(nil)).Elem()
}

func (i GetExsiHostsEsxiHostCollectionArray) ToGetExsiHostsEsxiHostCollectionArrayOutput() GetExsiHostsEsxiHostCollectionArrayOutput {
	return i.ToGetExsiHostsEsxiHostCollectionArrayOutputWithContext(context.Background())
}

func (i GetExsiHostsEsxiHostCollectionArray) ToGetExsiHostsEsxiHostCollectionArrayOutputWithContext(ctx context.Context) GetExsiHostsEsxiHostCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExsiHostsEsxiHostCollectionArrayOutput)
}

type GetExsiHostsEsxiHostCollectionOutput struct{ *pulumi.OutputState }

func (GetExsiHostsEsxiHostCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExsiHostsEsxiHostCollection)(nil)).Elem()
}

func (o GetExsiHostsEsxiHostCollectionOutput) ToGetExsiHostsEsxiHostCollectionOutput() GetExsiHostsEsxiHostCollectionOutput {
	return o
}

func (o GetExsiHostsEsxiHostCollectionOutput) ToGetExsiHostsEsxiHostCollectionOutputWithContext(ctx context.Context) GetExsiHostsEsxiHostCollectionOutput {
	return o
}

// Current billing cycle end date. If the value in `currentSku` and `nextSku` are different, the value specified in `nextSku` becomes the new `currentSKU` when the `contractEndDate` is reached. Example: `2016-08-25T21:10:29.600Z`
func (o GetExsiHostsEsxiHostCollectionOutput) BillingContractEndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.BillingContractEndDate }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
func (o GetExsiHostsEsxiHostCollectionOutput) CapacityReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.CapacityReservationId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the SDDC.
func (o GetExsiHostsEsxiHostCollectionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The availability domain of the ESXi host.
func (o GetExsiHostsEsxiHostCollectionOutput) ComputeAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.ComputeAvailabilityDomain }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Compute instance.
func (o GetExsiHostsEsxiHostCollectionOutput) ComputeInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.ComputeInstanceId }).(pulumi.StringOutput)
}

// The billing option currently used by the ESXi host. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
func (o GetExsiHostsEsxiHostCollectionOutput) CurrentSku() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.CurrentSku }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o GetExsiHostsEsxiHostCollectionOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A filter to return only resources that match the given display name exactly.
func (o GetExsiHostsEsxiHostCollectionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is failed.
func (o GetExsiHostsEsxiHostCollectionOutput) FailedEsxiHostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.FailedEsxiHostId }).(pulumi.StringOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o GetExsiHostsEsxiHostCollectionOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The date and time when the new esxi host should start billing cycle. [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2021-07-25T21:10:29.600Z`
func (o GetExsiHostsEsxiHostCollectionOutput) GracePeriodEndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.GracePeriodEndDate }).(pulumi.StringOutput)
}

// The OCPU count of the ESXi host.
func (o GetExsiHostsEsxiHostCollectionOutput) HostOcpuCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) float64 { return v.HostOcpuCount }).(pulumi.Float64Output)
}

// The compute shape name of the ESXi host. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
func (o GetExsiHostsEsxiHostCollectionOutput) HostShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.HostShapeName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host.
func (o GetExsiHostsEsxiHostCollectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.Id }).(pulumi.StringOutput)
}

// The billing option to switch to after the current billing cycle ends. If `nextSku` is null or empty, `currentSku` continues to the next billing cycle. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
func (o GetExsiHostsEsxiHostCollectionOutput) NextSku() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.NextSku }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that will be upgraded.
func (o GetExsiHostsEsxiHostCollectionOutput) NonUpgradedEsxiHostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.NonUpgradedEsxiHostId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the esxi host that is newly created to replace the failed node.
func (o GetExsiHostsEsxiHostCollectionOutput) ReplacementEsxiHostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.ReplacementEsxiHostId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
func (o GetExsiHostsEsxiHostCollectionOutput) SddcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.SddcId }).(pulumi.StringOutput)
}

// The lifecycle state of the resource.
func (o GetExsiHostsEsxiHostCollectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the ESXi host was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o GetExsiHostsEsxiHostCollectionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time the ESXi host was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o GetExsiHostsEsxiHostCollectionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ESXi host that is newly created to upgrade the original host.
func (o GetExsiHostsEsxiHostCollectionOutput) UpgradedReplacementEsxiHostId() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.UpgradedReplacementEsxiHostId }).(pulumi.StringOutput)
}

// The version of VMware software that the Oracle Cloud VMware Solution installed on the ESXi hosts.
func (o GetExsiHostsEsxiHostCollectionOutput) VmwareSoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsEsxiHostCollection) string { return v.VmwareSoftwareVersion }).(pulumi.StringOutput)
}

type GetExsiHostsEsxiHostCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetExsiHostsEsxiHostCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExsiHostsEsxiHostCollection)(nil)).Elem()
}

func (o GetExsiHostsEsxiHostCollectionArrayOutput) ToGetExsiHostsEsxiHostCollectionArrayOutput() GetExsiHostsEsxiHostCollectionArrayOutput {
	return o
}

func (o GetExsiHostsEsxiHostCollectionArrayOutput) ToGetExsiHostsEsxiHostCollectionArrayOutputWithContext(ctx context.Context) GetExsiHostsEsxiHostCollectionArrayOutput {
	return o
}

func (o GetExsiHostsEsxiHostCollectionArrayOutput) Index(i pulumi.IntInput) GetExsiHostsEsxiHostCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExsiHostsEsxiHostCollection {
		return vs[0].([]GetExsiHostsEsxiHostCollection)[vs[1].(int)]
	}).(GetExsiHostsEsxiHostCollectionOutput)
}

type GetExsiHostsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetExsiHostsFilterInput is an input type that accepts GetExsiHostsFilterArgs and GetExsiHostsFilterOutput values.
// You can construct a concrete instance of `GetExsiHostsFilterInput` via:
//
//	GetExsiHostsFilterArgs{...}
type GetExsiHostsFilterInput interface {
	pulumi.Input

	ToGetExsiHostsFilterOutput() GetExsiHostsFilterOutput
	ToGetExsiHostsFilterOutputWithContext(context.Context) GetExsiHostsFilterOutput
}

type GetExsiHostsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetExsiHostsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExsiHostsFilter)(nil)).Elem()
}

func (i GetExsiHostsFilterArgs) ToGetExsiHostsFilterOutput() GetExsiHostsFilterOutput {
	return i.ToGetExsiHostsFilterOutputWithContext(context.Background())
}

func (i GetExsiHostsFilterArgs) ToGetExsiHostsFilterOutputWithContext(ctx context.Context) GetExsiHostsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExsiHostsFilterOutput)
}

// GetExsiHostsFilterArrayInput is an input type that accepts GetExsiHostsFilterArray and GetExsiHostsFilterArrayOutput values.
// You can construct a concrete instance of `GetExsiHostsFilterArrayInput` via:
//
//	GetExsiHostsFilterArray{ GetExsiHostsFilterArgs{...} }
type GetExsiHostsFilterArrayInput interface {
	pulumi.Input

	ToGetExsiHostsFilterArrayOutput() GetExsiHostsFilterArrayOutput
	ToGetExsiHostsFilterArrayOutputWithContext(context.Context) GetExsiHostsFilterArrayOutput
}

type GetExsiHostsFilterArray []GetExsiHostsFilterInput

func (GetExsiHostsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExsiHostsFilter)(nil)).Elem()
}

func (i GetExsiHostsFilterArray) ToGetExsiHostsFilterArrayOutput() GetExsiHostsFilterArrayOutput {
	return i.ToGetExsiHostsFilterArrayOutputWithContext(context.Background())
}

func (i GetExsiHostsFilterArray) ToGetExsiHostsFilterArrayOutputWithContext(ctx context.Context) GetExsiHostsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExsiHostsFilterArrayOutput)
}

type GetExsiHostsFilterOutput struct{ *pulumi.OutputState }

func (GetExsiHostsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExsiHostsFilter)(nil)).Elem()
}

func (o GetExsiHostsFilterOutput) ToGetExsiHostsFilterOutput() GetExsiHostsFilterOutput {
	return o
}

func (o GetExsiHostsFilterOutput) ToGetExsiHostsFilterOutputWithContext(ctx context.Context) GetExsiHostsFilterOutput {
	return o
}

func (o GetExsiHostsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetExsiHostsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetExsiHostsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetExsiHostsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetExsiHostsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetExsiHostsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetExsiHostsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetExsiHostsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExsiHostsFilter)(nil)).Elem()
}

func (o GetExsiHostsFilterArrayOutput) ToGetExsiHostsFilterArrayOutput() GetExsiHostsFilterArrayOutput {
	return o
}

func (o GetExsiHostsFilterArrayOutput) ToGetExsiHostsFilterArrayOutputWithContext(ctx context.Context) GetExsiHostsFilterArrayOutput {
	return o
}

func (o GetExsiHostsFilterArrayOutput) Index(i pulumi.IntInput) GetExsiHostsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExsiHostsFilter {
		return vs[0].([]GetExsiHostsFilter)[vs[1].(int)]
	}).(GetExsiHostsFilterOutput)
}

type GetSddcHcxOnPremLicense struct {
	// HCX on-premise license key value.
	ActivationKey string `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status string `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName string `pulumi:"systemName"`
}

// GetSddcHcxOnPremLicenseInput is an input type that accepts GetSddcHcxOnPremLicenseArgs and GetSddcHcxOnPremLicenseOutput values.
// You can construct a concrete instance of `GetSddcHcxOnPremLicenseInput` via:
//
//	GetSddcHcxOnPremLicenseArgs{...}
type GetSddcHcxOnPremLicenseInput interface {
	pulumi.Input

	ToGetSddcHcxOnPremLicenseOutput() GetSddcHcxOnPremLicenseOutput
	ToGetSddcHcxOnPremLicenseOutputWithContext(context.Context) GetSddcHcxOnPremLicenseOutput
}

type GetSddcHcxOnPremLicenseArgs struct {
	// HCX on-premise license key value.
	ActivationKey pulumi.StringInput `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status pulumi.StringInput `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName pulumi.StringInput `pulumi:"systemName"`
}

func (GetSddcHcxOnPremLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcHcxOnPremLicense)(nil)).Elem()
}

func (i GetSddcHcxOnPremLicenseArgs) ToGetSddcHcxOnPremLicenseOutput() GetSddcHcxOnPremLicenseOutput {
	return i.ToGetSddcHcxOnPremLicenseOutputWithContext(context.Background())
}

func (i GetSddcHcxOnPremLicenseArgs) ToGetSddcHcxOnPremLicenseOutputWithContext(ctx context.Context) GetSddcHcxOnPremLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcHcxOnPremLicenseOutput)
}

// GetSddcHcxOnPremLicenseArrayInput is an input type that accepts GetSddcHcxOnPremLicenseArray and GetSddcHcxOnPremLicenseArrayOutput values.
// You can construct a concrete instance of `GetSddcHcxOnPremLicenseArrayInput` via:
//
//	GetSddcHcxOnPremLicenseArray{ GetSddcHcxOnPremLicenseArgs{...} }
type GetSddcHcxOnPremLicenseArrayInput interface {
	pulumi.Input

	ToGetSddcHcxOnPremLicenseArrayOutput() GetSddcHcxOnPremLicenseArrayOutput
	ToGetSddcHcxOnPremLicenseArrayOutputWithContext(context.Context) GetSddcHcxOnPremLicenseArrayOutput
}

type GetSddcHcxOnPremLicenseArray []GetSddcHcxOnPremLicenseInput

func (GetSddcHcxOnPremLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcHcxOnPremLicense)(nil)).Elem()
}

func (i GetSddcHcxOnPremLicenseArray) ToGetSddcHcxOnPremLicenseArrayOutput() GetSddcHcxOnPremLicenseArrayOutput {
	return i.ToGetSddcHcxOnPremLicenseArrayOutputWithContext(context.Background())
}

func (i GetSddcHcxOnPremLicenseArray) ToGetSddcHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) GetSddcHcxOnPremLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcHcxOnPremLicenseArrayOutput)
}

type GetSddcHcxOnPremLicenseOutput struct{ *pulumi.OutputState }

func (GetSddcHcxOnPremLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcHcxOnPremLicense)(nil)).Elem()
}

func (o GetSddcHcxOnPremLicenseOutput) ToGetSddcHcxOnPremLicenseOutput() GetSddcHcxOnPremLicenseOutput {
	return o
}

func (o GetSddcHcxOnPremLicenseOutput) ToGetSddcHcxOnPremLicenseOutputWithContext(ctx context.Context) GetSddcHcxOnPremLicenseOutput {
	return o
}

// HCX on-premise license key value.
func (o GetSddcHcxOnPremLicenseOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcHcxOnPremLicense) string { return v.ActivationKey }).(pulumi.StringOutput)
}

// status of HCX on-premise license.
func (o GetSddcHcxOnPremLicenseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcHcxOnPremLicense) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the system that consumed the HCX on-premise license
func (o GetSddcHcxOnPremLicenseOutput) SystemName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcHcxOnPremLicense) string { return v.SystemName }).(pulumi.StringOutput)
}

type GetSddcHcxOnPremLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetSddcHcxOnPremLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcHcxOnPremLicense)(nil)).Elem()
}

func (o GetSddcHcxOnPremLicenseArrayOutput) ToGetSddcHcxOnPremLicenseArrayOutput() GetSddcHcxOnPremLicenseArrayOutput {
	return o
}

func (o GetSddcHcxOnPremLicenseArrayOutput) ToGetSddcHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) GetSddcHcxOnPremLicenseArrayOutput {
	return o
}

func (o GetSddcHcxOnPremLicenseArrayOutput) Index(i pulumi.IntInput) GetSddcHcxOnPremLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcHcxOnPremLicense {
		return vs[0].([]GetSddcHcxOnPremLicense)[vs[1].(int)]
	}).(GetSddcHcxOnPremLicenseOutput)
}

type GetSddcUpgradeLicense struct {
	// vSphere license key value.
	LicenseKey string `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType string `pulumi:"licenseType"`
}

// GetSddcUpgradeLicenseInput is an input type that accepts GetSddcUpgradeLicenseArgs and GetSddcUpgradeLicenseOutput values.
// You can construct a concrete instance of `GetSddcUpgradeLicenseInput` via:
//
//	GetSddcUpgradeLicenseArgs{...}
type GetSddcUpgradeLicenseInput interface {
	pulumi.Input

	ToGetSddcUpgradeLicenseOutput() GetSddcUpgradeLicenseOutput
	ToGetSddcUpgradeLicenseOutputWithContext(context.Context) GetSddcUpgradeLicenseOutput
}

type GetSddcUpgradeLicenseArgs struct {
	// vSphere license key value.
	LicenseKey pulumi.StringInput `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType pulumi.StringInput `pulumi:"licenseType"`
}

func (GetSddcUpgradeLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcUpgradeLicense)(nil)).Elem()
}

func (i GetSddcUpgradeLicenseArgs) ToGetSddcUpgradeLicenseOutput() GetSddcUpgradeLicenseOutput {
	return i.ToGetSddcUpgradeLicenseOutputWithContext(context.Background())
}

func (i GetSddcUpgradeLicenseArgs) ToGetSddcUpgradeLicenseOutputWithContext(ctx context.Context) GetSddcUpgradeLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcUpgradeLicenseOutput)
}

// GetSddcUpgradeLicenseArrayInput is an input type that accepts GetSddcUpgradeLicenseArray and GetSddcUpgradeLicenseArrayOutput values.
// You can construct a concrete instance of `GetSddcUpgradeLicenseArrayInput` via:
//
//	GetSddcUpgradeLicenseArray{ GetSddcUpgradeLicenseArgs{...} }
type GetSddcUpgradeLicenseArrayInput interface {
	pulumi.Input

	ToGetSddcUpgradeLicenseArrayOutput() GetSddcUpgradeLicenseArrayOutput
	ToGetSddcUpgradeLicenseArrayOutputWithContext(context.Context) GetSddcUpgradeLicenseArrayOutput
}

type GetSddcUpgradeLicenseArray []GetSddcUpgradeLicenseInput

func (GetSddcUpgradeLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcUpgradeLicense)(nil)).Elem()
}

func (i GetSddcUpgradeLicenseArray) ToGetSddcUpgradeLicenseArrayOutput() GetSddcUpgradeLicenseArrayOutput {
	return i.ToGetSddcUpgradeLicenseArrayOutputWithContext(context.Background())
}

func (i GetSddcUpgradeLicenseArray) ToGetSddcUpgradeLicenseArrayOutputWithContext(ctx context.Context) GetSddcUpgradeLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcUpgradeLicenseArrayOutput)
}

type GetSddcUpgradeLicenseOutput struct{ *pulumi.OutputState }

func (GetSddcUpgradeLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcUpgradeLicense)(nil)).Elem()
}

func (o GetSddcUpgradeLicenseOutput) ToGetSddcUpgradeLicenseOutput() GetSddcUpgradeLicenseOutput {
	return o
}

func (o GetSddcUpgradeLicenseOutput) ToGetSddcUpgradeLicenseOutputWithContext(ctx context.Context) GetSddcUpgradeLicenseOutput {
	return o
}

// vSphere license key value.
func (o GetSddcUpgradeLicenseOutput) LicenseKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcUpgradeLicense) string { return v.LicenseKey }).(pulumi.StringOutput)
}

// vSphere license type.
func (o GetSddcUpgradeLicenseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcUpgradeLicense) string { return v.LicenseType }).(pulumi.StringOutput)
}

type GetSddcUpgradeLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetSddcUpgradeLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcUpgradeLicense)(nil)).Elem()
}

func (o GetSddcUpgradeLicenseArrayOutput) ToGetSddcUpgradeLicenseArrayOutput() GetSddcUpgradeLicenseArrayOutput {
	return o
}

func (o GetSddcUpgradeLicenseArrayOutput) ToGetSddcUpgradeLicenseArrayOutputWithContext(ctx context.Context) GetSddcUpgradeLicenseArrayOutput {
	return o
}

func (o GetSddcUpgradeLicenseArrayOutput) Index(i pulumi.IntInput) GetSddcUpgradeLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcUpgradeLicense {
		return vs[0].([]GetSddcUpgradeLicense)[vs[1].(int)]
	}).(GetSddcUpgradeLicenseOutput)
}

type GetSddcVsphereUpgradeObject struct {
	// Binary object download link.
	DownloadLink string `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription string `pulumi:"linkDescription"`
}

// GetSddcVsphereUpgradeObjectInput is an input type that accepts GetSddcVsphereUpgradeObjectArgs and GetSddcVsphereUpgradeObjectOutput values.
// You can construct a concrete instance of `GetSddcVsphereUpgradeObjectInput` via:
//
//	GetSddcVsphereUpgradeObjectArgs{...}
type GetSddcVsphereUpgradeObjectInput interface {
	pulumi.Input

	ToGetSddcVsphereUpgradeObjectOutput() GetSddcVsphereUpgradeObjectOutput
	ToGetSddcVsphereUpgradeObjectOutputWithContext(context.Context) GetSddcVsphereUpgradeObjectOutput
}

type GetSddcVsphereUpgradeObjectArgs struct {
	// Binary object download link.
	DownloadLink pulumi.StringInput `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription pulumi.StringInput `pulumi:"linkDescription"`
}

func (GetSddcVsphereUpgradeObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcVsphereUpgradeObject)(nil)).Elem()
}

func (i GetSddcVsphereUpgradeObjectArgs) ToGetSddcVsphereUpgradeObjectOutput() GetSddcVsphereUpgradeObjectOutput {
	return i.ToGetSddcVsphereUpgradeObjectOutputWithContext(context.Background())
}

func (i GetSddcVsphereUpgradeObjectArgs) ToGetSddcVsphereUpgradeObjectOutputWithContext(ctx context.Context) GetSddcVsphereUpgradeObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcVsphereUpgradeObjectOutput)
}

// GetSddcVsphereUpgradeObjectArrayInput is an input type that accepts GetSddcVsphereUpgradeObjectArray and GetSddcVsphereUpgradeObjectArrayOutput values.
// You can construct a concrete instance of `GetSddcVsphereUpgradeObjectArrayInput` via:
//
//	GetSddcVsphereUpgradeObjectArray{ GetSddcVsphereUpgradeObjectArgs{...} }
type GetSddcVsphereUpgradeObjectArrayInput interface {
	pulumi.Input

	ToGetSddcVsphereUpgradeObjectArrayOutput() GetSddcVsphereUpgradeObjectArrayOutput
	ToGetSddcVsphereUpgradeObjectArrayOutputWithContext(context.Context) GetSddcVsphereUpgradeObjectArrayOutput
}

type GetSddcVsphereUpgradeObjectArray []GetSddcVsphereUpgradeObjectInput

func (GetSddcVsphereUpgradeObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcVsphereUpgradeObject)(nil)).Elem()
}

func (i GetSddcVsphereUpgradeObjectArray) ToGetSddcVsphereUpgradeObjectArrayOutput() GetSddcVsphereUpgradeObjectArrayOutput {
	return i.ToGetSddcVsphereUpgradeObjectArrayOutputWithContext(context.Background())
}

func (i GetSddcVsphereUpgradeObjectArray) ToGetSddcVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) GetSddcVsphereUpgradeObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcVsphereUpgradeObjectArrayOutput)
}

type GetSddcVsphereUpgradeObjectOutput struct{ *pulumi.OutputState }

func (GetSddcVsphereUpgradeObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcVsphereUpgradeObject)(nil)).Elem()
}

func (o GetSddcVsphereUpgradeObjectOutput) ToGetSddcVsphereUpgradeObjectOutput() GetSddcVsphereUpgradeObjectOutput {
	return o
}

func (o GetSddcVsphereUpgradeObjectOutput) ToGetSddcVsphereUpgradeObjectOutputWithContext(ctx context.Context) GetSddcVsphereUpgradeObjectOutput {
	return o
}

// Binary object download link.
func (o GetSddcVsphereUpgradeObjectOutput) DownloadLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcVsphereUpgradeObject) string { return v.DownloadLink }).(pulumi.StringOutput)
}

// Binary object description.
func (o GetSddcVsphereUpgradeObjectOutput) LinkDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcVsphereUpgradeObject) string { return v.LinkDescription }).(pulumi.StringOutput)
}

type GetSddcVsphereUpgradeObjectArrayOutput struct{ *pulumi.OutputState }

func (GetSddcVsphereUpgradeObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcVsphereUpgradeObject)(nil)).Elem()
}

func (o GetSddcVsphereUpgradeObjectArrayOutput) ToGetSddcVsphereUpgradeObjectArrayOutput() GetSddcVsphereUpgradeObjectArrayOutput {
	return o
}

func (o GetSddcVsphereUpgradeObjectArrayOutput) ToGetSddcVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) GetSddcVsphereUpgradeObjectArrayOutput {
	return o
}

func (o GetSddcVsphereUpgradeObjectArrayOutput) Index(i pulumi.IntInput) GetSddcVsphereUpgradeObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcVsphereUpgradeObject {
		return vs[0].([]GetSddcVsphereUpgradeObject)[vs[1].(int)]
	}).(GetSddcVsphereUpgradeObjectOutput)
}

type GetSddcsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSddcsFilterInput is an input type that accepts GetSddcsFilterArgs and GetSddcsFilterOutput values.
// You can construct a concrete instance of `GetSddcsFilterInput` via:
//
//	GetSddcsFilterArgs{...}
type GetSddcsFilterInput interface {
	pulumi.Input

	ToGetSddcsFilterOutput() GetSddcsFilterOutput
	ToGetSddcsFilterOutputWithContext(context.Context) GetSddcsFilterOutput
}

type GetSddcsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSddcsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsFilter)(nil)).Elem()
}

func (i GetSddcsFilterArgs) ToGetSddcsFilterOutput() GetSddcsFilterOutput {
	return i.ToGetSddcsFilterOutputWithContext(context.Background())
}

func (i GetSddcsFilterArgs) ToGetSddcsFilterOutputWithContext(ctx context.Context) GetSddcsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsFilterOutput)
}

// GetSddcsFilterArrayInput is an input type that accepts GetSddcsFilterArray and GetSddcsFilterArrayOutput values.
// You can construct a concrete instance of `GetSddcsFilterArrayInput` via:
//
//	GetSddcsFilterArray{ GetSddcsFilterArgs{...} }
type GetSddcsFilterArrayInput interface {
	pulumi.Input

	ToGetSddcsFilterArrayOutput() GetSddcsFilterArrayOutput
	ToGetSddcsFilterArrayOutputWithContext(context.Context) GetSddcsFilterArrayOutput
}

type GetSddcsFilterArray []GetSddcsFilterInput

func (GetSddcsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsFilter)(nil)).Elem()
}

func (i GetSddcsFilterArray) ToGetSddcsFilterArrayOutput() GetSddcsFilterArrayOutput {
	return i.ToGetSddcsFilterArrayOutputWithContext(context.Background())
}

func (i GetSddcsFilterArray) ToGetSddcsFilterArrayOutputWithContext(ctx context.Context) GetSddcsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsFilterArrayOutput)
}

type GetSddcsFilterOutput struct{ *pulumi.OutputState }

func (GetSddcsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsFilter)(nil)).Elem()
}

func (o GetSddcsFilterOutput) ToGetSddcsFilterOutput() GetSddcsFilterOutput {
	return o
}

func (o GetSddcsFilterOutput) ToGetSddcsFilterOutputWithContext(ctx context.Context) GetSddcsFilterOutput {
	return o
}

func (o GetSddcsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSddcsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSddcsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSddcsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSddcsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSddcsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSddcsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsFilter)(nil)).Elem()
}

func (o GetSddcsFilterArrayOutput) ToGetSddcsFilterArrayOutput() GetSddcsFilterArrayOutput {
	return o
}

func (o GetSddcsFilterArrayOutput) ToGetSddcsFilterArrayOutputWithContext(ctx context.Context) GetSddcsFilterArrayOutput {
	return o
}

func (o GetSddcsFilterArrayOutput) Index(i pulumi.IntInput) GetSddcsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcsFilter {
		return vs[0].([]GetSddcsFilter)[vs[1].(int)]
	}).(GetSddcsFilterOutput)
}

type GetSddcsSddcCollection struct {
	// The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
	ActualEsxiHostsCount int `pulumi:"actualEsxiHostsCount"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
	CapacityReservationId string `pulumi:"capacityReservationId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
	ComputeAvailabilityDomain string `pulumi:"computeAvailabilityDomain"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName string `pulumi:"displayName"`
	// The number of ESXi hosts in the SDDC.
	EsxiHostsCount int `pulumi:"esxiHostsCount"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	HcxAction    string                 `pulumi:"hcxAction"`
	// The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	HcxFqdn string `pulumi:"hcxFqdn"`
	// The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value.
	HcxInitialPassword string `pulumi:"hcxInitialPassword"`
	// The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys.
	HcxOnPremKey string `pulumi:"hcxOnPremKey"`
	// The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
	HcxOnPremLicenses []GetSddcsSddcCollectionHcxOnPremLicense `pulumi:"hcxOnPremLicenses"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
	HcxPrivateIpId string `pulumi:"hcxPrivateIpId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment.
	HcxVlanId string `pulumi:"hcxVlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
	Id string `pulumi:"id"`
	// The initial OCPU count of the SDDC's ESXi hosts.
	InitialHostOcpuCount float64 `pulumi:"initialHostOcpuCount"`
	// The initial compute shape of the SDDC's ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
	InitialHostShapeName string `pulumi:"initialHostShapeName"`
	// The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	InitialSku string `pulumi:"initialSku"`
	// A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn't set, the SDDC's `displayName` is used as the prefix.
	InstanceDisplayNamePrefix string `pulumi:"instanceDisplayNamePrefix"`
	// Indicates whether HCX is enabled for this SDDC.
	IsHcxEnabled bool `pulumi:"isHcxEnabled"`
	// Indicates whether HCX Enterprise is enabled for this SDDC.
	IsHcxEnterpriseEnabled bool `pulumi:"isHcxEnterpriseEnabled"`
	// Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
	IsHcxPendingDowngrade bool `pulumi:"isHcxPendingDowngrade"`
	// Indicates whether shielded instance is enabled at the SDDC level.
	IsShieldedInstanceEnabled bool `pulumi:"isShieldedInstanceEnabled"`
	// Indicates whether this SDDC is designated for only single ESXi host.
	IsSingleHostSddc bool `pulumi:"isSingleHostSddc"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
	NsxEdgeUplink1vlanId string `pulumi:"nsxEdgeUplink1vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
	NsxEdgeUplink2vlanId string `pulumi:"nsxEdgeUplink2vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
	NsxEdgeUplinkIpId string `pulumi:"nsxEdgeUplinkIpId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
	NsxEdgeVtepVlanId string `pulumi:"nsxEdgeVtepVlanId"`
	// The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	NsxManagerFqdn string `pulumi:"nsxManagerFqdn"`
	// The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value.
	NsxManagerInitialPassword string `pulumi:"nsxManagerInitialPassword"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
	NsxManagerPrivateIpId string `pulumi:"nsxManagerPrivateIpId"`
	// The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
	NsxManagerUsername string `pulumi:"nsxManagerUsername"`
	// The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
	NsxOverlaySegmentName string `pulumi:"nsxOverlaySegmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
	NsxVtepVlanId string `pulumi:"nsxVtepVlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC.
	ProvisioningSubnetId string `pulumi:"provisioningSubnetId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment.
	ProvisioningVlanId      string `pulumi:"provisioningVlanId"`
	RefreshHcxLicenseStatus bool   `pulumi:"refreshHcxLicenseStatus"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment.
	ReplicationVlanId                string   `pulumi:"replicationVlanId"`
	ReservingHcxOnPremiseLicenseKeys []string `pulumi:"reservingHcxOnPremiseLicenseKeys"`
	// One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorizedKeys` file.
	SshAuthorizedKeys string `pulumi:"sshAuthorizedKeys"`
	// The lifecycle state of the resource.
	State string `pulumi:"state"`
	// The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated string `pulumi:"timeCreated"`
	// The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeHcxBillingCycleEnd string `pulumi:"timeHcxBillingCycleEnd"`
	// The date and time the SDDC's HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeHcxLicenseStatusUpdated string `pulumi:"timeHcxLicenseStatusUpdated"`
	// The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated string `pulumi:"timeUpdated"`
	// The vSphere licenses to be used when upgrade SDDC.
	UpgradeLicenses []GetSddcsSddcCollectionUpgradeLicense `pulumi:"upgradeLicenses"`
	// The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	VcenterFqdn string `pulumi:"vcenterFqdn"`
	// The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value.
	VcenterInitialPassword string `pulumi:"vcenterInitialPassword"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
	VcenterPrivateIpId string `pulumi:"vcenterPrivateIpId"`
	// The SDDC includes an administrator username and initial password for vCenter. You can change this initial username to a different value in vCenter.
	VcenterUsername string `pulumi:"vcenterUsername"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
	VmotionVlanId string `pulumi:"vmotionVlanId"`
	// In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
	VmwareSoftwareVersion string `pulumi:"vmwareSoftwareVersion"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
	VsanVlanId string `pulumi:"vsanVlanId"`
	// The link of guidance to upgrade vSphere.
	VsphereUpgradeGuide string `pulumi:"vsphereUpgradeGuide"`
	// The links of binary objects needed for upgrade vSphere.
	VsphereUpgradeObjects []GetSddcsSddcCollectionVsphereUpgradeObject `pulumi:"vsphereUpgradeObjects"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
	VsphereVlanId string `pulumi:"vsphereVlanId"`
	// The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads.
	WorkloadNetworkCidr string `pulumi:"workloadNetworkCidr"`
}

// GetSddcsSddcCollectionInput is an input type that accepts GetSddcsSddcCollectionArgs and GetSddcsSddcCollectionOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionInput` via:
//
//	GetSddcsSddcCollectionArgs{...}
type GetSddcsSddcCollectionInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionOutput() GetSddcsSddcCollectionOutput
	ToGetSddcsSddcCollectionOutputWithContext(context.Context) GetSddcsSddcCollectionOutput
}

type GetSddcsSddcCollectionArgs struct {
	// The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
	ActualEsxiHostsCount pulumi.IntInput `pulumi:"actualEsxiHostsCount"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
	CapacityReservationId pulumi.StringInput `pulumi:"capacityReservationId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
	ComputeAvailabilityDomain pulumi.StringInput `pulumi:"computeAvailabilityDomain"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput `pulumi:"definedTags"`
	// A filter to return only resources that match the given display name exactly.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The number of ESXi hosts in the SDDC.
	EsxiHostsCount pulumi.IntInput `pulumi:"esxiHostsCount"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput    `pulumi:"freeformTags"`
	HcxAction    pulumi.StringInput `pulumi:"hcxAction"`
	// The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	HcxFqdn pulumi.StringInput `pulumi:"hcxFqdn"`
	// The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value.
	HcxInitialPassword pulumi.StringInput `pulumi:"hcxInitialPassword"`
	// The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys.
	HcxOnPremKey pulumi.StringInput `pulumi:"hcxOnPremKey"`
	// The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
	HcxOnPremLicenses GetSddcsSddcCollectionHcxOnPremLicenseArrayInput `pulumi:"hcxOnPremLicenses"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
	HcxPrivateIpId pulumi.StringInput `pulumi:"hcxPrivateIpId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment.
	HcxVlanId pulumi.StringInput `pulumi:"hcxVlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
	Id pulumi.StringInput `pulumi:"id"`
	// The initial OCPU count of the SDDC's ESXi hosts.
	InitialHostOcpuCount pulumi.Float64Input `pulumi:"initialHostOcpuCount"`
	// The initial compute shape of the SDDC's ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
	InitialHostShapeName pulumi.StringInput `pulumi:"initialHostShapeName"`
	// The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
	InitialSku pulumi.StringInput `pulumi:"initialSku"`
	// A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn't set, the SDDC's `displayName` is used as the prefix.
	InstanceDisplayNamePrefix pulumi.StringInput `pulumi:"instanceDisplayNamePrefix"`
	// Indicates whether HCX is enabled for this SDDC.
	IsHcxEnabled pulumi.BoolInput `pulumi:"isHcxEnabled"`
	// Indicates whether HCX Enterprise is enabled for this SDDC.
	IsHcxEnterpriseEnabled pulumi.BoolInput `pulumi:"isHcxEnterpriseEnabled"`
	// Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
	IsHcxPendingDowngrade pulumi.BoolInput `pulumi:"isHcxPendingDowngrade"`
	// Indicates whether shielded instance is enabled at the SDDC level.
	IsShieldedInstanceEnabled pulumi.BoolInput `pulumi:"isShieldedInstanceEnabled"`
	// Indicates whether this SDDC is designated for only single ESXi host.
	IsSingleHostSddc pulumi.BoolInput `pulumi:"isSingleHostSddc"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
	NsxEdgeUplink1vlanId pulumi.StringInput `pulumi:"nsxEdgeUplink1vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
	NsxEdgeUplink2vlanId pulumi.StringInput `pulumi:"nsxEdgeUplink2vlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
	NsxEdgeUplinkIpId pulumi.StringInput `pulumi:"nsxEdgeUplinkIpId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
	NsxEdgeVtepVlanId pulumi.StringInput `pulumi:"nsxEdgeVtepVlanId"`
	// The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	NsxManagerFqdn pulumi.StringInput `pulumi:"nsxManagerFqdn"`
	// The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value.
	NsxManagerInitialPassword pulumi.StringInput `pulumi:"nsxManagerInitialPassword"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
	NsxManagerPrivateIpId pulumi.StringInput `pulumi:"nsxManagerPrivateIpId"`
	// The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
	NsxManagerUsername pulumi.StringInput `pulumi:"nsxManagerUsername"`
	// The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
	NsxOverlaySegmentName pulumi.StringInput `pulumi:"nsxOverlaySegmentName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
	NsxVtepVlanId pulumi.StringInput `pulumi:"nsxVtepVlanId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC.
	ProvisioningSubnetId pulumi.StringInput `pulumi:"provisioningSubnetId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment.
	ProvisioningVlanId      pulumi.StringInput `pulumi:"provisioningVlanId"`
	RefreshHcxLicenseStatus pulumi.BoolInput   `pulumi:"refreshHcxLicenseStatus"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment.
	ReplicationVlanId                pulumi.StringInput      `pulumi:"replicationVlanId"`
	ReservingHcxOnPremiseLicenseKeys pulumi.StringArrayInput `pulumi:"reservingHcxOnPremiseLicenseKeys"`
	// One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorizedKeys` file.
	SshAuthorizedKeys pulumi.StringInput `pulumi:"sshAuthorizedKeys"`
	// The lifecycle state of the resource.
	State pulumi.StringInput `pulumi:"state"`
	// The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeHcxBillingCycleEnd pulumi.StringInput `pulumi:"timeHcxBillingCycleEnd"`
	// The date and time the SDDC's HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeHcxLicenseStatusUpdated pulumi.StringInput `pulumi:"timeHcxLicenseStatusUpdated"`
	// The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeUpdated pulumi.StringInput `pulumi:"timeUpdated"`
	// The vSphere licenses to be used when upgrade SDDC.
	UpgradeLicenses GetSddcsSddcCollectionUpgradeLicenseArrayInput `pulumi:"upgradeLicenses"`
	// The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
	VcenterFqdn pulumi.StringInput `pulumi:"vcenterFqdn"`
	// The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value.
	VcenterInitialPassword pulumi.StringInput `pulumi:"vcenterInitialPassword"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
	VcenterPrivateIpId pulumi.StringInput `pulumi:"vcenterPrivateIpId"`
	// The SDDC includes an administrator username and initial password for vCenter. You can change this initial username to a different value in vCenter.
	VcenterUsername pulumi.StringInput `pulumi:"vcenterUsername"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
	VmotionVlanId pulumi.StringInput `pulumi:"vmotionVlanId"`
	// In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
	VmwareSoftwareVersion pulumi.StringInput `pulumi:"vmwareSoftwareVersion"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
	VsanVlanId pulumi.StringInput `pulumi:"vsanVlanId"`
	// The link of guidance to upgrade vSphere.
	VsphereUpgradeGuide pulumi.StringInput `pulumi:"vsphereUpgradeGuide"`
	// The links of binary objects needed for upgrade vSphere.
	VsphereUpgradeObjects GetSddcsSddcCollectionVsphereUpgradeObjectArrayInput `pulumi:"vsphereUpgradeObjects"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
	VsphereVlanId pulumi.StringInput `pulumi:"vsphereVlanId"`
	// The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads.
	WorkloadNetworkCidr pulumi.StringInput `pulumi:"workloadNetworkCidr"`
}

func (GetSddcsSddcCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollection)(nil)).Elem()
}

func (i GetSddcsSddcCollectionArgs) ToGetSddcsSddcCollectionOutput() GetSddcsSddcCollectionOutput {
	return i.ToGetSddcsSddcCollectionOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionArgs) ToGetSddcsSddcCollectionOutputWithContext(ctx context.Context) GetSddcsSddcCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionOutput)
}

// GetSddcsSddcCollectionArrayInput is an input type that accepts GetSddcsSddcCollectionArray and GetSddcsSddcCollectionArrayOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionArrayInput` via:
//
//	GetSddcsSddcCollectionArray{ GetSddcsSddcCollectionArgs{...} }
type GetSddcsSddcCollectionArrayInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionArrayOutput() GetSddcsSddcCollectionArrayOutput
	ToGetSddcsSddcCollectionArrayOutputWithContext(context.Context) GetSddcsSddcCollectionArrayOutput
}

type GetSddcsSddcCollectionArray []GetSddcsSddcCollectionInput

func (GetSddcsSddcCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollection)(nil)).Elem()
}

func (i GetSddcsSddcCollectionArray) ToGetSddcsSddcCollectionArrayOutput() GetSddcsSddcCollectionArrayOutput {
	return i.ToGetSddcsSddcCollectionArrayOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionArray) ToGetSddcsSddcCollectionArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionArrayOutput)
}

type GetSddcsSddcCollectionOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollection)(nil)).Elem()
}

func (o GetSddcsSddcCollectionOutput) ToGetSddcsSddcCollectionOutput() GetSddcsSddcCollectionOutput {
	return o
}

func (o GetSddcsSddcCollectionOutput) ToGetSddcsSddcCollectionOutputWithContext(ctx context.Context) GetSddcsSddcCollectionOutput {
	return o
}

// The number of actual ESXi hosts in the SDDC on the cloud. This attribute will be different when esxi Host is added to an existing SDDC.
func (o GetSddcsSddcCollectionOutput) ActualEsxiHostsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) int { return v.ActualEsxiHostsCount }).(pulumi.IntOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
func (o GetSddcsSddcCollectionOutput) CapacityReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.CapacityReservationId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetSddcsSddcCollectionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The name of the availability domain that the Compute instances are running in.  Example: `Uocm:PHX-AD-1`
func (o GetSddcsSddcCollectionOutput) ComputeAvailabilityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.ComputeAvailabilityDomain }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
func (o GetSddcsSddcCollectionOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// A filter to return only resources that match the given display name exactly.
func (o GetSddcsSddcCollectionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The number of ESXi hosts in the SDDC.
func (o GetSddcsSddcCollectionOutput) EsxiHostsCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) int { return v.EsxiHostsCount }).(pulumi.IntOutput)
}

// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
func (o GetSddcsSddcCollectionOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

func (o GetSddcsSddcCollectionOutput) HcxAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxAction }).(pulumi.StringOutput)
}

// The FQDN for HCX Manager.  Example: `hcx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
func (o GetSddcsSddcCollectionOutput) HcxFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxFqdn }).(pulumi.StringOutput)
}

// The SDDC includes an administrator username and initial password for HCX Manager. Make sure to change this initial HCX Manager password to a different value.
func (o GetSddcsSddcCollectionOutput) HcxInitialPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxInitialPassword }).(pulumi.StringOutput)
}

// The activation keys to use on the on-premises HCX Enterprise appliances you site pair with HCX Manager in your VMware Solution. The number of keys provided depends on the HCX license type. HCX Advanced provides 3 activation keys. HCX Enterprise provides 10 activation keys.
func (o GetSddcsSddcCollectionOutput) HcxOnPremKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxOnPremKey }).(pulumi.StringOutput)
}

// The activation licenses to use on the on-premises HCX Enterprise appliance you site pair with HCX Manager in your VMware Solution.
func (o GetSddcsSddcCollectionOutput) HcxOnPremLicenses() GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) []GetSddcsSddcCollectionHcxOnPremLicense { return v.HcxOnPremLicenses }).(GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for HCX Manager. For information about `PrivateIp` objects, see the Core Services API.
func (o GetSddcsSddcCollectionOutput) HcxPrivateIpId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxPrivateIpId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the HCX component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) HcxVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.HcxVlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the SDDC.
func (o GetSddcsSddcCollectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.Id }).(pulumi.StringOutput)
}

// The initial OCPU count of the SDDC's ESXi hosts.
func (o GetSddcsSddcCollectionOutput) InitialHostOcpuCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSddcsSddcCollection) float64 { return v.InitialHostOcpuCount }).(pulumi.Float64Output)
}

// The initial compute shape of the SDDC's ESXi hosts. [ListSupportedHostShapes](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedHostShapes/ListSupportedHostShapes).
func (o GetSddcsSddcCollectionOutput) InitialHostShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.InitialHostShapeName }).(pulumi.StringOutput)
}

// The billing option selected during SDDC creation. [ListSupportedSkus](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedSkuSummary/ListSupportedSkus).
func (o GetSddcsSddcCollectionOutput) InitialSku() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.InitialSku }).(pulumi.StringOutput)
}

// A prefix used in the name of each ESXi host and Compute instance in the SDDC. If this isn't set, the SDDC's `displayName` is used as the prefix.
func (o GetSddcsSddcCollectionOutput) InstanceDisplayNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.InstanceDisplayNamePrefix }).(pulumi.StringOutput)
}

// Indicates whether HCX is enabled for this SDDC.
func (o GetSddcsSddcCollectionOutput) IsHcxEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.IsHcxEnabled }).(pulumi.BoolOutput)
}

// Indicates whether HCX Enterprise is enabled for this SDDC.
func (o GetSddcsSddcCollectionOutput) IsHcxEnterpriseEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.IsHcxEnterpriseEnabled }).(pulumi.BoolOutput)
}

// Indicates whether SDDC is pending downgrade from HCX Enterprise to HCX Advanced.
func (o GetSddcsSddcCollectionOutput) IsHcxPendingDowngrade() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.IsHcxPendingDowngrade }).(pulumi.BoolOutput)
}

// Indicates whether shielded instance is enabled at the SDDC level.
func (o GetSddcsSddcCollectionOutput) IsShieldedInstanceEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.IsShieldedInstanceEnabled }).(pulumi.BoolOutput)
}

// Indicates whether this SDDC is designated for only single ESXi host.
func (o GetSddcsSddcCollectionOutput) IsSingleHostSddc() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.IsSingleHostSddc }).(pulumi.BoolOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 1 component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) NsxEdgeUplink1vlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxEdgeUplink1vlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge Uplink 2 component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) NsxEdgeUplink2vlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxEdgeUplink2vlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for the NSX Edge Uplink. Use this OCID as the route target for route table rules when setting up connectivity between the SDDC and other networks. For information about `PrivateIp` objects, see the Core Services API.
func (o GetSddcsSddcCollectionOutput) NsxEdgeUplinkIpId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxEdgeUplinkIpId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX Edge VTEP component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) NsxEdgeVtepVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxEdgeVtepVlanId }).(pulumi.StringOutput)
}

// The FQDN for NSX Manager.  Example: `nsx-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
func (o GetSddcsSddcCollectionOutput) NsxManagerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxManagerFqdn }).(pulumi.StringOutput)
}

// The SDDC includes an administrator username and initial password for NSX Manager. Make sure to change this initial NSX Manager password to a different value.
func (o GetSddcsSddcCollectionOutput) NsxManagerInitialPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxManagerInitialPassword }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for NSX Manager. For information about `PrivateIp` objects, see the Core Services API.
func (o GetSddcsSddcCollectionOutput) NsxManagerPrivateIpId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxManagerPrivateIpId }).(pulumi.StringOutput)
}

// The SDDC includes an administrator username and initial password for NSX Manager. You can change this initial username to a different value in NSX Manager.
func (o GetSddcsSddcCollectionOutput) NsxManagerUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxManagerUsername }).(pulumi.StringOutput)
}

// The VMware NSX overlay workload segment to host your application. Connect to workload portgroup in vCenter to access this overlay segment.
func (o GetSddcsSddcCollectionOutput) NsxOverlaySegmentName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxOverlaySegmentName }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the NSX VTEP component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) NsxVtepVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.NsxVtepVlanId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management subnet used to provision the SDDC.
func (o GetSddcsSddcCollectionOutput) ProvisioningSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.ProvisioningSubnetId }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the Provisioning component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) ProvisioningVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.ProvisioningVlanId }).(pulumi.StringOutput)
}

func (o GetSddcsSddcCollectionOutput) RefreshHcxLicenseStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) bool { return v.RefreshHcxLicenseStatus }).(pulumi.BoolOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere Replication component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) ReplicationVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.ReplicationVlanId }).(pulumi.StringOutput)
}

func (o GetSddcsSddcCollectionOutput) ReservingHcxOnPremiseLicenseKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) []string { return v.ReservingHcxOnPremiseLicenseKeys }).(pulumi.StringArrayOutput)
}

// One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for the default user on each ESXi host. Use a newline character to separate multiple keys. The SSH keys must be in the format required for the `authorizedKeys` file.
func (o GetSddcsSddcCollectionOutput) SshAuthorizedKeys() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.SshAuthorizedKeys }).(pulumi.StringOutput)
}

// The lifecycle state of the resource.
func (o GetSddcsSddcCollectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.State }).(pulumi.StringOutput)
}

// The date and time the SDDC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o GetSddcsSddcCollectionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time current HCX Enterprise billing cycle ends, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o GetSddcsSddcCollectionOutput) TimeHcxBillingCycleEnd() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.TimeHcxBillingCycleEnd }).(pulumi.StringOutput)
}

// The date and time the SDDC's HCX on-premise license status was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
func (o GetSddcsSddcCollectionOutput) TimeHcxLicenseStatusUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.TimeHcxLicenseStatusUpdated }).(pulumi.StringOutput)
}

// The date and time the SDDC was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o GetSddcsSddcCollectionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The vSphere licenses to be used when upgrade SDDC.
func (o GetSddcsSddcCollectionOutput) UpgradeLicenses() GetSddcsSddcCollectionUpgradeLicenseArrayOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) []GetSddcsSddcCollectionUpgradeLicense { return v.UpgradeLicenses }).(GetSddcsSddcCollectionUpgradeLicenseArrayOutput)
}

// The FQDN for vCenter.  Example: `vcenter-my-sddc.sddc.us-phoenix-1.oraclecloud.com`
func (o GetSddcsSddcCollectionOutput) VcenterFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VcenterFqdn }).(pulumi.StringOutput)
}

// The SDDC includes an administrator username and initial password for vCenter. Make sure to change this initial vCenter password to a different value.
func (o GetSddcsSddcCollectionOutput) VcenterInitialPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VcenterInitialPassword }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the `PrivateIp` object that is the virtual IP (VIP) for vCenter. For information about `PrivateIp` objects, see the Core Services API.
func (o GetSddcsSddcCollectionOutput) VcenterPrivateIpId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VcenterPrivateIpId }).(pulumi.StringOutput)
}

// The SDDC includes an administrator username and initial password for vCenter. You can change this initial username to a different value in vCenter.
func (o GetSddcsSddcCollectionOutput) VcenterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VcenterUsername }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vMotion component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) VmotionVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VmotionVlanId }).(pulumi.StringOutput)
}

// In general, this is a specific version of bundled VMware software supported by Oracle Cloud VMware Solution (see [ListSupportedVmwareSoftwareVersions](https://docs.cloud.oracle.com/iaas/api/#/en/vmware/20200501/SupportedVmwareSoftwareVersionSummary/ListSupportedVmwareSoftwareVersions)).
func (o GetSddcsSddcCollectionOutput) VmwareSoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VmwareSoftwareVersion }).(pulumi.StringOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSAN component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) VsanVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VsanVlanId }).(pulumi.StringOutput)
}

// The link of guidance to upgrade vSphere.
func (o GetSddcsSddcCollectionOutput) VsphereUpgradeGuide() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VsphereUpgradeGuide }).(pulumi.StringOutput)
}

// The links of binary objects needed for upgrade vSphere.
func (o GetSddcsSddcCollectionOutput) VsphereUpgradeObjects() GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) []GetSddcsSddcCollectionVsphereUpgradeObject {
		return v.VsphereUpgradeObjects
	}).(GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput)
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC for the vSphere component of the VMware environment.
func (o GetSddcsSddcCollectionOutput) VsphereVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.VsphereVlanId }).(pulumi.StringOutput)
}

// The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application workloads.
func (o GetSddcsSddcCollectionOutput) WorkloadNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollection) string { return v.WorkloadNetworkCidr }).(pulumi.StringOutput)
}

type GetSddcsSddcCollectionArrayOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollection)(nil)).Elem()
}

func (o GetSddcsSddcCollectionArrayOutput) ToGetSddcsSddcCollectionArrayOutput() GetSddcsSddcCollectionArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionArrayOutput) ToGetSddcsSddcCollectionArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionArrayOutput) Index(i pulumi.IntInput) GetSddcsSddcCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcsSddcCollection {
		return vs[0].([]GetSddcsSddcCollection)[vs[1].(int)]
	}).(GetSddcsSddcCollectionOutput)
}

type GetSddcsSddcCollectionHcxOnPremLicense struct {
	// HCX on-premise license key value.
	ActivationKey string `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status string `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName string `pulumi:"systemName"`
}

// GetSddcsSddcCollectionHcxOnPremLicenseInput is an input type that accepts GetSddcsSddcCollectionHcxOnPremLicenseArgs and GetSddcsSddcCollectionHcxOnPremLicenseOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionHcxOnPremLicenseInput` via:
//
//	GetSddcsSddcCollectionHcxOnPremLicenseArgs{...}
type GetSddcsSddcCollectionHcxOnPremLicenseInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionHcxOnPremLicenseOutput() GetSddcsSddcCollectionHcxOnPremLicenseOutput
	ToGetSddcsSddcCollectionHcxOnPremLicenseOutputWithContext(context.Context) GetSddcsSddcCollectionHcxOnPremLicenseOutput
}

type GetSddcsSddcCollectionHcxOnPremLicenseArgs struct {
	// HCX on-premise license key value.
	ActivationKey pulumi.StringInput `pulumi:"activationKey"`
	// status of HCX on-premise license.
	Status pulumi.StringInput `pulumi:"status"`
	// Name of the system that consumed the HCX on-premise license
	SystemName pulumi.StringInput `pulumi:"systemName"`
}

func (GetSddcsSddcCollectionHcxOnPremLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionHcxOnPremLicense)(nil)).Elem()
}

func (i GetSddcsSddcCollectionHcxOnPremLicenseArgs) ToGetSddcsSddcCollectionHcxOnPremLicenseOutput() GetSddcsSddcCollectionHcxOnPremLicenseOutput {
	return i.ToGetSddcsSddcCollectionHcxOnPremLicenseOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionHcxOnPremLicenseArgs) ToGetSddcsSddcCollectionHcxOnPremLicenseOutputWithContext(ctx context.Context) GetSddcsSddcCollectionHcxOnPremLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionHcxOnPremLicenseOutput)
}

// GetSddcsSddcCollectionHcxOnPremLicenseArrayInput is an input type that accepts GetSddcsSddcCollectionHcxOnPremLicenseArray and GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionHcxOnPremLicenseArrayInput` via:
//
//	GetSddcsSddcCollectionHcxOnPremLicenseArray{ GetSddcsSddcCollectionHcxOnPremLicenseArgs{...} }
type GetSddcsSddcCollectionHcxOnPremLicenseArrayInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutput() GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput
	ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutputWithContext(context.Context) GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput
}

type GetSddcsSddcCollectionHcxOnPremLicenseArray []GetSddcsSddcCollectionHcxOnPremLicenseInput

func (GetSddcsSddcCollectionHcxOnPremLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionHcxOnPremLicense)(nil)).Elem()
}

func (i GetSddcsSddcCollectionHcxOnPremLicenseArray) ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutput() GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput {
	return i.ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionHcxOnPremLicenseArray) ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput)
}

type GetSddcsSddcCollectionHcxOnPremLicenseOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionHcxOnPremLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionHcxOnPremLicense)(nil)).Elem()
}

func (o GetSddcsSddcCollectionHcxOnPremLicenseOutput) ToGetSddcsSddcCollectionHcxOnPremLicenseOutput() GetSddcsSddcCollectionHcxOnPremLicenseOutput {
	return o
}

func (o GetSddcsSddcCollectionHcxOnPremLicenseOutput) ToGetSddcsSddcCollectionHcxOnPremLicenseOutputWithContext(ctx context.Context) GetSddcsSddcCollectionHcxOnPremLicenseOutput {
	return o
}

// HCX on-premise license key value.
func (o GetSddcsSddcCollectionHcxOnPremLicenseOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionHcxOnPremLicense) string { return v.ActivationKey }).(pulumi.StringOutput)
}

// status of HCX on-premise license.
func (o GetSddcsSddcCollectionHcxOnPremLicenseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionHcxOnPremLicense) string { return v.Status }).(pulumi.StringOutput)
}

// Name of the system that consumed the HCX on-premise license
func (o GetSddcsSddcCollectionHcxOnPremLicenseOutput) SystemName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionHcxOnPremLicense) string { return v.SystemName }).(pulumi.StringOutput)
}

type GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionHcxOnPremLicense)(nil)).Elem()
}

func (o GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput) ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutput() GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput) ToGetSddcsSddcCollectionHcxOnPremLicenseArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput) Index(i pulumi.IntInput) GetSddcsSddcCollectionHcxOnPremLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcsSddcCollectionHcxOnPremLicense {
		return vs[0].([]GetSddcsSddcCollectionHcxOnPremLicense)[vs[1].(int)]
	}).(GetSddcsSddcCollectionHcxOnPremLicenseOutput)
}

type GetSddcsSddcCollectionUpgradeLicense struct {
	// vSphere license key value.
	LicenseKey string `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType string `pulumi:"licenseType"`
}

// GetSddcsSddcCollectionUpgradeLicenseInput is an input type that accepts GetSddcsSddcCollectionUpgradeLicenseArgs and GetSddcsSddcCollectionUpgradeLicenseOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionUpgradeLicenseInput` via:
//
//	GetSddcsSddcCollectionUpgradeLicenseArgs{...}
type GetSddcsSddcCollectionUpgradeLicenseInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionUpgradeLicenseOutput() GetSddcsSddcCollectionUpgradeLicenseOutput
	ToGetSddcsSddcCollectionUpgradeLicenseOutputWithContext(context.Context) GetSddcsSddcCollectionUpgradeLicenseOutput
}

type GetSddcsSddcCollectionUpgradeLicenseArgs struct {
	// vSphere license key value.
	LicenseKey pulumi.StringInput `pulumi:"licenseKey"`
	// vSphere license type.
	LicenseType pulumi.StringInput `pulumi:"licenseType"`
}

func (GetSddcsSddcCollectionUpgradeLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionUpgradeLicense)(nil)).Elem()
}

func (i GetSddcsSddcCollectionUpgradeLicenseArgs) ToGetSddcsSddcCollectionUpgradeLicenseOutput() GetSddcsSddcCollectionUpgradeLicenseOutput {
	return i.ToGetSddcsSddcCollectionUpgradeLicenseOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionUpgradeLicenseArgs) ToGetSddcsSddcCollectionUpgradeLicenseOutputWithContext(ctx context.Context) GetSddcsSddcCollectionUpgradeLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionUpgradeLicenseOutput)
}

// GetSddcsSddcCollectionUpgradeLicenseArrayInput is an input type that accepts GetSddcsSddcCollectionUpgradeLicenseArray and GetSddcsSddcCollectionUpgradeLicenseArrayOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionUpgradeLicenseArrayInput` via:
//
//	GetSddcsSddcCollectionUpgradeLicenseArray{ GetSddcsSddcCollectionUpgradeLicenseArgs{...} }
type GetSddcsSddcCollectionUpgradeLicenseArrayInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionUpgradeLicenseArrayOutput() GetSddcsSddcCollectionUpgradeLicenseArrayOutput
	ToGetSddcsSddcCollectionUpgradeLicenseArrayOutputWithContext(context.Context) GetSddcsSddcCollectionUpgradeLicenseArrayOutput
}

type GetSddcsSddcCollectionUpgradeLicenseArray []GetSddcsSddcCollectionUpgradeLicenseInput

func (GetSddcsSddcCollectionUpgradeLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionUpgradeLicense)(nil)).Elem()
}

func (i GetSddcsSddcCollectionUpgradeLicenseArray) ToGetSddcsSddcCollectionUpgradeLicenseArrayOutput() GetSddcsSddcCollectionUpgradeLicenseArrayOutput {
	return i.ToGetSddcsSddcCollectionUpgradeLicenseArrayOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionUpgradeLicenseArray) ToGetSddcsSddcCollectionUpgradeLicenseArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionUpgradeLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionUpgradeLicenseArrayOutput)
}

type GetSddcsSddcCollectionUpgradeLicenseOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionUpgradeLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionUpgradeLicense)(nil)).Elem()
}

func (o GetSddcsSddcCollectionUpgradeLicenseOutput) ToGetSddcsSddcCollectionUpgradeLicenseOutput() GetSddcsSddcCollectionUpgradeLicenseOutput {
	return o
}

func (o GetSddcsSddcCollectionUpgradeLicenseOutput) ToGetSddcsSddcCollectionUpgradeLicenseOutputWithContext(ctx context.Context) GetSddcsSddcCollectionUpgradeLicenseOutput {
	return o
}

// vSphere license key value.
func (o GetSddcsSddcCollectionUpgradeLicenseOutput) LicenseKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionUpgradeLicense) string { return v.LicenseKey }).(pulumi.StringOutput)
}

// vSphere license type.
func (o GetSddcsSddcCollectionUpgradeLicenseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionUpgradeLicense) string { return v.LicenseType }).(pulumi.StringOutput)
}

type GetSddcsSddcCollectionUpgradeLicenseArrayOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionUpgradeLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionUpgradeLicense)(nil)).Elem()
}

func (o GetSddcsSddcCollectionUpgradeLicenseArrayOutput) ToGetSddcsSddcCollectionUpgradeLicenseArrayOutput() GetSddcsSddcCollectionUpgradeLicenseArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionUpgradeLicenseArrayOutput) ToGetSddcsSddcCollectionUpgradeLicenseArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionUpgradeLicenseArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionUpgradeLicenseArrayOutput) Index(i pulumi.IntInput) GetSddcsSddcCollectionUpgradeLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcsSddcCollectionUpgradeLicense {
		return vs[0].([]GetSddcsSddcCollectionUpgradeLicense)[vs[1].(int)]
	}).(GetSddcsSddcCollectionUpgradeLicenseOutput)
}

type GetSddcsSddcCollectionVsphereUpgradeObject struct {
	// Binary object download link.
	DownloadLink string `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription string `pulumi:"linkDescription"`
}

// GetSddcsSddcCollectionVsphereUpgradeObjectInput is an input type that accepts GetSddcsSddcCollectionVsphereUpgradeObjectArgs and GetSddcsSddcCollectionVsphereUpgradeObjectOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionVsphereUpgradeObjectInput` via:
//
//	GetSddcsSddcCollectionVsphereUpgradeObjectArgs{...}
type GetSddcsSddcCollectionVsphereUpgradeObjectInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionVsphereUpgradeObjectOutput() GetSddcsSddcCollectionVsphereUpgradeObjectOutput
	ToGetSddcsSddcCollectionVsphereUpgradeObjectOutputWithContext(context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectOutput
}

type GetSddcsSddcCollectionVsphereUpgradeObjectArgs struct {
	// Binary object download link.
	DownloadLink pulumi.StringInput `pulumi:"downloadLink"`
	// Binary object description.
	LinkDescription pulumi.StringInput `pulumi:"linkDescription"`
}

func (GetSddcsSddcCollectionVsphereUpgradeObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionVsphereUpgradeObject)(nil)).Elem()
}

func (i GetSddcsSddcCollectionVsphereUpgradeObjectArgs) ToGetSddcsSddcCollectionVsphereUpgradeObjectOutput() GetSddcsSddcCollectionVsphereUpgradeObjectOutput {
	return i.ToGetSddcsSddcCollectionVsphereUpgradeObjectOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionVsphereUpgradeObjectArgs) ToGetSddcsSddcCollectionVsphereUpgradeObjectOutputWithContext(ctx context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionVsphereUpgradeObjectOutput)
}

// GetSddcsSddcCollectionVsphereUpgradeObjectArrayInput is an input type that accepts GetSddcsSddcCollectionVsphereUpgradeObjectArray and GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput values.
// You can construct a concrete instance of `GetSddcsSddcCollectionVsphereUpgradeObjectArrayInput` via:
//
//	GetSddcsSddcCollectionVsphereUpgradeObjectArray{ GetSddcsSddcCollectionVsphereUpgradeObjectArgs{...} }
type GetSddcsSddcCollectionVsphereUpgradeObjectArrayInput interface {
	pulumi.Input

	ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput() GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput
	ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutputWithContext(context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput
}

type GetSddcsSddcCollectionVsphereUpgradeObjectArray []GetSddcsSddcCollectionVsphereUpgradeObjectInput

func (GetSddcsSddcCollectionVsphereUpgradeObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionVsphereUpgradeObject)(nil)).Elem()
}

func (i GetSddcsSddcCollectionVsphereUpgradeObjectArray) ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput() GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput {
	return i.ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutputWithContext(context.Background())
}

func (i GetSddcsSddcCollectionVsphereUpgradeObjectArray) ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput)
}

type GetSddcsSddcCollectionVsphereUpgradeObjectOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionVsphereUpgradeObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSddcsSddcCollectionVsphereUpgradeObject)(nil)).Elem()
}

func (o GetSddcsSddcCollectionVsphereUpgradeObjectOutput) ToGetSddcsSddcCollectionVsphereUpgradeObjectOutput() GetSddcsSddcCollectionVsphereUpgradeObjectOutput {
	return o
}

func (o GetSddcsSddcCollectionVsphereUpgradeObjectOutput) ToGetSddcsSddcCollectionVsphereUpgradeObjectOutputWithContext(ctx context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectOutput {
	return o
}

// Binary object download link.
func (o GetSddcsSddcCollectionVsphereUpgradeObjectOutput) DownloadLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionVsphereUpgradeObject) string { return v.DownloadLink }).(pulumi.StringOutput)
}

// Binary object description.
func (o GetSddcsSddcCollectionVsphereUpgradeObjectOutput) LinkDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetSddcsSddcCollectionVsphereUpgradeObject) string { return v.LinkDescription }).(pulumi.StringOutput)
}

type GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput struct{ *pulumi.OutputState }

func (GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSddcsSddcCollectionVsphereUpgradeObject)(nil)).Elem()
}

func (o GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput) ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput() GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput) ToGetSddcsSddcCollectionVsphereUpgradeObjectArrayOutputWithContext(ctx context.Context) GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput {
	return o
}

func (o GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput) Index(i pulumi.IntInput) GetSddcsSddcCollectionVsphereUpgradeObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSddcsSddcCollectionVsphereUpgradeObject {
		return vs[0].([]GetSddcsSddcCollectionVsphereUpgradeObject)[vs[1].(int)]
	}).(GetSddcsSddcCollectionVsphereUpgradeObjectOutput)
}

type GetSupportedHostShapesFilter struct {
	// A filter to return only resources that match the given name exactly.
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSupportedHostShapesFilterInput is an input type that accepts GetSupportedHostShapesFilterArgs and GetSupportedHostShapesFilterOutput values.
// You can construct a concrete instance of `GetSupportedHostShapesFilterInput` via:
//
//	GetSupportedHostShapesFilterArgs{...}
type GetSupportedHostShapesFilterInput interface {
	pulumi.Input

	ToGetSupportedHostShapesFilterOutput() GetSupportedHostShapesFilterOutput
	ToGetSupportedHostShapesFilterOutputWithContext(context.Context) GetSupportedHostShapesFilterOutput
}

type GetSupportedHostShapesFilterArgs struct {
	// A filter to return only resources that match the given name exactly.
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSupportedHostShapesFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedHostShapesFilter)(nil)).Elem()
}

func (i GetSupportedHostShapesFilterArgs) ToGetSupportedHostShapesFilterOutput() GetSupportedHostShapesFilterOutput {
	return i.ToGetSupportedHostShapesFilterOutputWithContext(context.Background())
}

func (i GetSupportedHostShapesFilterArgs) ToGetSupportedHostShapesFilterOutputWithContext(ctx context.Context) GetSupportedHostShapesFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedHostShapesFilterOutput)
}

// GetSupportedHostShapesFilterArrayInput is an input type that accepts GetSupportedHostShapesFilterArray and GetSupportedHostShapesFilterArrayOutput values.
// You can construct a concrete instance of `GetSupportedHostShapesFilterArrayInput` via:
//
//	GetSupportedHostShapesFilterArray{ GetSupportedHostShapesFilterArgs{...} }
type GetSupportedHostShapesFilterArrayInput interface {
	pulumi.Input

	ToGetSupportedHostShapesFilterArrayOutput() GetSupportedHostShapesFilterArrayOutput
	ToGetSupportedHostShapesFilterArrayOutputWithContext(context.Context) GetSupportedHostShapesFilterArrayOutput
}

type GetSupportedHostShapesFilterArray []GetSupportedHostShapesFilterInput

func (GetSupportedHostShapesFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedHostShapesFilter)(nil)).Elem()
}

func (i GetSupportedHostShapesFilterArray) ToGetSupportedHostShapesFilterArrayOutput() GetSupportedHostShapesFilterArrayOutput {
	return i.ToGetSupportedHostShapesFilterArrayOutputWithContext(context.Background())
}

func (i GetSupportedHostShapesFilterArray) ToGetSupportedHostShapesFilterArrayOutputWithContext(ctx context.Context) GetSupportedHostShapesFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedHostShapesFilterArrayOutput)
}

type GetSupportedHostShapesFilterOutput struct{ *pulumi.OutputState }

func (GetSupportedHostShapesFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedHostShapesFilter)(nil)).Elem()
}

func (o GetSupportedHostShapesFilterOutput) ToGetSupportedHostShapesFilterOutput() GetSupportedHostShapesFilterOutput {
	return o
}

func (o GetSupportedHostShapesFilterOutput) ToGetSupportedHostShapesFilterOutputWithContext(ctx context.Context) GetSupportedHostShapesFilterOutput {
	return o
}

// A filter to return only resources that match the given name exactly.
func (o GetSupportedHostShapesFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedHostShapesFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSupportedHostShapesFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSupportedHostShapesFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSupportedHostShapesFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedHostShapesFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSupportedHostShapesFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedHostShapesFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedHostShapesFilter)(nil)).Elem()
}

func (o GetSupportedHostShapesFilterArrayOutput) ToGetSupportedHostShapesFilterArrayOutput() GetSupportedHostShapesFilterArrayOutput {
	return o
}

func (o GetSupportedHostShapesFilterArrayOutput) ToGetSupportedHostShapesFilterArrayOutputWithContext(ctx context.Context) GetSupportedHostShapesFilterArrayOutput {
	return o
}

func (o GetSupportedHostShapesFilterArrayOutput) Index(i pulumi.IntInput) GetSupportedHostShapesFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedHostShapesFilter {
		return vs[0].([]GetSupportedHostShapesFilter)[vs[1].(int)]
	}).(GetSupportedHostShapesFilterOutput)
}

type GetSupportedHostShapesItem struct {
	// The default OCPU count of the shape.
	DefaultOcpuCount float64 `pulumi:"defaultOcpuCount"`
	// Description of the shape.
	Description string `pulumi:"description"`
	// Indicates whether the shape supports shielded instances.
	IsSupportShieldedInstances bool `pulumi:"isSupportShieldedInstances"`
	// A filter to return only resources that match the given name exactly.
	Name string `pulumi:"name"`
	// The family of the shape. ESXi hosts of one SDDC must have the same shape family.
	ShapeFamily string `pulumi:"shapeFamily"`
	// Support OCPU count of the shape.
	SupportedOcpuCounts []float64 `pulumi:"supportedOcpuCounts"`
	// The operations where you can use the shape. The operations can be CREATE_SDDC or CREATE_ESXI_HOST.
	SupportedOperations []string `pulumi:"supportedOperations"`
	// The supported SDDC types for the shape.
	SupportedSddcTypes []string `pulumi:"supportedSddcTypes"`
	// The VMware software versions supported by the shape.
	SupportedVmwareSoftwareVersions []string `pulumi:"supportedVmwareSoftwareVersions"`
}

// GetSupportedHostShapesItemInput is an input type that accepts GetSupportedHostShapesItemArgs and GetSupportedHostShapesItemOutput values.
// You can construct a concrete instance of `GetSupportedHostShapesItemInput` via:
//
//	GetSupportedHostShapesItemArgs{...}
type GetSupportedHostShapesItemInput interface {
	pulumi.Input

	ToGetSupportedHostShapesItemOutput() GetSupportedHostShapesItemOutput
	ToGetSupportedHostShapesItemOutputWithContext(context.Context) GetSupportedHostShapesItemOutput
}

type GetSupportedHostShapesItemArgs struct {
	// The default OCPU count of the shape.
	DefaultOcpuCount pulumi.Float64Input `pulumi:"defaultOcpuCount"`
	// Description of the shape.
	Description pulumi.StringInput `pulumi:"description"`
	// Indicates whether the shape supports shielded instances.
	IsSupportShieldedInstances pulumi.BoolInput `pulumi:"isSupportShieldedInstances"`
	// A filter to return only resources that match the given name exactly.
	Name pulumi.StringInput `pulumi:"name"`
	// The family of the shape. ESXi hosts of one SDDC must have the same shape family.
	ShapeFamily pulumi.StringInput `pulumi:"shapeFamily"`
	// Support OCPU count of the shape.
	SupportedOcpuCounts pulumi.Float64ArrayInput `pulumi:"supportedOcpuCounts"`
	// The operations where you can use the shape. The operations can be CREATE_SDDC or CREATE_ESXI_HOST.
	SupportedOperations pulumi.StringArrayInput `pulumi:"supportedOperations"`
	// The supported SDDC types for the shape.
	SupportedSddcTypes pulumi.StringArrayInput `pulumi:"supportedSddcTypes"`
	// The VMware software versions supported by the shape.
	SupportedVmwareSoftwareVersions pulumi.StringArrayInput `pulumi:"supportedVmwareSoftwareVersions"`
}

func (GetSupportedHostShapesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedHostShapesItem)(nil)).Elem()
}

func (i GetSupportedHostShapesItemArgs) ToGetSupportedHostShapesItemOutput() GetSupportedHostShapesItemOutput {
	return i.ToGetSupportedHostShapesItemOutputWithContext(context.Background())
}

func (i GetSupportedHostShapesItemArgs) ToGetSupportedHostShapesItemOutputWithContext(ctx context.Context) GetSupportedHostShapesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedHostShapesItemOutput)
}

// GetSupportedHostShapesItemArrayInput is an input type that accepts GetSupportedHostShapesItemArray and GetSupportedHostShapesItemArrayOutput values.
// You can construct a concrete instance of `GetSupportedHostShapesItemArrayInput` via:
//
//	GetSupportedHostShapesItemArray{ GetSupportedHostShapesItemArgs{...} }
type GetSupportedHostShapesItemArrayInput interface {
	pulumi.Input

	ToGetSupportedHostShapesItemArrayOutput() GetSupportedHostShapesItemArrayOutput
	ToGetSupportedHostShapesItemArrayOutputWithContext(context.Context) GetSupportedHostShapesItemArrayOutput
}

type GetSupportedHostShapesItemArray []GetSupportedHostShapesItemInput

func (GetSupportedHostShapesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedHostShapesItem)(nil)).Elem()
}

func (i GetSupportedHostShapesItemArray) ToGetSupportedHostShapesItemArrayOutput() GetSupportedHostShapesItemArrayOutput {
	return i.ToGetSupportedHostShapesItemArrayOutputWithContext(context.Background())
}

func (i GetSupportedHostShapesItemArray) ToGetSupportedHostShapesItemArrayOutputWithContext(ctx context.Context) GetSupportedHostShapesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedHostShapesItemArrayOutput)
}

type GetSupportedHostShapesItemOutput struct{ *pulumi.OutputState }

func (GetSupportedHostShapesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedHostShapesItem)(nil)).Elem()
}

func (o GetSupportedHostShapesItemOutput) ToGetSupportedHostShapesItemOutput() GetSupportedHostShapesItemOutput {
	return o
}

func (o GetSupportedHostShapesItemOutput) ToGetSupportedHostShapesItemOutputWithContext(ctx context.Context) GetSupportedHostShapesItemOutput {
	return o
}

// The default OCPU count of the shape.
func (o GetSupportedHostShapesItemOutput) DefaultOcpuCount() pulumi.Float64Output {
	return o.ApplyT(func(v GetSupportedHostShapesItem) float64 { return v.DefaultOcpuCount }).(pulumi.Float64Output)
}

// Description of the shape.
func (o GetSupportedHostShapesItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates whether the shape supports shielded instances.
func (o GetSupportedHostShapesItemOutput) IsSupportShieldedInstances() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) bool { return v.IsSupportShieldedInstances }).(pulumi.BoolOutput)
}

// A filter to return only resources that match the given name exactly.
func (o GetSupportedHostShapesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) string { return v.Name }).(pulumi.StringOutput)
}

// The family of the shape. ESXi hosts of one SDDC must have the same shape family.
func (o GetSupportedHostShapesItemOutput) ShapeFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) string { return v.ShapeFamily }).(pulumi.StringOutput)
}

// Support OCPU count of the shape.
func (o GetSupportedHostShapesItemOutput) SupportedOcpuCounts() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) []float64 { return v.SupportedOcpuCounts }).(pulumi.Float64ArrayOutput)
}

// The operations where you can use the shape. The operations can be CREATE_SDDC or CREATE_ESXI_HOST.
func (o GetSupportedHostShapesItemOutput) SupportedOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) []string { return v.SupportedOperations }).(pulumi.StringArrayOutput)
}

// The supported SDDC types for the shape.
func (o GetSupportedHostShapesItemOutput) SupportedSddcTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) []string { return v.SupportedSddcTypes }).(pulumi.StringArrayOutput)
}

// The VMware software versions supported by the shape.
func (o GetSupportedHostShapesItemOutput) SupportedVmwareSoftwareVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedHostShapesItem) []string { return v.SupportedVmwareSoftwareVersions }).(pulumi.StringArrayOutput)
}

type GetSupportedHostShapesItemArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedHostShapesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedHostShapesItem)(nil)).Elem()
}

func (o GetSupportedHostShapesItemArrayOutput) ToGetSupportedHostShapesItemArrayOutput() GetSupportedHostShapesItemArrayOutput {
	return o
}

func (o GetSupportedHostShapesItemArrayOutput) ToGetSupportedHostShapesItemArrayOutputWithContext(ctx context.Context) GetSupportedHostShapesItemArrayOutput {
	return o
}

func (o GetSupportedHostShapesItemArrayOutput) Index(i pulumi.IntInput) GetSupportedHostShapesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedHostShapesItem {
		return vs[0].([]GetSupportedHostShapesItem)[vs[1].(int)]
	}).(GetSupportedHostShapesItemOutput)
}

type GetSupportedSkusFilter struct {
	// name of SKU
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSupportedSkusFilterInput is an input type that accepts GetSupportedSkusFilterArgs and GetSupportedSkusFilterOutput values.
// You can construct a concrete instance of `GetSupportedSkusFilterInput` via:
//
//	GetSupportedSkusFilterArgs{...}
type GetSupportedSkusFilterInput interface {
	pulumi.Input

	ToGetSupportedSkusFilterOutput() GetSupportedSkusFilterOutput
	ToGetSupportedSkusFilterOutputWithContext(context.Context) GetSupportedSkusFilterOutput
}

type GetSupportedSkusFilterArgs struct {
	// name of SKU
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSupportedSkusFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedSkusFilter)(nil)).Elem()
}

func (i GetSupportedSkusFilterArgs) ToGetSupportedSkusFilterOutput() GetSupportedSkusFilterOutput {
	return i.ToGetSupportedSkusFilterOutputWithContext(context.Background())
}

func (i GetSupportedSkusFilterArgs) ToGetSupportedSkusFilterOutputWithContext(ctx context.Context) GetSupportedSkusFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedSkusFilterOutput)
}

// GetSupportedSkusFilterArrayInput is an input type that accepts GetSupportedSkusFilterArray and GetSupportedSkusFilterArrayOutput values.
// You can construct a concrete instance of `GetSupportedSkusFilterArrayInput` via:
//
//	GetSupportedSkusFilterArray{ GetSupportedSkusFilterArgs{...} }
type GetSupportedSkusFilterArrayInput interface {
	pulumi.Input

	ToGetSupportedSkusFilterArrayOutput() GetSupportedSkusFilterArrayOutput
	ToGetSupportedSkusFilterArrayOutputWithContext(context.Context) GetSupportedSkusFilterArrayOutput
}

type GetSupportedSkusFilterArray []GetSupportedSkusFilterInput

func (GetSupportedSkusFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedSkusFilter)(nil)).Elem()
}

func (i GetSupportedSkusFilterArray) ToGetSupportedSkusFilterArrayOutput() GetSupportedSkusFilterArrayOutput {
	return i.ToGetSupportedSkusFilterArrayOutputWithContext(context.Background())
}

func (i GetSupportedSkusFilterArray) ToGetSupportedSkusFilterArrayOutputWithContext(ctx context.Context) GetSupportedSkusFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedSkusFilterArrayOutput)
}

type GetSupportedSkusFilterOutput struct{ *pulumi.OutputState }

func (GetSupportedSkusFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedSkusFilter)(nil)).Elem()
}

func (o GetSupportedSkusFilterOutput) ToGetSupportedSkusFilterOutput() GetSupportedSkusFilterOutput {
	return o
}

func (o GetSupportedSkusFilterOutput) ToGetSupportedSkusFilterOutputWithContext(ctx context.Context) GetSupportedSkusFilterOutput {
	return o
}

// name of SKU
func (o GetSupportedSkusFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedSkusFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSupportedSkusFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSupportedSkusFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSupportedSkusFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedSkusFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSupportedSkusFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedSkusFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedSkusFilter)(nil)).Elem()
}

func (o GetSupportedSkusFilterArrayOutput) ToGetSupportedSkusFilterArrayOutput() GetSupportedSkusFilterArrayOutput {
	return o
}

func (o GetSupportedSkusFilterArrayOutput) ToGetSupportedSkusFilterArrayOutputWithContext(ctx context.Context) GetSupportedSkusFilterArrayOutput {
	return o
}

func (o GetSupportedSkusFilterArrayOutput) Index(i pulumi.IntInput) GetSupportedSkusFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedSkusFilter {
		return vs[0].([]GetSupportedSkusFilter)[vs[1].(int)]
	}).(GetSupportedSkusFilterOutput)
}

type GetSupportedSkusItem struct {
	// name of SKU
	Name string `pulumi:"name"`
}

// GetSupportedSkusItemInput is an input type that accepts GetSupportedSkusItemArgs and GetSupportedSkusItemOutput values.
// You can construct a concrete instance of `GetSupportedSkusItemInput` via:
//
//	GetSupportedSkusItemArgs{...}
type GetSupportedSkusItemInput interface {
	pulumi.Input

	ToGetSupportedSkusItemOutput() GetSupportedSkusItemOutput
	ToGetSupportedSkusItemOutputWithContext(context.Context) GetSupportedSkusItemOutput
}

type GetSupportedSkusItemArgs struct {
	// name of SKU
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSupportedSkusItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedSkusItem)(nil)).Elem()
}

func (i GetSupportedSkusItemArgs) ToGetSupportedSkusItemOutput() GetSupportedSkusItemOutput {
	return i.ToGetSupportedSkusItemOutputWithContext(context.Background())
}

func (i GetSupportedSkusItemArgs) ToGetSupportedSkusItemOutputWithContext(ctx context.Context) GetSupportedSkusItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedSkusItemOutput)
}

// GetSupportedSkusItemArrayInput is an input type that accepts GetSupportedSkusItemArray and GetSupportedSkusItemArrayOutput values.
// You can construct a concrete instance of `GetSupportedSkusItemArrayInput` via:
//
//	GetSupportedSkusItemArray{ GetSupportedSkusItemArgs{...} }
type GetSupportedSkusItemArrayInput interface {
	pulumi.Input

	ToGetSupportedSkusItemArrayOutput() GetSupportedSkusItemArrayOutput
	ToGetSupportedSkusItemArrayOutputWithContext(context.Context) GetSupportedSkusItemArrayOutput
}

type GetSupportedSkusItemArray []GetSupportedSkusItemInput

func (GetSupportedSkusItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedSkusItem)(nil)).Elem()
}

func (i GetSupportedSkusItemArray) ToGetSupportedSkusItemArrayOutput() GetSupportedSkusItemArrayOutput {
	return i.ToGetSupportedSkusItemArrayOutputWithContext(context.Background())
}

func (i GetSupportedSkusItemArray) ToGetSupportedSkusItemArrayOutputWithContext(ctx context.Context) GetSupportedSkusItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedSkusItemArrayOutput)
}

type GetSupportedSkusItemOutput struct{ *pulumi.OutputState }

func (GetSupportedSkusItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedSkusItem)(nil)).Elem()
}

func (o GetSupportedSkusItemOutput) ToGetSupportedSkusItemOutput() GetSupportedSkusItemOutput {
	return o
}

func (o GetSupportedSkusItemOutput) ToGetSupportedSkusItemOutputWithContext(ctx context.Context) GetSupportedSkusItemOutput {
	return o
}

// name of SKU
func (o GetSupportedSkusItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedSkusItem) string { return v.Name }).(pulumi.StringOutput)
}

type GetSupportedSkusItemArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedSkusItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedSkusItem)(nil)).Elem()
}

func (o GetSupportedSkusItemArrayOutput) ToGetSupportedSkusItemArrayOutput() GetSupportedSkusItemArrayOutput {
	return o
}

func (o GetSupportedSkusItemArrayOutput) ToGetSupportedSkusItemArrayOutputWithContext(ctx context.Context) GetSupportedSkusItemArrayOutput {
	return o
}

func (o GetSupportedSkusItemArrayOutput) Index(i pulumi.IntInput) GetSupportedSkusItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedSkusItem {
		return vs[0].([]GetSupportedSkusItem)[vs[1].(int)]
	}).(GetSupportedSkusItemOutput)
}

type GetSupportedVmwareSoftwareVersionsFilter struct {
	Name   string   `pulumi:"name"`
	Regex  *bool    `pulumi:"regex"`
	Values []string `pulumi:"values"`
}

// GetSupportedVmwareSoftwareVersionsFilterInput is an input type that accepts GetSupportedVmwareSoftwareVersionsFilterArgs and GetSupportedVmwareSoftwareVersionsFilterOutput values.
// You can construct a concrete instance of `GetSupportedVmwareSoftwareVersionsFilterInput` via:
//
//	GetSupportedVmwareSoftwareVersionsFilterArgs{...}
type GetSupportedVmwareSoftwareVersionsFilterInput interface {
	pulumi.Input

	ToGetSupportedVmwareSoftwareVersionsFilterOutput() GetSupportedVmwareSoftwareVersionsFilterOutput
	ToGetSupportedVmwareSoftwareVersionsFilterOutputWithContext(context.Context) GetSupportedVmwareSoftwareVersionsFilterOutput
}

type GetSupportedVmwareSoftwareVersionsFilterArgs struct {
	Name   pulumi.StringInput      `pulumi:"name"`
	Regex  pulumi.BoolPtrInput     `pulumi:"regex"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSupportedVmwareSoftwareVersionsFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsFilter)(nil)).Elem()
}

func (i GetSupportedVmwareSoftwareVersionsFilterArgs) ToGetSupportedVmwareSoftwareVersionsFilterOutput() GetSupportedVmwareSoftwareVersionsFilterOutput {
	return i.ToGetSupportedVmwareSoftwareVersionsFilterOutputWithContext(context.Background())
}

func (i GetSupportedVmwareSoftwareVersionsFilterArgs) ToGetSupportedVmwareSoftwareVersionsFilterOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedVmwareSoftwareVersionsFilterOutput)
}

// GetSupportedVmwareSoftwareVersionsFilterArrayInput is an input type that accepts GetSupportedVmwareSoftwareVersionsFilterArray and GetSupportedVmwareSoftwareVersionsFilterArrayOutput values.
// You can construct a concrete instance of `GetSupportedVmwareSoftwareVersionsFilterArrayInput` via:
//
//	GetSupportedVmwareSoftwareVersionsFilterArray{ GetSupportedVmwareSoftwareVersionsFilterArgs{...} }
type GetSupportedVmwareSoftwareVersionsFilterArrayInput interface {
	pulumi.Input

	ToGetSupportedVmwareSoftwareVersionsFilterArrayOutput() GetSupportedVmwareSoftwareVersionsFilterArrayOutput
	ToGetSupportedVmwareSoftwareVersionsFilterArrayOutputWithContext(context.Context) GetSupportedVmwareSoftwareVersionsFilterArrayOutput
}

type GetSupportedVmwareSoftwareVersionsFilterArray []GetSupportedVmwareSoftwareVersionsFilterInput

func (GetSupportedVmwareSoftwareVersionsFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedVmwareSoftwareVersionsFilter)(nil)).Elem()
}

func (i GetSupportedVmwareSoftwareVersionsFilterArray) ToGetSupportedVmwareSoftwareVersionsFilterArrayOutput() GetSupportedVmwareSoftwareVersionsFilterArrayOutput {
	return i.ToGetSupportedVmwareSoftwareVersionsFilterArrayOutputWithContext(context.Background())
}

func (i GetSupportedVmwareSoftwareVersionsFilterArray) ToGetSupportedVmwareSoftwareVersionsFilterArrayOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedVmwareSoftwareVersionsFilterArrayOutput)
}

type GetSupportedVmwareSoftwareVersionsFilterOutput struct{ *pulumi.OutputState }

func (GetSupportedVmwareSoftwareVersionsFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsFilter)(nil)).Elem()
}

func (o GetSupportedVmwareSoftwareVersionsFilterOutput) ToGetSupportedVmwareSoftwareVersionsFilterOutput() GetSupportedVmwareSoftwareVersionsFilterOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsFilterOutput) ToGetSupportedVmwareSoftwareVersionsFilterOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsFilterOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSupportedVmwareSoftwareVersionsFilterOutput) Regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsFilter) *bool { return v.Regex }).(pulumi.BoolPtrOutput)
}

func (o GetSupportedVmwareSoftwareVersionsFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSupportedVmwareSoftwareVersionsFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedVmwareSoftwareVersionsFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedVmwareSoftwareVersionsFilter)(nil)).Elem()
}

func (o GetSupportedVmwareSoftwareVersionsFilterArrayOutput) ToGetSupportedVmwareSoftwareVersionsFilterArrayOutput() GetSupportedVmwareSoftwareVersionsFilterArrayOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsFilterArrayOutput) ToGetSupportedVmwareSoftwareVersionsFilterArrayOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsFilterArrayOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsFilterArrayOutput) Index(i pulumi.IntInput) GetSupportedVmwareSoftwareVersionsFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedVmwareSoftwareVersionsFilter {
		return vs[0].([]GetSupportedVmwareSoftwareVersionsFilter)[vs[1].(int)]
	}).(GetSupportedVmwareSoftwareVersionsFilterOutput)
}

type GetSupportedVmwareSoftwareVersionsItem struct {
	// A description of the software in the bundle.
	Description string `pulumi:"description"`
	// A short, unique string that identifies the version of bundled software.
	Version string `pulumi:"version"`
}

// GetSupportedVmwareSoftwareVersionsItemInput is an input type that accepts GetSupportedVmwareSoftwareVersionsItemArgs and GetSupportedVmwareSoftwareVersionsItemOutput values.
// You can construct a concrete instance of `GetSupportedVmwareSoftwareVersionsItemInput` via:
//
//	GetSupportedVmwareSoftwareVersionsItemArgs{...}
type GetSupportedVmwareSoftwareVersionsItemInput interface {
	pulumi.Input

	ToGetSupportedVmwareSoftwareVersionsItemOutput() GetSupportedVmwareSoftwareVersionsItemOutput
	ToGetSupportedVmwareSoftwareVersionsItemOutputWithContext(context.Context) GetSupportedVmwareSoftwareVersionsItemOutput
}

type GetSupportedVmwareSoftwareVersionsItemArgs struct {
	// A description of the software in the bundle.
	Description pulumi.StringInput `pulumi:"description"`
	// A short, unique string that identifies the version of bundled software.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetSupportedVmwareSoftwareVersionsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsItem)(nil)).Elem()
}

func (i GetSupportedVmwareSoftwareVersionsItemArgs) ToGetSupportedVmwareSoftwareVersionsItemOutput() GetSupportedVmwareSoftwareVersionsItemOutput {
	return i.ToGetSupportedVmwareSoftwareVersionsItemOutputWithContext(context.Background())
}

func (i GetSupportedVmwareSoftwareVersionsItemArgs) ToGetSupportedVmwareSoftwareVersionsItemOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedVmwareSoftwareVersionsItemOutput)
}

// GetSupportedVmwareSoftwareVersionsItemArrayInput is an input type that accepts GetSupportedVmwareSoftwareVersionsItemArray and GetSupportedVmwareSoftwareVersionsItemArrayOutput values.
// You can construct a concrete instance of `GetSupportedVmwareSoftwareVersionsItemArrayInput` via:
//
//	GetSupportedVmwareSoftwareVersionsItemArray{ GetSupportedVmwareSoftwareVersionsItemArgs{...} }
type GetSupportedVmwareSoftwareVersionsItemArrayInput interface {
	pulumi.Input

	ToGetSupportedVmwareSoftwareVersionsItemArrayOutput() GetSupportedVmwareSoftwareVersionsItemArrayOutput
	ToGetSupportedVmwareSoftwareVersionsItemArrayOutputWithContext(context.Context) GetSupportedVmwareSoftwareVersionsItemArrayOutput
}

type GetSupportedVmwareSoftwareVersionsItemArray []GetSupportedVmwareSoftwareVersionsItemInput

func (GetSupportedVmwareSoftwareVersionsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedVmwareSoftwareVersionsItem)(nil)).Elem()
}

func (i GetSupportedVmwareSoftwareVersionsItemArray) ToGetSupportedVmwareSoftwareVersionsItemArrayOutput() GetSupportedVmwareSoftwareVersionsItemArrayOutput {
	return i.ToGetSupportedVmwareSoftwareVersionsItemArrayOutputWithContext(context.Background())
}

func (i GetSupportedVmwareSoftwareVersionsItemArray) ToGetSupportedVmwareSoftwareVersionsItemArrayOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSupportedVmwareSoftwareVersionsItemArrayOutput)
}

type GetSupportedVmwareSoftwareVersionsItemOutput struct{ *pulumi.OutputState }

func (GetSupportedVmwareSoftwareVersionsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsItem)(nil)).Elem()
}

func (o GetSupportedVmwareSoftwareVersionsItemOutput) ToGetSupportedVmwareSoftwareVersionsItemOutput() GetSupportedVmwareSoftwareVersionsItemOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsItemOutput) ToGetSupportedVmwareSoftwareVersionsItemOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsItemOutput {
	return o
}

// A description of the software in the bundle.
func (o GetSupportedVmwareSoftwareVersionsItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsItem) string { return v.Description }).(pulumi.StringOutput)
}

// A short, unique string that identifies the version of bundled software.
func (o GetSupportedVmwareSoftwareVersionsItemOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSupportedVmwareSoftwareVersionsItem) string { return v.Version }).(pulumi.StringOutput)
}

type GetSupportedVmwareSoftwareVersionsItemArrayOutput struct{ *pulumi.OutputState }

func (GetSupportedVmwareSoftwareVersionsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSupportedVmwareSoftwareVersionsItem)(nil)).Elem()
}

func (o GetSupportedVmwareSoftwareVersionsItemArrayOutput) ToGetSupportedVmwareSoftwareVersionsItemArrayOutput() GetSupportedVmwareSoftwareVersionsItemArrayOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsItemArrayOutput) ToGetSupportedVmwareSoftwareVersionsItemArrayOutputWithContext(ctx context.Context) GetSupportedVmwareSoftwareVersionsItemArrayOutput {
	return o
}

func (o GetSupportedVmwareSoftwareVersionsItemArrayOutput) Index(i pulumi.IntInput) GetSupportedVmwareSoftwareVersionsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSupportedVmwareSoftwareVersionsItem {
		return vs[0].([]GetSupportedVmwareSoftwareVersionsItem)[vs[1].(int)]
	}).(GetSupportedVmwareSoftwareVersionsItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SddcHcxOnPremLicenseInput)(nil)).Elem(), SddcHcxOnPremLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SddcHcxOnPremLicenseArrayInput)(nil)).Elem(), SddcHcxOnPremLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SddcUpgradeLicenseInput)(nil)).Elem(), SddcUpgradeLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SddcUpgradeLicenseArrayInput)(nil)).Elem(), SddcUpgradeLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SddcVsphereUpgradeObjectInput)(nil)).Elem(), SddcVsphereUpgradeObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SddcVsphereUpgradeObjectArrayInput)(nil)).Elem(), SddcVsphereUpgradeObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExsiHostsEsxiHostCollectionInput)(nil)).Elem(), GetExsiHostsEsxiHostCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExsiHostsEsxiHostCollectionArrayInput)(nil)).Elem(), GetExsiHostsEsxiHostCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExsiHostsFilterInput)(nil)).Elem(), GetExsiHostsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExsiHostsFilterArrayInput)(nil)).Elem(), GetExsiHostsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcHcxOnPremLicenseInput)(nil)).Elem(), GetSddcHcxOnPremLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcHcxOnPremLicenseArrayInput)(nil)).Elem(), GetSddcHcxOnPremLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcUpgradeLicenseInput)(nil)).Elem(), GetSddcUpgradeLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcUpgradeLicenseArrayInput)(nil)).Elem(), GetSddcUpgradeLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcVsphereUpgradeObjectInput)(nil)).Elem(), GetSddcVsphereUpgradeObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcVsphereUpgradeObjectArrayInput)(nil)).Elem(), GetSddcVsphereUpgradeObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsFilterInput)(nil)).Elem(), GetSddcsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsFilterArrayInput)(nil)).Elem(), GetSddcsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionInput)(nil)).Elem(), GetSddcsSddcCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionArrayInput)(nil)).Elem(), GetSddcsSddcCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionHcxOnPremLicenseInput)(nil)).Elem(), GetSddcsSddcCollectionHcxOnPremLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionHcxOnPremLicenseArrayInput)(nil)).Elem(), GetSddcsSddcCollectionHcxOnPremLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionUpgradeLicenseInput)(nil)).Elem(), GetSddcsSddcCollectionUpgradeLicenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionUpgradeLicenseArrayInput)(nil)).Elem(), GetSddcsSddcCollectionUpgradeLicenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionVsphereUpgradeObjectInput)(nil)).Elem(), GetSddcsSddcCollectionVsphereUpgradeObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSddcsSddcCollectionVsphereUpgradeObjectArrayInput)(nil)).Elem(), GetSddcsSddcCollectionVsphereUpgradeObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedHostShapesFilterInput)(nil)).Elem(), GetSupportedHostShapesFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedHostShapesFilterArrayInput)(nil)).Elem(), GetSupportedHostShapesFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedHostShapesItemInput)(nil)).Elem(), GetSupportedHostShapesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedHostShapesItemArrayInput)(nil)).Elem(), GetSupportedHostShapesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedSkusFilterInput)(nil)).Elem(), GetSupportedSkusFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedSkusFilterArrayInput)(nil)).Elem(), GetSupportedSkusFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedSkusItemInput)(nil)).Elem(), GetSupportedSkusItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedSkusItemArrayInput)(nil)).Elem(), GetSupportedSkusItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsFilterInput)(nil)).Elem(), GetSupportedVmwareSoftwareVersionsFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsFilterArrayInput)(nil)).Elem(), GetSupportedVmwareSoftwareVersionsFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsItemInput)(nil)).Elem(), GetSupportedVmwareSoftwareVersionsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSupportedVmwareSoftwareVersionsItemArrayInput)(nil)).Elem(), GetSupportedVmwareSoftwareVersionsItemArray{})
	pulumi.RegisterOutputType(SddcHcxOnPremLicenseOutput{})
	pulumi.RegisterOutputType(SddcHcxOnPremLicenseArrayOutput{})
	pulumi.RegisterOutputType(SddcUpgradeLicenseOutput{})
	pulumi.RegisterOutputType(SddcUpgradeLicenseArrayOutput{})
	pulumi.RegisterOutputType(SddcVsphereUpgradeObjectOutput{})
	pulumi.RegisterOutputType(SddcVsphereUpgradeObjectArrayOutput{})
	pulumi.RegisterOutputType(GetExsiHostsEsxiHostCollectionOutput{})
	pulumi.RegisterOutputType(GetExsiHostsEsxiHostCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetExsiHostsFilterOutput{})
	pulumi.RegisterOutputType(GetExsiHostsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSddcHcxOnPremLicenseOutput{})
	pulumi.RegisterOutputType(GetSddcHcxOnPremLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetSddcUpgradeLicenseOutput{})
	pulumi.RegisterOutputType(GetSddcUpgradeLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetSddcVsphereUpgradeObjectOutput{})
	pulumi.RegisterOutputType(GetSddcVsphereUpgradeObjectArrayOutput{})
	pulumi.RegisterOutputType(GetSddcsFilterOutput{})
	pulumi.RegisterOutputType(GetSddcsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionArrayOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionHcxOnPremLicenseOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionHcxOnPremLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionUpgradeLicenseOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionUpgradeLicenseArrayOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionVsphereUpgradeObjectOutput{})
	pulumi.RegisterOutputType(GetSddcsSddcCollectionVsphereUpgradeObjectArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedHostShapesFilterOutput{})
	pulumi.RegisterOutputType(GetSupportedHostShapesFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedHostShapesItemOutput{})
	pulumi.RegisterOutputType(GetSupportedHostShapesItemArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedSkusFilterOutput{})
	pulumi.RegisterOutputType(GetSupportedSkusFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedSkusItemOutput{})
	pulumi.RegisterOutputType(GetSupportedSkusItemArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedVmwareSoftwareVersionsFilterOutput{})
	pulumi.RegisterOutputType(GetSupportedVmwareSoftwareVersionsFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSupportedVmwareSoftwareVersionsItemOutput{})
	pulumi.RegisterOutputType(GetSupportedVmwareSoftwareVersionsItemArrayOutput{})
}
