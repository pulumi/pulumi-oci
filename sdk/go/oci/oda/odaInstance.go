// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oda

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Oda Instance resource in Oracle Cloud Infrastructure Digital Assistant service.
//
// Starts an asynchronous job to create a Digital Assistant instance.
//
// To monitor the status of the job, take the `opc-work-request-id` response
// header value and use it to call `GET /workRequests/{workRequestId}`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Oda"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Oda.NewOdaInstance(ctx, "testOdaInstance", &Oda.OdaInstanceArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				ShapeName:     pulumi.String("DEVELOPMENT"),
//				DefinedTags: pulumi.AnyMap{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Oda_instance_description),
//				DisplayName: pulumi.Any(_var.Oda_instance_display_name),
//				FreeformTags: pulumi.AnyMap{
//					"bar-key": pulumi.Any("value"),
//				},
//				IdentityDomain:    pulumi.Any(_var.Oda_instance_identity_domain),
//				IsRoleBasedAccess: pulumi.Any(_var.Oda_instance_is_role_based_access),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OdaInstances can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Oda/odaInstance:OdaInstance test_oda_instance "id"
//
// ```
type OdaInstance struct {
	pulumi.CustomResourceState

	// A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	AttachmentIds pulumi.StringArrayOutput `pulumi:"attachmentIds"`
	// A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
	AttachmentTypes pulumi.StringArrayOutput `pulumi:"attachmentTypes"`
	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// URL for the connector's endpoint.
	ConnectorUrl pulumi.StringOutput `pulumi:"connectorUrl"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
	IdentityAppConsoleUrl pulumi.StringOutput `pulumi:"identityAppConsoleUrl"`
	// If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
	IdentityAppGuid pulumi.StringOutput `pulumi:"identityAppGuid"`
	// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
	IdentityDomain pulumi.StringOutput `pulumi:"identityDomain"`
	// A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
	ImportedPackageIds pulumi.StringArrayOutput `pulumi:"importedPackageIds"`
	// A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
	ImportedPackageNames pulumi.StringArrayOutput `pulumi:"importedPackageNames"`
	// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
	IsRoleBasedAccess pulumi.BoolOutput `pulumi:"isRoleBasedAccess"`
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState pulumi.StringOutput `pulumi:"lifecycleSubState"`
	// A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	RestrictedOperations OdaInstanceRestrictedOperationArrayOutput `pulumi:"restrictedOperations"`
	// Shape or size of the instance.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State pulumi.StringOutput `pulumi:"state"`
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl pulumi.StringOutput `pulumi:"webAppUrl"`
}

// NewOdaInstance registers a new resource with the given unique name, arguments, and options.
func NewOdaInstance(ctx *pulumi.Context,
	name string, args *OdaInstanceArgs, opts ...pulumi.ResourceOption) (*OdaInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	var resource OdaInstance
	err := ctx.RegisterResource("oci:Oda/odaInstance:OdaInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOdaInstance gets an existing OdaInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOdaInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OdaInstanceState, opts ...pulumi.ResourceOption) (*OdaInstance, error) {
	var resource OdaInstance
	err := ctx.ReadResource("oci:Oda/odaInstance:OdaInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OdaInstance resources.
type odaInstanceState struct {
	// A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	AttachmentIds []string `pulumi:"attachmentIds"`
	// A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
	AttachmentTypes []string `pulumi:"attachmentTypes"`
	// (Updatable) Identifier of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// URL for the connector's endpoint.
	ConnectorUrl *string `pulumi:"connectorUrl"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
	IdentityAppConsoleUrl *string `pulumi:"identityAppConsoleUrl"`
	// If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
	IdentityAppGuid *string `pulumi:"identityAppGuid"`
	// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
	IdentityDomain *string `pulumi:"identityDomain"`
	// A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
	ImportedPackageIds []string `pulumi:"importedPackageIds"`
	// A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
	ImportedPackageNames []string `pulumi:"importedPackageNames"`
	// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
	IsRoleBasedAccess *bool `pulumi:"isRoleBasedAccess"`
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState *string `pulumi:"lifecycleSubState"`
	// A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	RestrictedOperations []OdaInstanceRestrictedOperation `pulumi:"restrictedOperations"`
	// Shape or size of the instance.
	ShapeName *string `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State *string `pulumi:"state"`
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage *string `pulumi:"stateMessage"`
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated *string `pulumi:"timeCreated"`
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl *string `pulumi:"webAppUrl"`
}

type OdaInstanceState struct {
	// A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	AttachmentIds pulumi.StringArrayInput
	// A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
	AttachmentTypes pulumi.StringArrayInput
	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringPtrInput
	// URL for the connector's endpoint.
	ConnectorUrl pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
	IdentityAppConsoleUrl pulumi.StringPtrInput
	// If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
	IdentityAppGuid pulumi.StringPtrInput
	// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
	IdentityDomain pulumi.StringPtrInput
	// A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
	ImportedPackageIds pulumi.StringArrayInput
	// A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
	ImportedPackageNames pulumi.StringArrayInput
	// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
	IsRoleBasedAccess pulumi.BoolPtrInput
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState pulumi.StringPtrInput
	// A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
	RestrictedOperations OdaInstanceRestrictedOperationArrayInput
	// Shape or size of the instance.
	ShapeName pulumi.StringPtrInput
	// The current state of the Digital Assistant instance.
	State pulumi.StringPtrInput
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage pulumi.StringPtrInput
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringPtrInput
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringPtrInput
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl pulumi.StringPtrInput
}

func (OdaInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*odaInstanceState)(nil)).Elem()
}

type odaInstanceArgs struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
	IdentityDomain *string `pulumi:"identityDomain"`
	// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
	IsRoleBasedAccess *bool `pulumi:"isRoleBasedAccess"`
	// Shape or size of the instance.
	ShapeName string `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a OdaInstance resource.
type OdaInstanceArgs struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
	IdentityDomain pulumi.StringPtrInput
	// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
	IsRoleBasedAccess pulumi.BoolPtrInput
	// Shape or size of the instance.
	ShapeName pulumi.StringInput
	// The current state of the Digital Assistant instance.
	State pulumi.StringPtrInput
}

func (OdaInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*odaInstanceArgs)(nil)).Elem()
}

type OdaInstanceInput interface {
	pulumi.Input

	ToOdaInstanceOutput() OdaInstanceOutput
	ToOdaInstanceOutputWithContext(ctx context.Context) OdaInstanceOutput
}

func (*OdaInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**OdaInstance)(nil)).Elem()
}

func (i *OdaInstance) ToOdaInstanceOutput() OdaInstanceOutput {
	return i.ToOdaInstanceOutputWithContext(context.Background())
}

func (i *OdaInstance) ToOdaInstanceOutputWithContext(ctx context.Context) OdaInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaInstanceOutput)
}

// OdaInstanceArrayInput is an input type that accepts OdaInstanceArray and OdaInstanceArrayOutput values.
// You can construct a concrete instance of `OdaInstanceArrayInput` via:
//
//	OdaInstanceArray{ OdaInstanceArgs{...} }
type OdaInstanceArrayInput interface {
	pulumi.Input

	ToOdaInstanceArrayOutput() OdaInstanceArrayOutput
	ToOdaInstanceArrayOutputWithContext(context.Context) OdaInstanceArrayOutput
}

type OdaInstanceArray []OdaInstanceInput

func (OdaInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OdaInstance)(nil)).Elem()
}

func (i OdaInstanceArray) ToOdaInstanceArrayOutput() OdaInstanceArrayOutput {
	return i.ToOdaInstanceArrayOutputWithContext(context.Background())
}

func (i OdaInstanceArray) ToOdaInstanceArrayOutputWithContext(ctx context.Context) OdaInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaInstanceArrayOutput)
}

// OdaInstanceMapInput is an input type that accepts OdaInstanceMap and OdaInstanceMapOutput values.
// You can construct a concrete instance of `OdaInstanceMapInput` via:
//
//	OdaInstanceMap{ "key": OdaInstanceArgs{...} }
type OdaInstanceMapInput interface {
	pulumi.Input

	ToOdaInstanceMapOutput() OdaInstanceMapOutput
	ToOdaInstanceMapOutputWithContext(context.Context) OdaInstanceMapOutput
}

type OdaInstanceMap map[string]OdaInstanceInput

func (OdaInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OdaInstance)(nil)).Elem()
}

func (i OdaInstanceMap) ToOdaInstanceMapOutput() OdaInstanceMapOutput {
	return i.ToOdaInstanceMapOutputWithContext(context.Background())
}

func (i OdaInstanceMap) ToOdaInstanceMapOutputWithContext(ctx context.Context) OdaInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaInstanceMapOutput)
}

type OdaInstanceOutput struct{ *pulumi.OutputState }

func (OdaInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OdaInstance)(nil)).Elem()
}

func (o OdaInstanceOutput) ToOdaInstanceOutput() OdaInstanceOutput {
	return o
}

func (o OdaInstanceOutput) ToOdaInstanceOutputWithContext(ctx context.Context) OdaInstanceOutput {
	return o
}

// A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
func (o OdaInstanceOutput) AttachmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringArrayOutput { return v.AttachmentIds }).(pulumi.StringArrayOutput)
}

// A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
func (o OdaInstanceOutput) AttachmentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringArrayOutput { return v.AttachmentTypes }).(pulumi.StringArrayOutput)
}

// (Updatable) Identifier of the compartment.
func (o OdaInstanceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// URL for the connector's endpoint.
func (o OdaInstanceOutput) ConnectorUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.ConnectorUrl }).(pulumi.StringOutput)
}

// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
func (o OdaInstanceOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Description of the Digital Assistant instance.
func (o OdaInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
func (o OdaInstanceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Example: `{"bar-key": "value"}`
func (o OdaInstanceOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
func (o OdaInstanceOutput) IdentityAppConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.IdentityAppConsoleUrl }).(pulumi.StringOutput)
}

// If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
func (o OdaInstanceOutput) IdentityAppGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.IdentityAppGuid }).(pulumi.StringOutput)
}

// If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
func (o OdaInstanceOutput) IdentityDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.IdentityDomain }).(pulumi.StringOutput)
}

// A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
func (o OdaInstanceOutput) ImportedPackageIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringArrayOutput { return v.ImportedPackageIds }).(pulumi.StringArrayOutput)
}

// A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
func (o OdaInstanceOutput) ImportedPackageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringArrayOutput { return v.ImportedPackageNames }).(pulumi.StringArrayOutput)
}

// Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
func (o OdaInstanceOutput) IsRoleBasedAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.BoolOutput { return v.IsRoleBasedAccess }).(pulumi.BoolOutput)
}

// The current sub-state of the Digital Assistant instance.
func (o OdaInstanceOutput) LifecycleSubState() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.LifecycleSubState }).(pulumi.StringOutput)
}

// A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
func (o OdaInstanceOutput) RestrictedOperations() OdaInstanceRestrictedOperationArrayOutput {
	return o.ApplyT(func(v *OdaInstance) OdaInstanceRestrictedOperationArrayOutput { return v.RestrictedOperations }).(OdaInstanceRestrictedOperationArrayOutput)
}

// Shape or size of the instance.
func (o OdaInstanceOutput) ShapeName() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.ShapeName }).(pulumi.StringOutput)
}

// The current state of the Digital Assistant instance.
func (o OdaInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
func (o OdaInstanceOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o OdaInstanceOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
func (o OdaInstanceOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// URL for the Digital Assistant web application that's associated with the instance.
func (o OdaInstanceOutput) WebAppUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OdaInstance) pulumi.StringOutput { return v.WebAppUrl }).(pulumi.StringOutput)
}

type OdaInstanceArrayOutput struct{ *pulumi.OutputState }

func (OdaInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OdaInstance)(nil)).Elem()
}

func (o OdaInstanceArrayOutput) ToOdaInstanceArrayOutput() OdaInstanceArrayOutput {
	return o
}

func (o OdaInstanceArrayOutput) ToOdaInstanceArrayOutputWithContext(ctx context.Context) OdaInstanceArrayOutput {
	return o
}

func (o OdaInstanceArrayOutput) Index(i pulumi.IntInput) OdaInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OdaInstance {
		return vs[0].([]*OdaInstance)[vs[1].(int)]
	}).(OdaInstanceOutput)
}

type OdaInstanceMapOutput struct{ *pulumi.OutputState }

func (OdaInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OdaInstance)(nil)).Elem()
}

func (o OdaInstanceMapOutput) ToOdaInstanceMapOutput() OdaInstanceMapOutput {
	return o
}

func (o OdaInstanceMapOutput) ToOdaInstanceMapOutputWithContext(ctx context.Context) OdaInstanceMapOutput {
	return o
}

func (o OdaInstanceMapOutput) MapIndex(k pulumi.StringInput) OdaInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OdaInstance {
		return vs[0].(map[string]*OdaInstance)[vs[1].(string)]
	}).(OdaInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OdaInstanceInput)(nil)).Elem(), &OdaInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*OdaInstanceArrayInput)(nil)).Elem(), OdaInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OdaInstanceMapInput)(nil)).Elem(), OdaInstanceMap{})
	pulumi.RegisterOutputType(OdaInstanceOutput{})
	pulumi.RegisterOutputType(OdaInstanceArrayOutput{})
	pulumi.RegisterOutputType(OdaInstanceMapOutput{})
}
