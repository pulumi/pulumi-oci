// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onesubsription

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Aggregated Computed Usages in Oracle Cloud Infrastructure Onesubscription service.
//
// This is a collection API which returns a list of aggregated computed usage details (there can be multiple Parent Products under a given SubID each of which is represented under Subscription Service Line # in SPM).
func GetAggregatedComputedUsages(ctx *pulumi.Context, args *GetAggregatedComputedUsagesArgs, opts ...pulumi.InvokeOption) (*GetAggregatedComputedUsagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAggregatedComputedUsagesResult
	err := ctx.Invoke("oci:OneSubsription/getAggregatedComputedUsages:getAggregatedComputedUsages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAggregatedComputedUsages.
type GetAggregatedComputedUsagesArgs struct {
	// The OCID of the root compartment.
	CompartmentId string                              `pulumi:"compartmentId"`
	Filters       []GetAggregatedComputedUsagesFilter `pulumi:"filters"`
	// Grouping criteria to use for aggregate the computed Usage, either hourly (`HOURLY`), daily (`DAILY`), monthly(`MONTHLY`) or none (`NONE`) to not follow a grouping criteria by date.
	Grouping *string `pulumi:"grouping"`
	// Product part number for subscribed service line, called parent product.
	ParentProduct *string `pulumi:"parentProduct"`
	// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
	TimeFrom string `pulumi:"timeFrom"`
	// Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
	TimeTo string `pulumi:"timeTo"`
}

// A collection of values returned by getAggregatedComputedUsages.
type GetAggregatedComputedUsagesResult struct {
	// Aggregation of computed usages for the subscribed service.
	AggregatedComputedUsages []GetAggregatedComputedUsagesAggregatedComputedUsage `pulumi:"aggregatedComputedUsages"`
	CompartmentId            string                                               `pulumi:"compartmentId"`
	Filters                  []GetAggregatedComputedUsagesFilter                  `pulumi:"filters"`
	Grouping                 *string                                              `pulumi:"grouping"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Product description
	ParentProduct *string `pulumi:"parentProduct"`
	// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM
	SubscriptionId string `pulumi:"subscriptionId"`
	TimeFrom       string `pulumi:"timeFrom"`
	TimeTo         string `pulumi:"timeTo"`
}

func GetAggregatedComputedUsagesOutput(ctx *pulumi.Context, args GetAggregatedComputedUsagesOutputArgs, opts ...pulumi.InvokeOption) GetAggregatedComputedUsagesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAggregatedComputedUsagesResultOutput, error) {
			args := v.(GetAggregatedComputedUsagesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OneSubsription/getAggregatedComputedUsages:getAggregatedComputedUsages", args, GetAggregatedComputedUsagesResultOutput{}, options).(GetAggregatedComputedUsagesResultOutput), nil
		}).(GetAggregatedComputedUsagesResultOutput)
}

// A collection of arguments for invoking getAggregatedComputedUsages.
type GetAggregatedComputedUsagesOutputArgs struct {
	// The OCID of the root compartment.
	CompartmentId pulumi.StringInput                          `pulumi:"compartmentId"`
	Filters       GetAggregatedComputedUsagesFilterArrayInput `pulumi:"filters"`
	// Grouping criteria to use for aggregate the computed Usage, either hourly (`HOURLY`), daily (`DAILY`), monthly(`MONTHLY`) or none (`NONE`) to not follow a grouping criteria by date.
	Grouping pulumi.StringPtrInput `pulumi:"grouping"`
	// Product part number for subscribed service line, called parent product.
	ParentProduct pulumi.StringPtrInput `pulumi:"parentProduct"`
	// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// Initial date to filter Computed Usage data in SPM. In the case of non aggregated data the time period between of fromDate and toDate , expressed in RFC 3339 timestamp format.
	TimeFrom pulumi.StringInput `pulumi:"timeFrom"`
	// Final date to filter Computed Usage data in SPM, expressed in RFC 3339 timestamp format.
	TimeTo pulumi.StringInput `pulumi:"timeTo"`
}

func (GetAggregatedComputedUsagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAggregatedComputedUsagesArgs)(nil)).Elem()
}

// A collection of values returned by getAggregatedComputedUsages.
type GetAggregatedComputedUsagesResultOutput struct{ *pulumi.OutputState }

func (GetAggregatedComputedUsagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAggregatedComputedUsagesResult)(nil)).Elem()
}

func (o GetAggregatedComputedUsagesResultOutput) ToGetAggregatedComputedUsagesResultOutput() GetAggregatedComputedUsagesResultOutput {
	return o
}

func (o GetAggregatedComputedUsagesResultOutput) ToGetAggregatedComputedUsagesResultOutputWithContext(ctx context.Context) GetAggregatedComputedUsagesResultOutput {
	return o
}

// Aggregation of computed usages for the subscribed service.
func (o GetAggregatedComputedUsagesResultOutput) AggregatedComputedUsages() GetAggregatedComputedUsagesAggregatedComputedUsageArrayOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) []GetAggregatedComputedUsagesAggregatedComputedUsage {
		return v.AggregatedComputedUsages
	}).(GetAggregatedComputedUsagesAggregatedComputedUsageArrayOutput)
}

func (o GetAggregatedComputedUsagesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetAggregatedComputedUsagesResultOutput) Filters() GetAggregatedComputedUsagesFilterArrayOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) []GetAggregatedComputedUsagesFilter { return v.Filters }).(GetAggregatedComputedUsagesFilterArrayOutput)
}

func (o GetAggregatedComputedUsagesResultOutput) Grouping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) *string { return v.Grouping }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAggregatedComputedUsagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Product description
func (o GetAggregatedComputedUsagesResultOutput) ParentProduct() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) *string { return v.ParentProduct }).(pulumi.StringPtrOutput)
}

// Subscription Id is an identifier associated to the service used for filter the Computed Usage in SPM
func (o GetAggregatedComputedUsagesResultOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

func (o GetAggregatedComputedUsagesResultOutput) TimeFrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) string { return v.TimeFrom }).(pulumi.StringOutput)
}

func (o GetAggregatedComputedUsagesResultOutput) TimeTo() pulumi.StringOutput {
	return o.ApplyT(func(v GetAggregatedComputedUsagesResult) string { return v.TimeTo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAggregatedComputedUsagesResultOutput{})
}
