// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onesubsription

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Commitment resource in Oracle Cloud Infrastructure Onesubscription service.
//
// # This API returns the commitment details corresponding to the id provided
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OneSubsription"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OneSubsription.GetCommitment(ctx, &onesubsription.GetCommitmentArgs{
//				CommitmentId: testCommitmentOciOnesubscriptionCommitment.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetCommitment(ctx *pulumi.Context, args *GetCommitmentArgs, opts ...pulumi.InvokeOption) (*GetCommitmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCommitmentResult
	err := ctx.Invoke("oci:OneSubsription/getCommitment:getCommitment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCommitment.
type GetCommitmentArgs struct {
	// The Commitment Id
	CommitmentId string `pulumi:"commitmentId"`
}

// A collection of values returned by getCommitment.
type GetCommitmentResult struct {
	// Commitment available amount
	AvailableAmount string `pulumi:"availableAmount"`
	CommitmentId    string `pulumi:"commitmentId"`
	// Funded Allocation line value example: 12000.00
	FundedAllocationValue string `pulumi:"fundedAllocationValue"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Commitment quantity
	Quantity string `pulumi:"quantity"`
	// SPM internal Subscribed Service ID
	SubscribedServiceId string `pulumi:"subscribedServiceId"`
	// Commitment end date
	TimeEnd string `pulumi:"timeEnd"`
	// Commitment start date
	TimeStart string `pulumi:"timeStart"`
	// Commitment used amount
	UsedAmount string `pulumi:"usedAmount"`
}

func GetCommitmentOutput(ctx *pulumi.Context, args GetCommitmentOutputArgs, opts ...pulumi.InvokeOption) GetCommitmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCommitmentResult, error) {
			args := v.(GetCommitmentArgs)
			r, err := GetCommitment(ctx, &args, opts...)
			var s GetCommitmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCommitmentResultOutput)
}

// A collection of arguments for invoking getCommitment.
type GetCommitmentOutputArgs struct {
	// The Commitment Id
	CommitmentId pulumi.StringInput `pulumi:"commitmentId"`
}

func (GetCommitmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommitmentArgs)(nil)).Elem()
}

// A collection of values returned by getCommitment.
type GetCommitmentResultOutput struct{ *pulumi.OutputState }

func (GetCommitmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommitmentResult)(nil)).Elem()
}

func (o GetCommitmentResultOutput) ToGetCommitmentResultOutput() GetCommitmentResultOutput {
	return o
}

func (o GetCommitmentResultOutput) ToGetCommitmentResultOutputWithContext(ctx context.Context) GetCommitmentResultOutput {
	return o
}

// Commitment available amount
func (o GetCommitmentResultOutput) AvailableAmount() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.AvailableAmount }).(pulumi.StringOutput)
}

func (o GetCommitmentResultOutput) CommitmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.CommitmentId }).(pulumi.StringOutput)
}

// Funded Allocation line value example: 12000.00
func (o GetCommitmentResultOutput) FundedAllocationValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.FundedAllocationValue }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCommitmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Commitment quantity
func (o GetCommitmentResultOutput) Quantity() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.Quantity }).(pulumi.StringOutput)
}

// SPM internal Subscribed Service ID
func (o GetCommitmentResultOutput) SubscribedServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.SubscribedServiceId }).(pulumi.StringOutput)
}

// Commitment end date
func (o GetCommitmentResultOutput) TimeEnd() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.TimeEnd }).(pulumi.StringOutput)
}

// Commitment start date
func (o GetCommitmentResultOutput) TimeStart() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.TimeStart }).(pulumi.StringOutput)
}

// Commitment used amount
func (o GetCommitmentResultOutput) UsedAmount() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommitmentResult) string { return v.UsedAmount }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCommitmentResultOutput{})
}
