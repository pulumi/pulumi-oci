// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onesubsription

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Computed Usage resource in Oracle Cloud Infrastructure Onesubscription service.
//
// # This is an API which returns Computed Usage corresponding to the id passed
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OneSubsription"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OneSubsription.GetComputedUsage(ctx, &onesubsription.GetComputedUsageArgs{
//				CompartmentId:   _var.Compartment_id,
//				ComputedUsageId: oci_onesubscription_computed_usage.Test_computed_usage.Id,
//				Fields:          _var.Computed_usage_fields,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetComputedUsage(ctx *pulumi.Context, args *GetComputedUsageArgs, opts ...pulumi.InvokeOption) (*GetComputedUsageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetComputedUsageResult
	err := ctx.Invoke("oci:OneSubsription/getComputedUsage:getComputedUsage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getComputedUsage.
type GetComputedUsageArgs struct {
	// The OCID of the root compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The Computed Usage Id
	ComputedUsageId string `pulumi:"computedUsageId"`
	// Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
	Fields []string `pulumi:"fields"`
}

// A collection of values returned by getComputedUsage.
type GetComputedUsageResult struct {
	// Subscribed service commitmentId.
	CommitmentServiceId *string `pulumi:"commitmentServiceId"`
	CompartmentId       string  `pulumi:"compartmentId"`
	// SPM Internal compute records source .
	ComputeSource   *string `pulumi:"computeSource"`
	ComputedUsageId string  `pulumi:"computedUsageId"`
	// Computed Line Amount not rounded
	Cost *string `pulumi:"cost"`
	// Computed Line Amount rounded.
	CostRounded *string `pulumi:"costRounded"`
	// Currency code
	CurrencyCode *string `pulumi:"currencyCode"`
	// Data Center Attribute as sent by MQS to SPM.
	DataCenter *string  `pulumi:"dataCenter"`
	Fields     []string `pulumi:"fields"`
	// The provider-assigned unique ID for this managed resource.
	Id *string `pulumi:"id"`
	// Invoicing status for the aggregated compute usage
	IsInvoiced *bool `pulumi:"isInvoiced"`
	// MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
	MqsMessageId *string `pulumi:"mqsMessageId"`
	// Net Unit Price for the product in consideration, price actual.
	NetUnitPrice *string `pulumi:"netUnitPrice"`
	// SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
	OriginalUsageNumber *string `pulumi:"originalUsageNumber"`
	// Product description
	ParentProducts []GetComputedUsageParentProduct `pulumi:"parentProducts"`
	// Subscribed service line parent id
	ParentSubscribedServiceId *string `pulumi:"parentSubscribedServiceId"`
	// Subscription plan number
	PlanNumber *string `pulumi:"planNumber"`
	// Product description
	Products []GetComputedUsageProduct `pulumi:"products"`
	// Total Quantity that was used for computation
	Quantity *string `pulumi:"quantity"`
	// Ratecard Id at subscribed service level
	RateCardId *string `pulumi:"rateCardId"`
	// References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
	RateCardTierdId *string `pulumi:"rateCardTierdId"`
	// Computed Usage created time, expressed in RFC 3339 timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// Metered Service date, expressed in RFC 3339 timestamp format.
	TimeMeteredOn *string `pulumi:"timeMeteredOn"`
	// Usae computation date, expressed in RFC 3339 timestamp format.
	TimeOfArrival *string `pulumi:"timeOfArrival"`
	// Computed Usage updated time, expressed in RFC 3339 timestamp format.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// Usage compute type in SPM.
	Type *string `pulumi:"type"`
	// Unit of Messure
	UnitOfMeasure *string `pulumi:"unitOfMeasure"`
	// SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
	UsageNumber *string `pulumi:"usageNumber"`
}

func GetComputedUsageOutput(ctx *pulumi.Context, args GetComputedUsageOutputArgs, opts ...pulumi.InvokeOption) GetComputedUsageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetComputedUsageResult, error) {
			args := v.(GetComputedUsageArgs)
			r, err := GetComputedUsage(ctx, &args, opts...)
			var s GetComputedUsageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetComputedUsageResultOutput)
}

// A collection of arguments for invoking getComputedUsage.
type GetComputedUsageOutputArgs struct {
	// The OCID of the root compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// The Computed Usage Id
	ComputedUsageId pulumi.StringInput `pulumi:"computedUsageId"`
	// Partial response refers to an optimization technique offered by the RESTful web APIs to return only the information  (fields) required by the client. This parameter is used to control what fields to return.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
}

func (GetComputedUsageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputedUsageArgs)(nil)).Elem()
}

// A collection of values returned by getComputedUsage.
type GetComputedUsageResultOutput struct{ *pulumi.OutputState }

func (GetComputedUsageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputedUsageResult)(nil)).Elem()
}

func (o GetComputedUsageResultOutput) ToGetComputedUsageResultOutput() GetComputedUsageResultOutput {
	return o
}

func (o GetComputedUsageResultOutput) ToGetComputedUsageResultOutputWithContext(ctx context.Context) GetComputedUsageResultOutput {
	return o
}

// Subscribed service commitmentId.
func (o GetComputedUsageResultOutput) CommitmentServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.CommitmentServiceId }).(pulumi.StringPtrOutput)
}

func (o GetComputedUsageResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputedUsageResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// SPM Internal compute records source .
func (o GetComputedUsageResultOutput) ComputeSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.ComputeSource }).(pulumi.StringPtrOutput)
}

func (o GetComputedUsageResultOutput) ComputedUsageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputedUsageResult) string { return v.ComputedUsageId }).(pulumi.StringOutput)
}

// Computed Line Amount not rounded
func (o GetComputedUsageResultOutput) Cost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.Cost }).(pulumi.StringPtrOutput)
}

// Computed Line Amount rounded.
func (o GetComputedUsageResultOutput) CostRounded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.CostRounded }).(pulumi.StringPtrOutput)
}

// Currency code
func (o GetComputedUsageResultOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// Data Center Attribute as sent by MQS to SPM.
func (o GetComputedUsageResultOutput) DataCenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.DataCenter }).(pulumi.StringPtrOutput)
}

func (o GetComputedUsageResultOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetComputedUsageResult) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetComputedUsageResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Invoicing status for the aggregated compute usage
func (o GetComputedUsageResultOutput) IsInvoiced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *bool { return v.IsInvoiced }).(pulumi.BoolPtrOutput)
}

// MQS Identfier send to SPM , SPM does not transform this attribute and is received as is.
func (o GetComputedUsageResultOutput) MqsMessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.MqsMessageId }).(pulumi.StringPtrOutput)
}

// Net Unit Price for the product in consideration, price actual.
func (o GetComputedUsageResultOutput) NetUnitPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.NetUnitPrice }).(pulumi.StringPtrOutput)
}

// SPM Internal Original usage Line number identifier in SPM coming from Metered Services entity.
func (o GetComputedUsageResultOutput) OriginalUsageNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.OriginalUsageNumber }).(pulumi.StringPtrOutput)
}

// Product description
func (o GetComputedUsageResultOutput) ParentProducts() GetComputedUsageParentProductArrayOutput {
	return o.ApplyT(func(v GetComputedUsageResult) []GetComputedUsageParentProduct { return v.ParentProducts }).(GetComputedUsageParentProductArrayOutput)
}

// Subscribed service line parent id
func (o GetComputedUsageResultOutput) ParentSubscribedServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.ParentSubscribedServiceId }).(pulumi.StringPtrOutput)
}

// Subscription plan number
func (o GetComputedUsageResultOutput) PlanNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.PlanNumber }).(pulumi.StringPtrOutput)
}

// Product description
func (o GetComputedUsageResultOutput) Products() GetComputedUsageProductArrayOutput {
	return o.ApplyT(func(v GetComputedUsageResult) []GetComputedUsageProduct { return v.Products }).(GetComputedUsageProductArrayOutput)
}

// Total Quantity that was used for computation
func (o GetComputedUsageResultOutput) Quantity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.Quantity }).(pulumi.StringPtrOutput)
}

// Ratecard Id at subscribed service level
func (o GetComputedUsageResultOutput) RateCardId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.RateCardId }).(pulumi.StringPtrOutput)
}

// References the tier in the ratecard for that usage (OCI will be using the same reference to cross-reference for correctness on the usage csv report), comes from Entity OBSCNTR_IPT_PRODUCTTIER.
func (o GetComputedUsageResultOutput) RateCardTierdId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.RateCardTierdId }).(pulumi.StringPtrOutput)
}

// Computed Usage created time, expressed in RFC 3339 timestamp format.
func (o GetComputedUsageResultOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// Metered Service date, expressed in RFC 3339 timestamp format.
func (o GetComputedUsageResultOutput) TimeMeteredOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.TimeMeteredOn }).(pulumi.StringPtrOutput)
}

// Usae computation date, expressed in RFC 3339 timestamp format.
func (o GetComputedUsageResultOutput) TimeOfArrival() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.TimeOfArrival }).(pulumi.StringPtrOutput)
}

// Computed Usage updated time, expressed in RFC 3339 timestamp format.
func (o GetComputedUsageResultOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

// Usage compute type in SPM.
func (o GetComputedUsageResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Unit of Messure
func (o GetComputedUsageResultOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.UnitOfMeasure }).(pulumi.StringPtrOutput)
}

// SPM Internal usage Line number identifier in SPM coming from Metered Services entity.
func (o GetComputedUsageResultOutput) UsageNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputedUsageResult) *string { return v.UsageNumber }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetComputedUsageResultOutput{})
}
