// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ons

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Notification Topics in Oracle Cloud Infrastructure Notifications service.
//
// Lists topics in the specified compartment.
//
// Transactions Per Minute (TPM) per-tenancy limit for this operation: 120.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/ons"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ons.GetNotificationTopics(ctx, &ons.GetNotificationTopicsArgs{
//				CompartmentId: compartmentId,
//				Id:            pulumi.StringRef(notificationTopicId),
//				Name:          pulumi.StringRef(notificationTopicName),
//				State:         pulumi.StringRef(notificationTopicState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNotificationTopics(ctx *pulumi.Context, args *GetNotificationTopicsArgs, opts ...pulumi.InvokeOption) (*GetNotificationTopicsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNotificationTopicsResult
	err := ctx.Invoke("oci:Ons/getNotificationTopics:getNotificationTopics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotificationTopics.
type GetNotificationTopicsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string                        `pulumi:"compartmentId"`
	Filters       []GetNotificationTopicsFilter `pulumi:"filters"`
	// A filter to only return resources that match the given id exactly.
	Id *string `pulumi:"id"`
	// A filter to only return resources that match the given name exactly.
	Name *string `pulumi:"name"`
	// Filter returned list by specified lifecycle state. This parameter is case-insensitive.
	State *string `pulumi:"state"`
}

// A collection of values returned by getNotificationTopics.
type GetNotificationTopicsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment for the topic.
	CompartmentId string                        `pulumi:"compartmentId"`
	Filters       []GetNotificationTopicsFilter `pulumi:"filters"`
	Id            *string                       `pulumi:"id"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// The list of notification_topics.
	NotificationTopics []GetNotificationTopicsNotificationTopic `pulumi:"notificationTopics"`
	// The lifecycle state of the topic.
	State *string `pulumi:"state"`
}

func GetNotificationTopicsOutput(ctx *pulumi.Context, args GetNotificationTopicsOutputArgs, opts ...pulumi.InvokeOption) GetNotificationTopicsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNotificationTopicsResultOutput, error) {
			args := v.(GetNotificationTopicsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Ons/getNotificationTopics:getNotificationTopics", args, GetNotificationTopicsResultOutput{}, options).(GetNotificationTopicsResultOutput), nil
		}).(GetNotificationTopicsResultOutput)
}

// A collection of arguments for invoking getNotificationTopics.
type GetNotificationTopicsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput                    `pulumi:"compartmentId"`
	Filters       GetNotificationTopicsFilterArrayInput `pulumi:"filters"`
	// A filter to only return resources that match the given id exactly.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A filter to only return resources that match the given name exactly.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Filter returned list by specified lifecycle state. This parameter is case-insensitive.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetNotificationTopicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotificationTopicsArgs)(nil)).Elem()
}

// A collection of values returned by getNotificationTopics.
type GetNotificationTopicsResultOutput struct{ *pulumi.OutputState }

func (GetNotificationTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotificationTopicsResult)(nil)).Elem()
}

func (o GetNotificationTopicsResultOutput) ToGetNotificationTopicsResultOutput() GetNotificationTopicsResultOutput {
	return o
}

func (o GetNotificationTopicsResultOutput) ToGetNotificationTopicsResultOutputWithContext(ctx context.Context) GetNotificationTopicsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment for the topic.
func (o GetNotificationTopicsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetNotificationTopicsResultOutput) Filters() GetNotificationTopicsFilterArrayOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) []GetNotificationTopicsFilter { return v.Filters }).(GetNotificationTopicsFilterArrayOutput)
}

func (o GetNotificationTopicsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the topic.
func (o GetNotificationTopicsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of notification_topics.
func (o GetNotificationTopicsResultOutput) NotificationTopics() GetNotificationTopicsNotificationTopicArrayOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) []GetNotificationTopicsNotificationTopic {
		return v.NotificationTopics
	}).(GetNotificationTopicsNotificationTopicArrayOutput)
}

// The lifecycle state of the topic.
func (o GetNotificationTopicsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNotificationTopicsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNotificationTopicsResultOutput{})
}
