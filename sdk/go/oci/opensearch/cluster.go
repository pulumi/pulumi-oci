// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
//
// Creates a new OpensearchCluster.
//
// ## Prerequisites
//
// # The below policies must be created in compartment before creating OpensearchCluster
//
// ##### {Compartment-Name} - Name of  your compartment
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
// Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Opensearch.NewCluster(ctx, "testOpensearchCluster", &Opensearch.ClusterArgs{
//				CompartmentId:                  pulumi.Any(_var.Compartment_id),
//				DataNodeCount:                  pulumi.Any(_var.Opensearch_cluster_data_node_count),
//				DataNodeHostMemoryGb:           pulumi.Any(_var.Opensearch_cluster_data_node_host_memory_gb),
//				DataNodeHostOcpuCount:          pulumi.Any(_var.Opensearch_cluster_data_node_host_ocpu_count),
//				DataNodeHostType:               pulumi.Any(_var.Opensearch_cluster_data_node_host_type),
//				DataNodeStorageGb:              pulumi.Any(_var.Opensearch_cluster_data_node_storage_gb),
//				DisplayName:                    pulumi.Any(_var.Opensearch_cluster_display_name),
//				MasterNodeCount:                pulumi.Any(_var.Opensearch_cluster_master_node_count),
//				MasterNodeHostMemoryGb:         pulumi.Any(_var.Opensearch_cluster_master_node_host_memory_gb),
//				MasterNodeHostOcpuCount:        pulumi.Any(_var.Opensearch_cluster_master_node_host_ocpu_count),
//				MasterNodeHostType:             pulumi.Any(_var.Opensearch_cluster_master_node_host_type),
//				OpendashboardNodeCount:         pulumi.Any(_var.Opensearch_cluster_opendashboard_node_count),
//				OpendashboardNodeHostMemoryGb:  pulumi.Any(_var.Opensearch_cluster_opendashboard_node_host_memory_gb),
//				OpendashboardNodeHostOcpuCount: pulumi.Any(_var.Opensearch_cluster_opendashboard_node_host_ocpu_count),
//				SoftwareVersion:                pulumi.Any(_var.Opensearch_cluster_software_version),
//				SubnetCompartmentId:            pulumi.Any(oci_identity_compartment.Test_compartment.Id),
//				SubnetId:                       pulumi.Any(oci_core_subnet.Test_subnet.Id),
//				VcnCompartmentId:               pulumi.Any(oci_identity_compartment.Test_compartment.Id),
//				VcnId:                          pulumi.Any(oci_core_vcn.Test_vcn.Id),
//				DataNodeHostBareMetalShape:     pulumi.Any(_var.Opensearch_cluster_data_node_host_bare_metal_shape),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				MasterNodeHostBareMetalShape:   pulumi.Any(_var.Opensearch_cluster_master_node_host_bare_metal_shape),
//				SecurityMasterUserName:         pulumi.Any(oci_identity_user.Test_user.Name),
//				SecurityMasterUserPasswordHash: pulumi.Any(_var.Opensearch_cluster_security_master_user_password_hash),
//				SecurityMode:                   pulumi.Any(_var.Opensearch_cluster_security_mode),
//				SystemTags:                     pulumi.Any(_var.Opensearch_cluster_system_tags),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OpensearchClusters can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Opensearch/cluster:Cluster test_opensearch_cluster "id"
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// The availability domains to distribute the cluser nodes across.
	AvailabilityDomains pulumi.StringArrayOutput `pulumi:"availabilityDomains"`
	// The OCID of the compartment to create the cluster in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The number of data nodes to configure for the cluster.
	DataNodeCount pulumi.IntOutput `pulumi:"dataNodeCount"`
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape pulumi.StringPtrOutput `pulumi:"dataNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
	DataNodeHostMemoryGb pulumi.IntOutput `pulumi:"dataNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
	DataNodeHostOcpuCount pulumi.IntOutput `pulumi:"dataNodeHostOcpuCount"`
	// TThe instance type for the cluster's data nodes.
	DataNodeHostType pulumi.StringOutput `pulumi:"dataNodeHostType"`
	// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb pulumi.IntOutput `pulumi:"dataNodeStorageGb"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	Fqdn pulumi.StringPtrOutput `pulumi:"fqdn"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state of the cluster.
	LifecycleDetails pulumi.StringPtrOutput `pulumi:"lifecycleDetails"`
	// (Updatable) The number of master nodes to configure for the cluster.
	MasterNodeCount pulumi.IntOutput `pulumi:"masterNodeCount"`
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape pulumi.StringPtrOutput `pulumi:"masterNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
	MasterNodeHostMemoryGb pulumi.IntOutput `pulumi:"masterNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
	MasterNodeHostOcpuCount pulumi.IntOutput `pulumi:"masterNodeHostOcpuCount"`
	// The instance type for the cluster's master nodes.
	MasterNodeHostType pulumi.StringOutput `pulumi:"masterNodeHostType"`
	// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
	OpendashboardFqdn pulumi.StringPtrOutput `pulumi:"opendashboardFqdn"`
	// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
	OpendashboardNodeCount pulumi.IntOutput `pulumi:"opendashboardNodeCount"`
	// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb pulumi.IntOutput `pulumi:"opendashboardNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount pulumi.IntOutput `pulumi:"opendashboardNodeHostOcpuCount"`
	// The private IP address for the cluster's OpenSearch Dashboard.
	OpendashboardPrivateIp pulumi.StringPtrOutput `pulumi:"opendashboardPrivateIp"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchFqdn pulumi.StringPtrOutput `pulumi:"opensearchFqdn"`
	// The cluster's private IP address.
	OpensearchPrivateIp pulumi.StringPtrOutput `pulumi:"opensearchPrivateIp"`
	// (Updatable) The name of the master user that are used to manage security config
	SecurityMasterUserName pulumi.StringPtrOutput `pulumi:"securityMasterUserName"`
	// (Updatable) The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash pulumi.StringPtrOutput `pulumi:"securityMasterUserPasswordHash"`
	// (Updatable) The security mode of the cluster.
	SecurityMode pulumi.StringPtrOutput `pulumi:"securityMode"`
	// (Updatable) The version of the software the cluster is running.
	SoftwareVersion pulumi.StringOutput `pulumi:"softwareVersion"`
	// The current state of the cluster.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId pulumi.StringOutput `pulumi:"subnetCompartmentId"`
	// The OCID of the cluster's subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The amount of time in milliseconds since the cluster was created.
	TimeCreated pulumi.StringPtrOutput `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeDeleted pulumi.StringPtrOutput `pulumi:"timeDeleted"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeUpdated pulumi.StringPtrOutput `pulumi:"timeUpdated"`
	// The size in GB of the cluster's total storage.
	TotalStorageGb pulumi.IntPtrOutput `pulumi:"totalStorageGb"`
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId pulumi.StringOutput `pulumi:"vcnCompartmentId"`
	// The OCID of the cluster's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DataNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'DataNodeCount'")
	}
	if args.DataNodeHostMemoryGb == nil {
		return nil, errors.New("invalid value for required argument 'DataNodeHostMemoryGb'")
	}
	if args.DataNodeHostOcpuCount == nil {
		return nil, errors.New("invalid value for required argument 'DataNodeHostOcpuCount'")
	}
	if args.DataNodeHostType == nil {
		return nil, errors.New("invalid value for required argument 'DataNodeHostType'")
	}
	if args.DataNodeStorageGb == nil {
		return nil, errors.New("invalid value for required argument 'DataNodeStorageGb'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MasterNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodeCount'")
	}
	if args.MasterNodeHostMemoryGb == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodeHostMemoryGb'")
	}
	if args.MasterNodeHostOcpuCount == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodeHostOcpuCount'")
	}
	if args.MasterNodeHostType == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodeHostType'")
	}
	if args.OpendashboardNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'OpendashboardNodeCount'")
	}
	if args.OpendashboardNodeHostMemoryGb == nil {
		return nil, errors.New("invalid value for required argument 'OpendashboardNodeHostMemoryGb'")
	}
	if args.OpendashboardNodeHostOcpuCount == nil {
		return nil, errors.New("invalid value for required argument 'OpendashboardNodeHostOcpuCount'")
	}
	if args.SoftwareVersion == nil {
		return nil, errors.New("invalid value for required argument 'SoftwareVersion'")
	}
	if args.SubnetCompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetCompartmentId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VcnCompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'VcnCompartmentId'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	if args.SecurityMasterUserPasswordHash != nil {
		args.SecurityMasterUserPasswordHash = pulumi.ToSecret(args.SecurityMasterUserPasswordHash).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"securityMasterUserPasswordHash",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("oci:Opensearch/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("oci:Opensearch/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The availability domains to distribute the cluser nodes across.
	AvailabilityDomains []string `pulumi:"availabilityDomains"`
	// The OCID of the compartment to create the cluster in.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The number of data nodes to configure for the cluster.
	DataNodeCount *int `pulumi:"dataNodeCount"`
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape *string `pulumi:"dataNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
	DataNodeHostMemoryGb *int `pulumi:"dataNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
	DataNodeHostOcpuCount *int `pulumi:"dataNodeHostOcpuCount"`
	// TThe instance type for the cluster's data nodes.
	DataNodeHostType *string `pulumi:"dataNodeHostType"`
	// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb *int `pulumi:"dataNodeStorageGb"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	Fqdn *string `pulumi:"fqdn"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state of the cluster.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) The number of master nodes to configure for the cluster.
	MasterNodeCount *int `pulumi:"masterNodeCount"`
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape *string `pulumi:"masterNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
	MasterNodeHostMemoryGb *int `pulumi:"masterNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
	MasterNodeHostOcpuCount *int `pulumi:"masterNodeHostOcpuCount"`
	// The instance type for the cluster's master nodes.
	MasterNodeHostType *string `pulumi:"masterNodeHostType"`
	// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
	OpendashboardFqdn *string `pulumi:"opendashboardFqdn"`
	// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
	OpendashboardNodeCount *int `pulumi:"opendashboardNodeCount"`
	// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb *int `pulumi:"opendashboardNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount *int `pulumi:"opendashboardNodeHostOcpuCount"`
	// The private IP address for the cluster's OpenSearch Dashboard.
	OpendashboardPrivateIp *string `pulumi:"opendashboardPrivateIp"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchFqdn *string `pulumi:"opensearchFqdn"`
	// The cluster's private IP address.
	OpensearchPrivateIp *string `pulumi:"opensearchPrivateIp"`
	// (Updatable) The name of the master user that are used to manage security config
	SecurityMasterUserName *string `pulumi:"securityMasterUserName"`
	// (Updatable) The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash *string `pulumi:"securityMasterUserPasswordHash"`
	// (Updatable) The security mode of the cluster.
	SecurityMode *string `pulumi:"securityMode"`
	// (Updatable) The version of the software the cluster is running.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// The current state of the cluster.
	State *string `pulumi:"state"`
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId *string `pulumi:"subnetCompartmentId"`
	// The OCID of the cluster's subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The amount of time in milliseconds since the cluster was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeDeleted *string `pulumi:"timeDeleted"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The size in GB of the cluster's total storage.
	TotalStorageGb *int `pulumi:"totalStorageGb"`
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId *string `pulumi:"vcnCompartmentId"`
	// The OCID of the cluster's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId *string `pulumi:"vcnId"`
}

type ClusterState struct {
	// The availability domains to distribute the cluser nodes across.
	AvailabilityDomains pulumi.StringArrayInput
	// The OCID of the compartment to create the cluster in.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The number of data nodes to configure for the cluster.
	DataNodeCount pulumi.IntPtrInput
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape pulumi.StringPtrInput
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
	DataNodeHostMemoryGb pulumi.IntPtrInput
	// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
	DataNodeHostOcpuCount pulumi.IntPtrInput
	// TThe instance type for the cluster's data nodes.
	DataNodeHostType pulumi.StringPtrInput
	// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb pulumi.IntPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	Fqdn pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Additional information about the current lifecycle state of the cluster.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) The number of master nodes to configure for the cluster.
	MasterNodeCount pulumi.IntPtrInput
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape pulumi.StringPtrInput
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
	MasterNodeHostMemoryGb pulumi.IntPtrInput
	// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
	MasterNodeHostOcpuCount pulumi.IntPtrInput
	// The instance type for the cluster's master nodes.
	MasterNodeHostType pulumi.StringPtrInput
	// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
	OpendashboardFqdn pulumi.StringPtrInput
	// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
	OpendashboardNodeCount pulumi.IntPtrInput
	// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb pulumi.IntPtrInput
	// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount pulumi.IntPtrInput
	// The private IP address for the cluster's OpenSearch Dashboard.
	OpendashboardPrivateIp pulumi.StringPtrInput
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchFqdn pulumi.StringPtrInput
	// The cluster's private IP address.
	OpensearchPrivateIp pulumi.StringPtrInput
	// (Updatable) The name of the master user that are used to manage security config
	SecurityMasterUserName pulumi.StringPtrInput
	// (Updatable) The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash pulumi.StringPtrInput
	// (Updatable) The security mode of the cluster.
	SecurityMode pulumi.StringPtrInput
	// (Updatable) The version of the software the cluster is running.
	SoftwareVersion pulumi.StringPtrInput
	// The current state of the cluster.
	State pulumi.StringPtrInput
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId pulumi.StringPtrInput
	// The OCID of the cluster's subnet.
	SubnetId pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The amount of time in milliseconds since the cluster was created.
	TimeCreated pulumi.StringPtrInput
	// The amount of time in milliseconds since the cluster was updated.
	TimeDeleted pulumi.StringPtrInput
	// The amount of time in milliseconds since the cluster was updated.
	TimeUpdated pulumi.StringPtrInput
	// The size in GB of the cluster's total storage.
	TotalStorageGb pulumi.IntPtrInput
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId pulumi.StringPtrInput
	// The OCID of the cluster's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The OCID of the compartment to create the cluster in.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) The number of data nodes to configure for the cluster.
	DataNodeCount int `pulumi:"dataNodeCount"`
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape *string `pulumi:"dataNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
	DataNodeHostMemoryGb int `pulumi:"dataNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
	DataNodeHostOcpuCount int `pulumi:"dataNodeHostOcpuCount"`
	// TThe instance type for the cluster's data nodes.
	DataNodeHostType string `pulumi:"dataNodeHostType"`
	// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb int `pulumi:"dataNodeStorageGb"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The number of master nodes to configure for the cluster.
	MasterNodeCount int `pulumi:"masterNodeCount"`
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape *string `pulumi:"masterNodeHostBareMetalShape"`
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
	MasterNodeHostMemoryGb int `pulumi:"masterNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
	MasterNodeHostOcpuCount int `pulumi:"masterNodeHostOcpuCount"`
	// The instance type for the cluster's master nodes.
	MasterNodeHostType string `pulumi:"masterNodeHostType"`
	// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
	OpendashboardNodeCount int `pulumi:"opendashboardNodeCount"`
	// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb int `pulumi:"opendashboardNodeHostMemoryGb"`
	// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount int `pulumi:"opendashboardNodeHostOcpuCount"`
	// (Updatable) The name of the master user that are used to manage security config
	SecurityMasterUserName *string `pulumi:"securityMasterUserName"`
	// (Updatable) The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash *string `pulumi:"securityMasterUserPasswordHash"`
	// (Updatable) The security mode of the cluster.
	SecurityMode *string `pulumi:"securityMode"`
	// (Updatable) The version of the software the cluster is running.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId string `pulumi:"subnetCompartmentId"`
	// The OCID of the cluster's subnet.
	SubnetId string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId string `pulumi:"vcnCompartmentId"`
	// The OCID of the cluster's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId string `pulumi:"vcnId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The OCID of the compartment to create the cluster in.
	CompartmentId pulumi.StringInput
	// (Updatable) The number of data nodes to configure for the cluster.
	DataNodeCount pulumi.IntInput
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape pulumi.StringPtrInput
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
	DataNodeHostMemoryGb pulumi.IntInput
	// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
	DataNodeHostOcpuCount pulumi.IntInput
	// TThe instance type for the cluster's data nodes.
	DataNodeHostType pulumi.StringInput
	// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb pulumi.IntInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The name of the cluster. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The number of master nodes to configure for the cluster.
	MasterNodeCount pulumi.IntInput
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape pulumi.StringPtrInput
	// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
	MasterNodeHostMemoryGb pulumi.IntInput
	// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
	MasterNodeHostOcpuCount pulumi.IntInput
	// The instance type for the cluster's master nodes.
	MasterNodeHostType pulumi.StringInput
	// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
	OpendashboardNodeCount pulumi.IntInput
	// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb pulumi.IntInput
	// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount pulumi.IntInput
	// (Updatable) The name of the master user that are used to manage security config
	SecurityMasterUserName pulumi.StringPtrInput
	// (Updatable) The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash pulumi.StringPtrInput
	// (Updatable) The security mode of the cluster.
	SecurityMode pulumi.StringPtrInput
	// (Updatable) The version of the software the cluster is running.
	SoftwareVersion pulumi.StringInput
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId pulumi.StringInput
	// The OCID of the cluster's subnet.
	SubnetId pulumi.StringInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId pulumi.StringInput
	// The OCID of the cluster's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The availability domains to distribute the cluser nodes across.
func (o ClusterOutput) AvailabilityDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AvailabilityDomains }).(pulumi.StringArrayOutput)
}

// The OCID of the compartment to create the cluster in.
func (o ClusterOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The number of data nodes to configure for the cluster.
func (o ClusterOutput) DataNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DataNodeCount }).(pulumi.IntOutput)
}

// The bare metal shape for the cluster's data nodes.
func (o ClusterOutput) DataNodeHostBareMetalShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DataNodeHostBareMetalShape }).(pulumi.StringPtrOutput)
}

// (Updatable) The amount of memory in GB, to configure per node for the cluster's data nodes.
func (o ClusterOutput) DataNodeHostMemoryGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DataNodeHostMemoryGb }).(pulumi.IntOutput)
}

// (Updatable) The number of OCPUs to configure for the cluster's data nodes.
func (o ClusterOutput) DataNodeHostOcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DataNodeHostOcpuCount }).(pulumi.IntOutput)
}

// TThe instance type for the cluster's data nodes.
func (o ClusterOutput) DataNodeHostType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DataNodeHostType }).(pulumi.StringOutput)
}

// (Updatable) The amount of storage in GB, to configure per node for the cluster's data nodes.
func (o ClusterOutput) DataNodeStorageGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DataNodeStorageGb }).(pulumi.IntOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o ClusterOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) The name of the cluster. Avoid entering confidential information.
func (o ClusterOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o ClusterOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ClusterOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// Additional information about the current lifecycle state of the cluster.
func (o ClusterOutput) LifecycleDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.LifecycleDetails }).(pulumi.StringPtrOutput)
}

// (Updatable) The number of master nodes to configure for the cluster.
func (o ClusterOutput) MasterNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.MasterNodeCount }).(pulumi.IntOutput)
}

// The bare metal shape for the cluster's master nodes.
func (o ClusterOutput) MasterNodeHostBareMetalShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.MasterNodeHostBareMetalShape }).(pulumi.StringPtrOutput)
}

// (Updatable) The amount of memory in GB, to configure per node for the cluster's master nodes.
func (o ClusterOutput) MasterNodeHostMemoryGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.MasterNodeHostMemoryGb }).(pulumi.IntOutput)
}

// (Updatable) The number of OCPUs to configure for the cluser's master nodes.
func (o ClusterOutput) MasterNodeHostOcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.MasterNodeHostOcpuCount }).(pulumi.IntOutput)
}

// The instance type for the cluster's master nodes.
func (o ClusterOutput) MasterNodeHostType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterNodeHostType }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
func (o ClusterOutput) OpendashboardFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.OpendashboardFqdn }).(pulumi.StringPtrOutput)
}

// (Updatable) The number of OpenSearch Dashboard nodes to configure for the cluster.
func (o ClusterOutput) OpendashboardNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.OpendashboardNodeCount }).(pulumi.IntOutput)
}

// (Updatable) The amount of memory in GB, to configure for the cluster's OpenSearch Dashboard nodes.
func (o ClusterOutput) OpendashboardNodeHostMemoryGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.OpendashboardNodeHostMemoryGb }).(pulumi.IntOutput)
}

// (Updatable) The number of OCPUs to configure for the cluster's OpenSearch Dashboard nodes.
func (o ClusterOutput) OpendashboardNodeHostOcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.OpendashboardNodeHostOcpuCount }).(pulumi.IntOutput)
}

// The private IP address for the cluster's OpenSearch Dashboard.
func (o ClusterOutput) OpendashboardPrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.OpendashboardPrivateIp }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o ClusterOutput) OpensearchFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.OpensearchFqdn }).(pulumi.StringPtrOutput)
}

// The cluster's private IP address.
func (o ClusterOutput) OpensearchPrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.OpensearchPrivateIp }).(pulumi.StringPtrOutput)
}

// (Updatable) The name of the master user that are used to manage security config
func (o ClusterOutput) SecurityMasterUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SecurityMasterUserName }).(pulumi.StringPtrOutput)
}

// (Updatable) The password hash of the master user that are used to manage security config
func (o ClusterOutput) SecurityMasterUserPasswordHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SecurityMasterUserPasswordHash }).(pulumi.StringPtrOutput)
}

// (Updatable) The security mode of the cluster.
func (o ClusterOutput) SecurityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SecurityMode }).(pulumi.StringPtrOutput)
}

// (Updatable) The version of the software the cluster is running.
func (o ClusterOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// The current state of the cluster.
func (o ClusterOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID for the compartment where the cluster's subnet is located.
func (o ClusterOutput) SubnetCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetCompartmentId }).(pulumi.StringOutput)
}

// The OCID of the cluster's subnet.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o ClusterOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.SystemTags }).(pulumi.MapOutput)
}

// The amount of time in milliseconds since the cluster was created.
func (o ClusterOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The amount of time in milliseconds since the cluster was updated.
func (o ClusterOutput) TimeDeleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TimeDeleted }).(pulumi.StringPtrOutput)
}

// The amount of time in milliseconds since the cluster was updated.
func (o ClusterOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

// The size in GB of the cluster's total storage.
func (o ClusterOutput) TotalStorageGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.TotalStorageGb }).(pulumi.IntPtrOutput)
}

// The OCID for the compartment where the cluster's VCN is located.
func (o ClusterOutput) VcnCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VcnCompartmentId }).(pulumi.StringOutput)
}

// The OCID of the cluster's VCN.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ClusterOutput) VcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VcnId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
