// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Opensearch Cluster resource in Oracle Cloud Infrastructure Opensearch service.
//
// # Gets a OpensearchCluster by identifier
//
// ## Prerequisites
//
// # The below policies must be created in compartment before creating OpensearchCluster
//
// ##### {Compartment-Name} - Name of  your compartment
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// For latest documentation on OpenSearch use please refer to https://docs.oracle.com/en-us/iaas/Content/search-opensearch/home.htm\
// Required permissions: https://docs.oracle.com/en-us/iaas/Content/search-opensearch/Concepts/ocisearchpermissions.htm
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Opensearch.GetOpensearchCluster(ctx, &opensearch.GetOpensearchClusterArgs{
//				OpensearchClusterId: oci_opensearch_opensearch_cluster.Test_opensearch_cluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOpensearchCluster(ctx *pulumi.Context, args *GetOpensearchClusterArgs, opts ...pulumi.InvokeOption) (*GetOpensearchClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOpensearchClusterResult
	err := ctx.Invoke("oci:Opensearch/getOpensearchCluster:getOpensearchCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchCluster.
type GetOpensearchClusterArgs struct {
	// unique OpensearchCluster identifier
	OpensearchClusterId string `pulumi:"opensearchClusterId"`
}

// A collection of values returned by getOpensearchCluster.
type GetOpensearchClusterResult struct {
	// The availability domains to distribute the cluser nodes across.
	AvailabilityDomains []string `pulumi:"availabilityDomains"`
	// The OCID of the compartment where the cluster is located.
	CompartmentId *string `pulumi:"compartmentId"`
	// The number of data nodes configured for the cluster.
	DataNodeCount *int `pulumi:"dataNodeCount"`
	// The bare metal shape for the cluster's data nodes.
	DataNodeHostBareMetalShape *string `pulumi:"dataNodeHostBareMetalShape"`
	// The amount of memory in GB, for the cluster's data nodes.
	DataNodeHostMemoryGb *int `pulumi:"dataNodeHostMemoryGb"`
	// The number of OCPUs configured for the cluster's data nodes.
	DataNodeHostOcpuCount *int `pulumi:"dataNodeHostOcpuCount"`
	// The instance type for the cluster's data nodes.
	DataNodeHostType *string `pulumi:"dataNodeHostType"`
	// The amount of storage in GB, to configure per node for the cluster's data nodes.
	DataNodeStorageGb *int `pulumi:"dataNodeStorageGb"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The name of the cluster. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	Fqdn *string `pulumi:"fqdn"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the cluster.
	Id *string `pulumi:"id"`
	// Additional information about the current lifecycle state of the cluster.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The number of master nodes configured for the cluster.
	MasterNodeCount *int `pulumi:"masterNodeCount"`
	// The bare metal shape for the cluster's master nodes.
	MasterNodeHostBareMetalShape *string `pulumi:"masterNodeHostBareMetalShape"`
	// The amount of memory in GB, for the cluster's master nodes.
	MasterNodeHostMemoryGb *int `pulumi:"masterNodeHostMemoryGb"`
	// The number of OCPUs configured for cluster's master nodes.
	MasterNodeHostOcpuCount *int `pulumi:"masterNodeHostOcpuCount"`
	// The instance type for the cluster's master nodes.
	MasterNodeHostType *string `pulumi:"masterNodeHostType"`
	// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
	OpendashboardFqdn *string `pulumi:"opendashboardFqdn"`
	// The number of OpenSearch Dashboard nodes configured for the cluster.
	OpendashboardNodeCount *int `pulumi:"opendashboardNodeCount"`
	// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostMemoryGb *int `pulumi:"opendashboardNodeHostMemoryGb"`
	// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
	OpendashboardNodeHostOcpuCount *int `pulumi:"opendashboardNodeHostOcpuCount"`
	// The private IP address for the cluster's OpenSearch Dashboard.
	OpendashboardPrivateIp *string `pulumi:"opendashboardPrivateIp"`
	OpensearchClusterId    string  `pulumi:"opensearchClusterId"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchFqdn *string `pulumi:"opensearchFqdn"`
	// The cluster's private IP address.
	OpensearchPrivateIp *string `pulumi:"opensearchPrivateIp"`
	// The name of the master user that are used to manage security config
	SecurityMasterUserName *string `pulumi:"securityMasterUserName"`
	// The password hash of the master user that are used to manage security config
	SecurityMasterUserPasswordHash *string `pulumi:"securityMasterUserPasswordHash"`
	// The security mode of the cluster.
	SecurityMode *string `pulumi:"securityMode"`
	// The software version the cluster is running.
	SoftwareVersion *string `pulumi:"softwareVersion"`
	// The current state of the cluster.
	State *string `pulumi:"state"`
	// The OCID for the compartment where the cluster's subnet is located.
	SubnetCompartmentId *string `pulumi:"subnetCompartmentId"`
	// The OCID of the cluster's subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The amount of time in milliseconds since the cluster was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeDeleted *string `pulumi:"timeDeleted"`
	// The amount of time in milliseconds since the cluster was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The size in GB of the cluster's total storage.
	TotalStorageGb *int `pulumi:"totalStorageGb"`
	// The OCID for the compartment where the cluster's VCN is located.
	VcnCompartmentId *string `pulumi:"vcnCompartmentId"`
	// The OCID of the cluster's VCN.
	VcnId *string `pulumi:"vcnId"`
}

func GetOpensearchClusterOutput(ctx *pulumi.Context, args GetOpensearchClusterOutputArgs, opts ...pulumi.InvokeOption) GetOpensearchClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetOpensearchClusterResult, error) {
			args := v.(GetOpensearchClusterArgs)
			r, err := GetOpensearchCluster(ctx, &args, opts...)
			var s GetOpensearchClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetOpensearchClusterResultOutput)
}

// A collection of arguments for invoking getOpensearchCluster.
type GetOpensearchClusterOutputArgs struct {
	// unique OpensearchCluster identifier
	OpensearchClusterId pulumi.StringInput `pulumi:"opensearchClusterId"`
}

func (GetOpensearchClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOpensearchClusterArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchCluster.
type GetOpensearchClusterResultOutput struct{ *pulumi.OutputState }

func (GetOpensearchClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOpensearchClusterResult)(nil)).Elem()
}

func (o GetOpensearchClusterResultOutput) ToGetOpensearchClusterResultOutput() GetOpensearchClusterResultOutput {
	return o
}

func (o GetOpensearchClusterResultOutput) ToGetOpensearchClusterResultOutputWithContext(ctx context.Context) GetOpensearchClusterResultOutput {
	return o
}

// The availability domains to distribute the cluser nodes across.
func (o GetOpensearchClusterResultOutput) AvailabilityDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) []string { return v.AvailabilityDomains }).(pulumi.StringArrayOutput)
}

// The OCID of the compartment where the cluster is located.
func (o GetOpensearchClusterResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

// The number of data nodes configured for the cluster.
func (o GetOpensearchClusterResultOutput) DataNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.DataNodeCount }).(pulumi.IntPtrOutput)
}

// The bare metal shape for the cluster's data nodes.
func (o GetOpensearchClusterResultOutput) DataNodeHostBareMetalShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.DataNodeHostBareMetalShape }).(pulumi.StringPtrOutput)
}

// The amount of memory in GB, for the cluster's data nodes.
func (o GetOpensearchClusterResultOutput) DataNodeHostMemoryGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.DataNodeHostMemoryGb }).(pulumi.IntPtrOutput)
}

// The number of OCPUs configured for the cluster's data nodes.
func (o GetOpensearchClusterResultOutput) DataNodeHostOcpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.DataNodeHostOcpuCount }).(pulumi.IntPtrOutput)
}

// The instance type for the cluster's data nodes.
func (o GetOpensearchClusterResultOutput) DataNodeHostType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.DataNodeHostType }).(pulumi.StringPtrOutput)
}

// The amount of storage in GB, to configure per node for the cluster's data nodes.
func (o GetOpensearchClusterResultOutput) DataNodeStorageGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.DataNodeStorageGb }).(pulumi.IntPtrOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o GetOpensearchClusterResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// The name of the cluster. Avoid entering confidential information.
func (o GetOpensearchClusterResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o GetOpensearchClusterResultOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o GetOpensearchClusterResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// The OCID of the cluster.
func (o GetOpensearchClusterResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Additional information about the current lifecycle state of the cluster.
func (o GetOpensearchClusterResultOutput) LifecycleDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.LifecycleDetails }).(pulumi.StringPtrOutput)
}

// The number of master nodes configured for the cluster.
func (o GetOpensearchClusterResultOutput) MasterNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.MasterNodeCount }).(pulumi.IntPtrOutput)
}

// The bare metal shape for the cluster's master nodes.
func (o GetOpensearchClusterResultOutput) MasterNodeHostBareMetalShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.MasterNodeHostBareMetalShape }).(pulumi.StringPtrOutput)
}

// The amount of memory in GB, for the cluster's master nodes.
func (o GetOpensearchClusterResultOutput) MasterNodeHostMemoryGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.MasterNodeHostMemoryGb }).(pulumi.IntPtrOutput)
}

// The number of OCPUs configured for cluster's master nodes.
func (o GetOpensearchClusterResultOutput) MasterNodeHostOcpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.MasterNodeHostOcpuCount }).(pulumi.IntPtrOutput)
}

// The instance type for the cluster's master nodes.
func (o GetOpensearchClusterResultOutput) MasterNodeHostType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.MasterNodeHostType }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
func (o GetOpensearchClusterResultOutput) OpendashboardFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.OpendashboardFqdn }).(pulumi.StringPtrOutput)
}

// The number of OpenSearch Dashboard nodes configured for the cluster.
func (o GetOpensearchClusterResultOutput) OpendashboardNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.OpendashboardNodeCount }).(pulumi.IntPtrOutput)
}

// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
func (o GetOpensearchClusterResultOutput) OpendashboardNodeHostMemoryGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.OpendashboardNodeHostMemoryGb }).(pulumi.IntPtrOutput)
}

// The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
func (o GetOpensearchClusterResultOutput) OpendashboardNodeHostOcpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.OpendashboardNodeHostOcpuCount }).(pulumi.IntPtrOutput)
}

// The private IP address for the cluster's OpenSearch Dashboard.
func (o GetOpensearchClusterResultOutput) OpendashboardPrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.OpendashboardPrivateIp }).(pulumi.StringPtrOutput)
}

func (o GetOpensearchClusterResultOutput) OpensearchClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) string { return v.OpensearchClusterId }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o GetOpensearchClusterResultOutput) OpensearchFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.OpensearchFqdn }).(pulumi.StringPtrOutput)
}

// The cluster's private IP address.
func (o GetOpensearchClusterResultOutput) OpensearchPrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.OpensearchPrivateIp }).(pulumi.StringPtrOutput)
}

// The name of the master user that are used to manage security config
func (o GetOpensearchClusterResultOutput) SecurityMasterUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SecurityMasterUserName }).(pulumi.StringPtrOutput)
}

// The password hash of the master user that are used to manage security config
func (o GetOpensearchClusterResultOutput) SecurityMasterUserPasswordHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SecurityMasterUserPasswordHash }).(pulumi.StringPtrOutput)
}

// The security mode of the cluster.
func (o GetOpensearchClusterResultOutput) SecurityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SecurityMode }).(pulumi.StringPtrOutput)
}

// The software version the cluster is running.
func (o GetOpensearchClusterResultOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SoftwareVersion }).(pulumi.StringPtrOutput)
}

// The current state of the cluster.
func (o GetOpensearchClusterResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The OCID for the compartment where the cluster's subnet is located.
func (o GetOpensearchClusterResultOutput) SubnetCompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SubnetCompartmentId }).(pulumi.StringPtrOutput)
}

// The OCID of the cluster's subnet.
func (o GetOpensearchClusterResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o GetOpensearchClusterResultOutput) SystemTags() pulumi.MapOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) map[string]interface{} { return v.SystemTags }).(pulumi.MapOutput)
}

// The amount of time in milliseconds since the cluster was created.
func (o GetOpensearchClusterResultOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The amount of time in milliseconds since the cluster was updated.
func (o GetOpensearchClusterResultOutput) TimeDeleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.TimeDeleted }).(pulumi.StringPtrOutput)
}

// The amount of time in milliseconds since the cluster was updated.
func (o GetOpensearchClusterResultOutput) TimeUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.TimeUpdated }).(pulumi.StringPtrOutput)
}

// The size in GB of the cluster's total storage.
func (o GetOpensearchClusterResultOutput) TotalStorageGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *int { return v.TotalStorageGb }).(pulumi.IntPtrOutput)
}

// The OCID for the compartment where the cluster's VCN is located.
func (o GetOpensearchClusterResultOutput) VcnCompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.VcnCompartmentId }).(pulumi.StringPtrOutput)
}

// The OCID of the cluster's VCN.
func (o GetOpensearchClusterResultOutput) VcnId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetOpensearchClusterResult) *string { return v.VcnId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOpensearchClusterResultOutput{})
}
