// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Opensearch Cluster Pipeline resource in Oracle Cloud Infrastructure Opensearch service.
//
// # Gets a OpensearchCluster Pipeline by identifier
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.GetOpensearchClusterPipeline(ctx, &opensearch.GetOpensearchClusterPipelineArgs{
//				OpensearchClusterPipelineId: testOpensearchClusterPipelineOciOpensearchOpensearchClusterPipeline.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOpensearchClusterPipeline(ctx *pulumi.Context, args *LookupOpensearchClusterPipelineArgs, opts ...pulumi.InvokeOption) (*LookupOpensearchClusterPipelineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOpensearchClusterPipelineResult
	err := ctx.Invoke("oci:Opensearch/getOpensearchClusterPipeline:getOpensearchClusterPipeline", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOpensearchClusterPipeline.
type LookupOpensearchClusterPipelineArgs struct {
	// unique OpensearchClusterPipeline identifier
	OpensearchClusterPipelineId string `pulumi:"opensearchClusterPipelineId"`
}

// A collection of values returned by getOpensearchClusterPipeline.
type LookupOpensearchClusterPipelineResult struct {
	// The OCID of the compartment where the pipeline is located.
	CompartmentId string `pulumi:"compartmentId"`
	// The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody string `pulumi:"dataPrepperConfigurationBody"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// The name of the pipeline. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// The OCID of the cluster pipeline.
	Id string `pulumi:"id"`
	// The amount of memory in GB, for each pipeline node.
	MemoryGb int `pulumi:"memoryGb"`
	// The number of nodes configured for the pipeline.
	NodeCount int `pulumi:"nodeCount"`
	// The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId string `pulumi:"nsgId"`
	// The number of OCPUs configured for each pipeline node.
	OcpuCount                   int    `pulumi:"ocpuCount"`
	OpcDryRun                   bool   `pulumi:"opcDryRun"`
	OpensearchClusterPipelineId string `pulumi:"opensearchClusterPipelineId"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchPipelineFqdn string `pulumi:"opensearchPipelineFqdn"`
	// The pipeline's private IP address.
	OpensearchPipelinePrivateIp string `pulumi:"opensearchPipelinePrivateIp"`
	// The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody string `pulumi:"pipelineConfigurationBody"`
	// The current state of the pipeline.
	PipelineMode string `pulumi:"pipelineMode"`
	// The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints []GetOpensearchClusterPipelineReverseConnectionEndpoint `pulumi:"reverseConnectionEndpoints"`
	// The current state of the cluster backup.
	State string `pulumi:"state"`
	// The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId string `pulumi:"subnetCompartmentId"`
	// The OCID of the pipeline's subnet.
	SubnetId string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated string `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the pipeline was updated.
	TimeUpdated string `pulumi:"timeUpdated"`
	// The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId string `pulumi:"vcnCompartmentId"`
	// The OCID of the pipeline's VCN.
	VcnId string `pulumi:"vcnId"`
}

func LookupOpensearchClusterPipelineOutput(ctx *pulumi.Context, args LookupOpensearchClusterPipelineOutputArgs, opts ...pulumi.InvokeOption) LookupOpensearchClusterPipelineResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOpensearchClusterPipelineResultOutput, error) {
			args := v.(LookupOpensearchClusterPipelineArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Opensearch/getOpensearchClusterPipeline:getOpensearchClusterPipeline", args, LookupOpensearchClusterPipelineResultOutput{}, options).(LookupOpensearchClusterPipelineResultOutput), nil
		}).(LookupOpensearchClusterPipelineResultOutput)
}

// A collection of arguments for invoking getOpensearchClusterPipeline.
type LookupOpensearchClusterPipelineOutputArgs struct {
	// unique OpensearchClusterPipeline identifier
	OpensearchClusterPipelineId pulumi.StringInput `pulumi:"opensearchClusterPipelineId"`
}

func (LookupOpensearchClusterPipelineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchClusterPipelineArgs)(nil)).Elem()
}

// A collection of values returned by getOpensearchClusterPipeline.
type LookupOpensearchClusterPipelineResultOutput struct{ *pulumi.OutputState }

func (LookupOpensearchClusterPipelineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpensearchClusterPipelineResult)(nil)).Elem()
}

func (o LookupOpensearchClusterPipelineResultOutput) ToLookupOpensearchClusterPipelineResultOutput() LookupOpensearchClusterPipelineResultOutput {
	return o
}

func (o LookupOpensearchClusterPipelineResultOutput) ToLookupOpensearchClusterPipelineResultOutputWithContext(ctx context.Context) LookupOpensearchClusterPipelineResultOutput {
	return o
}

// The OCID of the compartment where the pipeline is located.
func (o LookupOpensearchClusterPipelineResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
func (o LookupOpensearchClusterPipelineResultOutput) DataPrepperConfigurationBody() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.DataPrepperConfigurationBody }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupOpensearchClusterPipelineResultOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) map[string]string { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// The name of the pipeline. Avoid entering confidential information.
func (o LookupOpensearchClusterPipelineResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupOpensearchClusterPipelineResultOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) map[string]string { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// The OCID of the cluster pipeline.
func (o LookupOpensearchClusterPipelineResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.Id }).(pulumi.StringOutput)
}

// The amount of memory in GB, for each pipeline node.
func (o LookupOpensearchClusterPipelineResultOutput) MemoryGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) int { return v.MemoryGb }).(pulumi.IntOutput)
}

// The number of nodes configured for the pipeline.
func (o LookupOpensearchClusterPipelineResultOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) int { return v.NodeCount }).(pulumi.IntOutput)
}

// The OCID of the NSG where the pipeline private endpoint vnic will be attached.
func (o LookupOpensearchClusterPipelineResultOutput) NsgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.NsgId }).(pulumi.StringOutput)
}

// The number of OCPUs configured for each pipeline node.
func (o LookupOpensearchClusterPipelineResultOutput) OcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) int { return v.OcpuCount }).(pulumi.IntOutput)
}

func (o LookupOpensearchClusterPipelineResultOutput) OpcDryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) bool { return v.OpcDryRun }).(pulumi.BoolOutput)
}

func (o LookupOpensearchClusterPipelineResultOutput) OpensearchClusterPipelineId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.OpensearchClusterPipelineId }).(pulumi.StringOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o LookupOpensearchClusterPipelineResultOutput) OpensearchPipelineFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.OpensearchPipelineFqdn }).(pulumi.StringOutput)
}

// The pipeline's private IP address.
func (o LookupOpensearchClusterPipelineResultOutput) OpensearchPipelinePrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.OpensearchPipelinePrivateIp }).(pulumi.StringOutput)
}

// The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
func (o LookupOpensearchClusterPipelineResultOutput) PipelineConfigurationBody() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.PipelineConfigurationBody }).(pulumi.StringOutput)
}

// The current state of the pipeline.
func (o LookupOpensearchClusterPipelineResultOutput) PipelineMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.PipelineMode }).(pulumi.StringOutput)
}

// The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
func (o LookupOpensearchClusterPipelineResultOutput) ReverseConnectionEndpoints() GetOpensearchClusterPipelineReverseConnectionEndpointArrayOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) []GetOpensearchClusterPipelineReverseConnectionEndpoint {
		return v.ReverseConnectionEndpoints
	}).(GetOpensearchClusterPipelineReverseConnectionEndpointArrayOutput)
}

// The current state of the cluster backup.
func (o LookupOpensearchClusterPipelineResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.State }).(pulumi.StringOutput)
}

// The OCID for the compartment where the pipeline's subnet is located.
func (o LookupOpensearchClusterPipelineResultOutput) SubnetCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.SubnetCompartmentId }).(pulumi.StringOutput)
}

// The OCID of the pipeline's subnet.
func (o LookupOpensearchClusterPipelineResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o LookupOpensearchClusterPipelineResultOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) map[string]string { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o LookupOpensearchClusterPipelineResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The amount of time in milliseconds since the pipeline was updated.
func (o LookupOpensearchClusterPipelineResultOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.TimeUpdated }).(pulumi.StringOutput)
}

// The OCID for the compartment where the pipeline's VCN is located.
func (o LookupOpensearchClusterPipelineResultOutput) VcnCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.VcnCompartmentId }).(pulumi.StringOutput)
}

// The OCID of the pipeline's VCN.
func (o LookupOpensearchClusterPipelineResultOutput) VcnId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpensearchClusterPipelineResult) string { return v.VcnId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpensearchClusterPipelineResultOutput{})
}
