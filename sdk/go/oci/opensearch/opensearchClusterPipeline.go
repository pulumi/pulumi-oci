// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Opensearch Cluster Pipeline resource in Oracle Cloud Infrastructure Opensearch service.
//
// Creates a new OpensearchCluster Pipeline.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewOpensearchClusterPipeline(ctx, "test_opensearch_cluster_pipeline", &opensearch.OpensearchClusterPipelineArgs{
//				CompartmentId:                pulumi.Any(compartmentId),
//				DataPrepperConfigurationBody: pulumi.Any(opensearchClusterPipelineDataPrepperConfigurationBody),
//				DisplayName:                  pulumi.Any(opensearchClusterPipelineDisplayName),
//				MemoryGb:                     pulumi.Any(opensearchClusterPipelineMemoryGb),
//				NodeCount:                    pulumi.Any(opensearchClusterPipelineNodeCount),
//				OcpuCount:                    pulumi.Any(opensearchClusterPipelineOcpuCount),
//				PipelineConfigurationBody:    pulumi.Any(opensearchClusterPipelinePipelineConfigurationBody),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				NodeShape: pulumi.Any(opensearchClusterPipelineNodeShape),
//				NsgId:     pulumi.Any(testNsg.Id),
//				OpcDryRun: pulumi.Any(opensearchClusterPipelineOpcDryRun),
//				ReverseConnectionEndpoints: opensearch.OpensearchClusterPipelineReverseConnectionEndpointArray{
//					&opensearch.OpensearchClusterPipelineReverseConnectionEndpointArgs{
//						CustomerFqdn: pulumi.Any(opensearchClusterPipelineReverseConnectionEndpointsCustomerFqdn),
//						CustomerIp:   pulumi.Any(opensearchClusterPipelineReverseConnectionEndpointsCustomerIp),
//					},
//				},
//				SubnetCompartmentId: pulumi.Any(testCompartment.Id),
//				SubnetId:            pulumi.Any(testSubnet.Id),
//				VcnCompartmentId:    pulumi.Any(testCompartment.Id),
//				VcnId:               pulumi.Any(testVcn.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OpensearchClusterPipelines can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline test_opensearch_cluster_pipeline "id"
// ```
type OpensearchClusterPipeline struct {
	pulumi.CustomResourceState

	// The OCID of the compartment to create the pipeline in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody pulumi.StringOutput `pulumi:"dataPrepperConfigurationBody"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// (Updatable) The amount of memory in GB, for each pipeline node.
	MemoryGb pulumi.IntOutput `pulumi:"memoryGb"`
	// (Updatable) The number of nodes configured for the pipeline.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// (Updatable) The pipeline node shape.
	NodeShape pulumi.StringOutput `pulumi:"nodeShape"`
	// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId pulumi.StringOutput `pulumi:"nsgId"`
	// (Updatable) The number of OCPUs configured for each pipeline node.
	OcpuCount pulumi.IntOutput `pulumi:"ocpuCount"`
	// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
	OpcDryRun pulumi.BoolOutput `pulumi:"opcDryRun"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchPipelineFqdn pulumi.StringOutput `pulumi:"opensearchPipelineFqdn"`
	// The pipeline's private IP address.
	OpensearchPipelinePrivateIp pulumi.StringOutput `pulumi:"opensearchPipelinePrivateIp"`
	// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody pulumi.StringOutput `pulumi:"pipelineConfigurationBody"`
	// The current state of the pipeline.
	PipelineMode pulumi.StringOutput `pulumi:"pipelineMode"`
	// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints OpensearchClusterPipelineReverseConnectionEndpointArrayOutput `pulumi:"reverseConnectionEndpoints"`
	// The current state of the cluster backup.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId pulumi.StringOutput `pulumi:"subnetCompartmentId"`
	// (Updatable) The OCID of the pipeline's subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the pipeline was updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId pulumi.StringOutput `pulumi:"vcnCompartmentId"`
	// (Updatable) The OCID of the pipeline's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewOpensearchClusterPipeline registers a new resource with the given unique name, arguments, and options.
func NewOpensearchClusterPipeline(ctx *pulumi.Context,
	name string, args *OpensearchClusterPipelineArgs, opts ...pulumi.ResourceOption) (*OpensearchClusterPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DataPrepperConfigurationBody == nil {
		return nil, errors.New("invalid value for required argument 'DataPrepperConfigurationBody'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MemoryGb == nil {
		return nil, errors.New("invalid value for required argument 'MemoryGb'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.OcpuCount == nil {
		return nil, errors.New("invalid value for required argument 'OcpuCount'")
	}
	if args.PipelineConfigurationBody == nil {
		return nil, errors.New("invalid value for required argument 'PipelineConfigurationBody'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpensearchClusterPipeline
	err := ctx.RegisterResource("oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpensearchClusterPipeline gets an existing OpensearchClusterPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpensearchClusterPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpensearchClusterPipelineState, opts ...pulumi.ResourceOption) (*OpensearchClusterPipeline, error) {
	var resource OpensearchClusterPipeline
	err := ctx.ReadResource("oci:Opensearch/opensearchClusterPipeline:OpensearchClusterPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpensearchClusterPipeline resources.
type opensearchClusterPipelineState struct {
	// The OCID of the compartment to create the pipeline in.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody *string `pulumi:"dataPrepperConfigurationBody"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) The amount of memory in GB, for each pipeline node.
	MemoryGb *int `pulumi:"memoryGb"`
	// (Updatable) The number of nodes configured for the pipeline.
	NodeCount *int `pulumi:"nodeCount"`
	// (Updatable) The pipeline node shape.
	NodeShape *string `pulumi:"nodeShape"`
	// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId *string `pulumi:"nsgId"`
	// (Updatable) The number of OCPUs configured for each pipeline node.
	OcpuCount *int `pulumi:"ocpuCount"`
	// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
	OpcDryRun *bool `pulumi:"opcDryRun"`
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchPipelineFqdn *string `pulumi:"opensearchPipelineFqdn"`
	// The pipeline's private IP address.
	OpensearchPipelinePrivateIp *string `pulumi:"opensearchPipelinePrivateIp"`
	// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody *string `pulumi:"pipelineConfigurationBody"`
	// The current state of the pipeline.
	PipelineMode *string `pulumi:"pipelineMode"`
	// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints []OpensearchClusterPipelineReverseConnectionEndpoint `pulumi:"reverseConnectionEndpoints"`
	// The current state of the cluster backup.
	State *string `pulumi:"state"`
	// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId *string `pulumi:"subnetCompartmentId"`
	// (Updatable) The OCID of the pipeline's subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The amount of time in milliseconds since the pipeline was updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId *string `pulumi:"vcnCompartmentId"`
	// (Updatable) The OCID of the pipeline's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId *string `pulumi:"vcnId"`
}

type OpensearchClusterPipelineState struct {
	// The OCID of the compartment to create the pipeline in.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) The amount of memory in GB, for each pipeline node.
	MemoryGb pulumi.IntPtrInput
	// (Updatable) The number of nodes configured for the pipeline.
	NodeCount pulumi.IntPtrInput
	// (Updatable) The pipeline node shape.
	NodeShape pulumi.StringPtrInput
	// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId pulumi.StringPtrInput
	// (Updatable) The number of OCPUs configured for each pipeline node.
	OcpuCount pulumi.IntPtrInput
	// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
	OpcDryRun pulumi.BoolPtrInput
	// The fully qualified domain name (FQDN) for the cluster's API endpoint.
	OpensearchPipelineFqdn pulumi.StringPtrInput
	// The pipeline's private IP address.
	OpensearchPipelinePrivateIp pulumi.StringPtrInput
	// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody pulumi.StringPtrInput
	// The current state of the pipeline.
	PipelineMode pulumi.StringPtrInput
	// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints OpensearchClusterPipelineReverseConnectionEndpointArrayInput
	// The current state of the cluster backup.
	State pulumi.StringPtrInput
	// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId pulumi.StringPtrInput
	// (Updatable) The OCID of the pipeline's subnet.
	SubnetId pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The amount of time in milliseconds since the pipeline was updated.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId pulumi.StringPtrInput
	// (Updatable) The OCID of the pipeline's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringPtrInput
}

func (OpensearchClusterPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchClusterPipelineState)(nil)).Elem()
}

type opensearchClusterPipelineArgs struct {
	// The OCID of the compartment to create the pipeline in.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody string `pulumi:"dataPrepperConfigurationBody"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) The amount of memory in GB, for each pipeline node.
	MemoryGb int `pulumi:"memoryGb"`
	// (Updatable) The number of nodes configured for the pipeline.
	NodeCount int `pulumi:"nodeCount"`
	// (Updatable) The pipeline node shape.
	NodeShape *string `pulumi:"nodeShape"`
	// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId *string `pulumi:"nsgId"`
	// (Updatable) The number of OCPUs configured for each pipeline node.
	OcpuCount int `pulumi:"ocpuCount"`
	// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
	OpcDryRun *bool `pulumi:"opcDryRun"`
	// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody string `pulumi:"pipelineConfigurationBody"`
	// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints []OpensearchClusterPipelineReverseConnectionEndpoint `pulumi:"reverseConnectionEndpoints"`
	// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId *string `pulumi:"subnetCompartmentId"`
	// (Updatable) The OCID of the pipeline's subnet.
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId *string `pulumi:"vcnCompartmentId"`
	// (Updatable) The OCID of the pipeline's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId *string `pulumi:"vcnId"`
}

// The set of arguments for constructing a OpensearchClusterPipeline resource.
type OpensearchClusterPipelineArgs struct {
	// The OCID of the compartment to create the pipeline in.
	CompartmentId pulumi.StringInput
	// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	DataPrepperConfigurationBody pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) The amount of memory in GB, for each pipeline node.
	MemoryGb pulumi.IntInput
	// (Updatable) The number of nodes configured for the pipeline.
	NodeCount pulumi.IntInput
	// (Updatable) The pipeline node shape.
	NodeShape pulumi.StringPtrInput
	// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
	NsgId pulumi.StringPtrInput
	// (Updatable) The number of OCPUs configured for each pipeline node.
	OcpuCount pulumi.IntInput
	// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
	OpcDryRun pulumi.BoolPtrInput
	// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
	PipelineConfigurationBody pulumi.StringInput
	// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
	ReverseConnectionEndpoints OpensearchClusterPipelineReverseConnectionEndpointArrayInput
	// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
	SubnetCompartmentId pulumi.StringPtrInput
	// (Updatable) The OCID of the pipeline's subnet.
	SubnetId pulumi.StringPtrInput
	// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
	VcnCompartmentId pulumi.StringPtrInput
	// (Updatable) The OCID of the pipeline's VCN.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	VcnId pulumi.StringPtrInput
}

func (OpensearchClusterPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*opensearchClusterPipelineArgs)(nil)).Elem()
}

type OpensearchClusterPipelineInput interface {
	pulumi.Input

	ToOpensearchClusterPipelineOutput() OpensearchClusterPipelineOutput
	ToOpensearchClusterPipelineOutputWithContext(ctx context.Context) OpensearchClusterPipelineOutput
}

func (*OpensearchClusterPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchClusterPipeline)(nil)).Elem()
}

func (i *OpensearchClusterPipeline) ToOpensearchClusterPipelineOutput() OpensearchClusterPipelineOutput {
	return i.ToOpensearchClusterPipelineOutputWithContext(context.Background())
}

func (i *OpensearchClusterPipeline) ToOpensearchClusterPipelineOutputWithContext(ctx context.Context) OpensearchClusterPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchClusterPipelineOutput)
}

// OpensearchClusterPipelineArrayInput is an input type that accepts OpensearchClusterPipelineArray and OpensearchClusterPipelineArrayOutput values.
// You can construct a concrete instance of `OpensearchClusterPipelineArrayInput` via:
//
//	OpensearchClusterPipelineArray{ OpensearchClusterPipelineArgs{...} }
type OpensearchClusterPipelineArrayInput interface {
	pulumi.Input

	ToOpensearchClusterPipelineArrayOutput() OpensearchClusterPipelineArrayOutput
	ToOpensearchClusterPipelineArrayOutputWithContext(context.Context) OpensearchClusterPipelineArrayOutput
}

type OpensearchClusterPipelineArray []OpensearchClusterPipelineInput

func (OpensearchClusterPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchClusterPipeline)(nil)).Elem()
}

func (i OpensearchClusterPipelineArray) ToOpensearchClusterPipelineArrayOutput() OpensearchClusterPipelineArrayOutput {
	return i.ToOpensearchClusterPipelineArrayOutputWithContext(context.Background())
}

func (i OpensearchClusterPipelineArray) ToOpensearchClusterPipelineArrayOutputWithContext(ctx context.Context) OpensearchClusterPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchClusterPipelineArrayOutput)
}

// OpensearchClusterPipelineMapInput is an input type that accepts OpensearchClusterPipelineMap and OpensearchClusterPipelineMapOutput values.
// You can construct a concrete instance of `OpensearchClusterPipelineMapInput` via:
//
//	OpensearchClusterPipelineMap{ "key": OpensearchClusterPipelineArgs{...} }
type OpensearchClusterPipelineMapInput interface {
	pulumi.Input

	ToOpensearchClusterPipelineMapOutput() OpensearchClusterPipelineMapOutput
	ToOpensearchClusterPipelineMapOutputWithContext(context.Context) OpensearchClusterPipelineMapOutput
}

type OpensearchClusterPipelineMap map[string]OpensearchClusterPipelineInput

func (OpensearchClusterPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchClusterPipeline)(nil)).Elem()
}

func (i OpensearchClusterPipelineMap) ToOpensearchClusterPipelineMapOutput() OpensearchClusterPipelineMapOutput {
	return i.ToOpensearchClusterPipelineMapOutputWithContext(context.Background())
}

func (i OpensearchClusterPipelineMap) ToOpensearchClusterPipelineMapOutputWithContext(ctx context.Context) OpensearchClusterPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpensearchClusterPipelineMapOutput)
}

type OpensearchClusterPipelineOutput struct{ *pulumi.OutputState }

func (OpensearchClusterPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpensearchClusterPipeline)(nil)).Elem()
}

func (o OpensearchClusterPipelineOutput) ToOpensearchClusterPipelineOutput() OpensearchClusterPipelineOutput {
	return o
}

func (o OpensearchClusterPipelineOutput) ToOpensearchClusterPipelineOutputWithContext(ctx context.Context) OpensearchClusterPipelineOutput {
	return o
}

// The OCID of the compartment to create the pipeline in.
func (o OpensearchClusterPipelineOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The data prepper config in YAML format. The command accepts the data prepper config as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
func (o OpensearchClusterPipelineOutput) DataPrepperConfigurationBody() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.DataPrepperConfigurationBody }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o OpensearchClusterPipelineOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) The name of the cluster pipeline. Avoid entering confidential information.
func (o OpensearchClusterPipelineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o OpensearchClusterPipelineOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// (Updatable) The amount of memory in GB, for each pipeline node.
func (o OpensearchClusterPipelineOutput) MemoryGb() pulumi.IntOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.IntOutput { return v.MemoryGb }).(pulumi.IntOutput)
}

// (Updatable) The number of nodes configured for the pipeline.
func (o OpensearchClusterPipelineOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// (Updatable) The pipeline node shape.
func (o OpensearchClusterPipelineOutput) NodeShape() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.NodeShape }).(pulumi.StringOutput)
}

// (Updatable) The OCID of the NSG where the pipeline private endpoint vnic will be attached.
func (o OpensearchClusterPipelineOutput) NsgId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.NsgId }).(pulumi.StringOutput)
}

// (Updatable) The number of OCPUs configured for each pipeline node.
func (o OpensearchClusterPipelineOutput) OcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.IntOutput { return v.OcpuCount }).(pulumi.IntOutput)
}

// (Updatable) Indicates that the request is a dry run, if set to "true". A dry run request does not modify the configuration item details and is used only to perform validation on the submitted data.
func (o OpensearchClusterPipelineOutput) OpcDryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.BoolOutput { return v.OpcDryRun }).(pulumi.BoolOutput)
}

// The fully qualified domain name (FQDN) for the cluster's API endpoint.
func (o OpensearchClusterPipelineOutput) OpensearchPipelineFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.OpensearchPipelineFqdn }).(pulumi.StringOutput)
}

// The pipeline's private IP address.
func (o OpensearchClusterPipelineOutput) OpensearchPipelinePrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.OpensearchPipelinePrivateIp }).(pulumi.StringOutput)
}

// (Updatable) The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \.
func (o OpensearchClusterPipelineOutput) PipelineConfigurationBody() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.PipelineConfigurationBody }).(pulumi.StringOutput)
}

// The current state of the pipeline.
func (o OpensearchClusterPipelineOutput) PipelineMode() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.PipelineMode }).(pulumi.StringOutput)
}

// (Updatable) The customer IP and the corresponding fully qualified domain name that the pipeline will connect to.
func (o OpensearchClusterPipelineOutput) ReverseConnectionEndpoints() OpensearchClusterPipelineReverseConnectionEndpointArrayOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) OpensearchClusterPipelineReverseConnectionEndpointArrayOutput {
		return v.ReverseConnectionEndpoints
	}).(OpensearchClusterPipelineReverseConnectionEndpointArrayOutput)
}

// The current state of the cluster backup.
func (o OpensearchClusterPipelineOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) The OCID for the compartment where the pipeline's subnet is located.
func (o OpensearchClusterPipelineOutput) SubnetCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.SubnetCompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The OCID of the pipeline's subnet.
func (o OpensearchClusterPipelineOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o OpensearchClusterPipelineOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The date and time the cluster pipeline was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
func (o OpensearchClusterPipelineOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The amount of time in milliseconds since the pipeline was updated.
func (o OpensearchClusterPipelineOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

// (Updatable) The OCID for the compartment where the pipeline's VCN is located.
func (o OpensearchClusterPipelineOutput) VcnCompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.VcnCompartmentId }).(pulumi.StringOutput)
}

// (Updatable) The OCID of the pipeline's VCN.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o OpensearchClusterPipelineOutput) VcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpensearchClusterPipeline) pulumi.StringOutput { return v.VcnId }).(pulumi.StringOutput)
}

type OpensearchClusterPipelineArrayOutput struct{ *pulumi.OutputState }

func (OpensearchClusterPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpensearchClusterPipeline)(nil)).Elem()
}

func (o OpensearchClusterPipelineArrayOutput) ToOpensearchClusterPipelineArrayOutput() OpensearchClusterPipelineArrayOutput {
	return o
}

func (o OpensearchClusterPipelineArrayOutput) ToOpensearchClusterPipelineArrayOutputWithContext(ctx context.Context) OpensearchClusterPipelineArrayOutput {
	return o
}

func (o OpensearchClusterPipelineArrayOutput) Index(i pulumi.IntInput) OpensearchClusterPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpensearchClusterPipeline {
		return vs[0].([]*OpensearchClusterPipeline)[vs[1].(int)]
	}).(OpensearchClusterPipelineOutput)
}

type OpensearchClusterPipelineMapOutput struct{ *pulumi.OutputState }

func (OpensearchClusterPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpensearchClusterPipeline)(nil)).Elem()
}

func (o OpensearchClusterPipelineMapOutput) ToOpensearchClusterPipelineMapOutput() OpensearchClusterPipelineMapOutput {
	return o
}

func (o OpensearchClusterPipelineMapOutput) ToOpensearchClusterPipelineMapOutputWithContext(ctx context.Context) OpensearchClusterPipelineMapOutput {
	return o
}

func (o OpensearchClusterPipelineMapOutput) MapIndex(k pulumi.StringInput) OpensearchClusterPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpensearchClusterPipeline {
		return vs[0].(map[string]*OpensearchClusterPipeline)[vs[1].(string)]
	}).(OpensearchClusterPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchClusterPipelineInput)(nil)).Elem(), &OpensearchClusterPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchClusterPipelineArrayInput)(nil)).Elem(), OpensearchClusterPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpensearchClusterPipelineMapInput)(nil)).Elem(), OpensearchClusterPipelineMap{})
	pulumi.RegisterOutputType(OpensearchClusterPipelineOutput{})
	pulumi.RegisterOutputType(OpensearchClusterPipelineArrayOutput{})
	pulumi.RegisterOutputType(OpensearchClusterPipelineMapOutput{})
}
