// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package operatoraccesscontrol

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Operator Control Assignments in Oracle Cloud Infrastructure Operator Access Control service.
//
// Lists all Operator Control Assignments.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/OperatorAccessControl"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OperatorAccessControl.GetControlAssignments(ctx, &operatoraccesscontrol.GetControlAssignmentsArgs{
//				CompartmentId:       compartmentId,
//				OperatorControlName: pulumi.StringRef(testOperatorControl.Name),
//				ResourceName:        pulumi.StringRef(operatorControlAssignmentResourceName),
//				ResourceType:        pulumi.StringRef(operatorControlAssignmentResourceType),
//				State:               pulumi.StringRef(operatorControlAssignmentState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetControlAssignments(ctx *pulumi.Context, args *GetControlAssignmentsArgs, opts ...pulumi.InvokeOption) (*GetControlAssignmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetControlAssignmentsResult
	err := ctx.Invoke("oci:OperatorAccessControl/getControlAssignments:getControlAssignments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getControlAssignments.
type GetControlAssignmentsArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId string                        `pulumi:"compartmentId"`
	Filters       []GetControlAssignmentsFilter `pulumi:"filters"`
	// A filter to return OperatorControl that match the given operatorControlName.
	OperatorControlName *string `pulumi:"operatorControlName"`
	// A filter to return only resources that match the given ResourceName.
	ResourceName *string `pulumi:"resourceName"`
	// A filter to return only lists of resources that match the entire given service type.
	ResourceType *string `pulumi:"resourceType"`
	// A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
	State *string `pulumi:"state"`
}

// A collection of values returned by getControlAssignments.
type GetControlAssignmentsResult struct {
	// The OCID of the comparment that contains the operator control assignment.
	CompartmentId string                        `pulumi:"compartmentId"`
	Filters       []GetControlAssignmentsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of operator_control_assignment_collection.
	OperatorControlAssignmentCollections []GetControlAssignmentsOperatorControlAssignmentCollection `pulumi:"operatorControlAssignmentCollections"`
	OperatorControlName                  *string                                                    `pulumi:"operatorControlName"`
	// Name of the target resource.
	ResourceName *string `pulumi:"resourceName"`
	// resourceType for which the OperatorControlAssignment is applicable
	ResourceType *string `pulumi:"resourceType"`
	// The current lifcycle state of the OperatorControl.
	State *string `pulumi:"state"`
}

func GetControlAssignmentsOutput(ctx *pulumi.Context, args GetControlAssignmentsOutputArgs, opts ...pulumi.InvokeOption) GetControlAssignmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetControlAssignmentsResultOutput, error) {
			args := v.(GetControlAssignmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:OperatorAccessControl/getControlAssignments:getControlAssignments", args, GetControlAssignmentsResultOutput{}, options).(GetControlAssignmentsResultOutput), nil
		}).(GetControlAssignmentsResultOutput)
}

// A collection of arguments for invoking getControlAssignments.
type GetControlAssignmentsOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput                    `pulumi:"compartmentId"`
	Filters       GetControlAssignmentsFilterArrayInput `pulumi:"filters"`
	// A filter to return OperatorControl that match the given operatorControlName.
	OperatorControlName pulumi.StringPtrInput `pulumi:"operatorControlName"`
	// A filter to return only resources that match the given ResourceName.
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
	// A filter to return only lists of resources that match the entire given service type.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// A filter to return only resources whose lifecycleState matches the given OperatorControlAssignment lifecycleState.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetControlAssignmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlAssignmentsArgs)(nil)).Elem()
}

// A collection of values returned by getControlAssignments.
type GetControlAssignmentsResultOutput struct{ *pulumi.OutputState }

func (GetControlAssignmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetControlAssignmentsResult)(nil)).Elem()
}

func (o GetControlAssignmentsResultOutput) ToGetControlAssignmentsResultOutput() GetControlAssignmentsResultOutput {
	return o
}

func (o GetControlAssignmentsResultOutput) ToGetControlAssignmentsResultOutputWithContext(ctx context.Context) GetControlAssignmentsResultOutput {
	return o
}

// The OCID of the comparment that contains the operator control assignment.
func (o GetControlAssignmentsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetControlAssignmentsResultOutput) Filters() GetControlAssignmentsFilterArrayOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) []GetControlAssignmentsFilter { return v.Filters }).(GetControlAssignmentsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetControlAssignmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of operator_control_assignment_collection.
func (o GetControlAssignmentsResultOutput) OperatorControlAssignmentCollections() GetControlAssignmentsOperatorControlAssignmentCollectionArrayOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) []GetControlAssignmentsOperatorControlAssignmentCollection {
		return v.OperatorControlAssignmentCollections
	}).(GetControlAssignmentsOperatorControlAssignmentCollectionArrayOutput)
}

func (o GetControlAssignmentsResultOutput) OperatorControlName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) *string { return v.OperatorControlName }).(pulumi.StringPtrOutput)
}

// Name of the target resource.
func (o GetControlAssignmentsResultOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// resourceType for which the OperatorControlAssignment is applicable
func (o GetControlAssignmentsResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// The current lifcycle state of the OperatorControl.
func (o GetControlAssignmentsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetControlAssignmentsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetControlAssignmentsResultOutput{})
}
