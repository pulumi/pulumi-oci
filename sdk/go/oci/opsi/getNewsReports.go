// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of News Reports in Oracle Cloud Infrastructure Opsi service.
//
// Gets a list of news reports based on the query parameters specified. Either compartmentId or id query parameter must be specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/opsi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opsi.GetNewsReports(ctx, &opsi.GetNewsReportsArgs{
//				CompartmentId:          pulumi.StringRef(compartmentId),
//				CompartmentIdInSubtree: pulumi.BoolRef(newsReportCompartmentIdInSubtree),
//				NewsReportId:           pulumi.StringRef(testNewsReport.Id),
//				States:                 newsReportState,
//				Statuses:               newsReportStatus,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNewsReports(ctx *pulumi.Context, args *GetNewsReportsArgs, opts ...pulumi.InvokeOption) (*GetNewsReportsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNewsReportsResult
	err := ctx.Invoke("oci:Opsi/getNewsReports:getNewsReports", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNewsReports.
type GetNewsReportsArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// A flag to search all resources within a given compartment and all sub-compartments.
	CompartmentIdInSubtree *bool                  `pulumi:"compartmentIdInSubtree"`
	Filters                []GetNewsReportsFilter `pulumi:"filters"`
	// Unique Ops Insights news report identifier
	NewsReportId *string `pulumi:"newsReportId"`
	// Lifecycle states
	States []string `pulumi:"states"`
	// Resource Status
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by getNewsReports.
type GetNewsReportsResult struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId          *string                `pulumi:"compartmentId"`
	CompartmentIdInSubtree *bool                  `pulumi:"compartmentIdInSubtree"`
	Filters                []GetNewsReportsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of news_report_collection.
	NewsReportCollections []GetNewsReportsNewsReportCollection `pulumi:"newsReportCollections"`
	NewsReportId          *string                              `pulumi:"newsReportId"`
	// The current state of the news report.
	States []string `pulumi:"states"`
	// Indicates the status of a news report in Ops Insights.
	Statuses []string `pulumi:"statuses"`
}

func GetNewsReportsOutput(ctx *pulumi.Context, args GetNewsReportsOutputArgs, opts ...pulumi.InvokeOption) GetNewsReportsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNewsReportsResultOutput, error) {
			args := v.(GetNewsReportsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Opsi/getNewsReports:getNewsReports", args, GetNewsReportsResultOutput{}, options).(GetNewsReportsResultOutput), nil
		}).(GetNewsReportsResultOutput)
}

// A collection of arguments for invoking getNewsReports.
type GetNewsReportsOutputArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput `pulumi:"compartmentId"`
	// A flag to search all resources within a given compartment and all sub-compartments.
	CompartmentIdInSubtree pulumi.BoolPtrInput            `pulumi:"compartmentIdInSubtree"`
	Filters                GetNewsReportsFilterArrayInput `pulumi:"filters"`
	// Unique Ops Insights news report identifier
	NewsReportId pulumi.StringPtrInput `pulumi:"newsReportId"`
	// Lifecycle states
	States pulumi.StringArrayInput `pulumi:"states"`
	// Resource Status
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetNewsReportsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNewsReportsArgs)(nil)).Elem()
}

// A collection of values returned by getNewsReports.
type GetNewsReportsResultOutput struct{ *pulumi.OutputState }

func (GetNewsReportsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNewsReportsResult)(nil)).Elem()
}

func (o GetNewsReportsResultOutput) ToGetNewsReportsResultOutput() GetNewsReportsResultOutput {
	return o
}

func (o GetNewsReportsResultOutput) ToGetNewsReportsResultOutputWithContext(ctx context.Context) GetNewsReportsResultOutput {
	return o
}

// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
func (o GetNewsReportsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNewsReportsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetNewsReportsResultOutput) CompartmentIdInSubtree() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetNewsReportsResult) *bool { return v.CompartmentIdInSubtree }).(pulumi.BoolPtrOutput)
}

func (o GetNewsReportsResultOutput) Filters() GetNewsReportsFilterArrayOutput {
	return o.ApplyT(func(v GetNewsReportsResult) []GetNewsReportsFilter { return v.Filters }).(GetNewsReportsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNewsReportsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNewsReportsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of news_report_collection.
func (o GetNewsReportsResultOutput) NewsReportCollections() GetNewsReportsNewsReportCollectionArrayOutput {
	return o.ApplyT(func(v GetNewsReportsResult) []GetNewsReportsNewsReportCollection { return v.NewsReportCollections }).(GetNewsReportsNewsReportCollectionArrayOutput)
}

func (o GetNewsReportsResultOutput) NewsReportId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNewsReportsResult) *string { return v.NewsReportId }).(pulumi.StringPtrOutput)
}

// The current state of the news report.
func (o GetNewsReportsResultOutput) States() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNewsReportsResult) []string { return v.States }).(pulumi.StringArrayOutput)
}

// Indicates the status of a news report in Ops Insights.
func (o GetNewsReportsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNewsReportsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNewsReportsResultOutput{})
}
