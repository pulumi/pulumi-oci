// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the News Report resource in Oracle Cloud Infrastructure Opsi service.
//
// Create a news report in Ops Insights. The report will be enabled in Ops Insights. Insights will be emailed as per selected frequency.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/Opsi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Opsi.NewNewsReport(ctx, "test_news_report", &Opsi.NewsReportArgs{
//				CompartmentId: pulumi.Any(compartmentId),
//				ContentTypes: &opsi.NewsReportContentTypesArgs{
//					CapacityPlanningResources:                  pulumi.Any(newsReportContentTypesCapacityPlanningResources),
//					SqlInsightsFleetAnalysisResources:          pulumi.Any(newsReportContentTypesSqlInsightsFleetAnalysisResources),
//					SqlInsightsPerformanceDegradationResources: pulumi.Any(newsReportContentTypesSqlInsightsPerformanceDegradationResources),
//					SqlInsightsPlanChangesResources:            pulumi.Any(newsReportContentTypesSqlInsightsPlanChangesResources),
//					SqlInsightsTopDatabasesResources:           pulumi.Any(newsReportContentTypesSqlInsightsTopDatabasesResources),
//					SqlInsightsTopSqlByInsightsResources:       pulumi.Any(newsReportContentTypesSqlInsightsTopSqlByInsightsResources),
//					SqlInsightsTopSqlResources:                 pulumi.Any(newsReportContentTypesSqlInsightsTopSqlResources),
//				},
//				Description:                  pulumi.Any(newsReportDescription),
//				Locale:                       pulumi.Any(newsReportLocale),
//				Name:                         pulumi.Any(newsReportName),
//				NewsFrequency:                pulumi.Any(newsReportNewsFrequency),
//				OnsTopicId:                   pulumi.Any(testOnsTopic.Id),
//				AreChildCompartmentsIncluded: pulumi.Any(newsReportAreChildCompartmentsIncluded),
//				DayOfWeek:                    pulumi.Any(newsReportDayOfWeek),
//				DefinedTags: pulumi.StringMap{
//					"foo-namespace.bar-key": pulumi.String("value"),
//				},
//				FreeformTags: pulumi.StringMap{
//					"bar-key": pulumi.String("value"),
//				},
//				Status: pulumi.Any(newsReportStatus),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NewsReports can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import oci:Opsi/newsReport:NewsReport test_news_report "id"
// ```
type NewsReport struct {
	pulumi.CustomResourceState

	// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
	AreChildCompartmentsIncluded pulumi.BoolOutput `pulumi:"areChildCompartmentsIncluded"`
	// (Updatable) Compartment Identifier where the news report will be created.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Content types that the news report can handle.
	ContentTypes NewsReportContentTypesOutput `pulumi:"contentTypes"`
	// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
	DayOfWeek pulumi.StringOutput `pulumi:"dayOfWeek"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapOutput `pulumi:"definedTags"`
	// (Updatable) The description of the news report.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapOutput `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) Language of the news report.
	Locale pulumi.StringOutput `pulumi:"locale"`
	// (Updatable) The news report name.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) News report frequency.
	NewsFrequency pulumi.StringOutput `pulumi:"newsFrequency"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
	OnsTopicId pulumi.StringOutput `pulumi:"onsTopicId"`
	// The current state of the news report.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) Defines if the news report will be enabled or disabled.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringOutput `pulumi:"status"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapOutput `pulumi:"systemTags"`
	// The time the the news report was first enabled. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the news report was updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewNewsReport registers a new resource with the given unique name, arguments, and options.
func NewNewsReport(ctx *pulumi.Context,
	name string, args *NewsReportArgs, opts ...pulumi.ResourceOption) (*NewsReport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ContentTypes == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypes'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Locale == nil {
		return nil, errors.New("invalid value for required argument 'Locale'")
	}
	if args.NewsFrequency == nil {
		return nil, errors.New("invalid value for required argument 'NewsFrequency'")
	}
	if args.OnsTopicId == nil {
		return nil, errors.New("invalid value for required argument 'OnsTopicId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NewsReport
	err := ctx.RegisterResource("oci:Opsi/newsReport:NewsReport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNewsReport gets an existing NewsReport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNewsReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NewsReportState, opts ...pulumi.ResourceOption) (*NewsReport, error) {
	var resource NewsReport
	err := ctx.ReadResource("oci:Opsi/newsReport:NewsReport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NewsReport resources.
type newsReportState struct {
	// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
	AreChildCompartmentsIncluded *bool `pulumi:"areChildCompartmentsIncluded"`
	// (Updatable) Compartment Identifier where the news report will be created.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Content types that the news report can handle.
	ContentTypes *NewsReportContentTypes `pulumi:"contentTypes"`
	// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The description of the news report.
	Description *string `pulumi:"description"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) Language of the news report.
	Locale *string `pulumi:"locale"`
	// (Updatable) The news report name.
	Name *string `pulumi:"name"`
	// (Updatable) News report frequency.
	NewsFrequency *string `pulumi:"newsFrequency"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
	OnsTopicId *string `pulumi:"onsTopicId"`
	// The current state of the news report.
	State *string `pulumi:"state"`
	// (Updatable) Defines if the news report will be enabled or disabled.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status *string `pulumi:"status"`
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]string `pulumi:"systemTags"`
	// The time the the news report was first enabled. An RFC3339 formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the news report was updated. An RFC3339 formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type NewsReportState struct {
	// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
	AreChildCompartmentsIncluded pulumi.BoolPtrInput
	// (Updatable) Compartment Identifier where the news report will be created.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Content types that the news report can handle.
	ContentTypes NewsReportContentTypesPtrInput
	// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
	DayOfWeek pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The description of the news report.
	Description pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) Language of the news report.
	Locale pulumi.StringPtrInput
	// (Updatable) The news report name.
	Name pulumi.StringPtrInput
	// (Updatable) News report frequency.
	NewsFrequency pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
	OnsTopicId pulumi.StringPtrInput
	// The current state of the news report.
	State pulumi.StringPtrInput
	// (Updatable) Defines if the news report will be enabled or disabled.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringPtrInput
	// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.StringMapInput
	// The time the the news report was first enabled. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the news report was updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (NewsReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*newsReportState)(nil)).Elem()
}

type newsReportArgs struct {
	// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
	AreChildCompartmentsIncluded *bool `pulumi:"areChildCompartmentsIncluded"`
	// (Updatable) Compartment Identifier where the news report will be created.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Content types that the news report can handle.
	ContentTypes NewsReportContentTypes `pulumi:"contentTypes"`
	// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]string `pulumi:"definedTags"`
	// (Updatable) The description of the news report.
	Description string `pulumi:"description"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]string `pulumi:"freeformTags"`
	// (Updatable) Language of the news report.
	Locale string `pulumi:"locale"`
	// (Updatable) The news report name.
	Name *string `pulumi:"name"`
	// (Updatable) News report frequency.
	NewsFrequency string `pulumi:"newsFrequency"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
	OnsTopicId string `pulumi:"onsTopicId"`
	// (Updatable) Defines if the news report will be enabled or disabled.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a NewsReport resource.
type NewsReportArgs struct {
	// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
	AreChildCompartmentsIncluded pulumi.BoolPtrInput
	// (Updatable) Compartment Identifier where the news report will be created.
	CompartmentId pulumi.StringInput
	// (Updatable) Content types that the news report can handle.
	ContentTypes NewsReportContentTypesInput
	// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
	DayOfWeek pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.StringMapInput
	// (Updatable) The description of the news report.
	Description pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.StringMapInput
	// (Updatable) Language of the news report.
	Locale pulumi.StringInput
	// (Updatable) The news report name.
	Name pulumi.StringPtrInput
	// (Updatable) News report frequency.
	NewsFrequency pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
	OnsTopicId pulumi.StringInput
	// (Updatable) Defines if the news report will be enabled or disabled.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	Status pulumi.StringPtrInput
}

func (NewsReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*newsReportArgs)(nil)).Elem()
}

type NewsReportInput interface {
	pulumi.Input

	ToNewsReportOutput() NewsReportOutput
	ToNewsReportOutputWithContext(ctx context.Context) NewsReportOutput
}

func (*NewsReport) ElementType() reflect.Type {
	return reflect.TypeOf((**NewsReport)(nil)).Elem()
}

func (i *NewsReport) ToNewsReportOutput() NewsReportOutput {
	return i.ToNewsReportOutputWithContext(context.Background())
}

func (i *NewsReport) ToNewsReportOutputWithContext(ctx context.Context) NewsReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewsReportOutput)
}

// NewsReportArrayInput is an input type that accepts NewsReportArray and NewsReportArrayOutput values.
// You can construct a concrete instance of `NewsReportArrayInput` via:
//
//	NewsReportArray{ NewsReportArgs{...} }
type NewsReportArrayInput interface {
	pulumi.Input

	ToNewsReportArrayOutput() NewsReportArrayOutput
	ToNewsReportArrayOutputWithContext(context.Context) NewsReportArrayOutput
}

type NewsReportArray []NewsReportInput

func (NewsReportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NewsReport)(nil)).Elem()
}

func (i NewsReportArray) ToNewsReportArrayOutput() NewsReportArrayOutput {
	return i.ToNewsReportArrayOutputWithContext(context.Background())
}

func (i NewsReportArray) ToNewsReportArrayOutputWithContext(ctx context.Context) NewsReportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewsReportArrayOutput)
}

// NewsReportMapInput is an input type that accepts NewsReportMap and NewsReportMapOutput values.
// You can construct a concrete instance of `NewsReportMapInput` via:
//
//	NewsReportMap{ "key": NewsReportArgs{...} }
type NewsReportMapInput interface {
	pulumi.Input

	ToNewsReportMapOutput() NewsReportMapOutput
	ToNewsReportMapOutputWithContext(context.Context) NewsReportMapOutput
}

type NewsReportMap map[string]NewsReportInput

func (NewsReportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NewsReport)(nil)).Elem()
}

func (i NewsReportMap) ToNewsReportMapOutput() NewsReportMapOutput {
	return i.ToNewsReportMapOutputWithContext(context.Background())
}

func (i NewsReportMap) ToNewsReportMapOutputWithContext(ctx context.Context) NewsReportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewsReportMapOutput)
}

type NewsReportOutput struct{ *pulumi.OutputState }

func (NewsReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NewsReport)(nil)).Elem()
}

func (o NewsReportOutput) ToNewsReportOutput() NewsReportOutput {
	return o
}

func (o NewsReportOutput) ToNewsReportOutputWithContext(ctx context.Context) NewsReportOutput {
	return o
}

// (Updatable) A flag to consider the resources within a given compartment and all sub-compartments.
func (o NewsReportOutput) AreChildCompartmentsIncluded() pulumi.BoolOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.BoolOutput { return v.AreChildCompartmentsIncluded }).(pulumi.BoolOutput)
}

// (Updatable) Compartment Identifier where the news report will be created.
func (o NewsReportOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Content types that the news report can handle.
func (o NewsReportOutput) ContentTypes() NewsReportContentTypesOutput {
	return o.ApplyT(func(v *NewsReport) NewsReportContentTypesOutput { return v.ContentTypes }).(NewsReportContentTypesOutput)
}

// (Updatable) Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
func (o NewsReportOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.DayOfWeek }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o NewsReportOutput) DefinedTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringMapOutput { return v.DefinedTags }).(pulumi.StringMapOutput)
}

// (Updatable) The description of the news report.
func (o NewsReportOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o NewsReportOutput) FreeformTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringMapOutput { return v.FreeformTags }).(pulumi.StringMapOutput)
}

// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
func (o NewsReportOutput) LifecycleDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.LifecycleDetails }).(pulumi.StringOutput)
}

// (Updatable) Language of the news report.
func (o NewsReportOutput) Locale() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.Locale }).(pulumi.StringOutput)
}

// (Updatable) The news report name.
func (o NewsReportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Updatable) News report frequency.
func (o NewsReportOutput) NewsFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.NewsFrequency }).(pulumi.StringOutput)
}

// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
func (o NewsReportOutput) OnsTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.OnsTopicId }).(pulumi.StringOutput)
}

// The current state of the news report.
func (o NewsReportOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) Defines if the news report will be enabled or disabled.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o NewsReportOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
func (o NewsReportOutput) SystemTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringMapOutput { return v.SystemTags }).(pulumi.StringMapOutput)
}

// The time the the news report was first enabled. An RFC3339 formatted datetime string.
func (o NewsReportOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The time the news report was updated. An RFC3339 formatted datetime string.
func (o NewsReportOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *NewsReport) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type NewsReportArrayOutput struct{ *pulumi.OutputState }

func (NewsReportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NewsReport)(nil)).Elem()
}

func (o NewsReportArrayOutput) ToNewsReportArrayOutput() NewsReportArrayOutput {
	return o
}

func (o NewsReportArrayOutput) ToNewsReportArrayOutputWithContext(ctx context.Context) NewsReportArrayOutput {
	return o
}

func (o NewsReportArrayOutput) Index(i pulumi.IntInput) NewsReportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NewsReport {
		return vs[0].([]*NewsReport)[vs[1].(int)]
	}).(NewsReportOutput)
}

type NewsReportMapOutput struct{ *pulumi.OutputState }

func (NewsReportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NewsReport)(nil)).Elem()
}

func (o NewsReportMapOutput) ToNewsReportMapOutput() NewsReportMapOutput {
	return o
}

func (o NewsReportMapOutput) ToNewsReportMapOutputWithContext(ctx context.Context) NewsReportMapOutput {
	return o
}

func (o NewsReportMapOutput) MapIndex(k pulumi.StringInput) NewsReportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NewsReport {
		return vs[0].(map[string]*NewsReport)[vs[1].(string)]
	}).(NewsReportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NewsReportInput)(nil)).Elem(), &NewsReport{})
	pulumi.RegisterInputType(reflect.TypeOf((*NewsReportArrayInput)(nil)).Elem(), NewsReportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NewsReportMapInput)(nil)).Elem(), NewsReportMap{})
	pulumi.RegisterOutputType(NewsReportOutput{})
	pulumi.RegisterOutputType(NewsReportArrayOutput{})
	pulumi.RegisterOutputType(NewsReportMapOutput{})
}
