// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package optimizer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Recommendation Strategies in Oracle Cloud Infrastructure Optimizer service.
//
// Lists the existing strategies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v3/go/oci/optimizer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := optimizer.GetRecommendationStrategies(ctx, &optimizer.GetRecommendationStrategiesArgs{
//				CompartmentId:          compartmentId,
//				CompartmentIdInSubtree: recommendationStrategyCompartmentIdInSubtree,
//				Name:                   pulumi.StringRef(recommendationStrategyName),
//				RecommendationName:     pulumi.StringRef(testRecommendation.Name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRecommendationStrategies(ctx *pulumi.Context, args *GetRecommendationStrategiesArgs, opts ...pulumi.InvokeOption) (*GetRecommendationStrategiesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRecommendationStrategiesResult
	err := ctx.Invoke("oci:Optimizer/getRecommendationStrategies:getRecommendationStrategies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecommendationStrategies.
type GetRecommendationStrategiesArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
	//
	// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
	CompartmentIdInSubtree bool                                `pulumi:"compartmentIdInSubtree"`
	Filters                []GetRecommendationStrategiesFilter `pulumi:"filters"`
	// Optional. A filter that returns results that match the name specified.
	Name *string `pulumi:"name"`
	// Optional. A filter that returns results that match the recommendation name specified.
	RecommendationName *string `pulumi:"recommendationName"`
}

// A collection of values returned by getRecommendationStrategies.
type GetRecommendationStrategiesResult struct {
	CompartmentId          string                              `pulumi:"compartmentId"`
	CompartmentIdInSubtree bool                                `pulumi:"compartmentIdInSubtree"`
	Filters                []GetRecommendationStrategiesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the strategy parameter.
	Name               *string `pulumi:"name"`
	RecommendationName *string `pulumi:"recommendationName"`
	// The list of recommendation_strategy_collection.
	RecommendationStrategyCollections []GetRecommendationStrategiesRecommendationStrategyCollection `pulumi:"recommendationStrategyCollections"`
}

func GetRecommendationStrategiesOutput(ctx *pulumi.Context, args GetRecommendationStrategiesOutputArgs, opts ...pulumi.InvokeOption) GetRecommendationStrategiesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRecommendationStrategiesResultOutput, error) {
			args := v.(GetRecommendationStrategiesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("oci:Optimizer/getRecommendationStrategies:getRecommendationStrategies", args, GetRecommendationStrategiesResultOutput{}, options).(GetRecommendationStrategiesResultOutput), nil
		}).(GetRecommendationStrategiesResultOutput)
}

// A collection of arguments for invoking getRecommendationStrategies.
type GetRecommendationStrategiesOutputArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
	//
	// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
	CompartmentIdInSubtree pulumi.BoolInput                            `pulumi:"compartmentIdInSubtree"`
	Filters                GetRecommendationStrategiesFilterArrayInput `pulumi:"filters"`
	// Optional. A filter that returns results that match the name specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. A filter that returns results that match the recommendation name specified.
	RecommendationName pulumi.StringPtrInput `pulumi:"recommendationName"`
}

func (GetRecommendationStrategiesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecommendationStrategiesArgs)(nil)).Elem()
}

// A collection of values returned by getRecommendationStrategies.
type GetRecommendationStrategiesResultOutput struct{ *pulumi.OutputState }

func (GetRecommendationStrategiesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecommendationStrategiesResult)(nil)).Elem()
}

func (o GetRecommendationStrategiesResultOutput) ToGetRecommendationStrategiesResultOutput() GetRecommendationStrategiesResultOutput {
	return o
}

func (o GetRecommendationStrategiesResultOutput) ToGetRecommendationStrategiesResultOutputWithContext(ctx context.Context) GetRecommendationStrategiesResultOutput {
	return o
}

func (o GetRecommendationStrategiesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetRecommendationStrategiesResultOutput) CompartmentIdInSubtree() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) bool { return v.CompartmentIdInSubtree }).(pulumi.BoolOutput)
}

func (o GetRecommendationStrategiesResultOutput) Filters() GetRecommendationStrategiesFilterArrayOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) []GetRecommendationStrategiesFilter { return v.Filters }).(GetRecommendationStrategiesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRecommendationStrategiesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the strategy parameter.
func (o GetRecommendationStrategiesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetRecommendationStrategiesResultOutput) RecommendationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) *string { return v.RecommendationName }).(pulumi.StringPtrOutput)
}

// The list of recommendation_strategy_collection.
func (o GetRecommendationStrategiesResultOutput) RecommendationStrategyCollections() GetRecommendationStrategiesRecommendationStrategyCollectionArrayOutput {
	return o.ApplyT(func(v GetRecommendationStrategiesResult) []GetRecommendationStrategiesRecommendationStrategyCollection {
		return v.RecommendationStrategyCollections
	}).(GetRecommendationStrategiesRecommendationStrategyCollectionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRecommendationStrategiesResultOutput{})
}
