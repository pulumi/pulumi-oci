// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package optimizer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Resource Actions in Oracle Cloud Infrastructure Optimizer service.
//
// Lists the Cloud Advisor resource actions that are supported.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/Optimizer"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Optimizer.GetResourceActions(ctx, &optimizer.GetResourceActionsArgs{
//				CompartmentId:          _var.Compartment_id,
//				CompartmentIdInSubtree: _var.Resource_action_compartment_id_in_subtree,
//				ChildTenancyIds:        _var.Resource_action_child_tenancy_ids,
//				IncludeOrganization:    pulumi.BoolRef(_var.Resource_action_include_organization),
//				Name:                   pulumi.StringRef(_var.Resource_action_name),
//				RecommendationId:       pulumi.StringRef(oci_optimizer_recommendation.Test_recommendation.Id),
//				RecommendationName:     pulumi.StringRef(oci_optimizer_recommendation.Test_recommendation.Name),
//				ResourceType:           pulumi.StringRef(_var.Resource_action_resource_type),
//				State:                  pulumi.StringRef(_var.Resource_action_state),
//				Status:                 pulumi.StringRef(_var.Resource_action_status),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetResourceActions(ctx *pulumi.Context, args *GetResourceActionsArgs, opts ...pulumi.InvokeOption) (*GetResourceActionsResult, error) {
	var rv GetResourceActionsResult
	err := ctx.Invoke("oci:Optimizer/getResourceActions:getResourceActions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResourceActions.
type GetResourceActionsArgs struct {
	// A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
	//
	// If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
	//
	// It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
	//
	// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
	ChildTenancyIds []string `pulumi:"childTenancyIds"`
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
	//
	// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
	CompartmentIdInSubtree bool                       `pulumi:"compartmentIdInSubtree"`
	Filters                []GetResourceActionsFilter `pulumi:"filters"`
	// When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
	//
	// Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
	//
	// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
	IncludeOrganization *bool `pulumi:"includeOrganization"`
	// Optional. A filter that returns results that match the name specified.
	Name *string `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId *string `pulumi:"recommendationId"`
	// Optional. A filter that returns results that match the recommendation name specified.
	RecommendationName *string `pulumi:"recommendationName"`
	// Optional. A filter that returns results that match the resource type specified.
	ResourceType *string `pulumi:"resourceType"`
	// A filter that returns results that match the lifecycle state specified.
	State *string `pulumi:"state"`
	// A filter that returns recommendations that match the status specified.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getResourceActions.
type GetResourceActionsResult struct {
	ChildTenancyIds []string `pulumi:"childTenancyIds"`
	// The OCID of the compartment.
	CompartmentId          string                     `pulumi:"compartmentId"`
	CompartmentIdInSubtree bool                       `pulumi:"compartmentIdInSubtree"`
	Filters                []GetResourceActionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string `pulumi:"id"`
	IncludeOrganization *bool  `pulumi:"includeOrganization"`
	// The name assigned to the resource.
	Name *string `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId   *string `pulumi:"recommendationId"`
	RecommendationName *string `pulumi:"recommendationName"`
	// The list of resource_action_collection.
	ResourceActionCollections []GetResourceActionsResourceActionCollection `pulumi:"resourceActionCollections"`
	// The kind of resource.
	ResourceType *string `pulumi:"resourceType"`
	// The resource action's current state.
	State *string `pulumi:"state"`
	// The current status of the resource action.
	Status *string `pulumi:"status"`
}

func GetResourceActionsOutput(ctx *pulumi.Context, args GetResourceActionsOutputArgs, opts ...pulumi.InvokeOption) GetResourceActionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetResourceActionsResult, error) {
			args := v.(GetResourceActionsArgs)
			r, err := GetResourceActions(ctx, &args, opts...)
			var s GetResourceActionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetResourceActionsResultOutput)
}

// A collection of arguments for invoking getResourceActions.
type GetResourceActionsOutputArgs struct {
	// A list of child tenancies for which the respective data will be returned. Please note that  the parent tenancy id can also be included in this list. For example, if there is a parent P with two children A and B, to return results of only parent P and child A, this list should be populated with  tenancy id of parent P and child A.
	//
	// If this list contains a tenancy id that isn't part of the organization of parent P, the request will  fail. That is, let's say there is an organization with parent P with children A and B, and also one  other tenant T that isn't part of the organization. If T is included in the list of  childTenancyIds, the request will fail.
	//
	// It is important to note that if you are setting the includeOrganization parameter value as true and  also populating the childTenancyIds parameter with a list of child tenancies, the request will fail. The childTenancyIds and includeOrganization should be used exclusively.
	//
	// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
	ChildTenancyIds pulumi.StringArrayInput `pulumi:"childTenancyIds"`
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
	//
	// Can only be set to true when performing ListCompartments on the tenancy (root compartment).
	CompartmentIdInSubtree pulumi.BoolInput                   `pulumi:"compartmentIdInSubtree"`
	Filters                GetResourceActionsFilterArrayInput `pulumi:"filters"`
	// When set to true, the data for all child tenancies including the parent is returned. That is, if  there is an organization with parent P and children A and B, to return the data for the parent P, child  A and child B, this parameter value should be set to true.
	//
	// Please note that this parameter shouldn't be used along with childTenancyIds parameter. If you would like  to get results specifically for parent P and only child A, use the childTenancyIds parameter and populate the list with tenancy id of P and A.
	//
	// When using this parameter, please make sure to set the compartmentId with the parent tenancy ID.
	IncludeOrganization pulumi.BoolPtrInput `pulumi:"includeOrganization"`
	// Optional. A filter that returns results that match the name specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringPtrInput `pulumi:"recommendationId"`
	// Optional. A filter that returns results that match the recommendation name specified.
	RecommendationName pulumi.StringPtrInput `pulumi:"recommendationName"`
	// Optional. A filter that returns results that match the resource type specified.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// A filter that returns results that match the lifecycle state specified.
	State pulumi.StringPtrInput `pulumi:"state"`
	// A filter that returns recommendations that match the status specified.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetResourceActionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceActionsArgs)(nil)).Elem()
}

// A collection of values returned by getResourceActions.
type GetResourceActionsResultOutput struct{ *pulumi.OutputState }

func (GetResourceActionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceActionsResult)(nil)).Elem()
}

func (o GetResourceActionsResultOutput) ToGetResourceActionsResultOutput() GetResourceActionsResultOutput {
	return o
}

func (o GetResourceActionsResultOutput) ToGetResourceActionsResultOutputWithContext(ctx context.Context) GetResourceActionsResultOutput {
	return o
}

func (o GetResourceActionsResultOutput) ChildTenancyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResourceActionsResult) []string { return v.ChildTenancyIds }).(pulumi.StringArrayOutput)
}

// The OCID of the compartment.
func (o GetResourceActionsResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceActionsResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

func (o GetResourceActionsResultOutput) CompartmentIdInSubtree() pulumi.BoolOutput {
	return o.ApplyT(func(v GetResourceActionsResult) bool { return v.CompartmentIdInSubtree }).(pulumi.BoolOutput)
}

func (o GetResourceActionsResultOutput) Filters() GetResourceActionsFilterArrayOutput {
	return o.ApplyT(func(v GetResourceActionsResult) []GetResourceActionsFilter { return v.Filters }).(GetResourceActionsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetResourceActionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceActionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetResourceActionsResultOutput) IncludeOrganization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *bool { return v.IncludeOrganization }).(pulumi.BoolPtrOutput)
}

// The name assigned to the resource.
func (o GetResourceActionsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The unique OCID associated with the recommendation.
func (o GetResourceActionsResultOutput) RecommendationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.RecommendationId }).(pulumi.StringPtrOutput)
}

func (o GetResourceActionsResultOutput) RecommendationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.RecommendationName }).(pulumi.StringPtrOutput)
}

// The list of resource_action_collection.
func (o GetResourceActionsResultOutput) ResourceActionCollections() GetResourceActionsResourceActionCollectionArrayOutput {
	return o.ApplyT(func(v GetResourceActionsResult) []GetResourceActionsResourceActionCollection {
		return v.ResourceActionCollections
	}).(GetResourceActionsResourceActionCollectionArrayOutput)
}

// The kind of resource.
func (o GetResourceActionsResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// The resource action's current state.
func (o GetResourceActionsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The current status of the resource action.
func (o GetResourceActionsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceActionsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetResourceActionsResultOutput{})
}
