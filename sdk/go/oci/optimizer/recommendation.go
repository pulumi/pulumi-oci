// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package optimizer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Recommendation resource in Oracle Cloud Infrastructure Optimizer service.
//
// Updates the recommendation that corresponds to the specified OCID.
// Use this operation to implement the following actions:
//
//   - Postpone recommendation
//   - Dismiss recommendation
//   - Reactivate recommendation
//
// ## Import
//
// Recommendations can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Optimizer/recommendation:Recommendation test_recommendation "id"
//
// ```
type Recommendation struct {
	pulumi.CustomResourceState

	// The unique OCID associated with the category.
	CategoryId pulumi.StringOutput `pulumi:"categoryId"`
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Text describing the recommendation.
	Description pulumi.StringOutput `pulumi:"description"`
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving pulumi.Float64Output `pulumi:"estimatedCostSaving"`
	// Additional metadata key/value pairs for the recommendation.
	ExtendedMetadata pulumi.MapOutput `pulumi:"extendedMetadata"`
	// The level of importance assigned to the recommendation.
	Importance pulumi.StringOutput `pulumi:"importance"`
	// The name of the profile level.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringOutput `pulumi:"recommendationId"`
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts RecommendationResourceCountArrayOutput `pulumi:"resourceCounts"`
	// The recommendation's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The status of the recommendation.
	Status pulumi.StringOutput `pulumi:"status"`
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels RecommendationSupportedLevelArrayOutput `pulumi:"supportedLevels"`
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringOutput `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringOutput `pulumi:"timeStatusEnd"`
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewRecommendation registers a new resource with the given unique name, arguments, and options.
func NewRecommendation(ctx *pulumi.Context,
	name string, args *RecommendationArgs, opts ...pulumi.ResourceOption) (*Recommendation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecommendationId == nil {
		return nil, errors.New("invalid value for required argument 'RecommendationId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Recommendation
	err := ctx.RegisterResource("oci:Optimizer/recommendation:Recommendation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecommendation gets an existing Recommendation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecommendation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecommendationState, opts ...pulumi.ResourceOption) (*Recommendation, error) {
	var resource Recommendation
	err := ctx.ReadResource("oci:Optimizer/recommendation:Recommendation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Recommendation resources.
type recommendationState struct {
	// The unique OCID associated with the category.
	CategoryId *string `pulumi:"categoryId"`
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Text describing the recommendation.
	Description *string `pulumi:"description"`
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving *float64 `pulumi:"estimatedCostSaving"`
	// Additional metadata key/value pairs for the recommendation.
	ExtendedMetadata map[string]interface{} `pulumi:"extendedMetadata"`
	// The level of importance assigned to the recommendation.
	Importance *string `pulumi:"importance"`
	// The name of the profile level.
	Name *string `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId *string `pulumi:"recommendationId"`
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts []RecommendationResourceCount `pulumi:"resourceCounts"`
	// The recommendation's current state.
	State *string `pulumi:"state"`
	// (Updatable) The status of the recommendation.
	Status *string `pulumi:"status"`
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels []RecommendationSupportedLevel `pulumi:"supportedLevels"`
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin *string `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type RecommendationState struct {
	// The unique OCID associated with the category.
	CategoryId pulumi.StringPtrInput
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId pulumi.StringPtrInput
	// Text describing the recommendation.
	Description pulumi.StringPtrInput
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving pulumi.Float64PtrInput
	// Additional metadata key/value pairs for the recommendation.
	ExtendedMetadata pulumi.MapInput
	// The level of importance assigned to the recommendation.
	Importance pulumi.StringPtrInput
	// The name of the profile level.
	Name pulumi.StringPtrInput
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringPtrInput
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts RecommendationResourceCountArrayInput
	// The recommendation's current state.
	State pulumi.StringPtrInput
	// (Updatable) The status of the recommendation.
	Status pulumi.StringPtrInput
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels RecommendationSupportedLevelArrayInput
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringPtrInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringPtrInput
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (RecommendationState) ElementType() reflect.Type {
	return reflect.TypeOf((*recommendationState)(nil)).Elem()
}

type recommendationArgs struct {
	// The unique OCID associated with the recommendation.
	RecommendationId string `pulumi:"recommendationId"`
	// (Updatable) The status of the recommendation.
	Status string `pulumi:"status"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
}

// The set of arguments for constructing a Recommendation resource.
type RecommendationArgs struct {
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringInput
	// (Updatable) The status of the recommendation.
	Status pulumi.StringInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringPtrInput
}

func (RecommendationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recommendationArgs)(nil)).Elem()
}

type RecommendationInput interface {
	pulumi.Input

	ToRecommendationOutput() RecommendationOutput
	ToRecommendationOutputWithContext(ctx context.Context) RecommendationOutput
}

func (*Recommendation) ElementType() reflect.Type {
	return reflect.TypeOf((**Recommendation)(nil)).Elem()
}

func (i *Recommendation) ToRecommendationOutput() RecommendationOutput {
	return i.ToRecommendationOutputWithContext(context.Background())
}

func (i *Recommendation) ToRecommendationOutputWithContext(ctx context.Context) RecommendationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationOutput)
}

func (i *Recommendation) ToOutput(ctx context.Context) pulumix.Output[*Recommendation] {
	return pulumix.Output[*Recommendation]{
		OutputState: i.ToRecommendationOutputWithContext(ctx).OutputState,
	}
}

// RecommendationArrayInput is an input type that accepts RecommendationArray and RecommendationArrayOutput values.
// You can construct a concrete instance of `RecommendationArrayInput` via:
//
//	RecommendationArray{ RecommendationArgs{...} }
type RecommendationArrayInput interface {
	pulumi.Input

	ToRecommendationArrayOutput() RecommendationArrayOutput
	ToRecommendationArrayOutputWithContext(context.Context) RecommendationArrayOutput
}

type RecommendationArray []RecommendationInput

func (RecommendationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Recommendation)(nil)).Elem()
}

func (i RecommendationArray) ToRecommendationArrayOutput() RecommendationArrayOutput {
	return i.ToRecommendationArrayOutputWithContext(context.Background())
}

func (i RecommendationArray) ToRecommendationArrayOutputWithContext(ctx context.Context) RecommendationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationArrayOutput)
}

func (i RecommendationArray) ToOutput(ctx context.Context) pulumix.Output[[]*Recommendation] {
	return pulumix.Output[[]*Recommendation]{
		OutputState: i.ToRecommendationArrayOutputWithContext(ctx).OutputState,
	}
}

// RecommendationMapInput is an input type that accepts RecommendationMap and RecommendationMapOutput values.
// You can construct a concrete instance of `RecommendationMapInput` via:
//
//	RecommendationMap{ "key": RecommendationArgs{...} }
type RecommendationMapInput interface {
	pulumi.Input

	ToRecommendationMapOutput() RecommendationMapOutput
	ToRecommendationMapOutputWithContext(context.Context) RecommendationMapOutput
}

type RecommendationMap map[string]RecommendationInput

func (RecommendationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Recommendation)(nil)).Elem()
}

func (i RecommendationMap) ToRecommendationMapOutput() RecommendationMapOutput {
	return i.ToRecommendationMapOutputWithContext(context.Background())
}

func (i RecommendationMap) ToRecommendationMapOutputWithContext(ctx context.Context) RecommendationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendationMapOutput)
}

func (i RecommendationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Recommendation] {
	return pulumix.Output[map[string]*Recommendation]{
		OutputState: i.ToRecommendationMapOutputWithContext(ctx).OutputState,
	}
}

type RecommendationOutput struct{ *pulumi.OutputState }

func (RecommendationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recommendation)(nil)).Elem()
}

func (o RecommendationOutput) ToRecommendationOutput() RecommendationOutput {
	return o
}

func (o RecommendationOutput) ToRecommendationOutputWithContext(ctx context.Context) RecommendationOutput {
	return o
}

func (o RecommendationOutput) ToOutput(ctx context.Context) pulumix.Output[*Recommendation] {
	return pulumix.Output[*Recommendation]{
		OutputState: o.OutputState,
	}
}

// The unique OCID associated with the category.
func (o RecommendationOutput) CategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.CategoryId }).(pulumi.StringOutput)
}

// The OCID of the tenancy. The tenancy is the root compartment.
func (o RecommendationOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// Text describing the recommendation.
func (o RecommendationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The estimated cost savings, in dollars, for the recommendation.
func (o RecommendationOutput) EstimatedCostSaving() pulumi.Float64Output {
	return o.ApplyT(func(v *Recommendation) pulumi.Float64Output { return v.EstimatedCostSaving }).(pulumi.Float64Output)
}

// Additional metadata key/value pairs for the recommendation.
func (o RecommendationOutput) ExtendedMetadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.MapOutput { return v.ExtendedMetadata }).(pulumi.MapOutput)
}

// The level of importance assigned to the recommendation.
func (o RecommendationOutput) Importance() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.Importance }).(pulumi.StringOutput)
}

// The name of the profile level.
func (o RecommendationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique OCID associated with the recommendation.
func (o RecommendationOutput) RecommendationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.RecommendationId }).(pulumi.StringOutput)
}

// An array of `ResourceCount` objects grouped by the status of the resource actions.
func (o RecommendationOutput) ResourceCounts() RecommendationResourceCountArrayOutput {
	return o.ApplyT(func(v *Recommendation) RecommendationResourceCountArrayOutput { return v.ResourceCounts }).(RecommendationResourceCountArrayOutput)
}

// The recommendation's current state.
func (o RecommendationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) The status of the recommendation.
func (o RecommendationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
func (o RecommendationOutput) SupportedLevels() RecommendationSupportedLevelArrayOutput {
	return o.ApplyT(func(v *Recommendation) RecommendationSupportedLevelArrayOutput { return v.SupportedLevels }).(RecommendationSupportedLevelArrayOutput)
}

// The date and time the recommendation details were created, in the format defined by RFC3339.
func (o RecommendationOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
func (o RecommendationOutput) TimeStatusBegin() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.TimeStatusBegin }).(pulumi.StringOutput)
}

// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
//
// For example, "The current `postponed` status of the recommendation will end and change to `pending` on this date and time."
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o RecommendationOutput) TimeStatusEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.TimeStatusEnd }).(pulumi.StringOutput)
}

// The date and time the recommendation details were last updated, in the format defined by RFC3339.
func (o RecommendationOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Recommendation) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type RecommendationArrayOutput struct{ *pulumi.OutputState }

func (RecommendationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Recommendation)(nil)).Elem()
}

func (o RecommendationArrayOutput) ToRecommendationArrayOutput() RecommendationArrayOutput {
	return o
}

func (o RecommendationArrayOutput) ToRecommendationArrayOutputWithContext(ctx context.Context) RecommendationArrayOutput {
	return o
}

func (o RecommendationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Recommendation] {
	return pulumix.Output[[]*Recommendation]{
		OutputState: o.OutputState,
	}
}

func (o RecommendationArrayOutput) Index(i pulumi.IntInput) RecommendationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Recommendation {
		return vs[0].([]*Recommendation)[vs[1].(int)]
	}).(RecommendationOutput)
}

type RecommendationMapOutput struct{ *pulumi.OutputState }

func (RecommendationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Recommendation)(nil)).Elem()
}

func (o RecommendationMapOutput) ToRecommendationMapOutput() RecommendationMapOutput {
	return o
}

func (o RecommendationMapOutput) ToRecommendationMapOutputWithContext(ctx context.Context) RecommendationMapOutput {
	return o
}

func (o RecommendationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Recommendation] {
	return pulumix.Output[map[string]*Recommendation]{
		OutputState: o.OutputState,
	}
}

func (o RecommendationMapOutput) MapIndex(k pulumi.StringInput) RecommendationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Recommendation {
		return vs[0].(map[string]*Recommendation)[vs[1].(string)]
	}).(RecommendationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationInput)(nil)).Elem(), &Recommendation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationArrayInput)(nil)).Elem(), RecommendationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecommendationMapInput)(nil)).Elem(), RecommendationMap{})
	pulumi.RegisterOutputType(RecommendationOutput{})
	pulumi.RegisterOutputType(RecommendationArrayOutput{})
	pulumi.RegisterOutputType(RecommendationMapOutput{})
}
