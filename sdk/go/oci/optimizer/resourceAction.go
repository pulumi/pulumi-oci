// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package optimizer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Resource Action resource in Oracle Cloud Infrastructure Optimizer service.
//
// Updates the resource action that corresponds to the specified OCID.
// Use this operation to implement the following actions:
//
//   - Postpone resource action
//   - Ignore resource action
//   - Reactivate resource action
//
// ## Import
//
// ResourceActions can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:Optimizer/resourceAction:ResourceAction test_resource_action "id"
//
// ```
type ResourceAction struct {
	pulumi.CustomResourceState

	// Details about the recommended action.
	Actions ResourceActionActionArrayOutput `pulumi:"actions"`
	// The unique OCID associated with the category.
	CategoryId pulumi.StringOutput `pulumi:"categoryId"`
	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The name associated with the compartment.
	CompartmentName pulumi.StringOutput `pulumi:"compartmentName"`
	// The estimated cost savings, in dollars, for the resource action.
	EstimatedCostSaving pulumi.Float64Output `pulumi:"estimatedCostSaving"`
	// Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
	ExtendedMetadata pulumi.MapOutput `pulumi:"extendedMetadata"`
	// Custom metadata key/value pairs for the resource action.
	Metadata pulumi.MapOutput `pulumi:"metadata"`
	// The name assigned to the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringOutput `pulumi:"recommendationId"`
	// The unique OCID associated with the resource action.
	ResourceActionId pulumi.StringOutput `pulumi:"resourceActionId"`
	// The unique OCID associated with the resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The kind of resource.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The resource action's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The status of the resource action.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the resource action details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time that the resource action entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringOutput `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringOutput `pulumi:"timeStatusEnd"`
	// The date and time the resource action details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewResourceAction registers a new resource with the given unique name, arguments, and options.
func NewResourceAction(ctx *pulumi.Context,
	name string, args *ResourceActionArgs, opts ...pulumi.ResourceOption) (*ResourceAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceActionId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceActionId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource ResourceAction
	err := ctx.RegisterResource("oci:Optimizer/resourceAction:ResourceAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceAction gets an existing ResourceAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceActionState, opts ...pulumi.ResourceOption) (*ResourceAction, error) {
	var resource ResourceAction
	err := ctx.ReadResource("oci:Optimizer/resourceAction:ResourceAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceAction resources.
type resourceActionState struct {
	// Details about the recommended action.
	Actions []ResourceActionAction `pulumi:"actions"`
	// The unique OCID associated with the category.
	CategoryId *string `pulumi:"categoryId"`
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The name associated with the compartment.
	CompartmentName *string `pulumi:"compartmentName"`
	// The estimated cost savings, in dollars, for the resource action.
	EstimatedCostSaving *float64 `pulumi:"estimatedCostSaving"`
	// Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
	ExtendedMetadata map[string]interface{} `pulumi:"extendedMetadata"`
	// Custom metadata key/value pairs for the resource action.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The name assigned to the resource.
	Name *string `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId *string `pulumi:"recommendationId"`
	// The unique OCID associated with the resource action.
	ResourceActionId *string `pulumi:"resourceActionId"`
	// The unique OCID associated with the resource.
	ResourceId *string `pulumi:"resourceId"`
	// The kind of resource.
	ResourceType *string `pulumi:"resourceType"`
	// The resource action's current state.
	State *string `pulumi:"state"`
	// (Updatable) The status of the resource action.
	Status *string `pulumi:"status"`
	// The date and time the resource action details were created, in the format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time that the resource action entered its current status. The format is defined by RFC3339.
	TimeStatusBegin *string `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
	// The date and time the resource action details were last updated, in the format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type ResourceActionState struct {
	// Details about the recommended action.
	Actions ResourceActionActionArrayInput
	// The unique OCID associated with the category.
	CategoryId pulumi.StringPtrInput
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The name associated with the compartment.
	CompartmentName pulumi.StringPtrInput
	// The estimated cost savings, in dollars, for the resource action.
	EstimatedCostSaving pulumi.Float64PtrInput
	// Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
	ExtendedMetadata pulumi.MapInput
	// Custom metadata key/value pairs for the resource action.
	Metadata pulumi.MapInput
	// The name assigned to the resource.
	Name pulumi.StringPtrInput
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringPtrInput
	// The unique OCID associated with the resource action.
	ResourceActionId pulumi.StringPtrInput
	// The unique OCID associated with the resource.
	ResourceId pulumi.StringPtrInput
	// The kind of resource.
	ResourceType pulumi.StringPtrInput
	// The resource action's current state.
	State pulumi.StringPtrInput
	// (Updatable) The status of the resource action.
	Status pulumi.StringPtrInput
	// The date and time the resource action details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time that the resource action entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringPtrInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringPtrInput
	// The date and time the resource action details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (ResourceActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceActionState)(nil)).Elem()
}

type resourceActionArgs struct {
	// The unique OCID associated with the resource action.
	ResourceActionId string `pulumi:"resourceActionId"`
	// (Updatable) The status of the resource action.
	Status string `pulumi:"status"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
}

// The set of arguments for constructing a ResourceAction resource.
type ResourceActionArgs struct {
	// The unique OCID associated with the resource action.
	ResourceActionId pulumi.StringInput
	// (Updatable) The status of the resource action.
	Status pulumi.StringInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	//
	// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	TimeStatusEnd pulumi.StringPtrInput
}

func (ResourceActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceActionArgs)(nil)).Elem()
}

type ResourceActionInput interface {
	pulumi.Input

	ToResourceActionOutput() ResourceActionOutput
	ToResourceActionOutputWithContext(ctx context.Context) ResourceActionOutput
}

func (*ResourceAction) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAction)(nil)).Elem()
}

func (i *ResourceAction) ToResourceActionOutput() ResourceActionOutput {
	return i.ToResourceActionOutputWithContext(context.Background())
}

func (i *ResourceAction) ToResourceActionOutputWithContext(ctx context.Context) ResourceActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceActionOutput)
}

// ResourceActionArrayInput is an input type that accepts ResourceActionArray and ResourceActionArrayOutput values.
// You can construct a concrete instance of `ResourceActionArrayInput` via:
//
//	ResourceActionArray{ ResourceActionArgs{...} }
type ResourceActionArrayInput interface {
	pulumi.Input

	ToResourceActionArrayOutput() ResourceActionArrayOutput
	ToResourceActionArrayOutputWithContext(context.Context) ResourceActionArrayOutput
}

type ResourceActionArray []ResourceActionInput

func (ResourceActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceAction)(nil)).Elem()
}

func (i ResourceActionArray) ToResourceActionArrayOutput() ResourceActionArrayOutput {
	return i.ToResourceActionArrayOutputWithContext(context.Background())
}

func (i ResourceActionArray) ToResourceActionArrayOutputWithContext(ctx context.Context) ResourceActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceActionArrayOutput)
}

// ResourceActionMapInput is an input type that accepts ResourceActionMap and ResourceActionMapOutput values.
// You can construct a concrete instance of `ResourceActionMapInput` via:
//
//	ResourceActionMap{ "key": ResourceActionArgs{...} }
type ResourceActionMapInput interface {
	pulumi.Input

	ToResourceActionMapOutput() ResourceActionMapOutput
	ToResourceActionMapOutputWithContext(context.Context) ResourceActionMapOutput
}

type ResourceActionMap map[string]ResourceActionInput

func (ResourceActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceAction)(nil)).Elem()
}

func (i ResourceActionMap) ToResourceActionMapOutput() ResourceActionMapOutput {
	return i.ToResourceActionMapOutputWithContext(context.Background())
}

func (i ResourceActionMap) ToResourceActionMapOutputWithContext(ctx context.Context) ResourceActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceActionMapOutput)
}

type ResourceActionOutput struct{ *pulumi.OutputState }

func (ResourceActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAction)(nil)).Elem()
}

func (o ResourceActionOutput) ToResourceActionOutput() ResourceActionOutput {
	return o
}

func (o ResourceActionOutput) ToResourceActionOutputWithContext(ctx context.Context) ResourceActionOutput {
	return o
}

// Details about the recommended action.
func (o ResourceActionOutput) Actions() ResourceActionActionArrayOutput {
	return o.ApplyT(func(v *ResourceAction) ResourceActionActionArrayOutput { return v.Actions }).(ResourceActionActionArrayOutput)
}

// The unique OCID associated with the category.
func (o ResourceActionOutput) CategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.CategoryId }).(pulumi.StringOutput)
}

// The OCID of the compartment.
func (o ResourceActionOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// The name associated with the compartment.
func (o ResourceActionOutput) CompartmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.CompartmentName }).(pulumi.StringOutput)
}

// The estimated cost savings, in dollars, for the resource action.
func (o ResourceActionOutput) EstimatedCostSaving() pulumi.Float64Output {
	return o.ApplyT(func(v *ResourceAction) pulumi.Float64Output { return v.EstimatedCostSaving }).(pulumi.Float64Output)
}

// Additional metadata key/value pairs that you provide. They serve the same purpose and functionality as fields in the `metadata` object.
func (o ResourceActionOutput) ExtendedMetadata() pulumi.MapOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.MapOutput { return v.ExtendedMetadata }).(pulumi.MapOutput)
}

// Custom metadata key/value pairs for the resource action.
func (o ResourceActionOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

// The name assigned to the resource.
func (o ResourceActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique OCID associated with the recommendation.
func (o ResourceActionOutput) RecommendationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.RecommendationId }).(pulumi.StringOutput)
}

// The unique OCID associated with the resource action.
func (o ResourceActionOutput) ResourceActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.ResourceActionId }).(pulumi.StringOutput)
}

// The unique OCID associated with the resource.
func (o ResourceActionOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The kind of resource.
func (o ResourceActionOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The resource action's current state.
func (o ResourceActionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// (Updatable) The status of the resource action.
func (o ResourceActionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time the resource action details were created, in the format defined by RFC3339.
func (o ResourceActionOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The date and time that the resource action entered its current status. The format is defined by RFC3339.
func (o ResourceActionOutput) TimeStatusBegin() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.TimeStatusBegin }).(pulumi.StringOutput)
}

// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
//
// For example, "The current `postponed` status of the resource action will end and change to `pending` on this date and time."
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ResourceActionOutput) TimeStatusEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.TimeStatusEnd }).(pulumi.StringOutput)
}

// The date and time the resource action details were last updated, in the format defined by RFC3339.
func (o ResourceActionOutput) TimeUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceAction) pulumi.StringOutput { return v.TimeUpdated }).(pulumi.StringOutput)
}

type ResourceActionArrayOutput struct{ *pulumi.OutputState }

func (ResourceActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceAction)(nil)).Elem()
}

func (o ResourceActionArrayOutput) ToResourceActionArrayOutput() ResourceActionArrayOutput {
	return o
}

func (o ResourceActionArrayOutput) ToResourceActionArrayOutputWithContext(ctx context.Context) ResourceActionArrayOutput {
	return o
}

func (o ResourceActionArrayOutput) Index(i pulumi.IntInput) ResourceActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceAction {
		return vs[0].([]*ResourceAction)[vs[1].(int)]
	}).(ResourceActionOutput)
}

type ResourceActionMapOutput struct{ *pulumi.OutputState }

func (ResourceActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceAction)(nil)).Elem()
}

func (o ResourceActionMapOutput) ToResourceActionMapOutput() ResourceActionMapOutput {
	return o
}

func (o ResourceActionMapOutput) ToResourceActionMapOutputWithContext(ctx context.Context) ResourceActionMapOutput {
	return o
}

func (o ResourceActionMapOutput) MapIndex(k pulumi.StringInput) ResourceActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceAction {
		return vs[0].(map[string]*ResourceAction)[vs[1].(string)]
	}).(ResourceActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceActionInput)(nil)).Elem(), &ResourceAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceActionArrayInput)(nil)).Elem(), ResourceActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceActionMapInput)(nil)).Elem(), ResourceActionMap{})
	pulumi.RegisterOutputType(ResourceActionOutput{})
	pulumi.RegisterOutputType(ResourceActionArrayOutput{})
	pulumi.RegisterOutputType(ResourceActionMapOutput{})
}
