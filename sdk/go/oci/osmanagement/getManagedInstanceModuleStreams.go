// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed Instance Module Streams in Oracle Cloud Infrastructure OS Management service.
//
// Retrieve a list of module streams, along with a summary of their
// status, from a managed instance.  Filters may be applied to select
// a subset of module streams based on the filter criteria.
//
// The 'moduleName' attribute filters against the name of a module.
// It accepts strings of the format "<module>".  If this attribute
// is defined, only streams that belong to the specified module are
// included in the result set.  If it is not defined, the request is
// not subject to this filter.
//
// The "status" attribute filters against the state of a module stream.
// Valid values are "ENABLED", "DISABLED", and "ACTIVE".  If the
// attribute is set to "ENABLED", only module streams that are enabled
// are included in the result set.  If the attribute is set to "DISABLED",
// only module streams that are not enabled are included in the result
// set.  If the attribute is set to "ACTIVE", only module streams that
// are active are included in the result set.  If the attribute is not
// defined, the request is not subject to this filter.
//
// When sorting by the display name, the result set is sorted first
// by the module name and then by the stream name.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetManagedInstanceModuleStreams(ctx, &osmanagement.GetManagedInstanceModuleStreamsArgs{
//				ManagedInstanceId: _var.Managed_instance_id,
//				CompartmentId:     pulumi.StringRef(_var.Compartment_id),
//				ModuleName:        pulumi.StringRef(_var.Managed_instance_module_name),
//				StreamName:        pulumi.StringRef(_var.Managed_instance_module_stream_name),
//				StreamStatus:      pulumi.StringRef(_var.Managed_instance_module_stream_status),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetManagedInstanceModuleStreams(ctx *pulumi.Context, args *GetManagedInstanceModuleStreamsArgs, opts ...pulumi.InvokeOption) (*GetManagedInstanceModuleStreamsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedInstanceModuleStreamsResult
	err := ctx.Invoke("oci:OsManagement/getManagedInstanceModuleStreams:getManagedInstanceModuleStreams", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedInstanceModuleStreams.
type GetManagedInstanceModuleStreamsArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId *string                                 `pulumi:"compartmentId"`
	Filters       []GetManagedInstanceModuleStreamsFilter `pulumi:"filters"`
	// OCID for the managed instance
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName *string `pulumi:"moduleName"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName *string `pulumi:"streamName"`
	// The status of the stream
	//
	// A stream with the "ENABLED" status can be used as a source for installing profiles.  Streams with this status are also "ACTIVE".
	//
	// A stream with the "DISABLED" status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
	//
	// A stream with the "ACTIVE" status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
	StreamStatus *string `pulumi:"streamStatus"`
}

// A collection of values returned by getManagedInstanceModuleStreams.
type GetManagedInstanceModuleStreamsResult struct {
	CompartmentId *string                                 `pulumi:"compartmentId"`
	Filters       []GetManagedInstanceModuleStreamsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The name of the module that contains the stream profile
	ModuleName *string `pulumi:"moduleName"`
	// The list of module_stream_on_managed_instances.
	ModuleStreamOnManagedInstances []GetManagedInstanceModuleStreamsModuleStreamOnManagedInstance `pulumi:"moduleStreamOnManagedInstances"`
	// The name of the stream.
	StreamName   *string `pulumi:"streamName"`
	StreamStatus *string `pulumi:"streamStatus"`
}

func GetManagedInstanceModuleStreamsOutput(ctx *pulumi.Context, args GetManagedInstanceModuleStreamsOutputArgs, opts ...pulumi.InvokeOption) GetManagedInstanceModuleStreamsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedInstanceModuleStreamsResult, error) {
			args := v.(GetManagedInstanceModuleStreamsArgs)
			r, err := GetManagedInstanceModuleStreams(ctx, &args, opts...)
			var s GetManagedInstanceModuleStreamsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedInstanceModuleStreamsResultOutput)
}

// A collection of arguments for invoking getManagedInstanceModuleStreams.
type GetManagedInstanceModuleStreamsOutputArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId pulumi.StringPtrInput                           `pulumi:"compartmentId"`
	Filters       GetManagedInstanceModuleStreamsFilterArrayInput `pulumi:"filters"`
	// OCID for the managed instance
	ManagedInstanceId pulumi.StringInput `pulumi:"managedInstanceId"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName pulumi.StringPtrInput `pulumi:"moduleName"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName pulumi.StringPtrInput `pulumi:"streamName"`
	// The status of the stream
	//
	// A stream with the "ENABLED" status can be used as a source for installing profiles.  Streams with this status are also "ACTIVE".
	//
	// A stream with the "DISABLED" status cannot be the source for installing profiles.  To install profiles and packages from this stream, it must be enabled.
	//
	// A stream with the "ACTIVE" status can be used as a source for installing profiles.  The packages that comprise the stream are also used when a matching package is installed directly.  In general, a stream can have this status if it is the default stream for the module and no stream has been explicitly enabled.
	StreamStatus pulumi.StringPtrInput `pulumi:"streamStatus"`
}

func (GetManagedInstanceModuleStreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceModuleStreamsArgs)(nil)).Elem()
}

// A collection of values returned by getManagedInstanceModuleStreams.
type GetManagedInstanceModuleStreamsResultOutput struct{ *pulumi.OutputState }

func (GetManagedInstanceModuleStreamsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceModuleStreamsResult)(nil)).Elem()
}

func (o GetManagedInstanceModuleStreamsResultOutput) ToGetManagedInstanceModuleStreamsResultOutput() GetManagedInstanceModuleStreamsResultOutput {
	return o
}

func (o GetManagedInstanceModuleStreamsResultOutput) ToGetManagedInstanceModuleStreamsResultOutputWithContext(ctx context.Context) GetManagedInstanceModuleStreamsResultOutput {
	return o
}

func (o GetManagedInstanceModuleStreamsResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceModuleStreamsResultOutput) Filters() GetManagedInstanceModuleStreamsFilterArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) []GetManagedInstanceModuleStreamsFilter {
		return v.Filters
	}).(GetManagedInstanceModuleStreamsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedInstanceModuleStreamsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedInstanceModuleStreamsResultOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) string { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The name of the module that contains the stream profile
func (o GetManagedInstanceModuleStreamsResultOutput) ModuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) *string { return v.ModuleName }).(pulumi.StringPtrOutput)
}

// The list of module_stream_on_managed_instances.
func (o GetManagedInstanceModuleStreamsResultOutput) ModuleStreamOnManagedInstances() GetManagedInstanceModuleStreamsModuleStreamOnManagedInstanceArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) []GetManagedInstanceModuleStreamsModuleStreamOnManagedInstance {
		return v.ModuleStreamOnManagedInstances
	}).(GetManagedInstanceModuleStreamsModuleStreamOnManagedInstanceArrayOutput)
}

// The name of the stream.
func (o GetManagedInstanceModuleStreamsResultOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceModuleStreamsResultOutput) StreamStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceModuleStreamsResult) *string { return v.StreamStatus }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedInstanceModuleStreamsResultOutput{})
}
