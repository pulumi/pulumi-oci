// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Managed Instance Stream Profiles in Oracle Cloud Infrastructure OS Management service.
//
// Retrieve a list of module stream profiles, along with a summary of their
// of their status, from a managed instance.  Filters may be applied to
// select a subset of profiles based on the filter criteria.
//
// The "moduleName", "streamName", and "profileName" attributes combine
// to form a set of filters on the list of module stream profiles.  If
// a "modulName" is provided, only profiles that belong to that module
// are returned.  If both a "moduleName" and "streamName" are given,
// only profiles belonging to that module stream are returned.  Finally,
// if all three are given then only the particular profile indicated
// by the triple is returned.  It is not valid to supply a "streamName"
// without a "moduleName".  It is also not valid to supply a "profileName"
// without a "streamName".
//
// The "status" attribute filters against the state of a module stream
// profile.  Valid values are "INSTALLED" and "AVAILABLE".  If the
// attribute is set to "INSTALLED", only module stream profiles that
// are installed are included in the result set.  If the attribute is
// set to "AVAILABLE", only module stream profiles that are not
// installed are included in the result set.  If the attribute is not
// defined, the request is not subject to this filter.
//
// When sorting by display name, the result set is sorted first by
// module name, then by stream name, and finally by profile name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetManagedInstanceStreamProfile(ctx, &osmanagement.GetManagedInstanceStreamProfileArgs{
//				ManagedInstanceId: _var.Managed_instance_id,
//				CompartmentId:     pulumi.StringRef(_var.Compartment_id),
//				ModuleName:        pulumi.StringRef(_var.Managed_instance_module_name),
//				ProfileName:       pulumi.StringRef(_var.Managed_instance_module_stream_profile_name),
//				ProfileStatus:     pulumi.StringRef(_var.Managed_instance_profile_status),
//				StreamName:        pulumi.StringRef(_var.Managed_instance_module_stream_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetManagedInstanceStreamProfile(ctx *pulumi.Context, args *GetManagedInstanceStreamProfileArgs, opts ...pulumi.InvokeOption) (*GetManagedInstanceStreamProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetManagedInstanceStreamProfileResult
	err := ctx.Invoke("oci:OsManagement/getManagedInstanceStreamProfile:getManagedInstanceStreamProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedInstanceStreamProfile.
type GetManagedInstanceStreamProfileArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId *string                                 `pulumi:"compartmentId"`
	Filters       []GetManagedInstanceStreamProfileFilter `pulumi:"filters"`
	// OCID for the managed instance
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName *string `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName *string `pulumi:"profileName"`
	// The status of the profile.
	//
	// A profile with the "INSTALLED" status indicates that the profile has been installed.
	//
	// A profile with the "AVAILABLE" status indicates that the profile is not installed, but can be.
	ProfileStatus *string `pulumi:"profileStatus"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName *string `pulumi:"streamName"`
}

// A collection of values returned by getManagedInstanceStreamProfile.
type GetManagedInstanceStreamProfileResult struct {
	CompartmentId *string                                 `pulumi:"compartmentId"`
	Filters       []GetManagedInstanceStreamProfileFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The name of the module that contains the stream profile
	ModuleName *string `pulumi:"moduleName"`
	// The list of module_stream_profile_on_managed_instances.
	ModuleStreamProfileOnManagedInstances []GetManagedInstanceStreamProfileModuleStreamProfileOnManagedInstance `pulumi:"moduleStreamProfileOnManagedInstances"`
	// The name of the profile
	ProfileName   *string `pulumi:"profileName"`
	ProfileStatus *string `pulumi:"profileStatus"`
	// The name of the stream that contains the profile
	StreamName *string `pulumi:"streamName"`
}

func GetManagedInstanceStreamProfileOutput(ctx *pulumi.Context, args GetManagedInstanceStreamProfileOutputArgs, opts ...pulumi.InvokeOption) GetManagedInstanceStreamProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetManagedInstanceStreamProfileResult, error) {
			args := v.(GetManagedInstanceStreamProfileArgs)
			r, err := GetManagedInstanceStreamProfile(ctx, &args, opts...)
			var s GetManagedInstanceStreamProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetManagedInstanceStreamProfileResultOutput)
}

// A collection of arguments for invoking getManagedInstanceStreamProfile.
type GetManagedInstanceStreamProfileOutputArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId pulumi.StringPtrInput                           `pulumi:"compartmentId"`
	Filters       GetManagedInstanceStreamProfileFilterArrayInput `pulumi:"filters"`
	// OCID for the managed instance
	ManagedInstanceId pulumi.StringInput `pulumi:"managedInstanceId"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName pulumi.StringPtrInput `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName pulumi.StringPtrInput `pulumi:"profileName"`
	// The status of the profile.
	//
	// A profile with the "INSTALLED" status indicates that the profile has been installed.
	//
	// A profile with the "AVAILABLE" status indicates that the profile is not installed, but can be.
	ProfileStatus pulumi.StringPtrInput `pulumi:"profileStatus"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName pulumi.StringPtrInput `pulumi:"streamName"`
}

func (GetManagedInstanceStreamProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceStreamProfileArgs)(nil)).Elem()
}

// A collection of values returned by getManagedInstanceStreamProfile.
type GetManagedInstanceStreamProfileResultOutput struct{ *pulumi.OutputState }

func (GetManagedInstanceStreamProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedInstanceStreamProfileResult)(nil)).Elem()
}

func (o GetManagedInstanceStreamProfileResultOutput) ToGetManagedInstanceStreamProfileResultOutput() GetManagedInstanceStreamProfileResultOutput {
	return o
}

func (o GetManagedInstanceStreamProfileResultOutput) ToGetManagedInstanceStreamProfileResultOutputWithContext(ctx context.Context) GetManagedInstanceStreamProfileResultOutput {
	return o
}

func (o GetManagedInstanceStreamProfileResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceStreamProfileResultOutput) Filters() GetManagedInstanceStreamProfileFilterArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) []GetManagedInstanceStreamProfileFilter {
		return v.Filters
	}).(GetManagedInstanceStreamProfileFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetManagedInstanceStreamProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetManagedInstanceStreamProfileResultOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) string { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The name of the module that contains the stream profile
func (o GetManagedInstanceStreamProfileResultOutput) ModuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) *string { return v.ModuleName }).(pulumi.StringPtrOutput)
}

// The list of module_stream_profile_on_managed_instances.
func (o GetManagedInstanceStreamProfileResultOutput) ModuleStreamProfileOnManagedInstances() GetManagedInstanceStreamProfileModuleStreamProfileOnManagedInstanceArrayOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) []GetManagedInstanceStreamProfileModuleStreamProfileOnManagedInstance {
		return v.ModuleStreamProfileOnManagedInstances
	}).(GetManagedInstanceStreamProfileModuleStreamProfileOnManagedInstanceArrayOutput)
}

// The name of the profile
func (o GetManagedInstanceStreamProfileResultOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

func (o GetManagedInstanceStreamProfileResultOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) *string { return v.ProfileStatus }).(pulumi.StringPtrOutput)
}

// The name of the stream that contains the profile
func (o GetManagedInstanceStreamProfileResultOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetManagedInstanceStreamProfileResult) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetManagedInstanceStreamProfileResultOutput{})
}
