// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source resource in Oracle Cloud Infrastructure OS Management service.
//
// Returns a specific Software Source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetSoftwareSource(ctx, &osmanagement.GetSoftwareSourceArgs{
//				SoftwareSourceId: testSoftwareSourceOciOsmanagementSoftwareSource.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSoftwareSource(ctx *pulumi.Context, args *LookupSoftwareSourceArgs, opts ...pulumi.InvokeOption) (*LookupSoftwareSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSoftwareSourceResult
	err := ctx.Invoke("oci:OsManagement/getSoftwareSource:getSoftwareSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceArgs struct {
	// The OCID of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResult struct {
	// The architecture type supported by the Software Source
	ArchType string `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances []GetSoftwareSourceAssociatedManagedInstance `pulumi:"associatedManagedInstances"`
	// The yum repository checksum type used by this software source
	ChecksumType string `pulumi:"checksumType"`
	// OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Information specified by the user about the software source
	Description string `pulumi:"description"`
	// User friendly name for the software source
	DisplayName string `pulumi:"displayName"`
	// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl string `pulumi:"gpgKeyUrl"`
	// OCID for the Software Source
	Id string `pulumi:"id"`
	// Email address of the person maintaining this software source
	MaintainerEmail string `pulumi:"maintainerEmail"`
	// Name of the person maintaining this software source
	MaintainerName string `pulumi:"maintainerName"`
	// Phone number of the person maintaining this software source
	MaintainerPhone string `pulumi:"maintainerPhone"`
	// Number of packages
	Packages int `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	ParentId string `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName string `pulumi:"parentName"`
	// Type of the Software Source
	RepoType         string `pulumi:"repoType"`
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// The current state of the Software Source.
	State string `pulumi:"state"`
	// status of the software source.
	Status string `pulumi:"status"`
	// URL for the repostiory
	Url string `pulumi:"url"`
}

func LookupSoftwareSourceOutput(ctx *pulumi.Context, args LookupSoftwareSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSoftwareSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSoftwareSourceResult, error) {
			args := v.(LookupSoftwareSourceArgs)
			r, err := LookupSoftwareSource(ctx, &args, opts...)
			var s LookupSoftwareSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSoftwareSourceResultOutput)
}

// A collection of arguments for invoking getSoftwareSource.
type LookupSoftwareSourceOutputArgs struct {
	// The OCID of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
}

func (LookupSoftwareSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSource.
type LookupSoftwareSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSoftwareSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSoftwareSourceResult)(nil)).Elem()
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutput() LookupSoftwareSourceResultOutput {
	return o
}

func (o LookupSoftwareSourceResultOutput) ToLookupSoftwareSourceResultOutputWithContext(ctx context.Context) LookupSoftwareSourceResultOutput {
	return o
}

// The architecture type supported by the Software Source
func (o LookupSoftwareSourceResultOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ArchType }).(pulumi.StringOutput)
}

// list of the Managed Instances associated with this Software Sources
func (o LookupSoftwareSourceResultOutput) AssociatedManagedInstances() GetSoftwareSourceAssociatedManagedInstanceArrayOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) []GetSoftwareSourceAssociatedManagedInstance {
		return v.AssociatedManagedInstances
	}).(GetSoftwareSourceAssociatedManagedInstanceArrayOutput)
}

// The yum repository checksum type used by this software source
func (o LookupSoftwareSourceResultOutput) ChecksumType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ChecksumType }).(pulumi.StringOutput)
}

// OCID for the Compartment
func (o LookupSoftwareSourceResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o LookupSoftwareSourceResultOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]interface{} { return v.DefinedTags }).(pulumi.MapOutput)
}

// Information specified by the user about the software source
func (o LookupSoftwareSourceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Description }).(pulumi.StringOutput)
}

// User friendly name for the software source
func (o LookupSoftwareSourceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o LookupSoftwareSourceResultOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) map[string]interface{} { return v.FreeformTags }).(pulumi.MapOutput)
}

// Fingerprint of the GPG key for this software source
func (o LookupSoftwareSourceResultOutput) GpgKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyFingerprint }).(pulumi.StringOutput)
}

// ID of the GPG key for this software source
func (o LookupSoftwareSourceResultOutput) GpgKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyId }).(pulumi.StringOutput)
}

// URL of the GPG key for this software source
func (o LookupSoftwareSourceResultOutput) GpgKeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.GpgKeyUrl }).(pulumi.StringOutput)
}

// OCID for the Software Source
func (o LookupSoftwareSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Email address of the person maintaining this software source
func (o LookupSoftwareSourceResultOutput) MaintainerEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.MaintainerEmail }).(pulumi.StringOutput)
}

// Name of the person maintaining this software source
func (o LookupSoftwareSourceResultOutput) MaintainerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.MaintainerName }).(pulumi.StringOutput)
}

// Phone number of the person maintaining this software source
func (o LookupSoftwareSourceResultOutput) MaintainerPhone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.MaintainerPhone }).(pulumi.StringOutput)
}

// Number of packages
func (o LookupSoftwareSourceResultOutput) Packages() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) int { return v.Packages }).(pulumi.IntOutput)
}

// OCID for the parent software source, if there is one
func (o LookupSoftwareSourceResultOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ParentId }).(pulumi.StringOutput)
}

// Display name the parent software source, if there is one
func (o LookupSoftwareSourceResultOutput) ParentName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.ParentName }).(pulumi.StringOutput)
}

// Type of the Software Source
func (o LookupSoftwareSourceResultOutput) RepoType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.RepoType }).(pulumi.StringOutput)
}

func (o LookupSoftwareSourceResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// The current state of the Software Source.
func (o LookupSoftwareSourceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.State }).(pulumi.StringOutput)
}

// status of the software source.
func (o LookupSoftwareSourceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Status }).(pulumi.StringOutput)
}

// URL for the repostiory
func (o LookupSoftwareSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSoftwareSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSoftwareSourceResultOutput{})
}
