// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides details about a specific Software Source Module Stream Profile resource in Oracle Cloud Infrastructure OS Management service.
//
// Retrieve a detailed description of a module stream profile from a software source.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetSoftwareSourceModuleStreamProfile(ctx, &osmanagement.GetSoftwareSourceModuleStreamProfileArgs{
//				ModuleName:       _var.Software_source_module_name,
//				ProfileName:      _var.Software_source_module_stream_profile_name,
//				SoftwareSourceId: _var.Software_source.Id,
//				StreamName:       _var.Software_source_module_stream_name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSoftwareSourceModuleStreamProfile(ctx *pulumi.Context, args *GetSoftwareSourceModuleStreamProfileArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourceModuleStreamProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourceModuleStreamProfileResult
	err := ctx.Invoke("oci:OsManagement/getSoftwareSourceModuleStreamProfile:getSoftwareSourceModuleStreamProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourceModuleStreamProfile.
type GetSoftwareSourceModuleStreamProfileArgs struct {
	// The name of the module
	ModuleName string `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName string `pulumi:"profileName"`
	// The OCID of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// The name of the stream of the containing module
	StreamName string `pulumi:"streamName"`
}

// A collection of values returned by getSoftwareSourceModuleStreamProfile.
type GetSoftwareSourceModuleStreamProfileResult struct {
	// A description of the contents of the module stream profile
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates if this profile is the default for its module stream.
	IsDefault bool `pulumi:"isDefault"`
	// The name of the module that contains the stream profile
	ModuleName string `pulumi:"moduleName"`
	// A list of packages that constitute the profile.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management APIs that interact directly with packages.
	Packages []string `pulumi:"packages"`
	// The name of the profile
	ProfileName      string `pulumi:"profileName"`
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// The name of the stream that contains the profile
	StreamName string `pulumi:"streamName"`
}

func GetSoftwareSourceModuleStreamProfileOutput(ctx *pulumi.Context, args GetSoftwareSourceModuleStreamProfileOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourceModuleStreamProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourceModuleStreamProfileResult, error) {
			args := v.(GetSoftwareSourceModuleStreamProfileArgs)
			r, err := GetSoftwareSourceModuleStreamProfile(ctx, &args, opts...)
			var s GetSoftwareSourceModuleStreamProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourceModuleStreamProfileResultOutput)
}

// A collection of arguments for invoking getSoftwareSourceModuleStreamProfile.
type GetSoftwareSourceModuleStreamProfileOutputArgs struct {
	// The name of the module
	ModuleName pulumi.StringInput `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName pulumi.StringInput `pulumi:"profileName"`
	// The OCID of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
	// The name of the stream of the containing module
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (GetSoftwareSourceModuleStreamProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceModuleStreamProfileArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourceModuleStreamProfile.
type GetSoftwareSourceModuleStreamProfileResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourceModuleStreamProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceModuleStreamProfileResult)(nil)).Elem()
}

func (o GetSoftwareSourceModuleStreamProfileResultOutput) ToGetSoftwareSourceModuleStreamProfileResultOutput() GetSoftwareSourceModuleStreamProfileResultOutput {
	return o
}

func (o GetSoftwareSourceModuleStreamProfileResultOutput) ToGetSoftwareSourceModuleStreamProfileResultOutputWithContext(ctx context.Context) GetSoftwareSourceModuleStreamProfileResultOutput {
	return o
}

// A description of the contents of the module stream profile
func (o GetSoftwareSourceModuleStreamProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourceModuleStreamProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if this profile is the default for its module stream.
func (o GetSoftwareSourceModuleStreamProfileResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The name of the module that contains the stream profile
func (o GetSoftwareSourceModuleStreamProfileResultOutput) ModuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.ModuleName }).(pulumi.StringOutput)
}

// A list of packages that constitute the profile.  Each element in the list is the name of a package.  The name is suitable to use as an argument to other OS Management APIs that interact directly with packages.
func (o GetSoftwareSourceModuleStreamProfileResultOutput) Packages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) []string { return v.Packages }).(pulumi.StringArrayOutput)
}

// The name of the profile
func (o GetSoftwareSourceModuleStreamProfileResultOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.ProfileName }).(pulumi.StringOutput)
}

func (o GetSoftwareSourceModuleStreamProfileResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// The name of the stream that contains the profile
func (o GetSoftwareSourceModuleStreamProfileResultOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceModuleStreamProfileResult) string { return v.StreamName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourceModuleStreamProfileResultOutput{})
}
