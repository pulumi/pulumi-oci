// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Source Stream Profiles in Oracle Cloud Infrastructure OS Management service.
//
// Retrieve a list of module stream profiles from a software source.
// Filters may be applied to select a subset of module stream profiles
// based on the filter criteria.
//
// The "moduleName", "streamName", and "profileName" attributes combine
// to form a set of filters on the list of module stream profiles.  If
// a "moduleName" is provided, only profiles that belong to that module
// are returned.  If both a "moduleName" and "streamName" are given,
// only profiles belonging to that module stream are returned.  Finally,
// if all three are given then only the particular profile indicated
// by the triple is returned.  It is not valid to supply a "streamName"
// without a "moduleName".  It is also not valid to supply a "profileName"
// without a "streamName".
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetSoftwareSourceStreamProfile(ctx, &osmanagement.GetSoftwareSourceStreamProfileArgs{
//				SoftwareSourceId: _var.Software_source.Id,
//				CompartmentId:    pulumi.StringRef(_var.Compartment_id),
//				ModuleName:       pulumi.StringRef(_var.Software_source_module_name),
//				ProfileName:      pulumi.StringRef(_var.Software_source_module_stream_profile_name),
//				StreamName:       pulumi.StringRef(_var.Software_source_module_stream_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwareSourceStreamProfile(ctx *pulumi.Context, args *GetSoftwareSourceStreamProfileArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourceStreamProfileResult, error) {
	var rv GetSoftwareSourceStreamProfileResult
	err := ctx.Invoke("oci:OsManagement/getSoftwareSourceStreamProfile:getSoftwareSourceStreamProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSourceStreamProfile.
type GetSoftwareSourceStreamProfileArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId *string                                `pulumi:"compartmentId"`
	Filters       []GetSoftwareSourceStreamProfileFilter `pulumi:"filters"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName *string `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName *string `pulumi:"profileName"`
	// The OCID of the software source.
	SoftwareSourceId string `pulumi:"softwareSourceId"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName *string `pulumi:"streamName"`
}

// A collection of values returned by getSoftwareSourceStreamProfile.
type GetSoftwareSourceStreamProfileResult struct {
	CompartmentId *string                                `pulumi:"compartmentId"`
	Filters       []GetSoftwareSourceStreamProfileFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the module that contains the stream profile
	ModuleName *string `pulumi:"moduleName"`
	// The list of module_stream_profiles.
	ModuleStreamProfiles []GetSoftwareSourceStreamProfileModuleStreamProfile `pulumi:"moduleStreamProfiles"`
	// The name of the profile
	ProfileName      *string `pulumi:"profileName"`
	SoftwareSourceId string  `pulumi:"softwareSourceId"`
	// The name of the stream that contains the profile
	StreamName *string `pulumi:"streamName"`
}

func GetSoftwareSourceStreamProfileOutput(ctx *pulumi.Context, args GetSoftwareSourceStreamProfileOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourceStreamProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourceStreamProfileResult, error) {
			args := v.(GetSoftwareSourceStreamProfileArgs)
			r, err := GetSoftwareSourceStreamProfile(ctx, &args, opts...)
			var s GetSoftwareSourceStreamProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourceStreamProfileResultOutput)
}

// A collection of arguments for invoking getSoftwareSourceStreamProfile.
type GetSoftwareSourceStreamProfileOutputArgs struct {
	// The ID of the compartment in which to list resources. This parameter is optional and in some cases may have no effect.
	CompartmentId pulumi.StringPtrInput                          `pulumi:"compartmentId"`
	Filters       GetSoftwareSourceStreamProfileFilterArrayInput `pulumi:"filters"`
	// The name of a module.  This parameter is required if a streamName is specified.
	ModuleName pulumi.StringPtrInput `pulumi:"moduleName"`
	// The name of the profile of the containing module stream
	ProfileName pulumi.StringPtrInput `pulumi:"profileName"`
	// The OCID of the software source.
	SoftwareSourceId pulumi.StringInput `pulumi:"softwareSourceId"`
	// The name of the stream of the containing module.  This parameter is required if a profileName is specified.
	StreamName pulumi.StringPtrInput `pulumi:"streamName"`
}

func (GetSoftwareSourceStreamProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceStreamProfileArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSourceStreamProfile.
type GetSoftwareSourceStreamProfileResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourceStreamProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourceStreamProfileResult)(nil)).Elem()
}

func (o GetSoftwareSourceStreamProfileResultOutput) ToGetSoftwareSourceStreamProfileResultOutput() GetSoftwareSourceStreamProfileResultOutput {
	return o
}

func (o GetSoftwareSourceStreamProfileResultOutput) ToGetSoftwareSourceStreamProfileResultOutputWithContext(ctx context.Context) GetSoftwareSourceStreamProfileResultOutput {
	return o
}

func (o GetSoftwareSourceStreamProfileResultOutput) CompartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) *string { return v.CompartmentId }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourceStreamProfileResultOutput) Filters() GetSoftwareSourceStreamProfileFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) []GetSoftwareSourceStreamProfileFilter { return v.Filters }).(GetSoftwareSourceStreamProfileFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourceStreamProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the module that contains the stream profile
func (o GetSoftwareSourceStreamProfileResultOutput) ModuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) *string { return v.ModuleName }).(pulumi.StringPtrOutput)
}

// The list of module_stream_profiles.
func (o GetSoftwareSourceStreamProfileResultOutput) ModuleStreamProfiles() GetSoftwareSourceStreamProfileModuleStreamProfileArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) []GetSoftwareSourceStreamProfileModuleStreamProfile {
		return v.ModuleStreamProfiles
	}).(GetSoftwareSourceStreamProfileModuleStreamProfileArrayOutput)
}

// The name of the profile
func (o GetSoftwareSourceStreamProfileResultOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourceStreamProfileResultOutput) SoftwareSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) string { return v.SoftwareSourceId }).(pulumi.StringOutput)
}

// The name of the stream that contains the profile
func (o GetSoftwareSourceStreamProfileResultOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourceStreamProfileResult) *string { return v.StreamName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourceStreamProfileResultOutput{})
}
