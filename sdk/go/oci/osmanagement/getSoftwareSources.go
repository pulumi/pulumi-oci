// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Software Sources in Oracle Cloud Infrastructure OS Management service.
//
// Returns a list of all Software Sources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.GetSoftwareSources(ctx, &osmanagement.GetSoftwareSourcesArgs{
//				CompartmentId: compartmentId,
//				DisplayName:   pulumi.StringRef(softwareSourceDisplayName),
//				State:         pulumi.StringRef(softwareSourceState),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSoftwareSources(ctx *pulumi.Context, args *GetSoftwareSourcesArgs, opts ...pulumi.InvokeOption) (*GetSoftwareSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSoftwareSourcesResult
	err := ctx.Invoke("oci:OsManagement/getSoftwareSources:getSoftwareSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSoftwareSources.
type GetSoftwareSourcesArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId string `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetSoftwareSourcesFilter `pulumi:"filters"`
	// The current lifecycle state for the object.
	State *string `pulumi:"state"`
}

// A collection of values returned by getSoftwareSources.
type GetSoftwareSourcesResult struct {
	// OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// User friendly name for the software source
	DisplayName *string                    `pulumi:"displayName"`
	Filters     []GetSoftwareSourcesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of software_sources.
	SoftwareSources []GetSoftwareSourcesSoftwareSource `pulumi:"softwareSources"`
	// The current state of the Software Source.
	State *string `pulumi:"state"`
}

func GetSoftwareSourcesOutput(ctx *pulumi.Context, args GetSoftwareSourcesOutputArgs, opts ...pulumi.InvokeOption) GetSoftwareSourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSoftwareSourcesResult, error) {
			args := v.(GetSoftwareSourcesArgs)
			r, err := GetSoftwareSources(ctx, &args, opts...)
			var s GetSoftwareSourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSoftwareSourcesResultOutput)
}

// A collection of arguments for invoking getSoftwareSources.
type GetSoftwareSourcesOutputArgs struct {
	// The ID of the compartment in which to list resources.
	CompartmentId pulumi.StringInput `pulumi:"compartmentId"`
	// A user-friendly name. Does not have to be unique, and it's changeable.  Example: `My new resource`
	DisplayName pulumi.StringPtrInput              `pulumi:"displayName"`
	Filters     GetSoftwareSourcesFilterArrayInput `pulumi:"filters"`
	// The current lifecycle state for the object.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetSoftwareSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcesArgs)(nil)).Elem()
}

// A collection of values returned by getSoftwareSources.
type GetSoftwareSourcesResultOutput struct{ *pulumi.OutputState }

func (GetSoftwareSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSoftwareSourcesResult)(nil)).Elem()
}

func (o GetSoftwareSourcesResultOutput) ToGetSoftwareSourcesResultOutput() GetSoftwareSourcesResultOutput {
	return o
}

func (o GetSoftwareSourcesResultOutput) ToGetSoftwareSourcesResultOutputWithContext(ctx context.Context) GetSoftwareSourcesResultOutput {
	return o
}

// OCID for the Compartment
func (o GetSoftwareSourcesResultOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) string { return v.CompartmentId }).(pulumi.StringOutput)
}

// User friendly name for the software source
func (o GetSoftwareSourcesResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o GetSoftwareSourcesResultOutput) Filters() GetSoftwareSourcesFilterArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []GetSoftwareSourcesFilter { return v.Filters }).(GetSoftwareSourcesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSoftwareSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of software_sources.
func (o GetSoftwareSourcesResultOutput) SoftwareSources() GetSoftwareSourcesSoftwareSourceArrayOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) []GetSoftwareSourcesSoftwareSource { return v.SoftwareSources }).(GetSoftwareSourcesSoftwareSourceArrayOutput)
}

// The current state of the Software Source.
func (o GetSoftwareSourcesResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSoftwareSourcesResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSoftwareSourcesResultOutput{})
}
