// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource provides the Managed Instance Group resource in Oracle Cloud Infrastructure OS Management service.
//
// Creates a new Managed Instance Group on the management system.
// This will not contain any managed instances after it is first created,
// and they must be added later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.NewManagedInstanceGroup(ctx, "testManagedInstanceGroup", &OsManagement.ManagedInstanceGroupArgs{
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DisplayName:   pulumi.Any(_var.Managed_instance_group_display_name),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Managed_instance_group_description),
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				OsFamily: pulumi.Any(_var.Managed_instance_group_os_family),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ManagedInstanceGroups can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:OsManagement/managedInstanceGroup:ManagedInstanceGroup test_managed_instance_group "id"
//
// ```
type ManagedInstanceGroup struct {
	pulumi.CustomResourceState

	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the managed instance group
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Managed Instance Group identifier
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags         pulumi.MapOutput `pulumi:"freeformTags"`
	ManagedInstanceCount pulumi.IntOutput `pulumi:"managedInstanceCount"`
	// list of Managed Instances in the group
	ManagedInstances ManagedInstanceGroupManagedInstanceArrayOutput `pulumi:"managedInstances"`
	// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OsFamily pulumi.StringOutput `pulumi:"osFamily"`
	// The current state of the Software Source.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewManagedInstanceGroup registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceGroup(ctx *pulumi.Context,
	name string, args *ManagedInstanceGroupArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceGroup
	err := ctx.RegisterResource("oci:OsManagement/managedInstanceGroup:ManagedInstanceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceGroup gets an existing ManagedInstanceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceGroupState, opts ...pulumi.ResourceOption) (*ManagedInstanceGroup, error) {
	var resource ManagedInstanceGroup
	err := ctx.ReadResource("oci:OsManagement/managedInstanceGroup:ManagedInstanceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceGroup resources.
type managedInstanceGroupState struct {
	// (Updatable) OCID for the Compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the managed instance group
	Description *string `pulumi:"description"`
	// (Updatable) Managed Instance Group identifier
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags         map[string]interface{} `pulumi:"freeformTags"`
	ManagedInstanceCount *int                   `pulumi:"managedInstanceCount"`
	// list of Managed Instances in the group
	ManagedInstances []ManagedInstanceGroupManagedInstance `pulumi:"managedInstances"`
	// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OsFamily *string `pulumi:"osFamily"`
	// The current state of the Software Source.
	State *string `pulumi:"state"`
}

type ManagedInstanceGroupState struct {
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the managed instance group
	Description pulumi.StringPtrInput
	// (Updatable) Managed Instance Group identifier
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags         pulumi.MapInput
	ManagedInstanceCount pulumi.IntPtrInput
	// list of Managed Instances in the group
	ManagedInstances ManagedInstanceGroupManagedInstanceArrayInput
	// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OsFamily pulumi.StringPtrInput
	// The current state of the Software Source.
	State pulumi.StringPtrInput
}

func (ManagedInstanceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupState)(nil)).Elem()
}

type managedInstanceGroupArgs struct {
	// (Updatable) OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the managed instance group
	Description *string `pulumi:"description"`
	// (Updatable) Managed Instance Group identifier
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OsFamily *string `pulumi:"osFamily"`
}

// The set of arguments for constructing a ManagedInstanceGroup resource.
type ManagedInstanceGroupArgs struct {
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the managed instance group
	Description pulumi.StringPtrInput
	// (Updatable) Managed Instance Group identifier
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	OsFamily pulumi.StringPtrInput
}

func (ManagedInstanceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceGroupArgs)(nil)).Elem()
}

type ManagedInstanceGroupInput interface {
	pulumi.Input

	ToManagedInstanceGroupOutput() ManagedInstanceGroupOutput
	ToManagedInstanceGroupOutputWithContext(ctx context.Context) ManagedInstanceGroupOutput
}

func (*ManagedInstanceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroup)(nil)).Elem()
}

func (i *ManagedInstanceGroup) ToManagedInstanceGroupOutput() ManagedInstanceGroupOutput {
	return i.ToManagedInstanceGroupOutputWithContext(context.Background())
}

func (i *ManagedInstanceGroup) ToManagedInstanceGroupOutputWithContext(ctx context.Context) ManagedInstanceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupOutput)
}

func (i *ManagedInstanceGroup) ToOutput(ctx context.Context) pulumix.Output[*ManagedInstanceGroup] {
	return pulumix.Output[*ManagedInstanceGroup]{
		OutputState: i.ToManagedInstanceGroupOutputWithContext(ctx).OutputState,
	}
}

// ManagedInstanceGroupArrayInput is an input type that accepts ManagedInstanceGroupArray and ManagedInstanceGroupArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupArrayInput` via:
//
//	ManagedInstanceGroupArray{ ManagedInstanceGroupArgs{...} }
type ManagedInstanceGroupArrayInput interface {
	pulumi.Input

	ToManagedInstanceGroupArrayOutput() ManagedInstanceGroupArrayOutput
	ToManagedInstanceGroupArrayOutputWithContext(context.Context) ManagedInstanceGroupArrayOutput
}

type ManagedInstanceGroupArray []ManagedInstanceGroupInput

func (ManagedInstanceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroup)(nil)).Elem()
}

func (i ManagedInstanceGroupArray) ToManagedInstanceGroupArrayOutput() ManagedInstanceGroupArrayOutput {
	return i.ToManagedInstanceGroupArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupArray) ToManagedInstanceGroupArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupArrayOutput)
}

func (i ManagedInstanceGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*ManagedInstanceGroup] {
	return pulumix.Output[[]*ManagedInstanceGroup]{
		OutputState: i.ToManagedInstanceGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// ManagedInstanceGroupMapInput is an input type that accepts ManagedInstanceGroupMap and ManagedInstanceGroupMapOutput values.
// You can construct a concrete instance of `ManagedInstanceGroupMapInput` via:
//
//	ManagedInstanceGroupMap{ "key": ManagedInstanceGroupArgs{...} }
type ManagedInstanceGroupMapInput interface {
	pulumi.Input

	ToManagedInstanceGroupMapOutput() ManagedInstanceGroupMapOutput
	ToManagedInstanceGroupMapOutputWithContext(context.Context) ManagedInstanceGroupMapOutput
}

type ManagedInstanceGroupMap map[string]ManagedInstanceGroupInput

func (ManagedInstanceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroup)(nil)).Elem()
}

func (i ManagedInstanceGroupMap) ToManagedInstanceGroupMapOutput() ManagedInstanceGroupMapOutput {
	return i.ToManagedInstanceGroupMapOutputWithContext(context.Background())
}

func (i ManagedInstanceGroupMap) ToManagedInstanceGroupMapOutputWithContext(ctx context.Context) ManagedInstanceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceGroupMapOutput)
}

func (i ManagedInstanceGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ManagedInstanceGroup] {
	return pulumix.Output[map[string]*ManagedInstanceGroup]{
		OutputState: i.ToManagedInstanceGroupMapOutputWithContext(ctx).OutputState,
	}
}

type ManagedInstanceGroupOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceGroup)(nil)).Elem()
}

func (o ManagedInstanceGroupOutput) ToManagedInstanceGroupOutput() ManagedInstanceGroupOutput {
	return o
}

func (o ManagedInstanceGroupOutput) ToManagedInstanceGroupOutputWithContext(ctx context.Context) ManagedInstanceGroupOutput {
	return o
}

func (o ManagedInstanceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedInstanceGroup] {
	return pulumix.Output[*ManagedInstanceGroup]{
		OutputState: o.OutputState,
	}
}

// (Updatable) OCID for the Compartment
func (o ManagedInstanceGroupOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o ManagedInstanceGroupOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Information specified by the user about the managed instance group
func (o ManagedInstanceGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Updatable) Managed Instance Group identifier
func (o ManagedInstanceGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o ManagedInstanceGroupOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

func (o ManagedInstanceGroupOutput) ManagedInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.IntOutput { return v.ManagedInstanceCount }).(pulumi.IntOutput)
}

// list of Managed Instances in the group
func (o ManagedInstanceGroupOutput) ManagedInstances() ManagedInstanceGroupManagedInstanceArrayOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) ManagedInstanceGroupManagedInstanceArrayOutput {
		return v.ManagedInstances
	}).(ManagedInstanceGroupManagedInstanceArrayOutput)
}

// The Operating System type of the managed instance(s) on which this scheduled job will operate. If not specified, this defaults to Linux.
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o ManagedInstanceGroupOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.StringOutput { return v.OsFamily }).(pulumi.StringOutput)
}

// The current state of the Software Source.
func (o ManagedInstanceGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type ManagedInstanceGroupArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceGroup)(nil)).Elem()
}

func (o ManagedInstanceGroupArrayOutput) ToManagedInstanceGroupArrayOutput() ManagedInstanceGroupArrayOutput {
	return o
}

func (o ManagedInstanceGroupArrayOutput) ToManagedInstanceGroupArrayOutputWithContext(ctx context.Context) ManagedInstanceGroupArrayOutput {
	return o
}

func (o ManagedInstanceGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ManagedInstanceGroup] {
	return pulumix.Output[[]*ManagedInstanceGroup]{
		OutputState: o.OutputState,
	}
}

func (o ManagedInstanceGroupArrayOutput) Index(i pulumi.IntInput) ManagedInstanceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceGroup {
		return vs[0].([]*ManagedInstanceGroup)[vs[1].(int)]
	}).(ManagedInstanceGroupOutput)
}

type ManagedInstanceGroupMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceGroup)(nil)).Elem()
}

func (o ManagedInstanceGroupMapOutput) ToManagedInstanceGroupMapOutput() ManagedInstanceGroupMapOutput {
	return o
}

func (o ManagedInstanceGroupMapOutput) ToManagedInstanceGroupMapOutputWithContext(ctx context.Context) ManagedInstanceGroupMapOutput {
	return o
}

func (o ManagedInstanceGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ManagedInstanceGroup] {
	return pulumix.Output[map[string]*ManagedInstanceGroup]{
		OutputState: o.OutputState,
	}
}

func (o ManagedInstanceGroupMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceGroup {
		return vs[0].(map[string]*ManagedInstanceGroup)[vs[1].(string)]
	}).(ManagedInstanceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupInput)(nil)).Elem(), &ManagedInstanceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupArrayInput)(nil)).Elem(), ManagedInstanceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceGroupMapInput)(nil)).Elem(), ManagedInstanceGroupMap{})
	pulumi.RegisterOutputType(ManagedInstanceGroupOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceGroupMapOutput{})
}
