// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Managed Instance Management in Oracle Cloud Infrastructure OS Management service.
// The resource can be used to attach/detach parent software source, child software sources and managed instance groups from managed instances.
//
// Adds a parent software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance. Software sources that have this software source as a parent will be able to be added to this managed instance.
// Removes a software source from a managed instance. All child software sources will also be removed from the managed instance. Packages will no longer be able to be installed from these software sources.
//
// Adds a child software source to a managed instance. After the software source has been added, then packages from that software source can be installed on the managed instance.\
// Removes a child software source from a managed instance. Packages will no longer be able to be installed from these software sources.
//
// Adds a Managed Instance to a Managed Instance Group. After the Managed Instance has been added, then operations can be performed on the Managed Instance Group which will then apply to all Managed Instances in the group.
// Removes a Managed Instance from a Managed Instance Group.
//
// **NOTE** The resource on CREATE will detach any already attached parent software source, child software sources, managed instance groups to the managed instance.
// Destroying this resource will not delete any associations.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.NewManagedInstanceManagement(ctx, "testManagedInstanceManagement", &OsManagement.ManagedInstanceManagementArgs{
//				ManagedInstanceId: pulumi.Any(oci_osmanagement_managed_instance.Test_managed_instance.Id),
//				ParentSoftwareSource: &osmanagement.ManagedInstanceManagementParentSoftwareSourceArgs{
//					Id:   pulumi.Any(oci_osmanagement_software_source.Test_parent_software_source.Id),
//					Name: pulumi.Any(oci_osmanagement_software_source.Test_parent_software_source.Display_name),
//				},
//				ManagedInstanceGroups: osmanagement.ManagedInstanceManagementManagedInstanceGroupArray{
//					&osmanagement.ManagedInstanceManagementManagedInstanceGroupArgs{
//						Id:          pulumi.Any(oci_osmanagement_managed_instance_group.Test_managed_instance_group.Id),
//						DisplayName: pulumi.Any(_var.Managed_instance_group_display_name),
//					},
//				},
//				ChildSoftwareSources: osmanagement.ManagedInstanceManagementChildSoftwareSourceArray{
//					&osmanagement.ManagedInstanceManagementChildSoftwareSourceArgs{
//						Id:   pulumi.Any(oci_osmanagement_software_source.Test_software_source_child.Id),
//						Name: pulumi.Any(oci_osmanagement_software_source.Test_software_source_child.Display_name),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import is not supported for this resource.
type ManagedInstanceManagement struct {
	pulumi.CustomResourceState

	// (Updatable) list of child Software Sources attached to the Managed Instance
	ChildSoftwareSources ManagedInstanceManagementChildSoftwareSourceArrayOutput `pulumi:"childSoftwareSources"`
	// OCID for the Compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Information specified by the user about the managed instance
	Description pulumi.StringOutput `pulumi:"description"`
	// User friendly name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Time at which the instance last booted
	LastBoot pulumi.StringOutput `pulumi:"lastBoot"`
	// Time at which the instance last checked in
	LastCheckin pulumi.StringOutput `pulumi:"lastCheckin"`
	// (Updatable) The ids of the managed instance groups of which this instance is a member.
	ManagedInstanceGroups ManagedInstanceManagementManagedInstanceGroupArrayOutput `pulumi:"managedInstanceGroups"`
	// OCID for the managed instance
	ManagedInstanceId pulumi.StringOutput `pulumi:"managedInstanceId"`
	// Operating System Kernel Version
	OsKernelVersion pulumi.StringOutput `pulumi:"osKernelVersion"`
	// Operating System Name
	OsName pulumi.StringOutput `pulumi:"osName"`
	// Operating System Version
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// (Updatable) the parent (base) Software Source attached to the Managed Instance
	ParentSoftwareSource ManagedInstanceManagementParentSoftwareSourceOutput `pulumi:"parentSoftwareSource"`
	// status of the managed instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// Number of updates available to be installed
	UpdatesAvailable pulumi.IntOutput `pulumi:"updatesAvailable"`
}

// NewManagedInstanceManagement registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceManagement(ctx *pulumi.Context,
	name string, args *ManagedInstanceManagementArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceId'")
	}
	var resource ManagedInstanceManagement
	err := ctx.RegisterResource("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceManagement gets an existing ManagedInstanceManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceManagementState, opts ...pulumi.ResourceOption) (*ManagedInstanceManagement, error) {
	var resource ManagedInstanceManagement
	err := ctx.ReadResource("oci:OsManagement/managedInstanceManagement:ManagedInstanceManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceManagement resources.
type managedInstanceManagementState struct {
	// (Updatable) list of child Software Sources attached to the Managed Instance
	ChildSoftwareSources []ManagedInstanceManagementChildSoftwareSource `pulumi:"childSoftwareSources"`
	// OCID for the Compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// Information specified by the user about the managed instance
	Description *string `pulumi:"description"`
	// User friendly name
	DisplayName *string `pulumi:"displayName"`
	// Time at which the instance last booted
	LastBoot *string `pulumi:"lastBoot"`
	// Time at which the instance last checked in
	LastCheckin *string `pulumi:"lastCheckin"`
	// (Updatable) The ids of the managed instance groups of which this instance is a member.
	ManagedInstanceGroups []ManagedInstanceManagementManagedInstanceGroup `pulumi:"managedInstanceGroups"`
	// OCID for the managed instance
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// Operating System Kernel Version
	OsKernelVersion *string `pulumi:"osKernelVersion"`
	// Operating System Name
	OsName *string `pulumi:"osName"`
	// Operating System Version
	OsVersion *string `pulumi:"osVersion"`
	// (Updatable) the parent (base) Software Source attached to the Managed Instance
	ParentSoftwareSource *ManagedInstanceManagementParentSoftwareSource `pulumi:"parentSoftwareSource"`
	// status of the managed instance.
	Status *string `pulumi:"status"`
	// Number of updates available to be installed
	UpdatesAvailable *int `pulumi:"updatesAvailable"`
}

type ManagedInstanceManagementState struct {
	// (Updatable) list of child Software Sources attached to the Managed Instance
	ChildSoftwareSources ManagedInstanceManagementChildSoftwareSourceArrayInput
	// OCID for the Compartment
	CompartmentId pulumi.StringPtrInput
	// Information specified by the user about the managed instance
	Description pulumi.StringPtrInput
	// User friendly name
	DisplayName pulumi.StringPtrInput
	// Time at which the instance last booted
	LastBoot pulumi.StringPtrInput
	// Time at which the instance last checked in
	LastCheckin pulumi.StringPtrInput
	// (Updatable) The ids of the managed instance groups of which this instance is a member.
	ManagedInstanceGroups ManagedInstanceManagementManagedInstanceGroupArrayInput
	// OCID for the managed instance
	ManagedInstanceId pulumi.StringPtrInput
	// Operating System Kernel Version
	OsKernelVersion pulumi.StringPtrInput
	// Operating System Name
	OsName pulumi.StringPtrInput
	// Operating System Version
	OsVersion pulumi.StringPtrInput
	// (Updatable) the parent (base) Software Source attached to the Managed Instance
	ParentSoftwareSource ManagedInstanceManagementParentSoftwareSourcePtrInput
	// status of the managed instance.
	Status pulumi.StringPtrInput
	// Number of updates available to be installed
	UpdatesAvailable pulumi.IntPtrInput
}

func (ManagedInstanceManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceManagementState)(nil)).Elem()
}

type managedInstanceManagementArgs struct {
	// (Updatable) list of child Software Sources attached to the Managed Instance
	ChildSoftwareSources []ManagedInstanceManagementChildSoftwareSource `pulumi:"childSoftwareSources"`
	// (Updatable) The ids of the managed instance groups of which this instance is a member.
	ManagedInstanceGroups []ManagedInstanceManagementManagedInstanceGroup `pulumi:"managedInstanceGroups"`
	// OCID for the managed instance
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// (Updatable) the parent (base) Software Source attached to the Managed Instance
	ParentSoftwareSource *ManagedInstanceManagementParentSoftwareSource `pulumi:"parentSoftwareSource"`
}

// The set of arguments for constructing a ManagedInstanceManagement resource.
type ManagedInstanceManagementArgs struct {
	// (Updatable) list of child Software Sources attached to the Managed Instance
	ChildSoftwareSources ManagedInstanceManagementChildSoftwareSourceArrayInput
	// (Updatable) The ids of the managed instance groups of which this instance is a member.
	ManagedInstanceGroups ManagedInstanceManagementManagedInstanceGroupArrayInput
	// OCID for the managed instance
	ManagedInstanceId pulumi.StringInput
	// (Updatable) the parent (base) Software Source attached to the Managed Instance
	ParentSoftwareSource ManagedInstanceManagementParentSoftwareSourcePtrInput
}

func (ManagedInstanceManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceManagementArgs)(nil)).Elem()
}

type ManagedInstanceManagementInput interface {
	pulumi.Input

	ToManagedInstanceManagementOutput() ManagedInstanceManagementOutput
	ToManagedInstanceManagementOutputWithContext(ctx context.Context) ManagedInstanceManagementOutput
}

func (*ManagedInstanceManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceManagement)(nil)).Elem()
}

func (i *ManagedInstanceManagement) ToManagedInstanceManagementOutput() ManagedInstanceManagementOutput {
	return i.ToManagedInstanceManagementOutputWithContext(context.Background())
}

func (i *ManagedInstanceManagement) ToManagedInstanceManagementOutputWithContext(ctx context.Context) ManagedInstanceManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceManagementOutput)
}

// ManagedInstanceManagementArrayInput is an input type that accepts ManagedInstanceManagementArray and ManagedInstanceManagementArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceManagementArrayInput` via:
//
//	ManagedInstanceManagementArray{ ManagedInstanceManagementArgs{...} }
type ManagedInstanceManagementArrayInput interface {
	pulumi.Input

	ToManagedInstanceManagementArrayOutput() ManagedInstanceManagementArrayOutput
	ToManagedInstanceManagementArrayOutputWithContext(context.Context) ManagedInstanceManagementArrayOutput
}

type ManagedInstanceManagementArray []ManagedInstanceManagementInput

func (ManagedInstanceManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceManagement)(nil)).Elem()
}

func (i ManagedInstanceManagementArray) ToManagedInstanceManagementArrayOutput() ManagedInstanceManagementArrayOutput {
	return i.ToManagedInstanceManagementArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceManagementArray) ToManagedInstanceManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceManagementArrayOutput)
}

// ManagedInstanceManagementMapInput is an input type that accepts ManagedInstanceManagementMap and ManagedInstanceManagementMapOutput values.
// You can construct a concrete instance of `ManagedInstanceManagementMapInput` via:
//
//	ManagedInstanceManagementMap{ "key": ManagedInstanceManagementArgs{...} }
type ManagedInstanceManagementMapInput interface {
	pulumi.Input

	ToManagedInstanceManagementMapOutput() ManagedInstanceManagementMapOutput
	ToManagedInstanceManagementMapOutputWithContext(context.Context) ManagedInstanceManagementMapOutput
}

type ManagedInstanceManagementMap map[string]ManagedInstanceManagementInput

func (ManagedInstanceManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceManagement)(nil)).Elem()
}

func (i ManagedInstanceManagementMap) ToManagedInstanceManagementMapOutput() ManagedInstanceManagementMapOutput {
	return i.ToManagedInstanceManagementMapOutputWithContext(context.Background())
}

func (i ManagedInstanceManagementMap) ToManagedInstanceManagementMapOutputWithContext(ctx context.Context) ManagedInstanceManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceManagementMapOutput)
}

type ManagedInstanceManagementOutput struct{ *pulumi.OutputState }

func (ManagedInstanceManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceManagement)(nil)).Elem()
}

func (o ManagedInstanceManagementOutput) ToManagedInstanceManagementOutput() ManagedInstanceManagementOutput {
	return o
}

func (o ManagedInstanceManagementOutput) ToManagedInstanceManagementOutputWithContext(ctx context.Context) ManagedInstanceManagementOutput {
	return o
}

type ManagedInstanceManagementArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceManagement)(nil)).Elem()
}

func (o ManagedInstanceManagementArrayOutput) ToManagedInstanceManagementArrayOutput() ManagedInstanceManagementArrayOutput {
	return o
}

func (o ManagedInstanceManagementArrayOutput) ToManagedInstanceManagementArrayOutputWithContext(ctx context.Context) ManagedInstanceManagementArrayOutput {
	return o
}

func (o ManagedInstanceManagementArrayOutput) Index(i pulumi.IntInput) ManagedInstanceManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceManagement {
		return vs[0].([]*ManagedInstanceManagement)[vs[1].(int)]
	}).(ManagedInstanceManagementOutput)
}

type ManagedInstanceManagementMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceManagement)(nil)).Elem()
}

func (o ManagedInstanceManagementMapOutput) ToManagedInstanceManagementMapOutput() ManagedInstanceManagementMapOutput {
	return o
}

func (o ManagedInstanceManagementMapOutput) ToManagedInstanceManagementMapOutputWithContext(ctx context.Context) ManagedInstanceManagementMapOutput {
	return o
}

func (o ManagedInstanceManagementMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceManagement {
		return vs[0].(map[string]*ManagedInstanceManagement)[vs[1].(string)]
	}).(ManagedInstanceManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceManagementInput)(nil)).Elem(), &ManagedInstanceManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceManagementArrayInput)(nil)).Elem(), ManagedInstanceManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceManagementMapInput)(nil)).Elem(), ManagedInstanceManagementMap{})
	pulumi.RegisterOutputType(ManagedInstanceManagementOutput{})
	pulumi.RegisterOutputType(ManagedInstanceManagementArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceManagementMapOutput{})
}
