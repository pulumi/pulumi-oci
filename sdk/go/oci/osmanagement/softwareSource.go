// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package osmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-oci/sdk/go/oci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source resource in Oracle Cloud Infrastructure OS Management service.
//
// Creates a new custom Software Source on the management system.
// This will not contain any packages after it is first created,
// and they must be added later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-oci/sdk/go/oci/OsManagement"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := OsManagement.NewSoftwareSource(ctx, "testSoftwareSource", &OsManagement.SoftwareSourceArgs{
//				ArchType:      pulumi.Any(_var.Software_source_arch_type),
//				CompartmentId: pulumi.Any(_var.Compartment_id),
//				DisplayName:   pulumi.Any(_var.Software_source_display_name),
//				ChecksumType:  pulumi.Any(_var.Software_source_checksum_type),
//				DefinedTags: pulumi.Map{
//					"foo-namespace.bar-key": pulumi.Any("value"),
//				},
//				Description: pulumi.Any(_var.Software_source_description),
//				FreeformTags: pulumi.Map{
//					"bar-key": pulumi.Any("value"),
//				},
//				MaintainerEmail: pulumi.Any(_var.Software_source_maintainer_email),
//				MaintainerName:  pulumi.Any(_var.Software_source_maintainer_name),
//				MaintainerPhone: pulumi.Any(_var.Software_source_maintainer_phone),
//				ParentId:        pulumi.Any(oci_osmanagement_parent.Test_parent.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SoftwareSources can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import oci:OsManagement/softwareSource:SoftwareSource test_software_source "id"
//
// ```
type SoftwareSource struct {
	pulumi.CustomResourceState

	// The architecture type supported by the Software Source
	ArchType pulumi.StringOutput `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances SoftwareSourceAssociatedManagedInstanceArrayOutput `pulumi:"associatedManagedInstances"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringPtrOutput `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint pulumi.StringPtrOutput `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId pulumi.StringPtrOutput `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl pulumi.StringPtrOutput `pulumi:"gpgKeyUrl"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringPtrOutput `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringPtrOutput `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringPtrOutput `pulumi:"maintainerPhone"`
	// Number of packages
	Packages pulumi.IntPtrOutput `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ParentId pulumi.StringPtrOutput `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName pulumi.StringPtrOutput `pulumi:"parentName"`
	// Type of the Software Source
	RepoType pulumi.StringPtrOutput `pulumi:"repoType"`
	// The current state of the Software Source.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// status of the software source.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// URL for the repostiory
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewSoftwareSource registers a new resource with the given unique name, arguments, and options.
func NewSoftwareSource(ctx *pulumi.Context,
	name string, args *SoftwareSourceArgs, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchType == nil {
		return nil, errors.New("invalid value for required argument 'ArchType'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SoftwareSource
	err := ctx.RegisterResource("oci:OsManagement/softwareSource:SoftwareSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSoftwareSource gets an existing SoftwareSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSoftwareSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SoftwareSourceState, opts ...pulumi.ResourceOption) (*SoftwareSource, error) {
	var resource SoftwareSource
	err := ctx.ReadResource("oci:OsManagement/softwareSource:SoftwareSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SoftwareSource resources.
type softwareSourceState struct {
	// The architecture type supported by the Software Source
	ArchType *string `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances []SoftwareSourceAssociatedManagedInstance `pulumi:"associatedManagedInstances"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint *string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId *string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl *string `pulumi:"gpgKeyUrl"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail *string `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName *string `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone *string `pulumi:"maintainerPhone"`
	// Number of packages
	Packages *int `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ParentId *string `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName *string `pulumi:"parentName"`
	// Type of the Software Source
	RepoType *string `pulumi:"repoType"`
	// The current state of the Software Source.
	State *string `pulumi:"state"`
	// status of the software source.
	Status *string `pulumi:"status"`
	// URL for the repostiory
	Url *string `pulumi:"url"`
}

type SoftwareSourceState struct {
	// The architecture type supported by the Software Source
	ArchType pulumi.StringPtrInput
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances SoftwareSourceAssociatedManagedInstanceArrayInput
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringPtrInput
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint pulumi.StringPtrInput
	// ID of the GPG key for this software source
	GpgKeyId pulumi.StringPtrInput
	// URL of the GPG key for this software source
	GpgKeyUrl pulumi.StringPtrInput
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringPtrInput
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringPtrInput
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringPtrInput
	// Number of packages
	Packages pulumi.IntPtrInput
	// OCID for the parent software source, if there is one
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ParentId pulumi.StringPtrInput
	// Display name the parent software source, if there is one
	ParentName pulumi.StringPtrInput
	// Type of the Software Source
	RepoType pulumi.StringPtrInput
	// The current state of the Software Source.
	State pulumi.StringPtrInput
	// status of the software source.
	Status pulumi.StringPtrInput
	// URL for the repostiory
	Url pulumi.StringPtrInput
}

func (SoftwareSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceState)(nil)).Elem()
}

type softwareSourceArgs struct {
	// The architecture type supported by the Software Source
	ArchType string `pulumi:"archType"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail *string `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName *string `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone *string `pulumi:"maintainerPhone"`
	// OCID for the parent software source, if there is one
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ParentId *string `pulumi:"parentId"`
}

// The set of arguments for constructing a SoftwareSource resource.
type SoftwareSourceArgs struct {
	// The architecture type supported by the Software Source
	ArchType pulumi.StringInput
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringPtrInput
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringPtrInput
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringPtrInput
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringPtrInput
	// OCID for the parent software source, if there is one
	//
	// ** IMPORTANT **
	// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
	ParentId pulumi.StringPtrInput
}

func (SoftwareSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*softwareSourceArgs)(nil)).Elem()
}

type SoftwareSourceInput interface {
	pulumi.Input

	ToSoftwareSourceOutput() SoftwareSourceOutput
	ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput
}

func (*SoftwareSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (i *SoftwareSource) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return i.ToSoftwareSourceOutputWithContext(context.Background())
}

func (i *SoftwareSource) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceOutput)
}

// SoftwareSourceArrayInput is an input type that accepts SoftwareSourceArray and SoftwareSourceArrayOutput values.
// You can construct a concrete instance of `SoftwareSourceArrayInput` via:
//
//	SoftwareSourceArray{ SoftwareSourceArgs{...} }
type SoftwareSourceArrayInput interface {
	pulumi.Input

	ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput
	ToSoftwareSourceArrayOutputWithContext(context.Context) SoftwareSourceArrayOutput
}

type SoftwareSourceArray []SoftwareSourceInput

func (SoftwareSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return i.ToSoftwareSourceArrayOutputWithContext(context.Background())
}

func (i SoftwareSourceArray) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceArrayOutput)
}

// SoftwareSourceMapInput is an input type that accepts SoftwareSourceMap and SoftwareSourceMapOutput values.
// You can construct a concrete instance of `SoftwareSourceMapInput` via:
//
//	SoftwareSourceMap{ "key": SoftwareSourceArgs{...} }
type SoftwareSourceMapInput interface {
	pulumi.Input

	ToSoftwareSourceMapOutput() SoftwareSourceMapOutput
	ToSoftwareSourceMapOutputWithContext(context.Context) SoftwareSourceMapOutput
}

type SoftwareSourceMap map[string]SoftwareSourceInput

func (SoftwareSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return i.ToSoftwareSourceMapOutputWithContext(context.Background())
}

func (i SoftwareSourceMap) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareSourceMapOutput)
}

type SoftwareSourceOutput struct{ *pulumi.OutputState }

func (SoftwareSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutput() SoftwareSourceOutput {
	return o
}

func (o SoftwareSourceOutput) ToSoftwareSourceOutputWithContext(ctx context.Context) SoftwareSourceOutput {
	return o
}

// The architecture type supported by the Software Source
func (o SoftwareSourceOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.ArchType }).(pulumi.StringOutput)
}

// list of the Managed Instances associated with this Software Sources
func (o SoftwareSourceOutput) AssociatedManagedInstances() SoftwareSourceAssociatedManagedInstanceArrayOutput {
	return o.ApplyT(func(v *SoftwareSource) SoftwareSourceAssociatedManagedInstanceArrayOutput {
		return v.AssociatedManagedInstances
	}).(SoftwareSourceAssociatedManagedInstanceArrayOutput)
}

// (Updatable) The yum repository checksum type used by this software source
func (o SoftwareSourceOutput) ChecksumType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.ChecksumType }).(pulumi.StringPtrOutput)
}

// (Updatable) OCID for the Compartment
func (o SoftwareSourceOutput) CompartmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.CompartmentId }).(pulumi.StringOutput)
}

// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
func (o SoftwareSourceOutput) DefinedTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.MapOutput { return v.DefinedTags }).(pulumi.MapOutput)
}

// (Updatable) Information specified by the user about the software source
func (o SoftwareSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Updatable) User friendly name for the software source
func (o SoftwareSourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
func (o SoftwareSourceOutput) FreeformTags() pulumi.MapOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.MapOutput { return v.FreeformTags }).(pulumi.MapOutput)
}

// Fingerprint of the GPG key for this software source
func (o SoftwareSourceOutput) GpgKeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyFingerprint }).(pulumi.StringPtrOutput)
}

// ID of the GPG key for this software source
func (o SoftwareSourceOutput) GpgKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyId }).(pulumi.StringPtrOutput)
}

// URL of the GPG key for this software source
func (o SoftwareSourceOutput) GpgKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.GpgKeyUrl }).(pulumi.StringPtrOutput)
}

// (Updatable) Email address of the person maintaining this software source
func (o SoftwareSourceOutput) MaintainerEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.MaintainerEmail }).(pulumi.StringPtrOutput)
}

// (Updatable) Name of the person maintaining this software source
func (o SoftwareSourceOutput) MaintainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.MaintainerName }).(pulumi.StringPtrOutput)
}

// (Updatable) Phone number of the person maintaining this software source
func (o SoftwareSourceOutput) MaintainerPhone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.MaintainerPhone }).(pulumi.StringPtrOutput)
}

// Number of packages
func (o SoftwareSourceOutput) Packages() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.IntPtrOutput { return v.Packages }).(pulumi.IntPtrOutput)
}

// OCID for the parent software source, if there is one
//
// ** IMPORTANT **
// Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
func (o SoftwareSourceOutput) ParentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.ParentId }).(pulumi.StringPtrOutput)
}

// Display name the parent software source, if there is one
func (o SoftwareSourceOutput) ParentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.ParentName }).(pulumi.StringPtrOutput)
}

// Type of the Software Source
func (o SoftwareSourceOutput) RepoType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.RepoType }).(pulumi.StringPtrOutput)
}

// The current state of the Software Source.
func (o SoftwareSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// status of the software source.
func (o SoftwareSourceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// URL for the repostiory
func (o SoftwareSourceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareSource) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type SoftwareSourceArrayOutput struct{ *pulumi.OutputState }

func (SoftwareSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutput() SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) ToSoftwareSourceArrayOutputWithContext(ctx context.Context) SoftwareSourceArrayOutput {
	return o
}

func (o SoftwareSourceArrayOutput) Index(i pulumi.IntInput) SoftwareSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].([]*SoftwareSource)[vs[1].(int)]
	}).(SoftwareSourceOutput)
}

type SoftwareSourceMapOutput struct{ *pulumi.OutputState }

func (SoftwareSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SoftwareSource)(nil)).Elem()
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutput() SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) ToSoftwareSourceMapOutputWithContext(ctx context.Context) SoftwareSourceMapOutput {
	return o
}

func (o SoftwareSourceMapOutput) MapIndex(k pulumi.StringInput) SoftwareSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SoftwareSource {
		return vs[0].(map[string]*SoftwareSource)[vs[1].(string)]
	}).(SoftwareSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceInput)(nil)).Elem(), &SoftwareSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceArrayInput)(nil)).Elem(), SoftwareSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareSourceMapInput)(nil)).Elem(), SoftwareSourceMap{})
	pulumi.RegisterOutputType(SoftwareSourceOutput{})
	pulumi.RegisterOutputType(SoftwareSourceArrayOutput{})
	pulumi.RegisterOutputType(SoftwareSourceMapOutput{})
}
